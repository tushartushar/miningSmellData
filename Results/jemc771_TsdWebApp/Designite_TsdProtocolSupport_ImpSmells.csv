Implementation smell,Namespace,Class,File,Method,Description
Long Method,net.Tesacom.TsdProtocol.RT,RemoteTerm,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,ToXml,The method has 141 lines of code.
Long Method,net.Tesacom.TsdProtocol.RT,RemoteTerm,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,Parse,The method has 109 lines of code.
Long Method,net.Tesacom.TsdProtocol.TSD,TsdServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdServer.cs,OnServerMessageTransfer,The method has 130 lines of code.
Complex Method,net.Tesacom.TsdProtocol.Database,SqlServerDatabaseManager,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Database\SqlServerDatabaseManager.cs,RunSqlCommands,Cyclomatic complexity of the method is 16
Complex Method,net.Tesacom.TsdProtocol.DNP.DataLinkLayer,LinkHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPDataLink.cs,ByteToFuncCode,Cyclomatic complexity of the method is 11
Complex Method,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,ToBytes,Cyclomatic complexity of the method is 9
Complex Method,net.Tesacom.TsdProtocol.DNP,DNPApplicationPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,getDNPApplicationPacket,Cyclomatic complexity of the method is 13
Complex Method,net.Tesacom.TsdProtocol.DNP,DNPServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPServer.cs,onMessageTransfer,Cyclomatic complexity of the method is 10
Complex Method,net.Tesacom.TsdProtocol.DNP,DNPServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPServer.cs,Parse,Cyclomatic complexity of the method is 16
Complex Method,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,GetObjectType,Cyclomatic complexity of the method is 14
Complex Method,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,DNPObjectLayerObject,Cyclomatic complexity of the method is 23
Complex Method,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,Cyclomatic complexity of the method is 68
Complex Method,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,GetObjectHeader,Cyclomatic complexity of the method is 14
Complex Method,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,GetNumObjects,Cyclomatic complexity of the method is 8
Complex Method,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,Cyclomatic complexity of the method is 33
Complex Method,net.Tesacom.TsdProtocol,NewTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\NewTcpServerClass.cs,OnExceptionOnSocket,Cyclomatic complexity of the method is 10
Complex Method,net.Tesacom.TsdProtocol,NewTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\NewTcpServerClass.cs,findSelectedClient,Cyclomatic complexity of the method is 13
Complex Method,net.Tesacom.TsdProtocol,TcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpServerClass.cs,ListenForClients,Cyclomatic complexity of the method is 9
Complex Method,net.Tesacom.TsdProtocol,TcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpServerClass.cs,HandleClientComm,Cyclomatic complexity of the method is 9
Complex Method,net.Tesacom.TsdProtocol,PooledTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\PooledTcpServerClass.cs,HandleClientComm,Cyclomatic complexity of the method is 11
Complex Method,net.Tesacom.TsdProtocol,PooledTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\PooledTcpServerClass.cs,findSelectedClient,Cyclomatic complexity of the method is 9
Complex Method,net.Tesacom.TsdProtocol,ProtocolType,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpProtocolServer.cs,Parse,Cyclomatic complexity of the method is 12
Complex Method,net.Tesacom.TsdProtocol,ProtocolServerManager,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpProtocolServer.cs,Parse,Cyclomatic complexity of the method is 62
Complex Method,net.Tesacom.TsdProtocol,TcpProtocolServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpProtocolServer.cs,ParseVerbose,Cyclomatic complexity of the method is 10
Complex Method,net.Tesacom.TsdProtocol,TcpProtocolServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpProtocolServer.cs,GetVerbose,Cyclomatic complexity of the method is 10
Complex Method,net.Tesacom.TsdProtocol,TcpProtocolServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpProtocolServer.cs,Parse,Cyclomatic complexity of the method is 32
Complex Method,net.Tesacom.TsdProtocol,TSDConnection,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdProtocol.cs,equals,Cyclomatic complexity of the method is 9
Complex Method,net.Tesacom.TsdProtocol.IEC.IEC104Plus,IEC104PlusServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104PlusServer.cs,onMessageTransfer,Cyclomatic complexity of the method is 25
Complex Method,net.Tesacom.TsdProtocol.IEC.IEC104Plus,IEC104PlusServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104PlusServer.cs,Parse,Cyclomatic complexity of the method is 9
Complex Method,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,Parse,Cyclomatic complexity of the method is 14
Complex Method,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,ToBytes,Cyclomatic complexity of the method is 25
Complex Method,net.Tesacom.TsdProtocol.RT,RTCategory,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,ParseXML,Cyclomatic complexity of the method is 15
Complex Method,net.Tesacom.TsdProtocol.RT,RTEndPoint,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,Parse,Cyclomatic complexity of the method is 17
Complex Method,net.Tesacom.TsdProtocol.RT,RTManager,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,ParseCat,Cyclomatic complexity of the method is 9
Complex Method,net.Tesacom.TsdProtocol.RT,RTManager,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,GetXmlDoc,Cyclomatic complexity of the method is 9
Complex Method,net.Tesacom.TsdProtocol.RT,RTManager,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,GetXmlDoc,Cyclomatic complexity of the method is 13
Complex Method,net.Tesacom.TsdProtocol.RT,RTManager,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,GetXmlDoc,Cyclomatic complexity of the method is 11
Complex Method,net.Tesacom.TsdProtocol.RT,RTManager,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,GetXmlDoc,Cyclomatic complexity of the method is 15
Complex Method,net.Tesacom.TsdProtocol.RT,RTManager,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,GetXmlDoc,Cyclomatic complexity of the method is 12
Complex Method,net.Tesacom.TsdProtocol.RT,RTManager,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,SaveStats,Cyclomatic complexity of the method is 9
Complex Method,net.Tesacom.TsdProtocol.RT,RemoteTermData,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,MarkConnectionTimespan,Cyclomatic complexity of the method is 8
Complex Method,net.Tesacom.TsdProtocol.RT,RemoteTerm,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,ToXml,Cyclomatic complexity of the method is 13
Complex Method,net.Tesacom.TsdProtocol.RT,RemoteTerm,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,Parse,Cyclomatic complexity of the method is 46
Complex Method,net.Tesacom.TsdProtocol.RT,RemoteTerm,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,sendToTerminalConnection,Cyclomatic complexity of the method is 10
Complex Method,net.Tesacom.TsdProtocol.Status,StatusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,getCategoriesInRequest,Cyclomatic complexity of the method is 8
Complex Method,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,CalculateRelative,Cyclomatic complexity of the method is 11
Complex Method,net.Tesacom.TsdProtocol.TSD,TsdServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdServer.cs,OnServerMessageTransfer,Cyclomatic complexity of the method is 52
Complex Method,net.Tesacom.TsdProtocol.TSD,TsdServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdServer.cs,endConns,Cyclomatic complexity of the method is 9
Complex Method,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,Cyclomatic complexity of the method is 14
Complex Method,net.Tesacom.TsdProtocol.Edesur,AlarmMask,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Process,Cyclomatic complexity of the method is 32
Complex Method,net.Tesacom.TsdProtocol.Edesur,AlarmMask,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,ToString,Cyclomatic complexity of the method is 10
Complex Method,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,Cyclomatic complexity of the method is 14
Complex Method,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,Cyclomatic complexity of the method is 17
Complex Method,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,Cyclomatic complexity of the method is 17
Complex Method,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,Cyclomatic complexity of the method is 17
Complex Method,net.Tesacom.TsdProtocol.Modbus,ModbusFunctionImplemented,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,CheckFunction,Cyclomatic complexity of the method is 15
Complex Method,net.Tesacom.TsdProtocol.Modbus,ModbusServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusServer.cs,onMessageTransfer,Cyclomatic complexity of the method is 12
Long Parameter List,net.Tesacom.TsdProtocol.DNP.ApplicationLayer,APCIControlField,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPApplication.cs,APCIControlField,The method has 5 parameters.
Long Parameter List,net.Tesacom.TsdProtocol.DNP.DataLinkLayer,LinkHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPDataLink.cs,LinkHeader,The method has 7 parameters.
Long Parameter List,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,DNPObjectLayerObject,The method has 5 parameters.
Long Parameter List,net.Tesacom.TsdProtocol.RT,RTManager,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,Parse,The method has 5 parameters.
Long Parameter List,net.Tesacom.TsdProtocol.Status,StatusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,IsTwoParameterRequest,The method has 6 parameters.
Long Parameter List,net.Tesacom.TsdProtocol.Status,StatusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,IsTwoParameterRequest,The method has 6 parameters.
Long Parameter List,net.Tesacom.TsdProtocol.Status,StatusProtocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,getGetTwoParameterPacket,The method has 5 parameters.
Long Parameter List,net.Tesacom.TsdProtocol.Status,StatusProtocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,getGetTwoParameterMultivaluePacket,The method has 6 parameters.
Long Statement,net.Tesacom.TsdProtocol.Database,SqlServerDatabaseManager,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Database\SqlServerDatabaseManager.cs,RunSqlCommands,The length of the statement  "									Log.writeToLogFile (LogType.LOG_ERR' "DatabaseManager"' "Error executing command: {0}' sql sentence: {1}"' ex.Message' sql); " is 124.
Long Statement,net.Tesacom.TsdProtocol.DNP.DataLinkLayer,LinkHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPDataLink.cs,Valid_0564,The length of the statement  "	return buffer [(int)LinkHeaderIndex.LI_START_05 + offset] == 0x05 && buffer [(int)LinkHeaderIndex.LI_START_64 + offset] == 0x64; " is 128.
Long Statement,net.Tesacom.TsdProtocol.DNP.DataLinkLayer,LinkHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPDataLink.cs,Parse,The length of the statement  "				destination = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_DESTINATION + offset] + buff [(int)LinkHeaderIndex.LI_DESTINATION + offset + 1] * 256); " is 149.
Long Statement,net.Tesacom.TsdProtocol.DNP.DataLinkLayer,LinkHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPDataLink.cs,Parse,The length of the statement  "				source = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_SOURCE + offset] + buff [(int)LinkHeaderIndex.LI_SOURCE + offset + 1] * 256); " is 134.
Long Statement,net.Tesacom.TsdProtocol.DNP.DataLinkLayer,LinkHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPDataLink.cs,Parse,The length of the statement  "				CRC = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_CRC + offset] + buff [(int)LinkHeaderIndex.LI_CRC + offset + 1] * 256); " is 125.
Long Statement,net.Tesacom.TsdProtocol.DNP.DataLinkLayer,LinkHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPDataLink.cs,ToString,The length of the statement  "	reslt = string.Format ("{0} PayloadSize: {1} {2}"' reslt' length - 5' (IsFromMaster ()) ? " From Master" : " From Outstation"); " is 127.
Long Statement,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,ToBytes,The length of the statement  "	q = ((int)(data.Length / (int)DNPDataLink.LinkSizes.LS_DATA_BLOCK_SIZE * (int)DNPDataLink.LinkSizes.LS_DATA_PLUS_CRC_SIZE)) + var; " is 130.
Long Statement,net.Tesacom.TsdProtocol.DNP,DnpProtocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,getDNPConfirmApplicationResponsePacket,The length of the statement  "	response.linkheader = new LinkHeader (len' request.linkheader.destination' request.linkheader.source' false' false' false' LinkHeader.FuncCodes.FC_PRI_UNCONFIRMED_USER_DATA); " is 174.
Long Statement,net.Tesacom.TsdProtocol.DNP,DNPServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPServer.cs,onMessageTransfer,The length of the statement  "				logIt (LogType.LOG_DATA' "DNPServer"' "Raw Data received from {0}' {1} bytes : {2}"' e.Conn' e.Message.Length' HexAscii.ConvertToHexAscii (e.Message)); " is 151.
Long Statement,net.Tesacom.TsdProtocol.DNP,DNPServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPServer.cs,onMessageTransfer,The length of the statement  "					logIt (LogType.LOG_DATA' "DNPServer"' "Reset link received from: {0}' answered {1} bytes"' e.Conn.ToString ()' e.Message.Length); " is 129.
Long Statement,net.Tesacom.TsdProtocol.DNP,DNPServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPServer.cs,onMessageTransfer,The length of the statement  "					logIt (LogType.LOG_DATA' "DNPServer"' "Reset link response from: {0}' answered {1} bytes"' e.Conn.ToString ()' resp.Length); " is 124.
Long Statement,net.Tesacom.TsdProtocol.DNP,DNPServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPServer.cs,onMessageTransfer,The length of the statement  "					logIt (LogType.LOG_DATA' "DNPServer"' "Reset link received from: {0}' answered {1} bytes' {2}"' e.Conn.ToString ()' e.Message.Length' HexAscii.ConvertToHexAscii (e.Message)); " is 174.
Long Statement,net.Tesacom.TsdProtocol.DNP,DNPServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPServer.cs,onMessageTransfer,The length of the statement  "					logIt (LogType.LOG_DATA' "DNPServer"' "Reset link response from: {0}' answered {1} bytes' {2}"' e.Conn.ToString ()' resp.Length' HexAscii.ConvertToHexAscii (resp)); " is 164.
Long Statement,net.Tesacom.TsdProtocol.DNP,DNPServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPServer.cs,SendMessageToRemoteEndPoint,The length of the statement  "		logIt (LogType.LOG_DATA' "DNPServer"' "Raw Data Sent to {0}' {1} bytes : {2}"' e.Conn' e.Message.Length' HexAscii.ConvertToHexAscii (e.Message)); " is 145.
Long Statement,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged8OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The length of the statement  "		IndexStart = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset] * 256 + buff [offset + 1])) * 65536 + (Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3])); " is 166.
Long Statement,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged8OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The length of the statement  "		IndexStop = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset + 4] * 256 + buff [offset + 5])) * 65536 + (Convert.ToUInt16 (buff [offset + 6] * 256 + buff [offset + 7])); " is 169.
Long Statement,net.Tesacom.TsdProtocol,NewTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\NewTcpServerClass.cs,OnClientDisconnection,The length of the statement  "				log.writeToLogFile (LogType.LOG_DEBUG' "OnClientDisconnection"' "{0}' Closing id: {1}' Clientes Actuales: {2}"' Name' e.Conn' tcpClients.Count); " is 144.
Long Statement,net.Tesacom.TsdProtocol,NewTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\NewTcpServerClass.cs,OnClientDisconnection,The length of the statement  "				log.writeToLogFile (LogType.LOG_DEBUG' "OnClientDisconnection"' "{0}' error on ClientDisconnection: {1}"' Name' ex.Message); " is 124.
Long Statement,net.Tesacom.TsdProtocol,NewTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\NewTcpServerClass.cs,OnExceptionOnSocket,The length of the statement  "				log.writeToLogFile (LogType.LOG_DEBUG' "OnExceptionOnSocket"' "{0}' Error e.Conn is null"' Name' enc.GetChars (e.Message)); " is 123.
Long Statement,net.Tesacom.TsdProtocol,NewTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\NewTcpServerClass.cs,OnClientConnect,The length of the statement  "					log.writeToLogFile (LogType.LOG_DEBUG' "OnClientConnect"' "{0}' se conecto un equipo {1}' Clientes actuales: {2} "' Name' cConn.Conn' tcpClients.Count); " is 152.
Long Statement,net.Tesacom.TsdProtocol,NewTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\NewTcpServerClass.cs,OnClientConnect,The length of the statement  "					OnExceptionOnSocket (new MessageEvent (e.GetBytes (string.Format ("{0} on OnClientConnect"' exc.Message))' cConn.Conn)); " is 120.
Long Statement,net.Tesacom.TsdProtocol,NewTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\NewTcpServerClass.cs,WaitForData,The length of the statement  "			cConn.Socket.BeginReceive (cConn.ReadBuffer.InternalBuffer' 0' cConn.ReadBuffer.InternalBuffer.Length' SocketFlags.None' workerCallBack' cConn); " is 144.
Long Statement,net.Tesacom.TsdProtocol,NewTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\NewTcpServerClass.cs,OnDataReceived,The length of the statement  "					log.writeToLogFile (LogType.LOG_DEBUG' "OnDataReceived"' "{0} SocketException on: {1}' Message: {2}"' Name' cConn.Conn' se.Message); " is 132.
Long Statement,net.Tesacom.TsdProtocol,NewTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\NewTcpServerClass.cs,findSelectedClient,The length of the statement  "					log.writeToLogFile (LogType.LOG_DEBUG' "TcpServer"' "{0} ending TcpClient not connected: {1}:{2}"' Name' ((IPEndPoint)d.Socket.RemoteEndPoint).Address' ((IPEndPoint)d.Socket.RemoteEndPoint).Port); " is 196.
Long Statement,net.Tesacom.TsdProtocol,NewTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\NewTcpServerClass.cs,findSelectedClient,The length of the statement  "				log.writeToLogFile (LogType.LOG_DEBUG' "TcpServer"' "{0} Error on findSelectedClient {1}:{2}' message:{3}"' Name' endPoint.Address' endPoint.Port' ex.Message); " is 159.
Long Statement,net.Tesacom.TsdProtocol,TcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpServerClass.cs,Start,The length of the statement  "			string s = string.Format ("Error starting {0} on Local EndPoint {1} message: {2} "' Message' localEndPoint' ex.Message); " is 120.
Long Statement,net.Tesacom.TsdProtocol,TcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpServerClass.cs,ListenForClients,The length of the statement  "				clientThread.Name = string.Format ("HandleClientComm: {0}:{1}"' ((IPEndPoint)client.Client.RemoteEndPoint).Address' ((IPEndPoint)client.Client.RemoteEndPoint).Port); " is 165.
Long Statement,net.Tesacom.TsdProtocol,TcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpServerClass.cs,ListenForClients,The length of the statement  "						log.writeToLogFile (LogType.LOG_DEBUG' "ListenForClients"' "No se acepta la conexion {0} por MaxCount' Clientes actuales: {1} "' client.Client.RemoteEndPoint' tcpClients.Count); " is 177.
Long Statement,net.Tesacom.TsdProtocol,TcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpServerClass.cs,ListenForClients,The length of the statement  "					log.writeToLogFile (LogType.LOG_DEBUG' "ListenForClients"' "Error {0} : {1} "' ex.Message' ex.InnerException.ToString ().TrimEnd ('\r'' '\n')); " is 143.
Long Statement,net.Tesacom.TsdProtocol,TcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpServerClass.cs,HandleClientComm,The length of the statement  "		conn = new TSDConnection ((IPEndPoint)tcpClient.tcpClient.Client.LocalEndPoint' (IPEndPoint)tcpClient.tcpClient.Client.RemoteEndPoint' ProtocolId); " is 147.
Long Statement,net.Tesacom.TsdProtocol,TcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpServerClass.cs,HandleClientComm,The length of the statement  "				log.writeToLogFile (LogType.LOG_DEBUG' "HandleClientComm"' "{0}' se conecto un equipo {1}' Clientes actuales: {2} "' Name' tcpClient.tcpClient.Client.RemoteEndPoint' tcpClients.Count); " is 184.
Long Statement,net.Tesacom.TsdProtocol,TcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpServerClass.cs,HandleClientComm,The length of the statement  "				log.writeToLogFile (LogType.LOG_DEBUG' "HandleClientComm"' "{0}' Closing connection' Clientes actuales: {1} "' Name' tcpClients.Count); " is 135.
Long Statement,net.Tesacom.TsdProtocol,TcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpServerClass.cs,FinalizeAllConnections,The length of the statement  "							log.writeToLogFile (LogType.LOG_DEBUG' "FinalizeAllConnections"' "Error {2} Closing id: {0}' ThreadCount: {1}"' Thread.CurrentThread.ManagedThreadId' System.Diagnostics.Process.GetCurrentProcess ().Threads.Count' Name); " is 219.
Long Statement,net.Tesacom.TsdProtocol,TcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpServerClass.cs,FinalizeAllConnections,The length of the statement  "				log.writeToLogFile (LogType.LOG_DEBUG' "FinalizeAllConnections"' "Error general: {0}' {1}"' ex.Message' ex.InnerException.ToString ().TrimEnd ('\r'' '\n')); " is 156.
Long Statement,net.Tesacom.TsdProtocol,TcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpServerClass.cs,Disconnect,The length of the statement  "			log.writeToLogFile (LogType.LOG_DEBUG' "HandleClientComm"' "{2} Closing id: {0}' ThreadCount: {1}"' Thread.CurrentThread.ManagedThreadId' System.Diagnostics.Process.GetCurrentProcess ().Threads.Count' Name); " is 207.
Long Statement,net.Tesacom.TsdProtocol,TcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpServerClass.cs,findSelectedClient,The length of the statement  "							log.writeToLogFile (LogType.LOG_DEBUG' "findSelectedClient"' "{0} ending TcpClient not connected: {1}"' Name' endPoint); " is 120.
Long Statement,net.Tesacom.TsdProtocol,TcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpServerClass.cs,findSelectedClient,The length of the statement  "					log.writeToLogFile (LogType.LOG_DEBUG' "findSelectedClient"' "{0} Error on findSelectedClient message:{1}"' Name' ex.Message); " is 126.
Long Statement,net.Tesacom.TsdProtocol,TcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpServerClass.cs,TestChannels,The length of the statement  "							log.writeToLogFile (LogType.LOG_DEBUG' "TestClients"' "{0} adding client to close: {1}' time: {2}' now: {3}"' Name' tcpClient.tcpClient.Client.RemoteEndPoint' tcpClient.lastComm.ToString ("HH:mm:ss")' DateTime.Now.ToString ("HH:mm:ss")); " is 237.
Long Statement,net.Tesacom.TsdProtocol,PooledTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\PooledTcpServerClass.cs,Start,The length of the statement  "			string s = string.Format ("Error starting {0} on Local EndPoint {1} message: {2} "' Message' localEndPoint' ex.Message); " is 120.
Long Statement,net.Tesacom.TsdProtocol,PooledTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\PooledTcpServerClass.cs,ListenForClients,The length of the statement  "			//clientThread.Name = string.Format("HandleClientComm: {0}:{1}"' ((IPEndPoint)client.Client.RemoteEndPoint).Address' ((IPEndPoint)client.Client.RemoteEndPoint).Port); " is 166.
Long Statement,net.Tesacom.TsdProtocol,PooledTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\PooledTcpServerClass.cs,HandleClientComm,The length of the statement  "			log.writeToLogFile (LogType.LOG_DEBUG' "HandleClientComm"' "{1}' Starting id: {0}"' Thread.CurrentThread.ManagedThreadId' Name); " is 128.
Long Statement,net.Tesacom.TsdProtocol,PooledTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\PooledTcpServerClass.cs,HandleClientComm,The length of the statement  "		conn = new TSDConnection ((IPEndPoint)tcpClient.Client.LocalEndPoint' (IPEndPoint)tcpClient.Client.RemoteEndPoint' ProtocolId); " is 127.
Long Statement,net.Tesacom.TsdProtocol,PooledTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\PooledTcpServerClass.cs,HandleClientComm,The length of the statement  "					log.writeToLogFile (LogType.LOG_DEBUG' "HandleClientComm"' "{1} MessageReceived on id: {0}"' Thread.CurrentThread.ManagedThreadId' Name); " is 137.
Long Statement,net.Tesacom.TsdProtocol,PooledTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\PooledTcpServerClass.cs,HandleClientComm,The length of the statement  "				log.writeToLogFile (LogType.LOG_DEBUG' "HandleClientComm"' "{2} Exception on id: {0}' Message : {1}"' Thread.CurrentThread.ManagedThreadId' ex.Message' Name); " is 158.
Long Statement,net.Tesacom.TsdProtocol,PooledTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\PooledTcpServerClass.cs,HandleClientComm,The length of the statement  "				log.writeToLogFile (LogType.LOG_DEBUG' "HandleClientComm"' "{2} Closing id: {0}' thread count: {1}' stids:{3}"' Thread.CurrentThread.ManagedThreadId' System.Diagnostics.Process.GetCurrentProcess ().Threads.Count' Name' stids); " is 226.
Long Statement,net.Tesacom.TsdProtocol,PooledTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\PooledTcpServerClass.cs,Disconnect,The length of the statement  "			log.writeToLogFile (LogType.LOG_DEBUG' "HandleClientComm"' "{2} Closing id: {0}' ThreadCount: {1}"' Thread.CurrentThread.ManagedThreadId' System.Diagnostics.Process.GetCurrentProcess ().Threads.Count' Name); " is 207.
Long Statement,net.Tesacom.TsdProtocol,PooledTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\PooledTcpServerClass.cs,findSelectedClient,The length of the statement  "					log.writeToLogFile (LogType.LOG_DEBUG' "TcpServer"' "{2} ending TcpClient not connected: {0}:{1}"' ((IPEndPoint)d.Client.RemoteEndPoint).Address' ((IPEndPoint)d.Client.RemoteEndPoint).Port' Name); " is 196.
Long Statement,net.Tesacom.TsdProtocol,PooledTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\PooledTcpServerClass.cs,findSelectedClient,The length of the statement  "				log.writeToLogFile (LogType.LOG_DEBUG' "TcpServer"' "{1} Error on findSelectedClient {0}:{1}' message:{3}"' endPoint.Address' endPoint.Port' Name' ex.Message); " is 159.
Long Statement,net.Tesacom.TsdProtocol,ProtocolServerManager,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpProtocolServer.cs,StartServers,The length of the statement  "				result = string.Format ("{0} Server \"{1}\" Id: {2}'{4}"' s.ProtocType' s.Description' s.ProtocolId' s.TcpPort' result); " is 120.
Long Statement,net.Tesacom.TsdProtocol,ProtocolServerManager,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpProtocolServer.cs,StopServers,The length of the statement  "			result = string.Format ("{0} Server Id: {1} on Port: {2}' {3}"' s.ProtocType.ToString ()' s.ProtocolId' s.TcpPort' result); " is 123.
Long Statement,net.Tesacom.TsdProtocol,TSDProtocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdProtocol.cs,IsBridgePacket,The length of the statement  "	if ((packet.header.FuncNumber == TSDPacketType.TsdCodeBridgeRequest) || (packet.header.FuncNumber == TSDPacketType.TsdCodeBridgeResponse)) { " is 140.
Long Statement,net.Tesacom.TsdProtocol.IEC.IEC104Plus,IEC104PlusServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104PlusServer.cs,onMessageTransfer,The length of the statement  "				logIt (LogType.LOG_DATA' ServerName' "Raw Data Received from {0}' {1} bytes : {2}"' e.Conn' e.Message.Length' HexAscii.ConvertToHexAscii (e.Message)); " is 150.
Long Statement,net.Tesacom.TsdProtocol.IEC.IEC104Plus,IEC104PlusServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104PlusServer.cs,onMessageTransfer,The length of the statement  "				IEC104PlusMessageTransfer (new IEC104PlusMessageEvent (request' e.Conn' new IPEndPoint (IPAddress.Parse (LocalAddress)' TcpPort))); " is 131.
Long Statement,net.Tesacom.TsdProtocol.IEC.IEC104Plus,IEC104PlusServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104PlusServer.cs,TestT2Timeout,The length of the statement  "								logIt (LogType.LOG_DATA' ServerName' "Error sending to client {0} bytes : {1}"' buff.Length' HexAscii.ConvertToHexAscii (buff)); " is 128.
Long Statement,net.Tesacom.TsdProtocol.IEC.IEC104Plus,IEC104PlusServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104PlusServer.cs,TestT2Timeout,The length of the statement  "							logIt (LogType.LOG_DATA' ServerName' "Raw Data Response to {0}' {1} bytes : {2}"' c.Conn' buff.Length' HexAscii.ConvertToHexAscii (buff)); " is 138.
Long Statement,net.Tesacom.TsdProtocol.IEC.IEC104Plus,IEC104PlusServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104PlusServer.cs,SendBroadcast,The length of the statement  "							logIt (LogType.LOG_DATA' ServerName' "Error sending to client {0} bytes : {1}"' buff.Length' HexAscii.ConvertToHexAscii (buff)); " is 128.
Long Statement,net.Tesacom.TsdProtocol.IEC.IEC104Plus,IEC104PlusServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104PlusServer.cs,SendBroadcast,The length of the statement  "						logIt (LogType.LOG_DATA' ServerName' "Raw Data Response to {0}' {1} bytes : {2}"' c.Conn' buff.Length' HexAscii.ConvertToHexAscii (buff)); " is 138.
Long Statement,net.Tesacom.TsdProtocol.IEC.IEC104Plus,IEC104PlusServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104PlusServer.cs,SendMessageToRemoteEndPoint,The length of the statement  "					logIt (LogType.LOG_DATA' ServerName' "Error sending to client {0} bytes : {1}"' buff.Length' HexAscii.ConvertToHexAscii (buff)); " is 128.
Long Statement,net.Tesacom.TsdProtocol.IEC.IEC104Plus,IEC104PlusServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104PlusServer.cs,SendMessageToRemoteEndPoint,The length of the statement  "				logIt (LogType.LOG_DATA' ServerName' "Raw Data Response to {0}' {1} bytes : {2}"' e.Conn' buff.Length' HexAscii.ConvertToHexAscii (buff)); " is 138.
Long Statement,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The length of the statement  "	buffer [20] += Convert.ToByte (((int)System.Globalization.CultureInfo.InvariantCulture.Calendar.GetDayOfWeek (DateTime.Now)) << 5); " is 131.
Long Statement,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Server,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Server.cs,onMessageTransfer,The length of the statement  "				logIt (LogType.LOG_DATA' "IEC104Server"' "Raw Data received from {0}' {1} bytes : {2}"' e.Conn' e.Message.Length' HexAscii.ConvertToHexAscii (e.Message)); " is 154.
Long Statement,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Server,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Server.cs,onMessageTransfer,The length of the statement  "			IEC104MessageTransfer (new IEC104MessageEvent (packet' e.Conn' new IPEndPoint (IPAddress.Parse (LocalAddress)' TcpPort))); " is 122.
Long Statement,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Server,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Server.cs,SendBroadcast,The length of the statement  "							logIt (LogType.LOG_DATA' ServerName' "Error sending to client {0} bytes : {1}"' buff.Length' HexAscii.ConvertToHexAscii (buff)); " is 128.
Long Statement,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Server,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Server.cs,SendBroadcast,The length of the statement  "						logIt (LogType.LOG_DATA' ServerName' "Raw Data Response to {0}' {1} bytes : {2}"' c.Conn' buff.Length' HexAscii.ConvertToHexAscii (buff)); " is 138.
Long Statement,net.Tesacom.TsdProtocol.OneIp,OneIpServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\One\OneIpServer.cs,onMessageTransfer,The length of the statement  "			OneIpMessageTransfer (new OneIpMessageEvent (new OneIpPacket (e.Message)' e.Conn' new IPEndPoint (IPAddress.Parse (LocalAddress)' TcpPort))); " is 141.
Long Statement,net.Tesacom.TsdProtocol.IEC.IEC101,IEC101Server,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC101Server.cs,onMessageTransfer,The length of the statement  "			logIt (LogType.LOG_DATA' "Iec101Server"' "Raw Data received from {0}' {1} bytes : {2}"' e.Conn' e.Message.Length' HexAscii.ConvertToHexAscii (e.Message)); " is 154.
Long Statement,net.Tesacom.TsdProtocol.IEC.IEC101,IEC101Server,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC101Server.cs,SendMessageToRemoteEndPoint,The length of the statement  "		logIt (LogType.LOG_DATA' "Iec101Server"' "Raw Data Sent to {0}' {1} bytes : {2}"' e.Conn' e.Message.Length' HexAscii.ConvertToHexAscii (e.Message)); " is 148.
Long Statement,net.Tesacom.TsdProtocol.RT,RemoteTermData,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,MarkConnectionTimespan,The length of the statement  "		if ((MaxDisconnection.DisconnectedDateSpan == null) || ((lastConnectionTs - lastDisconnectionTs) > MaxDisconnection.DisconnectedDateSpan)) { " is 140.
Long Statement,net.Tesacom.TsdProtocol.RT,RemoteTermData,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,MarkConnectionTimespan,The length of the statement  "		if ((IntervalMaxDisconnection.DisconnectedDateSpan == null) || ((lastConnectionTs - lastDisconnectionTs) > IntervalMaxDisconnection.DisconnectedDateSpan)) { " is 156.
Long Statement,net.Tesacom.TsdProtocol.RT,RemoteTermData,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,chkIntervalStatus,The length of the statement  "			if ((IntervalMaxDisconnection.DisconnectedDateSpan == null) || (IntervalMaxDisconnection.DisconnectedDateSpan == (lastConnectionTs - lastConnectionTs))) { " is 154.
Long Statement,net.Tesacom.TsdProtocol.RT,RemoteTerm,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,ToXml,The length of the statement  "		subelement.InnerText = Internal.TotalConnectedTime.Add (DateTime.Now - Internal.ToggleTime).TotalSeconds.ToString ("0.##"); " is 123.
Long Statement,net.Tesacom.TsdProtocol.RT,RemoteTerm,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,ToXml,The length of the statement  "		subelement.InnerText = Internal.TotalDisconnectedTime.Add (DateTime.Now - Internal.ToggleTime).TotalSeconds.ToString ("0.##"); " is 126.
Long Statement,net.Tesacom.TsdProtocol.RT,RemoteTerm,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,ToInsertSLASqlServerString,The length of the statement  "	sqlstr = string.Format ("{0} {1}' '{2}''CONVERT(DATETIME''{3}''120)"' sqlstr' UnitId' Site' Internal.IntervalStartTime.ToString (StandardDateFormat)); " is 150.
Long Statement,net.Tesacom.TsdProtocol.RT,RemoteTerm,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,ToInsertSLASqlServerString,The length of the statement  "	sqlstr = string.Format ("{0}' {1}' {2}"' sqlstr' Internal.IntervalConnectedTime.TotalSeconds' Internal.IntervalDisconnectedTime.TotalSeconds); " is 142.
Long Statement,net.Tesacom.TsdProtocol.RT,RemoteTerm,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,Parse,The length of the statement  "				UsesSecondaryRemoteTerminalConnection = Convert.ToBoolean (XmlUtils.GetValueInXmlAttributes (node.Attributes' "false")); " is 120.
Long Statement,net.Tesacom.TsdProtocol.RT,RemoteTerm,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,Parse,The length of the statement  "				reslts.Add (string.Format ("rt id=\"{0}\" param UsesSecondaryRemoteTerminalConnection=\"{1}\""' UnitId' UsesSecondaryRemoteTerminalConnection)); " is 144.
Long Statement,net.Tesacom.TsdProtocol.RT,RemoteTerm,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,sendToTerminalConnection,The length of the statement  "						RemoteTerminalSecondaryConnection.SendToEndPoint (new MessageEvent (buff' RemoteTerminalSecondaryConnection.connection)' out reslt); " is 132.
Long Statement,net.Tesacom.TsdProtocol.RT,RemoteTerm,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,ToStatisticslineString,The length of the statement  "	sval = string.Format ("{0}'{1}'{2}'{3}"' UnitId' Desc' Internal.IntervalStartTime.ToString ("HH:mm:ss")' DateTime.Now.ToString ("HH:mm:ss")); " is 141.
Long Statement,net.Tesacom.TsdProtocol.RT,RemoteTerm,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,ToStatisticslineString,The length of the statement  "	sval = string.Format ("{0}'{1}'{2}'{3}"' sval' Connected' Internal.IntervalConnections' Internal.IntervalDisconnections); " is 121.
Long Statement,net.Tesacom.TsdProtocol.RT,RemoteTerm,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,ToStatisticslineString,The length of the statement  "	sval = string.Format ("{0}'{1}'{2}'{3}"' sval' Internal.IntervalConnectedTime' Internal.IntervalDisconnectedTime' Internal.IntervalAverageDisconnectedTime); " is 156.
Long Statement,net.Tesacom.TsdProtocol.RT,RemoteTerm,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,ToStatisticslineString,The length of the statement  "	sval = string.Format ("{0}'{1}'{2}"' sval' Internal.IntervalConnectionsWhenConnected' Internal.IntervalForcedTimeoutConnectionsWhenConnected); " is 142.
Long Statement,net.Tesacom.TsdProtocol.RT,RemoteTerm,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,ToStatisticslineString,The length of the statement  "	sval = string.Format ("{0}'{1}'{2}'{3}"' sval' Internal.IntervalMaxDisconnection.DisconnectedDateSpan' Internal.DisconnectionFilter' Internal.IntervalDisconnectionsWithinFilter); " is 178.
Long Statement,net.Tesacom.TsdProtocol.Status,StatusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,IsTwoParameterRequest,The length of the statement  "	return IsTwoParameterRequest (packet' FunctionName.ToString ()' ParamName1' out ParamValue1' ParamName2' out ParamValue2); " is 122.
Long Statement,net.Tesacom.TsdProtocol.Status,StatusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,getValuesOfMultivaluesParameterRequest,The length of the statement  "							strval = string.Format ("{0}{1}{2}{3}{4}"' strval' StatusProtocol.PairSeparator' n2.Name' StatusProtocol.ValueInPairSeparator' n2.InnerText); " is 141.
Long Statement,net.Tesacom.TsdProtocol.Status,StatusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,IsModifiedEquipmentRequest,The length of the statement  "	return IsOneParameterRequest (packet' StatusRequestType.GetModifiedEquipmentStatus' StatusRequest.ModifiedParameter' out modified); " is 131.
Long Statement,net.Tesacom.TsdProtocol.Status,StatusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,getCategoriesInRequest,The length of the statement  "	List<KeyValuePair<string' string>> strs = getValuesOfMultivaluesParameterRequest (packet' StatusRequestType.GetCategoryStatus.ToString ()); " is 139.
Long Statement,net.Tesacom.TsdProtocol.Status,StatusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,IsDisconnectRequest,The length of the statement  "	bool reslt = IsTwoParameterRequest (packet' StatusRequestType.Disconnect' StatusProtocol.StrUnitId' out unitId' StatusProtocol.StrPassword' out Password); " is 154.
Long Statement,net.Tesacom.TsdProtocol.Status,StatusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,IsGetEquipmentsWithMaxCount,The length of the statement  "	bool reslt = IsTwoParameterRequest (packet' StatusRequestType.GetEquipmentsWithMaxCount' StatusProtocol.StrUnitId' out unitId' StatusProtocol.StrCount' out count); " is 163.
Long Statement,net.Tesacom.TsdProtocol.Status,StatusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,IsDebugEquipmentRequest,The length of the statement  "	bool reslt = IsTwoParameterRequest (packet' StatusRequestType.DebugEquipment' StatusProtocol.StrUnitId' out unitId' StatusProtocol.StrPassword' out Password); " is 158.
Long Statement,net.Tesacom.TsdProtocol.Status,StatusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,IsModifiedEquipmentWithMaxCount,The length of the statement  "	bool reslt = IsTwoParameterRequest (packet' StatusRequestType.GetModifiedEquipmentWithMaxCount' StatusRequest.ModifiedParameter' out modified' StatusProtocol.StrCount' out count); " is 179.
Long Statement,net.Tesacom.TsdProtocol.Status,StatusProtocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,getGetTwoParameterPacket,The length of the statement  "	s = string.Format ("{0}<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">"' s); " is 206.
Long Statement,net.Tesacom.TsdProtocol.Status,StatusProtocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,getGetTwoParameterMultivaluePacket,The length of the statement  "	s = string.Format ("{0}<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">"' s); " is 206.
Long Statement,net.Tesacom.TsdProtocol.Status,StatusProtocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,getGetOneParameterMultivaluePacket,The length of the statement  "	s = string.Format ("{0}<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">"' s); " is 206.
Long Statement,net.Tesacom.TsdProtocol.Status,StatusProtocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,getGetOneParameterPacket,The length of the statement  "	s = string.Format ("{0}<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">"' s); " is 206.
Long Statement,net.Tesacom.TsdProtocol.Status,StatusProtocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,getGetNoParameterPacket,The length of the statement  "	s += "<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">"; " is 185.
Long Statement,net.Tesacom.TsdProtocol.Status,StatusProtocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,getGetModifiedEquipmentStatus,The length of the statement  "	return getGetOneParameterPacket (StatusRequestType.GetModifiedEquipmentStatus' StatusRequest.ModifiedParameter' modified.ToString ()); " is 134.
Long Statement,net.Tesacom.TsdProtocol.Status,StatusProtocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,getGetModifiedEquipmentWithMaxCount,The length of the statement  "	return getGetTwoParameterPacket (StatusRequestType.GetModifiedEquipmentWithMaxCount' StatusRequest.ModifiedParameter' modified.ToString ()' StatusProtocol.StrCount' count.ToString ()); " is 184.
Long Statement,net.Tesacom.TsdProtocol.Status,StatusProtocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,getDisconnectPacket,The length of the statement  "	return getGetTwoParameterPacket (StatusRequestType.Disconnect' StrUnitId' UnitId.ToString ()' StrPassword' GeneralUtilities.SecurityData.EncodePassword (Password)); " is 164.
Long Statement,net.Tesacom.TsdProtocol.Status,StatusProtocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,getDebugEquipmentPacket,The length of the statement  "	return getGetTwoParameterPacket (StatusRequestType.DebugEquipment' StrUnitId' UnitId.ToString ()' StrPassword' GeneralUtilities.SecurityData.EncodePassword (Password)); " is 168.
Long Statement,net.Tesacom.TsdProtocol.Status,StatusProtocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,getGetCategoryPacket,The length of the statement  "	return getGetTwoParameterPacket (StatusRequestType.GetCategoryStatus' RT.RTCategory.StrName' categName' RT.RTCategory.StrDesc' categValue); " is 139.
Long Statement,net.Tesacom.TsdProtocol.Status,StatusProtocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,getGetCategoryPacket,The length of the statement  "	return getGetTwoParameterMultivaluePacket (StatusRequestType.GetCategoryStatus' RT.RTCategory.NodeName' RT.RTCategory.StrName' categNames' RT.RTCategory.StrDesc' categValues); " is 175.
Long Statement,net.Tesacom.TsdProtocol.Status,StatusProtocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,getGetEquipmentsWithMaxCount,The length of the statement  "	return getGetTwoParameterPacket (StatusRequestType.GetEquipmentsWithMaxCount' StatusProtocol.StrUnitId' UnitId.ToString ()' StatusProtocol.StrCount' Count.ToString ()); " is 168.
Long Statement,net.Tesacom.TsdProtocol.Status,StatusServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusServer.cs,onMessageTransfer,The length of the statement  "				logIt (LogType.LOG_DATA' "StatusServer"' "Raw Data received from {0}' {1} bytes : {2}"' e.Conn' e.Message.Length' HexAscii.ConvertToHexAscii (e.Message)); " is 154.
Long Statement,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The length of the statement  "					report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]); " is 208.
Long Statement,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The length of the statement  "					report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]); " is 210.
Long Statement,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The length of the statement  "					report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]); " is 208.
Long Statement,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The length of the statement  "					report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]); " is 210.
Long Statement,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The length of the statement  "				record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]); " is 162.
Long Statement,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The length of the statement  "				record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]); " is 164.
Long Statement,net.Tesacom.TsdProtocol.TSD,TsdConfigurationServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdConfigurationServer.cs,onMessageTransfer,The length of the statement  "					logIt (LogType.LOG_DATA' "TsdConfigurationServer"' "Raw Data received from {0}' {1} bytes : {2}"' e.Conn' e.Message.Length' HexAscii.ConvertToHexAscii (e.Message)); " is 164.
Long Statement,net.Tesacom.TsdProtocol.TSD,TsdConfigurationServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdConfigurationServer.cs,onMessageTransfer,The length of the statement  "					logIt (LogType.LOG_DATA' "TsdConfigurationServer"' "Raw Data received from {0}' {1} bytes : {2}"' e.Conn' e.Message.Length); " is 124.
Long Statement,net.Tesacom.TsdProtocol.TSD,TsdConfigurationServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdConfigurationServer.cs,SendMessageToRemoteEndPoint,The length of the statement  "			logIt (LogType.LOG_DATA' "TsdConfigurationServer"' "Raw Data Sent to {0}' {1} bytes : {2}"' e.Conn' e.Message.Length' HexAscii.ConvertToHexAscii (e.Message)); " is 158.
Long Statement,net.Tesacom.TsdProtocol.TSD,TSDEcho,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,isEchoPacket,The length of the statement  "		if ((buff [0] == TsdEchoPacketBytes [0]) && (buff [1] == TsdEchoPacketBytes [1]) && (buff [2] == TsdEchoPacketBytes [2])) " is 121.
Long Statement,net.Tesacom.TsdProtocol.TSD,TsdServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdServer.cs,OnServerMessageTransfer,The length of the statement  "				logIt (LogType.LOG_DATA' "TsdServer"' "Raw Data received from {0}' {1} bytes : {2}"' e.Conn' e.Message.Length' HexAscii.ConvertToHexAscii (e.Message)); " is 151.
Long Statement,net.Tesacom.TsdProtocol.TSD,TsdServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdServer.cs,OnServerMessageTransfer,The length of the statement  "								logIt (LogType.LOG_DATA' "TSDServer"' "ReqSyncTime from {0}' received with error in timestamp {1}"' tsdpacket.header.UnitId' HexAscii.ConvertToHexAscii (e.Message)); " is 165.
Long Statement,net.Tesacom.TsdProtocol.TSD,TsdServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdServer.cs,OnServerMessageTransfer,The length of the statement  "								logIt (LogType.LOG_DATA' "TSDServer"' "ReqSyncTime from {0}' received with error in timestamp"' tsdpacket.header.UnitId); " is 121.
Long Statement,net.Tesacom.TsdProtocol.TSD,TsdServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdServer.cs,OnServerMessageTransfer,The length of the statement  "								logIt (LogType.LOG_DATA' "TSDServer"' "Received Multipacket' FirstOfMany id:{0}' data accumulated: {1}"' tsdpacket.header.UnitId' HexAscii.ConvertToHexAscii (c.tempData)); " is 171.
Long Statement,net.Tesacom.TsdProtocol.TSD,TsdServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdServer.cs,OnServerMessageTransfer,The length of the statement  "								logIt (LogType.LOG_DATA' "TSDServer"' "Received Multipacket' MiddlePacket id:{0}' size accum: {1}' data accum: {2}"' tsdpacket.header.UnitId' c.tempData.Length' HexAscii.ConvertToHexAscii (c.tempData)); " is 202.
Long Statement,net.Tesacom.TsdProtocol.TSD,TsdServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdServer.cs,OnServerMessageTransfer,The length of the statement  "								logIt (LogType.LOG_DATA' "TSDServer"' "Received Multipacket' MiddlePacket id:{0}' size accum: {1}"' tsdpacket.header.UnitId' c.tempData.Length); " is 144.
Long Statement,net.Tesacom.TsdProtocol.TSD,TsdServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdServer.cs,OnServerMessageTransfer,The length of the statement  "								logIt (LogType.LOG_DATA' "TSDServer"' "Received Multipacket' LastOfMany id:{0}' size accum: {1}' data accum: {2}"' tsdpacket.header.UnitId' c.tempData.Length' HexAscii.ConvertToHexAscii (c.tempData)); " is 200.
Long Statement,net.Tesacom.TsdProtocol.TSD,TsdServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdServer.cs,OnServerMessageTransfer,The length of the statement  "								logIt (LogType.LOG_DATA' "TSDServer"' "Received Multipacket' LastOfMany id:{0}' size accum: {1}"' tsdpacket.header.UnitId' c.tempData.Length); " is 142.
Long Statement,net.Tesacom.TsdProtocol.TSD,TsdServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdServer.cs,OnServerMessageTransfer,The length of the statement  "						logIt (LogType.LOG_DATA' "TSDServer"' "Message from {0} received not in protocol {1}"' e.Conn' HexAscii.ConvertToHexAscii (e.Message)); " is 135.
Long Statement,net.Tesacom.TsdProtocol.TSD,TsdServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdServer.cs,SendMessageToRemoteEndPoint,The length of the statement  "			logIt (LogType.LOG_DATA' "TsdServer"' "Raw Data Sent to {0}' {1} bytes : {2}"' e.Conn' e.Message.Length' HexAscii.ConvertToHexAscii (e.Message)); " is 145.
Long Statement,net.Tesacom.TsdProtocol.TSD,TsdServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdServer.cs,Send,The length of the statement  "				logIt (LogType.LOG_DATA' "TsdServer"' "Raw Data Sent to {0}' {1} bytes : {2}"' conn' message.Length' HexAscii.ConvertToHexAscii (message)); " is 139.
Long Statement,net.Tesacom.TsdProtocol.TSD,TsdServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdServer.cs,endConns,The length of the statement  "								logIt (LogType.LOG_DATA' "TsdServer"' "Disconnecting {0}' connected {1} : {2}"' c.UnitId' c.Conn' c.Conn.Timestamp.ToString (IdentifiedTsdClient.StandardDateFormat)); " is 166.
Long Statement,net.Tesacom.TsdProtocol.TSD,TsdServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdServer.cs,endConns,The length of the statement  "								logIt (LogType.LOG_DATA' "TsdServer"' "Disconnecting {0}' connected {1}"' c.UnitId' c.Conn.Timestamp.ToString (IdentifiedTsdClient.StandardDateFormat)); " is 152.
Long Statement,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,ToString,The length of the statement  "		s = string.Format ("{0}input{1}:{2}' tslo:{3}' tshi:{4}' counter{5}; "' s' i' DIStatus [i]' LoDiTs [i]' HiDiTs [i]' DICounter [i]); " is 131.
Long Statement,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,ToString,The length of the statement  "		s = string.Format ("{0}coil{1}:{2}' tslo:{3}' tshi:{4}' counter{5}; "' s' i' CoilStatus [i]' LoCoilsTs [i]' HiCoilsTs [i]' CoilCounter [i]); " is 140.
Long Statement,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,ToString,The length of the statement  "		s = string.Format ("{0}input{1}:{2}' tslo:{3}' tshi:{4}' counter{5}; "' s' i' DIStatus [i]' LoDiTs [i]' HiDiTs [i]' DICounter [i]); " is 131.
Long Statement,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,ToString,The length of the statement  "		s = string.Format ("{0}coil{1}:{2}' tslo:{3}' tshi:{4}' counter{5}; "' s' i' CoilStatus [i]' LoCoilsTs [i]' HiCoilsTs [i]' CoilCounter [i]); " is 140.
Long Statement,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,ToString,The length of the statement  "		//s = string.Format("{0}analog{1}:{2}' alarm:{3}' ts:{4}' miliamps:{5}; "' s' i' AiValues[i]' AiAlarms[i].ToString()' AiTs[i]' AiRawValues[i]); " is 143.
Long Statement,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,ToString,The length of the statement  "		s = string.Format ("{0}input{1}:{2}' tslo:{3}' tshi:{4}' counter{5}; "' s' i' DIStatus [i]' LoDiTs [i]' HiDiTs [i]' DICounter [i]); " is 131.
Long Statement,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,ToString,The length of the statement  "		s = string.Format ("{0}coil{1}:{2}' tslo:{3}' tshi:{4}' counter{5}; "' s' i' CoilStatus [i]' LoCoilsTs [i]' HiCoilsTs [i]' CoilCounter [i]); " is 140.
Long Statement,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,ToString,The length of the statement  "		//s = string.Format("{0}analog{1}:{2}' alarm:{3}' ts:{4}' miliamps:{5}; "' s' i' AiValues[i]' AiAlarms[i].ToString()' AiTs[i]' AiRawValues[i]); " is 143.
Long Statement,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,ToString,The length of the statement  "		s = string.Format ("{0}input{1}:{2}' tslo:{3}' tshi:{4}' counter{5}; "' s' i' DIStatus [i]' LoDiTs [i]' HiDiTs [i]' DICounter [i]); " is 131.
Long Statement,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,ToString,The length of the statement  "		s = string.Format ("{0}coil{1}:{2}' tslo:{3}' tshi:{4}' counter{5}; "' s' i' CoilStatus [i]' LoCoilsTs [i]' HiCoilsTs [i]' CoilCounter [i]); " is 140.
Long Statement,net.Tesacom.TsdProtocol.Modbus,ModbusServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusServer.cs,onMessageTransfer,The length of the statement  "					logIt (LogType.LOG_DATA' "ModbusServer"' "Raw Data Received from {0}' {1} bytes : {2}"' e.Conn' e.Message.Length' HexAscii.ConvertToHexAscii (e.Message)); " is 154.
Long Statement,net.Tesacom.TsdProtocol.Modbus,ModbusServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusServer.cs,SendMessageToRemoteEndPoint,The length of the statement  "		logIt (LogType.LOG_DATA' "ModbusServer"' "Raw Data Sent to {0}' {1} bytes : {2}"' e.Conn' e.Message.Length' HexAscii.ConvertToHexAscii (e.Message)); " is 148.
Complex Conditional,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The conditional expression  "bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF"  is complex.
Complex Conditional,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The conditional expression  "bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF"  is complex.
Complex Conditional,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The conditional expression  "buffer [1] == 1 || buffer [1] == 2 || buffer [1] == 3 || buffer [1] == 4"  is complex.
Complex Conditional,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The conditional expression  "buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4"  is complex.
Virtual Method Call from Constructor,net.Tesacom.TsdProtocol,ClientConnection,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\NewTcpServerClass.cs,ClientConnection,The constructor "ClientConnection" calls a virtual method "SetBuffers".
Virtual Method Call from Constructor,net.Tesacom.TsdProtocol,TcpProtocolServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpProtocolServer.cs,TcpProtocolServer,The constructor "TcpProtocolServer" calls a virtual method "SetBuffers".
Empty Catch Block,net.Tesacom.TsdProtocol.DNP.ApplicationLayer,APCIFunctionCode,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPApplication.cs,Parse,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol.DNP.ApplicationLayer,APCIHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPApplication.cs,Parse,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,getObjectVariationFromData,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol,TcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpServerClass.cs,OnClientDisconnection,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol,TcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpServerClass.cs,ListenForClients,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol,TcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpServerClass.cs,TestChannels,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol,PooledTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\PooledTcpServerClass.cs,Stop,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol,ProtocolServerManager,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpProtocolServer.cs,Parse,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol,TcpProtocolServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpProtocolServer.cs,logIt,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol,TcpProtocolServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpProtocolServer.cs,Parse,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol,TSDConnection,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdProtocol.cs,equals,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol,TSDProtocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdProtocol.cs,GetBridgePacketFromPacket,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol.OnePort,OnePortServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\One\OnePortServer.cs,onMessageTransfer,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol.IEC.IEC104Plus,IEC104PlusServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104PlusServer.cs,onMessageTransfer,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Server,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Server.cs,onMessageTransfer,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol.OneIp,OneIpServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\One\OneIpServer.cs,onMessageTransfer,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol.RT,RTManager,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,endPointDisconnected,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol.RT,RTManager,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,debugEquipmentDisconnected,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol.RT,RTManager,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,SaveStats,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol.RT,RemoteTerm,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,Parse,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol.RT,RemoteTerm,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,Parse,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol.Status,StatusStruct,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,GetXmlDoc,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol.Status,StatusStruct,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,Parse,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol.Status,StatusPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,Parse,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol.Status,StatusPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,Parse,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol.Status,StatusServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusServer.cs,onClientDisconnection,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol.Status,StatusServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusServer.cs,onMessageTransfer,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,CalculateRelative,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,CalculateRelative,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol.TSD,TsdConfigurationServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdConfigurationServer.cs,onMessageTransfer,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol.TSD,TsdServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdServer.cs,SendMessageToRemoteEndPoint,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol.TSD,TsdServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdServer.cs,Send,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol.TSD,TsdServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdServer.cs,endConns,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol.TSD,TsdServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdServer.cs,endConns,The method has an empty catch block.
Empty Catch Block,net.Tesacom.TsdProtocol.Modbus,ModbusServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusServer.cs,onMessageTransfer,The method has an empty catch block.
Magic Number,net.Tesacom.TsdProtocol.Database,SqlServerDatabaseManager,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Database\SqlServerDatabaseManager.cs,RunSqlCommands,The following statement contains a magic number: do {  	if (Loop <= 0) {  		clearQueue = true;  		Loop = LOOPTIME;  	}  	if (dataContext != null) {  		if ((SqlCommands.Count > LessQueue) || clearQueue) {  			try {  				if (SqlCommands.Count == 0)  					continue;  				List<string> ToInsert = new List<string> ();  				lock (locker) {  					foreach (string s in SqlCommands)  						ToInsert.Add (s);  					SqlCommands.Clear ();  				}  				insertd = 0;  				if (Log != null)  					Log.writeToLogFile (LogType.LOG_DATA' "DatabaseManager"' "To insert : {0}"' ToInsert.Count);  				foreach (string sql in ToInsert) {  					try {  						dataContext.ExecuteCommand (sql);  						if (Log != null)  							Log.writeToLogFile (LogType.LOG_DATA' "DatabaseManager"' "Sucess command: {0}"' sql);  						insertd++;  					}  					catch (Exception ex) {  						if (logFailedInserts)  							if (Log != null)  								Log.writeToLogFile (LogType.LOG_ERR' "DatabaseManager"' "Error executing command: {0}' sql sentence: {1}"' ex.Message' sql);  						lock (locker) {  							SqlCommands.Add (sql);  						}  					}  					//Thread.Sleep(5);  					if ((insertd % 10) == 0)  						dataContext.SubmitChanges ();  				}  				dataContext.CommandTimeout *= 2;  				dataContext.SubmitChanges ();  				ToInsert.Clear ();  			}  			catch (Exception ex) {  				if (Log != null)  					Log.writeToLogFile (LogType.LOG_ERR' "DatabaseManager"' "Error general {0}"' ex.Message);  			}  		}  	}  	else {  		Loop--;  	}  	if (forever)  		Thread.Sleep (SleepTimeSeconds * 1000);  }  while (isRunning);  
Magic Number,net.Tesacom.TsdProtocol.Database,SqlServerDatabaseManager,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Database\SqlServerDatabaseManager.cs,RunSqlCommands,The following statement contains a magic number: do {  	if (Loop <= 0) {  		clearQueue = true;  		Loop = LOOPTIME;  	}  	if (dataContext != null) {  		if ((SqlCommands.Count > LessQueue) || clearQueue) {  			try {  				if (SqlCommands.Count == 0)  					continue;  				List<string> ToInsert = new List<string> ();  				lock (locker) {  					foreach (string s in SqlCommands)  						ToInsert.Add (s);  					SqlCommands.Clear ();  				}  				insertd = 0;  				if (Log != null)  					Log.writeToLogFile (LogType.LOG_DATA' "DatabaseManager"' "To insert : {0}"' ToInsert.Count);  				foreach (string sql in ToInsert) {  					try {  						dataContext.ExecuteCommand (sql);  						if (Log != null)  							Log.writeToLogFile (LogType.LOG_DATA' "DatabaseManager"' "Sucess command: {0}"' sql);  						insertd++;  					}  					catch (Exception ex) {  						if (logFailedInserts)  							if (Log != null)  								Log.writeToLogFile (LogType.LOG_ERR' "DatabaseManager"' "Error executing command: {0}' sql sentence: {1}"' ex.Message' sql);  						lock (locker) {  							SqlCommands.Add (sql);  						}  					}  					//Thread.Sleep(5);  					if ((insertd % 10) == 0)  						dataContext.SubmitChanges ();  				}  				dataContext.CommandTimeout *= 2;  				dataContext.SubmitChanges ();  				ToInsert.Clear ();  			}  			catch (Exception ex) {  				if (Log != null)  					Log.writeToLogFile (LogType.LOG_ERR' "DatabaseManager"' "Error general {0}"' ex.Message);  			}  		}  	}  	else {  		Loop--;  	}  	if (forever)  		Thread.Sleep (SleepTimeSeconds * 1000);  }  while (isRunning);  
Magic Number,net.Tesacom.TsdProtocol.Database,SqlServerDatabaseManager,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Database\SqlServerDatabaseManager.cs,RunSqlCommands,The following statement contains a magic number: do {  	if (Loop <= 0) {  		clearQueue = true;  		Loop = LOOPTIME;  	}  	if (dataContext != null) {  		if ((SqlCommands.Count > LessQueue) || clearQueue) {  			try {  				if (SqlCommands.Count == 0)  					continue;  				List<string> ToInsert = new List<string> ();  				lock (locker) {  					foreach (string s in SqlCommands)  						ToInsert.Add (s);  					SqlCommands.Clear ();  				}  				insertd = 0;  				if (Log != null)  					Log.writeToLogFile (LogType.LOG_DATA' "DatabaseManager"' "To insert : {0}"' ToInsert.Count);  				foreach (string sql in ToInsert) {  					try {  						dataContext.ExecuteCommand (sql);  						if (Log != null)  							Log.writeToLogFile (LogType.LOG_DATA' "DatabaseManager"' "Sucess command: {0}"' sql);  						insertd++;  					}  					catch (Exception ex) {  						if (logFailedInserts)  							if (Log != null)  								Log.writeToLogFile (LogType.LOG_ERR' "DatabaseManager"' "Error executing command: {0}' sql sentence: {1}"' ex.Message' sql);  						lock (locker) {  							SqlCommands.Add (sql);  						}  					}  					//Thread.Sleep(5);  					if ((insertd % 10) == 0)  						dataContext.SubmitChanges ();  				}  				dataContext.CommandTimeout *= 2;  				dataContext.SubmitChanges ();  				ToInsert.Clear ();  			}  			catch (Exception ex) {  				if (Log != null)  					Log.writeToLogFile (LogType.LOG_ERR' "DatabaseManager"' "Error general {0}"' ex.Message);  			}  		}  	}  	else {  		Loop--;  	}  	if (forever)  		Thread.Sleep (SleepTimeSeconds * 1000);  }  while (isRunning);  
Magic Number,net.Tesacom.TsdProtocol.Database,SqlServerDatabaseManager,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Database\SqlServerDatabaseManager.cs,RunSqlCommands,The following statement contains a magic number: if (dataContext != null) {  	if ((SqlCommands.Count > LessQueue) || clearQueue) {  		try {  			if (SqlCommands.Count == 0)  				continue;  			List<string> ToInsert = new List<string> ();  			lock (locker) {  				foreach (string s in SqlCommands)  					ToInsert.Add (s);  				SqlCommands.Clear ();  			}  			insertd = 0;  			if (Log != null)  				Log.writeToLogFile (LogType.LOG_DATA' "DatabaseManager"' "To insert : {0}"' ToInsert.Count);  			foreach (string sql in ToInsert) {  				try {  					dataContext.ExecuteCommand (sql);  					if (Log != null)  						Log.writeToLogFile (LogType.LOG_DATA' "DatabaseManager"' "Sucess command: {0}"' sql);  					insertd++;  				}  				catch (Exception ex) {  					if (logFailedInserts)  						if (Log != null)  							Log.writeToLogFile (LogType.LOG_ERR' "DatabaseManager"' "Error executing command: {0}' sql sentence: {1}"' ex.Message' sql);  					lock (locker) {  						SqlCommands.Add (sql);  					}  				}  				//Thread.Sleep(5);  				if ((insertd % 10) == 0)  					dataContext.SubmitChanges ();  			}  			dataContext.CommandTimeout *= 2;  			dataContext.SubmitChanges ();  			ToInsert.Clear ();  		}  		catch (Exception ex) {  			if (Log != null)  				Log.writeToLogFile (LogType.LOG_ERR' "DatabaseManager"' "Error general {0}"' ex.Message);  		}  	}  }  else {  	Loop--;  }  
Magic Number,net.Tesacom.TsdProtocol.Database,SqlServerDatabaseManager,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Database\SqlServerDatabaseManager.cs,RunSqlCommands,The following statement contains a magic number: if (dataContext != null) {  	if ((SqlCommands.Count > LessQueue) || clearQueue) {  		try {  			if (SqlCommands.Count == 0)  				continue;  			List<string> ToInsert = new List<string> ();  			lock (locker) {  				foreach (string s in SqlCommands)  					ToInsert.Add (s);  				SqlCommands.Clear ();  			}  			insertd = 0;  			if (Log != null)  				Log.writeToLogFile (LogType.LOG_DATA' "DatabaseManager"' "To insert : {0}"' ToInsert.Count);  			foreach (string sql in ToInsert) {  				try {  					dataContext.ExecuteCommand (sql);  					if (Log != null)  						Log.writeToLogFile (LogType.LOG_DATA' "DatabaseManager"' "Sucess command: {0}"' sql);  					insertd++;  				}  				catch (Exception ex) {  					if (logFailedInserts)  						if (Log != null)  							Log.writeToLogFile (LogType.LOG_ERR' "DatabaseManager"' "Error executing command: {0}' sql sentence: {1}"' ex.Message' sql);  					lock (locker) {  						SqlCommands.Add (sql);  					}  				}  				//Thread.Sleep(5);  				if ((insertd % 10) == 0)  					dataContext.SubmitChanges ();  			}  			dataContext.CommandTimeout *= 2;  			dataContext.SubmitChanges ();  			ToInsert.Clear ();  		}  		catch (Exception ex) {  			if (Log != null)  				Log.writeToLogFile (LogType.LOG_ERR' "DatabaseManager"' "Error general {0}"' ex.Message);  		}  	}  }  else {  	Loop--;  }  
Magic Number,net.Tesacom.TsdProtocol.Database,SqlServerDatabaseManager,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Database\SqlServerDatabaseManager.cs,RunSqlCommands,The following statement contains a magic number: if ((SqlCommands.Count > LessQueue) || clearQueue) {  	try {  		if (SqlCommands.Count == 0)  			continue;  		List<string> ToInsert = new List<string> ();  		lock (locker) {  			foreach (string s in SqlCommands)  				ToInsert.Add (s);  			SqlCommands.Clear ();  		}  		insertd = 0;  		if (Log != null)  			Log.writeToLogFile (LogType.LOG_DATA' "DatabaseManager"' "To insert : {0}"' ToInsert.Count);  		foreach (string sql in ToInsert) {  			try {  				dataContext.ExecuteCommand (sql);  				if (Log != null)  					Log.writeToLogFile (LogType.LOG_DATA' "DatabaseManager"' "Sucess command: {0}"' sql);  				insertd++;  			}  			catch (Exception ex) {  				if (logFailedInserts)  					if (Log != null)  						Log.writeToLogFile (LogType.LOG_ERR' "DatabaseManager"' "Error executing command: {0}' sql sentence: {1}"' ex.Message' sql);  				lock (locker) {  					SqlCommands.Add (sql);  				}  			}  			//Thread.Sleep(5);  			if ((insertd % 10) == 0)  				dataContext.SubmitChanges ();  		}  		dataContext.CommandTimeout *= 2;  		dataContext.SubmitChanges ();  		ToInsert.Clear ();  	}  	catch (Exception ex) {  		if (Log != null)  			Log.writeToLogFile (LogType.LOG_ERR' "DatabaseManager"' "Error general {0}"' ex.Message);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Database,SqlServerDatabaseManager,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Database\SqlServerDatabaseManager.cs,RunSqlCommands,The following statement contains a magic number: if ((SqlCommands.Count > LessQueue) || clearQueue) {  	try {  		if (SqlCommands.Count == 0)  			continue;  		List<string> ToInsert = new List<string> ();  		lock (locker) {  			foreach (string s in SqlCommands)  				ToInsert.Add (s);  			SqlCommands.Clear ();  		}  		insertd = 0;  		if (Log != null)  			Log.writeToLogFile (LogType.LOG_DATA' "DatabaseManager"' "To insert : {0}"' ToInsert.Count);  		foreach (string sql in ToInsert) {  			try {  				dataContext.ExecuteCommand (sql);  				if (Log != null)  					Log.writeToLogFile (LogType.LOG_DATA' "DatabaseManager"' "Sucess command: {0}"' sql);  				insertd++;  			}  			catch (Exception ex) {  				if (logFailedInserts)  					if (Log != null)  						Log.writeToLogFile (LogType.LOG_ERR' "DatabaseManager"' "Error executing command: {0}' sql sentence: {1}"' ex.Message' sql);  				lock (locker) {  					SqlCommands.Add (sql);  				}  			}  			//Thread.Sleep(5);  			if ((insertd % 10) == 0)  				dataContext.SubmitChanges ();  		}  		dataContext.CommandTimeout *= 2;  		dataContext.SubmitChanges ();  		ToInsert.Clear ();  	}  	catch (Exception ex) {  		if (Log != null)  			Log.writeToLogFile (LogType.LOG_ERR' "DatabaseManager"' "Error general {0}"' ex.Message);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Database,SqlServerDatabaseManager,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Database\SqlServerDatabaseManager.cs,RunSqlCommands,The following statement contains a magic number: try {  	if (SqlCommands.Count == 0)  		continue;  	List<string> ToInsert = new List<string> ();  	lock (locker) {  		foreach (string s in SqlCommands)  			ToInsert.Add (s);  		SqlCommands.Clear ();  	}  	insertd = 0;  	if (Log != null)  		Log.writeToLogFile (LogType.LOG_DATA' "DatabaseManager"' "To insert : {0}"' ToInsert.Count);  	foreach (string sql in ToInsert) {  		try {  			dataContext.ExecuteCommand (sql);  			if (Log != null)  				Log.writeToLogFile (LogType.LOG_DATA' "DatabaseManager"' "Sucess command: {0}"' sql);  			insertd++;  		}  		catch (Exception ex) {  			if (logFailedInserts)  				if (Log != null)  					Log.writeToLogFile (LogType.LOG_ERR' "DatabaseManager"' "Error executing command: {0}' sql sentence: {1}"' ex.Message' sql);  			lock (locker) {  				SqlCommands.Add (sql);  			}  		}  		//Thread.Sleep(5);  		if ((insertd % 10) == 0)  			dataContext.SubmitChanges ();  	}  	dataContext.CommandTimeout *= 2;  	dataContext.SubmitChanges ();  	ToInsert.Clear ();  }  catch (Exception ex) {  	if (Log != null)  		Log.writeToLogFile (LogType.LOG_ERR' "DatabaseManager"' "Error general {0}"' ex.Message);  }  
Magic Number,net.Tesacom.TsdProtocol.Database,SqlServerDatabaseManager,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Database\SqlServerDatabaseManager.cs,RunSqlCommands,The following statement contains a magic number: try {  	if (SqlCommands.Count == 0)  		continue;  	List<string> ToInsert = new List<string> ();  	lock (locker) {  		foreach (string s in SqlCommands)  			ToInsert.Add (s);  		SqlCommands.Clear ();  	}  	insertd = 0;  	if (Log != null)  		Log.writeToLogFile (LogType.LOG_DATA' "DatabaseManager"' "To insert : {0}"' ToInsert.Count);  	foreach (string sql in ToInsert) {  		try {  			dataContext.ExecuteCommand (sql);  			if (Log != null)  				Log.writeToLogFile (LogType.LOG_DATA' "DatabaseManager"' "Sucess command: {0}"' sql);  			insertd++;  		}  		catch (Exception ex) {  			if (logFailedInserts)  				if (Log != null)  					Log.writeToLogFile (LogType.LOG_ERR' "DatabaseManager"' "Error executing command: {0}' sql sentence: {1}"' ex.Message' sql);  			lock (locker) {  				SqlCommands.Add (sql);  			}  		}  		//Thread.Sleep(5);  		if ((insertd % 10) == 0)  			dataContext.SubmitChanges ();  	}  	dataContext.CommandTimeout *= 2;  	dataContext.SubmitChanges ();  	ToInsert.Clear ();  }  catch (Exception ex) {  	if (Log != null)  		Log.writeToLogFile (LogType.LOG_ERR' "DatabaseManager"' "Error general {0}"' ex.Message);  }  
Magic Number,net.Tesacom.TsdProtocol.Database,SqlServerDatabaseManager,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Database\SqlServerDatabaseManager.cs,RunSqlCommands,The following statement contains a magic number: foreach (string sql in ToInsert) {  	try {  		dataContext.ExecuteCommand (sql);  		if (Log != null)  			Log.writeToLogFile (LogType.LOG_DATA' "DatabaseManager"' "Sucess command: {0}"' sql);  		insertd++;  	}  	catch (Exception ex) {  		if (logFailedInserts)  			if (Log != null)  				Log.writeToLogFile (LogType.LOG_ERR' "DatabaseManager"' "Error executing command: {0}' sql sentence: {1}"' ex.Message' sql);  		lock (locker) {  			SqlCommands.Add (sql);  		}  	}  	//Thread.Sleep(5);  	if ((insertd % 10) == 0)  		dataContext.SubmitChanges ();  }  
Magic Number,net.Tesacom.TsdProtocol.Database,SqlServerDatabaseManager,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Database\SqlServerDatabaseManager.cs,RunSqlCommands,The following statement contains a magic number: if ((insertd % 10) == 0)  	dataContext.SubmitChanges ();  
Magic Number,net.Tesacom.TsdProtocol.Database,SqlServerDatabaseManager,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Database\SqlServerDatabaseManager.cs,RunSqlCommands,The following statement contains a magic number: dataContext.CommandTimeout *= 2;  
Magic Number,net.Tesacom.TsdProtocol.Database,SqlServerDatabaseManager,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Database\SqlServerDatabaseManager.cs,RunSqlCommands,The following statement contains a magic number: if (forever)  	Thread.Sleep (SleepTimeSeconds * 1000);  
Magic Number,net.Tesacom.TsdProtocol.Database,SqlServerDatabaseManager,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Database\SqlServerDatabaseManager.cs,RunSqlCommands,The following statement contains a magic number: Thread.Sleep (SleepTimeSeconds * 1000);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ApplicationLayer,APCIControlField,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPApplication.cs,IncSeq,The following statement contains a magic number: if (SEQ > 15)  	SEQ = 0;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ApplicationLayer,APCIHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPApplication.cs,ToBytes,The following statement contains a magic number: if (functioncode.IsRequest () || functioncode.FunctionCode == APCIFunctionCode.FunctionCodes.FC_CONFIRM) {  	bytes = new byte[2];  	bytes [0] = controlfield.ToByte ();  	bytes [1] = functioncode.ToByte ();  }  else {  	bytes = new byte[4];  	bytes [0] = controlfield.ToByte ();  	bytes [1] = functioncode.ToByte ();  	byte b1;  	byte b2;  	iin.ToByte (out b1' out b2);  	bytes [2] = b1;  	bytes [3] = b2;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ApplicationLayer,APCIHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPApplication.cs,ToBytes,The following statement contains a magic number: if (functioncode.IsRequest () || functioncode.FunctionCode == APCIFunctionCode.FunctionCodes.FC_CONFIRM) {  	bytes = new byte[2];  	bytes [0] = controlfield.ToByte ();  	bytes [1] = functioncode.ToByte ();  }  else {  	bytes = new byte[4];  	bytes [0] = controlfield.ToByte ();  	bytes [1] = functioncode.ToByte ();  	byte b1;  	byte b2;  	iin.ToByte (out b1' out b2);  	bytes [2] = b1;  	bytes [3] = b2;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ApplicationLayer,APCIHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPApplication.cs,ToBytes,The following statement contains a magic number: if (functioncode.IsRequest () || functioncode.FunctionCode == APCIFunctionCode.FunctionCodes.FC_CONFIRM) {  	bytes = new byte[2];  	bytes [0] = controlfield.ToByte ();  	bytes [1] = functioncode.ToByte ();  }  else {  	bytes = new byte[4];  	bytes [0] = controlfield.ToByte ();  	bytes [1] = functioncode.ToByte ();  	byte b1;  	byte b2;  	iin.ToByte (out b1' out b2);  	bytes [2] = b1;  	bytes [3] = b2;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ApplicationLayer,APCIHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPApplication.cs,ToBytes,The following statement contains a magic number: if (functioncode.IsRequest () || functioncode.FunctionCode == APCIFunctionCode.FunctionCodes.FC_CONFIRM) {  	bytes = new byte[2];  	bytes [0] = controlfield.ToByte ();  	bytes [1] = functioncode.ToByte ();  }  else {  	bytes = new byte[4];  	bytes [0] = controlfield.ToByte ();  	bytes [1] = functioncode.ToByte ();  	byte b1;  	byte b2;  	iin.ToByte (out b1' out b2);  	bytes [2] = b1;  	bytes [3] = b2;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ApplicationLayer,APCIHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPApplication.cs,ToBytes,The following statement contains a magic number: bytes = new byte[2];  
Magic Number,net.Tesacom.TsdProtocol.DNP.ApplicationLayer,APCIHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPApplication.cs,ToBytes,The following statement contains a magic number: bytes = new byte[4];  
Magic Number,net.Tesacom.TsdProtocol.DNP.ApplicationLayer,APCIHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPApplication.cs,ToBytes,The following statement contains a magic number: bytes [2] = b1;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ApplicationLayer,APCIHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPApplication.cs,ToBytes,The following statement contains a magic number: bytes [3] = b2;  
Magic Number,net.Tesacom.TsdProtocol.DNP.DataLinkLayer,LinkHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPDataLink.cs,Parse,The following statement contains a magic number: if (buff.Length >= offset + DataLinkHeaderLen) {  	if (Valid_0564 (buff' offset)) {  		if (DnpPacket.checkCrc (buff' DataLinkHeaderLen)) {  			length = buff [(int)LinkHeaderIndex.LI_LENGTH + offset];  			destination = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_DESTINATION + offset] + buff [(int)LinkHeaderIndex.LI_DESTINATION + offset + 1] * 256);  			source = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_SOURCE + offset] + buff [(int)LinkHeaderIndex.LI_SOURCE + offset + 1] * 256);  			control = buff [(int)LinkHeaderIndex.LI_CONTROL + offset];  			functioncode = ByteToFuncCode (Convert.ToByte (control & (byte)ControlMask.MASK_FUNC_OR_PRM));  			CRC = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_CRC + offset] + buff [(int)LinkHeaderIndex.LI_CRC + offset + 1] * 256);  			reslt = true;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.DataLinkLayer,LinkHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPDataLink.cs,Parse,The following statement contains a magic number: if (buff.Length >= offset + DataLinkHeaderLen) {  	if (Valid_0564 (buff' offset)) {  		if (DnpPacket.checkCrc (buff' DataLinkHeaderLen)) {  			length = buff [(int)LinkHeaderIndex.LI_LENGTH + offset];  			destination = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_DESTINATION + offset] + buff [(int)LinkHeaderIndex.LI_DESTINATION + offset + 1] * 256);  			source = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_SOURCE + offset] + buff [(int)LinkHeaderIndex.LI_SOURCE + offset + 1] * 256);  			control = buff [(int)LinkHeaderIndex.LI_CONTROL + offset];  			functioncode = ByteToFuncCode (Convert.ToByte (control & (byte)ControlMask.MASK_FUNC_OR_PRM));  			CRC = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_CRC + offset] + buff [(int)LinkHeaderIndex.LI_CRC + offset + 1] * 256);  			reslt = true;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.DataLinkLayer,LinkHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPDataLink.cs,Parse,The following statement contains a magic number: if (buff.Length >= offset + DataLinkHeaderLen) {  	if (Valid_0564 (buff' offset)) {  		if (DnpPacket.checkCrc (buff' DataLinkHeaderLen)) {  			length = buff [(int)LinkHeaderIndex.LI_LENGTH + offset];  			destination = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_DESTINATION + offset] + buff [(int)LinkHeaderIndex.LI_DESTINATION + offset + 1] * 256);  			source = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_SOURCE + offset] + buff [(int)LinkHeaderIndex.LI_SOURCE + offset + 1] * 256);  			control = buff [(int)LinkHeaderIndex.LI_CONTROL + offset];  			functioncode = ByteToFuncCode (Convert.ToByte (control & (byte)ControlMask.MASK_FUNC_OR_PRM));  			CRC = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_CRC + offset] + buff [(int)LinkHeaderIndex.LI_CRC + offset + 1] * 256);  			reslt = true;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.DataLinkLayer,LinkHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPDataLink.cs,Parse,The following statement contains a magic number: if (Valid_0564 (buff' offset)) {  	if (DnpPacket.checkCrc (buff' DataLinkHeaderLen)) {  		length = buff [(int)LinkHeaderIndex.LI_LENGTH + offset];  		destination = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_DESTINATION + offset] + buff [(int)LinkHeaderIndex.LI_DESTINATION + offset + 1] * 256);  		source = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_SOURCE + offset] + buff [(int)LinkHeaderIndex.LI_SOURCE + offset + 1] * 256);  		control = buff [(int)LinkHeaderIndex.LI_CONTROL + offset];  		functioncode = ByteToFuncCode (Convert.ToByte (control & (byte)ControlMask.MASK_FUNC_OR_PRM));  		CRC = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_CRC + offset] + buff [(int)LinkHeaderIndex.LI_CRC + offset + 1] * 256);  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.DataLinkLayer,LinkHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPDataLink.cs,Parse,The following statement contains a magic number: if (Valid_0564 (buff' offset)) {  	if (DnpPacket.checkCrc (buff' DataLinkHeaderLen)) {  		length = buff [(int)LinkHeaderIndex.LI_LENGTH + offset];  		destination = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_DESTINATION + offset] + buff [(int)LinkHeaderIndex.LI_DESTINATION + offset + 1] * 256);  		source = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_SOURCE + offset] + buff [(int)LinkHeaderIndex.LI_SOURCE + offset + 1] * 256);  		control = buff [(int)LinkHeaderIndex.LI_CONTROL + offset];  		functioncode = ByteToFuncCode (Convert.ToByte (control & (byte)ControlMask.MASK_FUNC_OR_PRM));  		CRC = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_CRC + offset] + buff [(int)LinkHeaderIndex.LI_CRC + offset + 1] * 256);  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.DataLinkLayer,LinkHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPDataLink.cs,Parse,The following statement contains a magic number: if (Valid_0564 (buff' offset)) {  	if (DnpPacket.checkCrc (buff' DataLinkHeaderLen)) {  		length = buff [(int)LinkHeaderIndex.LI_LENGTH + offset];  		destination = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_DESTINATION + offset] + buff [(int)LinkHeaderIndex.LI_DESTINATION + offset + 1] * 256);  		source = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_SOURCE + offset] + buff [(int)LinkHeaderIndex.LI_SOURCE + offset + 1] * 256);  		control = buff [(int)LinkHeaderIndex.LI_CONTROL + offset];  		functioncode = ByteToFuncCode (Convert.ToByte (control & (byte)ControlMask.MASK_FUNC_OR_PRM));  		CRC = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_CRC + offset] + buff [(int)LinkHeaderIndex.LI_CRC + offset + 1] * 256);  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.DataLinkLayer,LinkHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPDataLink.cs,Parse,The following statement contains a magic number: if (DnpPacket.checkCrc (buff' DataLinkHeaderLen)) {  	length = buff [(int)LinkHeaderIndex.LI_LENGTH + offset];  	destination = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_DESTINATION + offset] + buff [(int)LinkHeaderIndex.LI_DESTINATION + offset + 1] * 256);  	source = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_SOURCE + offset] + buff [(int)LinkHeaderIndex.LI_SOURCE + offset + 1] * 256);  	control = buff [(int)LinkHeaderIndex.LI_CONTROL + offset];  	functioncode = ByteToFuncCode (Convert.ToByte (control & (byte)ControlMask.MASK_FUNC_OR_PRM));  	CRC = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_CRC + offset] + buff [(int)LinkHeaderIndex.LI_CRC + offset + 1] * 256);  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.DataLinkLayer,LinkHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPDataLink.cs,Parse,The following statement contains a magic number: if (DnpPacket.checkCrc (buff' DataLinkHeaderLen)) {  	length = buff [(int)LinkHeaderIndex.LI_LENGTH + offset];  	destination = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_DESTINATION + offset] + buff [(int)LinkHeaderIndex.LI_DESTINATION + offset + 1] * 256);  	source = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_SOURCE + offset] + buff [(int)LinkHeaderIndex.LI_SOURCE + offset + 1] * 256);  	control = buff [(int)LinkHeaderIndex.LI_CONTROL + offset];  	functioncode = ByteToFuncCode (Convert.ToByte (control & (byte)ControlMask.MASK_FUNC_OR_PRM));  	CRC = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_CRC + offset] + buff [(int)LinkHeaderIndex.LI_CRC + offset + 1] * 256);  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.DataLinkLayer,LinkHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPDataLink.cs,Parse,The following statement contains a magic number: if (DnpPacket.checkCrc (buff' DataLinkHeaderLen)) {  	length = buff [(int)LinkHeaderIndex.LI_LENGTH + offset];  	destination = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_DESTINATION + offset] + buff [(int)LinkHeaderIndex.LI_DESTINATION + offset + 1] * 256);  	source = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_SOURCE + offset] + buff [(int)LinkHeaderIndex.LI_SOURCE + offset + 1] * 256);  	control = buff [(int)LinkHeaderIndex.LI_CONTROL + offset];  	functioncode = ByteToFuncCode (Convert.ToByte (control & (byte)ControlMask.MASK_FUNC_OR_PRM));  	CRC = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_CRC + offset] + buff [(int)LinkHeaderIndex.LI_CRC + offset + 1] * 256);  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.DataLinkLayer,LinkHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPDataLink.cs,Parse,The following statement contains a magic number: destination = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_DESTINATION + offset] + buff [(int)LinkHeaderIndex.LI_DESTINATION + offset + 1] * 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.DataLinkLayer,LinkHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPDataLink.cs,Parse,The following statement contains a magic number: source = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_SOURCE + offset] + buff [(int)LinkHeaderIndex.LI_SOURCE + offset + 1] * 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.DataLinkLayer,LinkHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPDataLink.cs,Parse,The following statement contains a magic number: CRC = Convert.ToUInt16 (buff [(int)LinkHeaderIndex.LI_CRC + offset] + buff [(int)LinkHeaderIndex.LI_CRC + offset + 1] * 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.DataLinkLayer,LinkHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPDataLink.cs,ToBytes,The following statement contains a magic number: buff [(int)LinkHeaderIndex.LI_DESTINATION + offset] = Convert.ToByte (destination % 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.DataLinkLayer,LinkHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPDataLink.cs,ToBytes,The following statement contains a magic number: buff [(int)LinkHeaderIndex.LI_DESTINATION + 1 + offset] = Convert.ToByte (destination / 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.DataLinkLayer,LinkHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPDataLink.cs,ToBytes,The following statement contains a magic number: buff [(int)LinkHeaderIndex.LI_SOURCE + offset] = Convert.ToByte (source % 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.DataLinkLayer,LinkHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPDataLink.cs,ToBytes,The following statement contains a magic number: buff [(int)LinkHeaderIndex.LI_SOURCE + 1 + offset] = Convert.ToByte (source / 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.DataLinkLayer,LinkHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPDataLink.cs,ToBytes,The following statement contains a magic number: buff [(int)LinkHeaderIndex.LI_CRC + offset] = Convert.ToByte (crc % 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.DataLinkLayer,LinkHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPDataLink.cs,ToBytes,The following statement contains a magic number: buff [(int)LinkHeaderIndex.LI_CRC + 1 + offset] = Convert.ToByte (crc / 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.DataLinkLayer,LinkHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPDataLink.cs,ToString,The following statement contains a magic number: reslt = string.Format ("{0} PayloadSize: {1} {2}"' reslt' length - 5' (IsFromMaster ()) ? " From Master" : " From Outstation");  
Magic Number,net.Tesacom.TsdProtocol.DNP,DnpPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,checkCrc,The following statement contains a magic number: if (len > 2)/* can't check crc on nothing */ {  	crc1 = calculateCrc (buff' len - 2);  	crc2 = Convert.ToUInt16 (buff [len - 1] * 256 + buff [len - 2]);  	if (crc1 == crc2)  		return true;  	else  		return false;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP,DnpPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,checkCrc,The following statement contains a magic number: if (len > 2)/* can't check crc on nothing */ {  	crc1 = calculateCrc (buff' len - 2);  	crc2 = Convert.ToUInt16 (buff [len - 1] * 256 + buff [len - 2]);  	if (crc1 == crc2)  		return true;  	else  		return false;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP,DnpPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,checkCrc,The following statement contains a magic number: if (len > 2)/* can't check crc on nothing */ {  	crc1 = calculateCrc (buff' len - 2);  	crc2 = Convert.ToUInt16 (buff [len - 1] * 256 + buff [len - 2]);  	if (crc1 == crc2)  		return true;  	else  		return false;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP,DnpPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,checkCrc,The following statement contains a magic number: if (len > 2)/* can't check crc on nothing */ {  	crc1 = calculateCrc (buff' len - 2);  	crc2 = Convert.ToUInt16 (buff [len - 1] * 256 + buff [len - 2]);  	if (crc1 == crc2)  		return true;  	else  		return false;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP,DnpPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,checkCrc,The following statement contains a magic number: crc1 = calculateCrc (buff' len - 2);  
Magic Number,net.Tesacom.TsdProtocol.DNP,DnpPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,checkCrc,The following statement contains a magic number: crc2 = Convert.ToUInt16 (buff [len - 1] * 256 + buff [len - 2]);  
Magic Number,net.Tesacom.TsdProtocol.DNP,DnpPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,checkCrc,The following statement contains a magic number: crc2 = Convert.ToUInt16 (buff [len - 1] * 256 + buff [len - 2]);  
Magic Number,net.Tesacom.TsdProtocol.DNP,DnpPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,calculateCrc,The following statement contains a magic number: for (i = 0; i < len; i++) {  	crc = Convert.ToUInt16 (Convert.ToUInt16 ((crc >> 8)) ^ Convert.ToUInt16 (crcTable [(crc ^ (buff [i])) & 0x00FF]));  }  
Magic Number,net.Tesacom.TsdProtocol.DNP,DnpPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,calculateCrc,The following statement contains a magic number: crc = Convert.ToUInt16 (Convert.ToUInt16 ((crc >> 8)) ^ Convert.ToUInt16 (crcTable [(crc ^ (buff [i])) & 0x00FF]));  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,getDNPDatalinkPacket,The following statement contains a magic number: linkdata = new byte[buff.Length - offset - LinkHeader.DataLinkHeaderLen - 2];  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,getDNPDatalinkPacket,The following statement contains a magic number: if (linkdata.Length >= DNPTransport.TL_MIN_TPDU_LENGTH) {  	for (int i = 0' j = offset + LinkHeader.DataLinkHeaderLen; j < buff.Length - 2; i++' j++) {  		//there are 16 bytes plus 2 bytes per chunk' last two bytes are crc   		if (!((i != 0) && ((i % 16 == 0) || (i % 17 == 0)))) {  			linkdata [i] = buff [j];  			realsize++;  		}  	}  	transporpkt = new DNPTransportPacket (linkdata);  	hasTransportPkt = transporpkt.IsValid;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,getDNPDatalinkPacket,The following statement contains a magic number: if (linkdata.Length >= DNPTransport.TL_MIN_TPDU_LENGTH) {  	for (int i = 0' j = offset + LinkHeader.DataLinkHeaderLen; j < buff.Length - 2; i++' j++) {  		//there are 16 bytes plus 2 bytes per chunk' last two bytes are crc   		if (!((i != 0) && ((i % 16 == 0) || (i % 17 == 0)))) {  			linkdata [i] = buff [j];  			realsize++;  		}  	}  	transporpkt = new DNPTransportPacket (linkdata);  	hasTransportPkt = transporpkt.IsValid;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,getDNPDatalinkPacket,The following statement contains a magic number: if (linkdata.Length >= DNPTransport.TL_MIN_TPDU_LENGTH) {  	for (int i = 0' j = offset + LinkHeader.DataLinkHeaderLen; j < buff.Length - 2; i++' j++) {  		//there are 16 bytes plus 2 bytes per chunk' last two bytes are crc   		if (!((i != 0) && ((i % 16 == 0) || (i % 17 == 0)))) {  			linkdata [i] = buff [j];  			realsize++;  		}  	}  	transporpkt = new DNPTransportPacket (linkdata);  	hasTransportPkt = transporpkt.IsValid;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,getDNPDatalinkPacket,The following statement contains a magic number: for (int i = 0' j = offset + LinkHeader.DataLinkHeaderLen; j < buff.Length - 2; i++' j++) {  	//there are 16 bytes plus 2 bytes per chunk' last two bytes are crc   	if (!((i != 0) && ((i % 16 == 0) || (i % 17 == 0)))) {  		linkdata [i] = buff [j];  		realsize++;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,getDNPDatalinkPacket,The following statement contains a magic number: for (int i = 0' j = offset + LinkHeader.DataLinkHeaderLen; j < buff.Length - 2; i++' j++) {  	//there are 16 bytes plus 2 bytes per chunk' last two bytes are crc   	if (!((i != 0) && ((i % 16 == 0) || (i % 17 == 0)))) {  		linkdata [i] = buff [j];  		realsize++;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,getDNPDatalinkPacket,The following statement contains a magic number: for (int i = 0' j = offset + LinkHeader.DataLinkHeaderLen; j < buff.Length - 2; i++' j++) {  	//there are 16 bytes plus 2 bytes per chunk' last two bytes are crc   	if (!((i != 0) && ((i % 16 == 0) || (i % 17 == 0)))) {  		linkdata [i] = buff [j];  		realsize++;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,getDNPDatalinkPacket,The following statement contains a magic number: if (!((i != 0) && ((i % 16 == 0) || (i % 17 == 0)))) {  	linkdata [i] = buff [j];  	realsize++;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,getDNPDatalinkPacket,The following statement contains a magic number: if (!((i != 0) && ((i % 16 == 0) || (i % 17 == 0)))) {  	linkdata [i] = buff [j];  	realsize++;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,getResetLinkResponse,The following statement contains a magic number: response.dnpdata [4] = Convert.ToByte (request.Source % 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,getResetLinkResponse,The following statement contains a magic number: response.dnpdata [4] = Convert.ToByte (request.Source % 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,getResetLinkResponse,The following statement contains a magic number: response.dnpdata [5] = Convert.ToByte (request.Source / 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,getResetLinkResponse,The following statement contains a magic number: response.dnpdata [5] = Convert.ToByte (request.Source / 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,getResetLinkResponse,The following statement contains a magic number: response.dnpdata [6] = Convert.ToByte (request.Destination % 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,getResetLinkResponse,The following statement contains a magic number: response.dnpdata [6] = Convert.ToByte (request.Destination % 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,getResetLinkResponse,The following statement contains a magic number: response.dnpdata [7] = Convert.ToByte (request.Destination / 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,getResetLinkResponse,The following statement contains a magic number: response.dnpdata [7] = Convert.ToByte (request.Destination / 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,getResetLinkResponse,The following statement contains a magic number: response.dnpdata [8] = Convert.ToByte (crc % 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,getResetLinkResponse,The following statement contains a magic number: response.dnpdata [8] = Convert.ToByte (crc % 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,getResetLinkResponse,The following statement contains a magic number: response.dnpdata [9] = Convert.ToByte (crc / 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,getResetLinkResponse,The following statement contains a magic number: response.dnpdata [9] = Convert.ToByte (crc / 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,ToBytes,The following statement contains a magic number: for (int i = (int)DNPDataLink.LinkSizes.LS_HEADER_SIZE' j = 0; j < data.Length; i++) {  	if ((j > 0) && (j % (int)DNPDataLink.LinkSizes.LS_DATA_BLOCK_SIZE == 0)) {  		//calc crc  		tempcrc = DnpPacket.calculateCrc (tempdata' tempdata.Length);  		buff [i] = Convert.ToByte (tempcrc % 256);  		buff [i + 1] = Convert.ToByte (tempcrc / 256);  		i++;  		tempidx = 0;  		//keep going and put data into buffer  		buff [i + 1] = data [j];  		tempdata [tempidx++] = data [j];  		j++;  		i++;  	}  	else {  		buff [i] = data [j];  		tempdata [tempidx++] = data [j];  		j++;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,ToBytes,The following statement contains a magic number: for (int i = (int)DNPDataLink.LinkSizes.LS_HEADER_SIZE' j = 0; j < data.Length; i++) {  	if ((j > 0) && (j % (int)DNPDataLink.LinkSizes.LS_DATA_BLOCK_SIZE == 0)) {  		//calc crc  		tempcrc = DnpPacket.calculateCrc (tempdata' tempdata.Length);  		buff [i] = Convert.ToByte (tempcrc % 256);  		buff [i + 1] = Convert.ToByte (tempcrc / 256);  		i++;  		tempidx = 0;  		//keep going and put data into buffer  		buff [i + 1] = data [j];  		tempdata [tempidx++] = data [j];  		j++;  		i++;  	}  	else {  		buff [i] = data [j];  		tempdata [tempidx++] = data [j];  		j++;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,ToBytes,The following statement contains a magic number: if ((j > 0) && (j % (int)DNPDataLink.LinkSizes.LS_DATA_BLOCK_SIZE == 0)) {  	//calc crc  	tempcrc = DnpPacket.calculateCrc (tempdata' tempdata.Length);  	buff [i] = Convert.ToByte (tempcrc % 256);  	buff [i + 1] = Convert.ToByte (tempcrc / 256);  	i++;  	tempidx = 0;  	//keep going and put data into buffer  	buff [i + 1] = data [j];  	tempdata [tempidx++] = data [j];  	j++;  	i++;  }  else {  	buff [i] = data [j];  	tempdata [tempidx++] = data [j];  	j++;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,ToBytes,The following statement contains a magic number: if ((j > 0) && (j % (int)DNPDataLink.LinkSizes.LS_DATA_BLOCK_SIZE == 0)) {  	//calc crc  	tempcrc = DnpPacket.calculateCrc (tempdata' tempdata.Length);  	buff [i] = Convert.ToByte (tempcrc % 256);  	buff [i + 1] = Convert.ToByte (tempcrc / 256);  	i++;  	tempidx = 0;  	//keep going and put data into buffer  	buff [i + 1] = data [j];  	tempdata [tempidx++] = data [j];  	j++;  	i++;  }  else {  	buff [i] = data [j];  	tempdata [tempidx++] = data [j];  	j++;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,ToBytes,The following statement contains a magic number: buff [i] = Convert.ToByte (tempcrc % 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,ToBytes,The following statement contains a magic number: buff [i + 1] = Convert.ToByte (tempcrc / 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,ToBytes,The following statement contains a magic number: if (tempidx > 0) {  	tempcrc = DnpPacket.calculateCrc (tempdata' tempidx);  	buff [buff.Length - 1] = Convert.ToByte (tempcrc % 256);  	buff [buff.Length - 2] = Convert.ToByte (tempcrc / 256);  }  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,ToBytes,The following statement contains a magic number: if (tempidx > 0) {  	tempcrc = DnpPacket.calculateCrc (tempdata' tempidx);  	buff [buff.Length - 1] = Convert.ToByte (tempcrc % 256);  	buff [buff.Length - 2] = Convert.ToByte (tempcrc / 256);  }  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,ToBytes,The following statement contains a magic number: if (tempidx > 0) {  	tempcrc = DnpPacket.calculateCrc (tempdata' tempidx);  	buff [buff.Length - 1] = Convert.ToByte (tempcrc % 256);  	buff [buff.Length - 2] = Convert.ToByte (tempcrc / 256);  }  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,ToBytes,The following statement contains a magic number: buff [buff.Length - 1] = Convert.ToByte (tempcrc % 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,ToBytes,The following statement contains a magic number: buff [buff.Length - 2] = Convert.ToByte (tempcrc / 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP,DNPDatalinkPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,ToBytes,The following statement contains a magic number: buff [buff.Length - 2] = Convert.ToByte (tempcrc / 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged2OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: if (buff.Length >= offset + 2 * 1) {  	IndexStart = buff [offset];  	IndexStop = buff [offset + 1];  	return offset + 2 * 1;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged2OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: if (buff.Length >= offset + 2 * 1) {  	IndexStart = buff [offset];  	IndexStop = buff [offset + 1];  	return offset + 2 * 1;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged2OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: return offset + 2 * 1;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged4OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: if (buff.Length >= offset + 2 * 2) {  	IndexStart = Convert.ToUInt16 (buff [offset] * 256 + buff [offset + 1]);  	IndexStop = Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3]);  	return offset + 2 * 2;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged4OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: if (buff.Length >= offset + 2 * 2) {  	IndexStart = Convert.ToUInt16 (buff [offset] * 256 + buff [offset + 1]);  	IndexStop = Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3]);  	return offset + 2 * 2;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged4OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: if (buff.Length >= offset + 2 * 2) {  	IndexStart = Convert.ToUInt16 (buff [offset] * 256 + buff [offset + 1]);  	IndexStop = Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3]);  	return offset + 2 * 2;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged4OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: if (buff.Length >= offset + 2 * 2) {  	IndexStart = Convert.ToUInt16 (buff [offset] * 256 + buff [offset + 1]);  	IndexStop = Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3]);  	return offset + 2 * 2;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged4OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: if (buff.Length >= offset + 2 * 2) {  	IndexStart = Convert.ToUInt16 (buff [offset] * 256 + buff [offset + 1]);  	IndexStop = Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3]);  	return offset + 2 * 2;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged4OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: if (buff.Length >= offset + 2 * 2) {  	IndexStart = Convert.ToUInt16 (buff [offset] * 256 + buff [offset + 1]);  	IndexStop = Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3]);  	return offset + 2 * 2;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged4OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: if (buff.Length >= offset + 2 * 2) {  	IndexStart = Convert.ToUInt16 (buff [offset] * 256 + buff [offset + 1]);  	IndexStop = Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3]);  	return offset + 2 * 2;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged4OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: if (buff.Length >= offset + 2 * 2) {  	IndexStart = Convert.ToUInt16 (buff [offset] * 256 + buff [offset + 1]);  	IndexStop = Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3]);  	return offset + 2 * 2;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged4OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: IndexStart = Convert.ToUInt16 (buff [offset] * 256 + buff [offset + 1]);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged4OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: IndexStop = Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3]);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged4OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: IndexStop = Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3]);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged4OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: IndexStop = Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3]);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged4OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: return offset + 2 * 2;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged4OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: return offset + 2 * 2;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged8OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: if (buff.Length >= offset + 2 * 4) {  	IndexStart = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset] * 256 + buff [offset + 1])) * 65536 + (Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3]));  	IndexStop = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset + 4] * 256 + buff [offset + 5])) * 65536 + (Convert.ToUInt16 (buff [offset + 6] * 256 + buff [offset + 7]));  	return offset + 2 * 2;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged8OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: if (buff.Length >= offset + 2 * 4) {  	IndexStart = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset] * 256 + buff [offset + 1])) * 65536 + (Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3]));  	IndexStop = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset + 4] * 256 + buff [offset + 5])) * 65536 + (Convert.ToUInt16 (buff [offset + 6] * 256 + buff [offset + 7]));  	return offset + 2 * 2;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged8OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: if (buff.Length >= offset + 2 * 4) {  	IndexStart = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset] * 256 + buff [offset + 1])) * 65536 + (Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3]));  	IndexStop = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset + 4] * 256 + buff [offset + 5])) * 65536 + (Convert.ToUInt16 (buff [offset + 6] * 256 + buff [offset + 7]));  	return offset + 2 * 2;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged8OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: if (buff.Length >= offset + 2 * 4) {  	IndexStart = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset] * 256 + buff [offset + 1])) * 65536 + (Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3]));  	IndexStop = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset + 4] * 256 + buff [offset + 5])) * 65536 + (Convert.ToUInt16 (buff [offset + 6] * 256 + buff [offset + 7]));  	return offset + 2 * 2;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged8OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: if (buff.Length >= offset + 2 * 4) {  	IndexStart = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset] * 256 + buff [offset + 1])) * 65536 + (Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3]));  	IndexStop = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset + 4] * 256 + buff [offset + 5])) * 65536 + (Convert.ToUInt16 (buff [offset + 6] * 256 + buff [offset + 7]));  	return offset + 2 * 2;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged8OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: if (buff.Length >= offset + 2 * 4) {  	IndexStart = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset] * 256 + buff [offset + 1])) * 65536 + (Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3]));  	IndexStop = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset + 4] * 256 + buff [offset + 5])) * 65536 + (Convert.ToUInt16 (buff [offset + 6] * 256 + buff [offset + 7]));  	return offset + 2 * 2;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged8OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: if (buff.Length >= offset + 2 * 4) {  	IndexStart = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset] * 256 + buff [offset + 1])) * 65536 + (Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3]));  	IndexStop = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset + 4] * 256 + buff [offset + 5])) * 65536 + (Convert.ToUInt16 (buff [offset + 6] * 256 + buff [offset + 7]));  	return offset + 2 * 2;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged8OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: if (buff.Length >= offset + 2 * 4) {  	IndexStart = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset] * 256 + buff [offset + 1])) * 65536 + (Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3]));  	IndexStop = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset + 4] * 256 + buff [offset + 5])) * 65536 + (Convert.ToUInt16 (buff [offset + 6] * 256 + buff [offset + 7]));  	return offset + 2 * 2;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged8OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: if (buff.Length >= offset + 2 * 4) {  	IndexStart = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset] * 256 + buff [offset + 1])) * 65536 + (Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3]));  	IndexStop = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset + 4] * 256 + buff [offset + 5])) * 65536 + (Convert.ToUInt16 (buff [offset + 6] * 256 + buff [offset + 7]));  	return offset + 2 * 2;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged8OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: if (buff.Length >= offset + 2 * 4) {  	IndexStart = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset] * 256 + buff [offset + 1])) * 65536 + (Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3]));  	IndexStop = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset + 4] * 256 + buff [offset + 5])) * 65536 + (Convert.ToUInt16 (buff [offset + 6] * 256 + buff [offset + 7]));  	return offset + 2 * 2;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged8OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: if (buff.Length >= offset + 2 * 4) {  	IndexStart = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset] * 256 + buff [offset + 1])) * 65536 + (Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3]));  	IndexStop = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset + 4] * 256 + buff [offset + 5])) * 65536 + (Convert.ToUInt16 (buff [offset + 6] * 256 + buff [offset + 7]));  	return offset + 2 * 2;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged8OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: if (buff.Length >= offset + 2 * 4) {  	IndexStart = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset] * 256 + buff [offset + 1])) * 65536 + (Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3]));  	IndexStop = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset + 4] * 256 + buff [offset + 5])) * 65536 + (Convert.ToUInt16 (buff [offset + 6] * 256 + buff [offset + 7]));  	return offset + 2 * 2;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged8OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: if (buff.Length >= offset + 2 * 4) {  	IndexStart = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset] * 256 + buff [offset + 1])) * 65536 + (Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3]));  	IndexStop = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset + 4] * 256 + buff [offset + 5])) * 65536 + (Convert.ToUInt16 (buff [offset + 6] * 256 + buff [offset + 7]));  	return offset + 2 * 2;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged8OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: if (buff.Length >= offset + 2 * 4) {  	IndexStart = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset] * 256 + buff [offset + 1])) * 65536 + (Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3]));  	IndexStop = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset + 4] * 256 + buff [offset + 5])) * 65536 + (Convert.ToUInt16 (buff [offset + 6] * 256 + buff [offset + 7]));  	return offset + 2 * 2;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged8OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: if (buff.Length >= offset + 2 * 4) {  	IndexStart = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset] * 256 + buff [offset + 1])) * 65536 + (Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3]));  	IndexStop = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset + 4] * 256 + buff [offset + 5])) * 65536 + (Convert.ToUInt16 (buff [offset + 6] * 256 + buff [offset + 7]));  	return offset + 2 * 2;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged8OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: if (buff.Length >= offset + 2 * 4) {  	IndexStart = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset] * 256 + buff [offset + 1])) * 65536 + (Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3]));  	IndexStop = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset + 4] * 256 + buff [offset + 5])) * 65536 + (Convert.ToUInt16 (buff [offset + 6] * 256 + buff [offset + 7]));  	return offset + 2 * 2;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged8OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: IndexStart = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset] * 256 + buff [offset + 1])) * 65536 + (Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3]));  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged8OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: IndexStart = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset] * 256 + buff [offset + 1])) * 65536 + (Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3]));  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged8OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: IndexStart = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset] * 256 + buff [offset + 1])) * 65536 + (Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3]));  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged8OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: IndexStart = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset] * 256 + buff [offset + 1])) * 65536 + (Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3]));  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged8OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: IndexStart = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset] * 256 + buff [offset + 1])) * 65536 + (Convert.ToUInt16 (buff [offset + 2] * 256 + buff [offset + 3]));  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged8OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: IndexStop = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset + 4] * 256 + buff [offset + 5])) * 65536 + (Convert.ToUInt16 (buff [offset + 6] * 256 + buff [offset + 7]));  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged8OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: IndexStop = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset + 4] * 256 + buff [offset + 5])) * 65536 + (Convert.ToUInt16 (buff [offset + 6] * 256 + buff [offset + 7]));  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged8OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: IndexStop = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset + 4] * 256 + buff [offset + 5])) * 65536 + (Convert.ToUInt16 (buff [offset + 6] * 256 + buff [offset + 7]));  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged8OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: IndexStop = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset + 4] * 256 + buff [offset + 5])) * 65536 + (Convert.ToUInt16 (buff [offset + 6] * 256 + buff [offset + 7]));  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged8OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: IndexStop = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset + 4] * 256 + buff [offset + 5])) * 65536 + (Convert.ToUInt16 (buff [offset + 6] * 256 + buff [offset + 7]));  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged8OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: IndexStop = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset + 4] * 256 + buff [offset + 5])) * 65536 + (Convert.ToUInt16 (buff [offset + 6] * 256 + buff [offset + 7]));  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged8OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: IndexStop = Convert.ToUInt32 (Convert.ToUInt16 (buff [offset + 4] * 256 + buff [offset + 5])) * 65536 + (Convert.ToUInt16 (buff [offset + 6] * 256 + buff [offset + 7]));  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged8OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: return offset + 2 * 2;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Ranged8OctetHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,setRange,The following statement contains a magic number: return offset + 2 * 2;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: hbytes [2] = (byte)header.Qualifier;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: switch (header.Qualifier) {  case ObjectHeader.QualifierCode.QC_ALL_OBJ:  	break;  case ObjectHeader.QualifierCode.QC_1B_CNT:  case ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX:  case ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE:  case ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE:  	rbytes = new byte[1];  	rbytes [0] = Convert.ToByte (objectData.Length);  	break;  case ObjectHeader.QualifierCode.QC_1B_START_STOP:  	rbytes = new byte[2];  	rbytes [0] = (byte)Range.Start;  	rbytes [1] = (byte)Range.Stop;  	break;  case ObjectHeader.QualifierCode.QC_2B_START_STOP:  	rbytes = new byte[4];  	rbytes [0] = Convert.ToByte (Range.Start % 256);  	rbytes [1] = Convert.ToByte (Range.Start / 256);  	rbytes [2] = Convert.ToByte (Range.Stop % 256);  	rbytes [3] = Convert.ToByte (Range.Stop / 256);  	break;  case ObjectHeader.QualifierCode.QC_2B_CNT:  case ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX:  	rbytes = new byte[2];  	cnt16 = Convert.ToUInt16 (objectData.Length);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_CNT:  case ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX:  	rbytes = new byte[4];  	cnt32 = Convert.ToUInt32 (objectData.Length);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	break;  case ObjectHeader.QualifierCode.QC_4B_START_STOP:  	rbytes = new byte[8];  	cnt32 = Convert.ToUInt32 (Range.Start);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [0] = Convert.ToByte (cnt16 % 256);  	rbytes [1] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [2] = Convert.ToByte (cnt16 % 256);  	rbytes [3] = Convert.ToByte (cnt16 / 256);  	cnt32 = Convert.ToUInt32 (Range.Stop);  	cnt16 = Convert.ToUInt16 (cnt32 % 65536);  	rbytes [4] = Convert.ToByte (cnt16 % 256);  	rbytes [5] = Convert.ToByte (cnt16 / 256);  	cnt16 = Convert.ToUInt16 (cnt32 / 65536);  	rbytes [6] = Convert.ToByte (cnt16 % 256);  	rbytes [7] = Convert.ToByte (cnt16 / 256);  	break;  //faltan datos  default:  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes = new byte[2];  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes = new byte[4];  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes [0] = Convert.ToByte (Range.Start % 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes [1] = Convert.ToByte (Range.Start / 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes [2] = Convert.ToByte (Range.Stop % 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes [2] = Convert.ToByte (Range.Stop % 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes [3] = Convert.ToByte (Range.Stop / 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes [3] = Convert.ToByte (Range.Stop / 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes = new byte[2];  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes [0] = Convert.ToByte (cnt16 % 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes [1] = Convert.ToByte (cnt16 / 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes = new byte[4];  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: cnt16 = Convert.ToUInt16 (cnt32 % 65536);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes [0] = Convert.ToByte (cnt16 % 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes [1] = Convert.ToByte (cnt16 / 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: cnt16 = Convert.ToUInt16 (cnt32 / 65536);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes [2] = Convert.ToByte (cnt16 % 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes [2] = Convert.ToByte (cnt16 % 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes [3] = Convert.ToByte (cnt16 / 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes [3] = Convert.ToByte (cnt16 / 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes = new byte[8];  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: cnt16 = Convert.ToUInt16 (cnt32 % 65536);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes [0] = Convert.ToByte (cnt16 % 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes [1] = Convert.ToByte (cnt16 / 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: cnt16 = Convert.ToUInt16 (cnt32 % 65536);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes [2] = Convert.ToByte (cnt16 % 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes [2] = Convert.ToByte (cnt16 % 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes [3] = Convert.ToByte (cnt16 / 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes [3] = Convert.ToByte (cnt16 / 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: cnt16 = Convert.ToUInt16 (cnt32 % 65536);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes [4] = Convert.ToByte (cnt16 % 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes [4] = Convert.ToByte (cnt16 % 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes [5] = Convert.ToByte (cnt16 / 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes [5] = Convert.ToByte (cnt16 / 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: cnt16 = Convert.ToUInt16 (cnt32 / 65536);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes [6] = Convert.ToByte (cnt16 % 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes [6] = Convert.ToByte (cnt16 % 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes [7] = Convert.ToByte (cnt16 / 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayerObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,ToBytes,The following statement contains a magic number: rbytes [7] = Convert.ToByte (cnt16 / 256);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,GetNumObjects,The following statement contains a magic number: switch (apHeader.type) {  case (ObjectHeader.ObjectHeaderType.OHT_ALL_OBJECTS):  	return 0;  case (ObjectHeader.ObjectHeaderType.OHT_RANGED_2_OCTET):  case (ObjectHeader.ObjectHeaderType.OHT_RANGED_4_OCTET):  case (ObjectHeader.ObjectHeaderType.OHT_RANGED_8_OCTET):  	/* TBD Later           RangeInfo info;           static_cast<const IRangeHeader*>(apHeader)->GetRange(apStart' info);           if(info.Start > info.Stop)           { throw Exception(LOCATION' ""' ALERR_START_STOP_MISMATCH); }           return (info.Stop - info.Start + 1); //indices are inclusive            */return apStart.Length / 8;  case (ObjectHeader.ObjectHeaderType.OHT_COUNT_1_OCTET):  case (ObjectHeader.ObjectHeaderType.OHT_COUNT_2_OCTET):  case (ObjectHeader.ObjectHeaderType.OHT_COUNT_4_OCTET):  	/*           return static_cast<const ICountHeader*>(apHeader)->GetCount(apStart);            */return apStart.Length / 4;  default:  	return 0;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,GetNumObjects,The following statement contains a magic number: switch (apHeader.type) {  case (ObjectHeader.ObjectHeaderType.OHT_ALL_OBJECTS):  	return 0;  case (ObjectHeader.ObjectHeaderType.OHT_RANGED_2_OCTET):  case (ObjectHeader.ObjectHeaderType.OHT_RANGED_4_OCTET):  case (ObjectHeader.ObjectHeaderType.OHT_RANGED_8_OCTET):  	/* TBD Later           RangeInfo info;           static_cast<const IRangeHeader*>(apHeader)->GetRange(apStart' info);           if(info.Start > info.Stop)           { throw Exception(LOCATION' ""' ALERR_START_STOP_MISMATCH); }           return (info.Stop - info.Start + 1); //indices are inclusive            */return apStart.Length / 8;  case (ObjectHeader.ObjectHeaderType.OHT_COUNT_1_OCTET):  case (ObjectHeader.ObjectHeaderType.OHT_COUNT_2_OCTET):  case (ObjectHeader.ObjectHeaderType.OHT_COUNT_4_OCTET):  	/*           return static_cast<const ICountHeader*>(apHeader)->GetCount(apStart);            */return apStart.Length / 4;  default:  	return 0;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,GetNumObjects,The following statement contains a magic number: return apStart.Length / 8;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,DNPObjectLayer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPObjectLayer.cs,GetNumObjects,The following statement contains a magic number: return apStart.Length / 4;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,MACRO_DNP_RADIX,The following statement contains a magic number: return (obj << 4) | var;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,MACRO_QUAL_OBJ_RADIX,The following statement contains a magic number: return (ushort)(((ushort)qual << 8) | (ushort)oType);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: return 2;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: return 2;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: return 4;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: return 4;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: return 2;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: return 4;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: return 2;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following statement contains a magic number: return 4;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,getObjectVariationFromEnum,The following statement contains a magic number: return s.Substring (4' s.IndexOf ("__"));  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,getObjectVariationFromEnum,The following statement contains a magic number: obj = (int)((int)type / 1000);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,getObjectVariationFromEnum,The following statement contains a magic number: var = (int)((int)type % 1000);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,TObjectBase,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetGroup,The following statement contains a magic number: return (int)type / 1000;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,TObjectBase,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetVariation,The following statement contains a magic number: return (int)type % 1000;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,BitfieldObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,Read,The following statement contains a magic number: if (aIndex >= aStartIndex) {  	int pos = aIndex - aStartIndex;  	idx += (pos >> 3);  	//figure out which byte you are on and advance the pointer  	return ((apPos [idx]) & (1 << (pos & 0x07))) != 0;  }  else  	return false;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,BitfieldObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,Read,The following statement contains a magic number: idx += (pos >> 3);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,BitfieldObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,Write,The following statement contains a magic number: if (aIndex >= aStartIndex) {  	int pos = aIndex - aStartIndex;  	idx += (pos >> 3);  	//figure out which byte you are on and advance the pointer  	byte bit_mask = Convert.ToByte (1 << (pos & 0x07));  	if (aValue)  		apPos [idx] |= bit_mask;  	else {  		//invert' i do not know how  		apPos [idx] &= reverse (bit_mask);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,BitfieldObject,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,Write,The following statement contains a magic number: idx += (pos >> 3);  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Group1Var2,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,Group1Var2,The following statement contains a magic number: Variation = 2;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Group1Var2,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,Group1Var2,The following statement contains a magic number: Variation = 2;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Group2Var2,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,Group2Var2,The following statement contains a magic number: size = 7;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Group12Var1,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,Group12Var1,The following statement contains a magic number: size = 11;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Group30Var2,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,Group30Var2,The following statement contains a magic number: size = 3;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Group32Var4,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,Group32Var4,The following statement contains a magic number: size = 9;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Group60Var1,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,Group60Var1,The following statement contains a magic number: Group = 60;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Group60Var2,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,Group60Var2,The following statement contains a magic number: Group = 60;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Group60Var2,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,Group60Var2,The following statement contains a magic number: Variation = 2;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Group60Var3,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,Group60Var3,The following statement contains a magic number: Group = 60;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Group60Var3,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,Group60Var3,The following statement contains a magic number: Variation = 3;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Group60Var4,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,Group60Var4,The following statement contains a magic number: Group = 60;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Group60Var4,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,Group60Var4,The following statement contains a magic number: Variation = 4;  
Magic Number,net.Tesacom.TsdProtocol.DNP.ObjectLayer,Group80Var1,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,Group80Var1,The following statement contains a magic number: Group = 80;  
Magic Number,net.Tesacom.TsdProtocol.DNP.TransportLayer,TransportHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPTransport.cs,IncSeq,The following statement contains a magic number: if (seq > 63)  	seq = 0;  
Magic Number,net.Tesacom.TsdProtocol,ClientConnection,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\NewTcpServerClass.cs,ClientConnection,The following statement contains a magic number: SetBuffers (1024' 1024);  
Magic Number,net.Tesacom.TsdProtocol,ClientConnection,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\NewTcpServerClass.cs,ClientConnection,The following statement contains a magic number: SetBuffers (1024' 1024);  
Magic Number,net.Tesacom.TsdProtocol,NewTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\NewTcpServerClass.cs,Start,The following statement contains a magic number: if (ExtraVerbose) {  	string dir = System.IO.Path.GetDirectoryName (Assembly.GetEntryAssembly ().Location);  	log = LogFileManager.getAltLog (dir' "tcpserver");  	log.FileSize = 1024;  }  
Magic Number,net.Tesacom.TsdProtocol,NewTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\NewTcpServerClass.cs,Start,The following statement contains a magic number: log.FileSize = 1024;  
Magic Number,net.Tesacom.TsdProtocol,NewTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\NewTcpServerClass.cs,Start,The following statement contains a magic number: try {  	// Create the listening socket...  	listeningSocket = new Socket (AddressFamily.InterNetwork' SocketType.Stream' System.Net.Sockets.ProtocolType.Tcp);  	// Bind to local IP Address...  	listeningSocket.Bind (localEndPoint);  	// added on 2011.12.06 by SN to test Edemsa issues  	listeningSocket.NoDelay = true;  	// Start listening...  	listeningSocket.Listen (150);  	// Create the call back for any client connections...  	listeningSocket.BeginAccept (new AsyncCallback (OnClientConnect)' null);  	//  	started = true;  	//  	reslt = true;  }  catch (SocketException se) {  	Encoding e = Encoding.GetEncoding (TsdProtocol.Status.StatusProtocol.UsedEncoding);  	OnExceptionOnSocket (new MessageEvent (e.GetBytes (string.Format ("{0} on Start"' se.Message))' null));  	reslt = false;  	if (log != null)  		if (ExtraVerbose) {  			log.writeToLogFile (LogType.LOG_DEBUG' "Start"' "{0}' SocketException on socket {1}"' Name' se.Message);  		}  }  
Magic Number,net.Tesacom.TsdProtocol,NewTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\NewTcpServerClass.cs,Start,The following statement contains a magic number: listeningSocket.Listen (150);  
Magic Number,net.Tesacom.TsdProtocol,TcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpServerClass.cs,Start,The following statement contains a magic number: if (ExtraVerbose) {  	string dir = System.IO.Path.GetDirectoryName (Assembly.GetEntryAssembly ().Location);  	log = LogFileManager.getAltLog (dir' "tcpserver");  	log.FileSize = 1024;  }  
Magic Number,net.Tesacom.TsdProtocol,TcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpServerClass.cs,Start,The following statement contains a magic number: log.FileSize = 1024;  
Magic Number,net.Tesacom.TsdProtocol,TcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpServerClass.cs,Start,The following statement contains a magic number: if (ExtraVerbose) {  	string dir = System.IO.Path.GetDirectoryName (Assembly.GetEntryAssembly ().Location);  	log = LogFileManager.getAltLog (dir' "tcpserver");  	log.FileSize = 1024;  }  
Magic Number,net.Tesacom.TsdProtocol,TcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpServerClass.cs,Start,The following statement contains a magic number: log.FileSize = 1024;  
Magic Number,net.Tesacom.TsdProtocol,PooledTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\PooledTcpServerClass.cs,Start,The following statement contains a magic number: if (ExtraVerbose) {  	string dir = System.IO.Path.GetDirectoryName (Assembly.GetEntryAssembly ().Location);  	log = LogFileManager.getAltLog (dir' "tcpserver");  	log.FileSize = 1024;  }  
Magic Number,net.Tesacom.TsdProtocol,PooledTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\PooledTcpServerClass.cs,Start,The following statement contains a magic number: log.FileSize = 1024;  
Magic Number,net.Tesacom.TsdProtocol,PooledTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\PooledTcpServerClass.cs,Start,The following statement contains a magic number: if (ExtraVerbose) {  	string dir = System.IO.Path.GetDirectoryName (Assembly.GetEntryAssembly ().Location);  	log = LogFileManager.getAltLog (dir' "tcpserver");  	log.FileSize = 1024;  }  
Magic Number,net.Tesacom.TsdProtocol,PooledTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\PooledTcpServerClass.cs,Start,The following statement contains a magic number: log.FileSize = 1024;  
Magic Number,net.Tesacom.TsdProtocol,PooledTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\PooledTcpServerClass.cs,ListenForClients,The following statement contains a magic number: ThreadPool.SetMaxThreads (500' 500);  
Magic Number,net.Tesacom.TsdProtocol,PooledTcpServerClass,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\PooledTcpServerClass.cs,ListenForClients,The following statement contains a magic number: ThreadPool.SetMaxThreads (500' 500);  
Magic Number,net.Tesacom.TsdProtocol,TcpProtocolServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpProtocolServer.cs,TcpProtocolServer,The following statement contains a magic number: model.SetBuffers (512' 512);  
Magic Number,net.Tesacom.TsdProtocol,TcpProtocolServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpProtocolServer.cs,TcpProtocolServer,The following statement contains a magic number: model.SetBuffers (512' 512);  
Magic Number,net.Tesacom.TsdProtocol,TcpProtocolServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpProtocolServer.cs,Parse,The following statement contains a magic number: foreach (XmlNode node in DestNode.ChildNodes) {  	switch (node.Name.ToLower ()) {  	case "type":  		try {  			ProtocType = ProtocolType.Parse (getValueInAttributes (node.Attributes' "modbus"));  			reslt = true;  		}  		catch (Exception) {  			ProtocType = eProtocolType.Modbus;  		}  		reslts.Add (string.Format ("Protocol id=\"{0}\" param ProtocType={1}"' ProtocolId' ProtocType));  		break;  	case "address":  		try {  			LocalAddress = IPAddress.Parse (getValueInAttributes (node.Attributes' "127.0.0.1")).ToString ();  		}  		catch (Exception) {  			LocalAddress = "127.0.0.1";  		}  		reslts.Add (string.Format ("Protocol id=\"{0}\" param address={1}"' ProtocolId' LocalAddress));  		break;  	case "tcpport":  		try {  			TcpPort = Convert.ToInt16 (getValueInAttributes (node.Attributes' "502"));  		}  		catch (Exception) {  			TcpPort = 502;  		}  		reslts.Add (string.Format ("Protocol id=\"{0}\" param TcpPort={1}"' ProtocolId' TcpPort));  		break;  	case "verbose":  		try {  			Verbose = TcpProtocolServer.ParseVerbose (Convert.ToUInt16 (getValueInAttributes (node.Attributes' "1")));  		}  		catch (Exception) {  		}  		reslts.Add (string.Format ("Protocol id=\"{0}\" param Verbose={1}"' ProtocolId' GetVerbose ()));  		break;  	case "desc":  		try {  			Description = getValueInAttributes (node.Attributes' "");  		}  		catch (Exception) {  			Description = "";  		}  		reslts.Add (string.Format ("Protocol id=\"{0}\" param Description={1}"' ProtocolId' Description));  		break;  	case "password":  		try {  			password = getValueInAttributes (node.Attributes' "");  		}  		catch (Exception) {  			password = "T3S4C0M";  		}  		reslts.Add (string.Format ("Protocol id=\"{0}\" param Password={1}"' ProtocolId' "Seteada"));  		break;  	}  }  
Magic Number,net.Tesacom.TsdProtocol,TcpProtocolServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpProtocolServer.cs,Parse,The following statement contains a magic number: switch (node.Name.ToLower ()) {  case "type":  	try {  		ProtocType = ProtocolType.Parse (getValueInAttributes (node.Attributes' "modbus"));  		reslt = true;  	}  	catch (Exception) {  		ProtocType = eProtocolType.Modbus;  	}  	reslts.Add (string.Format ("Protocol id=\"{0}\" param ProtocType={1}"' ProtocolId' ProtocType));  	break;  case "address":  	try {  		LocalAddress = IPAddress.Parse (getValueInAttributes (node.Attributes' "127.0.0.1")).ToString ();  	}  	catch (Exception) {  		LocalAddress = "127.0.0.1";  	}  	reslts.Add (string.Format ("Protocol id=\"{0}\" param address={1}"' ProtocolId' LocalAddress));  	break;  case "tcpport":  	try {  		TcpPort = Convert.ToInt16 (getValueInAttributes (node.Attributes' "502"));  	}  	catch (Exception) {  		TcpPort = 502;  	}  	reslts.Add (string.Format ("Protocol id=\"{0}\" param TcpPort={1}"' ProtocolId' TcpPort));  	break;  case "verbose":  	try {  		Verbose = TcpProtocolServer.ParseVerbose (Convert.ToUInt16 (getValueInAttributes (node.Attributes' "1")));  	}  	catch (Exception) {  	}  	reslts.Add (string.Format ("Protocol id=\"{0}\" param Verbose={1}"' ProtocolId' GetVerbose ()));  	break;  case "desc":  	try {  		Description = getValueInAttributes (node.Attributes' "");  	}  	catch (Exception) {  		Description = "";  	}  	reslts.Add (string.Format ("Protocol id=\"{0}\" param Description={1}"' ProtocolId' Description));  	break;  case "password":  	try {  		password = getValueInAttributes (node.Attributes' "");  	}  	catch (Exception) {  		password = "T3S4C0M";  	}  	reslts.Add (string.Format ("Protocol id=\"{0}\" param Password={1}"' ProtocolId' "Seteada"));  	break;  }  
Magic Number,net.Tesacom.TsdProtocol,TcpProtocolServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpProtocolServer.cs,Parse,The following statement contains a magic number: try {  	TcpPort = Convert.ToInt16 (getValueInAttributes (node.Attributes' "502"));  }  catch (Exception) {  	TcpPort = 502;  }  
Magic Number,net.Tesacom.TsdProtocol,TcpProtocolServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpProtocolServer.cs,Parse,The following statement contains a magic number: TcpPort = 502;  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104Plus,IEC104PlusServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104PlusServer.cs,Parse,The following statement contains a magic number: foreach (XmlNode node in DestNode.ChildNodes) {  	switch (node.Name.ToLower ()) {  	case "resetsequence":  		try {  			ResetSequenceAfterStart = bool.Parse (getValueInAttributes (node.Attributes' "false"));  		}  		catch (Exception) {  			ResetSequenceAfterStart = false;  		}  		break;  	case "t2":  		try {  			T2 = int.Parse (getValueInAttributes (node.Attributes' "30"));  		}  		catch (Exception) {  			T2 = 30;  		}  		break;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104Plus,IEC104PlusServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104PlusServer.cs,Parse,The following statement contains a magic number: switch (node.Name.ToLower ()) {  case "resetsequence":  	try {  		ResetSequenceAfterStart = bool.Parse (getValueInAttributes (node.Attributes' "false"));  	}  	catch (Exception) {  		ResetSequenceAfterStart = false;  	}  	break;  case "t2":  	try {  		T2 = int.Parse (getValueInAttributes (node.Attributes' "30"));  	}  	catch (Exception) {  		T2 = 30;  	}  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104Plus,IEC104PlusServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104PlusServer.cs,Parse,The following statement contains a magic number: try {  	T2 = int.Parse (getValueInAttributes (node.Attributes' "30"));  }  catch (Exception) {  	T2 = 30;  }  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104Plus,IEC104PlusServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104PlusServer.cs,Parse,The following statement contains a magic number: T2 = 30;  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,Parse,The following statement contains a magic number: try {  	if (buff [idx++] == 0x68) {  		reslt = new IEC104APCI ();  		reslt.Lenght = buff [idx++];  		reslt.Control1 = buff [idx++];  		reslt.Control2 = buff [idx++];  		reslt.Control3 = buff [idx++];  		reslt.Control4 = buff [idx++];  		switch (reslt.Type) {  		case IEC104PacketType.I:  			reslt.SendSequence = (reslt.Control2 * 256 + reslt.Control1) / 2;  			reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  			break;  		case IEC104PacketType.S:  			reslt.SendSequence = 0;  			reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  			break;  		default:  			reslt.SendSequence = 0;  			reslt.ReceiveSequence = 0;  			break;  		}  	}  }  catch {  	reslt = null;  }  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,Parse,The following statement contains a magic number: try {  	if (buff [idx++] == 0x68) {  		reslt = new IEC104APCI ();  		reslt.Lenght = buff [idx++];  		reslt.Control1 = buff [idx++];  		reslt.Control2 = buff [idx++];  		reslt.Control3 = buff [idx++];  		reslt.Control4 = buff [idx++];  		switch (reslt.Type) {  		case IEC104PacketType.I:  			reslt.SendSequence = (reslt.Control2 * 256 + reslt.Control1) / 2;  			reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  			break;  		case IEC104PacketType.S:  			reslt.SendSequence = 0;  			reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  			break;  		default:  			reslt.SendSequence = 0;  			reslt.ReceiveSequence = 0;  			break;  		}  	}  }  catch {  	reslt = null;  }  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,Parse,The following statement contains a magic number: try {  	if (buff [idx++] == 0x68) {  		reslt = new IEC104APCI ();  		reslt.Lenght = buff [idx++];  		reslt.Control1 = buff [idx++];  		reslt.Control2 = buff [idx++];  		reslt.Control3 = buff [idx++];  		reslt.Control4 = buff [idx++];  		switch (reslt.Type) {  		case IEC104PacketType.I:  			reslt.SendSequence = (reslt.Control2 * 256 + reslt.Control1) / 2;  			reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  			break;  		case IEC104PacketType.S:  			reslt.SendSequence = 0;  			reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  			break;  		default:  			reslt.SendSequence = 0;  			reslt.ReceiveSequence = 0;  			break;  		}  	}  }  catch {  	reslt = null;  }  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,Parse,The following statement contains a magic number: try {  	if (buff [idx++] == 0x68) {  		reslt = new IEC104APCI ();  		reslt.Lenght = buff [idx++];  		reslt.Control1 = buff [idx++];  		reslt.Control2 = buff [idx++];  		reslt.Control3 = buff [idx++];  		reslt.Control4 = buff [idx++];  		switch (reslt.Type) {  		case IEC104PacketType.I:  			reslt.SendSequence = (reslt.Control2 * 256 + reslt.Control1) / 2;  			reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  			break;  		case IEC104PacketType.S:  			reslt.SendSequence = 0;  			reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  			break;  		default:  			reslt.SendSequence = 0;  			reslt.ReceiveSequence = 0;  			break;  		}  	}  }  catch {  	reslt = null;  }  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,Parse,The following statement contains a magic number: try {  	if (buff [idx++] == 0x68) {  		reslt = new IEC104APCI ();  		reslt.Lenght = buff [idx++];  		reslt.Control1 = buff [idx++];  		reslt.Control2 = buff [idx++];  		reslt.Control3 = buff [idx++];  		reslt.Control4 = buff [idx++];  		switch (reslt.Type) {  		case IEC104PacketType.I:  			reslt.SendSequence = (reslt.Control2 * 256 + reslt.Control1) / 2;  			reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  			break;  		case IEC104PacketType.S:  			reslt.SendSequence = 0;  			reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  			break;  		default:  			reslt.SendSequence = 0;  			reslt.ReceiveSequence = 0;  			break;  		}  	}  }  catch {  	reslt = null;  }  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,Parse,The following statement contains a magic number: try {  	if (buff [idx++] == 0x68) {  		reslt = new IEC104APCI ();  		reslt.Lenght = buff [idx++];  		reslt.Control1 = buff [idx++];  		reslt.Control2 = buff [idx++];  		reslt.Control3 = buff [idx++];  		reslt.Control4 = buff [idx++];  		switch (reslt.Type) {  		case IEC104PacketType.I:  			reslt.SendSequence = (reslt.Control2 * 256 + reslt.Control1) / 2;  			reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  			break;  		case IEC104PacketType.S:  			reslt.SendSequence = 0;  			reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  			break;  		default:  			reslt.SendSequence = 0;  			reslt.ReceiveSequence = 0;  			break;  		}  	}  }  catch {  	reslt = null;  }  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,Parse,The following statement contains a magic number: if (buff [idx++] == 0x68) {  	reslt = new IEC104APCI ();  	reslt.Lenght = buff [idx++];  	reslt.Control1 = buff [idx++];  	reslt.Control2 = buff [idx++];  	reslt.Control3 = buff [idx++];  	reslt.Control4 = buff [idx++];  	switch (reslt.Type) {  	case IEC104PacketType.I:  		reslt.SendSequence = (reslt.Control2 * 256 + reslt.Control1) / 2;  		reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  		break;  	case IEC104PacketType.S:  		reslt.SendSequence = 0;  		reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  		break;  	default:  		reslt.SendSequence = 0;  		reslt.ReceiveSequence = 0;  		break;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,Parse,The following statement contains a magic number: if (buff [idx++] == 0x68) {  	reslt = new IEC104APCI ();  	reslt.Lenght = buff [idx++];  	reslt.Control1 = buff [idx++];  	reslt.Control2 = buff [idx++];  	reslt.Control3 = buff [idx++];  	reslt.Control4 = buff [idx++];  	switch (reslt.Type) {  	case IEC104PacketType.I:  		reslt.SendSequence = (reslt.Control2 * 256 + reslt.Control1) / 2;  		reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  		break;  	case IEC104PacketType.S:  		reslt.SendSequence = 0;  		reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  		break;  	default:  		reslt.SendSequence = 0;  		reslt.ReceiveSequence = 0;  		break;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,Parse,The following statement contains a magic number: if (buff [idx++] == 0x68) {  	reslt = new IEC104APCI ();  	reslt.Lenght = buff [idx++];  	reslt.Control1 = buff [idx++];  	reslt.Control2 = buff [idx++];  	reslt.Control3 = buff [idx++];  	reslt.Control4 = buff [idx++];  	switch (reslt.Type) {  	case IEC104PacketType.I:  		reslt.SendSequence = (reslt.Control2 * 256 + reslt.Control1) / 2;  		reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  		break;  	case IEC104PacketType.S:  		reslt.SendSequence = 0;  		reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  		break;  	default:  		reslt.SendSequence = 0;  		reslt.ReceiveSequence = 0;  		break;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,Parse,The following statement contains a magic number: if (buff [idx++] == 0x68) {  	reslt = new IEC104APCI ();  	reslt.Lenght = buff [idx++];  	reslt.Control1 = buff [idx++];  	reslt.Control2 = buff [idx++];  	reslt.Control3 = buff [idx++];  	reslt.Control4 = buff [idx++];  	switch (reslt.Type) {  	case IEC104PacketType.I:  		reslt.SendSequence = (reslt.Control2 * 256 + reslt.Control1) / 2;  		reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  		break;  	case IEC104PacketType.S:  		reslt.SendSequence = 0;  		reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  		break;  	default:  		reslt.SendSequence = 0;  		reslt.ReceiveSequence = 0;  		break;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,Parse,The following statement contains a magic number: if (buff [idx++] == 0x68) {  	reslt = new IEC104APCI ();  	reslt.Lenght = buff [idx++];  	reslt.Control1 = buff [idx++];  	reslt.Control2 = buff [idx++];  	reslt.Control3 = buff [idx++];  	reslt.Control4 = buff [idx++];  	switch (reslt.Type) {  	case IEC104PacketType.I:  		reslt.SendSequence = (reslt.Control2 * 256 + reslt.Control1) / 2;  		reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  		break;  	case IEC104PacketType.S:  		reslt.SendSequence = 0;  		reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  		break;  	default:  		reslt.SendSequence = 0;  		reslt.ReceiveSequence = 0;  		break;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,Parse,The following statement contains a magic number: if (buff [idx++] == 0x68) {  	reslt = new IEC104APCI ();  	reslt.Lenght = buff [idx++];  	reslt.Control1 = buff [idx++];  	reslt.Control2 = buff [idx++];  	reslt.Control3 = buff [idx++];  	reslt.Control4 = buff [idx++];  	switch (reslt.Type) {  	case IEC104PacketType.I:  		reslt.SendSequence = (reslt.Control2 * 256 + reslt.Control1) / 2;  		reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  		break;  	case IEC104PacketType.S:  		reslt.SendSequence = 0;  		reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  		break;  	default:  		reslt.SendSequence = 0;  		reslt.ReceiveSequence = 0;  		break;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,Parse,The following statement contains a magic number: switch (reslt.Type) {  case IEC104PacketType.I:  	reslt.SendSequence = (reslt.Control2 * 256 + reslt.Control1) / 2;  	reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  	break;  case IEC104PacketType.S:  	reslt.SendSequence = 0;  	reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  	break;  default:  	reslt.SendSequence = 0;  	reslt.ReceiveSequence = 0;  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,Parse,The following statement contains a magic number: switch (reslt.Type) {  case IEC104PacketType.I:  	reslt.SendSequence = (reslt.Control2 * 256 + reslt.Control1) / 2;  	reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  	break;  case IEC104PacketType.S:  	reslt.SendSequence = 0;  	reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  	break;  default:  	reslt.SendSequence = 0;  	reslt.ReceiveSequence = 0;  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,Parse,The following statement contains a magic number: switch (reslt.Type) {  case IEC104PacketType.I:  	reslt.SendSequence = (reslt.Control2 * 256 + reslt.Control1) / 2;  	reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  	break;  case IEC104PacketType.S:  	reslt.SendSequence = 0;  	reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  	break;  default:  	reslt.SendSequence = 0;  	reslt.ReceiveSequence = 0;  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,Parse,The following statement contains a magic number: switch (reslt.Type) {  case IEC104PacketType.I:  	reslt.SendSequence = (reslt.Control2 * 256 + reslt.Control1) / 2;  	reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  	break;  case IEC104PacketType.S:  	reslt.SendSequence = 0;  	reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  	break;  default:  	reslt.SendSequence = 0;  	reslt.ReceiveSequence = 0;  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,Parse,The following statement contains a magic number: switch (reslt.Type) {  case IEC104PacketType.I:  	reslt.SendSequence = (reslt.Control2 * 256 + reslt.Control1) / 2;  	reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  	break;  case IEC104PacketType.S:  	reslt.SendSequence = 0;  	reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  	break;  default:  	reslt.SendSequence = 0;  	reslt.ReceiveSequence = 0;  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,Parse,The following statement contains a magic number: switch (reslt.Type) {  case IEC104PacketType.I:  	reslt.SendSequence = (reslt.Control2 * 256 + reslt.Control1) / 2;  	reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  	break;  case IEC104PacketType.S:  	reslt.SendSequence = 0;  	reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  	break;  default:  	reslt.SendSequence = 0;  	reslt.ReceiveSequence = 0;  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,Parse,The following statement contains a magic number: reslt.SendSequence = (reslt.Control2 * 256 + reslt.Control1) / 2;  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,Parse,The following statement contains a magic number: reslt.SendSequence = (reslt.Control2 * 256 + reslt.Control1) / 2;  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,Parse,The following statement contains a magic number: reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,Parse,The following statement contains a magic number: reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,Parse,The following statement contains a magic number: reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,Parse,The following statement contains a magic number: reslt.ReceiveSequence = (reslt.Control4 * 256 + reslt.Control3) / 2;  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,ToBytes,The following statement contains a magic number: switch (Type) {  case IEC104PacketType.I:  	int numI = SendSequence * 2;  	resp [idx++] = Convert.ToByte (numI % 256);  	resp [idx++] = Convert.ToByte (numI / 256);  	numI = ReceiveSequence * 2;  	resp [idx++] = Convert.ToByte (numI % 256);  	resp [idx++] = Convert.ToByte (numI / 256);  	break;  case IEC104PacketType.S:  	int numS = SendSequence * 2;  	resp [idx++] = 0x01;  	resp [idx++] = 0x00;  	numS = ReceiveSequence * 2;  	resp [idx++] = Convert.ToByte (numS % 256);  	resp [idx++] = Convert.ToByte (numS / 256);  	break;  case IEC104PacketType.U:  default:  	Control1 |= Convert.ToByte (0x03);  	resp [idx++] = Control1;  	resp [idx++] = Control2;  	Control3 &= Convert.ToByte (0xFE);  	resp [idx++] = Control3;  	resp [idx++] = Control4;  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,ToBytes,The following statement contains a magic number: switch (Type) {  case IEC104PacketType.I:  	int numI = SendSequence * 2;  	resp [idx++] = Convert.ToByte (numI % 256);  	resp [idx++] = Convert.ToByte (numI / 256);  	numI = ReceiveSequence * 2;  	resp [idx++] = Convert.ToByte (numI % 256);  	resp [idx++] = Convert.ToByte (numI / 256);  	break;  case IEC104PacketType.S:  	int numS = SendSequence * 2;  	resp [idx++] = 0x01;  	resp [idx++] = 0x00;  	numS = ReceiveSequence * 2;  	resp [idx++] = Convert.ToByte (numS % 256);  	resp [idx++] = Convert.ToByte (numS / 256);  	break;  case IEC104PacketType.U:  default:  	Control1 |= Convert.ToByte (0x03);  	resp [idx++] = Control1;  	resp [idx++] = Control2;  	Control3 &= Convert.ToByte (0xFE);  	resp [idx++] = Control3;  	resp [idx++] = Control4;  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,ToBytes,The following statement contains a magic number: switch (Type) {  case IEC104PacketType.I:  	int numI = SendSequence * 2;  	resp [idx++] = Convert.ToByte (numI % 256);  	resp [idx++] = Convert.ToByte (numI / 256);  	numI = ReceiveSequence * 2;  	resp [idx++] = Convert.ToByte (numI % 256);  	resp [idx++] = Convert.ToByte (numI / 256);  	break;  case IEC104PacketType.S:  	int numS = SendSequence * 2;  	resp [idx++] = 0x01;  	resp [idx++] = 0x00;  	numS = ReceiveSequence * 2;  	resp [idx++] = Convert.ToByte (numS % 256);  	resp [idx++] = Convert.ToByte (numS / 256);  	break;  case IEC104PacketType.U:  default:  	Control1 |= Convert.ToByte (0x03);  	resp [idx++] = Control1;  	resp [idx++] = Control2;  	Control3 &= Convert.ToByte (0xFE);  	resp [idx++] = Control3;  	resp [idx++] = Control4;  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,ToBytes,The following statement contains a magic number: switch (Type) {  case IEC104PacketType.I:  	int numI = SendSequence * 2;  	resp [idx++] = Convert.ToByte (numI % 256);  	resp [idx++] = Convert.ToByte (numI / 256);  	numI = ReceiveSequence * 2;  	resp [idx++] = Convert.ToByte (numI % 256);  	resp [idx++] = Convert.ToByte (numI / 256);  	break;  case IEC104PacketType.S:  	int numS = SendSequence * 2;  	resp [idx++] = 0x01;  	resp [idx++] = 0x00;  	numS = ReceiveSequence * 2;  	resp [idx++] = Convert.ToByte (numS % 256);  	resp [idx++] = Convert.ToByte (numS / 256);  	break;  case IEC104PacketType.U:  default:  	Control1 |= Convert.ToByte (0x03);  	resp [idx++] = Control1;  	resp [idx++] = Control2;  	Control3 &= Convert.ToByte (0xFE);  	resp [idx++] = Control3;  	resp [idx++] = Control4;  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,ToBytes,The following statement contains a magic number: switch (Type) {  case IEC104PacketType.I:  	int numI = SendSequence * 2;  	resp [idx++] = Convert.ToByte (numI % 256);  	resp [idx++] = Convert.ToByte (numI / 256);  	numI = ReceiveSequence * 2;  	resp [idx++] = Convert.ToByte (numI % 256);  	resp [idx++] = Convert.ToByte (numI / 256);  	break;  case IEC104PacketType.S:  	int numS = SendSequence * 2;  	resp [idx++] = 0x01;  	resp [idx++] = 0x00;  	numS = ReceiveSequence * 2;  	resp [idx++] = Convert.ToByte (numS % 256);  	resp [idx++] = Convert.ToByte (numS / 256);  	break;  case IEC104PacketType.U:  default:  	Control1 |= Convert.ToByte (0x03);  	resp [idx++] = Control1;  	resp [idx++] = Control2;  	Control3 &= Convert.ToByte (0xFE);  	resp [idx++] = Control3;  	resp [idx++] = Control4;  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,ToBytes,The following statement contains a magic number: switch (Type) {  case IEC104PacketType.I:  	int numI = SendSequence * 2;  	resp [idx++] = Convert.ToByte (numI % 256);  	resp [idx++] = Convert.ToByte (numI / 256);  	numI = ReceiveSequence * 2;  	resp [idx++] = Convert.ToByte (numI % 256);  	resp [idx++] = Convert.ToByte (numI / 256);  	break;  case IEC104PacketType.S:  	int numS = SendSequence * 2;  	resp [idx++] = 0x01;  	resp [idx++] = 0x00;  	numS = ReceiveSequence * 2;  	resp [idx++] = Convert.ToByte (numS % 256);  	resp [idx++] = Convert.ToByte (numS / 256);  	break;  case IEC104PacketType.U:  default:  	Control1 |= Convert.ToByte (0x03);  	resp [idx++] = Control1;  	resp [idx++] = Control2;  	Control3 &= Convert.ToByte (0xFE);  	resp [idx++] = Control3;  	resp [idx++] = Control4;  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,ToBytes,The following statement contains a magic number: switch (Type) {  case IEC104PacketType.I:  	int numI = SendSequence * 2;  	resp [idx++] = Convert.ToByte (numI % 256);  	resp [idx++] = Convert.ToByte (numI / 256);  	numI = ReceiveSequence * 2;  	resp [idx++] = Convert.ToByte (numI % 256);  	resp [idx++] = Convert.ToByte (numI / 256);  	break;  case IEC104PacketType.S:  	int numS = SendSequence * 2;  	resp [idx++] = 0x01;  	resp [idx++] = 0x00;  	numS = ReceiveSequence * 2;  	resp [idx++] = Convert.ToByte (numS % 256);  	resp [idx++] = Convert.ToByte (numS / 256);  	break;  case IEC104PacketType.U:  default:  	Control1 |= Convert.ToByte (0x03);  	resp [idx++] = Control1;  	resp [idx++] = Control2;  	Control3 &= Convert.ToByte (0xFE);  	resp [idx++] = Control3;  	resp [idx++] = Control4;  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,ToBytes,The following statement contains a magic number: switch (Type) {  case IEC104PacketType.I:  	int numI = SendSequence * 2;  	resp [idx++] = Convert.ToByte (numI % 256);  	resp [idx++] = Convert.ToByte (numI / 256);  	numI = ReceiveSequence * 2;  	resp [idx++] = Convert.ToByte (numI % 256);  	resp [idx++] = Convert.ToByte (numI / 256);  	break;  case IEC104PacketType.S:  	int numS = SendSequence * 2;  	resp [idx++] = 0x01;  	resp [idx++] = 0x00;  	numS = ReceiveSequence * 2;  	resp [idx++] = Convert.ToByte (numS % 256);  	resp [idx++] = Convert.ToByte (numS / 256);  	break;  case IEC104PacketType.U:  default:  	Control1 |= Convert.ToByte (0x03);  	resp [idx++] = Control1;  	resp [idx++] = Control2;  	Control3 &= Convert.ToByte (0xFE);  	resp [idx++] = Control3;  	resp [idx++] = Control4;  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,ToBytes,The following statement contains a magic number: switch (Type) {  case IEC104PacketType.I:  	int numI = SendSequence * 2;  	resp [idx++] = Convert.ToByte (numI % 256);  	resp [idx++] = Convert.ToByte (numI / 256);  	numI = ReceiveSequence * 2;  	resp [idx++] = Convert.ToByte (numI % 256);  	resp [idx++] = Convert.ToByte (numI / 256);  	break;  case IEC104PacketType.S:  	int numS = SendSequence * 2;  	resp [idx++] = 0x01;  	resp [idx++] = 0x00;  	numS = ReceiveSequence * 2;  	resp [idx++] = Convert.ToByte (numS % 256);  	resp [idx++] = Convert.ToByte (numS / 256);  	break;  case IEC104PacketType.U:  default:  	Control1 |= Convert.ToByte (0x03);  	resp [idx++] = Control1;  	resp [idx++] = Control2;  	Control3 &= Convert.ToByte (0xFE);  	resp [idx++] = Control3;  	resp [idx++] = Control4;  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,ToBytes,The following statement contains a magic number: switch (Type) {  case IEC104PacketType.I:  	int numI = SendSequence * 2;  	resp [idx++] = Convert.ToByte (numI % 256);  	resp [idx++] = Convert.ToByte (numI / 256);  	numI = ReceiveSequence * 2;  	resp [idx++] = Convert.ToByte (numI % 256);  	resp [idx++] = Convert.ToByte (numI / 256);  	break;  case IEC104PacketType.S:  	int numS = SendSequence * 2;  	resp [idx++] = 0x01;  	resp [idx++] = 0x00;  	numS = ReceiveSequence * 2;  	resp [idx++] = Convert.ToByte (numS % 256);  	resp [idx++] = Convert.ToByte (numS / 256);  	break;  case IEC104PacketType.U:  default:  	Control1 |= Convert.ToByte (0x03);  	resp [idx++] = Control1;  	resp [idx++] = Control2;  	Control3 &= Convert.ToByte (0xFE);  	resp [idx++] = Control3;  	resp [idx++] = Control4;  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,ToBytes,The following statement contains a magic number: resp [idx++] = Convert.ToByte (numI % 256);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,ToBytes,The following statement contains a magic number: resp [idx++] = Convert.ToByte (numI / 256);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,ToBytes,The following statement contains a magic number: numI = ReceiveSequence * 2;  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,ToBytes,The following statement contains a magic number: resp [idx++] = Convert.ToByte (numI % 256);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,ToBytes,The following statement contains a magic number: resp [idx++] = Convert.ToByte (numI / 256);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,ToBytes,The following statement contains a magic number: numS = ReceiveSequence * 2;  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,ToBytes,The following statement contains a magic number: resp [idx++] = Convert.ToByte (numS % 256);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104APCI,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,ToBytes,The following statement contains a magic number: resp [idx++] = Convert.ToByte (numS / 256);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiEvent,The following statement contains a magic number: buffer [2] = 0x00;  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiEvent,The following statement contains a magic number: buffer [2] = 0x03;  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiEvent,The following statement contains a magic number: buffer [3] = Convert.ToByte (MasterAddress);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiEvent,The following statement contains a magic number: buffer [4] = Convert.ToByte (LocalAddress % 256);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiEvent,The following statement contains a magic number: buffer [4] = Convert.ToByte (LocalAddress % 256);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiEvent,The following statement contains a magic number: buffer [5] = Convert.ToByte (LocalAddress / 256);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiEvent,The following statement contains a magic number: buffer [5] = Convert.ToByte (LocalAddress / 256);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiEvent,The following statement contains a magic number: buffer [6] = Convert.ToByte (PointAddress % 256);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiEvent,The following statement contains a magic number: buffer [6] = Convert.ToByte (PointAddress % 256);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiEvent,The following statement contains a magic number: buffer [7] = Convert.ToByte ((PointAddress / 256) % 65536);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiEvent,The following statement contains a magic number: buffer [7] = Convert.ToByte ((PointAddress / 256) % 65536);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiEvent,The following statement contains a magic number: buffer [7] = Convert.ToByte ((PointAddress / 256) % 65536);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiEvent,The following statement contains a magic number: buffer [8] = Convert.ToByte (PointAddress / 65536);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiEvent,The following statement contains a magic number: buffer [8] = Convert.ToByte (PointAddress / 65536);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiEvent,The following statement contains a magic number: if (value)  	buffer [9] = 0x01;  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiEvent,The following statement contains a magic number: buffer [9] = 0x01;  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The following statement contains a magic number: buffer [2] = 0x00;  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The following statement contains a magic number: buffer [3] = 0x00;  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The following statement contains a magic number: buffer [4] = 0x00;  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The following statement contains a magic number: buffer [5] = 0x00;  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The following statement contains a magic number: buffer [6] = 0x1E;  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The following statement contains a magic number: buffer [7] = 0x01;  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The following statement contains a magic number: buffer [8] = 0x03;  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The following statement contains a magic number: buffer [9] = Convert.ToByte (MasterAddress);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The following statement contains a magic number: buffer [10] = Convert.ToByte (LocalAddress % 256);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The following statement contains a magic number: buffer [10] = Convert.ToByte (LocalAddress % 256);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The following statement contains a magic number: buffer [11] = Convert.ToByte (LocalAddress / 256);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The following statement contains a magic number: buffer [11] = Convert.ToByte (LocalAddress / 256);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The following statement contains a magic number: buffer [12] = Convert.ToByte (PointAddress % 256);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The following statement contains a magic number: buffer [12] = Convert.ToByte (PointAddress % 256);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The following statement contains a magic number: buffer [13] = Convert.ToByte ((PointAddress / 256) % 65536);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The following statement contains a magic number: buffer [13] = Convert.ToByte ((PointAddress / 256) % 65536);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The following statement contains a magic number: buffer [13] = Convert.ToByte ((PointAddress / 256) % 65536);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The following statement contains a magic number: buffer [14] = Convert.ToByte (PointAddress / 65536);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The following statement contains a magic number: buffer [14] = Convert.ToByte (PointAddress / 65536);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The following statement contains a magic number: if (value)  	buffer [15] = 0x01;  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The following statement contains a magic number: buffer [15] = 0x01;  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The following statement contains a magic number: buffer [16] = 0x00;  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The following statement contains a magic number: buffer [17] = Convert.ToByte (DateTime.Now.Second << 2);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The following statement contains a magic number: buffer [17] = Convert.ToByte (DateTime.Now.Second << 2);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The following statement contains a magic number: buffer [18] = Convert.ToByte (DateTime.Now.Minute);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The following statement contains a magic number: buffer [19] = Convert.ToByte (DateTime.Now.Hour);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The following statement contains a magic number: buffer [20] = Convert.ToByte (DateTime.Now.Day);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The following statement contains a magic number: buffer [20] += Convert.ToByte (((int)System.Globalization.CultureInfo.InvariantCulture.Calendar.GetDayOfWeek (DateTime.Now)) << 5);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The following statement contains a magic number: buffer [20] += Convert.ToByte (((int)System.Globalization.CultureInfo.InvariantCulture.Calendar.GetDayOfWeek (DateTime.Now)) << 5);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The following statement contains a magic number: buffer [21] = Convert.ToByte (DateTime.Now.Month);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The following statement contains a magic number: buffer [22] = Convert.ToByte (DateTime.Now.Year - 2000);  
Magic Number,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getSpiWithTsEvent,The following statement contains a magic number: buffer [22] = Convert.ToByte (DateTime.Now.Year - 2000);  
Magic Number,net.Tesacom.TsdProtocol.RT,RemoteTerm,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,ToXml,The following statement contains a magic number: element.InnerText = string.Format ("{0}.{1}"' Convert.ToInt16 (ProtocolVersion / 256)' ProtocolVersion % 256);  
Magic Number,net.Tesacom.TsdProtocol.RT,RemoteTerm,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,ToXml,The following statement contains a magic number: element.InnerText = string.Format ("{0}.{1}"' Convert.ToInt16 (ProtocolVersion / 256)' ProtocolVersion % 256);  
Magic Number,net.Tesacom.TsdProtocol.RT,RemoteTerm,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,Parse,The following statement contains a magic number: foreach (XmlNode node in DestNode.ChildNodes) {  	switch (node.Name.ToLower ()) {  	case "desc":  		try {  			Desc = XmlUtils.GetValueInXmlAttributes (node.Attributes' "");  		}  		catch (Exception) {  			Desc = "";  		}  		reslts.Add (string.Format ("rt id=\"{0}\" param Desc=\"{1}\""' UnitId' Desc));  		break;  	case "protocolid":  		try {  			EndPoints.Add (RTEndPoint.Parse (node' UnitId' out tempReslts));  			foreach (string s in tempReslts)  				reslts.Add (s);  		}  		catch (Exception) {  		}  		break;  	case "protocoladdress":  		try {  			if (EndPoints.Count == 1)  				EndPoints [0].ProtocolAddress = Convert.ToUInt16 (XmlUtils.GetValueInXmlAttributes (node.Attributes' "1"));  			else  				break;  		}  		catch (Exception) {  			EndPoints [0].ProtocolAddress = 1;  		}  		reslts.Add (string.Format ("rt id=\"{0}\" param ProtocolAddress=\"{1}\""' UnitId' EndPoints [0].ProtocolAddress));  		break;  	case "connectionscount":  		try {  			ConnectionsCount = Convert.ToUInt16 (XmlUtils.GetValueInXmlAttributes (node.Attributes' "10"));  			reslts.Add (string.Format ("rt id=\"{0}\" param ConnectionsCount=\"{1}\""' UnitId' ConnectionsCount));  		}  		catch (Exception) {  			ConnectionsCount = 10;  		}  		break;  	case "site":  		try {  			Site = XmlUtils.GetValueInXmlAttributes (node.Attributes' "NO SITE");  			reslts.Add (string.Format ("rt id=\"{0}\" param Site=\"{1}\""' UnitId' Site));  		}  		catch (Exception) {  			Site = "NO SITE";  		}  		break;  	case "secondaryconnection":  		try {  			UsesSecondaryRemoteTerminalConnection = Convert.ToBoolean (XmlUtils.GetValueInXmlAttributes (node.Attributes' "false"));  			reslts.Add (string.Format ("rt id=\"{0}\" param UsesSecondaryRemoteTerminalConnection=\"{1}\""' UnitId' UsesSecondaryRemoteTerminalConnection));  		}  		catch (Exception) {  			UsesSecondaryRemoteTerminalConnection = false;  		}  		break;  	case "verbose":  		try {  			Verbose = Convert.ToUInt16 (XmlUtils.GetValueInXmlAttributes (node.Attributes' "2"));  			reslts.Add (string.Format ("rt id=\"{0}\" param Verbose=\"{1}\""' UnitId' Verbose));  		}  		catch (Exception) {  			Verbose = 2;  		}  		break;  	case "cat":  	case "category":  		try {  			bool parsed = false;  			RTCategory newCat = new RTCategory ();  			List<string> morereslts = new List<string> ();  			if (RTCategory.ParseXML (node' true' out newCat' out morereslts)) {  				parsed = true;  			}  			else {  				if (RTCategory.ParseXML (node' false' out newCat' out morereslts)) {  					parsed = true;  				}  			}  			if (parsed) {  				Category = newCat;  				reslts.Add (string.Format ("rt id=\"{0}\" param Category=\"{1}\""' UnitId' Category));  				foreach (string s in morereslts)  					reslts.Add (s);  			}  		}  		catch (Exception) {  		}  		break;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.RT,RemoteTerm,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,Parse,The following statement contains a magic number: foreach (XmlNode node in DestNode.ChildNodes) {  	switch (node.Name.ToLower ()) {  	case "desc":  		try {  			Desc = XmlUtils.GetValueInXmlAttributes (node.Attributes' "");  		}  		catch (Exception) {  			Desc = "";  		}  		reslts.Add (string.Format ("rt id=\"{0}\" param Desc=\"{1}\""' UnitId' Desc));  		break;  	case "protocolid":  		try {  			EndPoints.Add (RTEndPoint.Parse (node' UnitId' out tempReslts));  			foreach (string s in tempReslts)  				reslts.Add (s);  		}  		catch (Exception) {  		}  		break;  	case "protocoladdress":  		try {  			if (EndPoints.Count == 1)  				EndPoints [0].ProtocolAddress = Convert.ToUInt16 (XmlUtils.GetValueInXmlAttributes (node.Attributes' "1"));  			else  				break;  		}  		catch (Exception) {  			EndPoints [0].ProtocolAddress = 1;  		}  		reslts.Add (string.Format ("rt id=\"{0}\" param ProtocolAddress=\"{1}\""' UnitId' EndPoints [0].ProtocolAddress));  		break;  	case "connectionscount":  		try {  			ConnectionsCount = Convert.ToUInt16 (XmlUtils.GetValueInXmlAttributes (node.Attributes' "10"));  			reslts.Add (string.Format ("rt id=\"{0}\" param ConnectionsCount=\"{1}\""' UnitId' ConnectionsCount));  		}  		catch (Exception) {  			ConnectionsCount = 10;  		}  		break;  	case "site":  		try {  			Site = XmlUtils.GetValueInXmlAttributes (node.Attributes' "NO SITE");  			reslts.Add (string.Format ("rt id=\"{0}\" param Site=\"{1}\""' UnitId' Site));  		}  		catch (Exception) {  			Site = "NO SITE";  		}  		break;  	case "secondaryconnection":  		try {  			UsesSecondaryRemoteTerminalConnection = Convert.ToBoolean (XmlUtils.GetValueInXmlAttributes (node.Attributes' "false"));  			reslts.Add (string.Format ("rt id=\"{0}\" param UsesSecondaryRemoteTerminalConnection=\"{1}\""' UnitId' UsesSecondaryRemoteTerminalConnection));  		}  		catch (Exception) {  			UsesSecondaryRemoteTerminalConnection = false;  		}  		break;  	case "verbose":  		try {  			Verbose = Convert.ToUInt16 (XmlUtils.GetValueInXmlAttributes (node.Attributes' "2"));  			reslts.Add (string.Format ("rt id=\"{0}\" param Verbose=\"{1}\""' UnitId' Verbose));  		}  		catch (Exception) {  			Verbose = 2;  		}  		break;  	case "cat":  	case "category":  		try {  			bool parsed = false;  			RTCategory newCat = new RTCategory ();  			List<string> morereslts = new List<string> ();  			if (RTCategory.ParseXML (node' true' out newCat' out morereslts)) {  				parsed = true;  			}  			else {  				if (RTCategory.ParseXML (node' false' out newCat' out morereslts)) {  					parsed = true;  				}  			}  			if (parsed) {  				Category = newCat;  				reslts.Add (string.Format ("rt id=\"{0}\" param Category=\"{1}\""' UnitId' Category));  				foreach (string s in morereslts)  					reslts.Add (s);  			}  		}  		catch (Exception) {  		}  		break;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.RT,RemoteTerm,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,Parse,The following statement contains a magic number: switch (node.Name.ToLower ()) {  case "desc":  	try {  		Desc = XmlUtils.GetValueInXmlAttributes (node.Attributes' "");  	}  	catch (Exception) {  		Desc = "";  	}  	reslts.Add (string.Format ("rt id=\"{0}\" param Desc=\"{1}\""' UnitId' Desc));  	break;  case "protocolid":  	try {  		EndPoints.Add (RTEndPoint.Parse (node' UnitId' out tempReslts));  		foreach (string s in tempReslts)  			reslts.Add (s);  	}  	catch (Exception) {  	}  	break;  case "protocoladdress":  	try {  		if (EndPoints.Count == 1)  			EndPoints [0].ProtocolAddress = Convert.ToUInt16 (XmlUtils.GetValueInXmlAttributes (node.Attributes' "1"));  		else  			break;  	}  	catch (Exception) {  		EndPoints [0].ProtocolAddress = 1;  	}  	reslts.Add (string.Format ("rt id=\"{0}\" param ProtocolAddress=\"{1}\""' UnitId' EndPoints [0].ProtocolAddress));  	break;  case "connectionscount":  	try {  		ConnectionsCount = Convert.ToUInt16 (XmlUtils.GetValueInXmlAttributes (node.Attributes' "10"));  		reslts.Add (string.Format ("rt id=\"{0}\" param ConnectionsCount=\"{1}\""' UnitId' ConnectionsCount));  	}  	catch (Exception) {  		ConnectionsCount = 10;  	}  	break;  case "site":  	try {  		Site = XmlUtils.GetValueInXmlAttributes (node.Attributes' "NO SITE");  		reslts.Add (string.Format ("rt id=\"{0}\" param Site=\"{1}\""' UnitId' Site));  	}  	catch (Exception) {  		Site = "NO SITE";  	}  	break;  case "secondaryconnection":  	try {  		UsesSecondaryRemoteTerminalConnection = Convert.ToBoolean (XmlUtils.GetValueInXmlAttributes (node.Attributes' "false"));  		reslts.Add (string.Format ("rt id=\"{0}\" param UsesSecondaryRemoteTerminalConnection=\"{1}\""' UnitId' UsesSecondaryRemoteTerminalConnection));  	}  	catch (Exception) {  		UsesSecondaryRemoteTerminalConnection = false;  	}  	break;  case "verbose":  	try {  		Verbose = Convert.ToUInt16 (XmlUtils.GetValueInXmlAttributes (node.Attributes' "2"));  		reslts.Add (string.Format ("rt id=\"{0}\" param Verbose=\"{1}\""' UnitId' Verbose));  	}  	catch (Exception) {  		Verbose = 2;  	}  	break;  case "cat":  case "category":  	try {  		bool parsed = false;  		RTCategory newCat = new RTCategory ();  		List<string> morereslts = new List<string> ();  		if (RTCategory.ParseXML (node' true' out newCat' out morereslts)) {  			parsed = true;  		}  		else {  			if (RTCategory.ParseXML (node' false' out newCat' out morereslts)) {  				parsed = true;  			}  		}  		if (parsed) {  			Category = newCat;  			reslts.Add (string.Format ("rt id=\"{0}\" param Category=\"{1}\""' UnitId' Category));  			foreach (string s in morereslts)  				reslts.Add (s);  		}  	}  	catch (Exception) {  	}  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.RT,RemoteTerm,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,Parse,The following statement contains a magic number: switch (node.Name.ToLower ()) {  case "desc":  	try {  		Desc = XmlUtils.GetValueInXmlAttributes (node.Attributes' "");  	}  	catch (Exception) {  		Desc = "";  	}  	reslts.Add (string.Format ("rt id=\"{0}\" param Desc=\"{1}\""' UnitId' Desc));  	break;  case "protocolid":  	try {  		EndPoints.Add (RTEndPoint.Parse (node' UnitId' out tempReslts));  		foreach (string s in tempReslts)  			reslts.Add (s);  	}  	catch (Exception) {  	}  	break;  case "protocoladdress":  	try {  		if (EndPoints.Count == 1)  			EndPoints [0].ProtocolAddress = Convert.ToUInt16 (XmlUtils.GetValueInXmlAttributes (node.Attributes' "1"));  		else  			break;  	}  	catch (Exception) {  		EndPoints [0].ProtocolAddress = 1;  	}  	reslts.Add (string.Format ("rt id=\"{0}\" param ProtocolAddress=\"{1}\""' UnitId' EndPoints [0].ProtocolAddress));  	break;  case "connectionscount":  	try {  		ConnectionsCount = Convert.ToUInt16 (XmlUtils.GetValueInXmlAttributes (node.Attributes' "10"));  		reslts.Add (string.Format ("rt id=\"{0}\" param ConnectionsCount=\"{1}\""' UnitId' ConnectionsCount));  	}  	catch (Exception) {  		ConnectionsCount = 10;  	}  	break;  case "site":  	try {  		Site = XmlUtils.GetValueInXmlAttributes (node.Attributes' "NO SITE");  		reslts.Add (string.Format ("rt id=\"{0}\" param Site=\"{1}\""' UnitId' Site));  	}  	catch (Exception) {  		Site = "NO SITE";  	}  	break;  case "secondaryconnection":  	try {  		UsesSecondaryRemoteTerminalConnection = Convert.ToBoolean (XmlUtils.GetValueInXmlAttributes (node.Attributes' "false"));  		reslts.Add (string.Format ("rt id=\"{0}\" param UsesSecondaryRemoteTerminalConnection=\"{1}\""' UnitId' UsesSecondaryRemoteTerminalConnection));  	}  	catch (Exception) {  		UsesSecondaryRemoteTerminalConnection = false;  	}  	break;  case "verbose":  	try {  		Verbose = Convert.ToUInt16 (XmlUtils.GetValueInXmlAttributes (node.Attributes' "2"));  		reslts.Add (string.Format ("rt id=\"{0}\" param Verbose=\"{1}\""' UnitId' Verbose));  	}  	catch (Exception) {  		Verbose = 2;  	}  	break;  case "cat":  case "category":  	try {  		bool parsed = false;  		RTCategory newCat = new RTCategory ();  		List<string> morereslts = new List<string> ();  		if (RTCategory.ParseXML (node' true' out newCat' out morereslts)) {  			parsed = true;  		}  		else {  			if (RTCategory.ParseXML (node' false' out newCat' out morereslts)) {  				parsed = true;  			}  		}  		if (parsed) {  			Category = newCat;  			reslts.Add (string.Format ("rt id=\"{0}\" param Category=\"{1}\""' UnitId' Category));  			foreach (string s in morereslts)  				reslts.Add (s);  		}  	}  	catch (Exception) {  	}  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.RT,RemoteTerm,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,Parse,The following statement contains a magic number: try {  	ConnectionsCount = Convert.ToUInt16 (XmlUtils.GetValueInXmlAttributes (node.Attributes' "10"));  	reslts.Add (string.Format ("rt id=\"{0}\" param ConnectionsCount=\"{1}\""' UnitId' ConnectionsCount));  }  catch (Exception) {  	ConnectionsCount = 10;  }  
Magic Number,net.Tesacom.TsdProtocol.RT,RemoteTerm,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,Parse,The following statement contains a magic number: ConnectionsCount = 10;  
Magic Number,net.Tesacom.TsdProtocol.RT,RemoteTerm,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,Parse,The following statement contains a magic number: try {  	Verbose = Convert.ToUInt16 (XmlUtils.GetValueInXmlAttributes (node.Attributes' "2"));  	reslts.Add (string.Format ("rt id=\"{0}\" param Verbose=\"{1}\""' UnitId' Verbose));  }  catch (Exception) {  	Verbose = 2;  }  
Magic Number,net.Tesacom.TsdProtocol.RT,RemoteTerm,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,Parse,The following statement contains a magic number: Verbose = 2;  
Magic Number,net.Tesacom.TsdProtocol.Status,StatusStruct,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,Parse,The following statement contains a magic number: try {  	s.Rtid = ushort.Parse (strs [0]);  	s.Connected = bool.Parse (strs [1]);  	s.Desc = strs [2];  	s.lastConnectionTs = DateTime.ParseExact (strs [3]' StandardDateFormat' CultureInfo.InvariantCulture);  	s.lastDisconnectionTs = DateTime.ParseExact (strs [4]' StandardDateFormat' CultureInfo.InvariantCulture);  	s.lastTransmissionTs = DateTime.ParseExact (strs [5]' StandardDateFormat' CultureInfo.InvariantCulture);  	s.lastReceptionTs = DateTime.ParseExact (strs [6]' StandardDateFormat' CultureInfo.InvariantCulture);  	s.lastReportTs = DateTime.ParseExact (strs [7]' StandardDateFormat' CultureInfo.InvariantCulture);  	reslt = true;  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.Status,StatusStruct,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,Parse,The following statement contains a magic number: try {  	s.Rtid = ushort.Parse (strs [0]);  	s.Connected = bool.Parse (strs [1]);  	s.Desc = strs [2];  	s.lastConnectionTs = DateTime.ParseExact (strs [3]' StandardDateFormat' CultureInfo.InvariantCulture);  	s.lastDisconnectionTs = DateTime.ParseExact (strs [4]' StandardDateFormat' CultureInfo.InvariantCulture);  	s.lastTransmissionTs = DateTime.ParseExact (strs [5]' StandardDateFormat' CultureInfo.InvariantCulture);  	s.lastReceptionTs = DateTime.ParseExact (strs [6]' StandardDateFormat' CultureInfo.InvariantCulture);  	s.lastReportTs = DateTime.ParseExact (strs [7]' StandardDateFormat' CultureInfo.InvariantCulture);  	reslt = true;  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.Status,StatusStruct,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,Parse,The following statement contains a magic number: try {  	s.Rtid = ushort.Parse (strs [0]);  	s.Connected = bool.Parse (strs [1]);  	s.Desc = strs [2];  	s.lastConnectionTs = DateTime.ParseExact (strs [3]' StandardDateFormat' CultureInfo.InvariantCulture);  	s.lastDisconnectionTs = DateTime.ParseExact (strs [4]' StandardDateFormat' CultureInfo.InvariantCulture);  	s.lastTransmissionTs = DateTime.ParseExact (strs [5]' StandardDateFormat' CultureInfo.InvariantCulture);  	s.lastReceptionTs = DateTime.ParseExact (strs [6]' StandardDateFormat' CultureInfo.InvariantCulture);  	s.lastReportTs = DateTime.ParseExact (strs [7]' StandardDateFormat' CultureInfo.InvariantCulture);  	reslt = true;  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.Status,StatusStruct,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,Parse,The following statement contains a magic number: try {  	s.Rtid = ushort.Parse (strs [0]);  	s.Connected = bool.Parse (strs [1]);  	s.Desc = strs [2];  	s.lastConnectionTs = DateTime.ParseExact (strs [3]' StandardDateFormat' CultureInfo.InvariantCulture);  	s.lastDisconnectionTs = DateTime.ParseExact (strs [4]' StandardDateFormat' CultureInfo.InvariantCulture);  	s.lastTransmissionTs = DateTime.ParseExact (strs [5]' StandardDateFormat' CultureInfo.InvariantCulture);  	s.lastReceptionTs = DateTime.ParseExact (strs [6]' StandardDateFormat' CultureInfo.InvariantCulture);  	s.lastReportTs = DateTime.ParseExact (strs [7]' StandardDateFormat' CultureInfo.InvariantCulture);  	reslt = true;  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.Status,StatusStruct,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,Parse,The following statement contains a magic number: try {  	s.Rtid = ushort.Parse (strs [0]);  	s.Connected = bool.Parse (strs [1]);  	s.Desc = strs [2];  	s.lastConnectionTs = DateTime.ParseExact (strs [3]' StandardDateFormat' CultureInfo.InvariantCulture);  	s.lastDisconnectionTs = DateTime.ParseExact (strs [4]' StandardDateFormat' CultureInfo.InvariantCulture);  	s.lastTransmissionTs = DateTime.ParseExact (strs [5]' StandardDateFormat' CultureInfo.InvariantCulture);  	s.lastReceptionTs = DateTime.ParseExact (strs [6]' StandardDateFormat' CultureInfo.InvariantCulture);  	s.lastReportTs = DateTime.ParseExact (strs [7]' StandardDateFormat' CultureInfo.InvariantCulture);  	reslt = true;  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.Status,StatusStruct,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,Parse,The following statement contains a magic number: try {  	s.Rtid = ushort.Parse (strs [0]);  	s.Connected = bool.Parse (strs [1]);  	s.Desc = strs [2];  	s.lastConnectionTs = DateTime.ParseExact (strs [3]' StandardDateFormat' CultureInfo.InvariantCulture);  	s.lastDisconnectionTs = DateTime.ParseExact (strs [4]' StandardDateFormat' CultureInfo.InvariantCulture);  	s.lastTransmissionTs = DateTime.ParseExact (strs [5]' StandardDateFormat' CultureInfo.InvariantCulture);  	s.lastReceptionTs = DateTime.ParseExact (strs [6]' StandardDateFormat' CultureInfo.InvariantCulture);  	s.lastReportTs = DateTime.ParseExact (strs [7]' StandardDateFormat' CultureInfo.InvariantCulture);  	reslt = true;  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.Status,StatusStruct,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,Parse,The following statement contains a magic number: s.Desc = strs [2];  
Magic Number,net.Tesacom.TsdProtocol.Status,StatusStruct,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,Parse,The following statement contains a magic number: s.lastConnectionTs = DateTime.ParseExact (strs [3]' StandardDateFormat' CultureInfo.InvariantCulture);  
Magic Number,net.Tesacom.TsdProtocol.Status,StatusStruct,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,Parse,The following statement contains a magic number: s.lastDisconnectionTs = DateTime.ParseExact (strs [4]' StandardDateFormat' CultureInfo.InvariantCulture);  
Magic Number,net.Tesacom.TsdProtocol.Status,StatusStruct,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,Parse,The following statement contains a magic number: s.lastTransmissionTs = DateTime.ParseExact (strs [5]' StandardDateFormat' CultureInfo.InvariantCulture);  
Magic Number,net.Tesacom.TsdProtocol.Status,StatusStruct,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,Parse,The following statement contains a magic number: s.lastReceptionTs = DateTime.ParseExact (strs [6]' StandardDateFormat' CultureInfo.InvariantCulture);  
Magic Number,net.Tesacom.TsdProtocol.Status,StatusStruct,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,Parse,The following statement contains a magic number: s.lastReportTs = DateTime.ParseExact (strs [7]' StandardDateFormat' CultureInfo.InvariantCulture);  
Magic Number,net.Tesacom.TsdProtocol.Status,StatusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,getCategoriesInRequest,The following statement contains a magic number: foreach (KeyValuePair<string' string> pair in strs) {  	if (pair.Key == RT.RTCategory.NodeName) {  		//get all nodes  		string[] split1 = pair.Value.Split (StatusProtocol.PairSeparator);  		string sname = "";  		string sdesc = "";  		foreach (string s in split1) {  			//look for name & desc  			string[] split2 = s.Split (StatusProtocol.ValueInPairSeparator);  			if (split2.Length >= 2) {  				if (split2 [0] == RT.RTCategory.StrName)  					sname = split2 [1];  				else if (split2 [0] == RT.RTCategory.StrDesc)  					sdesc = split2 [1];  			}  			if (!string.IsNullOrEmpty (sname) && !string.IsNullOrEmpty (sdesc)) {  				RT.RTCategory cat = new net.Tesacom.TsdProtocol.RT.RTCategory (sname' sdesc);  				cats.Add (cat);  			}  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Status,StatusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,getCategoriesInRequest,The following statement contains a magic number: if (pair.Key == RT.RTCategory.NodeName) {  	//get all nodes  	string[] split1 = pair.Value.Split (StatusProtocol.PairSeparator);  	string sname = "";  	string sdesc = "";  	foreach (string s in split1) {  		//look for name & desc  		string[] split2 = s.Split (StatusProtocol.ValueInPairSeparator);  		if (split2.Length >= 2) {  			if (split2 [0] == RT.RTCategory.StrName)  				sname = split2 [1];  			else if (split2 [0] == RT.RTCategory.StrDesc)  				sdesc = split2 [1];  		}  		if (!string.IsNullOrEmpty (sname) && !string.IsNullOrEmpty (sdesc)) {  			RT.RTCategory cat = new net.Tesacom.TsdProtocol.RT.RTCategory (sname' sdesc);  			cats.Add (cat);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Status,StatusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,getCategoriesInRequest,The following statement contains a magic number: foreach (string s in split1) {  	//look for name & desc  	string[] split2 = s.Split (StatusProtocol.ValueInPairSeparator);  	if (split2.Length >= 2) {  		if (split2 [0] == RT.RTCategory.StrName)  			sname = split2 [1];  		else if (split2 [0] == RT.RTCategory.StrDesc)  			sdesc = split2 [1];  	}  	if (!string.IsNullOrEmpty (sname) && !string.IsNullOrEmpty (sdesc)) {  		RT.RTCategory cat = new net.Tesacom.TsdProtocol.RT.RTCategory (sname' sdesc);  		cats.Add (cat);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Status,StatusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,getCategoriesInRequest,The following statement contains a magic number: if (split2.Length >= 2) {  	if (split2 [0] == RT.RTCategory.StrName)  		sname = split2 [1];  	else if (split2 [0] == RT.RTCategory.StrDesc)  		sdesc = split2 [1];  }  
Magic Number,net.Tesacom.TsdProtocol.Status,StatusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,IsModifiedEquipmentWithMaxCount,The following statement contains a magic number: if (reslt) {  	try {  		Count = Convert.ToUInt16 (count);  		reslt = true;  	}  	catch (Exception) {  		Count = 10;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Status,StatusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,IsModifiedEquipmentWithMaxCount,The following statement contains a magic number: try {  	Count = Convert.ToUInt16 (count);  	reslt = true;  }  catch (Exception) {  	Count = 10;  }  
Magic Number,net.Tesacom.TsdProtocol.Status,StatusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusProtocol.cs,IsModifiedEquipmentWithMaxCount,The following statement contains a magic number: Count = 10;  
Magic Number,net.Tesacom.TsdProtocol.Status,StatusServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusServer.cs,StatusServer,The following statement contains a magic number: model.SetBuffers (32768' 32768);  
Magic Number,net.Tesacom.TsdProtocol.Status,StatusServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Status\StatusServer.cs,StatusServer,The following statement contains a magic number: model.SetBuffers (32768' 32768);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	byte[] data = packet.GetData ();  	if (data.Length >= 4) {  		report.DIGITALINPUTS = Convert.ToInt16 (data [3] & 0x1F);  		report.IDDLETX = Convert.ToBoolean (data [3] & 0x40);  		report.IDDLERX = Convert.ToBoolean (data [3] & 0x80);  		report.STARTUP = Convert.ToBoolean (data [2] & 0x01);  		report.FLASH_STATUS = Convert.ToBoolean (data [2] & 0x02);  		report.FULLERASE = Convert.ToBoolean (data [2] & 0x04);  		report.CFGRESTORE = Convert.ToBoolean (data [2] & 0x08);  		report.SENDFULLFLASH = Convert.ToBoolean (data [2] & 0x10);  		report.SENDREPORT = Convert.ToBoolean (data [2] & 0x20);  		report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	byte[] data = packet.GetData ();  	if (data.Length >= 4) {  		report.DIGITALINPUTS = Convert.ToInt16 (data [3] & 0x1F);  		report.IDDLETX = Convert.ToBoolean (data [3] & 0x40);  		report.IDDLERX = Convert.ToBoolean (data [3] & 0x80);  		report.STARTUP = Convert.ToBoolean (data [2] & 0x01);  		report.FLASH_STATUS = Convert.ToBoolean (data [2] & 0x02);  		report.FULLERASE = Convert.ToBoolean (data [2] & 0x04);  		report.CFGRESTORE = Convert.ToBoolean (data [2] & 0x08);  		report.SENDFULLFLASH = Convert.ToBoolean (data [2] & 0x10);  		report.SENDREPORT = Convert.ToBoolean (data [2] & 0x20);  		report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	byte[] data = packet.GetData ();  	if (data.Length >= 4) {  		report.DIGITALINPUTS = Convert.ToInt16 (data [3] & 0x1F);  		report.IDDLETX = Convert.ToBoolean (data [3] & 0x40);  		report.IDDLERX = Convert.ToBoolean (data [3] & 0x80);  		report.STARTUP = Convert.ToBoolean (data [2] & 0x01);  		report.FLASH_STATUS = Convert.ToBoolean (data [2] & 0x02);  		report.FULLERASE = Convert.ToBoolean (data [2] & 0x04);  		report.CFGRESTORE = Convert.ToBoolean (data [2] & 0x08);  		report.SENDFULLFLASH = Convert.ToBoolean (data [2] & 0x10);  		report.SENDREPORT = Convert.ToBoolean (data [2] & 0x20);  		report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	byte[] data = packet.GetData ();  	if (data.Length >= 4) {  		report.DIGITALINPUTS = Convert.ToInt16 (data [3] & 0x1F);  		report.IDDLETX = Convert.ToBoolean (data [3] & 0x40);  		report.IDDLERX = Convert.ToBoolean (data [3] & 0x80);  		report.STARTUP = Convert.ToBoolean (data [2] & 0x01);  		report.FLASH_STATUS = Convert.ToBoolean (data [2] & 0x02);  		report.FULLERASE = Convert.ToBoolean (data [2] & 0x04);  		report.CFGRESTORE = Convert.ToBoolean (data [2] & 0x08);  		report.SENDFULLFLASH = Convert.ToBoolean (data [2] & 0x10);  		report.SENDREPORT = Convert.ToBoolean (data [2] & 0x20);  		report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	byte[] data = packet.GetData ();  	if (data.Length >= 4) {  		report.DIGITALINPUTS = Convert.ToInt16 (data [3] & 0x1F);  		report.IDDLETX = Convert.ToBoolean (data [3] & 0x40);  		report.IDDLERX = Convert.ToBoolean (data [3] & 0x80);  		report.STARTUP = Convert.ToBoolean (data [2] & 0x01);  		report.FLASH_STATUS = Convert.ToBoolean (data [2] & 0x02);  		report.FULLERASE = Convert.ToBoolean (data [2] & 0x04);  		report.CFGRESTORE = Convert.ToBoolean (data [2] & 0x08);  		report.SENDFULLFLASH = Convert.ToBoolean (data [2] & 0x10);  		report.SENDREPORT = Convert.ToBoolean (data [2] & 0x20);  		report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	byte[] data = packet.GetData ();  	if (data.Length >= 4) {  		report.DIGITALINPUTS = Convert.ToInt16 (data [3] & 0x1F);  		report.IDDLETX = Convert.ToBoolean (data [3] & 0x40);  		report.IDDLERX = Convert.ToBoolean (data [3] & 0x80);  		report.STARTUP = Convert.ToBoolean (data [2] & 0x01);  		report.FLASH_STATUS = Convert.ToBoolean (data [2] & 0x02);  		report.FULLERASE = Convert.ToBoolean (data [2] & 0x04);  		report.CFGRESTORE = Convert.ToBoolean (data [2] & 0x08);  		report.SENDFULLFLASH = Convert.ToBoolean (data [2] & 0x10);  		report.SENDREPORT = Convert.ToBoolean (data [2] & 0x20);  		report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	byte[] data = packet.GetData ();  	if (data.Length >= 4) {  		report.DIGITALINPUTS = Convert.ToInt16 (data [3] & 0x1F);  		report.IDDLETX = Convert.ToBoolean (data [3] & 0x40);  		report.IDDLERX = Convert.ToBoolean (data [3] & 0x80);  		report.STARTUP = Convert.ToBoolean (data [2] & 0x01);  		report.FLASH_STATUS = Convert.ToBoolean (data [2] & 0x02);  		report.FULLERASE = Convert.ToBoolean (data [2] & 0x04);  		report.CFGRESTORE = Convert.ToBoolean (data [2] & 0x08);  		report.SENDFULLFLASH = Convert.ToBoolean (data [2] & 0x10);  		report.SENDREPORT = Convert.ToBoolean (data [2] & 0x20);  		report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	byte[] data = packet.GetData ();  	if (data.Length >= 4) {  		report.DIGITALINPUTS = Convert.ToInt16 (data [3] & 0x1F);  		report.IDDLETX = Convert.ToBoolean (data [3] & 0x40);  		report.IDDLERX = Convert.ToBoolean (data [3] & 0x80);  		report.STARTUP = Convert.ToBoolean (data [2] & 0x01);  		report.FLASH_STATUS = Convert.ToBoolean (data [2] & 0x02);  		report.FULLERASE = Convert.ToBoolean (data [2] & 0x04);  		report.CFGRESTORE = Convert.ToBoolean (data [2] & 0x08);  		report.SENDFULLFLASH = Convert.ToBoolean (data [2] & 0x10);  		report.SENDREPORT = Convert.ToBoolean (data [2] & 0x20);  		report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	byte[] data = packet.GetData ();  	if (data.Length >= 4) {  		report.DIGITALINPUTS = Convert.ToInt16 (data [3] & 0x1F);  		report.IDDLETX = Convert.ToBoolean (data [3] & 0x40);  		report.IDDLERX = Convert.ToBoolean (data [3] & 0x80);  		report.STARTUP = Convert.ToBoolean (data [2] & 0x01);  		report.FLASH_STATUS = Convert.ToBoolean (data [2] & 0x02);  		report.FULLERASE = Convert.ToBoolean (data [2] & 0x04);  		report.CFGRESTORE = Convert.ToBoolean (data [2] & 0x08);  		report.SENDFULLFLASH = Convert.ToBoolean (data [2] & 0x10);  		report.SENDREPORT = Convert.ToBoolean (data [2] & 0x20);  		report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	byte[] data = packet.GetData ();  	if (data.Length >= 4) {  		report.DIGITALINPUTS = Convert.ToInt16 (data [3] & 0x1F);  		report.IDDLETX = Convert.ToBoolean (data [3] & 0x40);  		report.IDDLERX = Convert.ToBoolean (data [3] & 0x80);  		report.STARTUP = Convert.ToBoolean (data [2] & 0x01);  		report.FLASH_STATUS = Convert.ToBoolean (data [2] & 0x02);  		report.FULLERASE = Convert.ToBoolean (data [2] & 0x04);  		report.CFGRESTORE = Convert.ToBoolean (data [2] & 0x08);  		report.SENDFULLFLASH = Convert.ToBoolean (data [2] & 0x10);  		report.SENDREPORT = Convert.ToBoolean (data [2] & 0x20);  		report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	byte[] data = packet.GetData ();  	if (data.Length >= 4) {  		report.DIGITALINPUTS = Convert.ToInt16 (data [3] & 0x1F);  		report.IDDLETX = Convert.ToBoolean (data [3] & 0x40);  		report.IDDLERX = Convert.ToBoolean (data [3] & 0x80);  		report.STARTUP = Convert.ToBoolean (data [2] & 0x01);  		report.FLASH_STATUS = Convert.ToBoolean (data [2] & 0x02);  		report.FULLERASE = Convert.ToBoolean (data [2] & 0x04);  		report.CFGRESTORE = Convert.ToBoolean (data [2] & 0x08);  		report.SENDFULLFLASH = Convert.ToBoolean (data [2] & 0x10);  		report.SENDREPORT = Convert.ToBoolean (data [2] & 0x20);  		report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	byte[] data = packet.GetData ();  	if (data.Length >= 4) {  		report.DIGITALINPUTS = Convert.ToInt16 (data [3] & 0x1F);  		report.IDDLETX = Convert.ToBoolean (data [3] & 0x40);  		report.IDDLERX = Convert.ToBoolean (data [3] & 0x80);  		report.STARTUP = Convert.ToBoolean (data [2] & 0x01);  		report.FLASH_STATUS = Convert.ToBoolean (data [2] & 0x02);  		report.FULLERASE = Convert.ToBoolean (data [2] & 0x04);  		report.CFGRESTORE = Convert.ToBoolean (data [2] & 0x08);  		report.SENDFULLFLASH = Convert.ToBoolean (data [2] & 0x10);  		report.SENDREPORT = Convert.ToBoolean (data [2] & 0x20);  		report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	byte[] data = packet.GetData ();  	if (data.Length >= 4) {  		report.DIGITALINPUTS = Convert.ToInt16 (data [3] & 0x1F);  		report.IDDLETX = Convert.ToBoolean (data [3] & 0x40);  		report.IDDLERX = Convert.ToBoolean (data [3] & 0x80);  		report.STARTUP = Convert.ToBoolean (data [2] & 0x01);  		report.FLASH_STATUS = Convert.ToBoolean (data [2] & 0x02);  		report.FULLERASE = Convert.ToBoolean (data [2] & 0x04);  		report.CFGRESTORE = Convert.ToBoolean (data [2] & 0x08);  		report.SENDFULLFLASH = Convert.ToBoolean (data [2] & 0x10);  		report.SENDREPORT = Convert.ToBoolean (data [2] & 0x20);  		report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	byte[] data = packet.GetData ();  	if (data.Length >= 4) {  		report.DIGITALINPUTS = Convert.ToInt16 (data [3] & 0x1F);  		report.IDDLETX = Convert.ToBoolean (data [3] & 0x40);  		report.IDDLERX = Convert.ToBoolean (data [3] & 0x80);  		report.STARTUP = Convert.ToBoolean (data [2] & 0x01);  		report.FLASH_STATUS = Convert.ToBoolean (data [2] & 0x02);  		report.FULLERASE = Convert.ToBoolean (data [2] & 0x04);  		report.CFGRESTORE = Convert.ToBoolean (data [2] & 0x08);  		report.SENDFULLFLASH = Convert.ToBoolean (data [2] & 0x10);  		report.SENDREPORT = Convert.ToBoolean (data [2] & 0x20);  		report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	byte[] data = packet.GetData ();  	if (data.Length >= 4) {  		report.DIGITALINPUTS = Convert.ToInt16 (data [3] & 0x1F);  		report.IDDLETX = Convert.ToBoolean (data [3] & 0x40);  		report.IDDLERX = Convert.ToBoolean (data [3] & 0x80);  		report.STARTUP = Convert.ToBoolean (data [2] & 0x01);  		report.FLASH_STATUS = Convert.ToBoolean (data [2] & 0x02);  		report.FULLERASE = Convert.ToBoolean (data [2] & 0x04);  		report.CFGRESTORE = Convert.ToBoolean (data [2] & 0x08);  		report.SENDFULLFLASH = Convert.ToBoolean (data [2] & 0x10);  		report.SENDREPORT = Convert.ToBoolean (data [2] & 0x20);  		report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= 4) {  	report.DIGITALINPUTS = Convert.ToInt16 (data [3] & 0x1F);  	report.IDDLETX = Convert.ToBoolean (data [3] & 0x40);  	report.IDDLERX = Convert.ToBoolean (data [3] & 0x80);  	report.STARTUP = Convert.ToBoolean (data [2] & 0x01);  	report.FLASH_STATUS = Convert.ToBoolean (data [2] & 0x02);  	report.FULLERASE = Convert.ToBoolean (data [2] & 0x04);  	report.CFGRESTORE = Convert.ToBoolean (data [2] & 0x08);  	report.SENDFULLFLASH = Convert.ToBoolean (data [2] & 0x10);  	report.SENDREPORT = Convert.ToBoolean (data [2] & 0x20);  	report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= 4) {  	report.DIGITALINPUTS = Convert.ToInt16 (data [3] & 0x1F);  	report.IDDLETX = Convert.ToBoolean (data [3] & 0x40);  	report.IDDLERX = Convert.ToBoolean (data [3] & 0x80);  	report.STARTUP = Convert.ToBoolean (data [2] & 0x01);  	report.FLASH_STATUS = Convert.ToBoolean (data [2] & 0x02);  	report.FULLERASE = Convert.ToBoolean (data [2] & 0x04);  	report.CFGRESTORE = Convert.ToBoolean (data [2] & 0x08);  	report.SENDFULLFLASH = Convert.ToBoolean (data [2] & 0x10);  	report.SENDREPORT = Convert.ToBoolean (data [2] & 0x20);  	report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= 4) {  	report.DIGITALINPUTS = Convert.ToInt16 (data [3] & 0x1F);  	report.IDDLETX = Convert.ToBoolean (data [3] & 0x40);  	report.IDDLERX = Convert.ToBoolean (data [3] & 0x80);  	report.STARTUP = Convert.ToBoolean (data [2] & 0x01);  	report.FLASH_STATUS = Convert.ToBoolean (data [2] & 0x02);  	report.FULLERASE = Convert.ToBoolean (data [2] & 0x04);  	report.CFGRESTORE = Convert.ToBoolean (data [2] & 0x08);  	report.SENDFULLFLASH = Convert.ToBoolean (data [2] & 0x10);  	report.SENDREPORT = Convert.ToBoolean (data [2] & 0x20);  	report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= 4) {  	report.DIGITALINPUTS = Convert.ToInt16 (data [3] & 0x1F);  	report.IDDLETX = Convert.ToBoolean (data [3] & 0x40);  	report.IDDLERX = Convert.ToBoolean (data [3] & 0x80);  	report.STARTUP = Convert.ToBoolean (data [2] & 0x01);  	report.FLASH_STATUS = Convert.ToBoolean (data [2] & 0x02);  	report.FULLERASE = Convert.ToBoolean (data [2] & 0x04);  	report.CFGRESTORE = Convert.ToBoolean (data [2] & 0x08);  	report.SENDFULLFLASH = Convert.ToBoolean (data [2] & 0x10);  	report.SENDREPORT = Convert.ToBoolean (data [2] & 0x20);  	report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= 4) {  	report.DIGITALINPUTS = Convert.ToInt16 (data [3] & 0x1F);  	report.IDDLETX = Convert.ToBoolean (data [3] & 0x40);  	report.IDDLERX = Convert.ToBoolean (data [3] & 0x80);  	report.STARTUP = Convert.ToBoolean (data [2] & 0x01);  	report.FLASH_STATUS = Convert.ToBoolean (data [2] & 0x02);  	report.FULLERASE = Convert.ToBoolean (data [2] & 0x04);  	report.CFGRESTORE = Convert.ToBoolean (data [2] & 0x08);  	report.SENDFULLFLASH = Convert.ToBoolean (data [2] & 0x10);  	report.SENDREPORT = Convert.ToBoolean (data [2] & 0x20);  	report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= 4) {  	report.DIGITALINPUTS = Convert.ToInt16 (data [3] & 0x1F);  	report.IDDLETX = Convert.ToBoolean (data [3] & 0x40);  	report.IDDLERX = Convert.ToBoolean (data [3] & 0x80);  	report.STARTUP = Convert.ToBoolean (data [2] & 0x01);  	report.FLASH_STATUS = Convert.ToBoolean (data [2] & 0x02);  	report.FULLERASE = Convert.ToBoolean (data [2] & 0x04);  	report.CFGRESTORE = Convert.ToBoolean (data [2] & 0x08);  	report.SENDFULLFLASH = Convert.ToBoolean (data [2] & 0x10);  	report.SENDREPORT = Convert.ToBoolean (data [2] & 0x20);  	report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= 4) {  	report.DIGITALINPUTS = Convert.ToInt16 (data [3] & 0x1F);  	report.IDDLETX = Convert.ToBoolean (data [3] & 0x40);  	report.IDDLERX = Convert.ToBoolean (data [3] & 0x80);  	report.STARTUP = Convert.ToBoolean (data [2] & 0x01);  	report.FLASH_STATUS = Convert.ToBoolean (data [2] & 0x02);  	report.FULLERASE = Convert.ToBoolean (data [2] & 0x04);  	report.CFGRESTORE = Convert.ToBoolean (data [2] & 0x08);  	report.SENDFULLFLASH = Convert.ToBoolean (data [2] & 0x10);  	report.SENDREPORT = Convert.ToBoolean (data [2] & 0x20);  	report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= 4) {  	report.DIGITALINPUTS = Convert.ToInt16 (data [3] & 0x1F);  	report.IDDLETX = Convert.ToBoolean (data [3] & 0x40);  	report.IDDLERX = Convert.ToBoolean (data [3] & 0x80);  	report.STARTUP = Convert.ToBoolean (data [2] & 0x01);  	report.FLASH_STATUS = Convert.ToBoolean (data [2] & 0x02);  	report.FULLERASE = Convert.ToBoolean (data [2] & 0x04);  	report.CFGRESTORE = Convert.ToBoolean (data [2] & 0x08);  	report.SENDFULLFLASH = Convert.ToBoolean (data [2] & 0x10);  	report.SENDREPORT = Convert.ToBoolean (data [2] & 0x20);  	report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= 4) {  	report.DIGITALINPUTS = Convert.ToInt16 (data [3] & 0x1F);  	report.IDDLETX = Convert.ToBoolean (data [3] & 0x40);  	report.IDDLERX = Convert.ToBoolean (data [3] & 0x80);  	report.STARTUP = Convert.ToBoolean (data [2] & 0x01);  	report.FLASH_STATUS = Convert.ToBoolean (data [2] & 0x02);  	report.FULLERASE = Convert.ToBoolean (data [2] & 0x04);  	report.CFGRESTORE = Convert.ToBoolean (data [2] & 0x08);  	report.SENDFULLFLASH = Convert.ToBoolean (data [2] & 0x10);  	report.SENDREPORT = Convert.ToBoolean (data [2] & 0x20);  	report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= 4) {  	report.DIGITALINPUTS = Convert.ToInt16 (data [3] & 0x1F);  	report.IDDLETX = Convert.ToBoolean (data [3] & 0x40);  	report.IDDLERX = Convert.ToBoolean (data [3] & 0x80);  	report.STARTUP = Convert.ToBoolean (data [2] & 0x01);  	report.FLASH_STATUS = Convert.ToBoolean (data [2] & 0x02);  	report.FULLERASE = Convert.ToBoolean (data [2] & 0x04);  	report.CFGRESTORE = Convert.ToBoolean (data [2] & 0x08);  	report.SENDFULLFLASH = Convert.ToBoolean (data [2] & 0x10);  	report.SENDREPORT = Convert.ToBoolean (data [2] & 0x20);  	report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= 4) {  	report.DIGITALINPUTS = Convert.ToInt16 (data [3] & 0x1F);  	report.IDDLETX = Convert.ToBoolean (data [3] & 0x40);  	report.IDDLERX = Convert.ToBoolean (data [3] & 0x80);  	report.STARTUP = Convert.ToBoolean (data [2] & 0x01);  	report.FLASH_STATUS = Convert.ToBoolean (data [2] & 0x02);  	report.FULLERASE = Convert.ToBoolean (data [2] & 0x04);  	report.CFGRESTORE = Convert.ToBoolean (data [2] & 0x08);  	report.SENDFULLFLASH = Convert.ToBoolean (data [2] & 0x10);  	report.SENDREPORT = Convert.ToBoolean (data [2] & 0x20);  	report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= 4) {  	report.DIGITALINPUTS = Convert.ToInt16 (data [3] & 0x1F);  	report.IDDLETX = Convert.ToBoolean (data [3] & 0x40);  	report.IDDLERX = Convert.ToBoolean (data [3] & 0x80);  	report.STARTUP = Convert.ToBoolean (data [2] & 0x01);  	report.FLASH_STATUS = Convert.ToBoolean (data [2] & 0x02);  	report.FULLERASE = Convert.ToBoolean (data [2] & 0x04);  	report.CFGRESTORE = Convert.ToBoolean (data [2] & 0x08);  	report.SENDFULLFLASH = Convert.ToBoolean (data [2] & 0x10);  	report.SENDREPORT = Convert.ToBoolean (data [2] & 0x20);  	report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= 4) {  	report.DIGITALINPUTS = Convert.ToInt16 (data [3] & 0x1F);  	report.IDDLETX = Convert.ToBoolean (data [3] & 0x40);  	report.IDDLERX = Convert.ToBoolean (data [3] & 0x80);  	report.STARTUP = Convert.ToBoolean (data [2] & 0x01);  	report.FLASH_STATUS = Convert.ToBoolean (data [2] & 0x02);  	report.FULLERASE = Convert.ToBoolean (data [2] & 0x04);  	report.CFGRESTORE = Convert.ToBoolean (data [2] & 0x08);  	report.SENDFULLFLASH = Convert.ToBoolean (data [2] & 0x10);  	report.SENDREPORT = Convert.ToBoolean (data [2] & 0x20);  	report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= 4) {  	report.DIGITALINPUTS = Convert.ToInt16 (data [3] & 0x1F);  	report.IDDLETX = Convert.ToBoolean (data [3] & 0x40);  	report.IDDLERX = Convert.ToBoolean (data [3] & 0x80);  	report.STARTUP = Convert.ToBoolean (data [2] & 0x01);  	report.FLASH_STATUS = Convert.ToBoolean (data [2] & 0x02);  	report.FULLERASE = Convert.ToBoolean (data [2] & 0x04);  	report.CFGRESTORE = Convert.ToBoolean (data [2] & 0x08);  	report.SENDFULLFLASH = Convert.ToBoolean (data [2] & 0x10);  	report.SENDREPORT = Convert.ToBoolean (data [2] & 0x20);  	report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= 4) {  	report.DIGITALINPUTS = Convert.ToInt16 (data [3] & 0x1F);  	report.IDDLETX = Convert.ToBoolean (data [3] & 0x40);  	report.IDDLERX = Convert.ToBoolean (data [3] & 0x80);  	report.STARTUP = Convert.ToBoolean (data [2] & 0x01);  	report.FLASH_STATUS = Convert.ToBoolean (data [2] & 0x02);  	report.FULLERASE = Convert.ToBoolean (data [2] & 0x04);  	report.CFGRESTORE = Convert.ToBoolean (data [2] & 0x08);  	report.SENDFULLFLASH = Convert.ToBoolean (data [2] & 0x10);  	report.SENDREPORT = Convert.ToBoolean (data [2] & 0x20);  	report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report.DIGITALINPUTS = Convert.ToInt16 (data [3] & 0x1F);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report.IDDLETX = Convert.ToBoolean (data [3] & 0x40);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report.IDDLERX = Convert.ToBoolean (data [3] & 0x80);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report.STARTUP = Convert.ToBoolean (data [2] & 0x01);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report.FLASH_STATUS = Convert.ToBoolean (data [2] & 0x02);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report.FULLERASE = Convert.ToBoolean (data [2] & 0x04);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report.CFGRESTORE = Convert.ToBoolean (data [2] & 0x08);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report.SENDFULLFLASH = Convert.ToBoolean (data [2] & 0x10);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report.SENDREPORT = Convert.ToBoolean (data [2] & 0x20);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaStatusReport,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report.DATA = (data [0] * 16777216) + (data [1] * 65536) + (data [2] * 256) + data [3];  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= (RECORDLENGTH * PACKETCOUNT)) {  	for (int idx = 0; idx < PACKETCOUNT; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  			TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= (RECORDLENGTH * PACKETCOUNT)) {  	for (int idx = 0; idx < PACKETCOUNT; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  			TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= (RECORDLENGTH * PACKETCOUNT)) {  	for (int idx = 0; idx < PACKETCOUNT; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  			TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= (RECORDLENGTH * PACKETCOUNT)) {  	for (int idx = 0; idx < PACKETCOUNT; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  			TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= (RECORDLENGTH * PACKETCOUNT)) {  	for (int idx = 0; idx < PACKETCOUNT; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  			TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= (RECORDLENGTH * PACKETCOUNT)) {  	for (int idx = 0; idx < PACKETCOUNT; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  			TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= (RECORDLENGTH * PACKETCOUNT)) {  	for (int idx = 0; idx < PACKETCOUNT; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  			TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= (RECORDLENGTH * PACKETCOUNT)) {  	for (int idx = 0; idx < PACKETCOUNT; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  			TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= (RECORDLENGTH * PACKETCOUNT)) {  	for (int idx = 0; idx < PACKETCOUNT; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  			TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= (RECORDLENGTH * PACKETCOUNT)) {  	for (int idx = 0; idx < PACKETCOUNT; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  			TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= (RECORDLENGTH * PACKETCOUNT)) {  	for (int idx = 0; idx < PACKETCOUNT; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  			TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= (RECORDLENGTH * PACKETCOUNT)) {  	for (int idx = 0; idx < PACKETCOUNT; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  			TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= (RECORDLENGTH * PACKETCOUNT)) {  	for (int idx = 0; idx < PACKETCOUNT; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  			TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= (RECORDLENGTH * PACKETCOUNT)) {  	for (int idx = 0; idx < PACKETCOUNT; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  			TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= (RECORDLENGTH * PACKETCOUNT)) {  	for (int idx = 0; idx < PACKETCOUNT; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  			TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= (RECORDLENGTH * PACKETCOUNT)) {  	for (int idx = 0; idx < PACKETCOUNT; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  			TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= (RECORDLENGTH * PACKETCOUNT)) {  	for (int idx = 0; idx < PACKETCOUNT; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  			TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= (RECORDLENGTH * PACKETCOUNT)) {  	for (int idx = 0; idx < PACKETCOUNT; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  			TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= (RECORDLENGTH * PACKETCOUNT)) {  	for (int idx = 0; idx < PACKETCOUNT; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  			TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length >= (RECORDLENGTH * PACKETCOUNT)) {  	for (int idx = 0; idx < PACKETCOUNT; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  			TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < PACKETCOUNT; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  		TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < PACKETCOUNT; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  		TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < PACKETCOUNT; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  		TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < PACKETCOUNT; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  		TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < PACKETCOUNT; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  		TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < PACKETCOUNT; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  		TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < PACKETCOUNT; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  		TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < PACKETCOUNT; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  		TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < PACKETCOUNT; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  		TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < PACKETCOUNT; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  		TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < PACKETCOUNT; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  		TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < PACKETCOUNT; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  		TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < PACKETCOUNT; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  		TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < PACKETCOUNT; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  		TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < PACKETCOUNT; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  		TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < PACKETCOUNT; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  		TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < PACKETCOUNT; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  		TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < PACKETCOUNT; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  		TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < PACKETCOUNT; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  		TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < PACKETCOUNT; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  		TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  	TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  	TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  	TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  	TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  	TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  	TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  	TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  	TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  	TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  	TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  	TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  	TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  	TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  	TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  	TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  	TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  	TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  	TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  	TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithoutStart ();  	TSDParseResult reslt = report [idx].EndTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  	report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  	//the flags  	report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  	report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  	report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  	report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  	report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  	report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  	report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  	report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  	report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  	report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  	//the flags  	report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  	report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  	report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  	report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  	report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  	report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  	report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  	report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  	report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  	report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  	//the flags  	report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  	report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  	report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  	report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  	report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  	report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  	report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  	report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  	report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  	report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  	//the flags  	report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  	report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  	report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  	report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  	report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  	report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  	report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  	report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  	report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  	report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  	//the flags  	report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  	report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  	report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  	report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  	report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  	report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  	report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  	report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  	report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  	report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  	//the flags  	report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  	report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  	report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  	report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  	report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  	report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  	report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  	report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  	report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  	report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  	//the flags  	report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  	report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  	report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  	report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  	report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  	report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  	report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  	report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  	report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  	report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  	//the flags  	report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  	report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  	report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  	report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  	report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  	report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  	report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  	report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  	report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  	report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  	//the flags  	report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  	report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  	report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  	report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  	report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  	report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  	report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  	report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  	report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  	report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  	//the flags  	report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  	report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  	report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  	report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  	report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  	report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  	report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  	report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  	report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  	report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  	//the flags  	report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  	report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  	report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  	report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  	report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  	report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  	report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  	report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  	report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  	report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  	//the flags  	report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  	report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  	report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  	report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  	report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  	report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  	report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  	report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  	report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  	report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  	//the flags  	report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  	report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  	report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  	report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  	report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  	report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  	report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  	report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  	report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  	report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  	//the flags  	report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  	report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  	report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  	report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  	report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  	report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  	report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  	report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  	report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  	report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  	//the flags  	report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  	report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  	report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  	report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  	report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  	report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  	report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  	report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  	report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  	report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  	//the flags  	report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  	report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  	report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  	report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  	report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  	report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  	report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  	report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  	report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  	report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  	//the flags  	report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  	report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  	report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  	report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  	report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  	report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  	report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  	report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  	report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  	report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  	//the flags  	report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  	report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  	report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  	report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  	report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  	report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  	report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  	report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  	report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  	report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  	//the flags  	report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  	report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  	report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  	report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  	report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  	report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  	report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  	report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  	report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  	report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  	//the flags  	report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  	report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  	report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  	report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  	report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  	report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  	report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  	report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  	report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Flags = Convert.ToUInt16 ((data [12 + (RECORDLENGTH * idx)] * 256) + data [13 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithoutStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Reserved = Convert.ToUInt16 ((data [14 + (RECORDLENGTH * idx)] * 256) + data [15 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length % RECORDLENGTH == 0) {  	report = new TsdCammesa8EnergyRecordsWithStart[packetCount];  	for (int idx = 0; idx < packetCount; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  			TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  				//modified by SN on 2013.04.30  				//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  				if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  					report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  				//si el start es mayor que el end' se dan vuelta  				if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  					DataTimestamp tsbuff = report [idx].EndTimestamp;  					report [idx].EndTimestamp = report [idx].StartTimestamp;  					report [idx].StartTimestamp = tsbuff;  				}  				if (reslt == TSDParseResult.ParseOK) {  					report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  					report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  					//the flags  					report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  					report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  					report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  					report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  					report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  					report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  					report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  					report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  					report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  					report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  					report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  					report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  				}  				else {  					report [idx] = null;  				}  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length % RECORDLENGTH == 0) {  	report = new TsdCammesa8EnergyRecordsWithStart[packetCount];  	for (int idx = 0; idx < packetCount; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  			TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  				//modified by SN on 2013.04.30  				//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  				if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  					report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  				//si el start es mayor que el end' se dan vuelta  				if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  					DataTimestamp tsbuff = report [idx].EndTimestamp;  					report [idx].EndTimestamp = report [idx].StartTimestamp;  					report [idx].StartTimestamp = tsbuff;  				}  				if (reslt == TSDParseResult.ParseOK) {  					report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  					report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  					//the flags  					report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  					report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  					report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  					report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  					report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  					report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  					report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  					report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  					report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  					report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  					report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  					report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  				}  				else {  					report [idx] = null;  				}  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length % RECORDLENGTH == 0) {  	report = new TsdCammesa8EnergyRecordsWithStart[packetCount];  	for (int idx = 0; idx < packetCount; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  			TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  				//modified by SN on 2013.04.30  				//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  				if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  					report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  				//si el start es mayor que el end' se dan vuelta  				if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  					DataTimestamp tsbuff = report [idx].EndTimestamp;  					report [idx].EndTimestamp = report [idx].StartTimestamp;  					report [idx].StartTimestamp = tsbuff;  				}  				if (reslt == TSDParseResult.ParseOK) {  					report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  					report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  					//the flags  					report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  					report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  					report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  					report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  					report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  					report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  					report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  					report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  					report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  					report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  					report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  					report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  				}  				else {  					report [idx] = null;  				}  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length % RECORDLENGTH == 0) {  	report = new TsdCammesa8EnergyRecordsWithStart[packetCount];  	for (int idx = 0; idx < packetCount; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  			TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  				//modified by SN on 2013.04.30  				//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  				if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  					report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  				//si el start es mayor que el end' se dan vuelta  				if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  					DataTimestamp tsbuff = report [idx].EndTimestamp;  					report [idx].EndTimestamp = report [idx].StartTimestamp;  					report [idx].StartTimestamp = tsbuff;  				}  				if (reslt == TSDParseResult.ParseOK) {  					report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  					report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  					//the flags  					report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  					report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  					report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  					report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  					report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  					report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  					report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  					report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  					report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  					report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  					report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  					report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  				}  				else {  					report [idx] = null;  				}  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length % RECORDLENGTH == 0) {  	report = new TsdCammesa8EnergyRecordsWithStart[packetCount];  	for (int idx = 0; idx < packetCount; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  			TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  				//modified by SN on 2013.04.30  				//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  				if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  					report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  				//si el start es mayor que el end' se dan vuelta  				if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  					DataTimestamp tsbuff = report [idx].EndTimestamp;  					report [idx].EndTimestamp = report [idx].StartTimestamp;  					report [idx].StartTimestamp = tsbuff;  				}  				if (reslt == TSDParseResult.ParseOK) {  					report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  					report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  					//the flags  					report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  					report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  					report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  					report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  					report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  					report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  					report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  					report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  					report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  					report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  					report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  					report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  				}  				else {  					report [idx] = null;  				}  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length % RECORDLENGTH == 0) {  	report = new TsdCammesa8EnergyRecordsWithStart[packetCount];  	for (int idx = 0; idx < packetCount; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  			TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  				//modified by SN on 2013.04.30  				//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  				if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  					report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  				//si el start es mayor que el end' se dan vuelta  				if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  					DataTimestamp tsbuff = report [idx].EndTimestamp;  					report [idx].EndTimestamp = report [idx].StartTimestamp;  					report [idx].StartTimestamp = tsbuff;  				}  				if (reslt == TSDParseResult.ParseOK) {  					report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  					report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  					//the flags  					report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  					report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  					report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  					report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  					report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  					report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  					report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  					report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  					report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  					report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  					report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  					report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  				}  				else {  					report [idx] = null;  				}  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length % RECORDLENGTH == 0) {  	report = new TsdCammesa8EnergyRecordsWithStart[packetCount];  	for (int idx = 0; idx < packetCount; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  			TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  				//modified by SN on 2013.04.30  				//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  				if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  					report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  				//si el start es mayor que el end' se dan vuelta  				if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  					DataTimestamp tsbuff = report [idx].EndTimestamp;  					report [idx].EndTimestamp = report [idx].StartTimestamp;  					report [idx].StartTimestamp = tsbuff;  				}  				if (reslt == TSDParseResult.ParseOK) {  					report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  					report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  					//the flags  					report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  					report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  					report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  					report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  					report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  					report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  					report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  					report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  					report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  					report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  					report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  					report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  				}  				else {  					report [idx] = null;  				}  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length % RECORDLENGTH == 0) {  	report = new TsdCammesa8EnergyRecordsWithStart[packetCount];  	for (int idx = 0; idx < packetCount; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  			TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  				//modified by SN on 2013.04.30  				//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  				if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  					report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  				//si el start es mayor que el end' se dan vuelta  				if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  					DataTimestamp tsbuff = report [idx].EndTimestamp;  					report [idx].EndTimestamp = report [idx].StartTimestamp;  					report [idx].StartTimestamp = tsbuff;  				}  				if (reslt == TSDParseResult.ParseOK) {  					report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  					report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  					//the flags  					report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  					report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  					report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  					report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  					report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  					report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  					report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  					report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  					report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  					report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  					report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  					report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  				}  				else {  					report [idx] = null;  				}  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length % RECORDLENGTH == 0) {  	report = new TsdCammesa8EnergyRecordsWithStart[packetCount];  	for (int idx = 0; idx < packetCount; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  			TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  				//modified by SN on 2013.04.30  				//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  				if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  					report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  				//si el start es mayor que el end' se dan vuelta  				if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  					DataTimestamp tsbuff = report [idx].EndTimestamp;  					report [idx].EndTimestamp = report [idx].StartTimestamp;  					report [idx].StartTimestamp = tsbuff;  				}  				if (reslt == TSDParseResult.ParseOK) {  					report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  					report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  					//the flags  					report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  					report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  					report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  					report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  					report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  					report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  					report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  					report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  					report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  					report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  					report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  					report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  				}  				else {  					report [idx] = null;  				}  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length % RECORDLENGTH == 0) {  	report = new TsdCammesa8EnergyRecordsWithStart[packetCount];  	for (int idx = 0; idx < packetCount; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  			TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  				//modified by SN on 2013.04.30  				//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  				if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  					report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  				//si el start es mayor que el end' se dan vuelta  				if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  					DataTimestamp tsbuff = report [idx].EndTimestamp;  					report [idx].EndTimestamp = report [idx].StartTimestamp;  					report [idx].StartTimestamp = tsbuff;  				}  				if (reslt == TSDParseResult.ParseOK) {  					report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  					report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  					//the flags  					report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  					report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  					report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  					report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  					report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  					report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  					report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  					report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  					report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  					report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  					report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  					report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  				}  				else {  					report [idx] = null;  				}  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length % RECORDLENGTH == 0) {  	report = new TsdCammesa8EnergyRecordsWithStart[packetCount];  	for (int idx = 0; idx < packetCount; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  			TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  				//modified by SN on 2013.04.30  				//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  				if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  					report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  				//si el start es mayor que el end' se dan vuelta  				if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  					DataTimestamp tsbuff = report [idx].EndTimestamp;  					report [idx].EndTimestamp = report [idx].StartTimestamp;  					report [idx].StartTimestamp = tsbuff;  				}  				if (reslt == TSDParseResult.ParseOK) {  					report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  					report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  					//the flags  					report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  					report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  					report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  					report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  					report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  					report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  					report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  					report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  					report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  					report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  					report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  					report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  				}  				else {  					report [idx] = null;  				}  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length % RECORDLENGTH == 0) {  	report = new TsdCammesa8EnergyRecordsWithStart[packetCount];  	for (int idx = 0; idx < packetCount; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  			TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  				//modified by SN on 2013.04.30  				//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  				if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  					report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  				//si el start es mayor que el end' se dan vuelta  				if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  					DataTimestamp tsbuff = report [idx].EndTimestamp;  					report [idx].EndTimestamp = report [idx].StartTimestamp;  					report [idx].StartTimestamp = tsbuff;  				}  				if (reslt == TSDParseResult.ParseOK) {  					report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  					report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  					//the flags  					report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  					report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  					report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  					report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  					report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  					report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  					report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  					report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  					report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  					report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  					report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  					report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  				}  				else {  					report [idx] = null;  				}  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length % RECORDLENGTH == 0) {  	report = new TsdCammesa8EnergyRecordsWithStart[packetCount];  	for (int idx = 0; idx < packetCount; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  			TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  				//modified by SN on 2013.04.30  				//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  				if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  					report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  				//si el start es mayor que el end' se dan vuelta  				if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  					DataTimestamp tsbuff = report [idx].EndTimestamp;  					report [idx].EndTimestamp = report [idx].StartTimestamp;  					report [idx].StartTimestamp = tsbuff;  				}  				if (reslt == TSDParseResult.ParseOK) {  					report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  					report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  					//the flags  					report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  					report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  					report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  					report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  					report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  					report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  					report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  					report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  					report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  					report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  					report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  					report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  				}  				else {  					report [idx] = null;  				}  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length % RECORDLENGTH == 0) {  	report = new TsdCammesa8EnergyRecordsWithStart[packetCount];  	for (int idx = 0; idx < packetCount; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  			TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  				//modified by SN on 2013.04.30  				//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  				if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  					report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  				//si el start es mayor que el end' se dan vuelta  				if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  					DataTimestamp tsbuff = report [idx].EndTimestamp;  					report [idx].EndTimestamp = report [idx].StartTimestamp;  					report [idx].StartTimestamp = tsbuff;  				}  				if (reslt == TSDParseResult.ParseOK) {  					report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  					report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  					//the flags  					report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  					report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  					report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  					report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  					report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  					report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  					report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  					report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  					report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  					report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  					report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  					report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  				}  				else {  					report [idx] = null;  				}  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length % RECORDLENGTH == 0) {  	report = new TsdCammesa8EnergyRecordsWithStart[packetCount];  	for (int idx = 0; idx < packetCount; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  			TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  				//modified by SN on 2013.04.30  				//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  				if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  					report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  				//si el start es mayor que el end' se dan vuelta  				if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  					DataTimestamp tsbuff = report [idx].EndTimestamp;  					report [idx].EndTimestamp = report [idx].StartTimestamp;  					report [idx].StartTimestamp = tsbuff;  				}  				if (reslt == TSDParseResult.ParseOK) {  					report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  					report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  					//the flags  					report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  					report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  					report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  					report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  					report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  					report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  					report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  					report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  					report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  					report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  					report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  					report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  				}  				else {  					report [idx] = null;  				}  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length % RECORDLENGTH == 0) {  	report = new TsdCammesa8EnergyRecordsWithStart[packetCount];  	for (int idx = 0; idx < packetCount; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  			TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  				//modified by SN on 2013.04.30  				//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  				if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  					report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  				//si el start es mayor que el end' se dan vuelta  				if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  					DataTimestamp tsbuff = report [idx].EndTimestamp;  					report [idx].EndTimestamp = report [idx].StartTimestamp;  					report [idx].StartTimestamp = tsbuff;  				}  				if (reslt == TSDParseResult.ParseOK) {  					report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  					report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  					//the flags  					report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  					report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  					report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  					report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  					report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  					report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  					report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  					report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  					report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  					report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  					report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  					report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  				}  				else {  					report [idx] = null;  				}  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length % RECORDLENGTH == 0) {  	report = new TsdCammesa8EnergyRecordsWithStart[packetCount];  	for (int idx = 0; idx < packetCount; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  			TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  				//modified by SN on 2013.04.30  				//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  				if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  					report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  				//si el start es mayor que el end' se dan vuelta  				if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  					DataTimestamp tsbuff = report [idx].EndTimestamp;  					report [idx].EndTimestamp = report [idx].StartTimestamp;  					report [idx].StartTimestamp = tsbuff;  				}  				if (reslt == TSDParseResult.ParseOK) {  					report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  					report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  					//the flags  					report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  					report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  					report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  					report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  					report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  					report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  					report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  					report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  					report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  					report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  					report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  					report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  				}  				else {  					report [idx] = null;  				}  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length % RECORDLENGTH == 0) {  	report = new TsdCammesa8EnergyRecordsWithStart[packetCount];  	for (int idx = 0; idx < packetCount; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  			TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  				//modified by SN on 2013.04.30  				//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  				if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  					report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  				//si el start es mayor que el end' se dan vuelta  				if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  					DataTimestamp tsbuff = report [idx].EndTimestamp;  					report [idx].EndTimestamp = report [idx].StartTimestamp;  					report [idx].StartTimestamp = tsbuff;  				}  				if (reslt == TSDParseResult.ParseOK) {  					report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  					report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  					//the flags  					report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  					report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  					report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  					report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  					report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  					report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  					report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  					report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  					report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  					report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  					report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  					report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  				}  				else {  					report [idx] = null;  				}  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length % RECORDLENGTH == 0) {  	report = new TsdCammesa8EnergyRecordsWithStart[packetCount];  	for (int idx = 0; idx < packetCount; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  			TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  				//modified by SN on 2013.04.30  				//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  				if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  					report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  				//si el start es mayor que el end' se dan vuelta  				if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  					DataTimestamp tsbuff = report [idx].EndTimestamp;  					report [idx].EndTimestamp = report [idx].StartTimestamp;  					report [idx].StartTimestamp = tsbuff;  				}  				if (reslt == TSDParseResult.ParseOK) {  					report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  					report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  					//the flags  					report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  					report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  					report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  					report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  					report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  					report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  					report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  					report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  					report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  					report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  					report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  					report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  				}  				else {  					report [idx] = null;  				}  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length % RECORDLENGTH == 0) {  	report = new TsdCammesa8EnergyRecordsWithStart[packetCount];  	for (int idx = 0; idx < packetCount; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  			TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  				//modified by SN on 2013.04.30  				//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  				if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  					report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  				//si el start es mayor que el end' se dan vuelta  				if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  					DataTimestamp tsbuff = report [idx].EndTimestamp;  					report [idx].EndTimestamp = report [idx].StartTimestamp;  					report [idx].StartTimestamp = tsbuff;  				}  				if (reslt == TSDParseResult.ParseOK) {  					report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  					report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  					//the flags  					report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  					report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  					report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  					report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  					report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  					report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  					report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  					report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  					report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  					report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  					report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  					report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  				}  				else {  					report [idx] = null;  				}  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length % RECORDLENGTH == 0) {  	report = new TsdCammesa8EnergyRecordsWithStart[packetCount];  	for (int idx = 0; idx < packetCount; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  			TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  				//modified by SN on 2013.04.30  				//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  				if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  					report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  				//si el start es mayor que el end' se dan vuelta  				if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  					DataTimestamp tsbuff = report [idx].EndTimestamp;  					report [idx].EndTimestamp = report [idx].StartTimestamp;  					report [idx].StartTimestamp = tsbuff;  				}  				if (reslt == TSDParseResult.ParseOK) {  					report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  					report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  					//the flags  					report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  					report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  					report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  					report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  					report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  					report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  					report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  					report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  					report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  					report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  					report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  					report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  				}  				else {  					report [idx] = null;  				}  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (data.Length % RECORDLENGTH == 0) {  	report = new TsdCammesa8EnergyRecordsWithStart[packetCount];  	for (int idx = 0; idx < packetCount; idx++) {  		try {  			report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  			TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  				report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  				reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  				//modified by SN on 2013.04.30  				//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  				if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  					report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  				//si el start es mayor que el end' se dan vuelta  				if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  					DataTimestamp tsbuff = report [idx].EndTimestamp;  					report [idx].EndTimestamp = report [idx].StartTimestamp;  					report [idx].StartTimestamp = tsbuff;  				}  				if (reslt == TSDParseResult.ParseOK) {  					report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  					report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  					//the flags  					report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  					report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  					report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  					report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  					report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  					report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  					report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  					report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  					report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  					report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  					report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  					report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  				}  				else {  					report [idx] = null;  				}  			}  			else {  				report [idx] = null;  			}  		}  		catch (Exception) {  			report [idx] = null;  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < packetCount; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  		TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  			//modified by SN on 2013.04.30  			//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  			if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  				report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  			//si el start es mayor que el end' se dan vuelta  			if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  				DataTimestamp tsbuff = report [idx].EndTimestamp;  				report [idx].EndTimestamp = report [idx].StartTimestamp;  				report [idx].StartTimestamp = tsbuff;  			}  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  				report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  				report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < packetCount; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  		TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  			//modified by SN on 2013.04.30  			//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  			if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  				report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  			//si el start es mayor que el end' se dan vuelta  			if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  				DataTimestamp tsbuff = report [idx].EndTimestamp;  				report [idx].EndTimestamp = report [idx].StartTimestamp;  				report [idx].StartTimestamp = tsbuff;  			}  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  				report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  				report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < packetCount; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  		TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  			//modified by SN on 2013.04.30  			//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  			if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  				report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  			//si el start es mayor que el end' se dan vuelta  			if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  				DataTimestamp tsbuff = report [idx].EndTimestamp;  				report [idx].EndTimestamp = report [idx].StartTimestamp;  				report [idx].StartTimestamp = tsbuff;  			}  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  				report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  				report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < packetCount; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  		TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  			//modified by SN on 2013.04.30  			//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  			if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  				report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  			//si el start es mayor que el end' se dan vuelta  			if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  				DataTimestamp tsbuff = report [idx].EndTimestamp;  				report [idx].EndTimestamp = report [idx].StartTimestamp;  				report [idx].StartTimestamp = tsbuff;  			}  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  				report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  				report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < packetCount; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  		TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  			//modified by SN on 2013.04.30  			//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  			if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  				report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  			//si el start es mayor que el end' se dan vuelta  			if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  				DataTimestamp tsbuff = report [idx].EndTimestamp;  				report [idx].EndTimestamp = report [idx].StartTimestamp;  				report [idx].StartTimestamp = tsbuff;  			}  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  				report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  				report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < packetCount; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  		TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  			//modified by SN on 2013.04.30  			//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  			if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  				report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  			//si el start es mayor que el end' se dan vuelta  			if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  				DataTimestamp tsbuff = report [idx].EndTimestamp;  				report [idx].EndTimestamp = report [idx].StartTimestamp;  				report [idx].StartTimestamp = tsbuff;  			}  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  				report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  				report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < packetCount; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  		TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  			//modified by SN on 2013.04.30  			//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  			if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  				report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  			//si el start es mayor que el end' se dan vuelta  			if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  				DataTimestamp tsbuff = report [idx].EndTimestamp;  				report [idx].EndTimestamp = report [idx].StartTimestamp;  				report [idx].StartTimestamp = tsbuff;  			}  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  				report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  				report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < packetCount; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  		TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  			//modified by SN on 2013.04.30  			//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  			if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  				report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  			//si el start es mayor que el end' se dan vuelta  			if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  				DataTimestamp tsbuff = report [idx].EndTimestamp;  				report [idx].EndTimestamp = report [idx].StartTimestamp;  				report [idx].StartTimestamp = tsbuff;  			}  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  				report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  				report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < packetCount; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  		TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  			//modified by SN on 2013.04.30  			//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  			if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  				report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  			//si el start es mayor que el end' se dan vuelta  			if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  				DataTimestamp tsbuff = report [idx].EndTimestamp;  				report [idx].EndTimestamp = report [idx].StartTimestamp;  				report [idx].StartTimestamp = tsbuff;  			}  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  				report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  				report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < packetCount; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  		TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  			//modified by SN on 2013.04.30  			//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  			if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  				report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  			//si el start es mayor que el end' se dan vuelta  			if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  				DataTimestamp tsbuff = report [idx].EndTimestamp;  				report [idx].EndTimestamp = report [idx].StartTimestamp;  				report [idx].StartTimestamp = tsbuff;  			}  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  				report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  				report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < packetCount; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  		TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  			//modified by SN on 2013.04.30  			//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  			if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  				report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  			//si el start es mayor que el end' se dan vuelta  			if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  				DataTimestamp tsbuff = report [idx].EndTimestamp;  				report [idx].EndTimestamp = report [idx].StartTimestamp;  				report [idx].StartTimestamp = tsbuff;  			}  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  				report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  				report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < packetCount; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  		TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  			//modified by SN on 2013.04.30  			//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  			if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  				report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  			//si el start es mayor que el end' se dan vuelta  			if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  				DataTimestamp tsbuff = report [idx].EndTimestamp;  				report [idx].EndTimestamp = report [idx].StartTimestamp;  				report [idx].StartTimestamp = tsbuff;  			}  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  				report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  				report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < packetCount; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  		TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  			//modified by SN on 2013.04.30  			//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  			if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  				report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  			//si el start es mayor que el end' se dan vuelta  			if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  				DataTimestamp tsbuff = report [idx].EndTimestamp;  				report [idx].EndTimestamp = report [idx].StartTimestamp;  				report [idx].StartTimestamp = tsbuff;  			}  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  				report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  				report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < packetCount; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  		TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  			//modified by SN on 2013.04.30  			//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  			if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  				report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  			//si el start es mayor que el end' se dan vuelta  			if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  				DataTimestamp tsbuff = report [idx].EndTimestamp;  				report [idx].EndTimestamp = report [idx].StartTimestamp;  				report [idx].StartTimestamp = tsbuff;  			}  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  				report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  				report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < packetCount; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  		TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  			//modified by SN on 2013.04.30  			//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  			if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  				report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  			//si el start es mayor que el end' se dan vuelta  			if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  				DataTimestamp tsbuff = report [idx].EndTimestamp;  				report [idx].EndTimestamp = report [idx].StartTimestamp;  				report [idx].StartTimestamp = tsbuff;  			}  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  				report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  				report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < packetCount; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  		TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  			//modified by SN on 2013.04.30  			//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  			if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  				report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  			//si el start es mayor que el end' se dan vuelta  			if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  				DataTimestamp tsbuff = report [idx].EndTimestamp;  				report [idx].EndTimestamp = report [idx].StartTimestamp;  				report [idx].StartTimestamp = tsbuff;  			}  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  				report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  				report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < packetCount; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  		TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  			//modified by SN on 2013.04.30  			//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  			if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  				report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  			//si el start es mayor que el end' se dan vuelta  			if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  				DataTimestamp tsbuff = report [idx].EndTimestamp;  				report [idx].EndTimestamp = report [idx].StartTimestamp;  				report [idx].StartTimestamp = tsbuff;  			}  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  				report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  				report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < packetCount; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  		TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  			//modified by SN on 2013.04.30  			//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  			if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  				report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  			//si el start es mayor que el end' se dan vuelta  			if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  				DataTimestamp tsbuff = report [idx].EndTimestamp;  				report [idx].EndTimestamp = report [idx].StartTimestamp;  				report [idx].StartTimestamp = tsbuff;  			}  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  				report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  				report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < packetCount; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  		TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  			//modified by SN on 2013.04.30  			//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  			if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  				report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  			//si el start es mayor que el end' se dan vuelta  			if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  				DataTimestamp tsbuff = report [idx].EndTimestamp;  				report [idx].EndTimestamp = report [idx].StartTimestamp;  				report [idx].StartTimestamp = tsbuff;  			}  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  				report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  				report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < packetCount; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  		TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  			//modified by SN on 2013.04.30  			//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  			if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  				report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  			//si el start es mayor que el end' se dan vuelta  			if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  				DataTimestamp tsbuff = report [idx].EndTimestamp;  				report [idx].EndTimestamp = report [idx].StartTimestamp;  				report [idx].StartTimestamp = tsbuff;  			}  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  				report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  				report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < packetCount; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  		TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  			//modified by SN on 2013.04.30  			//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  			if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  				report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  			//si el start es mayor que el end' se dan vuelta  			if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  				DataTimestamp tsbuff = report [idx].EndTimestamp;  				report [idx].EndTimestamp = report [idx].StartTimestamp;  				report [idx].StartTimestamp = tsbuff;  			}  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  				report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  				report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < packetCount; idx++) {  	try {  		report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  		TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  			report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  			reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  			//modified by SN on 2013.04.30  			//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  			if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  				report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  			//si el start es mayor que el end' se dan vuelta  			if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  				DataTimestamp tsbuff = report [idx].EndTimestamp;  				report [idx].EndTimestamp = report [idx].StartTimestamp;  				report [idx].StartTimestamp = tsbuff;  			}  			if (reslt == TSDParseResult.ParseOK) {  				report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  				report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  				//the flags  				report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  				report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  				report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  				report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  				report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  				report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  				report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  				report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  				report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  				report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  				report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  				report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  			}  			else {  				report [idx] = null;  			}  		}  		else {  			report [idx] = null;  		}  	}  	catch (Exception) {  		report [idx] = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  	TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  		//modified by SN on 2013.04.30  		//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  		if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  			report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  		//si el start es mayor que el end' se dan vuelta  		if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  			DataTimestamp tsbuff = report [idx].EndTimestamp;  			report [idx].EndTimestamp = report [idx].StartTimestamp;  			report [idx].StartTimestamp = tsbuff;  		}  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  			report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  			report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  	TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  		//modified by SN on 2013.04.30  		//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  		if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  			report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  		//si el start es mayor que el end' se dan vuelta  		if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  			DataTimestamp tsbuff = report [idx].EndTimestamp;  			report [idx].EndTimestamp = report [idx].StartTimestamp;  			report [idx].StartTimestamp = tsbuff;  		}  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  			report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  			report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  	TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  		//modified by SN on 2013.04.30  		//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  		if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  			report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  		//si el start es mayor que el end' se dan vuelta  		if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  			DataTimestamp tsbuff = report [idx].EndTimestamp;  			report [idx].EndTimestamp = report [idx].StartTimestamp;  			report [idx].StartTimestamp = tsbuff;  		}  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  			report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  			report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  	TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  		//modified by SN on 2013.04.30  		//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  		if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  			report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  		//si el start es mayor que el end' se dan vuelta  		if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  			DataTimestamp tsbuff = report [idx].EndTimestamp;  			report [idx].EndTimestamp = report [idx].StartTimestamp;  			report [idx].StartTimestamp = tsbuff;  		}  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  			report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  			report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  	TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  		//modified by SN on 2013.04.30  		//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  		if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  			report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  		//si el start es mayor que el end' se dan vuelta  		if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  			DataTimestamp tsbuff = report [idx].EndTimestamp;  			report [idx].EndTimestamp = report [idx].StartTimestamp;  			report [idx].StartTimestamp = tsbuff;  		}  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  			report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  			report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  	TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  		//modified by SN on 2013.04.30  		//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  		if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  			report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  		//si el start es mayor que el end' se dan vuelta  		if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  			DataTimestamp tsbuff = report [idx].EndTimestamp;  			report [idx].EndTimestamp = report [idx].StartTimestamp;  			report [idx].StartTimestamp = tsbuff;  		}  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  			report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  			report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  	TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  		//modified by SN on 2013.04.30  		//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  		if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  			report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  		//si el start es mayor que el end' se dan vuelta  		if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  			DataTimestamp tsbuff = report [idx].EndTimestamp;  			report [idx].EndTimestamp = report [idx].StartTimestamp;  			report [idx].StartTimestamp = tsbuff;  		}  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  			report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  			report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  	TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  		//modified by SN on 2013.04.30  		//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  		if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  			report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  		//si el start es mayor que el end' se dan vuelta  		if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  			DataTimestamp tsbuff = report [idx].EndTimestamp;  			report [idx].EndTimestamp = report [idx].StartTimestamp;  			report [idx].StartTimestamp = tsbuff;  		}  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  			report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  			report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  	TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  		//modified by SN on 2013.04.30  		//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  		if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  			report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  		//si el start es mayor que el end' se dan vuelta  		if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  			DataTimestamp tsbuff = report [idx].EndTimestamp;  			report [idx].EndTimestamp = report [idx].StartTimestamp;  			report [idx].StartTimestamp = tsbuff;  		}  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  			report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  			report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  	TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  		//modified by SN on 2013.04.30  		//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  		if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  			report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  		//si el start es mayor que el end' se dan vuelta  		if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  			DataTimestamp tsbuff = report [idx].EndTimestamp;  			report [idx].EndTimestamp = report [idx].StartTimestamp;  			report [idx].StartTimestamp = tsbuff;  		}  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  			report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  			report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  	TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  		//modified by SN on 2013.04.30  		//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  		if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  			report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  		//si el start es mayor que el end' se dan vuelta  		if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  			DataTimestamp tsbuff = report [idx].EndTimestamp;  			report [idx].EndTimestamp = report [idx].StartTimestamp;  			report [idx].StartTimestamp = tsbuff;  		}  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  			report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  			report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  	TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  		//modified by SN on 2013.04.30  		//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  		if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  			report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  		//si el start es mayor que el end' se dan vuelta  		if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  			DataTimestamp tsbuff = report [idx].EndTimestamp;  			report [idx].EndTimestamp = report [idx].StartTimestamp;  			report [idx].StartTimestamp = tsbuff;  		}  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  			report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  			report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  	TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  		//modified by SN on 2013.04.30  		//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  		if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  			report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  		//si el start es mayor que el end' se dan vuelta  		if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  			DataTimestamp tsbuff = report [idx].EndTimestamp;  			report [idx].EndTimestamp = report [idx].StartTimestamp;  			report [idx].StartTimestamp = tsbuff;  		}  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  			report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  			report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  	TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  		//modified by SN on 2013.04.30  		//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  		if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  			report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  		//si el start es mayor que el end' se dan vuelta  		if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  			DataTimestamp tsbuff = report [idx].EndTimestamp;  			report [idx].EndTimestamp = report [idx].StartTimestamp;  			report [idx].StartTimestamp = tsbuff;  		}  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  			report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  			report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  	TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  		//modified by SN on 2013.04.30  		//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  		if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  			report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  		//si el start es mayor que el end' se dan vuelta  		if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  			DataTimestamp tsbuff = report [idx].EndTimestamp;  			report [idx].EndTimestamp = report [idx].StartTimestamp;  			report [idx].StartTimestamp = tsbuff;  		}  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  			report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  			report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  	TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  		//modified by SN on 2013.04.30  		//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  		if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  			report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  		//si el start es mayor que el end' se dan vuelta  		if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  			DataTimestamp tsbuff = report [idx].EndTimestamp;  			report [idx].EndTimestamp = report [idx].StartTimestamp;  			report [idx].StartTimestamp = tsbuff;  		}  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  			report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  			report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  	TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  		//modified by SN on 2013.04.30  		//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  		if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  			report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  		//si el start es mayor que el end' se dan vuelta  		if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  			DataTimestamp tsbuff = report [idx].EndTimestamp;  			report [idx].EndTimestamp = report [idx].StartTimestamp;  			report [idx].StartTimestamp = tsbuff;  		}  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  			report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  			report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  	TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  		//modified by SN on 2013.04.30  		//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  		if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  			report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  		//si el start es mayor que el end' se dan vuelta  		if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  			DataTimestamp tsbuff = report [idx].EndTimestamp;  			report [idx].EndTimestamp = report [idx].StartTimestamp;  			report [idx].StartTimestamp = tsbuff;  		}  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  			report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  			report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  	TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  		//modified by SN on 2013.04.30  		//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  		if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  			report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  		//si el start es mayor que el end' se dan vuelta  		if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  			DataTimestamp tsbuff = report [idx].EndTimestamp;  			report [idx].EndTimestamp = report [idx].StartTimestamp;  			report [idx].StartTimestamp = tsbuff;  		}  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  			report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  			report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  	TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  		//modified by SN on 2013.04.30  		//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  		if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  			report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  		//si el start es mayor que el end' se dan vuelta  		if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  			DataTimestamp tsbuff = report [idx].EndTimestamp;  			report [idx].EndTimestamp = report [idx].StartTimestamp;  			report [idx].StartTimestamp = tsbuff;  		}  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  			report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  			report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  	TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  		//modified by SN on 2013.04.30  		//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  		if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  			report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  		//si el start es mayor que el end' se dan vuelta  		if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  			DataTimestamp tsbuff = report [idx].EndTimestamp;  			report [idx].EndTimestamp = report [idx].StartTimestamp;  			report [idx].StartTimestamp = tsbuff;  		}  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  			report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  			report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	report [idx] = new TsdCammesa8EnergyRecordsWithStart ();  	TSDParseResult reslt = report [idx].StartTimestamp.Parse (data' 0 + (RECORDLENGTH * idx));  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  		report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  		reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  		//modified by SN on 2013.04.30  		//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  		if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  			report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  		//si el start es mayor que el end' se dan vuelta  		if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  			DataTimestamp tsbuff = report [idx].EndTimestamp;  			report [idx].EndTimestamp = report [idx].StartTimestamp;  			report [idx].StartTimestamp = tsbuff;  		}  		if (reslt == TSDParseResult.ParseOK) {  			report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  			report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  			//the flags  			report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  			report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  			report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  			report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  			report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  			report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  			report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  			report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  			report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  			report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  			report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  			report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  		}  		else {  			report [idx] = null;  		}  	}  	else {  		report [idx] = null;  	}  }  catch (Exception) {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  	//modified by SN on 2013.04.30  	//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  	if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  		report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  	//si el start es mayor que el end' se dan vuelta  	if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  		DataTimestamp tsbuff = report [idx].EndTimestamp;  		report [idx].EndTimestamp = report [idx].StartTimestamp;  		report [idx].StartTimestamp = tsbuff;  	}  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  		report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  		report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  	//modified by SN on 2013.04.30  	//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  	if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  		report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  	//si el start es mayor que el end' se dan vuelta  	if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  		DataTimestamp tsbuff = report [idx].EndTimestamp;  		report [idx].EndTimestamp = report [idx].StartTimestamp;  		report [idx].StartTimestamp = tsbuff;  	}  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  		report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  		report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  	//modified by SN on 2013.04.30  	//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  	if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  		report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  	//si el start es mayor que el end' se dan vuelta  	if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  		DataTimestamp tsbuff = report [idx].EndTimestamp;  		report [idx].EndTimestamp = report [idx].StartTimestamp;  		report [idx].StartTimestamp = tsbuff;  	}  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  		report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  		report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  	//modified by SN on 2013.04.30  	//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  	if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  		report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  	//si el start es mayor que el end' se dan vuelta  	if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  		DataTimestamp tsbuff = report [idx].EndTimestamp;  		report [idx].EndTimestamp = report [idx].StartTimestamp;  		report [idx].StartTimestamp = tsbuff;  	}  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  		report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  		report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  	//modified by SN on 2013.04.30  	//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  	if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  		report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  	//si el start es mayor que el end' se dan vuelta  	if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  		DataTimestamp tsbuff = report [idx].EndTimestamp;  		report [idx].EndTimestamp = report [idx].StartTimestamp;  		report [idx].StartTimestamp = tsbuff;  	}  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  		report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  		report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  	//modified by SN on 2013.04.30  	//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  	if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  		report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  	//si el start es mayor que el end' se dan vuelta  	if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  		DataTimestamp tsbuff = report [idx].EndTimestamp;  		report [idx].EndTimestamp = report [idx].StartTimestamp;  		report [idx].StartTimestamp = tsbuff;  	}  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  		report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  		report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  	//modified by SN on 2013.04.30  	//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  	if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  		report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  	//si el start es mayor que el end' se dan vuelta  	if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  		DataTimestamp tsbuff = report [idx].EndTimestamp;  		report [idx].EndTimestamp = report [idx].StartTimestamp;  		report [idx].StartTimestamp = tsbuff;  	}  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  		report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  		report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  	//modified by SN on 2013.04.30  	//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  	if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  		report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  	//si el start es mayor que el end' se dan vuelta  	if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  		DataTimestamp tsbuff = report [idx].EndTimestamp;  		report [idx].EndTimestamp = report [idx].StartTimestamp;  		report [idx].StartTimestamp = tsbuff;  	}  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  		report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  		report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  	//modified by SN on 2013.04.30  	//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  	if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  		report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  	//si el start es mayor que el end' se dan vuelta  	if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  		DataTimestamp tsbuff = report [idx].EndTimestamp;  		report [idx].EndTimestamp = report [idx].StartTimestamp;  		report [idx].StartTimestamp = tsbuff;  	}  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  		report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  		report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  	//modified by SN on 2013.04.30  	//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  	if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  		report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  	//si el start es mayor que el end' se dan vuelta  	if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  		DataTimestamp tsbuff = report [idx].EndTimestamp;  		report [idx].EndTimestamp = report [idx].StartTimestamp;  		report [idx].StartTimestamp = tsbuff;  	}  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  		report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  		report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  	//modified by SN on 2013.04.30  	//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  	if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  		report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  	//si el start es mayor que el end' se dan vuelta  	if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  		DataTimestamp tsbuff = report [idx].EndTimestamp;  		report [idx].EndTimestamp = report [idx].StartTimestamp;  		report [idx].StartTimestamp = tsbuff;  	}  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  		report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  		report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  	//modified by SN on 2013.04.30  	//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  	if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  		report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  	//si el start es mayor que el end' se dan vuelta  	if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  		DataTimestamp tsbuff = report [idx].EndTimestamp;  		report [idx].EndTimestamp = report [idx].StartTimestamp;  		report [idx].StartTimestamp = tsbuff;  	}  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  		report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  		report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  	//modified by SN on 2013.04.30  	//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  	if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  		report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  	//si el start es mayor que el end' se dan vuelta  	if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  		DataTimestamp tsbuff = report [idx].EndTimestamp;  		report [idx].EndTimestamp = report [idx].StartTimestamp;  		report [idx].StartTimestamp = tsbuff;  	}  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  		report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  		report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  	//modified by SN on 2013.04.30  	//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  	if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  		report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  	//si el start es mayor que el end' se dan vuelta  	if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  		DataTimestamp tsbuff = report [idx].EndTimestamp;  		report [idx].EndTimestamp = report [idx].StartTimestamp;  		report [idx].StartTimestamp = tsbuff;  	}  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  		report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  		report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  	//modified by SN on 2013.04.30  	//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  	if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  		report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  	//si el start es mayor que el end' se dan vuelta  	if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  		DataTimestamp tsbuff = report [idx].EndTimestamp;  		report [idx].EndTimestamp = report [idx].StartTimestamp;  		report [idx].StartTimestamp = tsbuff;  	}  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  		report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  		report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  	//modified by SN on 2013.04.30  	//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  	if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  		report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  	//si el start es mayor que el end' se dan vuelta  	if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  		DataTimestamp tsbuff = report [idx].EndTimestamp;  		report [idx].EndTimestamp = report [idx].StartTimestamp;  		report [idx].StartTimestamp = tsbuff;  	}  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  		report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  		report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  	//modified by SN on 2013.04.30  	//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  	if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  		report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  	//si el start es mayor que el end' se dan vuelta  	if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  		DataTimestamp tsbuff = report [idx].EndTimestamp;  		report [idx].EndTimestamp = report [idx].StartTimestamp;  		report [idx].StartTimestamp = tsbuff;  	}  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  		report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  		report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  	//modified by SN on 2013.04.30  	//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  	if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  		report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  	//si el start es mayor que el end' se dan vuelta  	if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  		DataTimestamp tsbuff = report [idx].EndTimestamp;  		report [idx].EndTimestamp = report [idx].StartTimestamp;  		report [idx].StartTimestamp = tsbuff;  	}  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  		report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  		report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  	//modified by SN on 2013.04.30  	//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  	if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  		report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  	//si el start es mayor que el end' se dan vuelta  	if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  		DataTimestamp tsbuff = report [idx].EndTimestamp;  		report [idx].EndTimestamp = report [idx].StartTimestamp;  		report [idx].StartTimestamp = tsbuff;  	}  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  		report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  		report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  	//modified by SN on 2013.04.30  	//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  	if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  		report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  	//si el start es mayor que el end' se dan vuelta  	if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  		DataTimestamp tsbuff = report [idx].EndTimestamp;  		report [idx].EndTimestamp = report [idx].StartTimestamp;  		report [idx].StartTimestamp = tsbuff;  	}  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  		report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  		report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  	//modified by SN on 2013.04.30  	//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  	if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  		report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  	//si el start es mayor que el end' se dan vuelta  	if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  		DataTimestamp tsbuff = report [idx].EndTimestamp;  		report [idx].EndTimestamp = report [idx].StartTimestamp;  		report [idx].StartTimestamp = tsbuff;  	}  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  		report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  		report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  	report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  	reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  	//modified by SN on 2013.04.30  	//algunos reportes se mandan con los datos invertidos en el record start' otra configuracion.  	if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  		report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  	//si el start es mayor que el end' se dan vuelta  	if (report [idx].EndTimestamp.ToDateTime < report [idx].StartTimestamp.ToDateTime) {  		DataTimestamp tsbuff = report [idx].EndTimestamp;  		report [idx].EndTimestamp = report [idx].StartTimestamp;  		report [idx].StartTimestamp = tsbuff;  	}  	if (reslt == TSDParseResult.ParseOK) {  		report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  		report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  		//the flags  		report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  		report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  		report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  		report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  		report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  		report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  		report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  		report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  		report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  		report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  		report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  		report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  	}  	else {  		report [idx] = null;  	}  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Counter0 = Convert.ToUInt32 ((data [4 + (RECORDLENGTH * idx)] * 16777216) + (data [5 + (RECORDLENGTH * idx)] * 65536) + (data [6 + (RECORDLENGTH * idx)] * 256) + data [7 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Counter1 = Convert.ToUInt32 ((data [8 + (RECORDLENGTH * idx)] * 16777216) + (data [9 + (RECORDLENGTH * idx)] * 65536) + (data [10 + (RECORDLENGTH * idx)] * 256) + data [11 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: reslt = report [idx].EndTimestamp.Parse (data' 12 + (RECORDLENGTH * idx));  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (Math.Abs ((report [idx].EndTimestamp.ToDateTime - report [idx].StartTimestamp.ToDateTime).TotalMinutes) > 20)  	report [idx].StartTimestamp.ParseInverted (data' 0 + (RECORDLENGTH * idx));  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  	report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  	//the flags  	report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  	report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  	report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  	report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  	report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  	report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  	report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  	report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  	report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  	report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  	report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  	report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  	report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  	//the flags  	report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  	report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  	report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  	report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  	report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  	report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  	report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  	report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  	report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  	report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  	report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  	report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  	report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  	//the flags  	report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  	report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  	report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  	report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  	report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  	report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  	report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  	report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  	report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  	report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  	report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  	report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  	report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  	//the flags  	report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  	report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  	report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  	report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  	report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  	report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  	report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  	report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  	report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  	report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  	report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  	report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  	report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  	//the flags  	report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  	report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  	report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  	report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  	report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  	report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  	report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  	report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  	report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  	report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  	report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  	report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  	report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  	//the flags  	report [idx].HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (report [idx].Flags & 0x8000);  	report [idx].HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (report [idx].Flags & 0x4000);  	report [idx].HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x2000);  	report [idx].HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (report [idx].Flags & 0x1000);  	report [idx].HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0800);  	report [idx].HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0400);  	report [idx].ENERGY_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0200);  	report [idx].FLASH_FAIL = Convert.ToBoolean (report [idx].Flags & 0x0100);  	report [idx].DUPLICATE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0080);  	report [idx].FORCE_CLOSE_FLAG = Convert.ToBoolean (report [idx].Flags & 0x0040);  	report [idx].INVALID_START = Convert.ToBoolean (report [idx].Flags & 0x0020);  	report [idx].HISTORY_SEND_RECORD = Convert.ToBoolean (report [idx].Flags & 0x0001);  }  else {  	report [idx] = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Flags = Convert.ToUInt16 ((data [16 + (RECORDLENGTH * idx)] * 256) + data [17 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesa8EnergyRecordsWithStart,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: report [idx].Reserved = Convert.ToUInt16 ((data [18 + (RECORDLENGTH * idx)] * 256) + data [19 + (RECORDLENGTH * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: for (int idx = 0; idx < (data.Length / 16); idx++) {  	try {  		TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  		TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  		if (reslt == TSDParseResult.ParseOK) {  			record.SITE = site;  			record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  			record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  			record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  			record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  			//the flags  			record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  			record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  			record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  			record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  			record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  			record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  			record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  			record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  			record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  			record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  			record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  			record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  			record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  			result.Add (record);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: try {  	TsdCammesaOrigEnergyRecords record = new TsdCammesaOrigEnergyRecords ();  	TSDParseResult reslt = record.EndTimestamp.Parse (data' 0 + (16 * idx));  	if (reslt == TSDParseResult.ParseOK) {  		record.SITE = site;  		record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  		record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  		record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  		record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  		//the flags  		record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  		record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  		record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  		record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  		record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  		record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  		record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  		record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  		record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  		record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  		record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  		record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  		record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  		result.Add (record);  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	record.SITE = site;  	record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  	record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  	record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  	record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  	//the flags  	record.HISTORY_ROLLOVER0_FLAG = Convert.ToBoolean (record.Flags & 0x8000);  	record.HISTORY_ROLLOVER1_FLAG = Convert.ToBoolean (record.Flags & 0x4000);  	record.HISTORY_KYZ0_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x2000);  	record.HISTORY_KYZ1_ERROR_FLAG = Convert.ToBoolean (record.Flags & 0x1000);  	record.HISTORY_SYS_STARTUP_FLAG = Convert.ToBoolean (record.Flags & 0x0800);  	record.HISTORY_RTC_CHANGE_FLAG = Convert.ToBoolean (record.Flags & 0x0400);  	record.CFG_RESTORE = Convert.ToBoolean (record.Flags & 0x0020);  	record.FULL_FLASH_ERASE = Convert.ToBoolean (record.Flags & 0x0010);  	record.ENERGY_FAIL = Convert.ToBoolean (record.Flags & 0x0008);  	record.FLASH_FAIL = Convert.ToBoolean (record.Flags & 0x0004);  	record.HISTORY_FAIL = Convert.ToBoolean (record.Flags & 0x0002);  	record.HISTORY_SEND_RECORD = Convert.ToBoolean (record.Flags & 0x0001);  	record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  	result.Add (record);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.Counter1 = Convert.ToUInt32 ((data [4 + (16 * idx)] * 16777216) + (data [5 + (16 * idx)] * 65536) + (data [6 + (16 * idx)] * 256) + data [7 + (16 * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.Counter2 = Convert.ToUInt32 ((data [8 + (16 * idx)] * 16777216) + (data [9 + (16 * idx)] * 65536) + (data [10 + (16 * idx)] * 256) + data [11 + (16 * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.Flags = Convert.ToUInt16 ((data [12 + (16 * idx)] * 256) + data [13 + (16 * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.Reserved = Convert.ToUInt16 ((data [14 + (16 * idx)] * 256) + data [15 + (16 * idx)]);  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,Parse,The following statement contains a magic number: record.StartTimestamp = new DataTimestamp (record.EndTimestamp.ToDateTime.AddMinutes (-15));  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,CalculateRelative,The following statement contains a magic number: for (int i = 1; i < result.Count; i++) {  	double diff = result [i].EndTimestamp.ToUnixTimestamp () - result [i - 1].EndTimestamp.ToUnixTimestamp ();  	if (diff <= (60 * minutesToCalc)) {  		//set the start timestamp to the last end...  		result [i].StartTimestamp = result [i - 1].EndTimestamp;  		//do not calculate if any counter is less than the previous  		if (result [i].Counter1 < result [i - 1].Counter1) {  			result [i].RelCounter1 = result [i].Counter1;  			result [i].CalcCounter1 = true;  		}  		else {  			try {  				result [i].RelCounter1 = result [i].Counter1 - result [i - 1].Counter1;  				result [i].CalcCounter1 = true;  			}  			catch (Exception) {  			}  		}  		if (result [i].Counter2 < result [i - 1].Counter2) {  			result [i].RelCounter1 = result [i].Counter1;  			result [i].CalcCounter1 = true;  		}  		else {  			try {  				result [i].RelCounter2 = result [i].Counter2 - result [i - 1].Counter2;  				result [i].CalcCounter2 = true;  			}  			catch (Exception) {  			}  		}  	}  	//if there is a adjusted time flag' do not calculate any more data..  	if (result [i].HISTORY_RTC_CHANGE_FLAG)  		break;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD.Cammesa,TsdCammesaOrigEnergyRecords,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\Cammesa\TsdCammesaReportPacket.cs,CalculateRelative,The following statement contains a magic number: if (diff <= (60 * minutesToCalc)) {  	//set the start timestamp to the last end...  	result [i].StartTimestamp = result [i - 1].EndTimestamp;  	//do not calculate if any counter is less than the previous  	if (result [i].Counter1 < result [i - 1].Counter1) {  		result [i].RelCounter1 = result [i].Counter1;  		result [i].CalcCounter1 = true;  	}  	else {  		try {  			result [i].RelCounter1 = result [i].Counter1 - result [i - 1].Counter1;  			result [i].CalcCounter1 = true;  		}  		catch (Exception) {  		}  	}  	if (result [i].Counter2 < result [i - 1].Counter2) {  		result [i].RelCounter1 = result [i].Counter1;  		result [i].CalcCounter1 = true;  	}  	else {  		try {  			result [i].RelCounter2 = result [i].Counter2 - result [i - 1].Counter2;  			result [i].CalcCounter2 = true;  		}  		catch (Exception) {  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TsdConfigurationPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdConfigurationProtocol.cs,TsdConfigurationPacket,The following statement contains a magic number: try {  	Destination = Convert.ToUInt16 (data [0] * 256 + data [1]);  	buffer = new byte[data.Length - 2];  	for (int i = 2' j = 0; i < data.Length; i++' j++)  		buffer [j] = data [i];  }  catch (Exception) {  	Destination = 0;  	buffer = new byte[1];  	buffer [0] = 0;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TsdConfigurationPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdConfigurationProtocol.cs,TsdConfigurationPacket,The following statement contains a magic number: try {  	Destination = Convert.ToUInt16 (data [0] * 256 + data [1]);  	buffer = new byte[data.Length - 2];  	for (int i = 2' j = 0; i < data.Length; i++' j++)  		buffer [j] = data [i];  }  catch (Exception) {  	Destination = 0;  	buffer = new byte[1];  	buffer [0] = 0;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TsdConfigurationPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdConfigurationProtocol.cs,TsdConfigurationPacket,The following statement contains a magic number: try {  	Destination = Convert.ToUInt16 (data [0] * 256 + data [1]);  	buffer = new byte[data.Length - 2];  	for (int i = 2' j = 0; i < data.Length; i++' j++)  		buffer [j] = data [i];  }  catch (Exception) {  	Destination = 0;  	buffer = new byte[1];  	buffer [0] = 0;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TsdConfigurationPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdConfigurationProtocol.cs,TsdConfigurationPacket,The following statement contains a magic number: Destination = Convert.ToUInt16 (data [0] * 256 + data [1]);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TsdConfigurationPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdConfigurationProtocol.cs,TsdConfigurationPacket,The following statement contains a magic number: buffer = new byte[data.Length - 2];  
Magic Number,net.Tesacom.TsdProtocol.TSD,TsdConfigurationPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdConfigurationProtocol.cs,TsdConfigurationPacket,The following statement contains a magic number: for (int i = 2' j = 0; i < data.Length; i++' j++)  	buffer [j] = data [i];  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBaseCRC,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,getCRC,The following statement contains a magic number: return Convert.ToUInt16 (b [GetSize () - 2] * 256 + b [GetSize () - 1]);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBaseCRC,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,getCRC,The following statement contains a magic number: return Convert.ToUInt16 (b [GetSize () - 2] * 256 + b [GetSize () - 1]);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBaseCRC,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,getCRC,The following statement contains a magic number: for (int i = 0; i < GetSize () - 2; i++)  	b ^= buff [i];  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBaseCRC,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,getCRC,The following statement contains a magic number: for (int i = 0; i < finalIdx - 2; i++)  	b ^= buff [i];  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBaseCRC,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,setCRC,The following statement contains a magic number: buff [finalIdx - 2] = crc [0];  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBaseCRC,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,setCRC,The following statement contains a magic number: buff [GetSize () - 2] = crc [0];  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBaseCRC,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,validateCRC,The following statement contains a magic number: return validateCRC (Convert.ToUInt16 (crc1 * 256 + crc2)' buff);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBaseCRC,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,validateCRC,The following statement contains a magic number: return validateCRC (Convert.ToUInt16 (crc1 * 256 + crc2)' buff' finalIdx);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBaseCRC,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,validateCRC,The following statement contains a magic number: if (crc == vCrc [0] * 256 + vCrc [1])  	return true;  else  	return false;  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBaseCRC,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,validateCRC,The following statement contains a magic number: if (crc == vCrc [0] * 256 + vCrc [1])  	return true;  else  	return false;  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,getUInt16,The following statement contains a magic number: reslt [0] = Convert.ToUInt16 (bts [0] * 256 + bts [1]);  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,getUInt16,The following statement contains a magic number: reslt [1] = Convert.ToUInt16 (bts [2] * 256 + bts [3]);  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,getUInt16,The following statement contains a magic number: reslt [1] = Convert.ToUInt16 (bts [2] * 256 + bts [3]);  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,getUInt16,The following statement contains a magic number: reslt [1] = Convert.ToUInt16 (bts [2] * 256 + bts [3]);  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: try {  	bts [0] = buffer [idx + 3];  	bts [1] = buffer [idx + 2];  	bts [2] = buffer [idx + 1];  	bts [3] = buffer [idx + 0];  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: try {  	bts [0] = buffer [idx + 3];  	bts [1] = buffer [idx + 2];  	bts [2] = buffer [idx + 1];  	bts [3] = buffer [idx + 0];  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: try {  	bts [0] = buffer [idx + 3];  	bts [1] = buffer [idx + 2];  	bts [2] = buffer [idx + 1];  	bts [3] = buffer [idx + 0];  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: try {  	bts [0] = buffer [idx + 3];  	bts [1] = buffer [idx + 2];  	bts [2] = buffer [idx + 1];  	bts [3] = buffer [idx + 0];  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: try {  	bts [0] = buffer [idx + 3];  	bts [1] = buffer [idx + 2];  	bts [2] = buffer [idx + 1];  	bts [3] = buffer [idx + 0];  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: try {  	bts [0] = buffer [idx + 3];  	bts [1] = buffer [idx + 2];  	bts [2] = buffer [idx + 1];  	bts [3] = buffer [idx + 0];  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: try {  	bts [0] = buffer [idx + 3];  	bts [1] = buffer [idx + 2];  	bts [2] = buffer [idx + 1];  	bts [3] = buffer [idx + 0];  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: try {  	bts [0] = buffer [idx + 3];  	bts [1] = buffer [idx + 2];  	bts [2] = buffer [idx + 1];  	bts [3] = buffer [idx + 0];  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: try {  	bts [0] = buffer [idx + 3];  	bts [1] = buffer [idx + 2];  	bts [2] = buffer [idx + 1];  	bts [3] = buffer [idx + 0];  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: try {  	bts [0] = buffer [idx + 3];  	bts [1] = buffer [idx + 2];  	bts [2] = buffer [idx + 1];  	bts [3] = buffer [idx + 0];  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: try {  	bts [0] = buffer [idx + 3];  	bts [1] = buffer [idx + 2];  	bts [2] = buffer [idx + 1];  	bts [3] = buffer [idx + 0];  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: try {  	bts [0] = buffer [idx + 3];  	bts [1] = buffer [idx + 2];  	bts [2] = buffer [idx + 1];  	bts [3] = buffer [idx + 0];  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: try {  	bts [0] = buffer [idx + 3];  	bts [1] = buffer [idx + 2];  	bts [2] = buffer [idx + 1];  	bts [3] = buffer [idx + 0];  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: try {  	bts [0] = buffer [idx + 3];  	bts [1] = buffer [idx + 2];  	bts [2] = buffer [idx + 1];  	bts [3] = buffer [idx + 0];  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: try {  	bts [0] = buffer [idx + 3];  	bts [1] = buffer [idx + 2];  	bts [2] = buffer [idx + 1];  	bts [3] = buffer [idx + 0];  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: try {  	bts [0] = buffer [idx + 3];  	bts [1] = buffer [idx + 2];  	bts [2] = buffer [idx + 1];  	bts [3] = buffer [idx + 0];  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: try {  	bts [0] = buffer [idx + 3];  	bts [1] = buffer [idx + 2];  	bts [2] = buffer [idx + 1];  	bts [3] = buffer [idx + 0];  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: try {  	bts [0] = buffer [idx + 3];  	bts [1] = buffer [idx + 2];  	bts [2] = buffer [idx + 1];  	bts [3] = buffer [idx + 0];  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: bts [0] = buffer [idx + 3];  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: bts [1] = buffer [idx + 2];  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: bts [2] = buffer [idx + 1];  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: bts [3] = buffer [idx + 0];  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  	return result;  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  	return result;  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: ts = ts.AddYears ((int)stream.GetUint (idx' 6));  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: idx += 6;  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: idx += 4;  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: idx += 5;  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: ts = ts.AddHours ((int)stream.GetUint (idx' 5));  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: idx += 5;  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: idx += 6;  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ParseInverted,The following statement contains a magic number: idx += 6;  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: try {  	for (int i = 0; i < 4; i++) {  		bts [i] = buffer [idx + i];  	}  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: try {  	for (int i = 0; i < 4; i++) {  		bts [i] = buffer [idx + i];  	}  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: try {  	for (int i = 0; i < 4; i++) {  		bts [i] = buffer [idx + i];  	}  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: try {  	for (int i = 0; i < 4; i++) {  		bts [i] = buffer [idx + i];  	}  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: try {  	for (int i = 0; i < 4; i++) {  		bts [i] = buffer [idx + i];  	}  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: try {  	for (int i = 0; i < 4; i++) {  		bts [i] = buffer [idx + i];  	}  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: try {  	for (int i = 0; i < 4; i++) {  		bts [i] = buffer [idx + i];  	}  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: try {  	for (int i = 0; i < 4; i++) {  		bts [i] = buffer [idx + i];  	}  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: try {  	for (int i = 0; i < 4; i++) {  		bts [i] = buffer [idx + i];  	}  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: try {  	for (int i = 0; i < 4; i++) {  		bts [i] = buffer [idx + i];  	}  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: try {  	for (int i = 0; i < 4; i++) {  		bts [i] = buffer [idx + i];  	}  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: try {  	for (int i = 0; i < 4; i++) {  		bts [i] = buffer [idx + i];  	}  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: try {  	for (int i = 0; i < 4; i++) {  		bts [i] = buffer [idx + i];  	}  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: try {  	for (int i = 0; i < 4; i++) {  		bts [i] = buffer [idx + i];  	}  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: try {  	for (int i = 0; i < 4; i++) {  		bts [i] = buffer [idx + i];  	}  	if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  		return result;  	BitStream stream = new BitStream (bts);  	ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	idx = 0;  	ts = ts.AddYears ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  	idx += 4;  	ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  	idx += 5;  	ts = ts.AddHours ((int)stream.GetUint (idx' 5));  	idx += 5;  	ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  	idx += 6;  	ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  	idx += 6;  	result = TSDParseResult.ParseOK;  }  catch (Exception) {  	result = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	bts [i] = buffer [idx + i];  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  	return result;  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if (bts [0] == 0xFF && bts [1] == 0xFF && bts [2] == 0xFF && bts [3] == 0xFF)  	return result;  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: ts = ts.AddYears ((int)stream.GetUint (idx' 6));  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: idx += 6;  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: ts = ts.AddMonths ((int)stream.GetUint (idx' 4) - 1);  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: idx += 4;  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: ts = ts.AddDays ((int)stream.GetUint (idx' 5) - 1);  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: idx += 5;  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: ts = ts.AddHours ((int)stream.GetUint (idx' 5));  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: idx += 5;  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: ts = ts.AddMinutes ((int)stream.GetUint (idx' 6));  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: idx += 6;  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: ts = ts.AddSeconds ((int)stream.GetUint (idx' 6));  
Magic Number,net.Tesacom.TsdProtocol.TSD,DataTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: idx += 6;  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,GetSize,The following statement contains a magic number: return 8;  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [0] = Convert.ToByte (ts.Year - 2000);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [2] = Convert.ToByte (ts.Day);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [3] = Convert.ToByte (ts.Hour);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [4] = Convert.ToByte (ts.Minute);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [5] = Convert.ToByte (ts.Second);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [6] = Convert.ToByte (ts.Millisecond / 256);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [6] = Convert.ToByte (ts.Millisecond / 256);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [7] = Convert.ToByte (ts.Millisecond % 256);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [7] = Convert.ToByte (ts.Millisecond % 256);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: try {  	DateTime ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	years = Convert.ToInt16 (buff [i++]);  	if (years > 100)  		years -= 100;  	if (years == 0)  		years = 1;  	ts = ts.AddYears (years);  	ts = ts.AddMonths (Convert.ToInt16 (buff [i++] - 1));  	ts = ts.AddDays (buff [i++] - 1);  	ts = ts.AddHours (buff [i++]);  	ts = ts.AddMinutes (buff [i++]);  	ts = ts.AddSeconds (buff [i++]);  	ts = ts.AddMilliseconds (buff [i++] * 256 + buff [i++]);  	timestamp.SetTimestamp (ts);  	reslt = TSDParseResult.ParseOK;  }  catch (Exception) {  	reslt = TSDParseResult.ParseBadTimestamp;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: try {  	DateTime ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	years = Convert.ToInt16 (buff [i++]);  	if (years > 100)  		years -= 100;  	if (years == 0)  		years = 1;  	ts = ts.AddYears (years);  	ts = ts.AddMonths (Convert.ToInt16 (buff [i++] - 1));  	ts = ts.AddDays (buff [i++] - 1);  	ts = ts.AddHours (buff [i++]);  	ts = ts.AddMinutes (buff [i++]);  	ts = ts.AddSeconds (buff [i++]);  	ts = ts.AddMilliseconds (buff [i++] * 256 + buff [i++]);  	timestamp.SetTimestamp (ts);  	reslt = TSDParseResult.ParseOK;  }  catch (Exception) {  	reslt = TSDParseResult.ParseBadTimestamp;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: try {  	DateTime ts = DateTime.ParseExact (baseDateStr' baseDateformat' CultureInfo.InvariantCulture);  	years = Convert.ToInt16 (buff [i++]);  	if (years > 100)  		years -= 100;  	if (years == 0)  		years = 1;  	ts = ts.AddYears (years);  	ts = ts.AddMonths (Convert.ToInt16 (buff [i++] - 1));  	ts = ts.AddDays (buff [i++] - 1);  	ts = ts.AddHours (buff [i++]);  	ts = ts.AddMinutes (buff [i++]);  	ts = ts.AddSeconds (buff [i++]);  	ts = ts.AddMilliseconds (buff [i++] * 256 + buff [i++]);  	timestamp.SetTimestamp (ts);  	reslt = TSDParseResult.ParseOK;  }  catch (Exception) {  	reslt = TSDParseResult.ParseBadTimestamp;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if (years > 100)  	years -= 100;  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if (years > 100)  	years -= 100;  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: years -= 100;  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDTimestamp,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: ts = ts.AddMilliseconds (buff [i++] * 256 + buff [i++]);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [0] = Convert.ToByte (UnitId / 256);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [1] = Convert.ToByte (UnitId % 256);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [2] = Convert.ToByte (FuncNumber / 256);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [2] = Convert.ToByte (FuncNumber / 256);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [3] = Convert.ToByte (FuncNumber % 256);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [3] = Convert.ToByte (FuncNumber % 256);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [4] = Convert.ToByte (ProtocolVersion / 256);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [4] = Convert.ToByte (ProtocolVersion / 256);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [5] = Convert.ToByte (ProtocolVersion % 256);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [5] = Convert.ToByte (ProtocolVersion % 256);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [6] = Convert.ToByte (Reserved / 256);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [6] = Convert.ToByte (Reserved / 256);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [7] = Convert.ToByte (Reserved % 256);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [7] = Convert.ToByte (Reserved % 256);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [8] = Convert.ToByte (DataLength / 256);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [8] = Convert.ToByte (DataLength / 256);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [9] = Convert.ToByte (DataLength % 256);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [9] = Convert.ToByte (DataLength % 256);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if ((buff.Length - idx) >= header.GetSize ()) {  	header.UnitId = Convert.ToUInt16 (buff [0 + idx] * 256 + buff [1 + idx]);  	header.FuncNumber = Convert.ToUInt16 (buff [2 + idx] * 256 + buff [3 + idx]);  	header.ProtocolVersion = Convert.ToUInt16 (buff [4 + idx] * 256 + buff [5 + idx]);  	header.Reserved = Convert.ToUInt16 (buff [6 + idx] * 256 + buff [7 + idx]);  	header.DataLength = Convert.ToUInt16 (buff [8 + idx] * 256 + buff [9 + idx]);  	if (header.validateCRC (buff [10 + idx]' buff [11 + idx]' buff)) {  		header.setCRC (Convert.ToUInt16 (buff [10 + idx] * 256 + buff [11 + idx]));  		reslt = TSDParseResult.ParseOK;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if ((buff.Length - idx) >= header.GetSize ()) {  	header.UnitId = Convert.ToUInt16 (buff [0 + idx] * 256 + buff [1 + idx]);  	header.FuncNumber = Convert.ToUInt16 (buff [2 + idx] * 256 + buff [3 + idx]);  	header.ProtocolVersion = Convert.ToUInt16 (buff [4 + idx] * 256 + buff [5 + idx]);  	header.Reserved = Convert.ToUInt16 (buff [6 + idx] * 256 + buff [7 + idx]);  	header.DataLength = Convert.ToUInt16 (buff [8 + idx] * 256 + buff [9 + idx]);  	if (header.validateCRC (buff [10 + idx]' buff [11 + idx]' buff)) {  		header.setCRC (Convert.ToUInt16 (buff [10 + idx] * 256 + buff [11 + idx]));  		reslt = TSDParseResult.ParseOK;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if ((buff.Length - idx) >= header.GetSize ()) {  	header.UnitId = Convert.ToUInt16 (buff [0 + idx] * 256 + buff [1 + idx]);  	header.FuncNumber = Convert.ToUInt16 (buff [2 + idx] * 256 + buff [3 + idx]);  	header.ProtocolVersion = Convert.ToUInt16 (buff [4 + idx] * 256 + buff [5 + idx]);  	header.Reserved = Convert.ToUInt16 (buff [6 + idx] * 256 + buff [7 + idx]);  	header.DataLength = Convert.ToUInt16 (buff [8 + idx] * 256 + buff [9 + idx]);  	if (header.validateCRC (buff [10 + idx]' buff [11 + idx]' buff)) {  		header.setCRC (Convert.ToUInt16 (buff [10 + idx] * 256 + buff [11 + idx]));  		reslt = TSDParseResult.ParseOK;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if ((buff.Length - idx) >= header.GetSize ()) {  	header.UnitId = Convert.ToUInt16 (buff [0 + idx] * 256 + buff [1 + idx]);  	header.FuncNumber = Convert.ToUInt16 (buff [2 + idx] * 256 + buff [3 + idx]);  	header.ProtocolVersion = Convert.ToUInt16 (buff [4 + idx] * 256 + buff [5 + idx]);  	header.Reserved = Convert.ToUInt16 (buff [6 + idx] * 256 + buff [7 + idx]);  	header.DataLength = Convert.ToUInt16 (buff [8 + idx] * 256 + buff [9 + idx]);  	if (header.validateCRC (buff [10 + idx]' buff [11 + idx]' buff)) {  		header.setCRC (Convert.ToUInt16 (buff [10 + idx] * 256 + buff [11 + idx]));  		reslt = TSDParseResult.ParseOK;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if ((buff.Length - idx) >= header.GetSize ()) {  	header.UnitId = Convert.ToUInt16 (buff [0 + idx] * 256 + buff [1 + idx]);  	header.FuncNumber = Convert.ToUInt16 (buff [2 + idx] * 256 + buff [3 + idx]);  	header.ProtocolVersion = Convert.ToUInt16 (buff [4 + idx] * 256 + buff [5 + idx]);  	header.Reserved = Convert.ToUInt16 (buff [6 + idx] * 256 + buff [7 + idx]);  	header.DataLength = Convert.ToUInt16 (buff [8 + idx] * 256 + buff [9 + idx]);  	if (header.validateCRC (buff [10 + idx]' buff [11 + idx]' buff)) {  		header.setCRC (Convert.ToUInt16 (buff [10 + idx] * 256 + buff [11 + idx]));  		reslt = TSDParseResult.ParseOK;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if ((buff.Length - idx) >= header.GetSize ()) {  	header.UnitId = Convert.ToUInt16 (buff [0 + idx] * 256 + buff [1 + idx]);  	header.FuncNumber = Convert.ToUInt16 (buff [2 + idx] * 256 + buff [3 + idx]);  	header.ProtocolVersion = Convert.ToUInt16 (buff [4 + idx] * 256 + buff [5 + idx]);  	header.Reserved = Convert.ToUInt16 (buff [6 + idx] * 256 + buff [7 + idx]);  	header.DataLength = Convert.ToUInt16 (buff [8 + idx] * 256 + buff [9 + idx]);  	if (header.validateCRC (buff [10 + idx]' buff [11 + idx]' buff)) {  		header.setCRC (Convert.ToUInt16 (buff [10 + idx] * 256 + buff [11 + idx]));  		reslt = TSDParseResult.ParseOK;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if ((buff.Length - idx) >= header.GetSize ()) {  	header.UnitId = Convert.ToUInt16 (buff [0 + idx] * 256 + buff [1 + idx]);  	header.FuncNumber = Convert.ToUInt16 (buff [2 + idx] * 256 + buff [3 + idx]);  	header.ProtocolVersion = Convert.ToUInt16 (buff [4 + idx] * 256 + buff [5 + idx]);  	header.Reserved = Convert.ToUInt16 (buff [6 + idx] * 256 + buff [7 + idx]);  	header.DataLength = Convert.ToUInt16 (buff [8 + idx] * 256 + buff [9 + idx]);  	if (header.validateCRC (buff [10 + idx]' buff [11 + idx]' buff)) {  		header.setCRC (Convert.ToUInt16 (buff [10 + idx] * 256 + buff [11 + idx]));  		reslt = TSDParseResult.ParseOK;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if ((buff.Length - idx) >= header.GetSize ()) {  	header.UnitId = Convert.ToUInt16 (buff [0 + idx] * 256 + buff [1 + idx]);  	header.FuncNumber = Convert.ToUInt16 (buff [2 + idx] * 256 + buff [3 + idx]);  	header.ProtocolVersion = Convert.ToUInt16 (buff [4 + idx] * 256 + buff [5 + idx]);  	header.Reserved = Convert.ToUInt16 (buff [6 + idx] * 256 + buff [7 + idx]);  	header.DataLength = Convert.ToUInt16 (buff [8 + idx] * 256 + buff [9 + idx]);  	if (header.validateCRC (buff [10 + idx]' buff [11 + idx]' buff)) {  		header.setCRC (Convert.ToUInt16 (buff [10 + idx] * 256 + buff [11 + idx]));  		reslt = TSDParseResult.ParseOK;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if ((buff.Length - idx) >= header.GetSize ()) {  	header.UnitId = Convert.ToUInt16 (buff [0 + idx] * 256 + buff [1 + idx]);  	header.FuncNumber = Convert.ToUInt16 (buff [2 + idx] * 256 + buff [3 + idx]);  	header.ProtocolVersion = Convert.ToUInt16 (buff [4 + idx] * 256 + buff [5 + idx]);  	header.Reserved = Convert.ToUInt16 (buff [6 + idx] * 256 + buff [7 + idx]);  	header.DataLength = Convert.ToUInt16 (buff [8 + idx] * 256 + buff [9 + idx]);  	if (header.validateCRC (buff [10 + idx]' buff [11 + idx]' buff)) {  		header.setCRC (Convert.ToUInt16 (buff [10 + idx] * 256 + buff [11 + idx]));  		reslt = TSDParseResult.ParseOK;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if ((buff.Length - idx) >= header.GetSize ()) {  	header.UnitId = Convert.ToUInt16 (buff [0 + idx] * 256 + buff [1 + idx]);  	header.FuncNumber = Convert.ToUInt16 (buff [2 + idx] * 256 + buff [3 + idx]);  	header.ProtocolVersion = Convert.ToUInt16 (buff [4 + idx] * 256 + buff [5 + idx]);  	header.Reserved = Convert.ToUInt16 (buff [6 + idx] * 256 + buff [7 + idx]);  	header.DataLength = Convert.ToUInt16 (buff [8 + idx] * 256 + buff [9 + idx]);  	if (header.validateCRC (buff [10 + idx]' buff [11 + idx]' buff)) {  		header.setCRC (Convert.ToUInt16 (buff [10 + idx] * 256 + buff [11 + idx]));  		reslt = TSDParseResult.ParseOK;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if ((buff.Length - idx) >= header.GetSize ()) {  	header.UnitId = Convert.ToUInt16 (buff [0 + idx] * 256 + buff [1 + idx]);  	header.FuncNumber = Convert.ToUInt16 (buff [2 + idx] * 256 + buff [3 + idx]);  	header.ProtocolVersion = Convert.ToUInt16 (buff [4 + idx] * 256 + buff [5 + idx]);  	header.Reserved = Convert.ToUInt16 (buff [6 + idx] * 256 + buff [7 + idx]);  	header.DataLength = Convert.ToUInt16 (buff [8 + idx] * 256 + buff [9 + idx]);  	if (header.validateCRC (buff [10 + idx]' buff [11 + idx]' buff)) {  		header.setCRC (Convert.ToUInt16 (buff [10 + idx] * 256 + buff [11 + idx]));  		reslt = TSDParseResult.ParseOK;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if ((buff.Length - idx) >= header.GetSize ()) {  	header.UnitId = Convert.ToUInt16 (buff [0 + idx] * 256 + buff [1 + idx]);  	header.FuncNumber = Convert.ToUInt16 (buff [2 + idx] * 256 + buff [3 + idx]);  	header.ProtocolVersion = Convert.ToUInt16 (buff [4 + idx] * 256 + buff [5 + idx]);  	header.Reserved = Convert.ToUInt16 (buff [6 + idx] * 256 + buff [7 + idx]);  	header.DataLength = Convert.ToUInt16 (buff [8 + idx] * 256 + buff [9 + idx]);  	if (header.validateCRC (buff [10 + idx]' buff [11 + idx]' buff)) {  		header.setCRC (Convert.ToUInt16 (buff [10 + idx] * 256 + buff [11 + idx]));  		reslt = TSDParseResult.ParseOK;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if ((buff.Length - idx) >= header.GetSize ()) {  	header.UnitId = Convert.ToUInt16 (buff [0 + idx] * 256 + buff [1 + idx]);  	header.FuncNumber = Convert.ToUInt16 (buff [2 + idx] * 256 + buff [3 + idx]);  	header.ProtocolVersion = Convert.ToUInt16 (buff [4 + idx] * 256 + buff [5 + idx]);  	header.Reserved = Convert.ToUInt16 (buff [6 + idx] * 256 + buff [7 + idx]);  	header.DataLength = Convert.ToUInt16 (buff [8 + idx] * 256 + buff [9 + idx]);  	if (header.validateCRC (buff [10 + idx]' buff [11 + idx]' buff)) {  		header.setCRC (Convert.ToUInt16 (buff [10 + idx] * 256 + buff [11 + idx]));  		reslt = TSDParseResult.ParseOK;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if ((buff.Length - idx) >= header.GetSize ()) {  	header.UnitId = Convert.ToUInt16 (buff [0 + idx] * 256 + buff [1 + idx]);  	header.FuncNumber = Convert.ToUInt16 (buff [2 + idx] * 256 + buff [3 + idx]);  	header.ProtocolVersion = Convert.ToUInt16 (buff [4 + idx] * 256 + buff [5 + idx]);  	header.Reserved = Convert.ToUInt16 (buff [6 + idx] * 256 + buff [7 + idx]);  	header.DataLength = Convert.ToUInt16 (buff [8 + idx] * 256 + buff [9 + idx]);  	if (header.validateCRC (buff [10 + idx]' buff [11 + idx]' buff)) {  		header.setCRC (Convert.ToUInt16 (buff [10 + idx] * 256 + buff [11 + idx]));  		reslt = TSDParseResult.ParseOK;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if ((buff.Length - idx) >= header.GetSize ()) {  	header.UnitId = Convert.ToUInt16 (buff [0 + idx] * 256 + buff [1 + idx]);  	header.FuncNumber = Convert.ToUInt16 (buff [2 + idx] * 256 + buff [3 + idx]);  	header.ProtocolVersion = Convert.ToUInt16 (buff [4 + idx] * 256 + buff [5 + idx]);  	header.Reserved = Convert.ToUInt16 (buff [6 + idx] * 256 + buff [7 + idx]);  	header.DataLength = Convert.ToUInt16 (buff [8 + idx] * 256 + buff [9 + idx]);  	if (header.validateCRC (buff [10 + idx]' buff [11 + idx]' buff)) {  		header.setCRC (Convert.ToUInt16 (buff [10 + idx] * 256 + buff [11 + idx]));  		reslt = TSDParseResult.ParseOK;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if ((buff.Length - idx) >= header.GetSize ()) {  	header.UnitId = Convert.ToUInt16 (buff [0 + idx] * 256 + buff [1 + idx]);  	header.FuncNumber = Convert.ToUInt16 (buff [2 + idx] * 256 + buff [3 + idx]);  	header.ProtocolVersion = Convert.ToUInt16 (buff [4 + idx] * 256 + buff [5 + idx]);  	header.Reserved = Convert.ToUInt16 (buff [6 + idx] * 256 + buff [7 + idx]);  	header.DataLength = Convert.ToUInt16 (buff [8 + idx] * 256 + buff [9 + idx]);  	if (header.validateCRC (buff [10 + idx]' buff [11 + idx]' buff)) {  		header.setCRC (Convert.ToUInt16 (buff [10 + idx] * 256 + buff [11 + idx]));  		reslt = TSDParseResult.ParseOK;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if ((buff.Length - idx) >= header.GetSize ()) {  	header.UnitId = Convert.ToUInt16 (buff [0 + idx] * 256 + buff [1 + idx]);  	header.FuncNumber = Convert.ToUInt16 (buff [2 + idx] * 256 + buff [3 + idx]);  	header.ProtocolVersion = Convert.ToUInt16 (buff [4 + idx] * 256 + buff [5 + idx]);  	header.Reserved = Convert.ToUInt16 (buff [6 + idx] * 256 + buff [7 + idx]);  	header.DataLength = Convert.ToUInt16 (buff [8 + idx] * 256 + buff [9 + idx]);  	if (header.validateCRC (buff [10 + idx]' buff [11 + idx]' buff)) {  		header.setCRC (Convert.ToUInt16 (buff [10 + idx] * 256 + buff [11 + idx]));  		reslt = TSDParseResult.ParseOK;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if ((buff.Length - idx) >= header.GetSize ()) {  	header.UnitId = Convert.ToUInt16 (buff [0 + idx] * 256 + buff [1 + idx]);  	header.FuncNumber = Convert.ToUInt16 (buff [2 + idx] * 256 + buff [3 + idx]);  	header.ProtocolVersion = Convert.ToUInt16 (buff [4 + idx] * 256 + buff [5 + idx]);  	header.Reserved = Convert.ToUInt16 (buff [6 + idx] * 256 + buff [7 + idx]);  	header.DataLength = Convert.ToUInt16 (buff [8 + idx] * 256 + buff [9 + idx]);  	if (header.validateCRC (buff [10 + idx]' buff [11 + idx]' buff)) {  		header.setCRC (Convert.ToUInt16 (buff [10 + idx] * 256 + buff [11 + idx]));  		reslt = TSDParseResult.ParseOK;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: header.UnitId = Convert.ToUInt16 (buff [0 + idx] * 256 + buff [1 + idx]);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: header.FuncNumber = Convert.ToUInt16 (buff [2 + idx] * 256 + buff [3 + idx]);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: header.FuncNumber = Convert.ToUInt16 (buff [2 + idx] * 256 + buff [3 + idx]);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: header.FuncNumber = Convert.ToUInt16 (buff [2 + idx] * 256 + buff [3 + idx]);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: header.ProtocolVersion = Convert.ToUInt16 (buff [4 + idx] * 256 + buff [5 + idx]);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: header.ProtocolVersion = Convert.ToUInt16 (buff [4 + idx] * 256 + buff [5 + idx]);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: header.ProtocolVersion = Convert.ToUInt16 (buff [4 + idx] * 256 + buff [5 + idx]);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: header.Reserved = Convert.ToUInt16 (buff [6 + idx] * 256 + buff [7 + idx]);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: header.Reserved = Convert.ToUInt16 (buff [6 + idx] * 256 + buff [7 + idx]);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: header.Reserved = Convert.ToUInt16 (buff [6 + idx] * 256 + buff [7 + idx]);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: header.DataLength = Convert.ToUInt16 (buff [8 + idx] * 256 + buff [9 + idx]);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: header.DataLength = Convert.ToUInt16 (buff [8 + idx] * 256 + buff [9 + idx]);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: header.DataLength = Convert.ToUInt16 (buff [8 + idx] * 256 + buff [9 + idx]);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if (header.validateCRC (buff [10 + idx]' buff [11 + idx]' buff)) {  	header.setCRC (Convert.ToUInt16 (buff [10 + idx] * 256 + buff [11 + idx]));  	reslt = TSDParseResult.ParseOK;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if (header.validateCRC (buff [10 + idx]' buff [11 + idx]' buff)) {  	header.setCRC (Convert.ToUInt16 (buff [10 + idx] * 256 + buff [11 + idx]));  	reslt = TSDParseResult.ParseOK;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if (header.validateCRC (buff [10 + idx]' buff [11 + idx]' buff)) {  	header.setCRC (Convert.ToUInt16 (buff [10 + idx] * 256 + buff [11 + idx]));  	reslt = TSDParseResult.ParseOK;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if (header.validateCRC (buff [10 + idx]' buff [11 + idx]' buff)) {  	header.setCRC (Convert.ToUInt16 (buff [10 + idx] * 256 + buff [11 + idx]));  	reslt = TSDParseResult.ParseOK;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if (header.validateCRC (buff [10 + idx]' buff [11 + idx]' buff)) {  	header.setCRC (Convert.ToUInt16 (buff [10 + idx] * 256 + buff [11 + idx]));  	reslt = TSDParseResult.ParseOK;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: header.setCRC (Convert.ToUInt16 (buff [10 + idx] * 256 + buff [11 + idx]));  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: header.setCRC (Convert.ToUInt16 (buff [10 + idx] * 256 + buff [11 + idx]));  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: header.setCRC (Convert.ToUInt16 (buff [10 + idx] * 256 + buff [11 + idx]));  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDTail,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,GetSize,The following statement contains a magic number: return ts.GetSize () + 2;  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDTail,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	try {  		tail.setTs (tempts);  		/*           UInt16 crc1 = Convert.ToUInt16(buff[(idx + tail.GetSize() - 2)]);           UInt16 crc2 = Convert.ToUInt16(buff[(idx + tail.GetSize() - 1)]);           tail.setCRC(Convert.ToUInt16(crc1 * 256 + crc2));           reslt = TSDParseResult.ParseOK;           * modified 2011.12.07 by sn to check correctly the crc on tail           */byte crc1 = buff [(idx + tail.GetSize () - 2)];  		byte crc2 = buff [(idx + tail.GetSize () - 1)];  		if (tail.validateCRC (crc1' crc2' buff' buff.Length)) {  			tail.setCRC (Convert.ToUInt16 (crc1 * 256 + crc2));  			reslt = TSDParseResult.ParseOK;  		}  	}  	catch (Exception) {  		reslt = TSDParseResult.ParseBadTimestamp;  	}  }  else {  	tail = new TSDTail ();  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDTail,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if (reslt == TSDParseResult.ParseOK) {  	try {  		tail.setTs (tempts);  		/*           UInt16 crc1 = Convert.ToUInt16(buff[(idx + tail.GetSize() - 2)]);           UInt16 crc2 = Convert.ToUInt16(buff[(idx + tail.GetSize() - 1)]);           tail.setCRC(Convert.ToUInt16(crc1 * 256 + crc2));           reslt = TSDParseResult.ParseOK;           * modified 2011.12.07 by sn to check correctly the crc on tail           */byte crc1 = buff [(idx + tail.GetSize () - 2)];  		byte crc2 = buff [(idx + tail.GetSize () - 1)];  		if (tail.validateCRC (crc1' crc2' buff' buff.Length)) {  			tail.setCRC (Convert.ToUInt16 (crc1 * 256 + crc2));  			reslt = TSDParseResult.ParseOK;  		}  	}  	catch (Exception) {  		reslt = TSDParseResult.ParseBadTimestamp;  	}  }  else {  	tail = new TSDTail ();  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDTail,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: try {  	tail.setTs (tempts);  	/*           UInt16 crc1 = Convert.ToUInt16(buff[(idx + tail.GetSize() - 2)]);           UInt16 crc2 = Convert.ToUInt16(buff[(idx + tail.GetSize() - 1)]);           tail.setCRC(Convert.ToUInt16(crc1 * 256 + crc2));           reslt = TSDParseResult.ParseOK;           * modified 2011.12.07 by sn to check correctly the crc on tail           */byte crc1 = buff [(idx + tail.GetSize () - 2)];  	byte crc2 = buff [(idx + tail.GetSize () - 1)];  	if (tail.validateCRC (crc1' crc2' buff' buff.Length)) {  		tail.setCRC (Convert.ToUInt16 (crc1 * 256 + crc2));  		reslt = TSDParseResult.ParseOK;  	}  }  catch (Exception) {  	reslt = TSDParseResult.ParseBadTimestamp;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDTail,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: try {  	tail.setTs (tempts);  	/*           UInt16 crc1 = Convert.ToUInt16(buff[(idx + tail.GetSize() - 2)]);           UInt16 crc2 = Convert.ToUInt16(buff[(idx + tail.GetSize() - 1)]);           tail.setCRC(Convert.ToUInt16(crc1 * 256 + crc2));           reslt = TSDParseResult.ParseOK;           * modified 2011.12.07 by sn to check correctly the crc on tail           */byte crc1 = buff [(idx + tail.GetSize () - 2)];  	byte crc2 = buff [(idx + tail.GetSize () - 1)];  	if (tail.validateCRC (crc1' crc2' buff' buff.Length)) {  		tail.setCRC (Convert.ToUInt16 (crc1 * 256 + crc2));  		reslt = TSDParseResult.ParseOK;  	}  }  catch (Exception) {  	reslt = TSDParseResult.ParseBadTimestamp;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDTail,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if (tail.validateCRC (crc1' crc2' buff' buff.Length)) {  	tail.setCRC (Convert.ToUInt16 (crc1 * 256 + crc2));  	reslt = TSDParseResult.ParseOK;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDTail,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: tail.setCRC (Convert.ToUInt16 (crc1 * 256 + crc2));  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: try {  	dataLength = (bytes [8] * 256 + bytes [9]);  	if (bytes.Length < p.header.GetSize () + dataLength + p.tail.GetSize ())  		return TSDParseResult.ParseFail;  	if (TSDHeader.Parse (bytes' offset' out p.header) == TSDParseResult.ParseOK) {  		byte[] data = new byte[p.header.DataLength];  		Array.Copy (bytes' p.header.GetSize ()' data' 0' p.header.DataLength);  		p.AddData (data);  		idx = p.header.GetSize () + p.header.DataLength;  		reslt = TSDTail.Parse (bytes' idx' out p.tail);  		if ((reslt == TSDParseResult.ParseOK) || (reslt == TSDParseResult.ParseBadTimestamp)) {  			header = p.header;  			Data = data;  			tail = p.tail;  			idx += tail.GetSize ();  			// llamada no jodas con el crc  			//if (validateCRC(bytes[idx - 2]' bytes[idx - 1]))  		}  	}  }  catch (Exception) {  	reslt = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: try {  	dataLength = (bytes [8] * 256 + bytes [9]);  	if (bytes.Length < p.header.GetSize () + dataLength + p.tail.GetSize ())  		return TSDParseResult.ParseFail;  	if (TSDHeader.Parse (bytes' offset' out p.header) == TSDParseResult.ParseOK) {  		byte[] data = new byte[p.header.DataLength];  		Array.Copy (bytes' p.header.GetSize ()' data' 0' p.header.DataLength);  		p.AddData (data);  		idx = p.header.GetSize () + p.header.DataLength;  		reslt = TSDTail.Parse (bytes' idx' out p.tail);  		if ((reslt == TSDParseResult.ParseOK) || (reslt == TSDParseResult.ParseBadTimestamp)) {  			header = p.header;  			Data = data;  			tail = p.tail;  			idx += tail.GetSize ();  			// llamada no jodas con el crc  			//if (validateCRC(bytes[idx - 2]' bytes[idx - 1]))  		}  	}  }  catch (Exception) {  	reslt = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: try {  	dataLength = (bytes [8] * 256 + bytes [9]);  	if (bytes.Length < p.header.GetSize () + dataLength + p.tail.GetSize ())  		return TSDParseResult.ParseFail;  	if (TSDHeader.Parse (bytes' offset' out p.header) == TSDParseResult.ParseOK) {  		byte[] data = new byte[p.header.DataLength];  		Array.Copy (bytes' p.header.GetSize ()' data' 0' p.header.DataLength);  		p.AddData (data);  		idx = p.header.GetSize () + p.header.DataLength;  		reslt = TSDTail.Parse (bytes' idx' out p.tail);  		if ((reslt == TSDParseResult.ParseOK) || (reslt == TSDParseResult.ParseBadTimestamp)) {  			header = p.header;  			Data = data;  			tail = p.tail;  			idx += tail.GetSize ();  			// llamada no jodas con el crc  			//if (validateCRC(bytes[idx - 2]' bytes[idx - 1]))  		}  	}  }  catch (Exception) {  	reslt = TSDParseResult.ParseFail;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: dataLength = (bytes [8] * 256 + bytes [9]);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: dataLength = (bytes [8] * 256 + bytes [9]);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: dataLength = (bytes [8] * 256 + bytes [9]);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if (buff.Length >= (offset + TSDBridgeHeaderSize)) {  	try {  		int idx = offset;  		bheader.Sequence = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  		idx += 2;  		bheader.PortNumber = buff [idx++];  		bheader.Reserved = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  		idx += 2;  		bheader.DataLength = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  		idx += 2;  		if (bheader.validateCRC (buff [idx]' buff [idx + 1]' buff' offset + bheader.GetSize ())) {  			bheader.setCRC (Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]));  			reslt = TSDParseResult.ParseOK;  		}  	}  	catch (Exception) {  		bheader = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if (buff.Length >= (offset + TSDBridgeHeaderSize)) {  	try {  		int idx = offset;  		bheader.Sequence = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  		idx += 2;  		bheader.PortNumber = buff [idx++];  		bheader.Reserved = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  		idx += 2;  		bheader.DataLength = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  		idx += 2;  		if (bheader.validateCRC (buff [idx]' buff [idx + 1]' buff' offset + bheader.GetSize ())) {  			bheader.setCRC (Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]));  			reslt = TSDParseResult.ParseOK;  		}  	}  	catch (Exception) {  		bheader = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if (buff.Length >= (offset + TSDBridgeHeaderSize)) {  	try {  		int idx = offset;  		bheader.Sequence = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  		idx += 2;  		bheader.PortNumber = buff [idx++];  		bheader.Reserved = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  		idx += 2;  		bheader.DataLength = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  		idx += 2;  		if (bheader.validateCRC (buff [idx]' buff [idx + 1]' buff' offset + bheader.GetSize ())) {  			bheader.setCRC (Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]));  			reslt = TSDParseResult.ParseOK;  		}  	}  	catch (Exception) {  		bheader = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if (buff.Length >= (offset + TSDBridgeHeaderSize)) {  	try {  		int idx = offset;  		bheader.Sequence = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  		idx += 2;  		bheader.PortNumber = buff [idx++];  		bheader.Reserved = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  		idx += 2;  		bheader.DataLength = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  		idx += 2;  		if (bheader.validateCRC (buff [idx]' buff [idx + 1]' buff' offset + bheader.GetSize ())) {  			bheader.setCRC (Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]));  			reslt = TSDParseResult.ParseOK;  		}  	}  	catch (Exception) {  		bheader = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if (buff.Length >= (offset + TSDBridgeHeaderSize)) {  	try {  		int idx = offset;  		bheader.Sequence = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  		idx += 2;  		bheader.PortNumber = buff [idx++];  		bheader.Reserved = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  		idx += 2;  		bheader.DataLength = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  		idx += 2;  		if (bheader.validateCRC (buff [idx]' buff [idx + 1]' buff' offset + bheader.GetSize ())) {  			bheader.setCRC (Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]));  			reslt = TSDParseResult.ParseOK;  		}  	}  	catch (Exception) {  		bheader = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if (buff.Length >= (offset + TSDBridgeHeaderSize)) {  	try {  		int idx = offset;  		bheader.Sequence = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  		idx += 2;  		bheader.PortNumber = buff [idx++];  		bheader.Reserved = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  		idx += 2;  		bheader.DataLength = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  		idx += 2;  		if (bheader.validateCRC (buff [idx]' buff [idx + 1]' buff' offset + bheader.GetSize ())) {  			bheader.setCRC (Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]));  			reslt = TSDParseResult.ParseOK;  		}  	}  	catch (Exception) {  		bheader = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if (buff.Length >= (offset + TSDBridgeHeaderSize)) {  	try {  		int idx = offset;  		bheader.Sequence = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  		idx += 2;  		bheader.PortNumber = buff [idx++];  		bheader.Reserved = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  		idx += 2;  		bheader.DataLength = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  		idx += 2;  		if (bheader.validateCRC (buff [idx]' buff [idx + 1]' buff' offset + bheader.GetSize ())) {  			bheader.setCRC (Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]));  			reslt = TSDParseResult.ParseOK;  		}  	}  	catch (Exception) {  		bheader = null;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: try {  	int idx = offset;  	bheader.Sequence = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  	idx += 2;  	bheader.PortNumber = buff [idx++];  	bheader.Reserved = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  	idx += 2;  	bheader.DataLength = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  	idx += 2;  	if (bheader.validateCRC (buff [idx]' buff [idx + 1]' buff' offset + bheader.GetSize ())) {  		bheader.setCRC (Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]));  		reslt = TSDParseResult.ParseOK;  	}  }  catch (Exception) {  	bheader = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: try {  	int idx = offset;  	bheader.Sequence = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  	idx += 2;  	bheader.PortNumber = buff [idx++];  	bheader.Reserved = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  	idx += 2;  	bheader.DataLength = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  	idx += 2;  	if (bheader.validateCRC (buff [idx]' buff [idx + 1]' buff' offset + bheader.GetSize ())) {  		bheader.setCRC (Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]));  		reslt = TSDParseResult.ParseOK;  	}  }  catch (Exception) {  	bheader = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: try {  	int idx = offset;  	bheader.Sequence = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  	idx += 2;  	bheader.PortNumber = buff [idx++];  	bheader.Reserved = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  	idx += 2;  	bheader.DataLength = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  	idx += 2;  	if (bheader.validateCRC (buff [idx]' buff [idx + 1]' buff' offset + bheader.GetSize ())) {  		bheader.setCRC (Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]));  		reslt = TSDParseResult.ParseOK;  	}  }  catch (Exception) {  	bheader = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: try {  	int idx = offset;  	bheader.Sequence = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  	idx += 2;  	bheader.PortNumber = buff [idx++];  	bheader.Reserved = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  	idx += 2;  	bheader.DataLength = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  	idx += 2;  	if (bheader.validateCRC (buff [idx]' buff [idx + 1]' buff' offset + bheader.GetSize ())) {  		bheader.setCRC (Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]));  		reslt = TSDParseResult.ParseOK;  	}  }  catch (Exception) {  	bheader = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: try {  	int idx = offset;  	bheader.Sequence = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  	idx += 2;  	bheader.PortNumber = buff [idx++];  	bheader.Reserved = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  	idx += 2;  	bheader.DataLength = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  	idx += 2;  	if (bheader.validateCRC (buff [idx]' buff [idx + 1]' buff' offset + bheader.GetSize ())) {  		bheader.setCRC (Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]));  		reslt = TSDParseResult.ParseOK;  	}  }  catch (Exception) {  	bheader = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: try {  	int idx = offset;  	bheader.Sequence = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  	idx += 2;  	bheader.PortNumber = buff [idx++];  	bheader.Reserved = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  	idx += 2;  	bheader.DataLength = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  	idx += 2;  	if (bheader.validateCRC (buff [idx]' buff [idx + 1]' buff' offset + bheader.GetSize ())) {  		bheader.setCRC (Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]));  		reslt = TSDParseResult.ParseOK;  	}  }  catch (Exception) {  	bheader = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: try {  	int idx = offset;  	bheader.Sequence = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  	idx += 2;  	bheader.PortNumber = buff [idx++];  	bheader.Reserved = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  	idx += 2;  	bheader.DataLength = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  	idx += 2;  	if (bheader.validateCRC (buff [idx]' buff [idx + 1]' buff' offset + bheader.GetSize ())) {  		bheader.setCRC (Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]));  		reslt = TSDParseResult.ParseOK;  	}  }  catch (Exception) {  	bheader = null;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: bheader.Sequence = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: idx += 2;  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: bheader.Reserved = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: idx += 2;  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: bheader.DataLength = Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: idx += 2;  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: if (bheader.validateCRC (buff [idx]' buff [idx + 1]' buff' offset + bheader.GetSize ())) {  	bheader.setCRC (Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]));  	reslt = TSDParseResult.ParseOK;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,Parse,The following statement contains a magic number: bheader.setCRC (Convert.ToUInt16 (buff [idx] * 256 + buff [idx + 1]));  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [0] = Convert.ToByte (Sequence / 256);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [1] = Convert.ToByte (Sequence % 256);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [2] = Convert.ToByte (PortNumber);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [3] = Convert.ToByte (Reserved / 256);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [3] = Convert.ToByte (Reserved / 256);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [4] = Convert.ToByte (Reserved % 256);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [4] = Convert.ToByte (Reserved % 256);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [5] = Convert.ToByte (DataLength / 256);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [5] = Convert.ToByte (DataLength / 256);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [6] = Convert.ToByte (DataLength % 256);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDBridgeHeader,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,ToBytes,The following statement contains a magic number: bytes [6] = Convert.ToByte (DataLength % 256);  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDEcho,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,isEchoPacket,The following statement contains a magic number: if (buff.Length < TSDPacket.MINSIZE)  	if ((buff [0] == TsdEchoPacketBytes [0]) && (buff [1] == TsdEchoPacketBytes [1]) && (buff [2] == TsdEchoPacketBytes [2]))  		result = true;  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDEcho,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,isEchoPacket,The following statement contains a magic number: if (buff.Length < TSDPacket.MINSIZE)  	if ((buff [0] == TsdEchoPacketBytes [0]) && (buff [1] == TsdEchoPacketBytes [1]) && (buff [2] == TsdEchoPacketBytes [2]))  		result = true;  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDEcho,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,isEchoPacket,The following statement contains a magic number: if ((buff [0] == TsdEchoPacketBytes [0]) && (buff [1] == TsdEchoPacketBytes [1]) && (buff [2] == TsdEchoPacketBytes [2]))  	result = true;  
Magic Number,net.Tesacom.TsdProtocol.TSD,TSDEcho,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdPacket.cs,isEchoPacket,The following statement contains a magic number: if ((buff [0] == TsdEchoPacketBytes [0]) && (buff [1] == TsdEchoPacketBytes [1]) && (buff [2] == TsdEchoPacketBytes [2]))  	result = true;  
Magic Number,net.Tesacom.TsdProtocol.TSD,TsdServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdServer.cs,OnClientDisconnection,The following statement contains a magic number: try {  	e.Conn.Verbose = GetVerbose ();  	//remove the connection  	foreach (IdentifiedTsdClient c in TsdClients) {  		try {  			if (c.Conn == e.Conn) {  				lock (TsdClients) {  					TsdClients.Remove (c);  				}  				break;  			}  		}  		catch (Exception) {  			logIt (LogType.LOG_ERR' "TsdServer"' "Error while removing conection: {0}"' e.Conn);  			Thread.Sleep (10);  			lock (TsdClients) {  				TsdClients.Remove (c);  			}  			break;  		}  	}  	// Send the event  	if (ClientDisconnection != null)  		ClientDisconnection (e' cause);  }  catch (Exception ex) {  	if (Verbose.Contains (eLogMessagesType.LogErrors))  		logIt (LogType.LOG_DATA' "TsdServer"' "An error has ocurred on ClientDisconnection: {0}' {1}"' e.Conn' ex.Message);  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TsdServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdServer.cs,OnClientDisconnection,The following statement contains a magic number: foreach (IdentifiedTsdClient c in TsdClients) {  	try {  		if (c.Conn == e.Conn) {  			lock (TsdClients) {  				TsdClients.Remove (c);  			}  			break;  		}  	}  	catch (Exception) {  		logIt (LogType.LOG_ERR' "TsdServer"' "Error while removing conection: {0}"' e.Conn);  		Thread.Sleep (10);  		lock (TsdClients) {  			TsdClients.Remove (c);  		}  		break;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TsdServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdServer.cs,OnClientDisconnection,The following statement contains a magic number: try {  	if (c.Conn == e.Conn) {  		lock (TsdClients) {  			TsdClients.Remove (c);  		}  		break;  	}  }  catch (Exception) {  	logIt (LogType.LOG_ERR' "TsdServer"' "Error while removing conection: {0}"' e.Conn);  	Thread.Sleep (10);  	lock (TsdClients) {  		TsdClients.Remove (c);  	}  	break;  }  
Magic Number,net.Tesacom.TsdProtocol.TSD,TsdServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Tsd\TsdServer.cs,OnClientDisconnection,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	CoilStatus = p.CoilStatus;  	DIStatus = p.DIStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	CoilCounter = p.CoilCounter;  	DICounter = p.DICounter;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	CoilStatus = p.CoilStatus;  	DIStatus = p.DIStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	CoilCounter = p.CoilCounter;  	DICounter = p.DICounter;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	CoilStatus = p.CoilStatus;  	DIStatus = p.DIStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	CoilCounter = p.CoilCounter;  	DICounter = p.DICounter;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	CoilStatus = p.CoilStatus;  	DIStatus = p.DIStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	CoilCounter = p.CoilCounter;  	DICounter = p.DICounter;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	CoilStatus = p.CoilStatus;  	DIStatus = p.DIStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	CoilCounter = p.CoilCounter;  	DICounter = p.DICounter;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	CoilStatus = p.CoilStatus;  	DIStatus = p.DIStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	CoilCounter = p.CoilCounter;  	DICounter = p.DICounter;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	CoilStatus = p.CoilStatus;  	DIStatus = p.DIStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	CoilCounter = p.CoilCounter;  	DICounter = p.DICounter;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	CoilStatus = p.CoilStatus;  	DIStatus = p.DIStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	CoilCounter = p.CoilCounter;  	DICounter = p.DICounter;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	CoilStatus = p.CoilStatus;  	DIStatus = p.DIStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	CoilCounter = p.CoilCounter;  	DICounter = p.DICounter;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	CoilStatus = p.CoilStatus;  	DIStatus = p.DIStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	CoilCounter = p.CoilCounter;  	DICounter = p.DICounter;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	CoilStatus = p.CoilStatus;  	DIStatus = p.DIStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	CoilCounter = p.CoilCounter;  	DICounter = p.DICounter;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	CoilStatus = p.CoilStatus;  	DIStatus = p.DIStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	CoilCounter = p.CoilCounter;  	DICounter = p.DICounter;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	CoilStatus = p.CoilStatus;  	DIStatus = p.DIStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	CoilCounter = p.CoilCounter;  	DICounter = p.DICounter;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	CoilStatus = p.CoilStatus;  	DIStatus = p.DIStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	CoilCounter = p.CoilCounter;  	DICounter = p.DICounter;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	CoilStatus = p.CoilStatus;  	DIStatus = p.DIStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	CoilCounter = p.CoilCounter;  	DICounter = p.DICounter;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	CoilStatus = p.CoilStatus;  	DIStatus = p.DIStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	CoilCounter = p.CoilCounter;  	DICounter = p.DICounter;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	CoilStatus = p.CoilStatus;  	DIStatus = p.DIStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	CoilCounter = p.CoilCounter;  	DICounter = p.DICounter;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	CoilStatus = p.CoilStatus;  	DIStatus = p.DIStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	CoilCounter = p.CoilCounter;  	DICounter = p.DICounter;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	CoilStatus = p.CoilStatus;  	DIStatus = p.DIStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	CoilCounter = p.CoilCounter;  	DICounter = p.DICounter;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < CoilQ; i++' idx += 2)  	p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < CoilQ; i++' idx += 2)  	p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 2)  	p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 2)  	p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < CoilQ; i++' idx += 4) {  	p.HiCoilsTs [i] = new DataTimestamp ();  	p.HiCoilsTs [i].Parse (buffer' idx);  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 4
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < CoilQ; i++' idx += 4) {  	p.LoCoilsTs [i] = new DataTimestamp ();  	p.LoCoilsTs [i].Parse (buffer' idx);  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 4
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 4) {  	p.HiDiTs [i] = new DataTimestamp ();  	p.HiDiTs [i].Parse (buffer' idx);  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 4
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 4) {  	p.LoDiTs [i] = new DataTimestamp ();  	p.LoDiTs [i].Parse (buffer' idx);  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 4
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < CoilQ; i++' idx += 2)  	p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < CoilQ; i++' idx += 2)  	p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 2)  	p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 2)  	p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 4;  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2;  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2;  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 4;  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.DiTs [i] = new DataTimestamp ();  		p.DiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	DiTs = p.DiTs;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.DiTs [i] = new DataTimestamp ();  		p.DiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	DiTs = p.DiTs;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.DiTs [i] = new DataTimestamp ();  		p.DiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	DiTs = p.DiTs;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.DiTs [i] = new DataTimestamp ();  		p.DiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	DiTs = p.DiTs;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.DiTs [i] = new DataTimestamp ();  		p.DiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	DiTs = p.DiTs;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.DiTs [i] = new DataTimestamp ();  		p.DiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	DiTs = p.DiTs;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.DiTs [i] = new DataTimestamp ();  		p.DiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	DiTs = p.DiTs;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.DiTs [i] = new DataTimestamp ();  		p.DiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	DiTs = p.DiTs;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.DiTs [i] = new DataTimestamp ();  		p.DiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	DiTs = p.DiTs;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.DiTs [i] = new DataTimestamp ();  		p.DiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	DiTs = p.DiTs;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.DiTs [i] = new DataTimestamp ();  		p.DiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	DiTs = p.DiTs;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.DiTs [i] = new DataTimestamp ();  		p.DiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	DiTs = p.DiTs;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.DiTs [i] = new DataTimestamp ();  		p.DiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	DiTs = p.DiTs;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.DiTs [i] = new DataTimestamp ();  		p.DiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	DiTs = p.DiTs;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.DiTs [i] = new DataTimestamp ();  		p.DiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	DiTs = p.DiTs;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.DiTs [i] = new DataTimestamp ();  		p.DiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	p.LastTimestamp = new DataTimestamp ();  	p.LastTimestamp.Parse (buffer' idx);  	idx += 4;  	p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	p.LocalTime = new DataTimestamp ();  	p.LocalTime.Parse (buffer' idx);  	idx += 4;  	p.Reserved [0] = buffer [idx++];  	p.Reserved [1] = buffer [idx++];  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	DiTs = p.DiTs;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	LastTimestamp = p.LastTimestamp;  	isIntConnected = p.isIntConnected;  	IsConnected = p.IsConnected;  	LocalTime = p.LocalTime;  	Reserved = p.Reserved;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 2)  	p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 2)  	p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 4) {  	p.DiTs [i] = new DataTimestamp ();  	p.DiTs [i].Parse (buffer' idx);  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 4
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < AiQ; i++' idx += 2) {  	p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  	p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < AiQ; i++' idx += 2) {  	p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  	p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < AiQ; i++' idx += 2) {  	p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  	p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < AiQ; i++' idx += 2) {  	p.AiAlarms [i] = new AlarmMask ();  	p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	p.AiAlarms [i].Process ();  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < AiQ; i++' idx += 2) {  	p.AiAlarms [i] = new AlarmMask ();  	p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	p.AiAlarms [i].Process ();  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < AiQ; i++' idx += 4) {  	p.AiTs [i] = new DataTimestamp ();  	p.AiTs [i].Parse (buffer' idx);  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 4
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 4;  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.isIntConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2;  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.IsConnected = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2;  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric3DiAi18Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 4;  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	//serial only  	/*          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)             p.isConnected = true;             else               p.isConnected = false;             idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	//serial only  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	//serial only  	/*          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)             p.isConnected = true;             else               p.isConnected = false;             idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	//serial only  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	//serial only  	/*          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)             p.isConnected = true;             else               p.isConnected = false;             idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	//serial only  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	//serial only  	/*          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)             p.isConnected = true;             else               p.isConnected = false;             idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	//serial only  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	//serial only  	/*          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)             p.isConnected = true;             else               p.isConnected = false;             idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	//serial only  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	//serial only  	/*          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)             p.isConnected = true;             else               p.isConnected = false;             idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	//serial only  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	//serial only  	/*          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)             p.isConnected = true;             else               p.isConnected = false;             idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	//serial only  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	//serial only  	/*          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)             p.isConnected = true;             else               p.isConnected = false;             idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	//serial only  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	//serial only  	/*          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)             p.isConnected = true;             else               p.isConnected = false;             idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	//serial only  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	//serial only  	/*          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)             p.isConnected = true;             else               p.isConnected = false;             idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	//serial only  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	//serial only  	/*          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)             p.isConnected = true;             else               p.isConnected = false;             idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	//serial only  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	//serial only  	/*          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)             p.isConnected = true;             else               p.isConnected = false;             idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	//serial only  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	//serial only  	/*          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)             p.isConnected = true;             else               p.isConnected = false;             idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	//serial only  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 2)  	p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 2)  	p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < CoilQ; i++' idx += 2)  	p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < CoilQ; i++' idx += 2)  	p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 2)  	p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 2)  	p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < CoilQ; i++' idx += 2)  	p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < CoilQ; i++' idx += 2)  	p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 4) {  	p.HiDiTs [i] = new DataTimestamp ();  	p.HiDiTs [i].Parse (buffer' idx);  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 4
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 4) {  	p.LoDiTs [i] = new DataTimestamp ();  	p.LoDiTs [i].Parse (buffer' idx);  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 4
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < CoilQ; i++' idx += 4) {  	p.HiCoilsTs [i] = new DataTimestamp ();  	p.HiCoilsTs [i].Parse (buffer' idx);  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 4
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < CoilQ; i++' idx += 4) {  	p.LoCoilsTs [i] = new DataTimestamp ();  	p.LoCoilsTs [i].Parse (buffer' idx);  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x103Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 4
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 2)  	p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 2)  	p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < CoilQ; i++' idx += 2)  	p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < CoilQ; i++' idx += 2)  	p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 2)  	p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 2)  	p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < CoilQ; i++' idx += 2)  	p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < CoilQ; i++' idx += 2)  	p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 4) {  	p.HiDiTs [i] = new DataTimestamp ();  	p.HiDiTs [i].Parse (buffer' idx);  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 4
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 4) {  	p.LoDiTs [i] = new DataTimestamp ();  	p.LoDiTs [i].Parse (buffer' idx);  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 4
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < CoilQ; i++' idx += 4) {  	p.HiCoilsTs [i] = new DataTimestamp ();  	p.HiCoilsTs [i].Parse (buffer' idx);  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 4
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < CoilQ; i++' idx += 4) {  	p.LoCoilsTs [i] = new DataTimestamp ();  	p.LoCoilsTs [i].Parse (buffer' idx);  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 4
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < AiQ; i++' idx += 2) {  	p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  	p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < AiQ; i++' idx += 2) {  	p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  	p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < AiQ; i++' idx += 2) {  	p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  	p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < AiQ; i++' idx += 2) {  	p.AiAlarms [i] = new AlarmMask ();  	p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	p.AiAlarms [i].Process ();  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < AiQ; i++' idx += 2) {  	p.AiAlarms [i] = new AlarmMask ();  	p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	p.AiAlarms [i].Process ();  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < AiQ; i++' idx += 4) {  	p.AiTs [i] = new DataTimestamp ();  	p.AiTs [i].Parse (buffer' idx);  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x104Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 4
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*           //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*           //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*           //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*           //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*           //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*           //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*           //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*           //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*           //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*           //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*           //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*           //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*           //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*           //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*           //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*           //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*           //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*           //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*           //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 2)  	p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 2)  	p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < CoilQ; i++' idx += 2)  	p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < CoilQ; i++' idx += 2)  	p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 2)  	p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 2)  	p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < CoilQ; i++' idx += 2)  	p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < CoilQ; i++' idx += 2)  	p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 4) {  	p.HiDiTs [i] = new DataTimestamp ();  	p.HiDiTs [i].Parse (buffer' idx);  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 4
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 4) {  	p.LoDiTs [i] = new DataTimestamp ();  	p.LoDiTs [i].Parse (buffer' idx);  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 4
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < CoilQ; i++' idx += 4) {  	p.HiCoilsTs [i] = new DataTimestamp ();  	p.HiCoilsTs [i].Parse (buffer' idx);  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 4
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < CoilQ; i++' idx += 4) {  	p.LoCoilsTs [i] = new DataTimestamp ();  	p.LoCoilsTs [i].Parse (buffer' idx);  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 4
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < AiQ; i++' idx += 2) {  	p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  	p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < AiQ; i++' idx += 2) {  	p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  	p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < AiQ; i++' idx += 2) {  	p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  	p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < AiQ; i++' idx += 2) {  	p.AiAlarms [i] = new AlarmMask ();  	p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	p.AiAlarms [i].Process ();  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < AiQ; i++' idx += 2) {  	p.AiAlarms [i] = new AlarmMask ();  	p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	p.AiAlarms [i].Process ();  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < AiQ; i++' idx += 4) {  	p.AiTs [i] = new DataTimestamp ();  	p.AiTs [i].Parse (buffer' idx);  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x105Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 4
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*         //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*         //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*         //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*         //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*         //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*         //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*         //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*         //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*         //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*         //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*         //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*         //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*         //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*         //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*         //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*         //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*         //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*         //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: try {  	int idx = 3;  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 2)  		p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < CoilQ; i++' idx += 2)  		p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.HiDiTs [i] = new DataTimestamp ();  		p.HiDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < InputQ; i++' idx += 4) {  		p.LoDiTs [i] = new DataTimestamp ();  		p.LoDiTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.HiCoilsTs [i] = new DataTimestamp ();  		p.HiCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < CoilQ; i++' idx += 4) {  		p.LoCoilsTs [i] = new DataTimestamp ();  		p.LoCoilsTs [i].Parse (buffer' idx);  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  		p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  	}  	for (int i = 0; i < AiQ; i++' idx += 2) {  		p.AiAlarms [i] = new AlarmMask ();  		p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		p.AiAlarms [i].Process ();  	}  	for (int i = 0; i < AiQ; i++' idx += 4) {  		p.AiTs [i] = new DataTimestamp ();  		p.AiTs [i].Parse (buffer' idx);  	}  	/*         //serial only         p.PowerSource = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         idx += 2;          for (int i = 0; i < AiQ; i++' idx += 2)         {           p.AiRawValues[i] = Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1]);         }          if ((Convert.ToUInt16(buffer[idx] * 256 + buffer[idx + 1])) > 0)           p.isConnected = true;         else           p.isConnected = false;         idx += 2;         */reslt = true;  	// copy data to this  	DIStatus = p.DIStatus;  	HiDiTs = p.HiDiTs;  	LoDiTs = p.LoDiTs;  	DICounter = p.DICounter;  	CoilStatus = p.CoilStatus;  	HiCoilsTs = p.HiCoilsTs;  	LoCoilsTs = p.LoCoilsTs;  	CoilCounter = p.CoilCounter;  	AiHValues = p.AiHValues;  	AiValues = p.AiValues;  	AiAlarms = p.AiAlarms;  	AiTs = p.AiTs;  	//serial only  	//PowerSource = p.PowerSource;  	//AiRawValues = p.AiRawValues;  	//isConnected = p.isConnected;  }  catch (Exception) {  	reslt = false;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 2)  	p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 2)  	p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.DIStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < CoilQ; i++' idx += 2)  	p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < CoilQ; i++' idx += 2)  	p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.CoilStatus [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 2)  	p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 2)  	p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.DICounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < CoilQ; i++' idx += 2)  	p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < CoilQ; i++' idx += 2)  	p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.CoilCounter [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 4) {  	p.HiDiTs [i] = new DataTimestamp ();  	p.HiDiTs [i].Parse (buffer' idx);  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 4
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < InputQ; i++' idx += 4) {  	p.LoDiTs [i] = new DataTimestamp ();  	p.LoDiTs [i].Parse (buffer' idx);  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 4
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < CoilQ; i++' idx += 4) {  	p.HiCoilsTs [i] = new DataTimestamp ();  	p.HiCoilsTs [i].Parse (buffer' idx);  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 4
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < CoilQ; i++' idx += 4) {  	p.LoCoilsTs [i] = new DataTimestamp ();  	p.LoCoilsTs [i].Parse (buffer' idx);  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 4
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < AiQ; i++' idx += 2) {  	p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  	p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < AiQ; i++' idx += 2) {  	p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  	p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < AiQ; i++' idx += 2) {  	p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	//p.AiHValues[i+1] = Convert.ToUInt16(buffer[idx+2] * 256 + buffer[idx + 3]);  	p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.AiHValues [i] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.AiValues [i] = Convert.ToDouble (p.AiHValues [i]) / 1000.0;  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < AiQ; i++' idx += 2) {  	p.AiAlarms [i] = new AlarmMask ();  	p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	p.AiAlarms [i].Process ();  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < AiQ; i++' idx += 2) {  	p.AiAlarms [i] = new AlarmMask ();  	p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	p.AiAlarms [i].Process ();  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 2
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: p.AiAlarms [i].value = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < AiQ; i++' idx += 4) {  	p.AiTs [i] = new DataTimestamp ();  	p.AiTs [i].Parse (buffer' idx);  }  
Magic Number,net.Tesacom.TsdProtocol.Edesur,Ric30x106Packet,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Edesur\EdesurProtocol.cs,Parse,The following statement contains a magic number: idx += 4
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,GetCRC,The following statement contains a magic number: for (int i = 0; i < (message.Length) - 2; i++) {  	CRCFull = (ushort)(CRCFull ^ message [i]);  	for (int j = 0; j < 8; j++) {  		CRCLSB = (char)(CRCFull & 0x0001);  		CRCFull = (ushort)((CRCFull >> 1) & 0x7FFF);  		if (CRCLSB == 1)  			CRCFull = (ushort)(CRCFull ^ 0xA001);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,GetCRC,The following statement contains a magic number: for (int i = 0; i < (message.Length) - 2; i++) {  	CRCFull = (ushort)(CRCFull ^ message [i]);  	for (int j = 0; j < 8; j++) {  		CRCLSB = (char)(CRCFull & 0x0001);  		CRCFull = (ushort)((CRCFull >> 1) & 0x7FFF);  		if (CRCLSB == 1)  			CRCFull = (ushort)(CRCFull ^ 0xA001);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,GetCRC,The following statement contains a magic number: for (int j = 0; j < 8; j++) {  	CRCLSB = (char)(CRCFull & 0x0001);  	CRCFull = (ushort)((CRCFull >> 1) & 0x7FFF);  	if (CRCLSB == 1)  		CRCFull = (ushort)(CRCFull ^ 0xA001);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,GetCRC,The following statement contains a magic number: CRC [1] = CRCHigh = (byte)((CRCFull >> 8) & 0xFF);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ValidateCRC,The following statement contains a magic number: if (crc [0] == Convert.ToByte (testPacket.Crc % 256))  	if (crc [1] == Convert.ToByte (testPacket.Crc / 256))  		reslt = true;  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ValidateCRC,The following statement contains a magic number: if (crc [0] == Convert.ToByte (testPacket.Crc % 256))  	if (crc [1] == Convert.ToByte (testPacket.Crc / 256))  		reslt = true;  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ValidateCRC,The following statement contains a magic number: if (crc [1] == Convert.ToByte (testPacket.Crc / 256))  	reslt = true;  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [2] = Convert.ToByte (Offset / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [2] = Convert.ToByte (Offset / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [3] = Convert.ToByte (Offset % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [3] = Convert.ToByte (Offset % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [4] = Convert.ToByte (Number / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [4] = Convert.ToByte (Number / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [5] = Convert.ToByte (Number % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [5] = Convert.ToByte (Number % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [6] = crc [0];  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [7] = crc [1];  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [1] == 1 || buffer [1] == 2 || buffer [1] == 3 || buffer [1] == 4) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [1] == 1 || buffer [1] == 2 || buffer [1] == 3 || buffer [1] == 4) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [1] == 1 || buffer [1] == 2 || buffer [1] == 3 || buffer [1] == 4) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [1] == 1 || buffer [1] == 2 || buffer [1] == 3 || buffer [1] == 4) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [1] == 1 || buffer [1] == 2 || buffer [1] == 3 || buffer [1] == 4) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [1] == 1 || buffer [1] == 2 || buffer [1] == 3 || buffer [1] == 4) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [1] == 1 || buffer [1] == 2 || buffer [1] == 3 || buffer [1] == 4) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [1] == 1 || buffer [1] == 2 || buffer [1] == 3 || buffer [1] == 4) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [1] == 1 || buffer [1] == 2 || buffer [1] == 3 || buffer [1] == 4) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [1] == 1 || buffer [1] == 2 || buffer [1] == 3 || buffer [1] == 4) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [1] == 1 || buffer [1] == 2 || buffer [1] == 3 || buffer [1] == 4) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [1] == 1 || buffer [1] == 2 || buffer [1] == 3 || buffer [1] == 4) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [1] == 1 || buffer [1] == 2 || buffer [1] == 3 || buffer [1] == 4) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [1] == 1 || buffer [1] == 2 || buffer [1] == 3 || buffer [1] == 4) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [1] == 1 || buffer [1] == 2 || buffer [1] == 3 || buffer [1] == 4) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [1] == 1 || buffer [1] == 2 || buffer [1] == 3 || buffer [1] == 4) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [1] == 1 || buffer [1] == 2 || buffer [1] == 3 || buffer [1] == 4) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [1] == 1 || buffer [1] == 2 || buffer [1] == 3 || buffer [1] == 4) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [1] == 1 || buffer [1] == 2 || buffer [1] == 3 || buffer [1] == 4) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [1] == 1 || buffer [1] == 2 || buffer [1] == 3 || buffer [1] == 4) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [1] == 1 || buffer [1] == 2 || buffer [1] == 3 || buffer [1] == 4) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [1] == 1 || buffer [1] == 2 || buffer [1] == 3 || buffer [1] == 4) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Offset = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Number = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [2] = Convert.ToByte (RegisterAddress / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [2] = Convert.ToByte (RegisterAddress / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [3] = Convert.ToByte (RegisterAddress % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [3] = Convert.ToByte (RegisterAddress % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [4] = Convert.ToByte (Value / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [4] = Convert.ToByte (Value / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [5] = Convert.ToByte (Value % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [5] = Convert.ToByte (Value % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [6] = crc [0];  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [7] = crc [1];  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [2] = Convert.ToByte (RegisterAddress / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [2] = Convert.ToByte (RegisterAddress / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [3] = Convert.ToByte (RegisterAddress % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [3] = Convert.ToByte (RegisterAddress % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [4] = Convert.ToByte (Value / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [4] = Convert.ToByte (Value / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [5] = Convert.ToByte (Value % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [5] = Convert.ToByte (Value % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [6] = crc [0];  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [7] = crc [1];  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [idx++] = Convert.ToByte (Offset / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [idx++] = Convert.ToByte (Offset % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [idx++] = Convert.ToByte (Number / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [idx++] = Convert.ToByte (Number % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: for (int i = 0; i < Values.Length; i++) {  	buffer [idx++] = Convert.ToByte (Values [i] / 256);  	buffer [idx++] = Convert.ToByte (Values [i] % 256);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: for (int i = 0; i < Values.Length; i++) {  	buffer [idx++] = Convert.ToByte (Values [i] / 256);  	buffer [idx++] = Convert.ToByte (Values [i] % 256);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [idx++] = Convert.ToByte (Values [i] / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [idx++] = Convert.ToByte (Values [i] % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [Length - 2] = crc [0];  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//try as function 16  	if (buff [idx + 1] != 0x10)  		return false;  	len = buff [offset + 6] + 9;  	byte[] buffer = new byte[len];  	for (int i = 0; i < len; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as function 16  	if ((buffer [len - 2] == crc [0]) && (buffer [len - 1] == crc [1])) {  		idx = offset;  		Address = buffer [idx++];  		Function = buffer [idx++];  		Offset = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  		Number = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  		Count = buffer [idx++];  		Values = new UInt16[Count / 2];  		for (int j = 0; j < Values.Length; j++) {  			Values [j] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  			idx += 2;  		}  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//try as function 16  	if (buff [idx + 1] != 0x10)  		return false;  	len = buff [offset + 6] + 9;  	byte[] buffer = new byte[len];  	for (int i = 0; i < len; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as function 16  	if ((buffer [len - 2] == crc [0]) && (buffer [len - 1] == crc [1])) {  		idx = offset;  		Address = buffer [idx++];  		Function = buffer [idx++];  		Offset = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  		Number = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  		Count = buffer [idx++];  		Values = new UInt16[Count / 2];  		for (int j = 0; j < Values.Length; j++) {  			Values [j] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  			idx += 2;  		}  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//try as function 16  	if (buff [idx + 1] != 0x10)  		return false;  	len = buff [offset + 6] + 9;  	byte[] buffer = new byte[len];  	for (int i = 0; i < len; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as function 16  	if ((buffer [len - 2] == crc [0]) && (buffer [len - 1] == crc [1])) {  		idx = offset;  		Address = buffer [idx++];  		Function = buffer [idx++];  		Offset = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  		Number = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  		Count = buffer [idx++];  		Values = new UInt16[Count / 2];  		for (int j = 0; j < Values.Length; j++) {  			Values [j] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  			idx += 2;  		}  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//try as function 16  	if (buff [idx + 1] != 0x10)  		return false;  	len = buff [offset + 6] + 9;  	byte[] buffer = new byte[len];  	for (int i = 0; i < len; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as function 16  	if ((buffer [len - 2] == crc [0]) && (buffer [len - 1] == crc [1])) {  		idx = offset;  		Address = buffer [idx++];  		Function = buffer [idx++];  		Offset = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  		Number = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  		Count = buffer [idx++];  		Values = new UInt16[Count / 2];  		for (int j = 0; j < Values.Length; j++) {  			Values [j] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  			idx += 2;  		}  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//try as function 16  	if (buff [idx + 1] != 0x10)  		return false;  	len = buff [offset + 6] + 9;  	byte[] buffer = new byte[len];  	for (int i = 0; i < len; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as function 16  	if ((buffer [len - 2] == crc [0]) && (buffer [len - 1] == crc [1])) {  		idx = offset;  		Address = buffer [idx++];  		Function = buffer [idx++];  		Offset = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  		Number = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  		Count = buffer [idx++];  		Values = new UInt16[Count / 2];  		for (int j = 0; j < Values.Length; j++) {  			Values [j] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  			idx += 2;  		}  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//try as function 16  	if (buff [idx + 1] != 0x10)  		return false;  	len = buff [offset + 6] + 9;  	byte[] buffer = new byte[len];  	for (int i = 0; i < len; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as function 16  	if ((buffer [len - 2] == crc [0]) && (buffer [len - 1] == crc [1])) {  		idx = offset;  		Address = buffer [idx++];  		Function = buffer [idx++];  		Offset = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  		Number = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  		Count = buffer [idx++];  		Values = new UInt16[Count / 2];  		for (int j = 0; j < Values.Length; j++) {  			Values [j] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  			idx += 2;  		}  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//try as function 16  	if (buff [idx + 1] != 0x10)  		return false;  	len = buff [offset + 6] + 9;  	byte[] buffer = new byte[len];  	for (int i = 0; i < len; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as function 16  	if ((buffer [len - 2] == crc [0]) && (buffer [len - 1] == crc [1])) {  		idx = offset;  		Address = buffer [idx++];  		Function = buffer [idx++];  		Offset = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  		Number = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  		Count = buffer [idx++];  		Values = new UInt16[Count / 2];  		for (int j = 0; j < Values.Length; j++) {  			Values [j] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  			idx += 2;  		}  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//try as function 16  	if (buff [idx + 1] != 0x10)  		return false;  	len = buff [offset + 6] + 9;  	byte[] buffer = new byte[len];  	for (int i = 0; i < len; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as function 16  	if ((buffer [len - 2] == crc [0]) && (buffer [len - 1] == crc [1])) {  		idx = offset;  		Address = buffer [idx++];  		Function = buffer [idx++];  		Offset = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  		Number = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  		Count = buffer [idx++];  		Values = new UInt16[Count / 2];  		for (int j = 0; j < Values.Length; j++) {  			Values [j] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  			idx += 2;  		}  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//try as function 16  	if (buff [idx + 1] != 0x10)  		return false;  	len = buff [offset + 6] + 9;  	byte[] buffer = new byte[len];  	for (int i = 0; i < len; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as function 16  	if ((buffer [len - 2] == crc [0]) && (buffer [len - 1] == crc [1])) {  		idx = offset;  		Address = buffer [idx++];  		Function = buffer [idx++];  		Offset = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  		Number = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  		Count = buffer [idx++];  		Values = new UInt16[Count / 2];  		for (int j = 0; j < Values.Length; j++) {  			Values [j] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  			idx += 2;  		}  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//try as function 16  	if (buff [idx + 1] != 0x10)  		return false;  	len = buff [offset + 6] + 9;  	byte[] buffer = new byte[len];  	for (int i = 0; i < len; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as function 16  	if ((buffer [len - 2] == crc [0]) && (buffer [len - 1] == crc [1])) {  		idx = offset;  		Address = buffer [idx++];  		Function = buffer [idx++];  		Offset = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  		Number = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  		Count = buffer [idx++];  		Values = new UInt16[Count / 2];  		for (int j = 0; j < Values.Length; j++) {  			Values [j] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  			idx += 2;  		}  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: len = buff [offset + 6] + 9;  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: len = buff [offset + 6] + 9;  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [len - 2] == crc [0]) && (buffer [len - 1] == crc [1])) {  	idx = offset;  	Address = buffer [idx++];  	Function = buffer [idx++];  	Offset = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	Number = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	Count = buffer [idx++];  	Values = new UInt16[Count / 2];  	for (int j = 0; j < Values.Length; j++) {  		Values [j] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  	}  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [len - 2] == crc [0]) && (buffer [len - 1] == crc [1])) {  	idx = offset;  	Address = buffer [idx++];  	Function = buffer [idx++];  	Offset = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	Number = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	Count = buffer [idx++];  	Values = new UInt16[Count / 2];  	for (int j = 0; j < Values.Length; j++) {  		Values [j] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  	}  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [len - 2] == crc [0]) && (buffer [len - 1] == crc [1])) {  	idx = offset;  	Address = buffer [idx++];  	Function = buffer [idx++];  	Offset = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	Number = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	Count = buffer [idx++];  	Values = new UInt16[Count / 2];  	for (int j = 0; j < Values.Length; j++) {  		Values [j] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  	}  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [len - 2] == crc [0]) && (buffer [len - 1] == crc [1])) {  	idx = offset;  	Address = buffer [idx++];  	Function = buffer [idx++];  	Offset = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	Number = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	Count = buffer [idx++];  	Values = new UInt16[Count / 2];  	for (int j = 0; j < Values.Length; j++) {  		Values [j] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  	}  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [len - 2] == crc [0]) && (buffer [len - 1] == crc [1])) {  	idx = offset;  	Address = buffer [idx++];  	Function = buffer [idx++];  	Offset = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	Number = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	Count = buffer [idx++];  	Values = new UInt16[Count / 2];  	for (int j = 0; j < Values.Length; j++) {  		Values [j] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  	}  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [len - 2] == crc [0]) && (buffer [len - 1] == crc [1])) {  	idx = offset;  	Address = buffer [idx++];  	Function = buffer [idx++];  	Offset = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	Number = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	Count = buffer [idx++];  	Values = new UInt16[Count / 2];  	for (int j = 0; j < Values.Length; j++) {  		Values [j] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  	}  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [len - 2] == crc [0]) && (buffer [len - 1] == crc [1])) {  	idx = offset;  	Address = buffer [idx++];  	Function = buffer [idx++];  	Offset = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	Number = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	Count = buffer [idx++];  	Values = new UInt16[Count / 2];  	for (int j = 0; j < Values.Length; j++) {  		Values [j] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  	}  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [len - 2] == crc [0]) && (buffer [len - 1] == crc [1])) {  	idx = offset;  	Address = buffer [idx++];  	Function = buffer [idx++];  	Offset = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	Number = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	Count = buffer [idx++];  	Values = new UInt16[Count / 2];  	for (int j = 0; j < Values.Length; j++) {  		Values [j] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  	}  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Offset = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: idx += 2;  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Number = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: idx += 2;  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Values = new UInt16[Count / 2];  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: for (int j = 0; j < Values.Length; j++) {  	Values [j] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: for (int j = 0; j < Values.Length; j++) {  	Values [j] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Values [j] = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusFunction16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: idx += 2;  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,AddData,The following statement contains a magic number: if (buffer.Length >= (start + len)) {  	int q = Convert.ToInt16 (Math.Truncate (len / 8.0) + 1);  	Data = new byte[q];  	for (int k = start; k < start + len; k += 8) {  		byte b = 0;  		if (len2 < 8)  			end = len2;  		else  			end = 8;  		mask = 0x01;  		for (int i = k; i < k + end; i++) {  			if (buffer [i] == true)  				b |= mask;  			mask <<= 1;  		}  		Data [idx++] = b;  		len2 -= 8;  	}  }  else {  	System.IndexOutOfRangeException ie = new IndexOutOfRangeException ();  	throw ie;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,AddData,The following statement contains a magic number: if (buffer.Length >= (start + len)) {  	int q = Convert.ToInt16 (Math.Truncate (len / 8.0) + 1);  	Data = new byte[q];  	for (int k = start; k < start + len; k += 8) {  		byte b = 0;  		if (len2 < 8)  			end = len2;  		else  			end = 8;  		mask = 0x01;  		for (int i = k; i < k + end; i++) {  			if (buffer [i] == true)  				b |= mask;  			mask <<= 1;  		}  		Data [idx++] = b;  		len2 -= 8;  	}  }  else {  	System.IndexOutOfRangeException ie = new IndexOutOfRangeException ();  	throw ie;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,AddData,The following statement contains a magic number: if (buffer.Length >= (start + len)) {  	int q = Convert.ToInt16 (Math.Truncate (len / 8.0) + 1);  	Data = new byte[q];  	for (int k = start; k < start + len; k += 8) {  		byte b = 0;  		if (len2 < 8)  			end = len2;  		else  			end = 8;  		mask = 0x01;  		for (int i = k; i < k + end; i++) {  			if (buffer [i] == true)  				b |= mask;  			mask <<= 1;  		}  		Data [idx++] = b;  		len2 -= 8;  	}  }  else {  	System.IndexOutOfRangeException ie = new IndexOutOfRangeException ();  	throw ie;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,AddData,The following statement contains a magic number: if (buffer.Length >= (start + len)) {  	int q = Convert.ToInt16 (Math.Truncate (len / 8.0) + 1);  	Data = new byte[q];  	for (int k = start; k < start + len; k += 8) {  		byte b = 0;  		if (len2 < 8)  			end = len2;  		else  			end = 8;  		mask = 0x01;  		for (int i = k; i < k + end; i++) {  			if (buffer [i] == true)  				b |= mask;  			mask <<= 1;  		}  		Data [idx++] = b;  		len2 -= 8;  	}  }  else {  	System.IndexOutOfRangeException ie = new IndexOutOfRangeException ();  	throw ie;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,AddData,The following statement contains a magic number: if (buffer.Length >= (start + len)) {  	int q = Convert.ToInt16 (Math.Truncate (len / 8.0) + 1);  	Data = new byte[q];  	for (int k = start; k < start + len; k += 8) {  		byte b = 0;  		if (len2 < 8)  			end = len2;  		else  			end = 8;  		mask = 0x01;  		for (int i = k; i < k + end; i++) {  			if (buffer [i] == true)  				b |= mask;  			mask <<= 1;  		}  		Data [idx++] = b;  		len2 -= 8;  	}  }  else {  	System.IndexOutOfRangeException ie = new IndexOutOfRangeException ();  	throw ie;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,AddData,The following statement contains a magic number: for (int k = start; k < start + len; k += 8) {  	byte b = 0;  	if (len2 < 8)  		end = len2;  	else  		end = 8;  	mask = 0x01;  	for (int i = k; i < k + end; i++) {  		if (buffer [i] == true)  			b |= mask;  		mask <<= 1;  	}  	Data [idx++] = b;  	len2 -= 8;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,AddData,The following statement contains a magic number: for (int k = start; k < start + len; k += 8) {  	byte b = 0;  	if (len2 < 8)  		end = len2;  	else  		end = 8;  	mask = 0x01;  	for (int i = k; i < k + end; i++) {  		if (buffer [i] == true)  			b |= mask;  		mask <<= 1;  	}  	Data [idx++] = b;  	len2 -= 8;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,AddData,The following statement contains a magic number: for (int k = start; k < start + len; k += 8) {  	byte b = 0;  	if (len2 < 8)  		end = len2;  	else  		end = 8;  	mask = 0x01;  	for (int i = k; i < k + end; i++) {  		if (buffer [i] == true)  			b |= mask;  		mask <<= 1;  	}  	Data [idx++] = b;  	len2 -= 8;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,AddData,The following statement contains a magic number: for (int k = start; k < start + len; k += 8) {  	byte b = 0;  	if (len2 < 8)  		end = len2;  	else  		end = 8;  	mask = 0x01;  	for (int i = k; i < k + end; i++) {  		if (buffer [i] == true)  			b |= mask;  		mask <<= 1;  	}  	Data [idx++] = b;  	len2 -= 8;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,AddData,The following statement contains a magic number: k += 8
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,AddData,The following statement contains a magic number: if (len2 < 8)  	end = len2;  else  	end = 8;  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,AddData,The following statement contains a magic number: if (len2 < 8)  	end = len2;  else  	end = 8;  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,AddData,The following statement contains a magic number: end = 8;  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,AddData,The following statement contains a magic number: len2 -= 8;  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,AddData,The following statement contains a magic number: if (buffer.Length >= (start + len)) {  	Data = new byte[len * 2];  	for (int i = 0' j = start; i < len * 2; i += 2' j++) {  		Data [i + 1] = Convert.ToByte (buffer [j] % 256);  		Data [i] = Convert.ToByte (buffer [j] / 256);  	}  }  else {  	System.IndexOutOfRangeException ie = new IndexOutOfRangeException ();  	throw ie;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,AddData,The following statement contains a magic number: if (buffer.Length >= (start + len)) {  	Data = new byte[len * 2];  	for (int i = 0' j = start; i < len * 2; i += 2' j++) {  		Data [i + 1] = Convert.ToByte (buffer [j] % 256);  		Data [i] = Convert.ToByte (buffer [j] / 256);  	}  }  else {  	System.IndexOutOfRangeException ie = new IndexOutOfRangeException ();  	throw ie;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,AddData,The following statement contains a magic number: if (buffer.Length >= (start + len)) {  	Data = new byte[len * 2];  	for (int i = 0' j = start; i < len * 2; i += 2' j++) {  		Data [i + 1] = Convert.ToByte (buffer [j] % 256);  		Data [i] = Convert.ToByte (buffer [j] / 256);  	}  }  else {  	System.IndexOutOfRangeException ie = new IndexOutOfRangeException ();  	throw ie;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,AddData,The following statement contains a magic number: if (buffer.Length >= (start + len)) {  	Data = new byte[len * 2];  	for (int i = 0' j = start; i < len * 2; i += 2' j++) {  		Data [i + 1] = Convert.ToByte (buffer [j] % 256);  		Data [i] = Convert.ToByte (buffer [j] / 256);  	}  }  else {  	System.IndexOutOfRangeException ie = new IndexOutOfRangeException ();  	throw ie;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,AddData,The following statement contains a magic number: if (buffer.Length >= (start + len)) {  	Data = new byte[len * 2];  	for (int i = 0' j = start; i < len * 2; i += 2' j++) {  		Data [i + 1] = Convert.ToByte (buffer [j] % 256);  		Data [i] = Convert.ToByte (buffer [j] / 256);  	}  }  else {  	System.IndexOutOfRangeException ie = new IndexOutOfRangeException ();  	throw ie;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,AddData,The following statement contains a magic number: Data = new byte[len * 2];  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,AddData,The following statement contains a magic number: for (int i = 0' j = start; i < len * 2; i += 2' j++) {  	Data [i + 1] = Convert.ToByte (buffer [j] % 256);  	Data [i] = Convert.ToByte (buffer [j] / 256);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,AddData,The following statement contains a magic number: for (int i = 0' j = start; i < len * 2; i += 2' j++) {  	Data [i + 1] = Convert.ToByte (buffer [j] % 256);  	Data [i] = Convert.ToByte (buffer [j] / 256);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,AddData,The following statement contains a magic number: for (int i = 0' j = start; i < len * 2; i += 2' j++) {  	Data [i + 1] = Convert.ToByte (buffer [j] % 256);  	Data [i] = Convert.ToByte (buffer [j] / 256);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,AddData,The following statement contains a magic number: for (int i = 0' j = start; i < len * 2; i += 2' j++) {  	Data [i + 1] = Convert.ToByte (buffer [j] % 256);  	Data [i] = Convert.ToByte (buffer [j] / 256);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,AddData,The following statement contains a magic number: i += 2
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,AddData,The following statement contains a magic number: Data [i + 1] = Convert.ToByte (buffer [j] % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,AddData,The following statement contains a magic number: Data [i] = Convert.ToByte (buffer [j] / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [2] = DataLength;  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: for (idx = 0; idx < Data.Length; idx++) {  	buffer [idx + 3] = Data [idx];  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [idx + 3] = Data [idx];  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: idx += 3;  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= (buff [offset + 2] + 2 + offset)) {  	byte[] buffer = new byte[buff [offset + 2] + 5];  	for (int i = 0; i < buff [offset + 2] + 2; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	if ((buffer [buffer.Length - 2] == crc [0]) && (buffer [buffer.Length - 1] == crc [1])) {  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		DataLength = buffer [offset + 2];  		for (int i = offset + 3' j = 0; i < buffer.Length; i++' j++)  			Data [j] = buffer [i];  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= (buff [offset + 2] + 2 + offset)) {  	byte[] buffer = new byte[buff [offset + 2] + 5];  	for (int i = 0; i < buff [offset + 2] + 2; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	if ((buffer [buffer.Length - 2] == crc [0]) && (buffer [buffer.Length - 1] == crc [1])) {  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		DataLength = buffer [offset + 2];  		for (int i = offset + 3' j = 0; i < buffer.Length; i++' j++)  			Data [j] = buffer [i];  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= (buff [offset + 2] + 2 + offset)) {  	byte[] buffer = new byte[buff [offset + 2] + 5];  	for (int i = 0; i < buff [offset + 2] + 2; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	if ((buffer [buffer.Length - 2] == crc [0]) && (buffer [buffer.Length - 1] == crc [1])) {  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		DataLength = buffer [offset + 2];  		for (int i = offset + 3' j = 0; i < buffer.Length; i++' j++)  			Data [j] = buffer [i];  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= (buff [offset + 2] + 2 + offset)) {  	byte[] buffer = new byte[buff [offset + 2] + 5];  	for (int i = 0; i < buff [offset + 2] + 2; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	if ((buffer [buffer.Length - 2] == crc [0]) && (buffer [buffer.Length - 1] == crc [1])) {  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		DataLength = buffer [offset + 2];  		for (int i = offset + 3' j = 0; i < buffer.Length; i++' j++)  			Data [j] = buffer [i];  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= (buff [offset + 2] + 2 + offset)) {  	byte[] buffer = new byte[buff [offset + 2] + 5];  	for (int i = 0; i < buff [offset + 2] + 2; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	if ((buffer [buffer.Length - 2] == crc [0]) && (buffer [buffer.Length - 1] == crc [1])) {  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		DataLength = buffer [offset + 2];  		for (int i = offset + 3' j = 0; i < buffer.Length; i++' j++)  			Data [j] = buffer [i];  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= (buff [offset + 2] + 2 + offset)) {  	byte[] buffer = new byte[buff [offset + 2] + 5];  	for (int i = 0; i < buff [offset + 2] + 2; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	if ((buffer [buffer.Length - 2] == crc [0]) && (buffer [buffer.Length - 1] == crc [1])) {  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		DataLength = buffer [offset + 2];  		for (int i = offset + 3' j = 0; i < buffer.Length; i++' j++)  			Data [j] = buffer [i];  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= (buff [offset + 2] + 2 + offset)) {  	byte[] buffer = new byte[buff [offset + 2] + 5];  	for (int i = 0; i < buff [offset + 2] + 2; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	if ((buffer [buffer.Length - 2] == crc [0]) && (buffer [buffer.Length - 1] == crc [1])) {  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		DataLength = buffer [offset + 2];  		for (int i = offset + 3' j = 0; i < buffer.Length; i++' j++)  			Data [j] = buffer [i];  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= (buff [offset + 2] + 2 + offset)) {  	byte[] buffer = new byte[buff [offset + 2] + 5];  	for (int i = 0; i < buff [offset + 2] + 2; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	if ((buffer [buffer.Length - 2] == crc [0]) && (buffer [buffer.Length - 1] == crc [1])) {  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		DataLength = buffer [offset + 2];  		for (int i = offset + 3' j = 0; i < buffer.Length; i++' j++)  			Data [j] = buffer [i];  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= (buff [offset + 2] + 2 + offset)) {  	byte[] buffer = new byte[buff [offset + 2] + 5];  	for (int i = 0; i < buff [offset + 2] + 2; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	if ((buffer [buffer.Length - 2] == crc [0]) && (buffer [buffer.Length - 1] == crc [1])) {  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		DataLength = buffer [offset + 2];  		for (int i = offset + 3' j = 0; i < buffer.Length; i++' j++)  			Data [j] = buffer [i];  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < buff [offset + 2] + 2; i++)  	buffer [i] = buff [offset + i];  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: for (int i = 0; i < buff [offset + 2] + 2; i++)  	buffer [i] = buff [offset + i];  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [buffer.Length - 2] == crc [0]) && (buffer [buffer.Length - 1] == crc [1])) {  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	DataLength = buffer [offset + 2];  	for (int i = offset + 3' j = 0; i < buffer.Length; i++' j++)  		Data [j] = buffer [i];  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [buffer.Length - 2] == crc [0]) && (buffer [buffer.Length - 1] == crc [1])) {  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	DataLength = buffer [offset + 2];  	for (int i = offset + 3' j = 0; i < buffer.Length; i++' j++)  		Data [j] = buffer [i];  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [buffer.Length - 2] == crc [0]) && (buffer [buffer.Length - 1] == crc [1])) {  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	DataLength = buffer [offset + 2];  	for (int i = offset + 3' j = 0; i < buffer.Length; i++' j++)  		Data [j] = buffer [i];  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: DataLength = buffer [offset + 2];  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: for (int i = offset + 3' j = 0; i < buffer.Length; i++' j++)  	Data [j] = buffer [i];  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [idx++] = Convert.ToByte (RegisterAddress / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [idx++] = Convert.ToByte (RegisterAddress % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [idx++] = Convert.ToByte (Value / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [idx++] = Convert.ToByte (Value % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 6  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 6  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 6  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 6  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 6  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 6  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 6  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 6  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 6  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse5,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [idx++] = Convert.ToByte (RegisterAddress / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [idx++] = Convert.ToByte (RegisterAddress % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [idx++] = Convert.ToByte (Value / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [idx++] = Convert.ToByte (Value % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 6  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 6  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 6  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 6  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 6  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 6  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 6  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 6  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as request' functions 6  	if (buffer [offset + 1] == 6) {  		if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  			reslt = true;  			Address = buffer [offset + 0];  			Function = buffer [offset + 1];  			RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  			Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  		}  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [offset + 1] == 6) {  	if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  		reslt = true;  		Address = buffer [offset + 0];  		Function = buffer [offset + 1];  		RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  		Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [6] == crc [0]) && (buffer [7] == crc [1])) {  	reslt = true;  	Address = buffer [offset + 0];  	Function = buffer [offset + 1];  	RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  	Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: RegisterAddress = Convert.ToUInt16 (buffer [offset + 2] * 256 + buffer [offset + 3]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse6,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Value = Convert.ToUInt16 (buffer [offset + 4] * 256 + buffer [offset + 5]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [idx++] = Convert.ToByte (Offset / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [idx++] = Convert.ToByte (Offset % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [idx++] = Convert.ToByte (Number / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [idx++] = Convert.ToByte (Number % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [Length - 2] = crc [0];  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//try as response 16  	if (buff [idx + 1] != 0x10)  		return false;  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as function 16  	if ((buffer [Length - 2] == crc [0]) && (buffer [Length - 1] == crc [1])) {  		idx = offset;  		Address = buffer [idx++];  		Function = buffer [idx++];  		Offset = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  		Number = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//try as response 16  	if (buff [idx + 1] != 0x10)  		return false;  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as function 16  	if ((buffer [Length - 2] == crc [0]) && (buffer [Length - 1] == crc [1])) {  		idx = offset;  		Address = buffer [idx++];  		Function = buffer [idx++];  		Offset = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  		Number = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//try as response 16  	if (buff [idx + 1] != 0x10)  		return false;  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as function 16  	if ((buffer [Length - 2] == crc [0]) && (buffer [Length - 1] == crc [1])) {  		idx = offset;  		Address = buffer [idx++];  		Function = buffer [idx++];  		Offset = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  		Number = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//try as response 16  	if (buff [idx + 1] != 0x10)  		return false;  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as function 16  	if ((buffer [Length - 2] == crc [0]) && (buffer [Length - 1] == crc [1])) {  		idx = offset;  		Address = buffer [idx++];  		Function = buffer [idx++];  		Offset = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  		Number = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//try as response 16  	if (buff [idx + 1] != 0x10)  		return false;  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	GetCRC (buffer' ref crc);  	//try as function 16  	if ((buffer [Length - 2] == crc [0]) && (buffer [Length - 1] == crc [1])) {  		idx = offset;  		Address = buffer [idx++];  		Function = buffer [idx++];  		Offset = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  		Number = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  		idx += 2;  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [Length - 2] == crc [0]) && (buffer [Length - 1] == crc [1])) {  	idx = offset;  	Address = buffer [idx++];  	Function = buffer [idx++];  	Offset = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	Number = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [Length - 2] == crc [0]) && (buffer [Length - 1] == crc [1])) {  	idx = offset;  	Address = buffer [idx++];  	Function = buffer [idx++];  	Offset = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	Number = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [Length - 2] == crc [0]) && (buffer [Length - 1] == crc [1])) {  	idx = offset;  	Address = buffer [idx++];  	Function = buffer [idx++];  	Offset = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	Number = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [Length - 2] == crc [0]) && (buffer [Length - 1] == crc [1])) {  	idx = offset;  	Address = buffer [idx++];  	Function = buffer [idx++];  	Offset = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	Number = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if ((buffer [Length - 2] == crc [0]) && (buffer [Length - 1] == crc [1])) {  	idx = offset;  	Address = buffer [idx++];  	Function = buffer [idx++];  	Offset = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	Number = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  	idx += 2;  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Offset = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: idx += 2;  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Number = Convert.ToUInt16 (buffer [idx] * 256 + buffer [idx + 1]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusResponse16,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: idx += 2;  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,getResponseFromRTU,The following statement contains a magic number: resp.DataLength = rtu [2];  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,getResponseFromRTU,The following statement contains a magic number: for (int i = 3' j = 0; j < resp.DataLength; i++' j++)  	resp.Data [j] = rtu [i];  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [0] = Convert.ToByte (TransactionIdentifier / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [1] = Convert.ToByte (TransactionIdentifier % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [2] = Convert.ToByte (ProtocolIdentifier / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [2] = Convert.ToByte (ProtocolIdentifier / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [3] = Convert.ToByte (ProtocolIdentifier % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [3] = Convert.ToByte (ProtocolIdentifier % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [4] = Convert.ToByte (MessageLength / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [4] = Convert.ToByte (MessageLength / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [5] = Convert.ToByte (MessageLength % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [5] = Convert.ToByte (MessageLength % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [6] = Address;  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [7] = Function;  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [8] = DataLength;  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: for (int i = 0; i < DataLength; i++) {  	buffer [i + 9] = Data [i];  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpResponse,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [i + 9] = Data [i];  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [0] = Convert.ToByte (TransactionIdentifier / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [1] = Convert.ToByte (TransactionIdentifier % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [2] = Convert.ToByte (ProtocolIdentifier / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [2] = Convert.ToByte (ProtocolIdentifier / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [3] = Convert.ToByte (ProtocolIdentifier % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [3] = Convert.ToByte (ProtocolIdentifier % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [4] = Convert.ToByte (MessageLength / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [4] = Convert.ToByte (MessageLength / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [5] = Convert.ToByte (MessageLength % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [5] = Convert.ToByte (MessageLength % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [6] = Address;  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [7] = Function;  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [8] = Convert.ToByte (Offset / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [8] = Convert.ToByte (Offset / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [9] = Convert.ToByte (Offset % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [9] = Convert.ToByte (Offset % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [10] = Convert.ToByte (Number / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [10] = Convert.ToByte (Number / 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [11] = Convert.ToByte (Number % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ToBytes,The following statement contains a magic number: buffer [11] = Convert.ToByte (Number % 256);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//copy useful bytes to buffer  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	//calculate crc  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  		TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  		ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  		MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  		Address = buffer [6];  		Function = buffer [7];  		Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  		Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  		Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//copy useful bytes to buffer  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	//calculate crc  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  		TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  		ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  		MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  		Address = buffer [6];  		Function = buffer [7];  		Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  		Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  		Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//copy useful bytes to buffer  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	//calculate crc  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  		TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  		ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  		MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  		Address = buffer [6];  		Function = buffer [7];  		Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  		Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  		Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//copy useful bytes to buffer  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	//calculate crc  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  		TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  		ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  		MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  		Address = buffer [6];  		Function = buffer [7];  		Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  		Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  		Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//copy useful bytes to buffer  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	//calculate crc  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  		TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  		ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  		MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  		Address = buffer [6];  		Function = buffer [7];  		Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  		Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  		Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//copy useful bytes to buffer  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	//calculate crc  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  		TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  		ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  		MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  		Address = buffer [6];  		Function = buffer [7];  		Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  		Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  		Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//copy useful bytes to buffer  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	//calculate crc  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  		TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  		ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  		MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  		Address = buffer [6];  		Function = buffer [7];  		Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  		Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  		Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//copy useful bytes to buffer  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	//calculate crc  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  		TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  		ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  		MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  		Address = buffer [6];  		Function = buffer [7];  		Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  		Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  		Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//copy useful bytes to buffer  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	//calculate crc  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  		TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  		ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  		MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  		Address = buffer [6];  		Function = buffer [7];  		Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  		Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  		Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//copy useful bytes to buffer  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	//calculate crc  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  		TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  		ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  		MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  		Address = buffer [6];  		Function = buffer [7];  		Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  		Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  		Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//copy useful bytes to buffer  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	//calculate crc  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  		TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  		ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  		MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  		Address = buffer [6];  		Function = buffer [7];  		Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  		Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  		Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//copy useful bytes to buffer  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	//calculate crc  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  		TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  		ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  		MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  		Address = buffer [6];  		Function = buffer [7];  		Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  		Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  		Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//copy useful bytes to buffer  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	//calculate crc  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  		TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  		ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  		MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  		Address = buffer [6];  		Function = buffer [7];  		Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  		Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  		Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//copy useful bytes to buffer  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	//calculate crc  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  		TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  		ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  		MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  		Address = buffer [6];  		Function = buffer [7];  		Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  		Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  		Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//copy useful bytes to buffer  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	//calculate crc  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  		TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  		ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  		MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  		Address = buffer [6];  		Function = buffer [7];  		Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  		Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  		Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//copy useful bytes to buffer  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	//calculate crc  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  		TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  		ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  		MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  		Address = buffer [6];  		Function = buffer [7];  		Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  		Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  		Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//copy useful bytes to buffer  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	//calculate crc  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  		TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  		ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  		MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  		Address = buffer [6];  		Function = buffer [7];  		Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  		Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  		Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//copy useful bytes to buffer  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	//calculate crc  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  		TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  		ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  		MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  		Address = buffer [6];  		Function = buffer [7];  		Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  		Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  		Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//copy useful bytes to buffer  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	//calculate crc  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  		TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  		ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  		MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  		Address = buffer [6];  		Function = buffer [7];  		Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  		Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  		Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//copy useful bytes to buffer  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	//calculate crc  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  		TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  		ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  		MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  		Address = buffer [6];  		Function = buffer [7];  		Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  		Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  		Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//copy useful bytes to buffer  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	//calculate crc  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  		TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  		ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  		MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  		Address = buffer [6];  		Function = buffer [7];  		Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  		Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  		Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//copy useful bytes to buffer  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	//calculate crc  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  		TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  		ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  		MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  		Address = buffer [6];  		Function = buffer [7];  		Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  		Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  		Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buff.Length >= Length + offset) {  	//copy useful bytes to buffer  	byte[] buffer = new byte[Length];  	for (int i = 0; i < Length; i++)  		buffer [i] = buff [offset + i];  	//calculate crc  	GetCRC (buffer' ref crc);  	//try as request' functions 1' 2' 3 or 4  	if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  		TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  		ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  		MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  		Address = buffer [6];  		Function = buffer [7];  		Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  		Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  		Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  	TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  	ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  	MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  	Address = buffer [6];  	Function = buffer [7];  	Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  	Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  	Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  	TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  	ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  	MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  	Address = buffer [6];  	Function = buffer [7];  	Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  	Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  	Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  	TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  	ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  	MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  	Address = buffer [6];  	Function = buffer [7];  	Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  	Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  	Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  	TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  	ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  	MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  	Address = buffer [6];  	Function = buffer [7];  	Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  	Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  	Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  	TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  	ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  	MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  	Address = buffer [6];  	Function = buffer [7];  	Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  	Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  	Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  	TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  	ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  	MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  	Address = buffer [6];  	Function = buffer [7];  	Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  	Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  	Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  	TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  	ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  	MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  	Address = buffer [6];  	Function = buffer [7];  	Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  	Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  	Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  	TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  	ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  	MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  	Address = buffer [6];  	Function = buffer [7];  	Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  	Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  	Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  	TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  	ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  	MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  	Address = buffer [6];  	Function = buffer [7];  	Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  	Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  	Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  	TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  	ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  	MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  	Address = buffer [6];  	Function = buffer [7];  	Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  	Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  	Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  	TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  	ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  	MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  	Address = buffer [6];  	Function = buffer [7];  	Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  	Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  	Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  	TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  	ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  	MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  	Address = buffer [6];  	Function = buffer [7];  	Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  	Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  	Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  	TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  	ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  	MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  	Address = buffer [6];  	Function = buffer [7];  	Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  	Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  	Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  	TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  	ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  	MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  	Address = buffer [6];  	Function = buffer [7];  	Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  	Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  	Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  	TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  	ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  	MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  	Address = buffer [6];  	Function = buffer [7];  	Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  	Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  	Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  	TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  	ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  	MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  	Address = buffer [6];  	Function = buffer [7];  	Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  	Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  	Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  	TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  	ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  	MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  	Address = buffer [6];  	Function = buffer [7];  	Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  	Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  	Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  	TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  	ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  	MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  	Address = buffer [6];  	Function = buffer [7];  	Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  	Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  	Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  	TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  	ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  	MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  	Address = buffer [6];  	Function = buffer [7];  	Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  	Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  	Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  	TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  	ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  	MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  	Address = buffer [6];  	Function = buffer [7];  	Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  	Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  	Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  	TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  	ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  	MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  	Address = buffer [6];  	Function = buffer [7];  	Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  	Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  	Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  	TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  	ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  	MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  	Address = buffer [6];  	Function = buffer [7];  	Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  	Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  	Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: if (buffer [7] == 1 || buffer [7] == 2 || buffer [7] == 3 || buffer [7] == 4) {  	TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  	ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  	MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  	Address = buffer [6];  	Function = buffer [7];  	Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  	Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  	Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  	reslt = true;  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: TransactionIdentifier = Convert.ToUInt16 (buffer [0] * 256 + buffer [1]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: ProtocolIdentifier = Convert.ToUInt16 (buffer [2] * 256 + buffer [3]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: MessageLength = Convert.ToUInt16 (buffer [4] * 256 + buffer [5]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Address = buffer [6];  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Function = buffer [7];  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Offset = Convert.ToUInt16 (buffer [8] * 256 + buffer [9]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Number = Convert.ToUInt16 (buffer [10] * 256 + buffer [11]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusTcpRequest,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,Parse,The following statement contains a magic number: Crc = Convert.ToUInt16 (crc [0] * 256 + crc [1]);  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusProtocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ParsePacket,The following statement contains a magic number: if (ModbusFunctionImplemented.CheckFunction (buffer [idx + 1])) {  	int len = buffer.Length - offset;  	byte[] buff = new byte[len];  	for (int i = 0; i < len; i++' idx++)  		buff [i] = buffer [idx];  	ModbusPacket.GetCRC (buff' ref crc);  	//try as function 16  	if ((buffer [buffer.Length - 2] == crc [0]) && (buffer [buffer.Length - 1] == crc [1])) {  		packet = new ModbusRequest ();  		packet.Address = buffer [offset + 0];  		packet.Function = buffer [offset + 1];  		reslt = true;  	}  }  
Magic Number,net.Tesacom.TsdProtocol.Modbus,ModbusProtocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,ParsePacket,The following statement contains a magic number: if ((buffer [buffer.Length - 2] == crc [0]) && (buffer [buffer.Length - 1] == crc [1])) {  	packet = new ModbusRequest ();  	packet.Address = buffer [offset + 0];  	packet.Function = buffer [offset + 1];  	reslt = true;  }  
Missing Default,net.Tesacom.TsdProtocol.DNP,DNPApplicationPacket,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPProtocol.cs,getDNPApplicationPacket,The following switch statement is missing a default case: switch (apciheader.functioncode.FunctionCode) {  case APCIFunctionCode.FunctionCodes.FC_DISABLE_UNSOLICITED:  case APCIFunctionCode.FunctionCodes.FC_ENABLE_UNSOLICITED:  case APCIFunctionCode.FunctionCodes.FC_WRITE:  	needSendConfirm = true;  	needUserData = false;  	break;  case APCIFunctionCode.FunctionCodes.FC_READ:  	needSendConfirm = false;  	needUserData = true;  	break;  }  
Missing Default,net.Tesacom.TsdProtocol.DNP,DNPServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\DNPServer.cs,Parse,The following switch statement is missing a default case: switch (node.Name.ToLower ()) {  case "localresetlink":  	try {  		LocalResetLink = bool.Parse (getValueInAttributes (node.Attributes' "false"));  	}  	catch (Exception) {  		LocalResetLink = false;  	}  	reslts.Add (string.Format ("Protocol id=\"{0}\" param LocalResetLink={1}"' ProtocolId' LocalResetLink));  	break;  case "slavestartidx":  	try {  		slaveStartIdx = UInt16.Parse (getValueInAttributes (node.Attributes' "false"));  	}  	catch (Exception) {  		slaveStartIdx = 0;  	}  	reslts.Add (string.Format ("Protocol id=\"{0}\" param slaveStartIdx={1}"' ProtocolId' slaveStartIdx));  	break;  case "slaveendidx":  	try {  		slaveEndIdx = UInt16.Parse (getValueInAttributes (node.Attributes' "false"));  	}  	catch (Exception) {  		slaveEndIdx = 0;  	}  	reslts.Add (string.Format ("Protocol id=\"{0}\" param slaveEndIdx={1}"' ProtocolId' slaveEndIdx));  	break;  }  
Missing Default,net.Tesacom.TsdProtocol.DNP.ObjectLayer,ObjectDefinition,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\DNP\Object\ObjectDefinition.cs,GetPrefixSizeAndValidate,The following switch statement is missing a default case: switch (((ushort)aCode << 8) | (ushort)aType) {  //allowed cases with no prefix  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_ALL_OBJ << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_START_STOP << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_FIXED):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_BITFIELD):  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 0;  //Objects prefixed with an index can only be OT_STATIC or OT_VARIABLE  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_FIXED):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_PLACEHOLDER):  	return 4;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_CNT_1B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_2B_CNT_2B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_4B_CNT_4B_INDEX << 8) | (ushort)TObjectTypes.OT_VARIABLE_BY_VARIATION):  	return 4;  // Objects prefixed with a size must be of variable length type  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_1B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 1;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_2B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 2;  case (((ushort)ObjectHeader.QualifierCode.QC_1B_VCNT_4B_SIZE << 8) | (ushort)TObjectTypes.OT_VARIABLE):  	return 4;  }  
Missing Default,net.Tesacom.TsdProtocol,TcpProtocolServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\TcpServer\TcpProtocolServer.cs,Parse,The following switch statement is missing a default case: switch (node.Name.ToLower ()) {  case "type":  	try {  		ProtocType = ProtocolType.Parse (getValueInAttributes (node.Attributes' "modbus"));  		reslt = true;  	}  	catch (Exception) {  		ProtocType = eProtocolType.Modbus;  	}  	reslts.Add (string.Format ("Protocol id=\"{0}\" param ProtocType={1}"' ProtocolId' ProtocType));  	break;  case "address":  	try {  		LocalAddress = IPAddress.Parse (getValueInAttributes (node.Attributes' "127.0.0.1")).ToString ();  	}  	catch (Exception) {  		LocalAddress = "127.0.0.1";  	}  	reslts.Add (string.Format ("Protocol id=\"{0}\" param address={1}"' ProtocolId' LocalAddress));  	break;  case "tcpport":  	try {  		TcpPort = Convert.ToInt16 (getValueInAttributes (node.Attributes' "502"));  	}  	catch (Exception) {  		TcpPort = 502;  	}  	reslts.Add (string.Format ("Protocol id=\"{0}\" param TcpPort={1}"' ProtocolId' TcpPort));  	break;  case "verbose":  	try {  		Verbose = TcpProtocolServer.ParseVerbose (Convert.ToUInt16 (getValueInAttributes (node.Attributes' "1")));  	}  	catch (Exception) {  	}  	reslts.Add (string.Format ("Protocol id=\"{0}\" param Verbose={1}"' ProtocolId' GetVerbose ()));  	break;  case "desc":  	try {  		Description = getValueInAttributes (node.Attributes' "");  	}  	catch (Exception) {  		Description = "";  	}  	reslts.Add (string.Format ("Protocol id=\"{0}\" param Description={1}"' ProtocolId' Description));  	break;  case "password":  	try {  		password = getValueInAttributes (node.Attributes' "");  	}  	catch (Exception) {  		password = "T3S4C0M";  	}  	reslts.Add (string.Format ("Protocol id=\"{0}\" param Password={1}"' ProtocolId' "Seteada"));  	break;  }  
Missing Default,net.Tesacom.TsdProtocol.IEC.IEC104Plus,IEC104PlusServer,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104PlusServer.cs,Parse,The following switch statement is missing a default case: switch (node.Name.ToLower ()) {  case "resetsequence":  	try {  		ResetSequenceAfterStart = bool.Parse (getValueInAttributes (node.Attributes' "false"));  	}  	catch (Exception) {  		ResetSequenceAfterStart = false;  	}  	break;  case "t2":  	try {  		T2 = int.Parse (getValueInAttributes (node.Attributes' "30"));  	}  	catch (Exception) {  		T2 = 30;  	}  	break;  }  
Missing Default,net.Tesacom.TsdProtocol.IEC.IEC104Plus,IEC104PlusProtocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104PlusProtocol.cs,getConfFromActPacket,The following switch statement is missing a default case: switch (req.apci.SFunction) {  case IEC104ApciSfunction.StartDtAct:  	resp.apci.Control1 = 0x0B;  	return resp;  case IEC104ApciSfunction.StopDtAct:  	resp.apci.Control1 = 0x23;  	return resp;  case IEC104ApciSfunction.TestFrAct:  	resp.apci.Control1 = 0x83;  	return resp;  }  
Missing Default,net.Tesacom.TsdProtocol.IEC.IEC104,IEC104Protocol,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\IEC\IEC104Protocol.cs,getConfFromActPacket,The following switch statement is missing a default case: switch (req.apci.SFunction) {  case IEC104ApciSfunction.StartDtAct:  	resp.apci.Control1 = 0x0B;  	return resp;  case IEC104ApciSfunction.StopDtAct:  	resp.apci.Control1 = 0x23;  	return resp;  case IEC104ApciSfunction.TestFrAct:  	resp.apci.Control1 = 0x83;  	return resp;  }  
Missing Default,net.Tesacom.TsdProtocol.RT,RTCategory,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,ParseXML,The following switch statement is missing a default case: switch (node.Name.ToLower ()) {  case lowerNodeName:  	return ParseXML (node' lookAtribbutes' out newCat' out reslts);  case lowerStrName:  	try {  		if (lookAtribbutes)  			newCat.Name = XmlUtils.GetValueInXmlAttributes (node.Attributes' StrNoCat);  		else  			newCat.Name = node.InnerText;  	}  	catch (Exception) {  		newCat.Name = StrNoCat;  	}  	reslts.Add (string.Format ("RTCategory Name=\"{0}\" "' newCat.Name));  	break;  case lowerStrDesc:  	try {  		if (lookAtribbutes)  			newCat.Desc = XmlUtils.GetValueInXmlAttributes (node.Attributes' StrNoCat);  		else  			newCat.Desc = node.InnerText;  	}  	catch (Exception) {  		newCat.Desc = StrNoCat;  	}  	reslts.Add (string.Format ("RTCategory Name=\"{0}\" Desc=\"{1}\" "' newCat.Name' newCat.Desc));  	break;  }  
Missing Default,net.Tesacom.TsdProtocol.RT,RTEndPoint,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,Parse,The following switch statement is missing a default case: switch (node.Name.ToLower ()) {  case "protocoladdress":  	try {  		e.ProtocolAddress = Convert.ToUInt16 (XmlUtils.GetValueInXmlAttributes (node.Attributes' "1"));  	}  	catch (Exception) {  		e.ProtocolAddress = 1;  	}  	results.Add (string.Format ("rt id=\"{0}\" param ProtocolAddress=\"{1}\""' RtId' e.ProtocolAddress));  	break;  case "rtport":  	try {  		e.RTPort = Convert.ToUInt16 (XmlUtils.GetValueInXmlAttributes (node.Attributes' "0"));  	}  	catch (Exception) {  		e.RTPort = 0;  	}  	results.Add (string.Format ("rt id=\"{0}\" param RTPort=\"{1}\""' RtId' e.RTPort));  	break;  case "verbose":  	try {  		e.Verbose = Convert.ToUInt16 (XmlUtils.GetValueInXmlAttributes (node.Attributes' "0"));  	}  	catch (Exception) {  		e.Verbose = 0;  	}  	results.Add (string.Format ("rt id=\"{0}\" param Verbose=\"{1}\""' RtId' e.Verbose));  	break;  }  
Missing Default,net.Tesacom.TsdProtocol.RT,RemoteTerm,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\RT\RT.cs,Parse,The following switch statement is missing a default case: switch (node.Name.ToLower ()) {  case "desc":  	try {  		Desc = XmlUtils.GetValueInXmlAttributes (node.Attributes' "");  	}  	catch (Exception) {  		Desc = "";  	}  	reslts.Add (string.Format ("rt id=\"{0}\" param Desc=\"{1}\""' UnitId' Desc));  	break;  case "protocolid":  	try {  		EndPoints.Add (RTEndPoint.Parse (node' UnitId' out tempReslts));  		foreach (string s in tempReslts)  			reslts.Add (s);  	}  	catch (Exception) {  	}  	break;  case "protocoladdress":  	try {  		if (EndPoints.Count == 1)  			EndPoints [0].ProtocolAddress = Convert.ToUInt16 (XmlUtils.GetValueInXmlAttributes (node.Attributes' "1"));  		else  			break;  	}  	catch (Exception) {  		EndPoints [0].ProtocolAddress = 1;  	}  	reslts.Add (string.Format ("rt id=\"{0}\" param ProtocolAddress=\"{1}\""' UnitId' EndPoints [0].ProtocolAddress));  	break;  case "connectionscount":  	try {  		ConnectionsCount = Convert.ToUInt16 (XmlUtils.GetValueInXmlAttributes (node.Attributes' "10"));  		reslts.Add (string.Format ("rt id=\"{0}\" param ConnectionsCount=\"{1}\""' UnitId' ConnectionsCount));  	}  	catch (Exception) {  		ConnectionsCount = 10;  	}  	break;  case "site":  	try {  		Site = XmlUtils.GetValueInXmlAttributes (node.Attributes' "NO SITE");  		reslts.Add (string.Format ("rt id=\"{0}\" param Site=\"{1}\""' UnitId' Site));  	}  	catch (Exception) {  		Site = "NO SITE";  	}  	break;  case "secondaryconnection":  	try {  		UsesSecondaryRemoteTerminalConnection = Convert.ToBoolean (XmlUtils.GetValueInXmlAttributes (node.Attributes' "false"));  		reslts.Add (string.Format ("rt id=\"{0}\" param UsesSecondaryRemoteTerminalConnection=\"{1}\""' UnitId' UsesSecondaryRemoteTerminalConnection));  	}  	catch (Exception) {  		UsesSecondaryRemoteTerminalConnection = false;  	}  	break;  case "verbose":  	try {  		Verbose = Convert.ToUInt16 (XmlUtils.GetValueInXmlAttributes (node.Attributes' "2"));  		reslts.Add (string.Format ("rt id=\"{0}\" param Verbose=\"{1}\""' UnitId' Verbose));  	}  	catch (Exception) {  		Verbose = 2;  	}  	break;  case "cat":  case "category":  	try {  		bool parsed = false;  		RTCategory newCat = new RTCategory ();  		List<string> morereslts = new List<string> ();  		if (RTCategory.ParseXML (node' true' out newCat' out morereslts)) {  			parsed = true;  		}  		else {  			if (RTCategory.ParseXML (node' false' out newCat' out morereslts)) {  				parsed = true;  			}  		}  		if (parsed) {  			Category = newCat;  			reslts.Add (string.Format ("rt id=\"{0}\" param Category=\"{1}\""' UnitId' Category));  			foreach (string s in morereslts)  				reslts.Add (s);  		}  	}  	catch (Exception) {  	}  	break;  }  
Missing Default,net.Tesacom.TsdProtocol.Modbus,ModbusFunctionImplemented,C:\repos\jemc771_TsdWebApp\TsdProtocolSupport\Modbus\ModbusProtocol.cs,CheckFunction,The following switch statement is missing a default case: switch (testFunction) {  case ReadDiscreteInputs:  	reslt = true;  	break;  case ReadInputRegisters:  	reslt = true;  	break;  case ReadHoldingRegisters:  	reslt = true;  	break;  case WriteSingleRegister:  	reslt = true;  	break;  case WriteMultipleregisters:  	reslt = true;  	break;  }  
