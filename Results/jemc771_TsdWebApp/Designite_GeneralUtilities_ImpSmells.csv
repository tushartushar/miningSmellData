Implementation smell,Namespace,Class,File,Method,Description
Complex Method,net.Tesacom.GeneralUtilities,ActiveDirectoryWrapper,C:\repos\jemc771_TsdWebApp\GeneralUtilities\AuthenticationData.cs,PopulateUserDataStruct,Cyclomatic complexity of the method is 15
Complex Method,net.Tesacom.GeneralUtilities,CompressionUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\CompressionUtils.cs,Compress,Cyclomatic complexity of the method is 8
Complex Method,net.Tesacom.GeneralUtilities,LatLongBase,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,Parse,Cyclomatic complexity of the method is 25
Complex Method,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,getIntFromNibble,Cyclomatic complexity of the method is 21
Complex Method,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,getCharFromNibble,Cyclomatic complexity of the method is 22
Complex Method,net.Tesacom.GeneralUtilities,MailsDatabase,C:\repos\jemc771_TsdWebApp\GeneralUtilities\MailsDatabase.cs,isMail,Cyclomatic complexity of the method is 9
Complex Method,net.Tesacom.GeneralUtilities,XmlUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\XmlUtils.cs,MustReplaceNode,Cyclomatic complexity of the method is 10
Complex Method,net.Tesacom.GeneralUtilities,XmlUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\XmlUtils.cs,ReplaceNodeAndDelete,Cyclomatic complexity of the method is 11
Complex Method,net.Tesacom.GeneralUtilities,XmlUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\XmlUtils.cs,SortXmlNodeOnStringValue,Cyclomatic complexity of the method is 10
Complex Method,net.Tesacom.GeneralUtilities,XmlUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\XmlUtils.cs,SortXmlNodeOnIntValue,Cyclomatic complexity of the method is 12
Complex Method,net.Tesacom.GeneralUtilities,XmlUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\XmlUtils.cs,SortXmlNodeOnSubNodeOnIntValue,Cyclomatic complexity of the method is 13
Complex Method,net.Tesacom.GeneralUtilities,XmlUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\XmlUtils.cs,SortXmlNodeOnSubNodeValue,Cyclomatic complexity of the method is 9
Complex Method,net.Tesacom.GeneralUtilities,XmlUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\XmlUtils.cs,SortXmlNodeOnSubNodeOnIntValue,Cyclomatic complexity of the method is 13
Complex Method,net.Tesacom.GeneralUtilities,XmlUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\XmlUtils.cs,SortXmlNodeOnSubNodeValue,Cyclomatic complexity of the method is 9
Complex Method,net.Tesacom.GeneralUtilities.Config,ConfigFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ConfigFile.cs,setValue,Cyclomatic complexity of the method is 10
Complex Method,net.Tesacom.GeneralUtilities.Geographic,SquaredGeofence,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Geofence.cs,isPointInGeofence,Cyclomatic complexity of the method is 11
Complex Method,net.Tesacom.GeneralUtilities.Geographic,SquaredGeofence,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Geofence.cs,ParseXML,Cyclomatic complexity of the method is 41
Complex Method,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getLogType,Cyclomatic complexity of the method is 10
Complex Method,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,logFileName,Cyclomatic complexity of the method is 12
Complex Method,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,checkLogFileNumber,Cyclomatic complexity of the method is 15
Complex Method,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,writeToFile,Cyclomatic complexity of the method is 10
Complex Method,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getLogType,Cyclomatic complexity of the method is 10
Complex Method,GeneralUtilities,Parameter,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Parameter.cs,Parse,Cyclomatic complexity of the method is 24
Complex Method,net.Tesacom.GeneralUtilities.Serial,BaudUtilities,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Serial.cs,StrBaudRate,Cyclomatic complexity of the method is 10
Long Parameter List,net.Tesacom.GeneralUtilities,XmlUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\XmlUtils.cs,MustReplaceNode,The method has 5 parameters.
Long Parameter List,net.Tesacom.GeneralUtilities.Config,ConfigFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ConfigFile.cs,getConfigValue,The method has 5 parameters.
Long Parameter List,net.Tesacom.GeneralUtilities.Config,ConfigFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ConfigFile.cs,getConfigValue,The method has 5 parameters.
Long Parameter List,net.Tesacom.GeneralUtilities.Config,ConfigFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ConfigFile.cs,getConfigValue,The method has 5 parameters.
Long Parameter List,net.Tesacom.GeneralUtilities.Config,ConfigFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ConfigFile.cs,getConfigValue,The method has 5 parameters.
Long Parameter List,net.Tesacom.GeneralUtilities.Config,ConfigFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ConfigFile.cs,getConfigValue,The method has 5 parameters.
Long Parameter List,net.Tesacom.GeneralUtilities.Config,ConfigFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ConfigFile.cs,getConfigValue,The method has 5 parameters.
Long Parameter List,net.Tesacom.GeneralUtilities.Serial,SerialUtil,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Serial.cs,setPortValues,The method has 7 parameters.
Long Parameter List,net.Tesacom.GeneralUtilities.Serial,SerialUtil,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Serial.cs,openPortValues,The method has 7 parameters.
Long Parameter List,net.Tesacom.ServiceGuardian,ServiceGuardian,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ServiceGuardian.cs,TcpProbe,The method has 6 parameters.
Long Statement,net.Tesacom.GeneralUtilities,ActiveDirectoryWrapper,C:\repos\jemc771_TsdWebApp\GeneralUtilities\AuthenticationData.cs,GetUserDirectoryEntryDetails,The length of the statement  "		DirectoryEntry de = new DirectoryEntry (lDAPConnectionString' @ConfigurationSettings.AppSettings ["ldap_login_username"]' ConfigurationSettings.AppSettings ["ldap_login_password"]); " is 181.
Long Statement,net.Tesacom.GeneralUtilities,Position,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,GetDistance2,The length of the statement  "	//double a = Math.Pow(Math.Sin(d_latt / 2)' 2) + (Math.Cos(start_latt) * Math.Cos(end_latt) * Math.Pow(Math.Sin(d_long / 2)' 2)); " is 129.
Long Statement,net.Tesacom.GeneralUtilities,Position,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,GetDistance2,The length of the statement  "	double d = Math.Sin (start_latt) * Math.Sin (end_latt) + Math.Cos (start_latt) * Math.Cos (end_latt) * Math.Cos (start_long - end_long); " is 136.
Long Statement,net.Tesacom.GeneralUtilities,Position,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,GetDistance,The length of the statement  "		dydx = ((ERAD * oneF * Math.Sqrt ((1.0 - ((x + dx) * (x + dx)) / a2))) - (ERAD * oneF * Math.Sqrt ((1.0 - (x * x) / a2)))) / dx; " is 128.
Long Statement,net.Tesacom.GeneralUtilities,LatLongBase,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,ToBaseLongString,The length of the statement  "	reslt = string.Format ("{0}{1}{2}{3}{4}{5}"' deg.ToString ("###0")' charDeg' min.ToString ("##0")' charMin' sec.ToString ("##0.0###")' charSec); " is 144.
Long Statement,net.Tesacom.GeneralUtilities,NicoUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Utils.cs,LogProcessInformation,The length of the statement  "		int count2 = (proc.Threads).OfType<System.Diagnostics.ProcessThread> ().Where (t => t.ThreadState == System.Diagnostics.ThreadState.Running).Count (); " is 150.
Long Statement,net.Tesacom.GeneralUtilities,NicoUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Utils.cs,LogProcessInformation,The length of the statement  "		str = string.Format (" {{ \"ProcessInformation\" : {{\"Cantidad de Threads\" : \"{0}\"' \"ProcessThread Running\": \"{1}\"  "' count' count2); " is 142.
Long Statement,net.Tesacom.GeneralUtilities,NicoUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Utils.cs,LogProcessInformation,The length of the statement  "		str = string.Format ("{0}' \"WorkingSet64\": \"{1}\" "' str' ((float)proc.WorkingSet64 / 1024 / 1024).ToString ("#.####")); " is 123.
Long Statement,net.Tesacom.GeneralUtilities,NicoUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Utils.cs,LogProcessInformation,The length of the statement  "		str = string.Format ("{0}' \"PagedMemorySize64\": \"{1}\" "' str' ((float)proc.PagedMemorySize64 / 1024 / 1024).ToString ("#.####")); " is 133.
Long Statement,net.Tesacom.GeneralUtilities,NicoUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Utils.cs,LogProcessInformation,The length of the statement  "		str = string.Format ("{0}' \"VirtualMemorySize64\" : \"{1}\" "' str' ((float)proc.VirtualMemorySize64 / 1024 / 1024).ToString ("#.####")); " is 138.
Long Statement,net.Tesacom.GeneralUtilities,NicoUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Utils.cs,logRelevantInformation,The length of the statement  "		log.writeToLogFile (LogType.LOG_CONFIG' "Config"' "Main Application {0}' Version {1}"' assemName.Name' assemName.Version.ToString ()); " is 134.
Long Statement,net.Tesacom.GeneralUtilities,NicoUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Utils.cs,logRelevantInformation,The length of the statement  "		log.writeToLogFile (LogType.LOG_CONFIG' "Config"' "{0} dll' Version {1}"' assemName.Name' assemName.Version.ToString ()); " is 121.
Long Statement,net.Tesacom.GeneralUtilities,NicoUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Utils.cs,logRelevantInformation,The length of the statement  "			log.writeToLogFile (LogType.LOG_CONFIG' "Config"' "{0} {1}' Version {2}"' assemName.Name' t.Key' assemName.Version.ToString ()); " is 128.
Long Statement,net.Tesacom.GeneralUtilities.Config,ConfigFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ConfigFile.cs,getConfigValue,The length of the statement  "				log.writeToLogFile (Logger.LogType.LOG_CONFIG' module' "Parametro \"{0}\" no encontrado' usando el default: {1}"' param' val); " is 126.
Long Statement,net.Tesacom.GeneralUtilities.Config,ConfigFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ConfigFile.cs,getConfigValue,The length of the statement  "			log.writeToLogFile (Logger.LogType.LOG_CONFIG' module' "Parametro \"{0}\" no encontrado' usando el default: {1}"' param' val); " is 126.
Long Statement,net.Tesacom.GeneralUtilities.Config,ConfigFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ConfigFile.cs,getConfigValue,The length of the statement  "				log.writeToLogFile (Logger.LogType.LOG_CONFIG' module' "Parametro \"{0}\" no encontrado' usando el default: {1}"' attribName' val); " is 131.
Long Statement,net.Tesacom.GeneralUtilities.Config,ConfigFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ConfigFile.cs,getConfigValue,The length of the statement  "			log.writeToLogFile (Logger.LogType.LOG_CONFIG' module' "Parametro \"{0}\" no encontrado' usando el default: {1}"' attribName' val); " is 131.
Long Statement,net.Tesacom.GeneralUtilities.Config,ConfigFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ConfigFile.cs,getConfigValue,The length of the statement  "				log.writeToLogFile (Logger.LogType.LOG_CONFIG' module' "Parametro \"{0}\" no encontrado' usando el default: {1}"' param' val); " is 126.
Long Statement,net.Tesacom.GeneralUtilities.Config,ConfigFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ConfigFile.cs,getConfigValue,The length of the statement  "			log.writeToLogFile (Logger.LogType.LOG_CONFIG' module' "Parametro \"{0}\" no encontrado' usando el default: {1}"' param' val); " is 126.
Long Statement,net.Tesacom.GeneralUtilities.Config,ConfigFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ConfigFile.cs,getConfigValue,The length of the statement  "				log.writeToLogFile (Logger.LogType.LOG_CONFIG' module' "Parametro \"{0}\" no encontrado' usando el default: {1}"' attribName' val); " is 131.
Long Statement,net.Tesacom.GeneralUtilities.Config,ConfigFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ConfigFile.cs,getConfigValue,The length of the statement  "			log.writeToLogFile (Logger.LogType.LOG_CONFIG' module' "Parametro \"{0}\" no encontrado' usando el default: {1}"' attribName' val); " is 131.
Long Statement,net.Tesacom.GeneralUtilities.Config,ConfigFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ConfigFile.cs,getConfigValue,The length of the statement  "				log.writeToLogFile (Logger.LogType.LOG_CONFIG' module' "Parametro \"{0}\" no encontrado' usando el default: {1}"' param' val); " is 126.
Long Statement,net.Tesacom.GeneralUtilities.Config,ConfigFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ConfigFile.cs,getConfigValue,The length of the statement  "			log.writeToLogFile (Logger.LogType.LOG_CONFIG' module' "Parametro \"{0}\" no encontrado' usando el default: {1}"' param' val); " is 126.
Long Statement,net.Tesacom.GeneralUtilities.Config,ConfigFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ConfigFile.cs,getConfigValue,The length of the statement  "				log.writeToLogFile (Logger.LogType.LOG_CONFIG' module' "Parametro \"{0}\" no encontrado' usando el default: {1}"' attribName' val); " is 131.
Long Statement,net.Tesacom.GeneralUtilities.Config,ConfigFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ConfigFile.cs,getConfigValue,The length of the statement  "			log.writeToLogFile (Logger.LogType.LOG_CONFIG' module' "Parametro \"{0}\" no encontrado' usando el default: {1}"' attribName' val); " is 131.
Long Statement,net.Tesacom.GeneralUtilities.Config,ConfigFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ConfigFile.cs,getConfigValue,The length of the statement  "				log.writeToLogFile (Logger.LogType.LOG_CONFIG' module' "Parametro \"{0}\" no encontrado' usando el default: {1}"' param' val); " is 126.
Long Statement,net.Tesacom.GeneralUtilities.Config,ConfigFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ConfigFile.cs,getConfigValue,The length of the statement  "			log.writeToLogFile (Logger.LogType.LOG_CONFIG' module' "Parametro \"{0}\" no encontrado' usando el default: {1}"' param' val); " is 126.
Long Statement,net.Tesacom.GeneralUtilities.Config,ConfigFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ConfigFile.cs,getConfigValue,The length of the statement  "				log.writeToLogFile (Logger.LogType.LOG_CONFIG' module' "Parametro \"{0}\" no encontrado' usando el default: {1}"' attribName' val); " is 131.
Long Statement,net.Tesacom.GeneralUtilities.Config,ConfigFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ConfigFile.cs,getConfigValue,The length of the statement  "			log.writeToLogFile (Logger.LogType.LOG_CONFIG' module' "Parametro \"{0}\" no encontrado' usando el default: {1}"' attribName' val); " is 131.
Long Statement,net.Tesacom.GeneralUtilities.Config,ConfigFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ConfigFile.cs,getConfigValue,The length of the statement  "				log.writeToLogFile (Logger.LogType.LOG_CONFIG' module' "Parametro \"{0}\" no encontrado' usando el default: {1}"' param' val); " is 126.
Long Statement,net.Tesacom.GeneralUtilities.Config,ConfigFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ConfigFile.cs,getConfigValue,The length of the statement  "			log.writeToLogFile (Logger.LogType.LOG_CONFIG' module' "Parametro \"{0}\" no encontrado' usando el default: {1}"' param' val); " is 126.
Long Statement,net.Tesacom.GeneralUtilities.Config,ConfigFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ConfigFile.cs,getConfigValue,The length of the statement  "				log.writeToLogFile (Logger.LogType.LOG_CONFIG' module' "Parametro \"{0}\" no encontrado' usando el default: {1}"' attribName' val); " is 131.
Long Statement,net.Tesacom.GeneralUtilities.Config,ConfigFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ConfigFile.cs,getConfigValue,The length of the statement  "			log.writeToLogFile (Logger.LogType.LOG_CONFIG' module' "Parametro \"{0}\" no encontrado' usando el default: {1}"' attribName' val); " is 131.
Long Statement,net.Tesacom.GeneralUtilities.Config,ConfigFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ConfigFile.cs,getConfigValue,The length of the statement  "				log.writeToLogFile (Logger.LogType.LOG_CONFIG' module' "Parametro \"{0}\" no encontrado' usando el default: {1}"' param' val); " is 126.
Long Statement,net.Tesacom.GeneralUtilities.Config,ConfigFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ConfigFile.cs,getConfigValue,The length of the statement  "			log.writeToLogFile (Logger.LogType.LOG_CONFIG' module' "Parametro \"{0}\" no encontrado' usando el default: {1}"' param' val); " is 126.
Long Statement,net.Tesacom.GeneralUtilities.Config,ConfigFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ConfigFile.cs,getConfigValue,The length of the statement  "				log.writeToLogFile (Logger.LogType.LOG_CONFIG' module' "Parametro \"{0}\" no encontrado' usando el default: {1}"' attribName' val); " is 131.
Long Statement,net.Tesacom.GeneralUtilities.Config,ConfigFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ConfigFile.cs,getConfigValue,The length of the statement  "			log.writeToLogFile (Logger.LogType.LOG_CONFIG' module' "Parametro \"{0}\" no encontrado' usando el default: {1}"' attribName' val); " is 131.
Long Statement,net.Tesacom.GeneralUtilities.Geographic,SquaredGeofence,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Geofence.cs,ParseXML,The length of the statement  "						if ((pos1.Latitude.getValue () != DefaultPosition.Latitude) && (pos1.Longitude.getValue () != DefaultPosition.Longitude)) " is 121.
Long Statement,net.Tesacom.GeneralUtilities.Geographic,SquaredGeofence,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Geofence.cs,ParseXML,The length of the statement  "						if ((pos2.Latitude.getValue () != DefaultPosition.Latitude) && (pos2.Longitude.getValue () != DefaultPosition.Longitude)) " is 121.
Long Statement,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,logFileName,The length of the statement  "			localLogDir = string.Format ("{0}\\{1}\\{2}"' LogDir.Remove (logDir.Length - 1)' DateTime.Now.ToString ("yy")' DateTime.Now.ToString ("MM")); " is 141.
Long Statement,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,logFileName,The length of the statement  "			localLogDir = string.Format ("{0}{1}\\{2}\\{3}"' LogDir' DateTime.Now.ToString ("yy")' DateTime.Now.ToString ("MM")' DateTime.Now.ToString ("dd")); " is 147.
Long Statement,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,logFileName,The length of the statement  "			localLogDir = string.Format ("{0}\\{1}\\{2}\\{3}"' LogDir.Remove (logDir.Length - 1)' DateTime.Now.ToString ("yy")' DateTime.Now.ToString ("MM")' DateTime.Now.ToString ("dd")); " is 176.
Long Statement,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,logFileName,The length of the statement  "			localLogDir = string.Format ("{0}\\{1}\\{2}\\{3}"' LogDir' DateTime.Now.ToString ("yy")' DateTime.Now.ToString ("MM")' DateTime.Now.ToString ("dd")); " is 149.
Long Statement,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,logFileName,The length of the statement  "		return string.Format ("{0}\\{1}{2}.{3}.{4}"' localLogDir' LogRootFileName' DateTime.Now.ToString ("yyyyMMdd")' logFileNumber.ToString ("00")' logDefaultExtension); " is 163.
Long Statement,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,logFileName,The length of the statement  "		return string.Format ("{0}\\{1}{2}.{3}"' localLogDir' LogRootFileName' DateTime.Now.ToString ("yyyyMMdd")' logDefaultExtension); " is 128.
Long Statement,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,checkLogFileNumber,The length of the statement  "			localLogDir = string.Format ("{0}\\{1}\\{2}"' log.logDir.Remove (log.logDir.Length - 1)' DateTime.Now.ToString ("yy")' DateTime.Now.ToString ("MM")); " is 149.
Long Statement,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,checkLogFileNumber,The length of the statement  "			localLogDir = string.Format ("{0}{1}\\{2}\\{3}"' log.logDir' DateTime.Now.ToString ("yy")' DateTime.Now.ToString ("MM")' DateTime.Now.ToString ("dd")); " is 151.
Long Statement,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,checkLogFileNumber,The length of the statement  "			localLogDir = string.Format ("{0}\\{1}\\{2}\\{3}"' log.logDir.Remove (log.logDir.Length - 1)' DateTime.Now.ToString ("yy")' DateTime.Now.ToString ("MM")' DateTime.Now.ToString ("dd")); " is 184.
Long Statement,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,checkLogFileNumber,The length of the statement  "			localLogDir = string.Format ("{0}\\{1}\\{2}\\{3}"' log.logDir' DateTime.Now.ToString ("yy")' DateTime.Now.ToString ("MM")' DateTime.Now.ToString ("dd")); " is 153.
Long Statement,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,checkLogFileNumber,The length of the statement  "		files = Directory.GetFiles (localLogDir' string.Format ("{0}{1}.*.{2}"' log.LogRootFileName' DateTime.Now.ToString ("yyyyMMdd")' log.logDefaultExtension)); " is 155.
Long Statement,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,writeToFile,The length of the statement  "					logs.Add (getFormattedLog (string.Format ("No se puede abrir el archivo para agregar' mensaje: {0}' {1}"' ex.Data' ex.Message))); " is 129.
Long Statement,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,logFileName,The length of the statement  "		return string.Format ("{0}{1}{2}{3}.{4}.{5}"' LogDir' '\\'' logRootFileName' DateTime.Now.ToString ("yyyyMMdd")' logFileNumber.ToString ()' logDefaultExtension); " is 161.
Long Statement,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,logFileName,The length of the statement  "		return string.Format ("{0}{1}{2}{3}.{4}"' LogDir' '\\'' logRootFileName' DateTime.Now.ToString ("yyyyMMdd")' logDefaultExtension); " is 130.
Long Statement,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,checkLogFileNumber,The length of the statement  "	string[] files = Directory.GetFiles (log.logDir' string.Format ("{0}{1}.*.{2}"' log.logRootFileName' DateTime.Now.ToString ("yyyyMMdd")' log.logDefaultExtension)); " is 163.
Long Statement,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,writeToFile,The length of the statement  "			logs.Add (getFormattedLog (string.Format ("No se puede abrir el archivo para agregar' mensaje: {0}' {1}"' ex.Data' ex.Message))); " is 129.
Empty Catch Block,net.Tesacom.GeneralUtilities,LatLongBase,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,Parse,The method has an empty catch block.
Empty Catch Block,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToHexAscii,The method has an empty catch block.
Empty Catch Block,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToHexAscii,The method has an empty catch block.
Empty Catch Block,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToHexAsciiFromBytes,The method has an empty catch block.
Empty Catch Block,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToBytes,The method has an empty catch block.
Empty Catch Block,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToString,The method has an empty catch block.
Empty Catch Block,net.Tesacom.GeneralUtilities,XmlUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\XmlUtils.cs,GetValueInXmlAttributes,The method has an empty catch block.
Empty Catch Block,net.Tesacom.GeneralUtilities,XmlUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\XmlUtils.cs,GetValueInXmlAttribute,The method has an empty catch block.
Empty Catch Block,net.Tesacom.GeneralUtilities.Geographic,SquaredGeofence,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Geofence.cs,ParseXML,The method has an empty catch block.
Empty Catch Block,net.Tesacom.GeneralUtilities.Geographic,SquaredGeofence,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Geofence.cs,ParseXML,The method has an empty catch block.
Empty Catch Block,net.Tesacom.GeneralUtilities.Geographic,SquaredGeofence,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Geofence.cs,ParseXML,The method has an empty catch block.
Empty Catch Block,net.Tesacom.GeneralUtilities.Geographic,SquaredGeofence,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Geofence.cs,ParseXML,The method has an empty catch block.
Empty Catch Block,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,checkLogFileNumber,The method has an empty catch block.
Empty Catch Block,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,checkLogFileNumber,The method has an empty catch block.
Empty Catch Block,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,writeToFile,The method has an empty catch block.
Empty Catch Block,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,checkLogFileNumber,The method has an empty catch block.
Empty Catch Block,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,writeToFile,The method has an empty catch block.
Magic Number,net.Tesacom.GeneralUtilities,CompressionUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\CompressionUtils.cs,Compress,The following statement contains a magic number: try {  	byte[] buffer = Encoding.UTF8.GetBytes (text);  	using (MemoryStream ms = new MemoryStream ()) {  		using (GZipStream zip = new GZipStream (ms' CompressionMode.Compress' true)) {  			zip.Write (buffer' 0' buffer.Length);  		}  		ms.Position = 0;  		using (MemoryStream outStream = new MemoryStream ()) {  			byte[] compressed = new byte[ms.Length];  			ms.Read (compressed' 0' compressed.Length);  			byte[] gzBuffer = new byte[compressed.Length + 4];  			System.Buffer.BlockCopy (compressed' 0' gzBuffer' 4' compressed.Length);  			System.Buffer.BlockCopy (BitConverter.GetBytes (buffer.Length)' 0' gzBuffer' 0' 4);  			string final = Convert.ToBase64String (gzBuffer);  			return final;  		}  	}  }  catch (Exception ex) {  	return ex.Message;  }  
Magic Number,net.Tesacom.GeneralUtilities,CompressionUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\CompressionUtils.cs,Compress,The following statement contains a magic number: try {  	byte[] buffer = Encoding.UTF8.GetBytes (text);  	using (MemoryStream ms = new MemoryStream ()) {  		using (GZipStream zip = new GZipStream (ms' CompressionMode.Compress' true)) {  			zip.Write (buffer' 0' buffer.Length);  		}  		ms.Position = 0;  		using (MemoryStream outStream = new MemoryStream ()) {  			byte[] compressed = new byte[ms.Length];  			ms.Read (compressed' 0' compressed.Length);  			byte[] gzBuffer = new byte[compressed.Length + 4];  			System.Buffer.BlockCopy (compressed' 0' gzBuffer' 4' compressed.Length);  			System.Buffer.BlockCopy (BitConverter.GetBytes (buffer.Length)' 0' gzBuffer' 0' 4);  			string final = Convert.ToBase64String (gzBuffer);  			return final;  		}  	}  }  catch (Exception ex) {  	return ex.Message;  }  
Magic Number,net.Tesacom.GeneralUtilities,CompressionUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\CompressionUtils.cs,Compress,The following statement contains a magic number: try {  	byte[] buffer = Encoding.UTF8.GetBytes (text);  	using (MemoryStream ms = new MemoryStream ()) {  		using (GZipStream zip = new GZipStream (ms' CompressionMode.Compress' true)) {  			zip.Write (buffer' 0' buffer.Length);  		}  		ms.Position = 0;  		using (MemoryStream outStream = new MemoryStream ()) {  			byte[] compressed = new byte[ms.Length];  			ms.Read (compressed' 0' compressed.Length);  			byte[] gzBuffer = new byte[compressed.Length + 4];  			System.Buffer.BlockCopy (compressed' 0' gzBuffer' 4' compressed.Length);  			System.Buffer.BlockCopy (BitConverter.GetBytes (buffer.Length)' 0' gzBuffer' 0' 4);  			string final = Convert.ToBase64String (gzBuffer);  			return final;  		}  	}  }  catch (Exception ex) {  	return ex.Message;  }  
Magic Number,net.Tesacom.GeneralUtilities,CompressionUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\CompressionUtils.cs,Compress,The following statement contains a magic number: using (MemoryStream ms = new MemoryStream ()) {  	using (GZipStream zip = new GZipStream (ms' CompressionMode.Compress' true)) {  		zip.Write (buffer' 0' buffer.Length);  	}  	ms.Position = 0;  	using (MemoryStream outStream = new MemoryStream ()) {  		byte[] compressed = new byte[ms.Length];  		ms.Read (compressed' 0' compressed.Length);  		byte[] gzBuffer = new byte[compressed.Length + 4];  		System.Buffer.BlockCopy (compressed' 0' gzBuffer' 4' compressed.Length);  		System.Buffer.BlockCopy (BitConverter.GetBytes (buffer.Length)' 0' gzBuffer' 0' 4);  		string final = Convert.ToBase64String (gzBuffer);  		return final;  	}  }  
Magic Number,net.Tesacom.GeneralUtilities,CompressionUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\CompressionUtils.cs,Compress,The following statement contains a magic number: using (MemoryStream ms = new MemoryStream ()) {  	using (GZipStream zip = new GZipStream (ms' CompressionMode.Compress' true)) {  		zip.Write (buffer' 0' buffer.Length);  	}  	ms.Position = 0;  	using (MemoryStream outStream = new MemoryStream ()) {  		byte[] compressed = new byte[ms.Length];  		ms.Read (compressed' 0' compressed.Length);  		byte[] gzBuffer = new byte[compressed.Length + 4];  		System.Buffer.BlockCopy (compressed' 0' gzBuffer' 4' compressed.Length);  		System.Buffer.BlockCopy (BitConverter.GetBytes (buffer.Length)' 0' gzBuffer' 0' 4);  		string final = Convert.ToBase64String (gzBuffer);  		return final;  	}  }  
Magic Number,net.Tesacom.GeneralUtilities,CompressionUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\CompressionUtils.cs,Compress,The following statement contains a magic number: using (MemoryStream ms = new MemoryStream ()) {  	using (GZipStream zip = new GZipStream (ms' CompressionMode.Compress' true)) {  		zip.Write (buffer' 0' buffer.Length);  	}  	ms.Position = 0;  	using (MemoryStream outStream = new MemoryStream ()) {  		byte[] compressed = new byte[ms.Length];  		ms.Read (compressed' 0' compressed.Length);  		byte[] gzBuffer = new byte[compressed.Length + 4];  		System.Buffer.BlockCopy (compressed' 0' gzBuffer' 4' compressed.Length);  		System.Buffer.BlockCopy (BitConverter.GetBytes (buffer.Length)' 0' gzBuffer' 0' 4);  		string final = Convert.ToBase64String (gzBuffer);  		return final;  	}  }  
Magic Number,net.Tesacom.GeneralUtilities,CompressionUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\CompressionUtils.cs,Compress,The following statement contains a magic number: using (MemoryStream outStream = new MemoryStream ()) {  	byte[] compressed = new byte[ms.Length];  	ms.Read (compressed' 0' compressed.Length);  	byte[] gzBuffer = new byte[compressed.Length + 4];  	System.Buffer.BlockCopy (compressed' 0' gzBuffer' 4' compressed.Length);  	System.Buffer.BlockCopy (BitConverter.GetBytes (buffer.Length)' 0' gzBuffer' 0' 4);  	string final = Convert.ToBase64String (gzBuffer);  	return final;  }  
Magic Number,net.Tesacom.GeneralUtilities,CompressionUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\CompressionUtils.cs,Compress,The following statement contains a magic number: using (MemoryStream outStream = new MemoryStream ()) {  	byte[] compressed = new byte[ms.Length];  	ms.Read (compressed' 0' compressed.Length);  	byte[] gzBuffer = new byte[compressed.Length + 4];  	System.Buffer.BlockCopy (compressed' 0' gzBuffer' 4' compressed.Length);  	System.Buffer.BlockCopy (BitConverter.GetBytes (buffer.Length)' 0' gzBuffer' 0' 4);  	string final = Convert.ToBase64String (gzBuffer);  	return final;  }  
Magic Number,net.Tesacom.GeneralUtilities,CompressionUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\CompressionUtils.cs,Compress,The following statement contains a magic number: using (MemoryStream outStream = new MemoryStream ()) {  	byte[] compressed = new byte[ms.Length];  	ms.Read (compressed' 0' compressed.Length);  	byte[] gzBuffer = new byte[compressed.Length + 4];  	System.Buffer.BlockCopy (compressed' 0' gzBuffer' 4' compressed.Length);  	System.Buffer.BlockCopy (BitConverter.GetBytes (buffer.Length)' 0' gzBuffer' 0' 4);  	string final = Convert.ToBase64String (gzBuffer);  	return final;  }  
Magic Number,net.Tesacom.GeneralUtilities,CompressionUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\CompressionUtils.cs,Compress,The following statement contains a magic number: System.Buffer.BlockCopy (compressed' 0' gzBuffer' 4' compressed.Length);  
Magic Number,net.Tesacom.GeneralUtilities,CompressionUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\CompressionUtils.cs,Compress,The following statement contains a magic number: System.Buffer.BlockCopy (BitConverter.GetBytes (buffer.Length)' 0' gzBuffer' 0' 4);  
Magic Number,net.Tesacom.GeneralUtilities,CompressionUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\CompressionUtils.cs,Decompress,The following statement contains a magic number: try {  	byte[] gzBuffer = Convert.FromBase64String (compressedText);  	using (MemoryStream ms = new MemoryStream ()) {  		int msgLength = BitConverter.ToInt32 (gzBuffer' 0);  		ms.Write (gzBuffer' 4' gzBuffer.Length - 4);  		byte[] buffer = new byte[msgLength];  		ms.Position = 0;  		using (GZipStream zip = new GZipStream (ms' CompressionMode.Decompress)) {  			zip.Read (buffer' 0' buffer.Length);  		}  		return Encoding.UTF8.GetString (buffer);  	}  }  catch (Exception ex) {  	return ex.Message;  }  
Magic Number,net.Tesacom.GeneralUtilities,CompressionUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\CompressionUtils.cs,Decompress,The following statement contains a magic number: try {  	byte[] gzBuffer = Convert.FromBase64String (compressedText);  	using (MemoryStream ms = new MemoryStream ()) {  		int msgLength = BitConverter.ToInt32 (gzBuffer' 0);  		ms.Write (gzBuffer' 4' gzBuffer.Length - 4);  		byte[] buffer = new byte[msgLength];  		ms.Position = 0;  		using (GZipStream zip = new GZipStream (ms' CompressionMode.Decompress)) {  			zip.Read (buffer' 0' buffer.Length);  		}  		return Encoding.UTF8.GetString (buffer);  	}  }  catch (Exception ex) {  	return ex.Message;  }  
Magic Number,net.Tesacom.GeneralUtilities,CompressionUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\CompressionUtils.cs,Decompress,The following statement contains a magic number: using (MemoryStream ms = new MemoryStream ()) {  	int msgLength = BitConverter.ToInt32 (gzBuffer' 0);  	ms.Write (gzBuffer' 4' gzBuffer.Length - 4);  	byte[] buffer = new byte[msgLength];  	ms.Position = 0;  	using (GZipStream zip = new GZipStream (ms' CompressionMode.Decompress)) {  		zip.Read (buffer' 0' buffer.Length);  	}  	return Encoding.UTF8.GetString (buffer);  }  
Magic Number,net.Tesacom.GeneralUtilities,CompressionUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\CompressionUtils.cs,Decompress,The following statement contains a magic number: using (MemoryStream ms = new MemoryStream ()) {  	int msgLength = BitConverter.ToInt32 (gzBuffer' 0);  	ms.Write (gzBuffer' 4' gzBuffer.Length - 4);  	byte[] buffer = new byte[msgLength];  	ms.Position = 0;  	using (GZipStream zip = new GZipStream (ms' CompressionMode.Decompress)) {  		zip.Read (buffer' 0' buffer.Length);  	}  	return Encoding.UTF8.GetString (buffer);  }  
Magic Number,net.Tesacom.GeneralUtilities,CompressionUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\CompressionUtils.cs,Decompress,The following statement contains a magic number: ms.Write (gzBuffer' 4' gzBuffer.Length - 4);  
Magic Number,net.Tesacom.GeneralUtilities,CompressionUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\CompressionUtils.cs,Decompress,The following statement contains a magic number: ms.Write (gzBuffer' 4' gzBuffer.Length - 4);  
Magic Number,net.Tesacom.GeneralUtilities,PositionUtilities,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,DegreesTo,The following statement contains a magic number: if (Dest == PositionUnit.Radians) {  	return Degrees * (Math.PI / 180);  }  else {  	return Degrees * 1.1111111111111112;  }  
Magic Number,net.Tesacom.GeneralUtilities,PositionUtilities,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,DegreesTo,The following statement contains a magic number: if (Dest == PositionUnit.Radians) {  	return Degrees * (Math.PI / 180);  }  else {  	return Degrees * 1.1111111111111112;  }  
Magic Number,net.Tesacom.GeneralUtilities,PositionUtilities,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,DegreesTo,The following statement contains a magic number: return Degrees * (Math.PI / 180);  
Magic Number,net.Tesacom.GeneralUtilities,PositionUtilities,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,DegreesTo,The following statement contains a magic number: return Degrees * 1.1111111111111112;  
Magic Number,net.Tesacom.GeneralUtilities,PositionUtilities,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,getSigmatedAveragePosition,The following statement contains a magic number: foreach (Position p in positions) {  	//latitude  	val = p.Latitude.getValue () - av.Latitude.getValue ();  	val = Math.Pow (val' 2);  	sumLat += val;  	//longitude  	val = p.Longitude.getValue () - av.Longitude.getValue ();  	val = Math.Pow (val' 2);  	sumLon += val;  }  
Magic Number,net.Tesacom.GeneralUtilities,PositionUtilities,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,getSigmatedAveragePosition,The following statement contains a magic number: foreach (Position p in positions) {  	//latitude  	val = p.Latitude.getValue () - av.Latitude.getValue ();  	val = Math.Pow (val' 2);  	sumLat += val;  	//longitude  	val = p.Longitude.getValue () - av.Longitude.getValue ();  	val = Math.Pow (val' 2);  	sumLon += val;  }  
Magic Number,net.Tesacom.GeneralUtilities,PositionUtilities,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,getSigmatedAveragePosition,The following statement contains a magic number: val = Math.Pow (val' 2);  
Magic Number,net.Tesacom.GeneralUtilities,PositionUtilities,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,getSigmatedAveragePosition,The following statement contains a magic number: val = Math.Pow (val' 2);  
Magic Number,net.Tesacom.GeneralUtilities,Position,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,GetDistance2,The following statement contains a magic number: return 6371.0 * Math.Acos (d);  
Magic Number,net.Tesacom.GeneralUtilities,Position,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,GetDistance,The following statement contains a magic number: if (lat2 > lat1)  	steps = (int)(100 + 100 * (0.5 + (lat2 - lat1)));  else  	steps = (int)(100 + 100 * (0.5 + (lat1 - lat2)));  
Magic Number,net.Tesacom.GeneralUtilities,Position,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,GetDistance,The following statement contains a magic number: if (lat2 > lat1)  	steps = (int)(100 + 100 * (0.5 + (lat2 - lat1)));  else  	steps = (int)(100 + 100 * (0.5 + (lat1 - lat2)));  
Magic Number,net.Tesacom.GeneralUtilities,Position,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,GetDistance,The following statement contains a magic number: if (lat2 > lat1)  	steps = (int)(100 + 100 * (0.5 + (lat2 - lat1)));  else  	steps = (int)(100 + 100 * (0.5 + (lat1 - lat2)));  
Magic Number,net.Tesacom.GeneralUtilities,Position,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,GetDistance,The following statement contains a magic number: if (lat2 > lat1)  	steps = (int)(100 + 100 * (0.5 + (lat2 - lat1)));  else  	steps = (int)(100 + 100 * (0.5 + (lat1 - lat2)));  
Magic Number,net.Tesacom.GeneralUtilities,Position,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,GetDistance,The following statement contains a magic number: if (lat2 > lat1)  	steps = (int)(100 + 100 * (0.5 + (lat2 - lat1)));  else  	steps = (int)(100 + 100 * (0.5 + (lat1 - lat2)));  
Magic Number,net.Tesacom.GeneralUtilities,Position,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,GetDistance,The following statement contains a magic number: if (lat2 > lat1)  	steps = (int)(100 + 100 * (0.5 + (lat2 - lat1)));  else  	steps = (int)(100 + 100 * (0.5 + (lat1 - lat2)));  
Magic Number,net.Tesacom.GeneralUtilities,Position,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,GetDistance,The following statement contains a magic number: steps = (int)(100 + 100 * (0.5 + (lat2 - lat1)));  
Magic Number,net.Tesacom.GeneralUtilities,Position,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,GetDistance,The following statement contains a magic number: steps = (int)(100 + 100 * (0.5 + (lat2 - lat1)));  
Magic Number,net.Tesacom.GeneralUtilities,Position,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,GetDistance,The following statement contains a magic number: steps = (int)(100 + 100 * (0.5 + (lat2 - lat1)));  
Magic Number,net.Tesacom.GeneralUtilities,Position,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,GetDistance,The following statement contains a magic number: steps = (int)(100 + 100 * (0.5 + (lat1 - lat2)));  
Magic Number,net.Tesacom.GeneralUtilities,Position,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,GetDistance,The following statement contains a magic number: steps = (int)(100 + 100 * (0.5 + (lat1 - lat2)));  
Magic Number,net.Tesacom.GeneralUtilities,Position,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,GetDistance,The following statement contains a magic number: steps = (int)(100 + 100 * (0.5 + (lat1 - lat2)));  
Magic Number,net.Tesacom.GeneralUtilities,Position,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,GetDistance,The following statement contains a magic number: if (steps > 4000)  	steps = 4000;  
Magic Number,net.Tesacom.GeneralUtilities,Position,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,GetDistance,The following statement contains a magic number: if (steps > 4000)  	steps = 4000;  
Magic Number,net.Tesacom.GeneralUtilities,Position,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,GetDistance,The following statement contains a magic number: steps = 4000;  
Magic Number,net.Tesacom.GeneralUtilities,LatLongBase,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,setValue,The following statement contains a magic number: latlongbase = deg + min / 60;  
Magic Number,net.Tesacom.GeneralUtilities,LatLongBase,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,setValue,The following statement contains a magic number: latlongbase = deg + (min / 60) + (secs / 3600);  
Magic Number,net.Tesacom.GeneralUtilities,LatLongBase,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,setValue,The following statement contains a magic number: latlongbase = deg + (min / 60) + (secs / 3600);  
Magic Number,net.Tesacom.GeneralUtilities,LatLongBase,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,Parse,The following statement contains a magic number: try {  	switch (format) {  	case PositionFormat.FloatDeg:  		Parse (double.Parse (value));  		break;  	case PositionFormat.FloatMin:  		Parse (float.Parse (value) / 60);  		break;  	case PositionFormat.FloatDegS:  		val = value.Substring (0' value.Length - 2);  		val1 = value.Substring (value.Length - 1' 1);  		setValue (double.Parse (val)' val1);  		break;  	case PositionFormat.Decoded:  		var1 = 0;  		var2 = value.IndexOf ('°');  		val = value.Substring (0' var2 - var1);  		var1 = var2;  		var2 = value.IndexOf ('\'');  		val1 = value.Substring (var1 + 1' var2 - var1 - 1);  		var1 = var2;  		var2 = value.IndexOf ('\"');  		val2 = value.Substring (var1 + 1' var2 - var1 - 1);  		val3 = value.Substring (value.Length - 1' 1);  		setValue (int.Parse (val)' int.Parse (val1)' double.Parse (val2)' val3);  		break;  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.GeneralUtilities,LatLongBase,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,Parse,The following statement contains a magic number: try {  	switch (format) {  	case PositionFormat.FloatDeg:  		Parse (double.Parse (value));  		break;  	case PositionFormat.FloatMin:  		Parse (float.Parse (value) / 60);  		break;  	case PositionFormat.FloatDegS:  		val = value.Substring (0' value.Length - 2);  		val1 = value.Substring (value.Length - 1' 1);  		setValue (double.Parse (val)' val1);  		break;  	case PositionFormat.Decoded:  		var1 = 0;  		var2 = value.IndexOf ('°');  		val = value.Substring (0' var2 - var1);  		var1 = var2;  		var2 = value.IndexOf ('\'');  		val1 = value.Substring (var1 + 1' var2 - var1 - 1);  		var1 = var2;  		var2 = value.IndexOf ('\"');  		val2 = value.Substring (var1 + 1' var2 - var1 - 1);  		val3 = value.Substring (value.Length - 1' 1);  		setValue (int.Parse (val)' int.Parse (val1)' double.Parse (val2)' val3);  		break;  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.GeneralUtilities,LatLongBase,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,Parse,The following statement contains a magic number: switch (format) {  case PositionFormat.FloatDeg:  	Parse (double.Parse (value));  	break;  case PositionFormat.FloatMin:  	Parse (float.Parse (value) / 60);  	break;  case PositionFormat.FloatDegS:  	val = value.Substring (0' value.Length - 2);  	val1 = value.Substring (value.Length - 1' 1);  	setValue (double.Parse (val)' val1);  	break;  case PositionFormat.Decoded:  	var1 = 0;  	var2 = value.IndexOf ('°');  	val = value.Substring (0' var2 - var1);  	var1 = var2;  	var2 = value.IndexOf ('\'');  	val1 = value.Substring (var1 + 1' var2 - var1 - 1);  	var1 = var2;  	var2 = value.IndexOf ('\"');  	val2 = value.Substring (var1 + 1' var2 - var1 - 1);  	val3 = value.Substring (value.Length - 1' 1);  	setValue (int.Parse (val)' int.Parse (val1)' double.Parse (val2)' val3);  	break;  }  
Magic Number,net.Tesacom.GeneralUtilities,LatLongBase,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,Parse,The following statement contains a magic number: switch (format) {  case PositionFormat.FloatDeg:  	Parse (double.Parse (value));  	break;  case PositionFormat.FloatMin:  	Parse (float.Parse (value) / 60);  	break;  case PositionFormat.FloatDegS:  	val = value.Substring (0' value.Length - 2);  	val1 = value.Substring (value.Length - 1' 1);  	setValue (double.Parse (val)' val1);  	break;  case PositionFormat.Decoded:  	var1 = 0;  	var2 = value.IndexOf ('°');  	val = value.Substring (0' var2 - var1);  	var1 = var2;  	var2 = value.IndexOf ('\'');  	val1 = value.Substring (var1 + 1' var2 - var1 - 1);  	var1 = var2;  	var2 = value.IndexOf ('\"');  	val2 = value.Substring (var1 + 1' var2 - var1 - 1);  	val3 = value.Substring (value.Length - 1' 1);  	setValue (int.Parse (val)' int.Parse (val1)' double.Parse (val2)' val3);  	break;  }  
Magic Number,net.Tesacom.GeneralUtilities,LatLongBase,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,Parse,The following statement contains a magic number: Parse (float.Parse (value) / 60);  
Magic Number,net.Tesacom.GeneralUtilities,LatLongBase,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,Parse,The following statement contains a magic number: val = value.Substring (0' value.Length - 2);  
Magic Number,net.Tesacom.GeneralUtilities,LatLongBase,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,ToBaseLongString,The following statement contains a magic number: val = val * 60;  
Magic Number,net.Tesacom.GeneralUtilities,LatLongBase,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,ToBaseLongString,The following statement contains a magic number: sec = val * 60;  
Magic Number,net.Tesacom.GeneralUtilities,PositionLatitude,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,ToMinutesShortString,The following statement contains a magic number: if (latlongbase < 0) {  	p = "-";  	f = (float)(latlongbase + Degrees) * 60;  }  else {  	p = "+";  	f = (float)(latlongbase - Degrees) * 60;  }  
Magic Number,net.Tesacom.GeneralUtilities,PositionLatitude,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,ToMinutesShortString,The following statement contains a magic number: if (latlongbase < 0) {  	p = "-";  	f = (float)(latlongbase + Degrees) * 60;  }  else {  	p = "+";  	f = (float)(latlongbase - Degrees) * 60;  }  
Magic Number,net.Tesacom.GeneralUtilities,PositionLatitude,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,ToMinutesShortString,The following statement contains a magic number: f = (float)(latlongbase + Degrees) * 60;  
Magic Number,net.Tesacom.GeneralUtilities,PositionLatitude,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,ToMinutesShortString,The following statement contains a magic number: f = (float)(latlongbase - Degrees) * 60;  
Magic Number,net.Tesacom.GeneralUtilities,PositionLongitude,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,ToShortString,The following statement contains a magic number: if (latlongbase < 100)  	p = string.Format ("{0}0{1}"' p' Math.Abs (latlongbase * 100000).ToString ("#######"));  else  	p = string.Format ("{0}{1}"' p' Math.Abs (latlongbase * 100000).ToString ("########"));  
Magic Number,net.Tesacom.GeneralUtilities,PositionLongitude,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,ToShortString,The following statement contains a magic number: if (latlongbase < 100)  	p = string.Format ("{0}0{1}"' p' Math.Abs (latlongbase * 100000).ToString ("#######"));  else  	p = string.Format ("{0}{1}"' p' Math.Abs (latlongbase * 100000).ToString ("########"));  
Magic Number,net.Tesacom.GeneralUtilities,PositionLongitude,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,ToShortString,The following statement contains a magic number: if (latlongbase < 100)  	p = string.Format ("{0}0{1}"' p' Math.Abs (latlongbase * 100000).ToString ("#######"));  else  	p = string.Format ("{0}{1}"' p' Math.Abs (latlongbase * 100000).ToString ("########"));  
Magic Number,net.Tesacom.GeneralUtilities,PositionLongitude,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,ToShortString,The following statement contains a magic number: p = string.Format ("{0}0{1}"' p' Math.Abs (latlongbase * 100000).ToString ("#######"));  
Magic Number,net.Tesacom.GeneralUtilities,PositionLongitude,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,ToShortString,The following statement contains a magic number: p = string.Format ("{0}{1}"' p' Math.Abs (latlongbase * 100000).ToString ("########"));  
Magic Number,net.Tesacom.GeneralUtilities,PositionLongitude,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,ToMinutesShortString,The following statement contains a magic number: if (latlongbase < 0) {  	p = "-";  	f = (float)(latlongbase + Degrees) * 60;  }  else {  	p = "+";  	f = (float)(latlongbase - Degrees) * 60;  }  
Magic Number,net.Tesacom.GeneralUtilities,PositionLongitude,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,ToMinutesShortString,The following statement contains a magic number: if (latlongbase < 0) {  	p = "-";  	f = (float)(latlongbase + Degrees) * 60;  }  else {  	p = "+";  	f = (float)(latlongbase - Degrees) * 60;  }  
Magic Number,net.Tesacom.GeneralUtilities,PositionLongitude,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,ToMinutesShortString,The following statement contains a magic number: f = (float)(latlongbase + Degrees) * 60;  
Magic Number,net.Tesacom.GeneralUtilities,PositionLongitude,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,ToMinutesShortString,The following statement contains a magic number: f = (float)(latlongbase - Degrees) * 60;  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToBytes,The following statement contains a magic number: try {  	int q;  	string sval1;  	string sval2;  	if (hexAscii.Length % 2 == 0)  		q = hexAscii.Length / 2;  	else  		q = hexAscii.Length / 2 + 1;  	bytes = new byte[q];  	for (int i = 0; i < q; i++) {  		sval1 = hexAscii [i * 2].ToString ().ToUpper ();  		sval2 = hexAscii [(i * 2) + 1].ToString ().ToUpper ();  		//sval1 = hexAscii.Substring(i * 2' 1).ToUpper();  		//sval2 = hexAscii.Substring((i * 2)+1' 1).ToUpper();  		try {  			bytes [i] = Convert.ToByte (getIntFromNibble (sval1) * 16 + getIntFromNibble (sval2));  		}  		catch (Exception) {  			bytes [i] = 0;  		}  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToBytes,The following statement contains a magic number: try {  	int q;  	string sval1;  	string sval2;  	if (hexAscii.Length % 2 == 0)  		q = hexAscii.Length / 2;  	else  		q = hexAscii.Length / 2 + 1;  	bytes = new byte[q];  	for (int i = 0; i < q; i++) {  		sval1 = hexAscii [i * 2].ToString ().ToUpper ();  		sval2 = hexAscii [(i * 2) + 1].ToString ().ToUpper ();  		//sval1 = hexAscii.Substring(i * 2' 1).ToUpper();  		//sval2 = hexAscii.Substring((i * 2)+1' 1).ToUpper();  		try {  			bytes [i] = Convert.ToByte (getIntFromNibble (sval1) * 16 + getIntFromNibble (sval2));  		}  		catch (Exception) {  			bytes [i] = 0;  		}  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToBytes,The following statement contains a magic number: try {  	int q;  	string sval1;  	string sval2;  	if (hexAscii.Length % 2 == 0)  		q = hexAscii.Length / 2;  	else  		q = hexAscii.Length / 2 + 1;  	bytes = new byte[q];  	for (int i = 0; i < q; i++) {  		sval1 = hexAscii [i * 2].ToString ().ToUpper ();  		sval2 = hexAscii [(i * 2) + 1].ToString ().ToUpper ();  		//sval1 = hexAscii.Substring(i * 2' 1).ToUpper();  		//sval2 = hexAscii.Substring((i * 2)+1' 1).ToUpper();  		try {  			bytes [i] = Convert.ToByte (getIntFromNibble (sval1) * 16 + getIntFromNibble (sval2));  		}  		catch (Exception) {  			bytes [i] = 0;  		}  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToBytes,The following statement contains a magic number: try {  	int q;  	string sval1;  	string sval2;  	if (hexAscii.Length % 2 == 0)  		q = hexAscii.Length / 2;  	else  		q = hexAscii.Length / 2 + 1;  	bytes = new byte[q];  	for (int i = 0; i < q; i++) {  		sval1 = hexAscii [i * 2].ToString ().ToUpper ();  		sval2 = hexAscii [(i * 2) + 1].ToString ().ToUpper ();  		//sval1 = hexAscii.Substring(i * 2' 1).ToUpper();  		//sval2 = hexAscii.Substring((i * 2)+1' 1).ToUpper();  		try {  			bytes [i] = Convert.ToByte (getIntFromNibble (sval1) * 16 + getIntFromNibble (sval2));  		}  		catch (Exception) {  			bytes [i] = 0;  		}  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToBytes,The following statement contains a magic number: try {  	int q;  	string sval1;  	string sval2;  	if (hexAscii.Length % 2 == 0)  		q = hexAscii.Length / 2;  	else  		q = hexAscii.Length / 2 + 1;  	bytes = new byte[q];  	for (int i = 0; i < q; i++) {  		sval1 = hexAscii [i * 2].ToString ().ToUpper ();  		sval2 = hexAscii [(i * 2) + 1].ToString ().ToUpper ();  		//sval1 = hexAscii.Substring(i * 2' 1).ToUpper();  		//sval2 = hexAscii.Substring((i * 2)+1' 1).ToUpper();  		try {  			bytes [i] = Convert.ToByte (getIntFromNibble (sval1) * 16 + getIntFromNibble (sval2));  		}  		catch (Exception) {  			bytes [i] = 0;  		}  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToBytes,The following statement contains a magic number: try {  	int q;  	string sval1;  	string sval2;  	if (hexAscii.Length % 2 == 0)  		q = hexAscii.Length / 2;  	else  		q = hexAscii.Length / 2 + 1;  	bytes = new byte[q];  	for (int i = 0; i < q; i++) {  		sval1 = hexAscii [i * 2].ToString ().ToUpper ();  		sval2 = hexAscii [(i * 2) + 1].ToString ().ToUpper ();  		//sval1 = hexAscii.Substring(i * 2' 1).ToUpper();  		//sval2 = hexAscii.Substring((i * 2)+1' 1).ToUpper();  		try {  			bytes [i] = Convert.ToByte (getIntFromNibble (sval1) * 16 + getIntFromNibble (sval2));  		}  		catch (Exception) {  			bytes [i] = 0;  		}  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToBytes,The following statement contains a magic number: if (hexAscii.Length % 2 == 0)  	q = hexAscii.Length / 2;  else  	q = hexAscii.Length / 2 + 1;  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToBytes,The following statement contains a magic number: if (hexAscii.Length % 2 == 0)  	q = hexAscii.Length / 2;  else  	q = hexAscii.Length / 2 + 1;  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToBytes,The following statement contains a magic number: if (hexAscii.Length % 2 == 0)  	q = hexAscii.Length / 2;  else  	q = hexAscii.Length / 2 + 1;  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToBytes,The following statement contains a magic number: q = hexAscii.Length / 2;  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToBytes,The following statement contains a magic number: q = hexAscii.Length / 2 + 1;  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToBytes,The following statement contains a magic number: for (int i = 0; i < q; i++) {  	sval1 = hexAscii [i * 2].ToString ().ToUpper ();  	sval2 = hexAscii [(i * 2) + 1].ToString ().ToUpper ();  	//sval1 = hexAscii.Substring(i * 2' 1).ToUpper();  	//sval2 = hexAscii.Substring((i * 2)+1' 1).ToUpper();  	try {  		bytes [i] = Convert.ToByte (getIntFromNibble (sval1) * 16 + getIntFromNibble (sval2));  	}  	catch (Exception) {  		bytes [i] = 0;  	}  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToBytes,The following statement contains a magic number: for (int i = 0; i < q; i++) {  	sval1 = hexAscii [i * 2].ToString ().ToUpper ();  	sval2 = hexAscii [(i * 2) + 1].ToString ().ToUpper ();  	//sval1 = hexAscii.Substring(i * 2' 1).ToUpper();  	//sval2 = hexAscii.Substring((i * 2)+1' 1).ToUpper();  	try {  		bytes [i] = Convert.ToByte (getIntFromNibble (sval1) * 16 + getIntFromNibble (sval2));  	}  	catch (Exception) {  		bytes [i] = 0;  	}  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToBytes,The following statement contains a magic number: for (int i = 0; i < q; i++) {  	sval1 = hexAscii [i * 2].ToString ().ToUpper ();  	sval2 = hexAscii [(i * 2) + 1].ToString ().ToUpper ();  	//sval1 = hexAscii.Substring(i * 2' 1).ToUpper();  	//sval2 = hexAscii.Substring((i * 2)+1' 1).ToUpper();  	try {  		bytes [i] = Convert.ToByte (getIntFromNibble (sval1) * 16 + getIntFromNibble (sval2));  	}  	catch (Exception) {  		bytes [i] = 0;  	}  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToBytes,The following statement contains a magic number: sval1 = hexAscii [i * 2].ToString ().ToUpper ();  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToBytes,The following statement contains a magic number: sval2 = hexAscii [(i * 2) + 1].ToString ().ToUpper ();  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToBytes,The following statement contains a magic number: try {  	bytes [i] = Convert.ToByte (getIntFromNibble (sval1) * 16 + getIntFromNibble (sval2));  }  catch (Exception) {  	bytes [i] = 0;  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToBytes,The following statement contains a magic number: bytes [i] = Convert.ToByte (getIntFromNibble (sval1) * 16 + getIntFromNibble (sval2));  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,getIntFromNibble,The following statement contains a magic number: switch (s.ToUpper ()) {  case "A":  	i = 10;  	break;  case "B":  	i = 11;  	break;  case "C":  	i = 12;  	break;  case "D":  	i = 13;  	break;  case "E":  	i = 14;  	break;  case "F":  	i = 15;  	break;  default:  	i = System.Convert.ToByte (s);  	break;  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,getIntFromNibble,The following statement contains a magic number: switch (s.ToUpper ()) {  case "A":  	i = 10;  	break;  case "B":  	i = 11;  	break;  case "C":  	i = 12;  	break;  case "D":  	i = 13;  	break;  case "E":  	i = 14;  	break;  case "F":  	i = 15;  	break;  default:  	i = System.Convert.ToByte (s);  	break;  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,getIntFromNibble,The following statement contains a magic number: switch (s.ToUpper ()) {  case "A":  	i = 10;  	break;  case "B":  	i = 11;  	break;  case "C":  	i = 12;  	break;  case "D":  	i = 13;  	break;  case "E":  	i = 14;  	break;  case "F":  	i = 15;  	break;  default:  	i = System.Convert.ToByte (s);  	break;  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,getIntFromNibble,The following statement contains a magic number: switch (s.ToUpper ()) {  case "A":  	i = 10;  	break;  case "B":  	i = 11;  	break;  case "C":  	i = 12;  	break;  case "D":  	i = 13;  	break;  case "E":  	i = 14;  	break;  case "F":  	i = 15;  	break;  default:  	i = System.Convert.ToByte (s);  	break;  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,getIntFromNibble,The following statement contains a magic number: switch (s.ToUpper ()) {  case "A":  	i = 10;  	break;  case "B":  	i = 11;  	break;  case "C":  	i = 12;  	break;  case "D":  	i = 13;  	break;  case "E":  	i = 14;  	break;  case "F":  	i = 15;  	break;  default:  	i = System.Convert.ToByte (s);  	break;  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,getIntFromNibble,The following statement contains a magic number: switch (s.ToUpper ()) {  case "A":  	i = 10;  	break;  case "B":  	i = 11;  	break;  case "C":  	i = 12;  	break;  case "D":  	i = 13;  	break;  case "E":  	i = 14;  	break;  case "F":  	i = 15;  	break;  default:  	i = System.Convert.ToByte (s);  	break;  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,getIntFromNibble,The following statement contains a magic number: i = 10;  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,getIntFromNibble,The following statement contains a magic number: i = 11;  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,getIntFromNibble,The following statement contains a magic number: i = 12;  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,getIntFromNibble,The following statement contains a magic number: i = 13;  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,getIntFromNibble,The following statement contains a magic number: i = 14;  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,getIntFromNibble,The following statement contains a magic number: i = 15;  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,getCharFromNibble,The following statement contains a magic number: if (lowerNibble)  	byte2convert = (byte)(b % 16);  else  	byte2convert = (byte)(b / 16);  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,getCharFromNibble,The following statement contains a magic number: if (lowerNibble)  	byte2convert = (byte)(b % 16);  else  	byte2convert = (byte)(b / 16);  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,getCharFromNibble,The following statement contains a magic number: byte2convert = (byte)(b % 16);  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,getCharFromNibble,The following statement contains a magic number: byte2convert = (byte)(b / 16);  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,getCharFromNibble,The following statement contains a magic number: switch (byte2convert) {  case (10):  	c = 'A';  	break;  case (11):  	c = 'B';  	break;  case (12):  	c = 'C';  	break;  case (13):  	c = 'D';  	break;  case (14):  	c = 'E';  	break;  case (15):  	c = 'F';  	break;  default:  	c = System.Convert.ToChar (48 + byte2convert);  	break;  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,getCharFromNibble,The following statement contains a magic number: switch (byte2convert) {  case (10):  	c = 'A';  	break;  case (11):  	c = 'B';  	break;  case (12):  	c = 'C';  	break;  case (13):  	c = 'D';  	break;  case (14):  	c = 'E';  	break;  case (15):  	c = 'F';  	break;  default:  	c = System.Convert.ToChar (48 + byte2convert);  	break;  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,getCharFromNibble,The following statement contains a magic number: switch (byte2convert) {  case (10):  	c = 'A';  	break;  case (11):  	c = 'B';  	break;  case (12):  	c = 'C';  	break;  case (13):  	c = 'D';  	break;  case (14):  	c = 'E';  	break;  case (15):  	c = 'F';  	break;  default:  	c = System.Convert.ToChar (48 + byte2convert);  	break;  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,getCharFromNibble,The following statement contains a magic number: switch (byte2convert) {  case (10):  	c = 'A';  	break;  case (11):  	c = 'B';  	break;  case (12):  	c = 'C';  	break;  case (13):  	c = 'D';  	break;  case (14):  	c = 'E';  	break;  case (15):  	c = 'F';  	break;  default:  	c = System.Convert.ToChar (48 + byte2convert);  	break;  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,getCharFromNibble,The following statement contains a magic number: switch (byte2convert) {  case (10):  	c = 'A';  	break;  case (11):  	c = 'B';  	break;  case (12):  	c = 'C';  	break;  case (13):  	c = 'D';  	break;  case (14):  	c = 'E';  	break;  case (15):  	c = 'F';  	break;  default:  	c = System.Convert.ToChar (48 + byte2convert);  	break;  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,getCharFromNibble,The following statement contains a magic number: switch (byte2convert) {  case (10):  	c = 'A';  	break;  case (11):  	c = 'B';  	break;  case (12):  	c = 'C';  	break;  case (13):  	c = 'D';  	break;  case (14):  	c = 'E';  	break;  case (15):  	c = 'F';  	break;  default:  	c = System.Convert.ToChar (48 + byte2convert);  	break;  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,getCharFromNibble,The following statement contains a magic number: switch (byte2convert) {  case (10):  	c = 'A';  	break;  case (11):  	c = 'B';  	break;  case (12):  	c = 'C';  	break;  case (13):  	c = 'D';  	break;  case (14):  	c = 'E';  	break;  case (15):  	c = 'F';  	break;  default:  	c = System.Convert.ToChar (48 + byte2convert);  	break;  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,getCharFromNibble,The following statement contains a magic number: c = System.Convert.ToChar (48 + byte2convert);  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToString,The following statement contains a magic number: try {  	string remainingString = HexAsciiValue;  	string chars;  	// While there's still something to convert in the hex string  	while (remainingString.Length > 0) {  		// Use ToChar() to convert each ASCII value (two hex digits) to the actual character  		// Remove from the hex object the converted value  		//if the remaining bytes are one' pad with a cero  		if (remainingString.Length == 1) {  			chars = "0" + remainingString;  			remainingString = "";  		}  		else {  			chars = remainingString.Substring (0' 2);  			remainingString = remainingString.Substring (2' remainingString.Length - 2);  		}  		StrValue += System.Convert.ToChar (System.Convert.ToUInt32 (chars' 16)).ToString ();  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToString,The following statement contains a magic number: try {  	string remainingString = HexAsciiValue;  	string chars;  	// While there's still something to convert in the hex string  	while (remainingString.Length > 0) {  		// Use ToChar() to convert each ASCII value (two hex digits) to the actual character  		// Remove from the hex object the converted value  		//if the remaining bytes are one' pad with a cero  		if (remainingString.Length == 1) {  			chars = "0" + remainingString;  			remainingString = "";  		}  		else {  			chars = remainingString.Substring (0' 2);  			remainingString = remainingString.Substring (2' remainingString.Length - 2);  		}  		StrValue += System.Convert.ToChar (System.Convert.ToUInt32 (chars' 16)).ToString ();  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToString,The following statement contains a magic number: try {  	string remainingString = HexAsciiValue;  	string chars;  	// While there's still something to convert in the hex string  	while (remainingString.Length > 0) {  		// Use ToChar() to convert each ASCII value (two hex digits) to the actual character  		// Remove from the hex object the converted value  		//if the remaining bytes are one' pad with a cero  		if (remainingString.Length == 1) {  			chars = "0" + remainingString;  			remainingString = "";  		}  		else {  			chars = remainingString.Substring (0' 2);  			remainingString = remainingString.Substring (2' remainingString.Length - 2);  		}  		StrValue += System.Convert.ToChar (System.Convert.ToUInt32 (chars' 16)).ToString ();  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToString,The following statement contains a magic number: try {  	string remainingString = HexAsciiValue;  	string chars;  	// While there's still something to convert in the hex string  	while (remainingString.Length > 0) {  		// Use ToChar() to convert each ASCII value (two hex digits) to the actual character  		// Remove from the hex object the converted value  		//if the remaining bytes are one' pad with a cero  		if (remainingString.Length == 1) {  			chars = "0" + remainingString;  			remainingString = "";  		}  		else {  			chars = remainingString.Substring (0' 2);  			remainingString = remainingString.Substring (2' remainingString.Length - 2);  		}  		StrValue += System.Convert.ToChar (System.Convert.ToUInt32 (chars' 16)).ToString ();  	}  }  catch (Exception) {  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToString,The following statement contains a magic number: while (remainingString.Length > 0) {  	// Use ToChar() to convert each ASCII value (two hex digits) to the actual character  	// Remove from the hex object the converted value  	//if the remaining bytes are one' pad with a cero  	if (remainingString.Length == 1) {  		chars = "0" + remainingString;  		remainingString = "";  	}  	else {  		chars = remainingString.Substring (0' 2);  		remainingString = remainingString.Substring (2' remainingString.Length - 2);  	}  	StrValue += System.Convert.ToChar (System.Convert.ToUInt32 (chars' 16)).ToString ();  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToString,The following statement contains a magic number: while (remainingString.Length > 0) {  	// Use ToChar() to convert each ASCII value (two hex digits) to the actual character  	// Remove from the hex object the converted value  	//if the remaining bytes are one' pad with a cero  	if (remainingString.Length == 1) {  		chars = "0" + remainingString;  		remainingString = "";  	}  	else {  		chars = remainingString.Substring (0' 2);  		remainingString = remainingString.Substring (2' remainingString.Length - 2);  	}  	StrValue += System.Convert.ToChar (System.Convert.ToUInt32 (chars' 16)).ToString ();  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToString,The following statement contains a magic number: while (remainingString.Length > 0) {  	// Use ToChar() to convert each ASCII value (two hex digits) to the actual character  	// Remove from the hex object the converted value  	//if the remaining bytes are one' pad with a cero  	if (remainingString.Length == 1) {  		chars = "0" + remainingString;  		remainingString = "";  	}  	else {  		chars = remainingString.Substring (0' 2);  		remainingString = remainingString.Substring (2' remainingString.Length - 2);  	}  	StrValue += System.Convert.ToChar (System.Convert.ToUInt32 (chars' 16)).ToString ();  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToString,The following statement contains a magic number: while (remainingString.Length > 0) {  	// Use ToChar() to convert each ASCII value (two hex digits) to the actual character  	// Remove from the hex object the converted value  	//if the remaining bytes are one' pad with a cero  	if (remainingString.Length == 1) {  		chars = "0" + remainingString;  		remainingString = "";  	}  	else {  		chars = remainingString.Substring (0' 2);  		remainingString = remainingString.Substring (2' remainingString.Length - 2);  	}  	StrValue += System.Convert.ToChar (System.Convert.ToUInt32 (chars' 16)).ToString ();  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToString,The following statement contains a magic number: if (remainingString.Length == 1) {  	chars = "0" + remainingString;  	remainingString = "";  }  else {  	chars = remainingString.Substring (0' 2);  	remainingString = remainingString.Substring (2' remainingString.Length - 2);  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToString,The following statement contains a magic number: if (remainingString.Length == 1) {  	chars = "0" + remainingString;  	remainingString = "";  }  else {  	chars = remainingString.Substring (0' 2);  	remainingString = remainingString.Substring (2' remainingString.Length - 2);  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToString,The following statement contains a magic number: if (remainingString.Length == 1) {  	chars = "0" + remainingString;  	remainingString = "";  }  else {  	chars = remainingString.Substring (0' 2);  	remainingString = remainingString.Substring (2' remainingString.Length - 2);  }  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToString,The following statement contains a magic number: chars = remainingString.Substring (0' 2);  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToString,The following statement contains a magic number: remainingString = remainingString.Substring (2' remainingString.Length - 2);  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToString,The following statement contains a magic number: remainingString = remainingString.Substring (2' remainingString.Length - 2);  
Magic Number,net.Tesacom.GeneralUtilities,HexAscii,C:\repos\jemc771_TsdWebApp\GeneralUtilities\HexAscii.cs,ConvertToString,The following statement contains a magic number: StrValue += System.Convert.ToChar (System.Convert.ToUInt32 (chars' 16)).ToString ();  
Magic Number,net.Tesacom.GeneralUtilities,BitStream,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ParseStream.cs,getValueArray,The following statement contains a magic number: if (value == 0) {  	valueArray [bytes++] = Convert.ToByte (value);  }  else {  	while (value > 0) {  		valueArray [bytes++] = Convert.ToByte (value % 256);  		value /= 256;  	}  }  
Magic Number,net.Tesacom.GeneralUtilities,BitStream,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ParseStream.cs,getValueArray,The following statement contains a magic number: if (value == 0) {  	valueArray [bytes++] = Convert.ToByte (value);  }  else {  	while (value > 0) {  		valueArray [bytes++] = Convert.ToByte (value % 256);  		value /= 256;  	}  }  
Magic Number,net.Tesacom.GeneralUtilities,BitStream,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ParseStream.cs,getValueArray,The following statement contains a magic number: while (value > 0) {  	valueArray [bytes++] = Convert.ToByte (value % 256);  	value /= 256;  }  
Magic Number,net.Tesacom.GeneralUtilities,BitStream,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ParseStream.cs,getValueArray,The following statement contains a magic number: while (value > 0) {  	valueArray [bytes++] = Convert.ToByte (value % 256);  	value /= 256;  }  
Magic Number,net.Tesacom.GeneralUtilities,BitStream,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ParseStream.cs,getValueArray,The following statement contains a magic number: valueArray [bytes++] = Convert.ToByte (value % 256);  
Magic Number,net.Tesacom.GeneralUtilities,BitStream,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ParseStream.cs,getValueArray,The following statement contains a magic number: value /= 256;  
Magic Number,net.Tesacom.GeneralUtilities,BitStream,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ParseStream.cs,insertIntoArray,The following statement contains a magic number: if (hmany % 8 > 0)  	bytes += 1;  
Magic Number,net.Tesacom.GeneralUtilities,BitStream,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ParseStream.cs,GetUint,The following statement contains a magic number: for (done = 0' bitindex = 0' byteindex = 0; byteindex < tempArray.Length; byteindex++) {  	byte mask = (byte)0x80;  	for (int blocal = 0; blocal < 8; blocal++' bitindex++) {  		if (bitindex >= start && done < hmany) {  			result <<= 1;  			byte masked = (byte)(tempArray [byteindex] & mask);  			byte thisbit = (byte)(masked > 0 ? 1 : 0);  			result |= thisbit;  			done++;  		}  		else  			tempArray [byteindex] &= (byte)~mask;  		mask >>= 1;  	}  }  
Magic Number,net.Tesacom.GeneralUtilities,BitStream,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ParseStream.cs,GetUint,The following statement contains a magic number: for (int blocal = 0; blocal < 8; blocal++' bitindex++) {  	if (bitindex >= start && done < hmany) {  		result <<= 1;  		byte masked = (byte)(tempArray [byteindex] & mask);  		byte thisbit = (byte)(masked > 0 ? 1 : 0);  		result |= thisbit;  		done++;  	}  	else  		tempArray [byteindex] &= (byte)~mask;  	mask >>= 1;  }  
Magic Number,net.Tesacom.GeneralUtilities,BitStream,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ParseStream.cs,UintToByteArray,The following statement contains a magic number: for (int i = 3; i >= 0; i--) {  	r [i] = (byte)(input & (byte)0xff);  	input >>= 8;  }  
Magic Number,net.Tesacom.GeneralUtilities,BitStream,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ParseStream.cs,UintToByteArray,The following statement contains a magic number: for (int i = 3; i >= 0; i--) {  	r [i] = (byte)(input & (byte)0xff);  	input >>= 8;  }  
Magic Number,net.Tesacom.GeneralUtilities,BitStream,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ParseStream.cs,UintToByteArray,The following statement contains a magic number: input >>= 8;  
Magic Number,net.Tesacom.GeneralUtilities,BitStream,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ParseStream.cs,ShortToByteArray,The following statement contains a magic number: for (int i = 2; i >= 0; i--) {  	r [i] = (byte)(input & (byte)0xff);  	input >>= 8;  }  
Magic Number,net.Tesacom.GeneralUtilities,BitStream,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ParseStream.cs,ShortToByteArray,The following statement contains a magic number: for (int i = 2; i >= 0; i--) {  	r [i] = (byte)(input & (byte)0xff);  	input >>= 8;  }  
Magic Number,net.Tesacom.GeneralUtilities,BitStream,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ParseStream.cs,ShortToByteArray,The following statement contains a magic number: input >>= 8;  
Magic Number,net.Tesacom.GeneralUtilities,BitStream,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ParseStream.cs,ToString,The following statement contains a magic number: for (d = 0; d < 32; d++) {  	if ((data & m) > 0)  		cr [d] = '1';  	else  		cr [d] = '0';  	m >>= 1;  }  
Magic Number,net.Tesacom.GeneralUtilities,BitStream,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ParseStream.cs,ToString,The following statement contains a magic number: return ToString ((uint)data).Substring (16);  
Magic Number,net.Tesacom.GeneralUtilities,BitStream,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ParseStream.cs,parseBitString,The following statement contains a magic number: for (int i = len - 1' j = value.Length - 1; i >= 0; i--) {  	k = (j - 8) < 0 ? 0 : j - 8;  	array [i] = getThatByte (value.Substring (k' (j - k) + 1).ToCharArray ());  	j = (j - 8) < 0 ? 0 : j - 8;  }  
Magic Number,net.Tesacom.GeneralUtilities,BitStream,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ParseStream.cs,parseBitString,The following statement contains a magic number: for (int i = len - 1' j = value.Length - 1; i >= 0; i--) {  	k = (j - 8) < 0 ? 0 : j - 8;  	array [i] = getThatByte (value.Substring (k' (j - k) + 1).ToCharArray ());  	j = (j - 8) < 0 ? 0 : j - 8;  }  
Magic Number,net.Tesacom.GeneralUtilities,BitStream,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ParseStream.cs,parseBitString,The following statement contains a magic number: for (int i = len - 1' j = value.Length - 1; i >= 0; i--) {  	k = (j - 8) < 0 ? 0 : j - 8;  	array [i] = getThatByte (value.Substring (k' (j - k) + 1).ToCharArray ());  	j = (j - 8) < 0 ? 0 : j - 8;  }  
Magic Number,net.Tesacom.GeneralUtilities,BitStream,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ParseStream.cs,parseBitString,The following statement contains a magic number: for (int i = len - 1' j = value.Length - 1; i >= 0; i--) {  	k = (j - 8) < 0 ? 0 : j - 8;  	array [i] = getThatByte (value.Substring (k' (j - k) + 1).ToCharArray ());  	j = (j - 8) < 0 ? 0 : j - 8;  }  
Magic Number,net.Tesacom.GeneralUtilities,BitStream,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ParseStream.cs,parseBitString,The following statement contains a magic number: k = (j - 8) < 0 ? 0 : j - 8;  
Magic Number,net.Tesacom.GeneralUtilities,BitStream,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ParseStream.cs,parseBitString,The following statement contains a magic number: k = (j - 8) < 0 ? 0 : j - 8;  
Magic Number,net.Tesacom.GeneralUtilities,BitStream,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ParseStream.cs,parseBitString,The following statement contains a magic number: j = (j - 8) < 0 ? 0 : j - 8;  
Magic Number,net.Tesacom.GeneralUtilities,BitStream,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ParseStream.cs,parseBitString,The following statement contains a magic number: j = (j - 8) < 0 ? 0 : j - 8;  
Magic Number,net.Tesacom.GeneralUtilities,BitStream,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ParseStream.cs,getThatByte,The following statement contains a magic number: for (int j = 0' i = data.Length - 1; i >= 0; i--' j++) {  	if (data [i] == '1')  		b += (byte)Math.Pow (2' j);  }  
Magic Number,net.Tesacom.GeneralUtilities,BitStream,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ParseStream.cs,getThatByte,The following statement contains a magic number: if (data [i] == '1')  	b += (byte)Math.Pow (2' j);  
Magic Number,net.Tesacom.GeneralUtilities,BitStream,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ParseStream.cs,getThatByte,The following statement contains a magic number: b += (byte)Math.Pow (2' j);  
Magic Number,net.Tesacom.GeneralUtilities,BitStream,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ParseStream.cs,ToBitString,The following statement contains a magic number: foreach (byte data in byteArray) {  	cr = new char[8];  	m = 0x80;  	for (d = 0; d < 8; d++) {  		if ((data & m) > 0)  			cr [d] = '1';  		else  			cr [d] = '0';  		m >>= 1;  	}  	result = string.Format ("{0}{1}"' result' new string (cr));  }  
Magic Number,net.Tesacom.GeneralUtilities,BitStream,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ParseStream.cs,ToBitString,The following statement contains a magic number: foreach (byte data in byteArray) {  	cr = new char[8];  	m = 0x80;  	for (d = 0; d < 8; d++) {  		if ((data & m) > 0)  			cr [d] = '1';  		else  			cr [d] = '0';  		m >>= 1;  	}  	result = string.Format ("{0}{1}"' result' new string (cr));  }  
Magic Number,net.Tesacom.GeneralUtilities,BitStream,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ParseStream.cs,ToBitString,The following statement contains a magic number: cr = new char[8];  
Magic Number,net.Tesacom.GeneralUtilities,BitStream,C:\repos\jemc771_TsdWebApp\GeneralUtilities\ParseStream.cs,ToBitString,The following statement contains a magic number: for (d = 0; d < 8; d++) {  	if ((data & m) > 0)  		cr [d] = '1';  	else  		cr [d] = '0';  	m >>= 1;  }  
Magic Number,net.Tesacom.GeneralUtilities,NicoUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Utils.cs,LogProcessInformation,The following statement contains a magic number: try {  	string str = "";  	int count = proc.Threads.Count;  	int count2 = (proc.Threads).OfType<System.Diagnostics.ProcessThread> ().Where (t => t.ThreadState == System.Diagnostics.ThreadState.Running).Count ();  	str = string.Format (" {{ \"ProcessInformation\" : {{\"Cantidad de Threads\" : \"{0}\"' \"ProcessThread Running\": \"{1}\"  "' count' count2);  	str = string.Format ("{0}' \"WorkingSet64\": \"{1}\" "' str' ((float)proc.WorkingSet64 / 1024 / 1024).ToString ("#.####"));  	str = string.Format ("{0}' \"PagedMemorySize64\": \"{1}\" "' str' ((float)proc.PagedMemorySize64 / 1024 / 1024).ToString ("#.####"));  	str = string.Format ("{0}' \"VirtualMemorySize64\" : \"{1}\" "' str' ((float)proc.VirtualMemorySize64 / 1024 / 1024).ToString ("#.####"));  	str = string.Format ("{0}' \"UserProcessorTime\" : \"{1}\" "' str' proc.UserProcessorTime);  	str = string.Format ("{0}' \"TotalProcessorTime\" : \"{1}\" }} }}"' str' proc.TotalProcessorTime);  	log.writeToLogFile (LogType.LOG_ALERT' "LogProcessInformation"' str);  }  catch (Exception ex) {  	log.writeToLogFile (LogType.LOG_ALERT' "LogProcessInformation"' "Error processing information: {0}"' ex.Message);  }  
Magic Number,net.Tesacom.GeneralUtilities,NicoUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Utils.cs,LogProcessInformation,The following statement contains a magic number: try {  	string str = "";  	int count = proc.Threads.Count;  	int count2 = (proc.Threads).OfType<System.Diagnostics.ProcessThread> ().Where (t => t.ThreadState == System.Diagnostics.ThreadState.Running).Count ();  	str = string.Format (" {{ \"ProcessInformation\" : {{\"Cantidad de Threads\" : \"{0}\"' \"ProcessThread Running\": \"{1}\"  "' count' count2);  	str = string.Format ("{0}' \"WorkingSet64\": \"{1}\" "' str' ((float)proc.WorkingSet64 / 1024 / 1024).ToString ("#.####"));  	str = string.Format ("{0}' \"PagedMemorySize64\": \"{1}\" "' str' ((float)proc.PagedMemorySize64 / 1024 / 1024).ToString ("#.####"));  	str = string.Format ("{0}' \"VirtualMemorySize64\" : \"{1}\" "' str' ((float)proc.VirtualMemorySize64 / 1024 / 1024).ToString ("#.####"));  	str = string.Format ("{0}' \"UserProcessorTime\" : \"{1}\" "' str' proc.UserProcessorTime);  	str = string.Format ("{0}' \"TotalProcessorTime\" : \"{1}\" }} }}"' str' proc.TotalProcessorTime);  	log.writeToLogFile (LogType.LOG_ALERT' "LogProcessInformation"' str);  }  catch (Exception ex) {  	log.writeToLogFile (LogType.LOG_ALERT' "LogProcessInformation"' "Error processing information: {0}"' ex.Message);  }  
Magic Number,net.Tesacom.GeneralUtilities,NicoUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Utils.cs,LogProcessInformation,The following statement contains a magic number: try {  	string str = "";  	int count = proc.Threads.Count;  	int count2 = (proc.Threads).OfType<System.Diagnostics.ProcessThread> ().Where (t => t.ThreadState == System.Diagnostics.ThreadState.Running).Count ();  	str = string.Format (" {{ \"ProcessInformation\" : {{\"Cantidad de Threads\" : \"{0}\"' \"ProcessThread Running\": \"{1}\"  "' count' count2);  	str = string.Format ("{0}' \"WorkingSet64\": \"{1}\" "' str' ((float)proc.WorkingSet64 / 1024 / 1024).ToString ("#.####"));  	str = string.Format ("{0}' \"PagedMemorySize64\": \"{1}\" "' str' ((float)proc.PagedMemorySize64 / 1024 / 1024).ToString ("#.####"));  	str = string.Format ("{0}' \"VirtualMemorySize64\" : \"{1}\" "' str' ((float)proc.VirtualMemorySize64 / 1024 / 1024).ToString ("#.####"));  	str = string.Format ("{0}' \"UserProcessorTime\" : \"{1}\" "' str' proc.UserProcessorTime);  	str = string.Format ("{0}' \"TotalProcessorTime\" : \"{1}\" }} }}"' str' proc.TotalProcessorTime);  	log.writeToLogFile (LogType.LOG_ALERT' "LogProcessInformation"' str);  }  catch (Exception ex) {  	log.writeToLogFile (LogType.LOG_ALERT' "LogProcessInformation"' "Error processing information: {0}"' ex.Message);  }  
Magic Number,net.Tesacom.GeneralUtilities,NicoUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Utils.cs,LogProcessInformation,The following statement contains a magic number: try {  	string str = "";  	int count = proc.Threads.Count;  	int count2 = (proc.Threads).OfType<System.Diagnostics.ProcessThread> ().Where (t => t.ThreadState == System.Diagnostics.ThreadState.Running).Count ();  	str = string.Format (" {{ \"ProcessInformation\" : {{\"Cantidad de Threads\" : \"{0}\"' \"ProcessThread Running\": \"{1}\"  "' count' count2);  	str = string.Format ("{0}' \"WorkingSet64\": \"{1}\" "' str' ((float)proc.WorkingSet64 / 1024 / 1024).ToString ("#.####"));  	str = string.Format ("{0}' \"PagedMemorySize64\": \"{1}\" "' str' ((float)proc.PagedMemorySize64 / 1024 / 1024).ToString ("#.####"));  	str = string.Format ("{0}' \"VirtualMemorySize64\" : \"{1}\" "' str' ((float)proc.VirtualMemorySize64 / 1024 / 1024).ToString ("#.####"));  	str = string.Format ("{0}' \"UserProcessorTime\" : \"{1}\" "' str' proc.UserProcessorTime);  	str = string.Format ("{0}' \"TotalProcessorTime\" : \"{1}\" }} }}"' str' proc.TotalProcessorTime);  	log.writeToLogFile (LogType.LOG_ALERT' "LogProcessInformation"' str);  }  catch (Exception ex) {  	log.writeToLogFile (LogType.LOG_ALERT' "LogProcessInformation"' "Error processing information: {0}"' ex.Message);  }  
Magic Number,net.Tesacom.GeneralUtilities,NicoUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Utils.cs,LogProcessInformation,The following statement contains a magic number: try {  	string str = "";  	int count = proc.Threads.Count;  	int count2 = (proc.Threads).OfType<System.Diagnostics.ProcessThread> ().Where (t => t.ThreadState == System.Diagnostics.ThreadState.Running).Count ();  	str = string.Format (" {{ \"ProcessInformation\" : {{\"Cantidad de Threads\" : \"{0}\"' \"ProcessThread Running\": \"{1}\"  "' count' count2);  	str = string.Format ("{0}' \"WorkingSet64\": \"{1}\" "' str' ((float)proc.WorkingSet64 / 1024 / 1024).ToString ("#.####"));  	str = string.Format ("{0}' \"PagedMemorySize64\": \"{1}\" "' str' ((float)proc.PagedMemorySize64 / 1024 / 1024).ToString ("#.####"));  	str = string.Format ("{0}' \"VirtualMemorySize64\" : \"{1}\" "' str' ((float)proc.VirtualMemorySize64 / 1024 / 1024).ToString ("#.####"));  	str = string.Format ("{0}' \"UserProcessorTime\" : \"{1}\" "' str' proc.UserProcessorTime);  	str = string.Format ("{0}' \"TotalProcessorTime\" : \"{1}\" }} }}"' str' proc.TotalProcessorTime);  	log.writeToLogFile (LogType.LOG_ALERT' "LogProcessInformation"' str);  }  catch (Exception ex) {  	log.writeToLogFile (LogType.LOG_ALERT' "LogProcessInformation"' "Error processing information: {0}"' ex.Message);  }  
Magic Number,net.Tesacom.GeneralUtilities,NicoUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Utils.cs,LogProcessInformation,The following statement contains a magic number: try {  	string str = "";  	int count = proc.Threads.Count;  	int count2 = (proc.Threads).OfType<System.Diagnostics.ProcessThread> ().Where (t => t.ThreadState == System.Diagnostics.ThreadState.Running).Count ();  	str = string.Format (" {{ \"ProcessInformation\" : {{\"Cantidad de Threads\" : \"{0}\"' \"ProcessThread Running\": \"{1}\"  "' count' count2);  	str = string.Format ("{0}' \"WorkingSet64\": \"{1}\" "' str' ((float)proc.WorkingSet64 / 1024 / 1024).ToString ("#.####"));  	str = string.Format ("{0}' \"PagedMemorySize64\": \"{1}\" "' str' ((float)proc.PagedMemorySize64 / 1024 / 1024).ToString ("#.####"));  	str = string.Format ("{0}' \"VirtualMemorySize64\" : \"{1}\" "' str' ((float)proc.VirtualMemorySize64 / 1024 / 1024).ToString ("#.####"));  	str = string.Format ("{0}' \"UserProcessorTime\" : \"{1}\" "' str' proc.UserProcessorTime);  	str = string.Format ("{0}' \"TotalProcessorTime\" : \"{1}\" }} }}"' str' proc.TotalProcessorTime);  	log.writeToLogFile (LogType.LOG_ALERT' "LogProcessInformation"' str);  }  catch (Exception ex) {  	log.writeToLogFile (LogType.LOG_ALERT' "LogProcessInformation"' "Error processing information: {0}"' ex.Message);  }  
Magic Number,net.Tesacom.GeneralUtilities,NicoUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Utils.cs,LogProcessInformation,The following statement contains a magic number: str = string.Format ("{0}' \"WorkingSet64\": \"{1}\" "' str' ((float)proc.WorkingSet64 / 1024 / 1024).ToString ("#.####"));  
Magic Number,net.Tesacom.GeneralUtilities,NicoUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Utils.cs,LogProcessInformation,The following statement contains a magic number: str = string.Format ("{0}' \"WorkingSet64\": \"{1}\" "' str' ((float)proc.WorkingSet64 / 1024 / 1024).ToString ("#.####"));  
Magic Number,net.Tesacom.GeneralUtilities,NicoUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Utils.cs,LogProcessInformation,The following statement contains a magic number: str = string.Format ("{0}' \"PagedMemorySize64\": \"{1}\" "' str' ((float)proc.PagedMemorySize64 / 1024 / 1024).ToString ("#.####"));  
Magic Number,net.Tesacom.GeneralUtilities,NicoUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Utils.cs,LogProcessInformation,The following statement contains a magic number: str = string.Format ("{0}' \"PagedMemorySize64\": \"{1}\" "' str' ((float)proc.PagedMemorySize64 / 1024 / 1024).ToString ("#.####"));  
Magic Number,net.Tesacom.GeneralUtilities,NicoUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Utils.cs,LogProcessInformation,The following statement contains a magic number: str = string.Format ("{0}' \"VirtualMemorySize64\" : \"{1}\" "' str' ((float)proc.VirtualMemorySize64 / 1024 / 1024).ToString ("#.####"));  
Magic Number,net.Tesacom.GeneralUtilities,NicoUtils,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Utils.cs,LogProcessInformation,The following statement contains a magic number: str = string.Format ("{0}' \"VirtualMemorySize64\" : \"{1}\" "' str' ((float)proc.VirtualMemorySize64 / 1024 / 1024).ToString ("#.####"));  
Magic Number,net.Tesacom.GeneralUtilities.Geographic,SquaredGeofence,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Geofence.cs,ParseXML,The following statement contains a magic number: if (Node.Name.ToLower () == "geofence") {  	if (Node.HasChildNodes) {  		foreach (XmlNode pNode in Node.ChildNodes) {  			//doit only two times  			if (loop <= 2) {  				switch (pNode.Name.ToLower ()) {  				case "degmin":  					foreach (XmlAttribute a in pNode.Attributes) {  						if (a.Name.ToLower () == "value") {  							try {  								deg1 = Convert.ToSingle (a.Value);  							}  							catch (Exception) {  							}  							break;  						}  					}  					break;  				case "degmax":  					foreach (XmlAttribute a in pNode.Attributes) {  						if (a.Name.ToLower () == "value") {  							try {  								deg2 = Convert.ToSingle (a.Value);  							}  							catch (Exception) {  							}  							break;  						}  					}  					break;  				case "point":  					foreach (XmlNode lNode in pNode.ChildNodes) {  						switch (lNode.Name.ToLower ()) {  						case "latitude":  							foreach (XmlAttribute a in lNode.Attributes) {  								if (a.Name.ToLower () == "value") {  									try {  										pos.Latitude.setValue (Convert.ToSingle (a.Value));  									}  									catch (Exception) {  									}  									break;  								}  							}  							break;  						case "longitude":  							foreach (XmlAttribute a in lNode.Attributes) {  								if (a.Name.ToLower () == "value") {  									try {  										pos.Longitude.setValue (Convert.ToSingle (a.Value));  									}  									catch (Exception) {  									}  									break;  								}  							}  							break;  						}  					}  					loop++;  					break;  				}  				switch (loop) {  				case 1:  					if ((pos1.Latitude.getValue () != DefaultPosition.Latitude) && (pos1.Longitude.getValue () != DefaultPosition.Longitude))  						pos1 = pos;  					break;  				case 2:  					if ((pos2.Latitude.getValue () != DefaultPosition.Latitude) && (pos2.Longitude.getValue () != DefaultPosition.Longitude))  						pos2 = pos;  					loop++;  					break;  				}  				pos = new Position ();  			}  		}  		fence = new SquaredGeofence (pos1' pos2);  		if (fence != null) {  			fence.DegMin = deg1;  			fence.DegMax = deg2;  		}  	}  }  
Magic Number,net.Tesacom.GeneralUtilities.Geographic,SquaredGeofence,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Geofence.cs,ParseXML,The following statement contains a magic number: if (Node.Name.ToLower () == "geofence") {  	if (Node.HasChildNodes) {  		foreach (XmlNode pNode in Node.ChildNodes) {  			//doit only two times  			if (loop <= 2) {  				switch (pNode.Name.ToLower ()) {  				case "degmin":  					foreach (XmlAttribute a in pNode.Attributes) {  						if (a.Name.ToLower () == "value") {  							try {  								deg1 = Convert.ToSingle (a.Value);  							}  							catch (Exception) {  							}  							break;  						}  					}  					break;  				case "degmax":  					foreach (XmlAttribute a in pNode.Attributes) {  						if (a.Name.ToLower () == "value") {  							try {  								deg2 = Convert.ToSingle (a.Value);  							}  							catch (Exception) {  							}  							break;  						}  					}  					break;  				case "point":  					foreach (XmlNode lNode in pNode.ChildNodes) {  						switch (lNode.Name.ToLower ()) {  						case "latitude":  							foreach (XmlAttribute a in lNode.Attributes) {  								if (a.Name.ToLower () == "value") {  									try {  										pos.Latitude.setValue (Convert.ToSingle (a.Value));  									}  									catch (Exception) {  									}  									break;  								}  							}  							break;  						case "longitude":  							foreach (XmlAttribute a in lNode.Attributes) {  								if (a.Name.ToLower () == "value") {  									try {  										pos.Longitude.setValue (Convert.ToSingle (a.Value));  									}  									catch (Exception) {  									}  									break;  								}  							}  							break;  						}  					}  					loop++;  					break;  				}  				switch (loop) {  				case 1:  					if ((pos1.Latitude.getValue () != DefaultPosition.Latitude) && (pos1.Longitude.getValue () != DefaultPosition.Longitude))  						pos1 = pos;  					break;  				case 2:  					if ((pos2.Latitude.getValue () != DefaultPosition.Latitude) && (pos2.Longitude.getValue () != DefaultPosition.Longitude))  						pos2 = pos;  					loop++;  					break;  				}  				pos = new Position ();  			}  		}  		fence = new SquaredGeofence (pos1' pos2);  		if (fence != null) {  			fence.DegMin = deg1;  			fence.DegMax = deg2;  		}  	}  }  
Magic Number,net.Tesacom.GeneralUtilities.Geographic,SquaredGeofence,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Geofence.cs,ParseXML,The following statement contains a magic number: if (Node.HasChildNodes) {  	foreach (XmlNode pNode in Node.ChildNodes) {  		//doit only two times  		if (loop <= 2) {  			switch (pNode.Name.ToLower ()) {  			case "degmin":  				foreach (XmlAttribute a in pNode.Attributes) {  					if (a.Name.ToLower () == "value") {  						try {  							deg1 = Convert.ToSingle (a.Value);  						}  						catch (Exception) {  						}  						break;  					}  				}  				break;  			case "degmax":  				foreach (XmlAttribute a in pNode.Attributes) {  					if (a.Name.ToLower () == "value") {  						try {  							deg2 = Convert.ToSingle (a.Value);  						}  						catch (Exception) {  						}  						break;  					}  				}  				break;  			case "point":  				foreach (XmlNode lNode in pNode.ChildNodes) {  					switch (lNode.Name.ToLower ()) {  					case "latitude":  						foreach (XmlAttribute a in lNode.Attributes) {  							if (a.Name.ToLower () == "value") {  								try {  									pos.Latitude.setValue (Convert.ToSingle (a.Value));  								}  								catch (Exception) {  								}  								break;  							}  						}  						break;  					case "longitude":  						foreach (XmlAttribute a in lNode.Attributes) {  							if (a.Name.ToLower () == "value") {  								try {  									pos.Longitude.setValue (Convert.ToSingle (a.Value));  								}  								catch (Exception) {  								}  								break;  							}  						}  						break;  					}  				}  				loop++;  				break;  			}  			switch (loop) {  			case 1:  				if ((pos1.Latitude.getValue () != DefaultPosition.Latitude) && (pos1.Longitude.getValue () != DefaultPosition.Longitude))  					pos1 = pos;  				break;  			case 2:  				if ((pos2.Latitude.getValue () != DefaultPosition.Latitude) && (pos2.Longitude.getValue () != DefaultPosition.Longitude))  					pos2 = pos;  				loop++;  				break;  			}  			pos = new Position ();  		}  	}  	fence = new SquaredGeofence (pos1' pos2);  	if (fence != null) {  		fence.DegMin = deg1;  		fence.DegMax = deg2;  	}  }  
Magic Number,net.Tesacom.GeneralUtilities.Geographic,SquaredGeofence,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Geofence.cs,ParseXML,The following statement contains a magic number: if (Node.HasChildNodes) {  	foreach (XmlNode pNode in Node.ChildNodes) {  		//doit only two times  		if (loop <= 2) {  			switch (pNode.Name.ToLower ()) {  			case "degmin":  				foreach (XmlAttribute a in pNode.Attributes) {  					if (a.Name.ToLower () == "value") {  						try {  							deg1 = Convert.ToSingle (a.Value);  						}  						catch (Exception) {  						}  						break;  					}  				}  				break;  			case "degmax":  				foreach (XmlAttribute a in pNode.Attributes) {  					if (a.Name.ToLower () == "value") {  						try {  							deg2 = Convert.ToSingle (a.Value);  						}  						catch (Exception) {  						}  						break;  					}  				}  				break;  			case "point":  				foreach (XmlNode lNode in pNode.ChildNodes) {  					switch (lNode.Name.ToLower ()) {  					case "latitude":  						foreach (XmlAttribute a in lNode.Attributes) {  							if (a.Name.ToLower () == "value") {  								try {  									pos.Latitude.setValue (Convert.ToSingle (a.Value));  								}  								catch (Exception) {  								}  								break;  							}  						}  						break;  					case "longitude":  						foreach (XmlAttribute a in lNode.Attributes) {  							if (a.Name.ToLower () == "value") {  								try {  									pos.Longitude.setValue (Convert.ToSingle (a.Value));  								}  								catch (Exception) {  								}  								break;  							}  						}  						break;  					}  				}  				loop++;  				break;  			}  			switch (loop) {  			case 1:  				if ((pos1.Latitude.getValue () != DefaultPosition.Latitude) && (pos1.Longitude.getValue () != DefaultPosition.Longitude))  					pos1 = pos;  				break;  			case 2:  				if ((pos2.Latitude.getValue () != DefaultPosition.Latitude) && (pos2.Longitude.getValue () != DefaultPosition.Longitude))  					pos2 = pos;  				loop++;  				break;  			}  			pos = new Position ();  		}  	}  	fence = new SquaredGeofence (pos1' pos2);  	if (fence != null) {  		fence.DegMin = deg1;  		fence.DegMax = deg2;  	}  }  
Magic Number,net.Tesacom.GeneralUtilities.Geographic,SquaredGeofence,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Geofence.cs,ParseXML,The following statement contains a magic number: foreach (XmlNode pNode in Node.ChildNodes) {  	//doit only two times  	if (loop <= 2) {  		switch (pNode.Name.ToLower ()) {  		case "degmin":  			foreach (XmlAttribute a in pNode.Attributes) {  				if (a.Name.ToLower () == "value") {  					try {  						deg1 = Convert.ToSingle (a.Value);  					}  					catch (Exception) {  					}  					break;  				}  			}  			break;  		case "degmax":  			foreach (XmlAttribute a in pNode.Attributes) {  				if (a.Name.ToLower () == "value") {  					try {  						deg2 = Convert.ToSingle (a.Value);  					}  					catch (Exception) {  					}  					break;  				}  			}  			break;  		case "point":  			foreach (XmlNode lNode in pNode.ChildNodes) {  				switch (lNode.Name.ToLower ()) {  				case "latitude":  					foreach (XmlAttribute a in lNode.Attributes) {  						if (a.Name.ToLower () == "value") {  							try {  								pos.Latitude.setValue (Convert.ToSingle (a.Value));  							}  							catch (Exception) {  							}  							break;  						}  					}  					break;  				case "longitude":  					foreach (XmlAttribute a in lNode.Attributes) {  						if (a.Name.ToLower () == "value") {  							try {  								pos.Longitude.setValue (Convert.ToSingle (a.Value));  							}  							catch (Exception) {  							}  							break;  						}  					}  					break;  				}  			}  			loop++;  			break;  		}  		switch (loop) {  		case 1:  			if ((pos1.Latitude.getValue () != DefaultPosition.Latitude) && (pos1.Longitude.getValue () != DefaultPosition.Longitude))  				pos1 = pos;  			break;  		case 2:  			if ((pos2.Latitude.getValue () != DefaultPosition.Latitude) && (pos2.Longitude.getValue () != DefaultPosition.Longitude))  				pos2 = pos;  			loop++;  			break;  		}  		pos = new Position ();  	}  }  
Magic Number,net.Tesacom.GeneralUtilities.Geographic,SquaredGeofence,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Geofence.cs,ParseXML,The following statement contains a magic number: foreach (XmlNode pNode in Node.ChildNodes) {  	//doit only two times  	if (loop <= 2) {  		switch (pNode.Name.ToLower ()) {  		case "degmin":  			foreach (XmlAttribute a in pNode.Attributes) {  				if (a.Name.ToLower () == "value") {  					try {  						deg1 = Convert.ToSingle (a.Value);  					}  					catch (Exception) {  					}  					break;  				}  			}  			break;  		case "degmax":  			foreach (XmlAttribute a in pNode.Attributes) {  				if (a.Name.ToLower () == "value") {  					try {  						deg2 = Convert.ToSingle (a.Value);  					}  					catch (Exception) {  					}  					break;  				}  			}  			break;  		case "point":  			foreach (XmlNode lNode in pNode.ChildNodes) {  				switch (lNode.Name.ToLower ()) {  				case "latitude":  					foreach (XmlAttribute a in lNode.Attributes) {  						if (a.Name.ToLower () == "value") {  							try {  								pos.Latitude.setValue (Convert.ToSingle (a.Value));  							}  							catch (Exception) {  							}  							break;  						}  					}  					break;  				case "longitude":  					foreach (XmlAttribute a in lNode.Attributes) {  						if (a.Name.ToLower () == "value") {  							try {  								pos.Longitude.setValue (Convert.ToSingle (a.Value));  							}  							catch (Exception) {  							}  							break;  						}  					}  					break;  				}  			}  			loop++;  			break;  		}  		switch (loop) {  		case 1:  			if ((pos1.Latitude.getValue () != DefaultPosition.Latitude) && (pos1.Longitude.getValue () != DefaultPosition.Longitude))  				pos1 = pos;  			break;  		case 2:  			if ((pos2.Latitude.getValue () != DefaultPosition.Latitude) && (pos2.Longitude.getValue () != DefaultPosition.Longitude))  				pos2 = pos;  			loop++;  			break;  		}  		pos = new Position ();  	}  }  
Magic Number,net.Tesacom.GeneralUtilities.Geographic,SquaredGeofence,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Geofence.cs,ParseXML,The following statement contains a magic number: if (loop <= 2) {  	switch (pNode.Name.ToLower ()) {  	case "degmin":  		foreach (XmlAttribute a in pNode.Attributes) {  			if (a.Name.ToLower () == "value") {  				try {  					deg1 = Convert.ToSingle (a.Value);  				}  				catch (Exception) {  				}  				break;  			}  		}  		break;  	case "degmax":  		foreach (XmlAttribute a in pNode.Attributes) {  			if (a.Name.ToLower () == "value") {  				try {  					deg2 = Convert.ToSingle (a.Value);  				}  				catch (Exception) {  				}  				break;  			}  		}  		break;  	case "point":  		foreach (XmlNode lNode in pNode.ChildNodes) {  			switch (lNode.Name.ToLower ()) {  			case "latitude":  				foreach (XmlAttribute a in lNode.Attributes) {  					if (a.Name.ToLower () == "value") {  						try {  							pos.Latitude.setValue (Convert.ToSingle (a.Value));  						}  						catch (Exception) {  						}  						break;  					}  				}  				break;  			case "longitude":  				foreach (XmlAttribute a in lNode.Attributes) {  					if (a.Name.ToLower () == "value") {  						try {  							pos.Longitude.setValue (Convert.ToSingle (a.Value));  						}  						catch (Exception) {  						}  						break;  					}  				}  				break;  			}  		}  		loop++;  		break;  	}  	switch (loop) {  	case 1:  		if ((pos1.Latitude.getValue () != DefaultPosition.Latitude) && (pos1.Longitude.getValue () != DefaultPosition.Longitude))  			pos1 = pos;  		break;  	case 2:  		if ((pos2.Latitude.getValue () != DefaultPosition.Latitude) && (pos2.Longitude.getValue () != DefaultPosition.Longitude))  			pos2 = pos;  		loop++;  		break;  	}  	pos = new Position ();  }  
Magic Number,net.Tesacom.GeneralUtilities.Geographic,SquaredGeofence,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Geofence.cs,ParseXML,The following statement contains a magic number: if (loop <= 2) {  	switch (pNode.Name.ToLower ()) {  	case "degmin":  		foreach (XmlAttribute a in pNode.Attributes) {  			if (a.Name.ToLower () == "value") {  				try {  					deg1 = Convert.ToSingle (a.Value);  				}  				catch (Exception) {  				}  				break;  			}  		}  		break;  	case "degmax":  		foreach (XmlAttribute a in pNode.Attributes) {  			if (a.Name.ToLower () == "value") {  				try {  					deg2 = Convert.ToSingle (a.Value);  				}  				catch (Exception) {  				}  				break;  			}  		}  		break;  	case "point":  		foreach (XmlNode lNode in pNode.ChildNodes) {  			switch (lNode.Name.ToLower ()) {  			case "latitude":  				foreach (XmlAttribute a in lNode.Attributes) {  					if (a.Name.ToLower () == "value") {  						try {  							pos.Latitude.setValue (Convert.ToSingle (a.Value));  						}  						catch (Exception) {  						}  						break;  					}  				}  				break;  			case "longitude":  				foreach (XmlAttribute a in lNode.Attributes) {  					if (a.Name.ToLower () == "value") {  						try {  							pos.Longitude.setValue (Convert.ToSingle (a.Value));  						}  						catch (Exception) {  						}  						break;  					}  				}  				break;  			}  		}  		loop++;  		break;  	}  	switch (loop) {  	case 1:  		if ((pos1.Latitude.getValue () != DefaultPosition.Latitude) && (pos1.Longitude.getValue () != DefaultPosition.Longitude))  			pos1 = pos;  		break;  	case 2:  		if ((pos2.Latitude.getValue () != DefaultPosition.Latitude) && (pos2.Longitude.getValue () != DefaultPosition.Longitude))  			pos2 = pos;  		loop++;  		break;  	}  	pos = new Position ();  }  
Magic Number,net.Tesacom.GeneralUtilities.Geographic,SquaredGeofence,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Geofence.cs,ParseXML,The following statement contains a magic number: switch (loop) {  case 1:  	if ((pos1.Latitude.getValue () != DefaultPosition.Latitude) && (pos1.Longitude.getValue () != DefaultPosition.Longitude))  		pos1 = pos;  	break;  case 2:  	if ((pos2.Latitude.getValue () != DefaultPosition.Latitude) && (pos2.Longitude.getValue () != DefaultPosition.Longitude))  		pos2 = pos;  	loop++;  	break;  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getLogFileNameMask,The following statement contains a magic number: fileName [2] = fileName [1].Substring (fileName [1].LastIndexOf ('.') + 1);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getLogFileNameMask,The following statement contains a magic number: fileName [3] = fileName [1].Substring (0' fileName [1].LastIndexOf ('.'));  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getLogFileNameMask,The following statement contains a magic number: if (fileName [3].Contains ('.')) {  	fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  	fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.'));  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getLogFileNameMask,The following statement contains a magic number: if (fileName [3].Contains ('.')) {  	fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  	fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.'));  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getLogFileNameMask,The following statement contains a magic number: if (fileName [3].Contains ('.')) {  	fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  	fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.'));  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getLogFileNameMask,The following statement contains a magic number: if (fileName [3].Contains ('.')) {  	fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  	fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.'));  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getLogFileNameMask,The following statement contains a magic number: if (fileName [3].Contains ('.')) {  	fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  	fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.'));  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getLogFileNameMask,The following statement contains a magic number: if (fileName [3].Contains ('.')) {  	fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  	fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.'));  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getLogFileNameMask,The following statement contains a magic number: if (fileName [3].Contains ('.')) {  	fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  	fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.'));  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getLogFileNameMask,The following statement contains a magic number: fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getLogFileNameMask,The following statement contains a magic number: fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getLogFileNameMask,The following statement contains a magic number: fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getLogFileNameMask,The following statement contains a magic number: fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.'));  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getLogFileNameMask,The following statement contains a magic number: fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.'));  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getLogFileNameMask,The following statement contains a magic number: fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.'));  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getLogFileNameMask,The following statement contains a magic number: return string.Format ("{0}\\{1}.*.{2}"' fileName [0]' fileName [5]' fileName [2]);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getLogFileNameMask,The following statement contains a magic number: return string.Format ("{0}\\{1}.*.{2}"' fileName [0]' fileName [5]' fileName [2]);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getMonthLogFileNameMask,The following statement contains a magic number: fileName [2] = fileName [1].Substring (fileName [1].LastIndexOf ('.') + 1);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getMonthLogFileNameMask,The following statement contains a magic number: fileName [3] = fileName [1].Substring (0' fileName [1].LastIndexOf ('.'));  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getMonthLogFileNameMask,The following statement contains a magic number: if (fileName [3].Contains ('.')) {  	fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  	fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.') - 2);  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getMonthLogFileNameMask,The following statement contains a magic number: if (fileName [3].Contains ('.')) {  	fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  	fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.') - 2);  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getMonthLogFileNameMask,The following statement contains a magic number: if (fileName [3].Contains ('.')) {  	fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  	fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.') - 2);  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getMonthLogFileNameMask,The following statement contains a magic number: if (fileName [3].Contains ('.')) {  	fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  	fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.') - 2);  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getMonthLogFileNameMask,The following statement contains a magic number: if (fileName [3].Contains ('.')) {  	fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  	fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.') - 2);  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getMonthLogFileNameMask,The following statement contains a magic number: if (fileName [3].Contains ('.')) {  	fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  	fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.') - 2);  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getMonthLogFileNameMask,The following statement contains a magic number: if (fileName [3].Contains ('.')) {  	fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  	fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.') - 2);  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getMonthLogFileNameMask,The following statement contains a magic number: if (fileName [3].Contains ('.')) {  	fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  	fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.') - 2);  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getMonthLogFileNameMask,The following statement contains a magic number: fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getMonthLogFileNameMask,The following statement contains a magic number: fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getMonthLogFileNameMask,The following statement contains a magic number: fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getMonthLogFileNameMask,The following statement contains a magic number: fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.') - 2);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getMonthLogFileNameMask,The following statement contains a magic number: fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.') - 2);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getMonthLogFileNameMask,The following statement contains a magic number: fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.') - 2);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getMonthLogFileNameMask,The following statement contains a magic number: fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.') - 2);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getMonthLogFileNameMask,The following statement contains a magic number: return string.Format ("{0}\\{1}*.*.{2}"' fileName [0]' fileName [5]' fileName [2]);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,getMonthLogFileNameMask,The following statement contains a magic number: return string.Format ("{0}\\{1}*.*.{2}"' fileName [0]' fileName [5]' fileName [2]);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,checkLogFileNumber,The following statement contains a magic number: foreach (string s in files) {  	look = s.Split ('.');  	if (look.Count () == 3) {  		try {  			tmax = int.Parse (look [1]);  			if (tmax > max)  				max = tmax;  		}  		catch (Exception) {  			/* do nothing */}  	}  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,checkLogFileNumber,The following statement contains a magic number: if (look.Count () == 3) {  	try {  		tmax = int.Parse (look [1]);  		if (tmax > max)  			max = tmax;  	}  	catch (Exception) {  		/* do nothing */}  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,OpenLogFileFromThread,The following statement contains a magic number: if (!Directory.Exists (System.IO.Path.GetDirectoryName (name))) {  	checkLogDir (System.IO.Path.GetDirectoryName (name));  	//string aPath = System.Reflection.Assembly.GetExecutingAssembly().Location;  	//aPath = string.Format(System.IO.Path.GetDirectoryName(aPath));  	if (File.Exists (name)) {  		writer = File.AppendText (name);  		return true;  	}  	else {  		//checkLogDir(aPath);  		try {  			writer = new StreamWriter (name' true);  		}  		catch (Exception) {  			return false;  		}  		return true;  	}  }  else {  	StreamWriter s = new StreamWriter (new MemoryStream ());  	bool success = false;  	int times = 100;  	while (!success) {  		try {  			s = File.AppendText (name);  			success = true;  			result = true;  		}  		catch (Exception) {  			Thread.Sleep (10);  			times--;  			if (times == 0)  				success = true;  		}  	}  	writer = s;  	return result;  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,OpenLogFileFromThread,The following statement contains a magic number: if (!Directory.Exists (System.IO.Path.GetDirectoryName (name))) {  	checkLogDir (System.IO.Path.GetDirectoryName (name));  	//string aPath = System.Reflection.Assembly.GetExecutingAssembly().Location;  	//aPath = string.Format(System.IO.Path.GetDirectoryName(aPath));  	if (File.Exists (name)) {  		writer = File.AppendText (name);  		return true;  	}  	else {  		//checkLogDir(aPath);  		try {  			writer = new StreamWriter (name' true);  		}  		catch (Exception) {  			return false;  		}  		return true;  	}  }  else {  	StreamWriter s = new StreamWriter (new MemoryStream ());  	bool success = false;  	int times = 100;  	while (!success) {  		try {  			s = File.AppendText (name);  			success = true;  			result = true;  		}  		catch (Exception) {  			Thread.Sleep (10);  			times--;  			if (times == 0)  				success = true;  		}  	}  	writer = s;  	return result;  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,OpenLogFileFromThread,The following statement contains a magic number: while (!success) {  	try {  		s = File.AppendText (name);  		success = true;  		result = true;  	}  	catch (Exception) {  		Thread.Sleep (10);  		times--;  		if (times == 0)  			success = true;  	}  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,OpenLogFileFromThread,The following statement contains a magic number: try {  	s = File.AppendText (name);  	success = true;  	result = true;  }  catch (Exception) {  	Thread.Sleep (10);  	times--;  	if (times == 0)  		success = true;  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,OpenLogFileFromThread,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getLogFileNameMask,The following statement contains a magic number: fileName [2] = fileName [1].Substring (fileName [1].LastIndexOf ('.') + 1);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getLogFileNameMask,The following statement contains a magic number: fileName [3] = fileName [1].Substring (0' fileName [1].LastIndexOf ('.'));  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getLogFileNameMask,The following statement contains a magic number: if (fileName [3].Contains ('.')) {  	fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  	fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.'));  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getLogFileNameMask,The following statement contains a magic number: if (fileName [3].Contains ('.')) {  	fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  	fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.'));  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getLogFileNameMask,The following statement contains a magic number: if (fileName [3].Contains ('.')) {  	fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  	fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.'));  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getLogFileNameMask,The following statement contains a magic number: if (fileName [3].Contains ('.')) {  	fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  	fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.'));  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getLogFileNameMask,The following statement contains a magic number: if (fileName [3].Contains ('.')) {  	fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  	fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.'));  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getLogFileNameMask,The following statement contains a magic number: if (fileName [3].Contains ('.')) {  	fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  	fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.'));  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getLogFileNameMask,The following statement contains a magic number: if (fileName [3].Contains ('.')) {  	fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  	fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.'));  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getLogFileNameMask,The following statement contains a magic number: fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getLogFileNameMask,The following statement contains a magic number: fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getLogFileNameMask,The following statement contains a magic number: fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getLogFileNameMask,The following statement contains a magic number: fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.'));  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getLogFileNameMask,The following statement contains a magic number: fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.'));  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getLogFileNameMask,The following statement contains a magic number: fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.'));  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getLogFileNameMask,The following statement contains a magic number: return string.Format ("{0}\\{1}.*.{2}"' fileName [0]' fileName [5]' fileName [2]);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getLogFileNameMask,The following statement contains a magic number: return string.Format ("{0}\\{1}.*.{2}"' fileName [0]' fileName [5]' fileName [2]);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getMonthLogFileNameMask,The following statement contains a magic number: fileName [2] = fileName [1].Substring (fileName [1].LastIndexOf ('.') + 1);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getMonthLogFileNameMask,The following statement contains a magic number: fileName [3] = fileName [1].Substring (0' fileName [1].LastIndexOf ('.'));  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getMonthLogFileNameMask,The following statement contains a magic number: if (fileName [3].Contains ('.')) {  	fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  	fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.') - 2);  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getMonthLogFileNameMask,The following statement contains a magic number: if (fileName [3].Contains ('.')) {  	fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  	fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.') - 2);  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getMonthLogFileNameMask,The following statement contains a magic number: if (fileName [3].Contains ('.')) {  	fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  	fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.') - 2);  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getMonthLogFileNameMask,The following statement contains a magic number: if (fileName [3].Contains ('.')) {  	fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  	fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.') - 2);  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getMonthLogFileNameMask,The following statement contains a magic number: if (fileName [3].Contains ('.')) {  	fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  	fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.') - 2);  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getMonthLogFileNameMask,The following statement contains a magic number: if (fileName [3].Contains ('.')) {  	fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  	fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.') - 2);  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getMonthLogFileNameMask,The following statement contains a magic number: if (fileName [3].Contains ('.')) {  	fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  	fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.') - 2);  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getMonthLogFileNameMask,The following statement contains a magic number: if (fileName [3].Contains ('.')) {  	fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  	fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.') - 2);  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getMonthLogFileNameMask,The following statement contains a magic number: fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getMonthLogFileNameMask,The following statement contains a magic number: fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getMonthLogFileNameMask,The following statement contains a magic number: fileName [4] = fileName [3].Substring (fileName [3].LastIndexOf ('.') + 1);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getMonthLogFileNameMask,The following statement contains a magic number: fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.') - 2);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getMonthLogFileNameMask,The following statement contains a magic number: fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.') - 2);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getMonthLogFileNameMask,The following statement contains a magic number: fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.') - 2);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getMonthLogFileNameMask,The following statement contains a magic number: fileName [5] = fileName [3].Substring (0' fileName [3].LastIndexOf ('.') - 2);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getMonthLogFileNameMask,The following statement contains a magic number: return string.Format ("{0}\\{1}*.*.{2}"' fileName [0]' fileName [5]' fileName [2]);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,getMonthLogFileNameMask,The following statement contains a magic number: return string.Format ("{0}\\{1}*.*.{2}"' fileName [0]' fileName [5]' fileName [2]);  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,checkLogFileNumber,The following statement contains a magic number: foreach (string s in files) {  	look = s.Split ('.');  	if (look.Count () == 3) {  		try {  			tmax = int.Parse (look [1]);  			if (tmax > max)  				max = tmax;  		}  		catch (Exception) {  			/* do nothing */}  	}  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,checkLogFileNumber,The following statement contains a magic number: if (look.Count () == 3) {  	try {  		tmax = int.Parse (look [1]);  		if (tmax > max)  			max = tmax;  	}  	catch (Exception) {  		/* do nothing */}  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,OpenLogFileFromThread,The following statement contains a magic number: if (!Directory.Exists (logDir)) {  	string aPath = System.Reflection.Assembly.GetExecutingAssembly ().Location;  	aPath = string.Format (System.IO.Path.GetDirectoryName (aPath));  	name = logFileName (aPath);  	if (File.Exists (name))  		return File.AppendText (name);  	else {  		checkLogDir (aPath);  		return new StreamWriter (LogFileName' true);  	}  }  else {  	StreamWriter s = new StreamWriter (new MemoryStream ());  	bool success = false;  	int times = 1000;  	while (!success) {  		try {  			s = File.AppendText (name);  			success = true;  		}  		catch (Exception) {  			Thread.Sleep (10);  			times--;  			if (times == 0)  				success = true;  		}  	}  	return s;  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,OpenLogFileFromThread,The following statement contains a magic number: if (!Directory.Exists (logDir)) {  	string aPath = System.Reflection.Assembly.GetExecutingAssembly ().Location;  	aPath = string.Format (System.IO.Path.GetDirectoryName (aPath));  	name = logFileName (aPath);  	if (File.Exists (name))  		return File.AppendText (name);  	else {  		checkLogDir (aPath);  		return new StreamWriter (LogFileName' true);  	}  }  else {  	StreamWriter s = new StreamWriter (new MemoryStream ());  	bool success = false;  	int times = 1000;  	while (!success) {  		try {  			s = File.AppendText (name);  			success = true;  		}  		catch (Exception) {  			Thread.Sleep (10);  			times--;  			if (times == 0)  				success = true;  		}  	}  	return s;  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,OpenLogFileFromThread,The following statement contains a magic number: while (!success) {  	try {  		s = File.AppendText (name);  		success = true;  	}  	catch (Exception) {  		Thread.Sleep (10);  		times--;  		if (times == 0)  			success = true;  	}  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,OpenLogFileFromThread,The following statement contains a magic number: try {  	s = File.AppendText (name);  	success = true;  }  catch (Exception) {  	Thread.Sleep (10);  	times--;  	if (times == 0)  		success = true;  }  
Magic Number,net.Tesacom.GeneralUtilities.Logger,LogFile0,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile0.cs,OpenLogFileFromThread,The following statement contains a magic number: Thread.Sleep (10);  
Missing Default,net.Tesacom.GeneralUtilities,LatLongBase,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Position.cs,Parse,The following switch statement is missing a default case: switch (format) {  case PositionFormat.FloatDeg:  	Parse (double.Parse (value));  	break;  case PositionFormat.FloatMin:  	Parse (float.Parse (value) / 60);  	break;  case PositionFormat.FloatDegS:  	val = value.Substring (0' value.Length - 2);  	val1 = value.Substring (value.Length - 1' 1);  	setValue (double.Parse (val)' val1);  	break;  case PositionFormat.Decoded:  	var1 = 0;  	var2 = value.IndexOf ('°');  	val = value.Substring (0' var2 - var1);  	var1 = var2;  	var2 = value.IndexOf ('\'');  	val1 = value.Substring (var1 + 1' var2 - var1 - 1);  	var1 = var2;  	var2 = value.IndexOf ('\"');  	val2 = value.Substring (var1 + 1' var2 - var1 - 1);  	val3 = value.Substring (value.Length - 1' 1);  	setValue (int.Parse (val)' int.Parse (val1)' double.Parse (val2)' val3);  	break;  }  
Missing Default,net.Tesacom.GeneralUtilities.Geographic,SquaredGeofence,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Geofence.cs,ParseXML,The following switch statement is missing a default case: switch (pNode.Name.ToLower ()) {  case "degmin":  	foreach (XmlAttribute a in pNode.Attributes) {  		if (a.Name.ToLower () == "value") {  			try {  				deg1 = Convert.ToSingle (a.Value);  			}  			catch (Exception) {  			}  			break;  		}  	}  	break;  case "degmax":  	foreach (XmlAttribute a in pNode.Attributes) {  		if (a.Name.ToLower () == "value") {  			try {  				deg2 = Convert.ToSingle (a.Value);  			}  			catch (Exception) {  			}  			break;  		}  	}  	break;  case "point":  	foreach (XmlNode lNode in pNode.ChildNodes) {  		switch (lNode.Name.ToLower ()) {  		case "latitude":  			foreach (XmlAttribute a in lNode.Attributes) {  				if (a.Name.ToLower () == "value") {  					try {  						pos.Latitude.setValue (Convert.ToSingle (a.Value));  					}  					catch (Exception) {  					}  					break;  				}  			}  			break;  		case "longitude":  			foreach (XmlAttribute a in lNode.Attributes) {  				if (a.Name.ToLower () == "value") {  					try {  						pos.Longitude.setValue (Convert.ToSingle (a.Value));  					}  					catch (Exception) {  					}  					break;  				}  			}  			break;  		}  	}  	loop++;  	break;  }  
Missing Default,net.Tesacom.GeneralUtilities.Geographic,SquaredGeofence,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Geofence.cs,ParseXML,The following switch statement is missing a default case: switch (lNode.Name.ToLower ()) {  case "latitude":  	foreach (XmlAttribute a in lNode.Attributes) {  		if (a.Name.ToLower () == "value") {  			try {  				pos.Latitude.setValue (Convert.ToSingle (a.Value));  			}  			catch (Exception) {  			}  			break;  		}  	}  	break;  case "longitude":  	foreach (XmlAttribute a in lNode.Attributes) {  		if (a.Name.ToLower () == "value") {  			try {  				pos.Longitude.setValue (Convert.ToSingle (a.Value));  			}  			catch (Exception) {  			}  			break;  		}  	}  	break;  }  
Missing Default,net.Tesacom.GeneralUtilities.Geographic,SquaredGeofence,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Geographic\Geofence.cs,ParseXML,The following switch statement is missing a default case: switch (loop) {  case 1:  	if ((pos1.Latitude.getValue () != DefaultPosition.Latitude) && (pos1.Longitude.getValue () != DefaultPosition.Longitude))  		pos1 = pos;  	break;  case 2:  	if ((pos2.Latitude.getValue () != DefaultPosition.Latitude) && (pos2.Longitude.getValue () != DefaultPosition.Longitude))  		pos2 = pos;  	loop++;  	break;  }  
Missing Default,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,logFileName,The following switch statement is missing a default case: switch (dirType) {  case DirFileType.YearMonthDir:  	if (LogDir.EndsWith ("\\"))  		localLogDir = string.Format ("{0}{1}\\{2}"' LogDir' DateTime.Now.ToString ("yy")' DateTime.Now.ToString ("MM"));  	else if (LogDir.EndsWith (new string (Convert.ToChar (0x5C)' 1)))  		localLogDir = string.Format ("{0}\\{1}\\{2}"' LogDir.Remove (logDir.Length - 1)' DateTime.Now.ToString ("yy")' DateTime.Now.ToString ("MM"));  	else  		localLogDir = string.Format ("{0}\\{1}\\{2}"' LogDir' DateTime.Now.ToString ("yy")' DateTime.Now.ToString ("MM"));  	break;  case DirFileType.YearMonthDayDir:  	if (LogDir.EndsWith ("\\"))  		localLogDir = string.Format ("{0}{1}\\{2}\\{3}"' LogDir' DateTime.Now.ToString ("yy")' DateTime.Now.ToString ("MM")' DateTime.Now.ToString ("dd"));  	else if (LogDir.EndsWith (new string (Convert.ToChar (0x5C)' 1)))  		localLogDir = string.Format ("{0}\\{1}\\{2}\\{3}"' LogDir.Remove (logDir.Length - 1)' DateTime.Now.ToString ("yy")' DateTime.Now.ToString ("MM")' DateTime.Now.ToString ("dd"));  	else  		localLogDir = string.Format ("{0}\\{1}\\{2}\\{3}"' LogDir' DateTime.Now.ToString ("yy")' DateTime.Now.ToString ("MM")' DateTime.Now.ToString ("dd"));  	break;  }  
Missing Default,net.Tesacom.GeneralUtilities.Logger,LogFile,C:\repos\jemc771_TsdWebApp\GeneralUtilities\LogFile.cs,checkLogFileNumber,The following switch statement is missing a default case: switch (log.dirType) {  case DirFileType.YearMonthDir:  	if (log.logDir.EndsWith ("\\"))  		localLogDir = string.Format ("{0}{1}\\{2}"' log.logDir' DateTime.Now.ToString ("yy")' DateTime.Now.ToString ("MM"));  	else if (log.logDir.EndsWith (new string (Convert.ToChar (0x5C)' 1)))  		localLogDir = string.Format ("{0}\\{1}\\{2}"' log.logDir.Remove (log.logDir.Length - 1)' DateTime.Now.ToString ("yy")' DateTime.Now.ToString ("MM"));  	else  		localLogDir = string.Format ("{0}\\{1}\\{2}"' log.logDir' DateTime.Now.ToString ("yy")' DateTime.Now.ToString ("MM"));  	break;  case DirFileType.YearMonthDayDir:  	if (log.logDir.EndsWith ("\\"))  		localLogDir = string.Format ("{0}{1}\\{2}\\{3}"' log.logDir' DateTime.Now.ToString ("yy")' DateTime.Now.ToString ("MM")' DateTime.Now.ToString ("dd"));  	else if (log.logDir.EndsWith (new string (Convert.ToChar (0x5C)' 1)))  		localLogDir = string.Format ("{0}\\{1}\\{2}\\{3}"' log.logDir.Remove (log.logDir.Length - 1)' DateTime.Now.ToString ("yy")' DateTime.Now.ToString ("MM")' DateTime.Now.ToString ("dd"));  	else  		localLogDir = string.Format ("{0}\\{1}\\{2}\\{3}"' log.logDir' DateTime.Now.ToString ("yy")' DateTime.Now.ToString ("MM")' DateTime.Now.ToString ("dd"));  	break;  }  
Missing Default,GeneralUtilities,Parameter,C:\repos\jemc771_TsdWebApp\GeneralUtilities\Parameter.cs,Parse,The following switch statement is missing a default case: switch (attributes.Name.ToLower ()) {  case "name":  	name = attributes.Value.ToLower ();  	foreach (XmlNode a in DestNode.ChildNodes) {  		if (a.Name == "values") {  			minimo = a.Attributes ["min"].Value;  			maximo = a.Attributes ["max"].Value;  			defaultValue = a.Attributes ["default"].Value;  		}  		if (a.Name == "desc") {  			desc = a.InnerText;  		}  		if (a.Name == "help") {  			help = a.InnerText;  		}  	}  	break;  case "pattern":  	pattern = attributes.Value;  	break;  case "parent":  	parent = attributes.Value;  	break;  case "level":  	level = attributes.Value;  	break;  case "datatype":  	dataType = attributes.Value;  	break;  case "section":  	section = attributes.Value;  	break;  }  
