Implementation smell,Namespace,Class,File,Method,Description
Long Method,IBSampleApp,IBSampleApp,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\IBSampleApp.cs,UpdateUI,The method has 106 lines of code.
Complex Method,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,UpdateUI,Cyclomatic complexity of the method is 19
Complex Method,IBSampleApp.ui,ContractManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\ContractManager.cs,UpdateUI,Cyclomatic complexity of the method is 10
Complex Method,IBSampleApp.ui,MarketDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\MarketDataManager.cs,UpdateUI,Cyclomatic complexity of the method is 16
Complex Method,IBSampleApp.ui,OrderManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderManager.cs,UpdateUI,Cyclomatic complexity of the method is 14
Complex Method,IBSampleApp,OrderDialog,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderDialog.cs,AlgoStrategy_SelectedIndexChanged,Cyclomatic complexity of the method is 15
Complex Method,IBSampleApp,OrderDialog,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderDialog.cs,GetVolatilityAttributes,Cyclomatic complexity of the method is 8
Complex Method,IBSampleApp,OrderDialog,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderDialog.cs,GetScaleAttributes,Cyclomatic complexity of the method is 9
Complex Method,IBSampleApp,IBSampleApp,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\IBSampleApp.cs,UpdateUI,Cyclomatic complexity of the method is 51
Complex Method,IBSampleApp,IBSampleApp,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\IBSampleApp.cs,HandleErrorMessage,Cyclomatic complexity of the method is 8
Long Parameter List,IBSampleApp.messages,AccountSummaryMessage,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\messages\AccountSummaryMessage.cs,AccountSummaryMessage,The method has 5 parameters.
Long Parameter List,IBSampleApp.messages,DeepBookMessage,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\messages\DeepBookMessage.cs,DeepBookMessage,The method has 7 parameters.
Long Parameter List,IBSampleApp.messages,HistoricalDataMessage,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\messages\HistoricalDataMessage.cs,HistoricalDataMessage,The method has 10 parameters.
Long Parameter List,IBSampleApp.messages,OrderStatusMessage,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\messages\OrderStatusMessage.cs,OrderStatusMessage,The method has 10 parameters.
Long Parameter List,IBSampleApp.messages,RealTimeBarMessage,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\messages\RealTimeBarMessage.cs,RealTimeBarMessage,The method has 9 parameters.
Long Parameter List,IBSampleApp.messages,ScannerMessage,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\messages\ScannerMessage.cs,ScannerMessage,The method has 7 parameters.
Long Parameter List,IBSampleApp.messages,TickOptionMessage,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\messages\TickOptionMessage.cs,TickOptionMessage,The method has 10 parameters.
Long Parameter List,IBSampleApp.messages,UpdatePortfolioMessage,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\messages\UpdatePortfolioMessage.cs,UpdatePortfolioMessage,The method has 8 parameters.
Long Parameter List,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,AccountManager,The method has 6 parameters.
Long Parameter List,IBSampleApp.ui,HistoricalDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\HistoricalDataManager.cs,AddRequest,The method has 7 parameters.
Long Parameter List,IBSampleApp,IBClient,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\backend\IBClient.cs,tickEFP,The method has 9 parameters.
Long Parameter List,IBSampleApp,IBClient,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\backend\IBClient.cs,tickOptionComputation,The method has 10 parameters.
Long Parameter List,IBSampleApp,IBClient,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\backend\IBClient.cs,accountSummary,The method has 5 parameters.
Long Parameter List,IBSampleApp,IBClient,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\backend\IBClient.cs,updatePortfolio,The method has 8 parameters.
Long Parameter List,IBSampleApp,IBClient,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\backend\IBClient.cs,orderStatus,The method has 10 parameters.
Long Parameter List,IBSampleApp,IBClient,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\backend\IBClient.cs,historicalData,The method has 10 parameters.
Long Parameter List,IBSampleApp,IBClient,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\backend\IBClient.cs,updateMktDepth,The method has 6 parameters.
Long Parameter List,IBSampleApp,IBClient,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\backend\IBClient.cs,updateMktDepthL2,The method has 7 parameters.
Long Parameter List,IBSampleApp,IBClient,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\backend\IBClient.cs,realtimeBar,The method has 9 parameters.
Long Parameter List,IBSampleApp,IBClient,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\backend\IBClient.cs,scannerData,The method has 7 parameters.
Long Statement,IBSampleApp.types,AccountAlias,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\types\FinancialAdvisorTypes.cs,ToXmlString,The length of the statement  "	string xml = "\t<AccountAlias>" + "\t\t<Account>" + account + "</Account>" + "\t\t\t<Alias>" + alias + "</Alias>" + "\t</AccountAlias>"; " is 136.
Long Statement,IBSampleApp.types,AllocationProfile,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\types\FinancialAdvisorTypes.cs,ToXmlString,The length of the statement  "	string xml = "  <AllocationProfile>" + "      <name>" + name + "</name>" + "      <type>" + Type + "</type>" + "      <ListOfAllocations varName=\"listOfAllocations\">"; " is 169.
Long Statement,IBSampleApp.types,Allocation,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\types\FinancialAdvisorTypes.cs,ToXmlString,The length of the statement  "	string xml = "          <Allocation>" + "              <acct>" + account + "</acct>" + "              <amount>" + amount + "</amount>" + "              <posEff>O</posEff>" + "          </Allocation>"; " is 200.
Long Statement,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandleAccountSummary,The length of the statement  "		if (accountSummaryGrid [0' i].Value.Equals (summaryMessage.Tag) && accountSummaryGrid [3' i].Value.Equals (summaryMessage.Account)) { " is 133.
Long Statement,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandlePortfolioValue,The length of the statement  "	accountPortfolioGrid [0' accountPortfolioGrid.Rows.Count - 1].Value = Utils.ContractToString (updatePortfolioMessage.Contract); " is 127.
Long Statement,IBSampleApp.ui,AdvisorManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AdvisorManager.cs,SaveProfiles,The length of the statement  "		AllocationProfile allocProfile = new AllocationProfile ((string)profilesGrid [0' i].Value' (int)profilesGrid [1' i].Value); " is 123.
Long Statement,IBSampleApp.ui,ContractManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\ContractManager.cs,HandleContractMessage,The length of the statement  "	ContractDetailsGrid [0' ContractDetailsGrid.Rows.Count - 1].Value = contractDetailsMessage.ContractDetails.Summary.Symbol; " is 122.
Long Statement,IBSampleApp.ui,ContractManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\ContractManager.cs,HandleContractMessage,The length of the statement  "	ContractDetailsGrid [1' ContractDetailsGrid.Rows.Count - 1].Value = contractDetailsMessage.ContractDetails.Summary.LocalSymbol; " is 127.
Long Statement,IBSampleApp.ui,ContractManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\ContractManager.cs,HandleContractMessage,The length of the statement  "	ContractDetailsGrid [2' ContractDetailsGrid.Rows.Count - 1].Value = contractDetailsMessage.ContractDetails.Summary.SecType; " is 123.
Long Statement,IBSampleApp.ui,ContractManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\ContractManager.cs,HandleContractMessage,The length of the statement  "	ContractDetailsGrid [3' ContractDetailsGrid.Rows.Count - 1].Value = contractDetailsMessage.ContractDetails.Summary.Currency; " is 124.
Long Statement,IBSampleApp.ui,ContractManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\ContractManager.cs,HandleContractMessage,The length of the statement  "	ContractDetailsGrid [4' ContractDetailsGrid.Rows.Count - 1].Value = contractDetailsMessage.ContractDetails.Summary.Exchange; " is 124.
Long Statement,IBSampleApp.ui,ContractManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\ContractManager.cs,HandleContractMessage,The length of the statement  "	ContractDetailsGrid [5' ContractDetailsGrid.Rows.Count - 1].Value = contractDetailsMessage.ContractDetails.Summary.PrimaryExch; " is 127.
Long Statement,IBSampleApp.ui,ContractManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\ContractManager.cs,HandleContractMessage,The length of the statement  "	ContractDetailsGrid [6' ContractDetailsGrid.Rows.Count - 1].Value = contractDetailsMessage.ContractDetails.Summary.Expiry; " is 122.
Long Statement,IBSampleApp.ui,ContractManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\ContractManager.cs,HandleContractMessage,The length of the statement  "	ContractDetailsGrid [7' ContractDetailsGrid.Rows.Count - 1].Value = contractDetailsMessage.ContractDetails.Summary.Multiplier; " is 126.
Long Statement,IBSampleApp.ui,ContractManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\ContractManager.cs,HandleContractMessage,The length of the statement  "	ContractDetailsGrid [8' ContractDetailsGrid.Rows.Count - 1].Value = contractDetailsMessage.ContractDetails.Summary.Strike; " is 122.
Long Statement,IBSampleApp.ui,ContractManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\ContractManager.cs,HandleContractMessage,The length of the statement  "	ContractDetailsGrid [9' ContractDetailsGrid.Rows.Count - 1].Value = contractDetailsMessage.ContractDetails.Summary.Right; " is 121.
Long Statement,IBSampleApp.ui,ContractManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\ContractManager.cs,HandleContractMessage,The length of the statement  "	ContractDetailsGrid [10' ContractDetailsGrid.Rows.Count - 1].Value = contractDetailsMessage.ContractDetails.Summary.ConId; " is 122.
Long Statement,IBSampleApp.ui,HistoricalDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\HistoricalDataManager.cs,AddRequest,The length of the statement  "	ibClient.ClientSocket.reqHistoricalData (currentTicker + HISTORICAL_ID_BASE' contract' endDateTime' durationString' barSizeSetting' whatToShow' useRTH' 1); " is 155.
Long Statement,IBSampleApp.ui,OrderManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderManager.cs,EditOrder,The length of the statement  "	if (liveOrdersGrid.SelectedRows.Count > 0 && (int)(liveOrdersGrid.SelectedRows [0].Cells [2].Value) != 0 && (int)(liveOrdersGrid.SelectedRows [0].Cells [1].Value) == ibClient.ClientId) { " is 186.
Long Statement,IBSampleApp.ui,OrderManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderManager.cs,PopulateTradeLog,The length of the statement  "	tradeLogGrid [5' index].Value = message.Contract.Symbol + " " + message.Contract.SecType + " " + message.Contract.Exchange; " is 123.
Long Statement,IBSampleApp.ui,OrderManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderManager.cs,PopulateOrderRow,The length of the statement  "	liveOrdersGrid [6' rowIndex].Value = orderMessage.Contract.Symbol + " " + orderMessage.Contract.SecType + " " + orderMessage.Contract.Exchange; " is 143.
Long Statement,IBSampleApp.ui,RealTimeBarsManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\RealTimeBarsManager.cs,AddRequest,The length of the statement  "	//ibClient.ClientSocket.reqHistoricalData(currentTicker' contract' endDateTime' durationString' barSizeSetting' whatToShow' useRTH' 1); " is 135.
Long Statement,IBSampleApp,IBClient,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\backend\IBClient.cs,tickPrice,The length of the statement  "	addTextToBox ("Tick Price. Ticker Id:" + tickerId + "' Type: " + TickType.getField (field) + "' Price: " + price + "\n"); " is 121.
Long Statement,IBSampleApp,IBClient,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\backend\IBClient.cs,tickString,The length of the statement  "	addTextToBox ("Tick string. Ticker Id:" + tickerId + "' Type: " + TickType.getField (tickType) + "' Value: " + value + "\n"); " is 125.
Long Statement,IBSampleApp,IBClient,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\backend\IBClient.cs,tickGeneric,The length of the statement  "	addTextToBox ("Tick Generic. Ticker Id:" + tickerId + "' Field: " + TickType.getField (field) + "' Value: " + value + "\n"); " is 124.
Long Statement,IBSampleApp,IBClient,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\backend\IBClient.cs,tickEFP,The length of the statement  "	addTextToBox ("TickEFP. " + tickerId + "' Type: " + tickType + "' BasisPoints: " + basisPoints + "' FormattedBasisPoints: " + formattedBasisPoints + "' ImpliedFuture: " + impliedFuture + "' HoldDays: " + holdDays + "' FutureExpiry: " + futureExpiry + "' DividendImpact: " + dividendImpact + "' DividendsToExpiry: " + dividendsToExpiry + "\n"); " is 343.
Long Statement,IBSampleApp,IBClient,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\backend\IBClient.cs,deltaNeutralValidation,The length of the statement  "	addTextToBox ("DeltaNeutralValidation. " + reqId + "' ConId: " + underComp.ConId + "' Delta: " + underComp.Delta + "' Price: " + underComp.Price + "\n"); " is 153.
Long Statement,IBSampleApp,IBClient,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\backend\IBClient.cs,tickOptionComputation,The length of the statement  "	//addTextToBox("TickOptionComputation. TickerId: " + tickerId + "' field: " + field + "' ImpliedVolatility: " + impliedVolatility + "' Delta: " + delta " is 151.
Long Statement,IBSampleApp,IBClient,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\backend\IBClient.cs,tickOptionComputation,The length of the statement  "	//  + "' OptionPrice: " + optPrice + "' pvDividend: " + pvDividend + "' Gamma: " + gamma + "' Vega: " + vega + "' Theta: " + theta + "' UnderlyingPrice: " + undPrice + "\n"); " is 174.
Long Statement,IBSampleApp,IBClient,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\backend\IBClient.cs,tickOptionComputation,The length of the statement  "	parentUI.HandleMessage (new TickOptionMessage (tickerId' field' impliedVolatility' delta' optPrice' pvDividend' gamma' vega' theta' undPrice)); " is 143.
Long Statement,IBSampleApp,IBClient,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\backend\IBClient.cs,updatePortfolio,The length of the statement  "	parentUI.HandleMessage (new UpdatePortfolioMessage (contract' position' marketPrice' marketValue' averageCost' unrealisedPNL' realisedPNL' accountName)); " is 153.
Long Statement,IBSampleApp,IBClient,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\backend\IBClient.cs,orderStatus,The length of the statement  "	parentUI.HandleMessage (new OrderStatusMessage (orderId' status' filled' remaining' avgFillPrice' permId' parentId' lastFillPrice' clientId' whyHeld)); " is 151.
Long Statement,IBSampleApp,IBClient,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\backend\IBClient.cs,updateNewsBulletin,The length of the statement  "	addTextToBox ("News Bulletins. " + msgId + " - Type: " + msgType + "' Message: " + message + "' Exchange of Origin: " + origExchange + "\n"); " is 141.
Long Statement,IBSampleApp,IBSampleApp,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\IBSampleApp.cs,HandleErrorMessage,The length of the statement  "	else if (message.RequestId > DeepBookManager.TICK_ID_BASE && message.RequestId < HistoricalDataManager.HISTORICAL_ID_BASE) " is 122.
Long Statement,IBSampleApp.util,Utils,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\util\Utils.cs,ContractsAreEqual,The length of the statement  "	if (contractA.Symbol.Equals (contractB.Symbol) && contractA.SecType.Equals (contractB.SecType) && contractA.Currency.Equals (contractB.Currency)) { " is 147.
Long Statement,IBSampleApp.util,XmlHelper,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\util\XmlHelper.cs,GetGroupsList,The length of the statement  "		AdvisorGroup advisorGroup = new AdvisorGroup (groupsList.Item (i).ChildNodes [0].InnerText' groupsList.Item (i).ChildNodes [2].InnerText); " is 138.
Long Statement,IBSampleApp.util,XmlHelper,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\util\XmlHelper.cs,GetProfilesList,The length of the statement  "		AllocationProfile allocationProfile = new AllocationProfile (profilesList.Item (i).ChildNodes [0].InnerText' Int32.Parse (profilesList.Item (i).ChildNodes [1].InnerText)); " is 171.
Long Statement,IBSampleApp.util,XmlHelper,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\util\XmlHelper.cs,GetProfilesList,The length of the statement  "			allocationProfile.Allocations.Add (new Allocation (allocationNodes [j].ChildNodes [0].InnerText' Double.Parse (allocationNodes [j].ChildNodes [1].InnerText))); " is 159.
Magic Number,IBSampleApp.types,AllocationProfileType,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\types\IBTypes.cs,GetAsData,The following statement contains a magic number: allocationProfileTypes.Rows.Add ("Financial Ratios"' 2);  
Magic Number,IBSampleApp.types,AllocationProfileType,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\types\IBTypes.cs,GetAsData,The following statement contains a magic number: allocationProfileTypes.Rows.Add ("Shares"' 3);  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandleAccountSummary,The following statement contains a magic number: for (int i = 0; i < accountSummaryGrid.Rows.Count; i++) {  	if (accountSummaryGrid [0' i].Value.Equals (summaryMessage.Tag) && accountSummaryGrid [3' i].Value.Equals (summaryMessage.Account)) {  		accountSummaryGrid [1' i].Value = summaryMessage.Value;  		accountSummaryGrid [2' i].Value = summaryMessage.Currency;  		return;  	}  }  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandleAccountSummary,The following statement contains a magic number: for (int i = 0; i < accountSummaryGrid.Rows.Count; i++) {  	if (accountSummaryGrid [0' i].Value.Equals (summaryMessage.Tag) && accountSummaryGrid [3' i].Value.Equals (summaryMessage.Account)) {  		accountSummaryGrid [1' i].Value = summaryMessage.Value;  		accountSummaryGrid [2' i].Value = summaryMessage.Currency;  		return;  	}  }  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandleAccountSummary,The following statement contains a magic number: if (accountSummaryGrid [0' i].Value.Equals (summaryMessage.Tag) && accountSummaryGrid [3' i].Value.Equals (summaryMessage.Account)) {  	accountSummaryGrid [1' i].Value = summaryMessage.Value;  	accountSummaryGrid [2' i].Value = summaryMessage.Currency;  	return;  }  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandleAccountSummary,The following statement contains a magic number: if (accountSummaryGrid [0' i].Value.Equals (summaryMessage.Tag) && accountSummaryGrid [3' i].Value.Equals (summaryMessage.Account)) {  	accountSummaryGrid [1' i].Value = summaryMessage.Value;  	accountSummaryGrid [2' i].Value = summaryMessage.Currency;  	return;  }  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandleAccountSummary,The following statement contains a magic number: accountSummaryGrid [2' i].Value = summaryMessage.Currency;  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandleAccountSummary,The following statement contains a magic number: accountSummaryGrid [2' accountSummaryGrid.Rows.Count - 1].Value = summaryMessage.Currency;  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandleAccountSummary,The following statement contains a magic number: accountSummaryGrid [3' accountSummaryGrid.Rows.Count - 1].Value = summaryMessage.Account;  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandleAccountValue,The following statement contains a magic number: for (int i = 0; i < accountValueGrid.Rows.Count; i++) {  	if (accountValueGrid [0' i].Value.Equals (accountValueMessage.Key)) {  		accountValueGrid [1' i].Value = accountValueMessage.Value;  		accountValueGrid [2' i].Value = accountValueMessage.Currency;  		return;  	}  }  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandleAccountValue,The following statement contains a magic number: if (accountValueGrid [0' i].Value.Equals (accountValueMessage.Key)) {  	accountValueGrid [1' i].Value = accountValueMessage.Value;  	accountValueGrid [2' i].Value = accountValueMessage.Currency;  	return;  }  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandleAccountValue,The following statement contains a magic number: accountValueGrid [2' i].Value = accountValueMessage.Currency;  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandleAccountValue,The following statement contains a magic number: accountValueGrid [2' accountValueGrid.Rows.Count - 1].Value = accountValueMessage.Currency;  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandlePortfolioValue,The following statement contains a magic number: for (int i = 0; i < accountPortfolioGrid.Rows.Count; i++) {  	if (accountPortfolioGrid [0' i].Value.Equals (Utils.ContractToString (updatePortfolioMessage.Contract))) {  		accountPortfolioGrid [1' i].Value = updatePortfolioMessage.Position;  		accountPortfolioGrid [2' i].Value = updatePortfolioMessage.MarketPrice;  		accountPortfolioGrid [3' i].Value = updatePortfolioMessage.MarketValue;  		accountPortfolioGrid [4' i].Value = updatePortfolioMessage.AverageCost;  		accountPortfolioGrid [5' i].Value = updatePortfolioMessage.UnrealisedPNL;  		accountPortfolioGrid [6' i].Value = updatePortfolioMessage.RealisedPNL;  		return;  	}  }  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandlePortfolioValue,The following statement contains a magic number: for (int i = 0; i < accountPortfolioGrid.Rows.Count; i++) {  	if (accountPortfolioGrid [0' i].Value.Equals (Utils.ContractToString (updatePortfolioMessage.Contract))) {  		accountPortfolioGrid [1' i].Value = updatePortfolioMessage.Position;  		accountPortfolioGrid [2' i].Value = updatePortfolioMessage.MarketPrice;  		accountPortfolioGrid [3' i].Value = updatePortfolioMessage.MarketValue;  		accountPortfolioGrid [4' i].Value = updatePortfolioMessage.AverageCost;  		accountPortfolioGrid [5' i].Value = updatePortfolioMessage.UnrealisedPNL;  		accountPortfolioGrid [6' i].Value = updatePortfolioMessage.RealisedPNL;  		return;  	}  }  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandlePortfolioValue,The following statement contains a magic number: for (int i = 0; i < accountPortfolioGrid.Rows.Count; i++) {  	if (accountPortfolioGrid [0' i].Value.Equals (Utils.ContractToString (updatePortfolioMessage.Contract))) {  		accountPortfolioGrid [1' i].Value = updatePortfolioMessage.Position;  		accountPortfolioGrid [2' i].Value = updatePortfolioMessage.MarketPrice;  		accountPortfolioGrid [3' i].Value = updatePortfolioMessage.MarketValue;  		accountPortfolioGrid [4' i].Value = updatePortfolioMessage.AverageCost;  		accountPortfolioGrid [5' i].Value = updatePortfolioMessage.UnrealisedPNL;  		accountPortfolioGrid [6' i].Value = updatePortfolioMessage.RealisedPNL;  		return;  	}  }  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandlePortfolioValue,The following statement contains a magic number: for (int i = 0; i < accountPortfolioGrid.Rows.Count; i++) {  	if (accountPortfolioGrid [0' i].Value.Equals (Utils.ContractToString (updatePortfolioMessage.Contract))) {  		accountPortfolioGrid [1' i].Value = updatePortfolioMessage.Position;  		accountPortfolioGrid [2' i].Value = updatePortfolioMessage.MarketPrice;  		accountPortfolioGrid [3' i].Value = updatePortfolioMessage.MarketValue;  		accountPortfolioGrid [4' i].Value = updatePortfolioMessage.AverageCost;  		accountPortfolioGrid [5' i].Value = updatePortfolioMessage.UnrealisedPNL;  		accountPortfolioGrid [6' i].Value = updatePortfolioMessage.RealisedPNL;  		return;  	}  }  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandlePortfolioValue,The following statement contains a magic number: for (int i = 0; i < accountPortfolioGrid.Rows.Count; i++) {  	if (accountPortfolioGrid [0' i].Value.Equals (Utils.ContractToString (updatePortfolioMessage.Contract))) {  		accountPortfolioGrid [1' i].Value = updatePortfolioMessage.Position;  		accountPortfolioGrid [2' i].Value = updatePortfolioMessage.MarketPrice;  		accountPortfolioGrid [3' i].Value = updatePortfolioMessage.MarketValue;  		accountPortfolioGrid [4' i].Value = updatePortfolioMessage.AverageCost;  		accountPortfolioGrid [5' i].Value = updatePortfolioMessage.UnrealisedPNL;  		accountPortfolioGrid [6' i].Value = updatePortfolioMessage.RealisedPNL;  		return;  	}  }  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandlePortfolioValue,The following statement contains a magic number: if (accountPortfolioGrid [0' i].Value.Equals (Utils.ContractToString (updatePortfolioMessage.Contract))) {  	accountPortfolioGrid [1' i].Value = updatePortfolioMessage.Position;  	accountPortfolioGrid [2' i].Value = updatePortfolioMessage.MarketPrice;  	accountPortfolioGrid [3' i].Value = updatePortfolioMessage.MarketValue;  	accountPortfolioGrid [4' i].Value = updatePortfolioMessage.AverageCost;  	accountPortfolioGrid [5' i].Value = updatePortfolioMessage.UnrealisedPNL;  	accountPortfolioGrid [6' i].Value = updatePortfolioMessage.RealisedPNL;  	return;  }  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandlePortfolioValue,The following statement contains a magic number: if (accountPortfolioGrid [0' i].Value.Equals (Utils.ContractToString (updatePortfolioMessage.Contract))) {  	accountPortfolioGrid [1' i].Value = updatePortfolioMessage.Position;  	accountPortfolioGrid [2' i].Value = updatePortfolioMessage.MarketPrice;  	accountPortfolioGrid [3' i].Value = updatePortfolioMessage.MarketValue;  	accountPortfolioGrid [4' i].Value = updatePortfolioMessage.AverageCost;  	accountPortfolioGrid [5' i].Value = updatePortfolioMessage.UnrealisedPNL;  	accountPortfolioGrid [6' i].Value = updatePortfolioMessage.RealisedPNL;  	return;  }  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandlePortfolioValue,The following statement contains a magic number: if (accountPortfolioGrid [0' i].Value.Equals (Utils.ContractToString (updatePortfolioMessage.Contract))) {  	accountPortfolioGrid [1' i].Value = updatePortfolioMessage.Position;  	accountPortfolioGrid [2' i].Value = updatePortfolioMessage.MarketPrice;  	accountPortfolioGrid [3' i].Value = updatePortfolioMessage.MarketValue;  	accountPortfolioGrid [4' i].Value = updatePortfolioMessage.AverageCost;  	accountPortfolioGrid [5' i].Value = updatePortfolioMessage.UnrealisedPNL;  	accountPortfolioGrid [6' i].Value = updatePortfolioMessage.RealisedPNL;  	return;  }  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandlePortfolioValue,The following statement contains a magic number: if (accountPortfolioGrid [0' i].Value.Equals (Utils.ContractToString (updatePortfolioMessage.Contract))) {  	accountPortfolioGrid [1' i].Value = updatePortfolioMessage.Position;  	accountPortfolioGrid [2' i].Value = updatePortfolioMessage.MarketPrice;  	accountPortfolioGrid [3' i].Value = updatePortfolioMessage.MarketValue;  	accountPortfolioGrid [4' i].Value = updatePortfolioMessage.AverageCost;  	accountPortfolioGrid [5' i].Value = updatePortfolioMessage.UnrealisedPNL;  	accountPortfolioGrid [6' i].Value = updatePortfolioMessage.RealisedPNL;  	return;  }  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandlePortfolioValue,The following statement contains a magic number: if (accountPortfolioGrid [0' i].Value.Equals (Utils.ContractToString (updatePortfolioMessage.Contract))) {  	accountPortfolioGrid [1' i].Value = updatePortfolioMessage.Position;  	accountPortfolioGrid [2' i].Value = updatePortfolioMessage.MarketPrice;  	accountPortfolioGrid [3' i].Value = updatePortfolioMessage.MarketValue;  	accountPortfolioGrid [4' i].Value = updatePortfolioMessage.AverageCost;  	accountPortfolioGrid [5' i].Value = updatePortfolioMessage.UnrealisedPNL;  	accountPortfolioGrid [6' i].Value = updatePortfolioMessage.RealisedPNL;  	return;  }  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandlePortfolioValue,The following statement contains a magic number: accountPortfolioGrid [2' i].Value = updatePortfolioMessage.MarketPrice;  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandlePortfolioValue,The following statement contains a magic number: accountPortfolioGrid [3' i].Value = updatePortfolioMessage.MarketValue;  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandlePortfolioValue,The following statement contains a magic number: accountPortfolioGrid [4' i].Value = updatePortfolioMessage.AverageCost;  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandlePortfolioValue,The following statement contains a magic number: accountPortfolioGrid [5' i].Value = updatePortfolioMessage.UnrealisedPNL;  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandlePortfolioValue,The following statement contains a magic number: accountPortfolioGrid [6' i].Value = updatePortfolioMessage.RealisedPNL;  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandlePortfolioValue,The following statement contains a magic number: accountPortfolioGrid [2' accountPortfolioGrid.Rows.Count - 1].Value = updatePortfolioMessage.MarketPrice;  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandlePortfolioValue,The following statement contains a magic number: accountPortfolioGrid [3' accountPortfolioGrid.Rows.Count - 1].Value = updatePortfolioMessage.MarketValue;  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandlePortfolioValue,The following statement contains a magic number: accountPortfolioGrid [4' accountPortfolioGrid.Rows.Count - 1].Value = updatePortfolioMessage.AverageCost;  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandlePortfolioValue,The following statement contains a magic number: accountPortfolioGrid [5' accountPortfolioGrid.Rows.Count - 1].Value = updatePortfolioMessage.UnrealisedPNL;  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandlePortfolioValue,The following statement contains a magic number: accountPortfolioGrid [6' accountPortfolioGrid.Rows.Count - 1].Value = updatePortfolioMessage.RealisedPNL;  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandlePosition,The following statement contains a magic number: for (int i = 0; i < positionsGrid.Rows.Count; i++) {  	if (positionsGrid [0' i].Value.Equals (Utils.ContractToString (positionMessage.Contract))) {  		positionsGrid [1' i].Value = positionMessage.Account;  		positionsGrid [2' i].Value = positionMessage.Position;  		positionsGrid [3' i].Value = positionMessage.AverageCost;  		return;  	}  }  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandlePosition,The following statement contains a magic number: for (int i = 0; i < positionsGrid.Rows.Count; i++) {  	if (positionsGrid [0' i].Value.Equals (Utils.ContractToString (positionMessage.Contract))) {  		positionsGrid [1' i].Value = positionMessage.Account;  		positionsGrid [2' i].Value = positionMessage.Position;  		positionsGrid [3' i].Value = positionMessage.AverageCost;  		return;  	}  }  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandlePosition,The following statement contains a magic number: if (positionsGrid [0' i].Value.Equals (Utils.ContractToString (positionMessage.Contract))) {  	positionsGrid [1' i].Value = positionMessage.Account;  	positionsGrid [2' i].Value = positionMessage.Position;  	positionsGrid [3' i].Value = positionMessage.AverageCost;  	return;  }  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandlePosition,The following statement contains a magic number: if (positionsGrid [0' i].Value.Equals (Utils.ContractToString (positionMessage.Contract))) {  	positionsGrid [1' i].Value = positionMessage.Account;  	positionsGrid [2' i].Value = positionMessage.Position;  	positionsGrid [3' i].Value = positionMessage.AverageCost;  	return;  }  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandlePosition,The following statement contains a magic number: positionsGrid [2' i].Value = positionMessage.Position;  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandlePosition,The following statement contains a magic number: positionsGrid [3' i].Value = positionMessage.AverageCost;  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandlePosition,The following statement contains a magic number: positionsGrid [2' positionsGrid.Rows.Count - 1].Value = positionMessage.Position;  
Magic Number,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,HandlePosition,The following statement contains a magic number: positionsGrid [3' positionsGrid.Rows.Count - 1].Value = positionMessage.AverageCost;  
Magic Number,IBSampleApp.ui,AdvisorManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AdvisorManager.cs,UpdateUI,The following statement contains a magic number: switch (message.FaDataType) {  case 1: {  	HandleGroupsData (message.Data);  	break;  }  case 2: {  	HandleProfilesData (message.Data);  	break;  }  case 3: {  	HandleAliasesData (message.Data);  	break;  }  }  
Magic Number,IBSampleApp.ui,AdvisorManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AdvisorManager.cs,UpdateUI,The following statement contains a magic number: switch (message.FaDataType) {  case 1: {  	HandleGroupsData (message.Data);  	break;  }  case 2: {  	HandleProfilesData (message.Data);  	break;  }  case 3: {  	HandleAliasesData (message.Data);  	break;  }  }  
Magic Number,IBSampleApp.ui,AdvisorManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AdvisorManager.cs,HandleProfilesData,The following statement contains a magic number: for (int i = 0; i < profiles.Count; i++) {  	profilesGrid.Rows.Add (1);  	profilesGrid [0' i].Value = profiles [i].Name;  	profilesGrid [1' i].Value = profiles [i].Type;  	profilesGrid [2' i].Value = profiles [i].AllocationsToString ();  }  
Magic Number,IBSampleApp.ui,AdvisorManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AdvisorManager.cs,HandleProfilesData,The following statement contains a magic number: profilesGrid [2' i].Value = profiles [i].AllocationsToString ();  
Magic Number,IBSampleApp.ui,AdvisorManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AdvisorManager.cs,SaveProfiles,The following statement contains a magic number: for (int i = 0; i < profilesGrid.Rows.Count - 1; i++) {  	AllocationProfile allocProfile = new AllocationProfile ((string)profilesGrid [0' i].Value' (int)profilesGrid [1' i].Value);  	allocProfile.AllocationsFromString ((string)profilesGrid [2' i].Value);  	xmlData += allocProfile.ToXmlString ();  }  
Magic Number,IBSampleApp.ui,AdvisorManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AdvisorManager.cs,SaveProfiles,The following statement contains a magic number: allocProfile.AllocationsFromString ((string)profilesGrid [2' i].Value);  
Magic Number,IBSampleApp.ui,AdvisorManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AdvisorManager.cs,HandleGroupsData,The following statement contains a magic number: for (int i = 0; i < groups.Count; i++) {  	groupsGrid.Rows.Add (1);  	groupsGrid [0' i].Value = groups [i].Name;  	((DataGridViewComboBoxCell)groupsGrid [1' i]).Value = groups [i].DefaultMethod;  	groupsGrid [2' i].Value = groups [i].AccountsToString ();  }  
Magic Number,IBSampleApp.ui,AdvisorManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AdvisorManager.cs,HandleGroupsData,The following statement contains a magic number: groupsGrid [2' i].Value = groups [i].AccountsToString ();  
Magic Number,IBSampleApp.ui,AdvisorManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AdvisorManager.cs,SaveGroups,The following statement contains a magic number: for (int i = 0; i < groupsGrid.Rows.Count - 1; i++) {  	AdvisorGroup advisorGroup = new AdvisorGroup ((string)groupsGrid [0' i].Value' (string)groupsGrid [1' i].Value);  	advisorGroup.AccountsFromString ((string)groupsGrid [2' i].Value);  	xmlData += advisorGroup.ToXmlString ();  }  
Magic Number,IBSampleApp.ui,AdvisorManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AdvisorManager.cs,SaveGroups,The following statement contains a magic number: advisorGroup.AccountsFromString ((string)groupsGrid [2' i].Value);  
Magic Number,IBSampleApp.ui,ComboContractResults,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\ComboContractResults.cs,UpdateUI,The following statement contains a magic number: contractResults [2' contractResults.Rows.Count - 1].Value = message.ContractDetails.Summary.Multiplier;  
Magic Number,IBSampleApp.ui,ComboContractResults,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\ComboContractResults.cs,UpdateUI,The following statement contains a magic number: contractResults [3' contractResults.Rows.Count - 1].Value = message.ContractDetails.Summary.Strike;  
Magic Number,IBSampleApp.ui,ComboContractResults,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\ComboContractResults.cs,UpdateUI,The following statement contains a magic number: contractResults [4' contractResults.Rows.Count - 1].Value = message.ContractDetails.Summary.Right;  
Magic Number,IBSampleApp.ui,ComboContractResults,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\ComboContractResults.cs,UpdateUI,The following statement contains a magic number: contractResults [5' contractResults.Rows.Count - 1].Value = message.ContractDetails.Summary.Expiry;  
Magic Number,IBSampleApp.ui,ComboContractResults,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\ComboContractResults.cs,UpdateUI,The following statement contains a magic number: contractResults [6' contractResults.Rows.Count - 1].Value = message.ContractDetails.Summary.ConId;  
Magic Number,IBSampleApp.ui,ContractManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\ContractManager.cs,HandleContractMessage,The following statement contains a magic number: ContractDetailsGrid [2' ContractDetailsGrid.Rows.Count - 1].Value = contractDetailsMessage.ContractDetails.Summary.SecType;  
Magic Number,IBSampleApp.ui,ContractManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\ContractManager.cs,HandleContractMessage,The following statement contains a magic number: ContractDetailsGrid [3' ContractDetailsGrid.Rows.Count - 1].Value = contractDetailsMessage.ContractDetails.Summary.Currency;  
Magic Number,IBSampleApp.ui,ContractManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\ContractManager.cs,HandleContractMessage,The following statement contains a magic number: ContractDetailsGrid [4' ContractDetailsGrid.Rows.Count - 1].Value = contractDetailsMessage.ContractDetails.Summary.Exchange;  
Magic Number,IBSampleApp.ui,ContractManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\ContractManager.cs,HandleContractMessage,The following statement contains a magic number: ContractDetailsGrid [5' ContractDetailsGrid.Rows.Count - 1].Value = contractDetailsMessage.ContractDetails.Summary.PrimaryExch;  
Magic Number,IBSampleApp.ui,ContractManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\ContractManager.cs,HandleContractMessage,The following statement contains a magic number: ContractDetailsGrid [6' ContractDetailsGrid.Rows.Count - 1].Value = contractDetailsMessage.ContractDetails.Summary.Expiry;  
Magic Number,IBSampleApp.ui,ContractManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\ContractManager.cs,HandleContractMessage,The following statement contains a magic number: ContractDetailsGrid [7' ContractDetailsGrid.Rows.Count - 1].Value = contractDetailsMessage.ContractDetails.Summary.Multiplier;  
Magic Number,IBSampleApp.ui,ContractManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\ContractManager.cs,HandleContractMessage,The following statement contains a magic number: ContractDetailsGrid [8' ContractDetailsGrid.Rows.Count - 1].Value = contractDetailsMessage.ContractDetails.Summary.Strike;  
Magic Number,IBSampleApp.ui,ContractManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\ContractManager.cs,HandleContractMessage,The following statement contains a magic number: ContractDetailsGrid [9' ContractDetailsGrid.Rows.Count - 1].Value = contractDetailsMessage.ContractDetails.Summary.Right;  
Magic Number,IBSampleApp.ui,ContractManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\ContractManager.cs,HandleContractMessage,The following statement contains a magic number: ContractDetailsGrid [10' ContractDetailsGrid.Rows.Count - 1].Value = contractDetailsMessage.ContractDetails.Summary.ConId;  
Magic Number,IBSampleApp.ui,OptionsManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OptionsManager.cs,HandlePosition,The following statement contains a magic number: if (positionMessage.Contract.SecType.Equals ("OPT")) {  	for (int i = 0; i < positionsGrid.Rows.Count; i++) {  		if (positionsGrid [POS_CONTRACT_IDX' i].Value.Equals (Utils.ContractToString (positionMessage.Contract))) {  			positionsGrid [POS_ACCOUNT_IDX' i].Value = positionMessage.AccountName;  			positionsGrid [POS_POSITION_IDX' i].Value = positionMessage.Position;  			positionsGrid [POS_MARKET_PRICE_IDX' i].Value = positionMessage.MarketPrice;  			positionsGrid [POS_MARKET_VALUE_IDX' i].Value = positionMessage.MarketValue;  			positionsGrid [POS_AVG_COST_IDX' i].Value = positionMessage.AverageCost;  			positionsGrid [POS_UNREALISED_PNL_IDX' i].Value = positionMessage.UnrealisedPNL;  			positionsGrid [POS_REALISED_PNL_IDX' i].Value = positionMessage.RealisedPNL;  			return;  		}  	}  	positionsGrid.Rows.Add (1);  	positionsGrid [0' positionsGrid.Rows.Count - 1].Value = Utils.ContractToString (positionMessage.Contract);  	positionsGrid [1' positionsGrid.Rows.Count - 1].Value = positionMessage.AccountName;  	positionsGrid [2' positionsGrid.Rows.Count - 1].Value = positionMessage.Position;  	positionsGrid [3' positionsGrid.Rows.Count - 1].Value = positionMessage.AverageCost;  	currentOptionsPositions.Add (positionMessage.Contract);  }  
Magic Number,IBSampleApp.ui,OptionsManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OptionsManager.cs,HandlePosition,The following statement contains a magic number: if (positionMessage.Contract.SecType.Equals ("OPT")) {  	for (int i = 0; i < positionsGrid.Rows.Count; i++) {  		if (positionsGrid [POS_CONTRACT_IDX' i].Value.Equals (Utils.ContractToString (positionMessage.Contract))) {  			positionsGrid [POS_ACCOUNT_IDX' i].Value = positionMessage.AccountName;  			positionsGrid [POS_POSITION_IDX' i].Value = positionMessage.Position;  			positionsGrid [POS_MARKET_PRICE_IDX' i].Value = positionMessage.MarketPrice;  			positionsGrid [POS_MARKET_VALUE_IDX' i].Value = positionMessage.MarketValue;  			positionsGrid [POS_AVG_COST_IDX' i].Value = positionMessage.AverageCost;  			positionsGrid [POS_UNREALISED_PNL_IDX' i].Value = positionMessage.UnrealisedPNL;  			positionsGrid [POS_REALISED_PNL_IDX' i].Value = positionMessage.RealisedPNL;  			return;  		}  	}  	positionsGrid.Rows.Add (1);  	positionsGrid [0' positionsGrid.Rows.Count - 1].Value = Utils.ContractToString (positionMessage.Contract);  	positionsGrid [1' positionsGrid.Rows.Count - 1].Value = positionMessage.AccountName;  	positionsGrid [2' positionsGrid.Rows.Count - 1].Value = positionMessage.Position;  	positionsGrid [3' positionsGrid.Rows.Count - 1].Value = positionMessage.AverageCost;  	currentOptionsPositions.Add (positionMessage.Contract);  }  
Magic Number,IBSampleApp.ui,OptionsManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OptionsManager.cs,HandlePosition,The following statement contains a magic number: positionsGrid [2' positionsGrid.Rows.Count - 1].Value = positionMessage.Position;  
Magic Number,IBSampleApp.ui,OptionsManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OptionsManager.cs,HandlePosition,The following statement contains a magic number: positionsGrid [3' positionsGrid.Rows.Count - 1].Value = positionMessage.AverageCost;  
Magic Number,IBSampleApp.ui,DeepBookManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\DeepBookManager.cs,UpdateUI,The following statement contains a magic number: if (grid.Rows.Count == 0)  	grid.Rows.Add (numRows * 2);  
Magic Number,IBSampleApp.ui,DeepBookManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\DeepBookManager.cs,UpdateUI,The following statement contains a magic number: grid.Rows.Add (numRows * 2);  
Magic Number,IBSampleApp.ui,HistoricalDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\HistoricalDataManager.cs,PaintChart,The following statement contains a magic number: for (int i = 0; i < historicalData.Count; i++) {  	if (historicalData [i].Date.Length == fullDatePattern.Length)  		DateTime.TryParseExact (historicalData [i].Date' fullDatePattern' null' DateTimeStyles.None' out dt);  	else if (historicalData [i].Date.Length == yearMonthDayPattern.Length)  		DateTime.TryParseExact (historicalData [i].Date' yearMonthDayPattern' null' DateTimeStyles.None' out dt);  	else  		continue;  	// adding date and high  	historicalChart.Series [0].Points.AddXY (dt' historicalData [i].High);  	// adding low  	historicalChart.Series [0].Points [i].YValues [1] = historicalData [i].Low;  	//adding open  	historicalChart.Series [0].Points [i].YValues [2] = historicalData [i].Open;  	// adding close  	historicalChart.Series [0].Points [i].YValues [3] = historicalData [i].Close;  	PopulateGrid (historicalData [i]);  }  
Magic Number,IBSampleApp.ui,HistoricalDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\HistoricalDataManager.cs,PaintChart,The following statement contains a magic number: for (int i = 0; i < historicalData.Count; i++) {  	if (historicalData [i].Date.Length == fullDatePattern.Length)  		DateTime.TryParseExact (historicalData [i].Date' fullDatePattern' null' DateTimeStyles.None' out dt);  	else if (historicalData [i].Date.Length == yearMonthDayPattern.Length)  		DateTime.TryParseExact (historicalData [i].Date' yearMonthDayPattern' null' DateTimeStyles.None' out dt);  	else  		continue;  	// adding date and high  	historicalChart.Series [0].Points.AddXY (dt' historicalData [i].High);  	// adding low  	historicalChart.Series [0].Points [i].YValues [1] = historicalData [i].Low;  	//adding open  	historicalChart.Series [0].Points [i].YValues [2] = historicalData [i].Open;  	// adding close  	historicalChart.Series [0].Points [i].YValues [3] = historicalData [i].Close;  	PopulateGrid (historicalData [i]);  }  
Magic Number,IBSampleApp.ui,HistoricalDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\HistoricalDataManager.cs,PaintChart,The following statement contains a magic number: historicalChart.Series [0].Points [i].YValues [2] = historicalData [i].Open;  
Magic Number,IBSampleApp.ui,HistoricalDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\HistoricalDataManager.cs,PaintChart,The following statement contains a magic number: historicalChart.Series [0].Points [i].YValues [3] = historicalData [i].Close;  
Magic Number,IBSampleApp.ui,HistoricalDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\HistoricalDataManager.cs,PopulateGrid,The following statement contains a magic number: gridView [2' gridView.Rows.Count - 1].Value = bar.High;  
Magic Number,IBSampleApp.ui,HistoricalDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\HistoricalDataManager.cs,PopulateGrid,The following statement contains a magic number: gridView [3' gridView.Rows.Count - 1].Value = bar.Low;  
Magic Number,IBSampleApp.ui,HistoricalDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\HistoricalDataManager.cs,PopulateGrid,The following statement contains a magic number: gridView [4' gridView.Rows.Count - 1].Value = bar.Close;  
Magic Number,IBSampleApp.ui,HistoricalDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\HistoricalDataManager.cs,PopulateGrid,The following statement contains a magic number: gridView [5' gridView.Rows.Count - 1].Value = bar.Volume;  
Magic Number,IBSampleApp.ui,HistoricalDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\HistoricalDataManager.cs,PopulateGrid,The following statement contains a magic number: gridView [6' gridView.Rows.Count - 1].Value = bar.Wap;  
Magic Number,IBSampleApp.ui,MarketDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\MarketDataManager.cs,UpdateUI,The following statement contains a magic number: if (grid.Rows.Count >= dataMessage.RequestId - TICK_ID_BASE) {  	if (message is TickPriceMessage) {  		TickPriceMessage priceMessage = (TickPriceMessage)message;  		switch (dataMessage.Field) {  		case 1: {  			//BID  			grid [BID_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  			break;  		}  		case 2: {  			//ASK  			grid [ASK_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  			break;  		}  		case 9: {  			//CLOSE  			grid [CLOSE_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  			break;  		}  		}  	}  	else if (dataMessage is TickSizeMessage) {  		TickSizeMessage sizeMessage = (TickSizeMessage)message;  		switch (dataMessage.Field) {  		case 0: {  			//BID SIZE  			grid [BID_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  			break;  		}  		case 3: {  			//ASK SIZE  			grid [ASK_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  			break;  		}  		case 5: {  			//LAST SIZE  			grid [LAST_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  			break;  		}  		case 8: {  			//VOLUME  			grid [VOLUME_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  			break;  		}  		}  	}  }  
Magic Number,IBSampleApp.ui,MarketDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\MarketDataManager.cs,UpdateUI,The following statement contains a magic number: if (grid.Rows.Count >= dataMessage.RequestId - TICK_ID_BASE) {  	if (message is TickPriceMessage) {  		TickPriceMessage priceMessage = (TickPriceMessage)message;  		switch (dataMessage.Field) {  		case 1: {  			//BID  			grid [BID_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  			break;  		}  		case 2: {  			//ASK  			grid [ASK_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  			break;  		}  		case 9: {  			//CLOSE  			grid [CLOSE_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  			break;  		}  		}  	}  	else if (dataMessage is TickSizeMessage) {  		TickSizeMessage sizeMessage = (TickSizeMessage)message;  		switch (dataMessage.Field) {  		case 0: {  			//BID SIZE  			grid [BID_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  			break;  		}  		case 3: {  			//ASK SIZE  			grid [ASK_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  			break;  		}  		case 5: {  			//LAST SIZE  			grid [LAST_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  			break;  		}  		case 8: {  			//VOLUME  			grid [VOLUME_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  			break;  		}  		}  	}  }  
Magic Number,IBSampleApp.ui,MarketDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\MarketDataManager.cs,UpdateUI,The following statement contains a magic number: if (grid.Rows.Count >= dataMessage.RequestId - TICK_ID_BASE) {  	if (message is TickPriceMessage) {  		TickPriceMessage priceMessage = (TickPriceMessage)message;  		switch (dataMessage.Field) {  		case 1: {  			//BID  			grid [BID_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  			break;  		}  		case 2: {  			//ASK  			grid [ASK_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  			break;  		}  		case 9: {  			//CLOSE  			grid [CLOSE_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  			break;  		}  		}  	}  	else if (dataMessage is TickSizeMessage) {  		TickSizeMessage sizeMessage = (TickSizeMessage)message;  		switch (dataMessage.Field) {  		case 0: {  			//BID SIZE  			grid [BID_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  			break;  		}  		case 3: {  			//ASK SIZE  			grid [ASK_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  			break;  		}  		case 5: {  			//LAST SIZE  			grid [LAST_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  			break;  		}  		case 8: {  			//VOLUME  			grid [VOLUME_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  			break;  		}  		}  	}  }  
Magic Number,IBSampleApp.ui,MarketDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\MarketDataManager.cs,UpdateUI,The following statement contains a magic number: if (grid.Rows.Count >= dataMessage.RequestId - TICK_ID_BASE) {  	if (message is TickPriceMessage) {  		TickPriceMessage priceMessage = (TickPriceMessage)message;  		switch (dataMessage.Field) {  		case 1: {  			//BID  			grid [BID_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  			break;  		}  		case 2: {  			//ASK  			grid [ASK_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  			break;  		}  		case 9: {  			//CLOSE  			grid [CLOSE_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  			break;  		}  		}  	}  	else if (dataMessage is TickSizeMessage) {  		TickSizeMessage sizeMessage = (TickSizeMessage)message;  		switch (dataMessage.Field) {  		case 0: {  			//BID SIZE  			grid [BID_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  			break;  		}  		case 3: {  			//ASK SIZE  			grid [ASK_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  			break;  		}  		case 5: {  			//LAST SIZE  			grid [LAST_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  			break;  		}  		case 8: {  			//VOLUME  			grid [VOLUME_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  			break;  		}  		}  	}  }  
Magic Number,IBSampleApp.ui,MarketDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\MarketDataManager.cs,UpdateUI,The following statement contains a magic number: if (grid.Rows.Count >= dataMessage.RequestId - TICK_ID_BASE) {  	if (message is TickPriceMessage) {  		TickPriceMessage priceMessage = (TickPriceMessage)message;  		switch (dataMessage.Field) {  		case 1: {  			//BID  			grid [BID_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  			break;  		}  		case 2: {  			//ASK  			grid [ASK_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  			break;  		}  		case 9: {  			//CLOSE  			grid [CLOSE_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  			break;  		}  		}  	}  	else if (dataMessage is TickSizeMessage) {  		TickSizeMessage sizeMessage = (TickSizeMessage)message;  		switch (dataMessage.Field) {  		case 0: {  			//BID SIZE  			grid [BID_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  			break;  		}  		case 3: {  			//ASK SIZE  			grid [ASK_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  			break;  		}  		case 5: {  			//LAST SIZE  			grid [LAST_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  			break;  		}  		case 8: {  			//VOLUME  			grid [VOLUME_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  			break;  		}  		}  	}  }  
Magic Number,IBSampleApp.ui,MarketDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\MarketDataManager.cs,UpdateUI,The following statement contains a magic number: if (message is TickPriceMessage) {  	TickPriceMessage priceMessage = (TickPriceMessage)message;  	switch (dataMessage.Field) {  	case 1: {  		//BID  		grid [BID_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  		break;  	}  	case 2: {  		//ASK  		grid [ASK_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  		break;  	}  	case 9: {  		//CLOSE  		grid [CLOSE_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  		break;  	}  	}  }  else if (dataMessage is TickSizeMessage) {  	TickSizeMessage sizeMessage = (TickSizeMessage)message;  	switch (dataMessage.Field) {  	case 0: {  		//BID SIZE  		grid [BID_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  		break;  	}  	case 3: {  		//ASK SIZE  		grid [ASK_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  		break;  	}  	case 5: {  		//LAST SIZE  		grid [LAST_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  		break;  	}  	case 8: {  		//VOLUME  		grid [VOLUME_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  		break;  	}  	}  }  
Magic Number,IBSampleApp.ui,MarketDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\MarketDataManager.cs,UpdateUI,The following statement contains a magic number: if (message is TickPriceMessage) {  	TickPriceMessage priceMessage = (TickPriceMessage)message;  	switch (dataMessage.Field) {  	case 1: {  		//BID  		grid [BID_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  		break;  	}  	case 2: {  		//ASK  		grid [ASK_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  		break;  	}  	case 9: {  		//CLOSE  		grid [CLOSE_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  		break;  	}  	}  }  else if (dataMessage is TickSizeMessage) {  	TickSizeMessage sizeMessage = (TickSizeMessage)message;  	switch (dataMessage.Field) {  	case 0: {  		//BID SIZE  		grid [BID_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  		break;  	}  	case 3: {  		//ASK SIZE  		grid [ASK_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  		break;  	}  	case 5: {  		//LAST SIZE  		grid [LAST_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  		break;  	}  	case 8: {  		//VOLUME  		grid [VOLUME_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  		break;  	}  	}  }  
Magic Number,IBSampleApp.ui,MarketDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\MarketDataManager.cs,UpdateUI,The following statement contains a magic number: if (message is TickPriceMessage) {  	TickPriceMessage priceMessage = (TickPriceMessage)message;  	switch (dataMessage.Field) {  	case 1: {  		//BID  		grid [BID_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  		break;  	}  	case 2: {  		//ASK  		grid [ASK_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  		break;  	}  	case 9: {  		//CLOSE  		grid [CLOSE_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  		break;  	}  	}  }  else if (dataMessage is TickSizeMessage) {  	TickSizeMessage sizeMessage = (TickSizeMessage)message;  	switch (dataMessage.Field) {  	case 0: {  		//BID SIZE  		grid [BID_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  		break;  	}  	case 3: {  		//ASK SIZE  		grid [ASK_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  		break;  	}  	case 5: {  		//LAST SIZE  		grid [LAST_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  		break;  	}  	case 8: {  		//VOLUME  		grid [VOLUME_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  		break;  	}  	}  }  
Magic Number,IBSampleApp.ui,MarketDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\MarketDataManager.cs,UpdateUI,The following statement contains a magic number: if (message is TickPriceMessage) {  	TickPriceMessage priceMessage = (TickPriceMessage)message;  	switch (dataMessage.Field) {  	case 1: {  		//BID  		grid [BID_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  		break;  	}  	case 2: {  		//ASK  		grid [ASK_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  		break;  	}  	case 9: {  		//CLOSE  		grid [CLOSE_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  		break;  	}  	}  }  else if (dataMessage is TickSizeMessage) {  	TickSizeMessage sizeMessage = (TickSizeMessage)message;  	switch (dataMessage.Field) {  	case 0: {  		//BID SIZE  		grid [BID_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  		break;  	}  	case 3: {  		//ASK SIZE  		grid [ASK_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  		break;  	}  	case 5: {  		//LAST SIZE  		grid [LAST_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  		break;  	}  	case 8: {  		//VOLUME  		grid [VOLUME_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  		break;  	}  	}  }  
Magic Number,IBSampleApp.ui,MarketDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\MarketDataManager.cs,UpdateUI,The following statement contains a magic number: if (message is TickPriceMessage) {  	TickPriceMessage priceMessage = (TickPriceMessage)message;  	switch (dataMessage.Field) {  	case 1: {  		//BID  		grid [BID_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  		break;  	}  	case 2: {  		//ASK  		grid [ASK_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  		break;  	}  	case 9: {  		//CLOSE  		grid [CLOSE_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  		break;  	}  	}  }  else if (dataMessage is TickSizeMessage) {  	TickSizeMessage sizeMessage = (TickSizeMessage)message;  	switch (dataMessage.Field) {  	case 0: {  		//BID SIZE  		grid [BID_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  		break;  	}  	case 3: {  		//ASK SIZE  		grid [ASK_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  		break;  	}  	case 5: {  		//LAST SIZE  		grid [LAST_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  		break;  	}  	case 8: {  		//VOLUME  		grid [VOLUME_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  		break;  	}  	}  }  
Magic Number,IBSampleApp.ui,MarketDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\MarketDataManager.cs,UpdateUI,The following statement contains a magic number: switch (dataMessage.Field) {  case 1: {  	//BID  	grid [BID_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  	break;  }  case 2: {  	//ASK  	grid [ASK_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  	break;  }  case 9: {  	//CLOSE  	grid [CLOSE_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  	break;  }  }  
Magic Number,IBSampleApp.ui,MarketDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\MarketDataManager.cs,UpdateUI,The following statement contains a magic number: switch (dataMessage.Field) {  case 1: {  	//BID  	grid [BID_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  	break;  }  case 2: {  	//ASK  	grid [ASK_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  	break;  }  case 9: {  	//CLOSE  	grid [CLOSE_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  	break;  }  }  
Magic Number,IBSampleApp.ui,MarketDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\MarketDataManager.cs,UpdateUI,The following statement contains a magic number: if (dataMessage is TickSizeMessage) {  	TickSizeMessage sizeMessage = (TickSizeMessage)message;  	switch (dataMessage.Field) {  	case 0: {  		//BID SIZE  		grid [BID_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  		break;  	}  	case 3: {  		//ASK SIZE  		grid [ASK_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  		break;  	}  	case 5: {  		//LAST SIZE  		grid [LAST_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  		break;  	}  	case 8: {  		//VOLUME  		grid [VOLUME_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  		break;  	}  	}  }  
Magic Number,IBSampleApp.ui,MarketDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\MarketDataManager.cs,UpdateUI,The following statement contains a magic number: if (dataMessage is TickSizeMessage) {  	TickSizeMessage sizeMessage = (TickSizeMessage)message;  	switch (dataMessage.Field) {  	case 0: {  		//BID SIZE  		grid [BID_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  		break;  	}  	case 3: {  		//ASK SIZE  		grid [ASK_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  		break;  	}  	case 5: {  		//LAST SIZE  		grid [LAST_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  		break;  	}  	case 8: {  		//VOLUME  		grid [VOLUME_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  		break;  	}  	}  }  
Magic Number,IBSampleApp.ui,MarketDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\MarketDataManager.cs,UpdateUI,The following statement contains a magic number: if (dataMessage is TickSizeMessage) {  	TickSizeMessage sizeMessage = (TickSizeMessage)message;  	switch (dataMessage.Field) {  	case 0: {  		//BID SIZE  		grid [BID_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  		break;  	}  	case 3: {  		//ASK SIZE  		grid [ASK_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  		break;  	}  	case 5: {  		//LAST SIZE  		grid [LAST_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  		break;  	}  	case 8: {  		//VOLUME  		grid [VOLUME_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  		break;  	}  	}  }  
Magic Number,IBSampleApp.ui,MarketDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\MarketDataManager.cs,UpdateUI,The following statement contains a magic number: switch (dataMessage.Field) {  case 0: {  	//BID SIZE  	grid [BID_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  	break;  }  case 3: {  	//ASK SIZE  	grid [ASK_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  	break;  }  case 5: {  	//LAST SIZE  	grid [LAST_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  	break;  }  case 8: {  	//VOLUME  	grid [VOLUME_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  	break;  }  }  
Magic Number,IBSampleApp.ui,MarketDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\MarketDataManager.cs,UpdateUI,The following statement contains a magic number: switch (dataMessage.Field) {  case 0: {  	//BID SIZE  	grid [BID_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  	break;  }  case 3: {  	//ASK SIZE  	grid [ASK_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  	break;  }  case 5: {  	//LAST SIZE  	grid [LAST_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  	break;  }  case 8: {  	//VOLUME  	grid [VOLUME_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  	break;  }  }  
Magic Number,IBSampleApp.ui,MarketDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\MarketDataManager.cs,UpdateUI,The following statement contains a magic number: switch (dataMessage.Field) {  case 0: {  	//BID SIZE  	grid [BID_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  	break;  }  case 3: {  	//ASK SIZE  	grid [ASK_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  	break;  }  case 5: {  	//LAST SIZE  	grid [LAST_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  	break;  }  case 8: {  	//VOLUME  	grid [VOLUME_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  	break;  }  }  
Magic Number,IBSampleApp.ui,OrderManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderManager.cs,EditOrder,The following statement contains a magic number: if (liveOrdersGrid.SelectedRows.Count > 0 && (int)(liveOrdersGrid.SelectedRows [0].Cells [2].Value) != 0 && (int)(liveOrdersGrid.SelectedRows [0].Cells [1].Value) == ibClient.ClientId) {  	DataGridViewRow selectedRow = liveOrdersGrid.SelectedRows [0];  	int orderId = (int)selectedRow.Cells [2].Value;  	for (int i = 0; i < openOrders.Count; i++) {  		if (openOrders [i].OrderId == orderId) {  			orderDialog.SetOrderContract (openOrders [i].Contract);  			orderDialog.SetOrder (openOrders [i].Order);  		}  	}  	orderDialog.ShowDialog ();  }  
Magic Number,IBSampleApp.ui,OrderManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderManager.cs,EditOrder,The following statement contains a magic number: if (liveOrdersGrid.SelectedRows.Count > 0 && (int)(liveOrdersGrid.SelectedRows [0].Cells [2].Value) != 0 && (int)(liveOrdersGrid.SelectedRows [0].Cells [1].Value) == ibClient.ClientId) {  	DataGridViewRow selectedRow = liveOrdersGrid.SelectedRows [0];  	int orderId = (int)selectedRow.Cells [2].Value;  	for (int i = 0; i < openOrders.Count; i++) {  		if (openOrders [i].OrderId == orderId) {  			orderDialog.SetOrderContract (openOrders [i].Contract);  			orderDialog.SetOrder (openOrders [i].Order);  		}  	}  	orderDialog.ShowDialog ();  }  
Magic Number,IBSampleApp.ui,OrderManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderManager.cs,CancelSelection,The following statement contains a magic number: if (liveOrdersGrid.SelectedRows.Count > 0) {  	for (int i = 0; i < liveOrdersGrid.SelectedRows.Count; i++) {  		int orderId = (int)liveOrdersGrid.SelectedRows [i].Cells [2].Value;  		int clientId = (int)liveOrdersGrid.SelectedRows [i].Cells [1].Value;  		OpenOrderMessage openOrder = GetOpenOrderMessage (orderId' clientId);  		if (openOrder != null)  			ibClient.ClientSocket.cancelOrder (openOrder.OrderId);  	}  }  
Magic Number,IBSampleApp.ui,OrderManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderManager.cs,CancelSelection,The following statement contains a magic number: for (int i = 0; i < liveOrdersGrid.SelectedRows.Count; i++) {  	int orderId = (int)liveOrdersGrid.SelectedRows [i].Cells [2].Value;  	int clientId = (int)liveOrdersGrid.SelectedRows [i].Cells [1].Value;  	OpenOrderMessage openOrder = GetOpenOrderMessage (orderId' clientId);  	if (openOrder != null)  		ibClient.ClientSocket.cancelOrder (openOrder.OrderId);  }  
Magic Number,IBSampleApp.ui,OrderManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderManager.cs,HandleCommissionMessage,The following statement contains a magic number: for (int i = 0; i < tradeLogGrid.Rows.Count; i++) {  	if (((string)tradeLogGrid [0' i].Value).Equals (message.CommissionReport.ExecId)) {  		tradeLogGrid [7' i].Value = message.CommissionReport.Commission;  		tradeLogGrid [8' i].Value = message.CommissionReport.RealizedPNL;  	}  }  
Magic Number,IBSampleApp.ui,OrderManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderManager.cs,HandleCommissionMessage,The following statement contains a magic number: for (int i = 0; i < tradeLogGrid.Rows.Count; i++) {  	if (((string)tradeLogGrid [0' i].Value).Equals (message.CommissionReport.ExecId)) {  		tradeLogGrid [7' i].Value = message.CommissionReport.Commission;  		tradeLogGrid [8' i].Value = message.CommissionReport.RealizedPNL;  	}  }  
Magic Number,IBSampleApp.ui,OrderManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderManager.cs,HandleCommissionMessage,The following statement contains a magic number: if (((string)tradeLogGrid [0' i].Value).Equals (message.CommissionReport.ExecId)) {  	tradeLogGrid [7' i].Value = message.CommissionReport.Commission;  	tradeLogGrid [8' i].Value = message.CommissionReport.RealizedPNL;  }  
Magic Number,IBSampleApp.ui,OrderManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderManager.cs,HandleCommissionMessage,The following statement contains a magic number: if (((string)tradeLogGrid [0' i].Value).Equals (message.CommissionReport.ExecId)) {  	tradeLogGrid [7' i].Value = message.CommissionReport.Commission;  	tradeLogGrid [8' i].Value = message.CommissionReport.RealizedPNL;  }  
Magic Number,IBSampleApp.ui,OrderManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderManager.cs,HandleCommissionMessage,The following statement contains a magic number: tradeLogGrid [7' i].Value = message.CommissionReport.Commission;  
Magic Number,IBSampleApp.ui,OrderManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderManager.cs,HandleCommissionMessage,The following statement contains a magic number: tradeLogGrid [8' i].Value = message.CommissionReport.RealizedPNL;  
Magic Number,IBSampleApp.ui,OrderManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderManager.cs,PopulateTradeLog,The following statement contains a magic number: tradeLogGrid [2' index].Value = message.Execution.AcctNumber;  
Magic Number,IBSampleApp.ui,OrderManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderManager.cs,PopulateTradeLog,The following statement contains a magic number: tradeLogGrid [3' index].Value = message.Execution.Side;  
Magic Number,IBSampleApp.ui,OrderManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderManager.cs,PopulateTradeLog,The following statement contains a magic number: tradeLogGrid [4' index].Value = message.Execution.Shares;  
Magic Number,IBSampleApp.ui,OrderManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderManager.cs,PopulateTradeLog,The following statement contains a magic number: tradeLogGrid [5' index].Value = message.Contract.Symbol + " " + message.Contract.SecType + " " + message.Contract.Exchange;  
Magic Number,IBSampleApp.ui,OrderManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderManager.cs,PopulateTradeLog,The following statement contains a magic number: tradeLogGrid [6' index].Value = message.Execution.Price;  
Magic Number,IBSampleApp.ui,OrderManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderManager.cs,handleOrderStatus,The following statement contains a magic number: for (int i = 0; i < liveOrdersGrid.Rows.Count; i++) {  	if (liveOrdersGrid [0' i].Value.Equals (statusMessage.PermId)) {  		liveOrdersGrid [7' i].Value = statusMessage.Status;  		return;  	}  }  
Magic Number,IBSampleApp.ui,OrderManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderManager.cs,handleOrderStatus,The following statement contains a magic number: if (liveOrdersGrid [0' i].Value.Equals (statusMessage.PermId)) {  	liveOrdersGrid [7' i].Value = statusMessage.Status;  	return;  }  
Magic Number,IBSampleApp.ui,OrderManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderManager.cs,handleOrderStatus,The following statement contains a magic number: liveOrdersGrid [7' i].Value = statusMessage.Status;  
Magic Number,IBSampleApp.ui,OrderManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderManager.cs,UpdateLiveOrdersGrid,The following statement contains a magic number: for (int i = 0; i < liveOrdersGrid.Rows.Count; i++) {  	if ((int)(liveOrdersGrid [2' i].Value) == orderMessage.Order.OrderId) {  		PopulateOrderRow (i' orderMessage);  		return;  	}  }  
Magic Number,IBSampleApp.ui,OrderManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderManager.cs,UpdateLiveOrdersGrid,The following statement contains a magic number: if ((int)(liveOrdersGrid [2' i].Value) == orderMessage.Order.OrderId) {  	PopulateOrderRow (i' orderMessage);  	return;  }  
Magic Number,IBSampleApp.ui,OrderManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderManager.cs,PopulateOrderRow,The following statement contains a magic number: liveOrdersGrid [2' rowIndex].Value = orderMessage.Order.OrderId;  
Magic Number,IBSampleApp.ui,OrderManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderManager.cs,PopulateOrderRow,The following statement contains a magic number: liveOrdersGrid [3' rowIndex].Value = orderMessage.Order.Account;  
Magic Number,IBSampleApp.ui,OrderManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderManager.cs,PopulateOrderRow,The following statement contains a magic number: liveOrdersGrid [4' rowIndex].Value = orderMessage.Order.Action;  
Magic Number,IBSampleApp.ui,OrderManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderManager.cs,PopulateOrderRow,The following statement contains a magic number: liveOrdersGrid [5' rowIndex].Value = orderMessage.Order.TotalQuantity;  
Magic Number,IBSampleApp.ui,OrderManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderManager.cs,PopulateOrderRow,The following statement contains a magic number: liveOrdersGrid [6' rowIndex].Value = orderMessage.Contract.Symbol + " " + orderMessage.Contract.SecType + " " + orderMessage.Contract.Exchange;  
Magic Number,IBSampleApp.ui,OrderManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderManager.cs,PopulateOrderRow,The following statement contains a magic number: liveOrdersGrid [7' rowIndex].Value = orderMessage.OrderState.Status;  
Magic Number,IBSampleApp.ui,RealTimeBarsManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\RealTimeBarsManager.cs,AddRequest,The following statement contains a magic number: ibClient.ClientSocket.reqRealTimeBars (currentTicker + RT_BARS_ID_BASE' contract' 5' whatToShow' useRTH);  
Magic Number,IBSampleApp.ui,RealTimeBarsManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\RealTimeBarsManager.cs,UpdateUI,The following statement contains a magic number: rtBarsChart.Series [0].Points [barCounter].YValues [2] = rtBar.Open;  
Magic Number,IBSampleApp.ui,RealTimeBarsManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\RealTimeBarsManager.cs,UpdateUI,The following statement contains a magic number: rtBarsChart.Series [0].Points [barCounter].YValues [3] = rtBar.Close;  
Magic Number,IBSampleApp,IBSampleApp,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\IBSampleApp.cs,HandleErrorMessage,The following statement contains a magic number: if (message.ErrorCode == 202) {  }  
Magic Number,IBSampleApp,IBSampleApp,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\IBSampleApp.cs,lapseOption_Click,The following statement contains a magic number: optionsManager.ExerciseOptions (ovrd' Int32.Parse (optionExerciseQuan.Text)' exchange' 2);  
Magic Number,IBSampleApp.util,XmlHelper,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\util\XmlHelper.cs,GetGroupsList,The following statement contains a magic number: for (int i = 0; i < groupsList.Count; i++) {  	AdvisorGroup advisorGroup = new AdvisorGroup (groupsList.Item (i).ChildNodes [0].InnerText' groupsList.Item (i).ChildNodes [2].InnerText);  	XmlNodeList accountNodes = groupsList.Item (i).ChildNodes [1].ChildNodes;  	for (int j = 0; j < accountNodes.Count; j++) {  		advisorGroup.Accounts.Add (accountNodes [j].InnerText);  	}  	advisorGroups.Add (advisorGroup);  }  
Magic Number,IBSampleApp.util,XmlHelper,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\util\XmlHelper.cs,GetProfilesList,The following statement contains a magic number: for (int i = 0; i < profilesList.Count; i++) {  	AllocationProfile allocationProfile = new AllocationProfile (profilesList.Item (i).ChildNodes [0].InnerText' Int32.Parse (profilesList.Item (i).ChildNodes [1].InnerText));  	XmlNodeList allocationNodes = profilesList [i].ChildNodes [2].ChildNodes;  	for (int j = 0; j < allocationNodes.Count; j++) {  		allocationProfile.Allocations.Add (new Allocation (allocationNodes [j].ChildNodes [0].InnerText' Double.Parse (allocationNodes [j].ChildNodes [1].InnerText)));  	}  	advisorProfiles.Add (allocationProfile);  }  
Missing Default,IBSampleApp.ui,AccountManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AccountManager.cs,UpdateUI,The following switch statement is missing a default case: switch (message.Type) {  case MessageType.AccountSummary:  	HandleAccountSummary ((AccountSummaryMessage)message);  	break;  case MessageType.AccountSummaryEnd:  	HandleAccountSummaryEnd ();  	break;  case MessageType.AccountValue:  	HandleAccountValue ((AccountValueMessage)message);  	break;  case MessageType.PortfolioValue:  	HandlePortfolioValue ((UpdatePortfolioMessage)message);  	break;  case MessageType.AccountDownloadEnd:  	break;  case MessageType.Position:  	HandlePosition ((PositionMessage)message);  	break;  case MessageType.PositionEnd:  	break;  }  
Missing Default,IBSampleApp.ui,AdvisorManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\AdvisorManager.cs,UpdateUI,The following switch statement is missing a default case: switch (message.FaDataType) {  case 1: {  	HandleGroupsData (message.Data);  	break;  }  case 2: {  	HandleProfilesData (message.Data);  	break;  }  case 3: {  	HandleAliasesData (message.Data);  	break;  }  }  
Missing Default,IBSampleApp.ui,ContractManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\ContractManager.cs,UpdateUI,The following switch statement is missing a default case: switch (message.Type) {  case MessageType.ContractData:  	if (isComboLegRequest)  		comboContractResults.UpdateUI ((ContractDetailsMessage)message);  	else  		HandleContractMessage ((ContractDetailsMessage)message);  	break;  case MessageType.ContractDataEnd:  	HandleContractDataEndMessage ((ContractDetailsEndMessage)message);  	break;  case MessageType.FundamentalData:  	HandleFundamentalsData ((FundamentalsMessage)message);  	break;  }  
Missing Default,IBSampleApp.ui,OptionsManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OptionsManager.cs,UpdateOptionGridPrice,The following switch statement is missing a default case: switch (message.Field) {  case TickType.ASK:  	grid [ASK_INDEX' row].Value = message.Price;  	break;  case TickType.BID:  	grid [BID_INDEX' row].Value = message.Price;  	break;  }  
Missing Default,IBSampleApp.ui,HistoricalDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\HistoricalDataManager.cs,UpdateUI,The following switch statement is missing a default case: switch (message.Type) {  case MessageType.HistoricalData:  	historicalData.Add ((HistoricalDataMessage)message);  	break;  case MessageType.HistoricalDataEnd:  	PaintChart ();  	break;  }  
Missing Default,IBSampleApp.ui,MarketDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\MarketDataManager.cs,UpdateUI,The following switch statement is missing a default case: switch (dataMessage.Field) {  case 1: {  	//BID  	grid [BID_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  	break;  }  case 2: {  	//ASK  	grid [ASK_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  	break;  }  case 9: {  	//CLOSE  	grid [CLOSE_PRICE_INDEX' GetIndex (dataMessage.RequestId)].Value = priceMessage.Price;  	break;  }  }  
Missing Default,IBSampleApp.ui,MarketDataManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\MarketDataManager.cs,UpdateUI,The following switch statement is missing a default case: switch (dataMessage.Field) {  case 0: {  	//BID SIZE  	grid [BID_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  	break;  }  case 3: {  	//ASK SIZE  	grid [ASK_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  	break;  }  case 5: {  	//LAST SIZE  	grid [LAST_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  	break;  }  case 8: {  	//VOLUME  	grid [VOLUME_SIZE_INDEX' GetIndex (dataMessage.RequestId)].Value = sizeMessage.Size;  	break;  }  }  
Missing Default,IBSampleApp.ui,OrderManager,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderManager.cs,UpdateUI,The following switch statement is missing a default case: switch (message.Type) {  case MessageType.OpenOrder:  	handleOpenOrder ((OpenOrderMessage)message);  	break;  case MessageType.OpenOrderEnd:  	break;  case MessageType.OrderStatus:  	handleOrderStatus ((OrderStatusMessage)message);  	break;  case MessageType.ExecutionData:  	HandleExecutionMessage ((ExecutionMessage)message);  	break;  case MessageType.CommissionsReport:  	HandleCommissionMessage ((CommissionMessage)message);  	break;  }  
Missing Default,IBSampleApp,OrderDialog,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderDialog.cs,ProcessMessage,The following switch statement is missing a default case: switch (message.Type) {  case MessageType.OpenOrder:  	HandleOpenOrder ((OpenOrderMessage)message);  	break;  }  
Missing Default,IBSampleApp,OrderDialog,C:\repos\letianzj_QuantTrading\Source\IBConnection\IBSampleApp\ui\OrderDialog.cs,AlgoStrategy_SelectedIndexChanged,The following switch statement is missing a default case: switch (selectedStrategy) {  case "Vwap":  	EnableVWap ();  	break;  case "Twap":  	EnableTWap ();  	break;  case "ArrivalPx":  	EnableArrivalPx ();  	break;  case "DarkIce":  	EnableDarkIce ();  	break;  case "PctVol":  	EnablePctVol ();  	break;  }  
