Implementation smell,Namespace,Class,File,Method,Description
Long Statement,MyStrategies,DailyCloseEmail,C:\repos\letianzj_QuantTrading\Source\TradingStrategies\MyStrategies\DailyCloseEmail.cs,GotTick,The length of the statement  "                    sb.Append("<tr><td>Symbol</td><td>Open</td><td>High</td><td>Low</td><td>Close</td><td>Change</td><td>Change(%)</td></tr>"); " is 123.
Long Statement,MyStrategies,DualTimeFrameMarketOrder,C:\repos\letianzj_QuantTrading\Source\TradingStrategies\MyStrategies\DualTimeFrameMarketOrder.cs,GotTick,The length of the statement  "            if ((Calc.OpenPL(k.TradePrice' _positiontracker[k.FullSymbol]) + _positiontracker[k.FullSymbol].ClosedPL > TotalProfitTarget) || " is 128.
Long Statement,MyStrategies,DualTimeFrameMarketOrder,C:\repos\letianzj_QuantTrading\Source\TradingStrategies\MyStrategies\DualTimeFrameMarketOrder.cs,GotTick,The length of the statement  "                (Calc.OpenPL(k.TradePrice' _positiontracker[k.FullSymbol]) + _positiontracker[k.FullSymbol].ClosedPL < TotalLossTolerance)) " is 123.
Empty Catch Block,MyStrategies,DailyCloseEmail,C:\repos\letianzj_QuantTrading\Source\TradingStrategies\MyStrategies\DailyCloseEmail.cs,GotTick,The method has an empty catch block.
Magic Number,MyStrategies,DailyCloseEmail,C:\repos\letianzj_QuantTrading\Source\TradingStrategies\MyStrategies\DailyCloseEmail.cs,Reset,The following statement contains a magic number: _barlisttracker = new BarListTracker(_symbols.ToArray()' 86400);
Magic Number,MyStrategies,DailyCloseEmail,C:\repos\letianzj_QuantTrading\Source\TradingStrategies\MyStrategies\DailyCloseEmail.cs,GotTick,The following statement contains a magic number: if (IsActive)              {                  if ((k.Time >= 93000) && (k.Time <= 160200))                      _barlisttracker.NewTick(k);                  else if (k.Time > 160200)                      Shutdown();                    if (k.Time > sentouttime_[emailsent_] + 1)                  {                      emailsent_++;                      if (emailsent_ == sentouttime_.Length)                          Shutdown();                        // send out email                      StringBuilder sb = new StringBuilder();                      sb.Append("<table>");                      sb.Append("<tr><td>Symbol</td><td>Open</td><td>High</td><td>Low</td><td>Close</td><td>Change</td><td>Change(%)</td></tr>");                      foreach (string s in _symbols)                      {                          string[] symbol = s.Split(' ');                          BarList bl = _barlisttracker[s' 86400];                            try                          {                              sb.AppendFormat("<tr><td>{0}</td><td>{1}</td><td>{2}</td><td>{3}</td><td>{4}</td><td>{5}</td><td>{6}</td></tr>"'                              symbol[0]' (bl.Open()[0]).ToString("N2")' (bl.High()[0]).ToString("N2")'                              (bl.Low()[0]).ToString("N2")' (bl.Close()[0]).ToString("N2")'                              (bl.Close()[0] - _precloseDict[s]).ToString("N2")'                              (bl.Close()[0] / _precloseDict[s] - 1).ToString("0.##%"));                          }                          catch { }                      }                      sb.Append("<table>");                        string subject = "Current Market @ " + sentouttime_[emailsent_ - 1];                      Util.Sendemail(subject' sb.ToString()' true);                  }              }
Magic Number,MyStrategies,DailyCloseEmail,C:\repos\letianzj_QuantTrading\Source\TradingStrategies\MyStrategies\DailyCloseEmail.cs,GotTick,The following statement contains a magic number: if (IsActive)              {                  if ((k.Time >= 93000) && (k.Time <= 160200))                      _barlisttracker.NewTick(k);                  else if (k.Time > 160200)                      Shutdown();                    if (k.Time > sentouttime_[emailsent_] + 1)                  {                      emailsent_++;                      if (emailsent_ == sentouttime_.Length)                          Shutdown();                        // send out email                      StringBuilder sb = new StringBuilder();                      sb.Append("<table>");                      sb.Append("<tr><td>Symbol</td><td>Open</td><td>High</td><td>Low</td><td>Close</td><td>Change</td><td>Change(%)</td></tr>");                      foreach (string s in _symbols)                      {                          string[] symbol = s.Split(' ');                          BarList bl = _barlisttracker[s' 86400];                            try                          {                              sb.AppendFormat("<tr><td>{0}</td><td>{1}</td><td>{2}</td><td>{3}</td><td>{4}</td><td>{5}</td><td>{6}</td></tr>"'                              symbol[0]' (bl.Open()[0]).ToString("N2")' (bl.High()[0]).ToString("N2")'                              (bl.Low()[0]).ToString("N2")' (bl.Close()[0]).ToString("N2")'                              (bl.Close()[0] - _precloseDict[s]).ToString("N2")'                              (bl.Close()[0] / _precloseDict[s] - 1).ToString("0.##%"));                          }                          catch { }                      }                      sb.Append("<table>");                        string subject = "Current Market @ " + sentouttime_[emailsent_ - 1];                      Util.Sendemail(subject' sb.ToString()' true);                  }              }
Magic Number,MyStrategies,DailyCloseEmail,C:\repos\letianzj_QuantTrading\Source\TradingStrategies\MyStrategies\DailyCloseEmail.cs,GotTick,The following statement contains a magic number: if (IsActive)              {                  if ((k.Time >= 93000) && (k.Time <= 160200))                      _barlisttracker.NewTick(k);                  else if (k.Time > 160200)                      Shutdown();                    if (k.Time > sentouttime_[emailsent_] + 1)                  {                      emailsent_++;                      if (emailsent_ == sentouttime_.Length)                          Shutdown();                        // send out email                      StringBuilder sb = new StringBuilder();                      sb.Append("<table>");                      sb.Append("<tr><td>Symbol</td><td>Open</td><td>High</td><td>Low</td><td>Close</td><td>Change</td><td>Change(%)</td></tr>");                      foreach (string s in _symbols)                      {                          string[] symbol = s.Split(' ');                          BarList bl = _barlisttracker[s' 86400];                            try                          {                              sb.AppendFormat("<tr><td>{0}</td><td>{1}</td><td>{2}</td><td>{3}</td><td>{4}</td><td>{5}</td><td>{6}</td></tr>"'                              symbol[0]' (bl.Open()[0]).ToString("N2")' (bl.High()[0]).ToString("N2")'                              (bl.Low()[0]).ToString("N2")' (bl.Close()[0]).ToString("N2")'                              (bl.Close()[0] - _precloseDict[s]).ToString("N2")'                              (bl.Close()[0] / _precloseDict[s] - 1).ToString("0.##%"));                          }                          catch { }                      }                      sb.Append("<table>");                        string subject = "Current Market @ " + sentouttime_[emailsent_ - 1];                      Util.Sendemail(subject' sb.ToString()' true);                  }              }
Magic Number,MyStrategies,DailyCloseEmail,C:\repos\letianzj_QuantTrading\Source\TradingStrategies\MyStrategies\DailyCloseEmail.cs,GotTick,The following statement contains a magic number: if (IsActive)              {                  if ((k.Time >= 93000) && (k.Time <= 160200))                      _barlisttracker.NewTick(k);                  else if (k.Time > 160200)                      Shutdown();                    if (k.Time > sentouttime_[emailsent_] + 1)                  {                      emailsent_++;                      if (emailsent_ == sentouttime_.Length)                          Shutdown();                        // send out email                      StringBuilder sb = new StringBuilder();                      sb.Append("<table>");                      sb.Append("<tr><td>Symbol</td><td>Open</td><td>High</td><td>Low</td><td>Close</td><td>Change</td><td>Change(%)</td></tr>");                      foreach (string s in _symbols)                      {                          string[] symbol = s.Split(' ');                          BarList bl = _barlisttracker[s' 86400];                            try                          {                              sb.AppendFormat("<tr><td>{0}</td><td>{1}</td><td>{2}</td><td>{3}</td><td>{4}</td><td>{5}</td><td>{6}</td></tr>"'                              symbol[0]' (bl.Open()[0]).ToString("N2")' (bl.High()[0]).ToString("N2")'                              (bl.Low()[0]).ToString("N2")' (bl.Close()[0]).ToString("N2")'                              (bl.Close()[0] - _precloseDict[s]).ToString("N2")'                              (bl.Close()[0] / _precloseDict[s] - 1).ToString("0.##%"));                          }                          catch { }                      }                      sb.Append("<table>");                        string subject = "Current Market @ " + sentouttime_[emailsent_ - 1];                      Util.Sendemail(subject' sb.ToString()' true);                  }              }
Magic Number,MyStrategies,DualTimeFrameMarketOrder,C:\repos\letianzj_QuantTrading\Source\TradingStrategies\MyStrategies\DualTimeFrameMarketOrder.cs,_barlisttracker_GotNewBar,The following statement contains a magic number: if (interval == _higherbarinterval)              {                  BarList bl = _barlisttracker[sym' interval];                    double[] closes = Calc.Decimal2Double(bl.Close());                  // when NewBar is triggered' the latest bar only has one tick                  closes = closes.Take(closes.Length - 1).ToArray();                    // RSI: Overbought/Oversold                  RSIResult rsiresult = AnalysisEngine.RSI(closes' _higherbarsilookback);                  if (rsiresult.Values.Count == 0)        // Not enough bars                      return;                  else if (rsiresult.Values.Last() < _higherbaroversell / 100)    // Oversold                  {                      _isOBOSZone[idx] = OBOSZone.OverSoldZone;                  }                  else if (rsiresult.Values.Last() > 1 - _higherbaroversell / 100)    // Overbought                  {                      _isOBOSZone[idx] = OBOSZone.OverboughtZone;                  }                  else { _isOBOSZone[idx] = OBOSZone.None; }                    // MACD: Bull/Bear                  MACDResult macdresult = AnalysisEngine.MACD(closes' _higherbarmacdfast' _higherbarmacdslow' _higherbarmacdsignal);                  if (macdresult.Signal.Count == 0)           // not enough bars                      return;                  else if (macdresult.MACD.Last() > macdresult.Signal.Last())                  {                      // record the switch to bull                      if (_isHigherTimeFrameBullBear[idx] != BullBearTrend.Bull)                      {                          // get the last bar' and record the entry/exit point                          int count = bl.IntervalCount(interval);                          Bar lastbar = bl[count - 2' interval];                          _entrylevel[idx] = lastbar.High;                          _exitlevel[idx] = lastbar.High - _traingamount;                      }                      _isHigherTimeFrameBullBear[idx] = BullBearTrend.Bull;                  }                  else if (macdresult.MACD.Last() < macdresult.Signal.Last())                  {                      // record the switch to bear                      if (_isHigherTimeFrameBullBear[idx] != BullBearTrend.Bear)                      {                          // get the last bar' and record the entry/exit point                          int count = bl.IntervalCount(interval);                          Bar lastbar = bl[count - 2' interval];                          _entrylevel[idx] = lastbar.Low;                          _exitlevel[idx] = lastbar.Low + _traingamount;                      }                      _isHigherTimeFrameBullBear[idx] = BullBearTrend.Bear;                  }                  else { _isHigherTimeFrameBullBear[idx] = BullBearTrend.None; }              }              else if (interval == _lowerbarinterval)              {                  BarList bl = _barlisttracker[sym' interval];                  double[] closes = Calc.Decimal2Double(bl.Close());                  // when NewBar is triggered' the latest bar only has one tick                  closes = closes.Take(closes.Length - 1).ToArray();                    // MACD: Bull/Bear                  MACDResult macdresult = AnalysisEngine.MACD(closes' _higherbarmacdfast' _higherbarmacdslow' _higherbarmacdsignal);                  if (macdresult.Signal.Count == 0)           // Not enough bars                      return;                  else if (macdresult.MACD.Last() > macdresult.Signal.Last())                  {                      _isLowerTimeFrameBullBear[idx] = BullBearTrend.Bull;                  }                  else if (macdresult.MACD.Last() < macdresult.Signal.Last())                  {                      _isLowerTimeFrameBullBear[idx] = BullBearTrend.Bear;                  }                  else { _isLowerTimeFrameBullBear[idx] = BullBearTrend.None; }              }
Magic Number,MyStrategies,DualTimeFrameMarketOrder,C:\repos\letianzj_QuantTrading\Source\TradingStrategies\MyStrategies\DualTimeFrameMarketOrder.cs,_barlisttracker_GotNewBar,The following statement contains a magic number: if (interval == _higherbarinterval)              {                  BarList bl = _barlisttracker[sym' interval];                    double[] closes = Calc.Decimal2Double(bl.Close());                  // when NewBar is triggered' the latest bar only has one tick                  closes = closes.Take(closes.Length - 1).ToArray();                    // RSI: Overbought/Oversold                  RSIResult rsiresult = AnalysisEngine.RSI(closes' _higherbarsilookback);                  if (rsiresult.Values.Count == 0)        // Not enough bars                      return;                  else if (rsiresult.Values.Last() < _higherbaroversell / 100)    // Oversold                  {                      _isOBOSZone[idx] = OBOSZone.OverSoldZone;                  }                  else if (rsiresult.Values.Last() > 1 - _higherbaroversell / 100)    // Overbought                  {                      _isOBOSZone[idx] = OBOSZone.OverboughtZone;                  }                  else { _isOBOSZone[idx] = OBOSZone.None; }                    // MACD: Bull/Bear                  MACDResult macdresult = AnalysisEngine.MACD(closes' _higherbarmacdfast' _higherbarmacdslow' _higherbarmacdsignal);                  if (macdresult.Signal.Count == 0)           // not enough bars                      return;                  else if (macdresult.MACD.Last() > macdresult.Signal.Last())                  {                      // record the switch to bull                      if (_isHigherTimeFrameBullBear[idx] != BullBearTrend.Bull)                      {                          // get the last bar' and record the entry/exit point                          int count = bl.IntervalCount(interval);                          Bar lastbar = bl[count - 2' interval];                          _entrylevel[idx] = lastbar.High;                          _exitlevel[idx] = lastbar.High - _traingamount;                      }                      _isHigherTimeFrameBullBear[idx] = BullBearTrend.Bull;                  }                  else if (macdresult.MACD.Last() < macdresult.Signal.Last())                  {                      // record the switch to bear                      if (_isHigherTimeFrameBullBear[idx] != BullBearTrend.Bear)                      {                          // get the last bar' and record the entry/exit point                          int count = bl.IntervalCount(interval);                          Bar lastbar = bl[count - 2' interval];                          _entrylevel[idx] = lastbar.Low;                          _exitlevel[idx] = lastbar.Low + _traingamount;                      }                      _isHigherTimeFrameBullBear[idx] = BullBearTrend.Bear;                  }                  else { _isHigherTimeFrameBullBear[idx] = BullBearTrend.None; }              }              else if (interval == _lowerbarinterval)              {                  BarList bl = _barlisttracker[sym' interval];                  double[] closes = Calc.Decimal2Double(bl.Close());                  // when NewBar is triggered' the latest bar only has one tick                  closes = closes.Take(closes.Length - 1).ToArray();                    // MACD: Bull/Bear                  MACDResult macdresult = AnalysisEngine.MACD(closes' _higherbarmacdfast' _higherbarmacdslow' _higherbarmacdsignal);                  if (macdresult.Signal.Count == 0)           // Not enough bars                      return;                  else if (macdresult.MACD.Last() > macdresult.Signal.Last())                  {                      _isLowerTimeFrameBullBear[idx] = BullBearTrend.Bull;                  }                  else if (macdresult.MACD.Last() < macdresult.Signal.Last())                  {                      _isLowerTimeFrameBullBear[idx] = BullBearTrend.Bear;                  }                  else { _isLowerTimeFrameBullBear[idx] = BullBearTrend.None; }              }
Magic Number,MyStrategies,DualTimeFrameMarketOrder,C:\repos\letianzj_QuantTrading\Source\TradingStrategies\MyStrategies\DualTimeFrameMarketOrder.cs,_barlisttracker_GotNewBar,The following statement contains a magic number: if (interval == _higherbarinterval)              {                  BarList bl = _barlisttracker[sym' interval];                    double[] closes = Calc.Decimal2Double(bl.Close());                  // when NewBar is triggered' the latest bar only has one tick                  closes = closes.Take(closes.Length - 1).ToArray();                    // RSI: Overbought/Oversold                  RSIResult rsiresult = AnalysisEngine.RSI(closes' _higherbarsilookback);                  if (rsiresult.Values.Count == 0)        // Not enough bars                      return;                  else if (rsiresult.Values.Last() < _higherbaroversell / 100)    // Oversold                  {                      _isOBOSZone[idx] = OBOSZone.OverSoldZone;                  }                  else if (rsiresult.Values.Last() > 1 - _higherbaroversell / 100)    // Overbought                  {                      _isOBOSZone[idx] = OBOSZone.OverboughtZone;                  }                  else { _isOBOSZone[idx] = OBOSZone.None; }                    // MACD: Bull/Bear                  MACDResult macdresult = AnalysisEngine.MACD(closes' _higherbarmacdfast' _higherbarmacdslow' _higherbarmacdsignal);                  if (macdresult.Signal.Count == 0)           // not enough bars                      return;                  else if (macdresult.MACD.Last() > macdresult.Signal.Last())                  {                      // record the switch to bull                      if (_isHigherTimeFrameBullBear[idx] != BullBearTrend.Bull)                      {                          // get the last bar' and record the entry/exit point                          int count = bl.IntervalCount(interval);                          Bar lastbar = bl[count - 2' interval];                          _entrylevel[idx] = lastbar.High;                          _exitlevel[idx] = lastbar.High - _traingamount;                      }                      _isHigherTimeFrameBullBear[idx] = BullBearTrend.Bull;                  }                  else if (macdresult.MACD.Last() < macdresult.Signal.Last())                  {                      // record the switch to bear                      if (_isHigherTimeFrameBullBear[idx] != BullBearTrend.Bear)                      {                          // get the last bar' and record the entry/exit point                          int count = bl.IntervalCount(interval);                          Bar lastbar = bl[count - 2' interval];                          _entrylevel[idx] = lastbar.Low;                          _exitlevel[idx] = lastbar.Low + _traingamount;                      }                      _isHigherTimeFrameBullBear[idx] = BullBearTrend.Bear;                  }                  else { _isHigherTimeFrameBullBear[idx] = BullBearTrend.None; }              }              else if (interval == _lowerbarinterval)              {                  BarList bl = _barlisttracker[sym' interval];                  double[] closes = Calc.Decimal2Double(bl.Close());                  // when NewBar is triggered' the latest bar only has one tick                  closes = closes.Take(closes.Length - 1).ToArray();                    // MACD: Bull/Bear                  MACDResult macdresult = AnalysisEngine.MACD(closes' _higherbarmacdfast' _higherbarmacdslow' _higherbarmacdsignal);                  if (macdresult.Signal.Count == 0)           // Not enough bars                      return;                  else if (macdresult.MACD.Last() > macdresult.Signal.Last())                  {                      _isLowerTimeFrameBullBear[idx] = BullBearTrend.Bull;                  }                  else if (macdresult.MACD.Last() < macdresult.Signal.Last())                  {                      _isLowerTimeFrameBullBear[idx] = BullBearTrend.Bear;                  }                  else { _isLowerTimeFrameBullBear[idx] = BullBearTrend.None; }              }
Magic Number,MyStrategies,DualTimeFrameMarketOrder,C:\repos\letianzj_QuantTrading\Source\TradingStrategies\MyStrategies\DualTimeFrameMarketOrder.cs,_barlisttracker_GotNewBar,The following statement contains a magic number: if (interval == _higherbarinterval)              {                  BarList bl = _barlisttracker[sym' interval];                    double[] closes = Calc.Decimal2Double(bl.Close());                  // when NewBar is triggered' the latest bar only has one tick                  closes = closes.Take(closes.Length - 1).ToArray();                    // RSI: Overbought/Oversold                  RSIResult rsiresult = AnalysisEngine.RSI(closes' _higherbarsilookback);                  if (rsiresult.Values.Count == 0)        // Not enough bars                      return;                  else if (rsiresult.Values.Last() < _higherbaroversell / 100)    // Oversold                  {                      _isOBOSZone[idx] = OBOSZone.OverSoldZone;                  }                  else if (rsiresult.Values.Last() > 1 - _higherbaroversell / 100)    // Overbought                  {                      _isOBOSZone[idx] = OBOSZone.OverboughtZone;                  }                  else { _isOBOSZone[idx] = OBOSZone.None; }                    // MACD: Bull/Bear                  MACDResult macdresult = AnalysisEngine.MACD(closes' _higherbarmacdfast' _higherbarmacdslow' _higherbarmacdsignal);                  if (macdresult.Signal.Count == 0)           // not enough bars                      return;                  else if (macdresult.MACD.Last() > macdresult.Signal.Last())                  {                      // record the switch to bull                      if (_isHigherTimeFrameBullBear[idx] != BullBearTrend.Bull)                      {                          // get the last bar' and record the entry/exit point                          int count = bl.IntervalCount(interval);                          Bar lastbar = bl[count - 2' interval];                          _entrylevel[idx] = lastbar.High;                          _exitlevel[idx] = lastbar.High - _traingamount;                      }                      _isHigherTimeFrameBullBear[idx] = BullBearTrend.Bull;                  }                  else if (macdresult.MACD.Last() < macdresult.Signal.Last())                  {                      // record the switch to bear                      if (_isHigherTimeFrameBullBear[idx] != BullBearTrend.Bear)                      {                          // get the last bar' and record the entry/exit point                          int count = bl.IntervalCount(interval);                          Bar lastbar = bl[count - 2' interval];                          _entrylevel[idx] = lastbar.Low;                          _exitlevel[idx] = lastbar.Low + _traingamount;                      }                      _isHigherTimeFrameBullBear[idx] = BullBearTrend.Bear;                  }                  else { _isHigherTimeFrameBullBear[idx] = BullBearTrend.None; }              }              else if (interval == _lowerbarinterval)              {                  BarList bl = _barlisttracker[sym' interval];                  double[] closes = Calc.Decimal2Double(bl.Close());                  // when NewBar is triggered' the latest bar only has one tick                  closes = closes.Take(closes.Length - 1).ToArray();                    // MACD: Bull/Bear                  MACDResult macdresult = AnalysisEngine.MACD(closes' _higherbarmacdfast' _higherbarmacdslow' _higherbarmacdsignal);                  if (macdresult.Signal.Count == 0)           // Not enough bars                      return;                  else if (macdresult.MACD.Last() > macdresult.Signal.Last())                  {                      _isLowerTimeFrameBullBear[idx] = BullBearTrend.Bull;                  }                  else if (macdresult.MACD.Last() < macdresult.Signal.Last())                  {                      _isLowerTimeFrameBullBear[idx] = BullBearTrend.Bear;                  }                  else { _isLowerTimeFrameBullBear[idx] = BullBearTrend.None; }              }
Magic Number,MyStrategies,DualTimeFrameMarketOrder,C:\repos\letianzj_QuantTrading\Source\TradingStrategies\MyStrategies\DualTimeFrameMarketOrder.cs,Reset,The following statement contains a magic number: _ordertracker = new OrderTracker(10000);
