Implementation smell,Namespace,Class,File,Method,Description
Long Method,HistoricalDataDownloader,Program,D:\newReposJune17\letianzj_QuantTrading\Source\BacktestAndDailyTools\HistoricalDataDownloader\Program.cs,Main,The method has 95 lines of code.
Complex Method,HistoricalDataDownloader,Program,D:\newReposJune17\letianzj_QuantTrading\Source\BacktestAndDailyTools\HistoricalDataDownloader\Program.cs,Main,Cyclomatic complexity of the method is 12
Long Statement,HistoricalDataDownloader,Program,D:\newReposJune17\letianzj_QuantTrading\Source\BacktestAndDailyTools\HistoricalDataDownloader\Program.cs,Main,The length of the statement  "				BarRequest br = new BarRequest (sym' 1' Util.ToIntDate (s.Date)' Util.ToIntTime (s.Hour' s.Minute' s.Second)' Util.ToIntDate (t.Date)' Util.ToIntTime (t.Hour' t.Minute' t.Second)' _client); " is 189.
Long Statement,HistoricalDataDownloader,Program,D:\newReposJune17\letianzj_QuantTrading\Source\BacktestAndDailyTools\HistoricalDataDownloader\Program.cs,Main,The length of the statement  "			BarRequest br = new BarRequest (sym' 60' Util.ToIntDate (DateTime.Today)' Util.ToIntTime (DateTime.Today)' Util.ToIntDate (DateTime.Today)' Util.ToIntTime (DateTime.Today)' _client); " is 182.
Long Statement,HistoricalDataDownloader,Program,D:\newReposJune17\letianzj_QuantTrading\Source\BacktestAndDailyTools\HistoricalDataDownloader\Program.cs,_iclient_GotHistoricalBarDelegate,The length of the statement  "		string line = d_local.ToString ("yyyy/MM/dd HH:mm:ss") + "'" + b.Open + "'" + b.High + "'" + b.Low + "'" + b.Close + "'" + b.Volume; " is 132.
Magic Number,HistoricalDataDownloader,Program,D:\newReposJune17\letianzj_QuantTrading\Source\BacktestAndDailyTools\HistoricalDataDownloader\Program.cs,Main,The following statement contains a magic number: if (args.Length > 2) {  	_basketfile = args [2];  }  
Magic Number,HistoricalDataDownloader,Program,D:\newReposJune17\letianzj_QuantTrading\Source\BacktestAndDailyTools\HistoricalDataDownloader\Program.cs,Main,The following statement contains a magic number: if (args.Length > 2) {  	_basketfile = args [2];  }  
Magic Number,HistoricalDataDownloader,Program,D:\newReposJune17\letianzj_QuantTrading\Source\BacktestAndDailyTools\HistoricalDataDownloader\Program.cs,Main,The following statement contains a magic number: _basketfile = args [2];  
Magic Number,HistoricalDataDownloader,Program,D:\newReposJune17\letianzj_QuantTrading\Source\BacktestAndDailyTools\HistoricalDataDownloader\Program.cs,Main,The following statement contains a magic number: if (args.Length > 3) {  	_datapath = args [3];  }  
Magic Number,HistoricalDataDownloader,Program,D:\newReposJune17\letianzj_QuantTrading\Source\BacktestAndDailyTools\HistoricalDataDownloader\Program.cs,Main,The following statement contains a magic number: if (args.Length > 3) {  	_datapath = args [3];  }  
Magic Number,HistoricalDataDownloader,Program,D:\newReposJune17\letianzj_QuantTrading\Source\BacktestAndDailyTools\HistoricalDataDownloader\Program.cs,Main,The following statement contains a magic number: _datapath = args [3];  
Magic Number,HistoricalDataDownloader,Program,D:\newReposJune17\letianzj_QuantTrading\Source\BacktestAndDailyTools\HistoricalDataDownloader\Program.cs,Main,The following statement contains a magic number: foreach (string s in _basket.Securities) {  	// set up bar counts  	_totalBars.Add (s' (long)sec);  	// one bar is one sec; if one minute' divide it by 60  	_processedBars.Add (s' 0);  	// initialize processed to 0  	// set up out filenames  	string filename = _datapath + s + "_" + _startTime.Date.ToString ("yyyyMMdd") + ".csv";  	_outfiles.Add (s' filename);  	List<string> lines = new List<string> (90000);  	// set something greater than 86'4000  	lines.Add ("DateTime'Open'High'Low'Close'Volume");  	_sec2bars.Add (s' lines);  }  
Magic Number,HistoricalDataDownloader,Program,D:\newReposJune17\letianzj_QuantTrading\Source\BacktestAndDailyTools\HistoricalDataDownloader\Program.cs,Main,The following statement contains a magic number: if (_client == "IB") {  	_iclient = new IBClient ();  	// currently it uses default ip:port  	_iclient.SendDebugEventDelegate += _iclient_SendDebugEventDelegate;  	_iclient.GotHistoricalBarDelegate += _iclient_GotHistoricalBarDelegate;  	_iclient.Connect ();  	long totalRequests = (long)sec / 1800;  	// one request is 30 min' totalRequests = 48  	TimeSpan thirtyMin = new TimeSpan (0' 30' 0);  	foreach (string sym in _basket.Securities) {  		DateTime s = _startTime;  		DateTime t = _startTime + thirtyMin;  		Console.WriteLine ("Requesting historical bars for :" + sym);  		for (int i = 0; i < totalRequests; i++) {  			Console.WriteLine ("Request #: " + (i + 1).ToString () + "/" + totalRequests);  			// 1 = 1 second  			BarRequest br = new BarRequest (sym' 1' Util.ToIntDate (s.Date)' Util.ToIntTime (s.Hour' s.Minute' s.Second)' Util.ToIntDate (t.Date)' Util.ToIntTime (t.Hour' t.Minute' t.Second)' _client);  			_iclient.RequestHistoricalData (br' true);  			// Do not make more than 60 historical data requests in any ten-minute period.  			// If I have 10 names' each can only make 6 requests in ten minute;  			// I use 5 minute for a pause; Then 24 hours takes 120 min or 1.5hour  			// Thread.Sleep(new TimeSpan(0' 5' 0));  			// wait 10 secs  			Thread.Sleep (10000);  			s += thirtyMin;  			t += thirtyMin;  		}  	}  } else if (_client == "GOOG") {  	_iclient = new GoogleClient (1);  	_iclient.SendDebugEventDelegate += _iclient_SendDebugEventDelegate;  	_iclient.GotHistoricalBarDelegate += _iclient_GotHistoricalBarDelegate;  	foreach (string sym in _basket.Securities) {  		Console.WriteLine ("Requesting historical bars for :" + sym);  		BarRequest br = new BarRequest (sym' 60' Util.ToIntDate (DateTime.Today)' Util.ToIntTime (DateTime.Today)' Util.ToIntDate (DateTime.Today)' Util.ToIntTime (DateTime.Today)' _client);  		_iclient.RequestHistoricalData (br);  	}  }  
Magic Number,HistoricalDataDownloader,Program,D:\newReposJune17\letianzj_QuantTrading\Source\BacktestAndDailyTools\HistoricalDataDownloader\Program.cs,Main,The following statement contains a magic number: if (_client == "IB") {  	_iclient = new IBClient ();  	// currently it uses default ip:port  	_iclient.SendDebugEventDelegate += _iclient_SendDebugEventDelegate;  	_iclient.GotHistoricalBarDelegate += _iclient_GotHistoricalBarDelegate;  	_iclient.Connect ();  	long totalRequests = (long)sec / 1800;  	// one request is 30 min' totalRequests = 48  	TimeSpan thirtyMin = new TimeSpan (0' 30' 0);  	foreach (string sym in _basket.Securities) {  		DateTime s = _startTime;  		DateTime t = _startTime + thirtyMin;  		Console.WriteLine ("Requesting historical bars for :" + sym);  		for (int i = 0; i < totalRequests; i++) {  			Console.WriteLine ("Request #: " + (i + 1).ToString () + "/" + totalRequests);  			// 1 = 1 second  			BarRequest br = new BarRequest (sym' 1' Util.ToIntDate (s.Date)' Util.ToIntTime (s.Hour' s.Minute' s.Second)' Util.ToIntDate (t.Date)' Util.ToIntTime (t.Hour' t.Minute' t.Second)' _client);  			_iclient.RequestHistoricalData (br' true);  			// Do not make more than 60 historical data requests in any ten-minute period.  			// If I have 10 names' each can only make 6 requests in ten minute;  			// I use 5 minute for a pause; Then 24 hours takes 120 min or 1.5hour  			// Thread.Sleep(new TimeSpan(0' 5' 0));  			// wait 10 secs  			Thread.Sleep (10000);  			s += thirtyMin;  			t += thirtyMin;  		}  	}  } else if (_client == "GOOG") {  	_iclient = new GoogleClient (1);  	_iclient.SendDebugEventDelegate += _iclient_SendDebugEventDelegate;  	_iclient.GotHistoricalBarDelegate += _iclient_GotHistoricalBarDelegate;  	foreach (string sym in _basket.Securities) {  		Console.WriteLine ("Requesting historical bars for :" + sym);  		BarRequest br = new BarRequest (sym' 60' Util.ToIntDate (DateTime.Today)' Util.ToIntTime (DateTime.Today)' Util.ToIntDate (DateTime.Today)' Util.ToIntTime (DateTime.Today)' _client);  		_iclient.RequestHistoricalData (br);  	}  }  
Magic Number,HistoricalDataDownloader,Program,D:\newReposJune17\letianzj_QuantTrading\Source\BacktestAndDailyTools\HistoricalDataDownloader\Program.cs,Main,The following statement contains a magic number: if (_client == "IB") {  	_iclient = new IBClient ();  	// currently it uses default ip:port  	_iclient.SendDebugEventDelegate += _iclient_SendDebugEventDelegate;  	_iclient.GotHistoricalBarDelegate += _iclient_GotHistoricalBarDelegate;  	_iclient.Connect ();  	long totalRequests = (long)sec / 1800;  	// one request is 30 min' totalRequests = 48  	TimeSpan thirtyMin = new TimeSpan (0' 30' 0);  	foreach (string sym in _basket.Securities) {  		DateTime s = _startTime;  		DateTime t = _startTime + thirtyMin;  		Console.WriteLine ("Requesting historical bars for :" + sym);  		for (int i = 0; i < totalRequests; i++) {  			Console.WriteLine ("Request #: " + (i + 1).ToString () + "/" + totalRequests);  			// 1 = 1 second  			BarRequest br = new BarRequest (sym' 1' Util.ToIntDate (s.Date)' Util.ToIntTime (s.Hour' s.Minute' s.Second)' Util.ToIntDate (t.Date)' Util.ToIntTime (t.Hour' t.Minute' t.Second)' _client);  			_iclient.RequestHistoricalData (br' true);  			// Do not make more than 60 historical data requests in any ten-minute period.  			// If I have 10 names' each can only make 6 requests in ten minute;  			// I use 5 minute for a pause; Then 24 hours takes 120 min or 1.5hour  			// Thread.Sleep(new TimeSpan(0' 5' 0));  			// wait 10 secs  			Thread.Sleep (10000);  			s += thirtyMin;  			t += thirtyMin;  		}  	}  } else if (_client == "GOOG") {  	_iclient = new GoogleClient (1);  	_iclient.SendDebugEventDelegate += _iclient_SendDebugEventDelegate;  	_iclient.GotHistoricalBarDelegate += _iclient_GotHistoricalBarDelegate;  	foreach (string sym in _basket.Securities) {  		Console.WriteLine ("Requesting historical bars for :" + sym);  		BarRequest br = new BarRequest (sym' 60' Util.ToIntDate (DateTime.Today)' Util.ToIntTime (DateTime.Today)' Util.ToIntDate (DateTime.Today)' Util.ToIntTime (DateTime.Today)' _client);  		_iclient.RequestHistoricalData (br);  	}  }  
Magic Number,HistoricalDataDownloader,Program,D:\newReposJune17\letianzj_QuantTrading\Source\BacktestAndDailyTools\HistoricalDataDownloader\Program.cs,Main,The following statement contains a magic number: if (_client == "IB") {  	_iclient = new IBClient ();  	// currently it uses default ip:port  	_iclient.SendDebugEventDelegate += _iclient_SendDebugEventDelegate;  	_iclient.GotHistoricalBarDelegate += _iclient_GotHistoricalBarDelegate;  	_iclient.Connect ();  	long totalRequests = (long)sec / 1800;  	// one request is 30 min' totalRequests = 48  	TimeSpan thirtyMin = new TimeSpan (0' 30' 0);  	foreach (string sym in _basket.Securities) {  		DateTime s = _startTime;  		DateTime t = _startTime + thirtyMin;  		Console.WriteLine ("Requesting historical bars for :" + sym);  		for (int i = 0; i < totalRequests; i++) {  			Console.WriteLine ("Request #: " + (i + 1).ToString () + "/" + totalRequests);  			// 1 = 1 second  			BarRequest br = new BarRequest (sym' 1' Util.ToIntDate (s.Date)' Util.ToIntTime (s.Hour' s.Minute' s.Second)' Util.ToIntDate (t.Date)' Util.ToIntTime (t.Hour' t.Minute' t.Second)' _client);  			_iclient.RequestHistoricalData (br' true);  			// Do not make more than 60 historical data requests in any ten-minute period.  			// If I have 10 names' each can only make 6 requests in ten minute;  			// I use 5 minute for a pause; Then 24 hours takes 120 min or 1.5hour  			// Thread.Sleep(new TimeSpan(0' 5' 0));  			// wait 10 secs  			Thread.Sleep (10000);  			s += thirtyMin;  			t += thirtyMin;  		}  	}  } else if (_client == "GOOG") {  	_iclient = new GoogleClient (1);  	_iclient.SendDebugEventDelegate += _iclient_SendDebugEventDelegate;  	_iclient.GotHistoricalBarDelegate += _iclient_GotHistoricalBarDelegate;  	foreach (string sym in _basket.Securities) {  		Console.WriteLine ("Requesting historical bars for :" + sym);  		BarRequest br = new BarRequest (sym' 60' Util.ToIntDate (DateTime.Today)' Util.ToIntTime (DateTime.Today)' Util.ToIntDate (DateTime.Today)' Util.ToIntTime (DateTime.Today)' _client);  		_iclient.RequestHistoricalData (br);  	}  }  
Magic Number,HistoricalDataDownloader,Program,D:\newReposJune17\letianzj_QuantTrading\Source\BacktestAndDailyTools\HistoricalDataDownloader\Program.cs,Main,The following statement contains a magic number: foreach (string sym in _basket.Securities) {  	DateTime s = _startTime;  	DateTime t = _startTime + thirtyMin;  	Console.WriteLine ("Requesting historical bars for :" + sym);  	for (int i = 0; i < totalRequests; i++) {  		Console.WriteLine ("Request #: " + (i + 1).ToString () + "/" + totalRequests);  		// 1 = 1 second  		BarRequest br = new BarRequest (sym' 1' Util.ToIntDate (s.Date)' Util.ToIntTime (s.Hour' s.Minute' s.Second)' Util.ToIntDate (t.Date)' Util.ToIntTime (t.Hour' t.Minute' t.Second)' _client);  		_iclient.RequestHistoricalData (br' true);  		// Do not make more than 60 historical data requests in any ten-minute period.  		// If I have 10 names' each can only make 6 requests in ten minute;  		// I use 5 minute for a pause; Then 24 hours takes 120 min or 1.5hour  		// Thread.Sleep(new TimeSpan(0' 5' 0));  		// wait 10 secs  		Thread.Sleep (10000);  		s += thirtyMin;  		t += thirtyMin;  	}  }  
Magic Number,HistoricalDataDownloader,Program,D:\newReposJune17\letianzj_QuantTrading\Source\BacktestAndDailyTools\HistoricalDataDownloader\Program.cs,Main,The following statement contains a magic number: for (int i = 0; i < totalRequests; i++) {  	Console.WriteLine ("Request #: " + (i + 1).ToString () + "/" + totalRequests);  	// 1 = 1 second  	BarRequest br = new BarRequest (sym' 1' Util.ToIntDate (s.Date)' Util.ToIntTime (s.Hour' s.Minute' s.Second)' Util.ToIntDate (t.Date)' Util.ToIntTime (t.Hour' t.Minute' t.Second)' _client);  	_iclient.RequestHistoricalData (br' true);  	// Do not make more than 60 historical data requests in any ten-minute period.  	// If I have 10 names' each can only make 6 requests in ten minute;  	// I use 5 minute for a pause; Then 24 hours takes 120 min or 1.5hour  	// Thread.Sleep(new TimeSpan(0' 5' 0));  	// wait 10 secs  	Thread.Sleep (10000);  	s += thirtyMin;  	t += thirtyMin;  }  
Magic Number,HistoricalDataDownloader,Program,D:\newReposJune17\letianzj_QuantTrading\Source\BacktestAndDailyTools\HistoricalDataDownloader\Program.cs,Main,The following statement contains a magic number: Thread.Sleep (10000);  
Magic Number,HistoricalDataDownloader,Program,D:\newReposJune17\letianzj_QuantTrading\Source\BacktestAndDailyTools\HistoricalDataDownloader\Program.cs,Main,The following statement contains a magic number: if (_client == "GOOG") {  	_iclient = new GoogleClient (1);  	_iclient.SendDebugEventDelegate += _iclient_SendDebugEventDelegate;  	_iclient.GotHistoricalBarDelegate += _iclient_GotHistoricalBarDelegate;  	foreach (string sym in _basket.Securities) {  		Console.WriteLine ("Requesting historical bars for :" + sym);  		BarRequest br = new BarRequest (sym' 60' Util.ToIntDate (DateTime.Today)' Util.ToIntTime (DateTime.Today)' Util.ToIntDate (DateTime.Today)' Util.ToIntTime (DateTime.Today)' _client);  		_iclient.RequestHistoricalData (br);  	}  }  
Magic Number,HistoricalDataDownloader,Program,D:\newReposJune17\letianzj_QuantTrading\Source\BacktestAndDailyTools\HistoricalDataDownloader\Program.cs,Main,The following statement contains a magic number: foreach (string sym in _basket.Securities) {  	Console.WriteLine ("Requesting historical bars for :" + sym);  	BarRequest br = new BarRequest (sym' 60' Util.ToIntDate (DateTime.Today)' Util.ToIntTime (DateTime.Today)' Util.ToIntDate (DateTime.Today)' Util.ToIntTime (DateTime.Today)' _client);  	_iclient.RequestHistoricalData (br);  }  
Magic Number,HistoricalDataDownloader,Program,D:\newReposJune17\letianzj_QuantTrading\Source\BacktestAndDailyTools\HistoricalDataDownloader\Program.cs,Main,The following statement contains a magic number: Thread.Sleep (new TimeSpan (0' 3' 0));  
