Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,TechnicalAnalysisEngine,AnalysisEngine,C:\repos\letianzj_QuantTrading\Source\TradingBase\TechnicalAnalysisEngine\ATR.cs,BollingerBands,The method has 5 parameters. Parameters: input' periods' standardDeviations' calculateBandwidth' calculatePercentB
Long Parameter List,TechnicalAnalysisEngine,AnalysisEngine,C:\repos\letianzj_QuantTrading\Source\TradingBase\TechnicalAnalysisEngine\ATR.cs,MACD,The method has 5 parameters. Parameters: inputValues' fastPeriod' slowPeriod' signalPeriod' calculateHistogram
Long Parameter List,TechnicalAnalysisEngine,AnalysisEngine,C:\repos\letianzj_QuantTrading\Source\TradingBase\TechnicalAnalysisEngine\ATR.cs,MFI,The method has 5 parameters. Parameters: highs' lows' closes' volume' periods
Long Parameter List,TechnicalAnalysisEngine,AnalysisEngine,C:\repos\letianzj_QuantTrading\Source\TradingBase\TechnicalAnalysisEngine\ATR.cs,Stochastic,The method has 5 parameters. Parameters: highs' lows' closes' kPeriods' dPeriods
Magic Number,TechnicalAnalysisEngine,AnalysisEngine,C:\repos\letianzj_QuantTrading\Source\TradingBase\TechnicalAnalysisEngine\ATR.cs,EMA,The following statement contains a magic number: double multiplier = (2.0 / (period + 1));
Magic Number,TechnicalAnalysisEngine,AnalysisEngine,C:\repos\letianzj_QuantTrading\Source\TradingBase\TechnicalAnalysisEngine\ATR.cs,MACD,The following statement contains a magic number: int signalOffsetIndex = slowPeriod + signalPeriod - 2;
Magic Number,TechnicalAnalysisEngine,AnalysisEngine,C:\repos\letianzj_QuantTrading\Source\TradingBase\TechnicalAnalysisEngine\ATR.cs,MFI,The following statement contains a magic number: double lastTypicalPrice = (highs.ElementAt(0) + lows.ElementAt(0) + closes.ElementAt(0)) / 3;
Magic Number,TechnicalAnalysisEngine,AnalysisEngine,C:\repos\letianzj_QuantTrading\Source\TradingBase\TechnicalAnalysisEngine\ATR.cs,MFI,The following statement contains a magic number: for (int i = 1; i < highs.Count(); i++)              {                  double typicalPrice = (highs.ElementAt(i) + lows.ElementAt(i) + closes.ElementAt(i)) / 3;                  bool up = typicalPrice > lastTypicalPrice;                  lastTypicalPrice = typicalPrice;                    double rawMoneyFlow = typicalPrice * volume.ElementAt(i);                    var moneyFlow = new MFIMoneyFlow();                                    if (up)                  {                      moneyFlow.PositiveMoneyFlow = rawMoneyFlow;                  }                  else                  {                      moneyFlow.NegativeMoneyFlow = rawMoneyFlow;                  }                    moneyFlowList.Add(moneyFlow);              }
Magic Number,TechnicalAnalysisEngine,AnalysisEngine,C:\repos\letianzj_QuantTrading\Source\TradingBase\TechnicalAnalysisEngine\ATR.cs,MFI,The following statement contains a magic number: for (int i = 0; i < moneyFlowList.Count - periods + 1; i++)              {                  var range = moneyFlowList.GetRange(i' periods);                    double positiveMoneyFlow = range.Sum(x => x.PositiveMoneyFlow);                  double negativeMoneyFlow = range.Sum(x => x.NegativeMoneyFlow);                  double moneyFlowRatio = positiveMoneyFlow / negativeMoneyFlow;                  double moneyFlowIndex = 100 - 100 / (1 + moneyFlowRatio);                    moneyFlowIndexList.Add(moneyFlowIndex);             }
Magic Number,TechnicalAnalysisEngine,AnalysisEngine,C:\repos\letianzj_QuantTrading\Source\TradingBase\TechnicalAnalysisEngine\ATR.cs,MFI,The following statement contains a magic number: for (int i = 0; i < moneyFlowList.Count - periods + 1; i++)              {                  var range = moneyFlowList.GetRange(i' periods);                    double positiveMoneyFlow = range.Sum(x => x.PositiveMoneyFlow);                  double negativeMoneyFlow = range.Sum(x => x.NegativeMoneyFlow);                  double moneyFlowRatio = positiveMoneyFlow / negativeMoneyFlow;                  double moneyFlowIndex = 100 - 100 / (1 + moneyFlowRatio);                    moneyFlowIndexList.Add(moneyFlowIndex);             }
Magic Number,TechnicalAnalysisEngine,AnalysisEngine,C:\repos\letianzj_QuantTrading\Source\TradingBase\TechnicalAnalysisEngine\ATR.cs,MovingAverageEnvelopes,The following statement contains a magic number: foreach (var point in movingAverage)              {                  double upperEnvelopePoint = point + point * percentage / 100;                  double lowerEnvelopePoint = point - point * percentage / 100;                    upperEnvelope.Add(upperEnvelopePoint);                  lowerEnvelope.Add(lowerEnvelopePoint);              }
Magic Number,TechnicalAnalysisEngine,AnalysisEngine,C:\repos\letianzj_QuantTrading\Source\TradingBase\TechnicalAnalysisEngine\ATR.cs,MovingAverageEnvelopes,The following statement contains a magic number: foreach (var point in movingAverage)              {                  double upperEnvelopePoint = point + point * percentage / 100;                  double lowerEnvelopePoint = point - point * percentage / 100;                    upperEnvelope.Add(upperEnvelopePoint);                  lowerEnvelope.Add(lowerEnvelopePoint);              }
Magic Number,TechnicalAnalysisEngine,AnalysisEngine,C:\repos\letianzj_QuantTrading\Source\TradingBase\TechnicalAnalysisEngine\ATR.cs,RSI,The following statement contains a magic number: foreach (var item in gainLossList)              {                  double result = 100 - 100 / (1 + item.AverageGain / item.AverageLoss);                  output.Add(result);              }
Magic Number,TechnicalAnalysisEngine,AnalysisEngine,C:\repos\letianzj_QuantTrading\Source\TradingBase\TechnicalAnalysisEngine\ATR.cs,RSI,The following statement contains a magic number: foreach (var item in gainLossList)              {                  double result = 100 - 100 / (1 + item.AverageGain / item.AverageLoss);                  output.Add(result);              }
Magic Number,TechnicalAnalysisEngine,AnalysisEngine,C:\repos\letianzj_QuantTrading\Source\TradingBase\TechnicalAnalysisEngine\ATR.cs,Stochastic,The following statement contains a magic number: int startDIndex = startKIndex + 2;
Magic Number,TechnicalAnalysisEngine,AnalysisEngine,C:\repos\letianzj_QuantTrading\Source\TradingBase\TechnicalAnalysisEngine\ATR.cs,Stochastic,The following statement contains a magic number: for (int i = kPeriods - 1; i < highs.Count(); i++)              {                  double highestHigh = highs.Skip(i + 1 - kPeriods)                          .Take(kPeriods)                          .Max();                    double lowestLow = lows.Skip(i + 1 - kPeriods)                          .Take(kPeriods)                          .Min();                    double currentClose = closes.ElementAt(i);                    double k = (currentClose - lowestLow) / (highestHigh - lowestLow) * 100;                  outputKLine.Add(k);              }
Magic Number,TechnicalAnalysisEngine,AnalysisEngine,C:\repos\letianzj_QuantTrading\Source\TradingBase\TechnicalAnalysisEngine\ATR.cs,WilliamsR,The following statement contains a magic number: for (int i = periods - 1; i < highs.Count(); i++)              {                  double highestHigh = highs.Skip(i - periods + 1).Take(periods).Max();                  double lowestLow = lows.Skip(i - periods + 1).Take(periods).Min();                    double currentClose = closes.ElementAt(i);                    double value = ((highestHigh - currentClose) / (highestHigh - lowestLow)) * -100;                  outputValues.Add(value);              }
Magic Number,TechnicalAnalysisEngine,Helpers,C:\repos\letianzj_QuantTrading\Source\TradingBase\TechnicalAnalysisEngine\Helpers.cs,StandardDeviation,The following statement contains a magic number: for (int i = 0; i < input.Count(); i++)              {                  helperList.Add(Math.Pow(input.ElementAt(i) - average' 2));              }
