Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Modules.OrderTicket,OrderTicketView,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\RealTimeTrading\Modules.OrderTicket\View\OrderTicketView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Modules.OrderTicket;component/view/orderticketview.xaml"' System.UriKind.Relative); " is 129.
Long Statement,Modules.OrderTicket.ViewModel,OrderTicketViewModel,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\RealTimeTrading\Modules.OrderTicket\ViewModel\OrderTicketViewModel.cs,OnPlaceOrder,The length of the statement  "                    _workingorder = new MarketOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _globalIdService.GetNextOrderId()); " is 120.
Long Statement,Modules.OrderTicket.ViewModel,OrderTicketViewModel,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\RealTimeTrading\Modules.OrderTicket\ViewModel\OrderTicketViewModel.cs,OnPlaceOrder,The length of the statement  "                    _workingorder = new LimitOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _price' _globalIdService.GetNextOrderId()); " is 127.
Long Statement,Modules.OrderTicket.ViewModel,OrderTicketViewModel,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\RealTimeTrading\Modules.OrderTicket\ViewModel\OrderTicketViewModel.cs,OnPlaceOrder,The length of the statement  "                    _workingorder = new StopOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _price' _globalIdService.GetNextOrderId()); " is 126.
Long Statement,Modules.OrderTicket.ViewModel,OrderTicketViewModel,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\RealTimeTrading\Modules.OrderTicket\ViewModel\OrderTicketViewModel.cs,OnPlaceOrder,The length of the statement  "                    _workingorder = new StopLimitOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _price' _auxprice'_globalIdService.GetNextOrderId()); " is 141.
Long Statement,Modules.OrderTicket.ViewModel,OrderTicketViewModel,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\RealTimeTrading\Modules.OrderTicket\ViewModel\OrderTicketViewModel.cs,OnPlaceOrder,The length of the statement  "                    _workingorder = new TrailingStopOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _auxprice' _globalIdService.GetNextOrderId()); " is 137.
Long Statement,Modules.OrderTicket.ViewModel,OrderTicketViewModel,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\RealTimeTrading\Modules.OrderTicket\ViewModel\OrderTicketViewModel.cs,OnPlaceOrder,The length of the statement  "                    _workingorder = new TrailingStopLimitOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _price' _auxprice' _globalIdService.GetNextOrderId()); " is 150.
Magic Number,Modules.OrderTicket,OrderTicketView,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\RealTimeTrading\Modules.OrderTicket\View\OrderTicketView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.cbBuySell = ((System.Windows.Controls.ComboBox)(target));              return;              case 2:              this.cbOrderType = ((System.Windows.Controls.ComboBox)(target));              return;              }
Magic Number,Modules.OrderTicket.ViewModel,OrderTicketViewModel,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\RealTimeTrading\Modules.OrderTicket\ViewModel\OrderTicketViewModel.cs,OnPlaceOrder,The following statement contains a magic number: switch (_selectedordertype)              {                  case 0:                      _workingorder = new MarketOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _globalIdService.GetNextOrderId());                      //_workingorder.StopPrice = 0;                      //_workingorder.LimitPrice = 0;                      break;                  case 1:                      _workingorder = new LimitOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _price' _globalIdService.GetNextOrderId());                      //_workingorder.StopPrice = 0;                      //_workingorder.LimitPrice = _price;                      break;                  case 2:                      _workingorder = new StopOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _price' _globalIdService.GetNextOrderId());                      //_workingorder.StopPrice = _price;                      //_workingorder.LimitPrice = 0;                      break;                  case 3:                      _workingorder = new StopLimitOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _price' _auxprice'_globalIdService.GetNextOrderId());                      break;                  case 4:                      _workingorder = new TrailingStopOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _auxprice' _globalIdService.GetNextOrderId());                      break;                  case 5:                      _workingorder = new TrailingStopLimitOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _price' _auxprice' _globalIdService.GetNextOrderId());                      break;              }
Magic Number,Modules.OrderTicket.ViewModel,OrderTicketViewModel,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\RealTimeTrading\Modules.OrderTicket\ViewModel\OrderTicketViewModel.cs,OnPlaceOrder,The following statement contains a magic number: switch (_selectedordertype)              {                  case 0:                      _workingorder = new MarketOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _globalIdService.GetNextOrderId());                      //_workingorder.StopPrice = 0;                      //_workingorder.LimitPrice = 0;                      break;                  case 1:                      _workingorder = new LimitOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _price' _globalIdService.GetNextOrderId());                      //_workingorder.StopPrice = 0;                      //_workingorder.LimitPrice = _price;                      break;                  case 2:                      _workingorder = new StopOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _price' _globalIdService.GetNextOrderId());                      //_workingorder.StopPrice = _price;                      //_workingorder.LimitPrice = 0;                      break;                  case 3:                      _workingorder = new StopLimitOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _price' _auxprice'_globalIdService.GetNextOrderId());                      break;                  case 4:                      _workingorder = new TrailingStopOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _auxprice' _globalIdService.GetNextOrderId());                      break;                  case 5:                      _workingorder = new TrailingStopLimitOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _price' _auxprice' _globalIdService.GetNextOrderId());                      break;              }
Magic Number,Modules.OrderTicket.ViewModel,OrderTicketViewModel,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\RealTimeTrading\Modules.OrderTicket\ViewModel\OrderTicketViewModel.cs,OnPlaceOrder,The following statement contains a magic number: switch (_selectedordertype)              {                  case 0:                      _workingorder = new MarketOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _globalIdService.GetNextOrderId());                      //_workingorder.StopPrice = 0;                      //_workingorder.LimitPrice = 0;                      break;                  case 1:                      _workingorder = new LimitOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _price' _globalIdService.GetNextOrderId());                      //_workingorder.StopPrice = 0;                      //_workingorder.LimitPrice = _price;                      break;                  case 2:                      _workingorder = new StopOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _price' _globalIdService.GetNextOrderId());                      //_workingorder.StopPrice = _price;                      //_workingorder.LimitPrice = 0;                      break;                  case 3:                      _workingorder = new StopLimitOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _price' _auxprice'_globalIdService.GetNextOrderId());                      break;                  case 4:                      _workingorder = new TrailingStopOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _auxprice' _globalIdService.GetNextOrderId());                      break;                  case 5:                      _workingorder = new TrailingStopLimitOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _price' _auxprice' _globalIdService.GetNextOrderId());                      break;              }
Magic Number,Modules.OrderTicket.ViewModel,OrderTicketViewModel,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\RealTimeTrading\Modules.OrderTicket\ViewModel\OrderTicketViewModel.cs,OnPlaceOrder,The following statement contains a magic number: switch (_selectedordertype)              {                  case 0:                      _workingorder = new MarketOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _globalIdService.GetNextOrderId());                      //_workingorder.StopPrice = 0;                      //_workingorder.LimitPrice = 0;                      break;                  case 1:                      _workingorder = new LimitOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _price' _globalIdService.GetNextOrderId());                      //_workingorder.StopPrice = 0;                      //_workingorder.LimitPrice = _price;                      break;                  case 2:                      _workingorder = new StopOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _price' _globalIdService.GetNextOrderId());                      //_workingorder.StopPrice = _price;                      //_workingorder.LimitPrice = 0;                      break;                  case 3:                      _workingorder = new StopLimitOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _price' _auxprice'_globalIdService.GetNextOrderId());                      break;                  case 4:                      _workingorder = new TrailingStopOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _auxprice' _globalIdService.GetNextOrderId());                      break;                  case 5:                      _workingorder = new TrailingStopLimitOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _price' _auxprice' _globalIdService.GetNextOrderId());                      break;              }
Missing Default,Modules.OrderTicket,OrderTicketView,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\RealTimeTrading\Modules.OrderTicket\View\OrderTicketView.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.cbBuySell = ((System.Windows.Controls.ComboBox)(target));              return;              case 2:              this.cbOrderType = ((System.Windows.Controls.ComboBox)(target));              return;              }
Missing Default,Modules.OrderTicket.ViewModel,OrderTicketViewModel,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\RealTimeTrading\Modules.OrderTicket\ViewModel\OrderTicketViewModel.cs,OnPlaceOrder,The following switch statement is missing a default case: switch (_selectedordertype)              {                  case 0:                      _workingorder = new MarketOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _globalIdService.GetNextOrderId());                      //_workingorder.StopPrice = 0;                      //_workingorder.LimitPrice = 0;                      break;                  case 1:                      _workingorder = new LimitOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _price' _globalIdService.GetNextOrderId());                      //_workingorder.StopPrice = 0;                      //_workingorder.LimitPrice = _price;                      break;                  case 2:                      _workingorder = new StopOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _price' _globalIdService.GetNextOrderId());                      //_workingorder.StopPrice = _price;                      //_workingorder.LimitPrice = 0;                      break;                  case 3:                      _workingorder = new StopLimitOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _price' _auxprice'_globalIdService.GetNextOrderId());                      break;                  case 4:                      _workingorder = new TrailingStopOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _auxprice' _globalIdService.GetNextOrderId());                      break;                  case 5:                      _workingorder = new TrailingStopLimitOrder(_fullsymbol' _selectedbuysell == 0 ? _size : -_size' _price' _auxprice' _globalIdService.GetNextOrderId());                      break;              }
