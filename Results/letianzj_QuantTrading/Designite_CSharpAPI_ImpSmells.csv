Implementation smell,Namespace,Class,File,Method,Description
Long Method,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,placeOrder,The method has 366 lines of code.
Long Method,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,VerifyOrder,The method has 158 lines of code.
Long Method,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,ProcessIncomingMessage,The method has 208 lines of code.
Long Method,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The method has 328 lines of code.
Long Method,IBApi,Order,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\Order.cs,Equals,The method has 117 lines of code.
Complex Method,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,placeOrder,Cyclomatic complexity of the method is 54
Complex Method,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqContractDetails,Cyclomatic complexity of the method is 12
Complex Method,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqHistoricalData,Cyclomatic complexity of the method is 9
Complex Method,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqMktData,Cyclomatic complexity of the method is 17
Complex Method,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqMarketDepth,Cyclomatic complexity of the method is 8
Complex Method,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,VerifyOrderContract,Cyclomatic complexity of the method is 17
Complex Method,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,VerifyOrder,Cyclomatic complexity of the method is 32
Complex Method,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,TickOptionComputationEvent,Cyclomatic complexity of the method is 11
Complex Method,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,BondContractDetailsEvent,Cyclomatic complexity of the method is 8
Complex Method,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,PortfolioValueEvent,Cyclomatic complexity of the method is 8
Complex Method,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,Cyclomatic complexity of the method is 47
Complex Method,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,ContractDataEvent,Cyclomatic complexity of the method is 10
Complex Method,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,ExecutionDataEvent,Cyclomatic complexity of the method is 11
Complex Method,IBApi,Order,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\Order.cs,Equals,Cyclomatic complexity of the method is 9
Complex Method,IBApi,Util,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\Util.cs,VectorEqualsUnordered,Cyclomatic complexity of the method is 9
Long Parameter List,IBApi,ComboLeg,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\ComboLeg.cs,ComboLeg,The method has 8 parameters. Parameters: conId' ratio' action' exchange' openClose' shortSaleSlot' designatedLocation' exemptCode
Long Parameter List,IBApi,ContractDetails,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\ContractDetails.cs,ContractDetails,The method has 16 parameters. Parameters: summary' marketName' minTick' orderTypes' validExchanges' underConId' longName' contractMonth' industry' category' subcategory' timeZoneId' tradingHours' liquidHours' evRule' evMultiplier
Long Parameter List,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,exerciseOptions,The method has 6 parameters. Parameters: tickerId' contract' exerciseAction' exerciseQuantity' account' ovrd
Long Parameter List,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqHistoricalData,The method has 8 parameters. Parameters: tickerId' contract' endDateTime' durationString' barSizeSetting' whatToShow' useRTH' formatDate
Long Parameter List,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqRealTimeBars,The method has 5 parameters. Parameters: tickerId' contract' barSize' whatToShow' useRTH
Long Parameter List,IBApi,EWrapper,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EWrapper.cs,tickEFP,The method has 9 parameters. Parameters: tickerId' tickType' basisPoints' formattedBasisPoints' impliedFuture' holdDays' futureExpiry' dividendImpact' dividendsToExpiry
Long Parameter List,IBApi,EWrapper,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EWrapper.cs,tickOptionComputation,The method has 10 parameters. Parameters: tickerId' field' impliedVolatility' delta' optPrice' pvDividend' gamma' vega' theta' undPrice
Long Parameter List,IBApi,EWrapper,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EWrapper.cs,accountSummary,The method has 5 parameters. Parameters: reqId' account' tag' value' currency
Long Parameter List,IBApi,EWrapper,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EWrapper.cs,updatePortfolio,The method has 8 parameters. Parameters: contract' position' marketPrice' marketValue' averageCost' unrealisedPNL' realisedPNL' accountName
Long Parameter List,IBApi,EWrapper,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EWrapper.cs,orderStatus,The method has 10 parameters. Parameters: orderId' status' filled' remaining' avgFillPrice' permId' parentId' lastFillPrice' clientId' whyHeld
Long Parameter List,IBApi,EWrapper,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EWrapper.cs,historicalData,The method has 10 parameters. Parameters: reqId' date' open' high' low' close' volume' count' WAP' hasGaps
Long Parameter List,IBApi,EWrapper,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EWrapper.cs,updateMktDepth,The method has 6 parameters. Parameters: tickerId' position' operation' side' price' size
Long Parameter List,IBApi,EWrapper,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EWrapper.cs,updateMktDepthL2,The method has 7 parameters. Parameters: tickerId' position' marketMaker' operation' side' price' size
Long Parameter List,IBApi,EWrapper,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EWrapper.cs,realtimeBar,The method has 9 parameters. Parameters: reqId' time' open' high' low' close' volume' WAP' count
Long Parameter List,IBApi,EWrapper,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EWrapper.cs,scannerData,The method has 7 parameters. Parameters: reqId' rank' contractDetails' distance' benchmark' projection' legsStr
Long Parameter List,IBApi,Execution,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\Execution.cs,Execution,The method has 16 parameters. Parameters: orderId' clientId' execId' time' acctNumber' exchange' side' shares' price' permId' liquidation' cumQty' avgPrice' orderRef' evRule' evMultiplier
Long Parameter List,IBApi,ExecutionFilter,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\ExecutionFilter.cs,ExecutionFilter,The method has 7 parameters. Parameters: clientId' acctCode' time' symbol' secType' exchange' side
Long Parameter List,IBApi,OrderState,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\OrderState.cs,OrderState,The method has 9 parameters. Parameters: status' initMargin' maintMargin' equityWithLoan' commission' minCommission' maxCommission' commissionCurrency' warningText
Long Identifier,IBApi,EClientErrors,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientErrors.cs,,The length of the parameter FAIL_SEND_REQSCANNERPARAMETERS is 30.
Long Identifier,IBApi,Order,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\Order.cs,,The length of the parameter deltaNeutralDesignatedLocation is 30.
Long Statement,IBApi,AccountSummaryTags,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\AccountSummaryTags.cs,GetAllTags,The length of the statement  "            return AccountType + "'" + NetLiquidation + "'" + TotalCashValue + "'" + SettledCash + "'" + AccruedCash + "'" + BuyingPower + "'" + EquityWithLoanValue + "'" + PreviousEquityWithLoanValue + "'" + GrossPositionValue + "'" + ReqTEquity " is 234.
Long Statement,IBApi,AccountSummaryTags,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\AccountSummaryTags.cs,GetAllTags,The length of the statement  "                + "'" + ReqTMargin + "'" + SMA + "'" + InitMarginReq + "'" + MaintMarginReq + "'" + AvailableFunds + "'" + ExcessLiquidity + "'" + Cushion + "'" + FullInitMarginReq + "'" + FullMaintMarginReq + "'" + FullAvailableFunds + "'" + FullExcessLiquidity " is 246.
Long Statement,IBApi,AccountSummaryTags,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\AccountSummaryTags.cs,GetAllTags,The length of the statement  "                + "'" + LookAheadNextChange + "'" + LookAheadInitMarginReq + "'" + LookAheadMaintMarginReq + "'" + LookAheadAvailableFunds + "'" + LookAheadExcessLiquidity + "'" + HighestSeverity + "'" + DayTradesRemaining + "'" + Leverage; " is 224.
Long Statement,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,calculateOptionPrice,The length of the statement  "                !CheckServerVersion(MinServerVer.REQ_CALC_OPTION_PRICE' " It does not support tradingClass parameter in calculateOptionPrice.")) " is 128.
Long Statement,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,exerciseOptions,The length of the statement  "                !CheckServerVersion(MinServerVer.TRADING_CLASS' " It does not support conId not tradingClass parameter when exercising options.")) " is 130.
Long Statement,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,placeOrder,The length of the statement  "            if (serverVersion >= MinServerVer.SCALE_ORDERS3 && order.ScalePriceIncrement > 0.0 && order.ScalePriceIncrement != Double.MaxValue) " is 131.
Long Statement,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqContractDetails,The length of the statement  "                if (!CheckServerVersion(reqId' MinServerVer.TRADING_CLASS' " It does not support the TradingClass parameter when requesting contract details.")) " is 144.
Long Statement,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqHistoricalData,The length of the statement  "                if (!CheckServerVersion(tickerId' MinServerVer.TRADING_CLASS' " It does not support conId nor trading class parameters when requesting historical data.")) " is 154.
Long Statement,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqMarketDepth,The length of the statement  "                if (!CheckServerVersion(tickerId' MinServerVer.TRADING_CLASS' " It does not support ConId nor TradingClass parameters in reqMktDepth.")) " is 136.
Long Statement,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqRealTimeBars,The length of the statement  "                if (!CheckServerVersion(tickerId'  MinServerVer.TRADING_CLASS' " It does not support ConId nor TradingClass parameters in reqRealTimeBars.")) " is 141.
Long Statement,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,TickEFPEvent,The length of the statement  "            parent.Wrapper.tickEFP(requestId' tickType' basisPoints' formattedBasisPoints' impliedFuturesPrice' holdDays' futureExpiry' dividendImpact' dividendsToExpiry); " is 159.
Long Statement,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,TickOptionComputationEvent,The length of the statement  "            parent.Wrapper.tickOptionComputation(requestId' tickType' impliedVolatility' delta' optPrice' pvDividend' gamma' vega' theta' undPrice); " is 136.
Long Statement,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OrderStatusEvent,The length of the statement  "            parent.Wrapper.orderStatus(id' status' filled' remaining' avgFillPrice' permId' parentId' lastFillPrice' clientId' whyHeld); " is 124.
Long Statement,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,ReadDoubleMax,The length of the statement  "            return (str == null || str.Length == 0) ? Double.MaxValue : Double.Parse(str' System.Globalization.NumberFormatInfo.InvariantInfo); " is 131.
Complex Conditional,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,VerifyOrder,The conditional expression  "order.DeltaNeutralConId > 0                          || !IsEmpty(order.DeltaNeutralSettlingFirm)                          || !IsEmpty(order.DeltaNeutralClearingAccount)                          || !IsEmpty(order.DeltaNeutralClearingIntent)"  is complex.
Complex Conditional,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,VerifyOrder,The conditional expression  "!IsEmpty(order.DeltaNeutralOpenClose)                          || order.DeltaNeutralShortSale                          || order.DeltaNeutralShortSaleSlot > 0                          || !IsEmpty(order.DeltaNeutralDesignatedLocation)"  is complex.
Complex Conditional,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,VerifyOrder,The conditional expression  "order.ScalePriceAdjustValue != Double.MaxValue ||                          order.ScalePriceAdjustInterval != Int32.MaxValue ||                          order.ScaleProfitOffset != Double.MaxValue ||                          order.ScaleAutoReset ||                          order.ScaleInitPosition != Int32.MaxValue ||                          order.ScaleInitFillQty != Int32.MaxValue ||                          order.ScaleRandomPercent"  is complex.
Complex Conditional,IBApi,Order,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\Order.cs,Equals,The conditional expression  "OrderId != l_theOther.OrderId ||                  ClientId != l_theOther.ClientId ||                  TotalQuantity != l_theOther.TotalQuantity ||                  LmtPrice != l_theOther.LmtPrice ||                  AuxPrice != l_theOther.AuxPrice ||                  OcaType != l_theOther.OcaType ||                  Transmit != l_theOther.Transmit ||                  ParentId != l_theOther.ParentId ||                  BlockOrder != l_theOther.BlockOrder ||                  SweepToFill != l_theOther.SweepToFill ||                  DisplaySize != l_theOther.DisplaySize ||                  TriggerMethod != l_theOther.TriggerMethod ||                  OutsideRth != l_theOther.OutsideRth ||                  Hidden != l_theOther.Hidden ||                  OverridePercentageConstraints != l_theOther.OverridePercentageConstraints ||                  AllOrNone != l_theOther.AllOrNone ||                  MinQty != l_theOther.MinQty ||                  PercentOffset != l_theOther.PercentOffset ||                  TrailStopPrice != l_theOther.TrailStopPrice ||                  TrailingPercent != l_theOther.TrailingPercent ||                  Origin != l_theOther.Origin ||                  ShortSaleSlot != l_theOther.ShortSaleSlot ||                  DiscretionaryAmt != l_theOther.DiscretionaryAmt ||                  ETradeOnly != l_theOther.ETradeOnly ||                  FirmQuoteOnly != l_theOther.FirmQuoteOnly ||                  NbboPriceCap != l_theOther.NbboPriceCap ||                  OptOutSmartRouting != l_theOther.OptOutSmartRouting ||                  AuctionStrategy != l_theOther.AuctionStrategy ||                  StartingPrice != l_theOther.StartingPrice ||                  StockRefPrice != l_theOther.StockRefPrice ||                  Delta != l_theOther.Delta ||                  StockRangeLower != l_theOther.StockRangeLower ||                  StockRangeUpper != l_theOther.StockRangeUpper ||                  Volatility != l_theOther.Volatility ||                  VolatilityType != l_theOther.VolatilityType ||                  ContinuousUpdate != l_theOther.ContinuousUpdate ||                  ReferencePriceType != l_theOther.ReferencePriceType ||                  DeltaNeutralAuxPrice != l_theOther.DeltaNeutralAuxPrice ||                  DeltaNeutralConId != l_theOther.DeltaNeutralConId ||                  DeltaNeutralShortSale != l_theOther.DeltaNeutralShortSale ||                  DeltaNeutralShortSaleSlot != l_theOther.DeltaNeutralShortSaleSlot ||                  BasisPoints != l_theOther.BasisPoints ||                  BasisPointsType != l_theOther.BasisPointsType ||                  ScaleInitLevelSize != l_theOther.ScaleInitLevelSize ||                  ScaleSubsLevelSize != l_theOther.ScaleSubsLevelSize ||                  ScalePriceIncrement != l_theOther.ScalePriceIncrement ||                  ScalePriceAdjustValue != l_theOther.ScalePriceAdjustValue ||                  ScalePriceAdjustInterval != l_theOther.ScalePriceAdjustInterval ||                  ScaleProfitOffset != l_theOther.ScaleProfitOffset ||                  ScaleAutoReset != l_theOther.ScaleAutoReset ||                  ScaleInitPosition != l_theOther.ScaleInitPosition ||                  ScaleInitFillQty != l_theOther.ScaleInitFillQty ||                  ScaleRandomPercent != l_theOther.ScaleRandomPercent ||                  WhatIf != l_theOther.WhatIf ||                  NotHeld != l_theOther.NotHeld ||                  ExemptCode != l_theOther.ExemptCode"  is complex.
Complex Conditional,IBApi,Order,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\Order.cs,Equals,The conditional expression  "Util.StringCompare(Action' l_theOther.Action) != 0 ||                  Util.StringCompare(OrderType' l_theOther.OrderType) != 0 ||                  Util.StringCompare(Tif' l_theOther.Tif) != 0 ||                  Util.StringCompare(ActiveStartTime' l_theOther.ActiveStartTime) != 0 ||                  Util.StringCompare(ActiveStopTime' l_theOther.ActiveStopTime) != 0 ||                  Util.StringCompare(OcaGroup' l_theOther.OcaGroup) != 0 ||                  Util.StringCompare(OrderRef' l_theOther.OrderRef) != 0 ||                  Util.StringCompare(GoodAfterTime' l_theOther.GoodAfterTime) != 0 ||                  Util.StringCompare(GoodTillDate' l_theOther.GoodTillDate) != 0 ||                  Util.StringCompare(Rule80A' l_theOther.Rule80A) != 0 ||                  Util.StringCompare(FaGroup' l_theOther.FaGroup) != 0 ||                  Util.StringCompare(FaProfile' l_theOther.FaProfile) != 0 ||                  Util.StringCompare(FaMethod' l_theOther.FaMethod) != 0 ||                  Util.StringCompare(FaPercentage' l_theOther.FaPercentage) != 0 ||                  Util.StringCompare(OpenClose' l_theOther.OpenClose) != 0 ||                  Util.StringCompare(DesignatedLocation' l_theOther.DesignatedLocation) != 0 ||                  Util.StringCompare(DeltaNeutralOrderType' l_theOther.DeltaNeutralOrderType) != 0 ||                  Util.StringCompare(DeltaNeutralSettlingFirm' l_theOther.DeltaNeutralSettlingFirm) != 0 ||                  Util.StringCompare(DeltaNeutralClearingAccount' l_theOther.DeltaNeutralClearingAccount) != 0 ||                  Util.StringCompare(DeltaNeutralClearingIntent' l_theOther.DeltaNeutralClearingIntent) != 0 ||                  Util.StringCompare(DeltaNeutralOpenClose' l_theOther.DeltaNeutralOpenClose) != 0 ||                  Util.StringCompare(DeltaNeutralDesignatedLocation' l_theOther.DeltaNeutralDesignatedLocation) != 0 ||                  Util.StringCompare(HedgeType' l_theOther.HedgeType) != 0 ||                  Util.StringCompare(HedgeParam' l_theOther.HedgeParam) != 0 ||                  Util.StringCompare(Account' l_theOther.Account) != 0 ||                  Util.StringCompare(SettlingFirm' l_theOther.SettlingFirm) != 0 ||                  Util.StringCompare(ClearingAccount' l_theOther.ClearingAccount) != 0 ||                  Util.StringCompare(ClearingIntent' l_theOther.ClearingIntent) != 0 ||                  Util.StringCompare(AlgoStrategy' l_theOther.AlgoStrategy) != 0 ||                  Util.StringCompare(ScaleTable' l_theOther.ScaleTable) != 0"  is complex.
Complex Conditional,IBApi,OrderState,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\OrderState.cs,Equals,The conditional expression  "Util.StringCompare(status' state.status) != 0 ||                  Util.StringCompare(initMargin' state.initMargin) != 0 ||                  Util.StringCompare(maintMargin' state.maintMargin) != 0 ||                  Util.StringCompare(equityWithLoan' state.equityWithLoan) != 0 ||                  Util.StringCompare(commissionCurrency' state.commissionCurrency) != 0"  is complex.
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,eConnect,The following statement contains a magic number: try              {                  tcpClient = new TcpClient(host' port);                  tcpClientStream = tcpClient.GetStream();                  tcpWriter = new BinaryWriter(tcpClientStream);                    reader = new EReader(this' new BinaryReader(tcpClientStream));                    try                  {                      tcpWriter.Write(UTF8Encoding.UTF8.GetBytes(Constants.ClientVersion.ToString()));                      tcpWriter.Write(Constants.EOL);                  }                  catch (IOException)                  {                      wrapper.error("Could not establish connection. Make sure the TWS is enabled to accept socket clients!");                      throw;                  }                  // Receive the response from the remote device.                  serverVersion = reader.ReadInt();                  if (!CheckServerVersion(MinServerVer.MIN_VERSION' ""))                  {                      ReportUpdateTWS("");                      return;                  }                    if (serverVersion >= 20)                  {                      string twsTime = reader.ReadString();                      Console.WriteLine("TWS time: " + twsTime);                  }                  if (serverVersion >= 3)                  {                      tcpWriter.Write(UTF8Encoding.UTF8.GetBytes(clientId.ToString()));                      tcpWriter.Write(Constants.EOL);                  }                  reader.Start();                  while (!reader.IsAlive()) ;                  isConnected = true;                }              catch (ArgumentNullException ane)              {                  wrapper.error(ane);              }              catch (SocketException se)              {                  wrapper.error(se);              }              catch (Exception e)              {                  wrapper.error(e);              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,eConnect,The following statement contains a magic number: try              {                  tcpClient = new TcpClient(host' port);                  tcpClientStream = tcpClient.GetStream();                  tcpWriter = new BinaryWriter(tcpClientStream);                    reader = new EReader(this' new BinaryReader(tcpClientStream));                    try                  {                      tcpWriter.Write(UTF8Encoding.UTF8.GetBytes(Constants.ClientVersion.ToString()));                      tcpWriter.Write(Constants.EOL);                  }                  catch (IOException)                  {                      wrapper.error("Could not establish connection. Make sure the TWS is enabled to accept socket clients!");                      throw;                  }                  // Receive the response from the remote device.                  serverVersion = reader.ReadInt();                  if (!CheckServerVersion(MinServerVer.MIN_VERSION' ""))                  {                      ReportUpdateTWS("");                      return;                  }                    if (serverVersion >= 20)                  {                      string twsTime = reader.ReadString();                      Console.WriteLine("TWS time: " + twsTime);                  }                  if (serverVersion >= 3)                  {                      tcpWriter.Write(UTF8Encoding.UTF8.GetBytes(clientId.ToString()));                      tcpWriter.Write(Constants.EOL);                  }                  reader.Start();                  while (!reader.IsAlive()) ;                  isConnected = true;                }              catch (ArgumentNullException ane)              {                  wrapper.error(ane);              }              catch (SocketException se)              {                  wrapper.error(se);              }              catch (Exception e)              {                  wrapper.error(e);              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,cancelHistoricalData,The following statement contains a magic number: if (!CheckServerVersion(24' " It does not support historical data cancelations."))                  return;
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,calculateImpliedVolatility,The following statement contains a magic number: const int version = 2;
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,calculateOptionPrice,The following statement contains a magic number: const int version = 2;
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,exerciseOptions,The following statement contains a magic number: if (!CheckServerVersion(21' " It does not support options exercise from the API."))                  return;
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,exerciseOptions,The following statement contains a magic number: int VERSION = 2;
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,placeOrder,The following statement contains a magic number: int MsgVersion = (serverVersion < MinServerVer.NOT_HELD ) ? 27 : 41;
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,placeOrder,The following statement contains a magic number: int MsgVersion = (serverVersion < MinServerVer.NOT_HELD ) ? 27 : 41;
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,placeOrder,The following statement contains a magic number: if (serverVersion >= 15)              {                  paramsList.AddParameter(contract.Multiplier);              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,placeOrder,The following statement contains a magic number: if (serverVersion >= 14)              {                  paramsList.AddParameter(contract.PrimaryExch);              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,placeOrder,The following statement contains a magic number: if (serverVersion >= 2)              {                  paramsList.AddParameter(contract.LocalSymbol);              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,placeOrder,The following statement contains a magic number: if (serverVersion >= 4)              {                  paramsList.AddParameter(order.ParentId);              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,placeOrder,The following statement contains a magic number: if (serverVersion >= 5)              {                  paramsList.AddParameter(order.BlockOrder);                  paramsList.AddParameter(order.SweepToFill);                  paramsList.AddParameter(order.DisplaySize);                  paramsList.AddParameter(order.TriggerMethod);                  if (serverVersion < 38)                  {                      // will never happen                      paramsList.AddParameter(/* order.ignoreRth */ false);                  }                  else                  {                      paramsList.AddParameter(order.OutsideRth);                  }              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,placeOrder,The following statement contains a magic number: if (serverVersion >= 5)              {                  paramsList.AddParameter(order.BlockOrder);                  paramsList.AddParameter(order.SweepToFill);                  paramsList.AddParameter(order.DisplaySize);                  paramsList.AddParameter(order.TriggerMethod);                  if (serverVersion < 38)                  {                      // will never happen                      paramsList.AddParameter(/* order.ignoreRth */ false);                  }                  else                  {                      paramsList.AddParameter(order.OutsideRth);                  }              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,placeOrder,The following statement contains a magic number: if (serverVersion >= 7)              {                  paramsList.AddParameter(order.Hidden);              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,placeOrder,The following statement contains a magic number: if (serverVersion >= 8 && isBag)              {                  if (contract.ComboLegs == null)                  {                      paramsList.AddParameter(0);                  }                  else                  {                      paramsList.AddParameter(contract.ComboLegs.Count);                        ComboLeg comboLeg;                      for (int i = 0; i < contract.ComboLegs.Count; i++)                      {                          comboLeg = (ComboLeg)contract.ComboLegs[i];                          paramsList.AddParameter(comboLeg.ConId);                          paramsList.AddParameter(comboLeg.Ratio);                          paramsList.AddParameter(comboLeg.Action);                          paramsList.AddParameter(comboLeg.Exchange);                          paramsList.AddParameter(comboLeg.OpenClose);                            if (serverVersion >= MinServerVer.SSHORT_COMBO_LEGS)                          {                              paramsList.AddParameter(comboLeg.ShortSaleSlot);                              paramsList.AddParameter(comboLeg.DesignatedLocation);                          }                          if (serverVersion >= MinServerVer.SSHORTX_OLD)                          {                              paramsList.AddParameter(comboLeg.ExemptCode);                          }                      }                  }              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,placeOrder,The following statement contains a magic number: if (serverVersion >= 9)              {                  // paramsList.AddParameter deprecated sharesAllocation field                  paramsList.AddParameter("");              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,placeOrder,The following statement contains a magic number: if (serverVersion >= 10)              {                  paramsList.AddParameter(order.DiscretionaryAmt);              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,placeOrder,The following statement contains a magic number: if (serverVersion >= 11)              {                  paramsList.AddParameter(order.GoodAfterTime);              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,placeOrder,The following statement contains a magic number: if (serverVersion >= 12)              {                  paramsList.AddParameter(order.GoodTillDate);              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,placeOrder,The following statement contains a magic number: if (serverVersion >= 13)              {                  paramsList.AddParameter(order.FaGroup);                  paramsList.AddParameter(order.FaMethod);                  paramsList.AddParameter(order.FaPercentage);                  paramsList.AddParameter(order.FaProfile);              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,placeOrder,The following statement contains a magic number: if (serverVersion >= 18)              { // institutional short sale slot fields.                  paramsList.AddParameter(order.ShortSaleSlot);      // 0 only for retail' 1 or 2 only for institution.                  paramsList.AddParameter(order.DesignatedLocation); // only populate when order.shortSaleSlot = 2.              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,placeOrder,The following statement contains a magic number: if (serverVersion >= 19)              {                  paramsList.AddParameter(order.OcaType);                  if (serverVersion < 38)                  {                      // will never happen                      paramsList.AddParameter( /* order.rthOnly */ false);                  }                  paramsList.AddParameter(order.Rule80A);                  paramsList.AddParameter(order.SettlingFirm);                  paramsList.AddParameter(order.AllOrNone);                  paramsList.AddParameterMax(order.MinQty);                  paramsList.AddParameterMax(order.PercentOffset);                  paramsList.AddParameter(order.ETradeOnly);                  paramsList.AddParameter(order.FirmQuoteOnly);                  paramsList.AddParameterMax(order.NbboPriceCap);                  paramsList.AddParameterMax(order.AuctionStrategy);                  paramsList.AddParameterMax(order.StartingPrice);                  paramsList.AddParameterMax(order.StockRefPrice);                  paramsList.AddParameterMax(order.Delta);                  // Volatility orders had specific watermark price attribs in server version 26                  double lower = (serverVersion == 26 && order.OrderType.Equals("VOL"))                       ? Double.MaxValue                       : order.StockRangeLower;                  double upper = (serverVersion == 26 && order.OrderType.Equals("VOL"))                       ? Double.MaxValue                       : order.StockRangeUpper;                  paramsList.AddParameterMax(lower);                  paramsList.AddParameterMax(upper);              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,placeOrder,The following statement contains a magic number: if (serverVersion >= 19)              {                  paramsList.AddParameter(order.OcaType);                  if (serverVersion < 38)                  {                      // will never happen                      paramsList.AddParameter( /* order.rthOnly */ false);                  }                  paramsList.AddParameter(order.Rule80A);                  paramsList.AddParameter(order.SettlingFirm);                  paramsList.AddParameter(order.AllOrNone);                  paramsList.AddParameterMax(order.MinQty);                  paramsList.AddParameterMax(order.PercentOffset);                  paramsList.AddParameter(order.ETradeOnly);                  paramsList.AddParameter(order.FirmQuoteOnly);                  paramsList.AddParameterMax(order.NbboPriceCap);                  paramsList.AddParameterMax(order.AuctionStrategy);                  paramsList.AddParameterMax(order.StartingPrice);                  paramsList.AddParameterMax(order.StockRefPrice);                  paramsList.AddParameterMax(order.Delta);                  // Volatility orders had specific watermark price attribs in server version 26                  double lower = (serverVersion == 26 && order.OrderType.Equals("VOL"))                       ? Double.MaxValue                       : order.StockRangeLower;                  double upper = (serverVersion == 26 && order.OrderType.Equals("VOL"))                       ? Double.MaxValue                       : order.StockRangeUpper;                  paramsList.AddParameterMax(lower);                  paramsList.AddParameterMax(upper);              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,placeOrder,The following statement contains a magic number: if (serverVersion >= 19)              {                  paramsList.AddParameter(order.OcaType);                  if (serverVersion < 38)                  {                      // will never happen                      paramsList.AddParameter( /* order.rthOnly */ false);                  }                  paramsList.AddParameter(order.Rule80A);                  paramsList.AddParameter(order.SettlingFirm);                  paramsList.AddParameter(order.AllOrNone);                  paramsList.AddParameterMax(order.MinQty);                  paramsList.AddParameterMax(order.PercentOffset);                  paramsList.AddParameter(order.ETradeOnly);                  paramsList.AddParameter(order.FirmQuoteOnly);                  paramsList.AddParameterMax(order.NbboPriceCap);                  paramsList.AddParameterMax(order.AuctionStrategy);                  paramsList.AddParameterMax(order.StartingPrice);                  paramsList.AddParameterMax(order.StockRefPrice);                  paramsList.AddParameterMax(order.Delta);                  // Volatility orders had specific watermark price attribs in server version 26                  double lower = (serverVersion == 26 && order.OrderType.Equals("VOL"))                       ? Double.MaxValue                       : order.StockRangeLower;                  double upper = (serverVersion == 26 && order.OrderType.Equals("VOL"))                       ? Double.MaxValue                       : order.StockRangeUpper;                  paramsList.AddParameterMax(lower);                  paramsList.AddParameterMax(upper);              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,placeOrder,The following statement contains a magic number: if (serverVersion >= 19)              {                  paramsList.AddParameter(order.OcaType);                  if (serverVersion < 38)                  {                      // will never happen                      paramsList.AddParameter( /* order.rthOnly */ false);                  }                  paramsList.AddParameter(order.Rule80A);                  paramsList.AddParameter(order.SettlingFirm);                  paramsList.AddParameter(order.AllOrNone);                  paramsList.AddParameterMax(order.MinQty);                  paramsList.AddParameterMax(order.PercentOffset);                  paramsList.AddParameter(order.ETradeOnly);                  paramsList.AddParameter(order.FirmQuoteOnly);                  paramsList.AddParameterMax(order.NbboPriceCap);                  paramsList.AddParameterMax(order.AuctionStrategy);                  paramsList.AddParameterMax(order.StartingPrice);                  paramsList.AddParameterMax(order.StockRefPrice);                  paramsList.AddParameterMax(order.Delta);                  // Volatility orders had specific watermark price attribs in server version 26                  double lower = (serverVersion == 26 && order.OrderType.Equals("VOL"))                       ? Double.MaxValue                       : order.StockRangeLower;                  double upper = (serverVersion == 26 && order.OrderType.Equals("VOL"))                       ? Double.MaxValue                       : order.StockRangeUpper;                  paramsList.AddParameterMax(lower);                  paramsList.AddParameterMax(upper);              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,placeOrder,The following statement contains a magic number: if (serverVersion >= 22)              {                  paramsList.AddParameter(order.OverridePercentageConstraints);              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,placeOrder,The following statement contains a magic number: if (serverVersion >= 26)              { // Volatility orders                  paramsList.AddParameterMax(order.Volatility);                  paramsList.AddParameterMax(order.VolatilityType);                  if (serverVersion < 28)                  {                      bool isDeltaNeutralTypeMKT = (String.Compare("MKT"' order.DeltaNeutralOrderType' true) == 0);                      paramsList.AddParameter(isDeltaNeutralTypeMKT);                  }                  else                  {                      paramsList.AddParameter(order.DeltaNeutralOrderType);                      paramsList.AddParameterMax(order.DeltaNeutralAuxPrice);                        if (serverVersion >= MinServerVer.DELTA_NEUTRAL_CONID && !IsEmpty(order.DeltaNeutralOrderType))                      {                          paramsList.AddParameter(order.DeltaNeutralConId);                          paramsList.AddParameter(order.DeltaNeutralSettlingFirm);                          paramsList.AddParameter(order.DeltaNeutralClearingAccount);                          paramsList.AddParameter(order.DeltaNeutralClearingIntent);                      }                        if (serverVersion >= MinServerVer.DELTA_NEUTRAL_OPEN_CLOSE && !IsEmpty(order.DeltaNeutralOrderType))                      {                          paramsList.AddParameter(order.DeltaNeutralOpenClose);                          paramsList.AddParameter(order.DeltaNeutralShortSale);                          paramsList.AddParameter(order.DeltaNeutralShortSaleSlot);                          paramsList.AddParameter(order.DeltaNeutralDesignatedLocation);                      }                  }                  paramsList.AddParameter(order.ContinuousUpdate);                  if (serverVersion == 26)                  {                      // Volatility orders had specific watermark price attribs in server version 26                      double lower = order.OrderType.Equals("VOL") ? order.StockRangeLower : Double.MaxValue;                      double upper = order.OrderType.Equals("VOL") ? order.StockRangeUpper : Double.MaxValue;                      paramsList.AddParameterMax(lower);                      paramsList.AddParameterMax(upper);                  }                  paramsList.AddParameterMax(order.ReferencePriceType);              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,placeOrder,The following statement contains a magic number: if (serverVersion >= 26)              { // Volatility orders                  paramsList.AddParameterMax(order.Volatility);                  paramsList.AddParameterMax(order.VolatilityType);                  if (serverVersion < 28)                  {                      bool isDeltaNeutralTypeMKT = (String.Compare("MKT"' order.DeltaNeutralOrderType' true) == 0);                      paramsList.AddParameter(isDeltaNeutralTypeMKT);                  }                  else                  {                      paramsList.AddParameter(order.DeltaNeutralOrderType);                      paramsList.AddParameterMax(order.DeltaNeutralAuxPrice);                        if (serverVersion >= MinServerVer.DELTA_NEUTRAL_CONID && !IsEmpty(order.DeltaNeutralOrderType))                      {                          paramsList.AddParameter(order.DeltaNeutralConId);                          paramsList.AddParameter(order.DeltaNeutralSettlingFirm);                          paramsList.AddParameter(order.DeltaNeutralClearingAccount);                          paramsList.AddParameter(order.DeltaNeutralClearingIntent);                      }                        if (serverVersion >= MinServerVer.DELTA_NEUTRAL_OPEN_CLOSE && !IsEmpty(order.DeltaNeutralOrderType))                      {                          paramsList.AddParameter(order.DeltaNeutralOpenClose);                          paramsList.AddParameter(order.DeltaNeutralShortSale);                          paramsList.AddParameter(order.DeltaNeutralShortSaleSlot);                          paramsList.AddParameter(order.DeltaNeutralDesignatedLocation);                      }                  }                  paramsList.AddParameter(order.ContinuousUpdate);                  if (serverVersion == 26)                  {                      // Volatility orders had specific watermark price attribs in server version 26                      double lower = order.OrderType.Equals("VOL") ? order.StockRangeLower : Double.MaxValue;                      double upper = order.OrderType.Equals("VOL") ? order.StockRangeUpper : Double.MaxValue;                      paramsList.AddParameterMax(lower);                      paramsList.AddParameterMax(upper);                  }                  paramsList.AddParameterMax(order.ReferencePriceType);              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,placeOrder,The following statement contains a magic number: if (serverVersion >= 26)              { // Volatility orders                  paramsList.AddParameterMax(order.Volatility);                  paramsList.AddParameterMax(order.VolatilityType);                  if (serverVersion < 28)                  {                      bool isDeltaNeutralTypeMKT = (String.Compare("MKT"' order.DeltaNeutralOrderType' true) == 0);                      paramsList.AddParameter(isDeltaNeutralTypeMKT);                  }                  else                  {                      paramsList.AddParameter(order.DeltaNeutralOrderType);                      paramsList.AddParameterMax(order.DeltaNeutralAuxPrice);                        if (serverVersion >= MinServerVer.DELTA_NEUTRAL_CONID && !IsEmpty(order.DeltaNeutralOrderType))                      {                          paramsList.AddParameter(order.DeltaNeutralConId);                          paramsList.AddParameter(order.DeltaNeutralSettlingFirm);                          paramsList.AddParameter(order.DeltaNeutralClearingAccount);                          paramsList.AddParameter(order.DeltaNeutralClearingIntent);                      }                        if (serverVersion >= MinServerVer.DELTA_NEUTRAL_OPEN_CLOSE && !IsEmpty(order.DeltaNeutralOrderType))                      {                          paramsList.AddParameter(order.DeltaNeutralOpenClose);                          paramsList.AddParameter(order.DeltaNeutralShortSale);                          paramsList.AddParameter(order.DeltaNeutralShortSaleSlot);                          paramsList.AddParameter(order.DeltaNeutralDesignatedLocation);                      }                  }                  paramsList.AddParameter(order.ContinuousUpdate);                  if (serverVersion == 26)                  {                      // Volatility orders had specific watermark price attribs in server version 26                      double lower = order.OrderType.Equals("VOL") ? order.StockRangeLower : Double.MaxValue;                      double upper = order.OrderType.Equals("VOL") ? order.StockRangeUpper : Double.MaxValue;                      paramsList.AddParameterMax(lower);                      paramsList.AddParameterMax(upper);                  }                  paramsList.AddParameterMax(order.ReferencePriceType);              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,placeOrder,The following statement contains a magic number: if (serverVersion >= 30)              { // TRAIL_STOP_LIMIT stop price                  paramsList.AddParameterMax(order.TrailStopPrice);              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqAccountUpdates,The following statement contains a magic number: int VERSION = 2;
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqAccountUpdates,The following statement contains a magic number: if (serverVersion >= 9)                  paramsList.AddParameter(acctCode);
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqContractDetails,The following statement contains a magic number: int VERSION = 7;
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqContractDetails,The following statement contains a magic number: if (serverVersion >= 15)              {                  paramsList.AddParameter(contract.Multiplier);              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqContractDetails,The following statement contains a magic number: if (serverVersion >= 31)              {                  paramsList.AddParameter(contract.IncludeExpired);              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqExecutions,The following statement contains a magic number: int VERSION = 3;
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqExecutions,The following statement contains a magic number: if (serverVersion >= 9)              {                  paramsList.AddParameter(filter.ClientId);                  paramsList.AddParameter(filter.AcctCode);                    // Note that the valid format for time is "yyyymmdd-hh:mm:ss"                  paramsList.AddParameter(filter.Time);                  paramsList.AddParameter(filter.Symbol);                  paramsList.AddParameter(filter.SecType);                  paramsList.AddParameter(filter.Exchange);                  paramsList.AddParameter(filter.Side);              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqFundamentalData,The following statement contains a magic number: const int VERSION = 2;
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqHistoricalData,The following statement contains a magic number: if (!CheckServerVersion(tickerId' 16))                  return;
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqHistoricalData,The following statement contains a magic number: const int VERSION = 5;
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqMktData,The following statement contains a magic number: int version = 10;
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqMktData,The following statement contains a magic number: if (serverVersion >= 15)                  paramsList.AddParameter(contract.Multiplier);
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqMktData,The following statement contains a magic number: if (serverVersion >= 14)                  paramsList.AddParameter(contract.PrimaryExch);
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqMktData,The following statement contains a magic number: if (serverVersion >= 2)                  paramsList.AddParameter(contract.LocalSymbol);
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqMktData,The following statement contains a magic number: if (serverVersion >= 8 && Constants.BagSecType.Equals(contract.SecType))              {                  if (contract.ComboLegs == null)                  {                      paramsList.AddParameter(0);                  }                  else                  {                      paramsList.AddParameter(contract.ComboLegs.Count);                      for (int i = 0; i < contract.ComboLegs.Count; i++)                      {                          ComboLeg leg = contract.ComboLegs[i];                          paramsList.AddParameter(leg.ConId);                          paramsList.AddParameter(leg.Ratio);                          paramsList.AddParameter(leg.Action);                          paramsList.AddParameter(leg.Exchange);                      }                  }              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqMktData,The following statement contains a magic number: if (serverVersion >= 31)              {                  paramsList.AddParameter(genericTickList);              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqMarketDepth,The following statement contains a magic number: const int VERSION = 4;
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqMarketDepth,The following statement contains a magic number: if (serverVersion >= 15)              {                  paramsList.AddParameter(contract.Multiplier);              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqMarketDepth,The following statement contains a magic number: if (serverVersion >= 19)              {                  paramsList.AddParameter(numRows);              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqRealTimeBars,The following statement contains a magic number: const int VERSION = 2;
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqScannerSubscription,The following statement contains a magic number: const int VERSION = 3;
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqScannerSubscription,The following statement contains a magic number: if (serverVersion >= 25)              {                  paramsList.AddParameterMax(subscription.AverageOptionVolumeAbove);                  paramsList.AddParameter(subscription.ScannerSettingPairs);              }
Magic Number,IBApi,EClientSocket,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EClientSocket.cs,reqScannerSubscription,The following statement contains a magic number: if (serverVersion >= 27)              {                  paramsList.AddParameter(subscription.StockTypeFilter);              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,TickPriceEvent,The following statement contains a magic number: if (msgVersion >= 2)                  size = ReadInt();
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,TickPriceEvent,The following statement contains a magic number: if (msgVersion >= 3)                  canAutoExecute = ReadInt();
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,TickPriceEvent,The following statement contains a magic number: if (msgVersion >= 2)              {                  int sizeTickType = -1;//not a tick                  switch (tickType)                  {                      case 1:                          sizeTickType = 0;//BID_SIZE                          break;                      case 2:                          sizeTickType = 3;//ASK_SIZE                          break;                      case 4:                          sizeTickType = 5;//LAST_SIZE                          break;                  }                  if (sizeTickType != -1)                  {                      parent.Wrapper.tickSize(requestId' sizeTickType' size);                  }              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,TickPriceEvent,The following statement contains a magic number: if (msgVersion >= 2)              {                  int sizeTickType = -1;//not a tick                  switch (tickType)                  {                      case 1:                          sizeTickType = 0;//BID_SIZE                          break;                      case 2:                          sizeTickType = 3;//ASK_SIZE                          break;                      case 4:                          sizeTickType = 5;//LAST_SIZE                          break;                  }                  if (sizeTickType != -1)                  {                      parent.Wrapper.tickSize(requestId' sizeTickType' size);                  }              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,TickPriceEvent,The following statement contains a magic number: if (msgVersion >= 2)              {                  int sizeTickType = -1;//not a tick                  switch (tickType)                  {                      case 1:                          sizeTickType = 0;//BID_SIZE                          break;                      case 2:                          sizeTickType = 3;//ASK_SIZE                          break;                      case 4:                          sizeTickType = 5;//LAST_SIZE                          break;                  }                  if (sizeTickType != -1)                  {                      parent.Wrapper.tickSize(requestId' sizeTickType' size);                  }              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,TickPriceEvent,The following statement contains a magic number: if (msgVersion >= 2)              {                  int sizeTickType = -1;//not a tick                  switch (tickType)                  {                      case 1:                          sizeTickType = 0;//BID_SIZE                          break;                      case 2:                          sizeTickType = 3;//ASK_SIZE                          break;                      case 4:                          sizeTickType = 5;//LAST_SIZE                          break;                  }                  if (sizeTickType != -1)                  {                      parent.Wrapper.tickSize(requestId' sizeTickType' size);                  }              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,TickPriceEvent,The following statement contains a magic number: if (msgVersion >= 2)              {                  int sizeTickType = -1;//not a tick                  switch (tickType)                  {                      case 1:                          sizeTickType = 0;//BID_SIZE                          break;                      case 2:                          sizeTickType = 3;//ASK_SIZE                          break;                      case 4:                          sizeTickType = 5;//LAST_SIZE                          break;                  }                  if (sizeTickType != -1)                  {                      parent.Wrapper.tickSize(requestId' sizeTickType' size);                  }              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,ErrorEvent,The following statement contains a magic number: if (msgVersion < 2)              {                  string msg = ReadString();                  parent.Wrapper.error(msg);              }              else              {                  int id = ReadInt();                  int errorCode = ReadInt();                  string errorMsg = ReadString();                  parent.Wrapper.error(id' errorCode' errorMsg);              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,TickOptionComputationEvent,The following statement contains a magic number: if (msgVersion >= 6 || tickType == TickType.MODEL_OPTION)              {                  optPrice = ReadDouble();                  if (optPrice < 0)                  { // -1 is the "not yet computed" indicator                      optPrice = Double.MaxValue;                  }                  pvDividend = ReadDouble();                  if (pvDividend < 0)                  { // -1 is the "not yet computed" indicator                      pvDividend = Double.MaxValue;                  }              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,TickOptionComputationEvent,The following statement contains a magic number: if (msgVersion >= 6)              {                  gamma = ReadDouble();                  if (Math.Abs(gamma) > 1)                  { // -2 is the "not yet computed" indicator                      gamma = Double.MaxValue;                  }                  vega = ReadDouble();                  if (Math.Abs(vega) > 1)                  { // -2 is the "not yet computed" indicator                      vega = Double.MaxValue;                  }                  theta = ReadDouble();                  if (Math.Abs(theta) > 1)                  { // -2 is the "not yet computed" indicator                      theta = Double.MaxValue;                  }                  undPrice = ReadDouble();                  if (undPrice < 0)                  { // -1 is the "not yet computed" indicator                      undPrice = Double.MaxValue;                  }              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,AccountValueEvent,The following statement contains a magic number: if (msgVersion >= 2)                  accountName = ReadString();
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,BondContractDetailsEvent,The following statement contains a magic number: if (msgVersion >= 3)              {                  requestId = ReadInt();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,BondContractDetailsEvent,The following statement contains a magic number: if (msgVersion >= 2)              {                  contract.NextOptionDate = ReadString();                  contract.NextOptionType = ReadString();                  contract.NextOptionPartial = ReadBoolFromInt();                  contract.Notes = ReadString();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,BondContractDetailsEvent,The following statement contains a magic number: if (msgVersion >= 4)              {                  contract.LongName = ReadString();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,BondContractDetailsEvent,The following statement contains a magic number: if (msgVersion >= 6)              {                  contract.EvRule = ReadString();                  contract.EvMultiplier = ReadDouble();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,BondContractDetailsEvent,The following statement contains a magic number: if (msgVersion >= 5)              {                  int secIdListCount = ReadInt();                  if (secIdListCount > 0)                  {                      contract.SecIdList = new List<TagValue>();                      for (int i = 0; i < secIdListCount; ++i)                      {                          TagValue tagValue = new TagValue();                          tagValue.Tag = ReadString();                          tagValue.Value = ReadString();                          contract.SecIdList.Add(tagValue);                      }                  }              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,PortfolioValueEvent,The following statement contains a magic number: if (msgVersion >= 6)                  contract.ConId = ReadInt();
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,PortfolioValueEvent,The following statement contains a magic number: if (msgVersion >= 7)              {                  contract.Multiplier = ReadString();                  contract.PrimaryExch = ReadString();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,PortfolioValueEvent,The following statement contains a magic number: if (msgVersion >= 2)              {                  contract.LocalSymbol = ReadString();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,PortfolioValueEvent,The following statement contains a magic number: if (msgVersion >= 8)              {                  contract.TradingClass = ReadString();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,PortfolioValueEvent,The following statement contains a magic number: if (msgVersion >= 3)              {                  averageCost = ReadDouble();                  unrealizedPNL = ReadDouble();                  realizedPNL = ReadDouble();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,PortfolioValueEvent,The following statement contains a magic number: if (msgVersion >= 4)              {                  accountName = ReadString();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,PortfolioValueEvent,The following statement contains a magic number: if (msgVersion == 6 && parent.ServerVersion == 39)              {                  contract.PrimaryExch = ReadString();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,PortfolioValueEvent,The following statement contains a magic number: if (msgVersion == 6 && parent.ServerVersion == 39)              {                  contract.PrimaryExch = ReadString();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OrderStatusEvent,The following statement contains a magic number: if (msgVersion >= 2)              {                  permId = ReadInt();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OrderStatusEvent,The following statement contains a magic number: if (msgVersion >= 3)              {                  parentId = ReadInt();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OrderStatusEvent,The following statement contains a magic number: if (msgVersion >= 4)              {                  lastFillPrice = ReadDouble();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OrderStatusEvent,The following statement contains a magic number: if (msgVersion >= 5)              {                  clientId = ReadInt();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OrderStatusEvent,The following statement contains a magic number: if (msgVersion >= 6)              {                  whyHeld = ReadString();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 17)              {                  contract.ConId = ReadInt();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 32)              {                  contract.Multiplier = ReadString();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 2)              {                  contract.LocalSymbol = ReadString();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 32)              {                  contract.TradingClass = ReadString();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion < 29)              {                  order.LmtPrice = ReadDouble();              }              else              {                  order.LmtPrice = ReadDoubleMax();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion < 30)              {                  order.AuxPrice = ReadDouble();              }              else              {                  order.AuxPrice = ReadDoubleMax();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 3)              {                  order.ClientId = ReadInt();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 4)              {                  order.PermId = ReadInt();                  if (msgVersion < 18)                  {                      // will never happen                      /* order.ignoreRth = */                      ReadBoolFromInt();                  }                  else                  {                      order.OutsideRth = ReadBoolFromInt();                  }                  order.Hidden = ReadInt() == 1;                  order.DiscretionaryAmt = ReadDouble();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 4)              {                  order.PermId = ReadInt();                  if (msgVersion < 18)                  {                      // will never happen                      /* order.ignoreRth = */                      ReadBoolFromInt();                  }                  else                  {                      order.OutsideRth = ReadBoolFromInt();                  }                  order.Hidden = ReadInt() == 1;                  order.DiscretionaryAmt = ReadDouble();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 5)              {                  order.GoodAfterTime = ReadString();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 6)              {                  // skip deprecated sharesAllocation field                  ReadString();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 7)              {                  order.FaGroup = ReadString();                  order.FaMethod = ReadString();                  order.FaPercentage = ReadString();                  order.FaProfile = ReadString();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 8)              {                  order.GoodTillDate = ReadString();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 9)              {                  order.Rule80A = ReadString();                  order.PercentOffset = ReadDoubleMax();                  order.SettlingFirm = ReadString();                  order.ShortSaleSlot = ReadInt();                  order.DesignatedLocation = ReadString();                  if (parent.ServerVersion == 51)                  {                      ReadInt(); // exemptCode                  }                  else if (msgVersion >= 23)                  {                      order.ExemptCode = ReadInt();                  }                  order.AuctionStrategy = ReadInt();                  order.StartingPrice = ReadDoubleMax();                  order.StockRefPrice = ReadDoubleMax();                  order.Delta = ReadDoubleMax();                  order.StockRangeLower = ReadDoubleMax();                  order.StockRangeUpper = ReadDoubleMax();                  order.DisplaySize = ReadInt();                  if (msgVersion < 18)                  {                      // will never happen                      /* order.rthOnly = */                      ReadBoolFromInt();                  }                  order.BlockOrder = ReadBoolFromInt();                  order.SweepToFill = ReadBoolFromInt();                  order.AllOrNone = ReadBoolFromInt();                  order.MinQty = ReadIntMax();                  order.OcaType = ReadInt();                  order.ETradeOnly = ReadBoolFromInt();                  order.FirmQuoteOnly = ReadBoolFromInt();                  order.NbboPriceCap = ReadDoubleMax();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 9)              {                  order.Rule80A = ReadString();                  order.PercentOffset = ReadDoubleMax();                  order.SettlingFirm = ReadString();                  order.ShortSaleSlot = ReadInt();                  order.DesignatedLocation = ReadString();                  if (parent.ServerVersion == 51)                  {                      ReadInt(); // exemptCode                  }                  else if (msgVersion >= 23)                  {                      order.ExemptCode = ReadInt();                  }                  order.AuctionStrategy = ReadInt();                  order.StartingPrice = ReadDoubleMax();                  order.StockRefPrice = ReadDoubleMax();                  order.Delta = ReadDoubleMax();                  order.StockRangeLower = ReadDoubleMax();                  order.StockRangeUpper = ReadDoubleMax();                  order.DisplaySize = ReadInt();                  if (msgVersion < 18)                  {                      // will never happen                      /* order.rthOnly = */                      ReadBoolFromInt();                  }                  order.BlockOrder = ReadBoolFromInt();                  order.SweepToFill = ReadBoolFromInt();                  order.AllOrNone = ReadBoolFromInt();                  order.MinQty = ReadIntMax();                  order.OcaType = ReadInt();                  order.ETradeOnly = ReadBoolFromInt();                  order.FirmQuoteOnly = ReadBoolFromInt();                  order.NbboPriceCap = ReadDoubleMax();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 9)              {                  order.Rule80A = ReadString();                  order.PercentOffset = ReadDoubleMax();                  order.SettlingFirm = ReadString();                  order.ShortSaleSlot = ReadInt();                  order.DesignatedLocation = ReadString();                  if (parent.ServerVersion == 51)                  {                      ReadInt(); // exemptCode                  }                  else if (msgVersion >= 23)                  {                      order.ExemptCode = ReadInt();                  }                  order.AuctionStrategy = ReadInt();                  order.StartingPrice = ReadDoubleMax();                  order.StockRefPrice = ReadDoubleMax();                  order.Delta = ReadDoubleMax();                  order.StockRangeLower = ReadDoubleMax();                  order.StockRangeUpper = ReadDoubleMax();                  order.DisplaySize = ReadInt();                  if (msgVersion < 18)                  {                      // will never happen                      /* order.rthOnly = */                      ReadBoolFromInt();                  }                  order.BlockOrder = ReadBoolFromInt();                  order.SweepToFill = ReadBoolFromInt();                  order.AllOrNone = ReadBoolFromInt();                  order.MinQty = ReadIntMax();                  order.OcaType = ReadInt();                  order.ETradeOnly = ReadBoolFromInt();                  order.FirmQuoteOnly = ReadBoolFromInt();                  order.NbboPriceCap = ReadDoubleMax();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 9)              {                  order.Rule80A = ReadString();                  order.PercentOffset = ReadDoubleMax();                  order.SettlingFirm = ReadString();                  order.ShortSaleSlot = ReadInt();                  order.DesignatedLocation = ReadString();                  if (parent.ServerVersion == 51)                  {                      ReadInt(); // exemptCode                  }                  else if (msgVersion >= 23)                  {                      order.ExemptCode = ReadInt();                  }                  order.AuctionStrategy = ReadInt();                  order.StartingPrice = ReadDoubleMax();                  order.StockRefPrice = ReadDoubleMax();                  order.Delta = ReadDoubleMax();                  order.StockRangeLower = ReadDoubleMax();                  order.StockRangeUpper = ReadDoubleMax();                  order.DisplaySize = ReadInt();                  if (msgVersion < 18)                  {                      // will never happen                      /* order.rthOnly = */                      ReadBoolFromInt();                  }                  order.BlockOrder = ReadBoolFromInt();                  order.SweepToFill = ReadBoolFromInt();                  order.AllOrNone = ReadBoolFromInt();                  order.MinQty = ReadIntMax();                  order.OcaType = ReadInt();                  order.ETradeOnly = ReadBoolFromInt();                  order.FirmQuoteOnly = ReadBoolFromInt();                  order.NbboPriceCap = ReadDoubleMax();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 10)              {                  order.ParentId = ReadInt();                  order.TriggerMethod = ReadInt();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 11)              {                  order.Volatility = ReadDoubleMax();                  order.VolatilityType = ReadInt();                  if (msgVersion == 11)                  {                      int receivedInt = ReadInt();                      order.DeltaNeutralOrderType = ((receivedInt == 0) ? "NONE" : "MKT");                  }                  else                  { // msgVersion 12 and up                      order.DeltaNeutralOrderType = ReadString();                      order.DeltaNeutralAuxPrice = ReadDoubleMax();                        if (msgVersion >= 27 && !Util.StringIsEmpty(order.DeltaNeutralOrderType))                      {                          order.DeltaNeutralConId = ReadInt();                          order.DeltaNeutralSettlingFirm = ReadString();                          order.DeltaNeutralClearingAccount = ReadString();                          order.DeltaNeutralClearingIntent = ReadString();                      }                        if (msgVersion >= 31 && !Util.StringIsEmpty(order.DeltaNeutralOrderType))                      {                          order.DeltaNeutralOpenClose = ReadString();                          order.DeltaNeutralShortSale = ReadBoolFromInt();                          order.DeltaNeutralShortSaleSlot = ReadInt();                          order.DeltaNeutralDesignatedLocation = ReadString();                      }                  }                  order.ContinuousUpdate = ReadInt();                  if (parent.ServerVersion == 26)                  {                      order.StockRangeLower = ReadDouble();                      order.StockRangeUpper = ReadDouble();                  }                  order.ReferencePriceType = ReadInt();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 11)              {                  order.Volatility = ReadDoubleMax();                  order.VolatilityType = ReadInt();                  if (msgVersion == 11)                  {                      int receivedInt = ReadInt();                      order.DeltaNeutralOrderType = ((receivedInt == 0) ? "NONE" : "MKT");                  }                  else                  { // msgVersion 12 and up                      order.DeltaNeutralOrderType = ReadString();                      order.DeltaNeutralAuxPrice = ReadDoubleMax();                        if (msgVersion >= 27 && !Util.StringIsEmpty(order.DeltaNeutralOrderType))                      {                          order.DeltaNeutralConId = ReadInt();                          order.DeltaNeutralSettlingFirm = ReadString();                          order.DeltaNeutralClearingAccount = ReadString();                          order.DeltaNeutralClearingIntent = ReadString();                      }                        if (msgVersion >= 31 && !Util.StringIsEmpty(order.DeltaNeutralOrderType))                      {                          order.DeltaNeutralOpenClose = ReadString();                          order.DeltaNeutralShortSale = ReadBoolFromInt();                          order.DeltaNeutralShortSaleSlot = ReadInt();                          order.DeltaNeutralDesignatedLocation = ReadString();                      }                  }                  order.ContinuousUpdate = ReadInt();                  if (parent.ServerVersion == 26)                  {                      order.StockRangeLower = ReadDouble();                      order.StockRangeUpper = ReadDouble();                  }                  order.ReferencePriceType = ReadInt();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 11)              {                  order.Volatility = ReadDoubleMax();                  order.VolatilityType = ReadInt();                  if (msgVersion == 11)                  {                      int receivedInt = ReadInt();                      order.DeltaNeutralOrderType = ((receivedInt == 0) ? "NONE" : "MKT");                  }                  else                  { // msgVersion 12 and up                      order.DeltaNeutralOrderType = ReadString();                      order.DeltaNeutralAuxPrice = ReadDoubleMax();                        if (msgVersion >= 27 && !Util.StringIsEmpty(order.DeltaNeutralOrderType))                      {                          order.DeltaNeutralConId = ReadInt();                          order.DeltaNeutralSettlingFirm = ReadString();                          order.DeltaNeutralClearingAccount = ReadString();                          order.DeltaNeutralClearingIntent = ReadString();                      }                        if (msgVersion >= 31 && !Util.StringIsEmpty(order.DeltaNeutralOrderType))                      {                          order.DeltaNeutralOpenClose = ReadString();                          order.DeltaNeutralShortSale = ReadBoolFromInt();                          order.DeltaNeutralShortSaleSlot = ReadInt();                          order.DeltaNeutralDesignatedLocation = ReadString();                      }                  }                  order.ContinuousUpdate = ReadInt();                  if (parent.ServerVersion == 26)                  {                      order.StockRangeLower = ReadDouble();                      order.StockRangeUpper = ReadDouble();                  }                  order.ReferencePriceType = ReadInt();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 11)              {                  order.Volatility = ReadDoubleMax();                  order.VolatilityType = ReadInt();                  if (msgVersion == 11)                  {                      int receivedInt = ReadInt();                      order.DeltaNeutralOrderType = ((receivedInt == 0) ? "NONE" : "MKT");                  }                  else                  { // msgVersion 12 and up                      order.DeltaNeutralOrderType = ReadString();                      order.DeltaNeutralAuxPrice = ReadDoubleMax();                        if (msgVersion >= 27 && !Util.StringIsEmpty(order.DeltaNeutralOrderType))                      {                          order.DeltaNeutralConId = ReadInt();                          order.DeltaNeutralSettlingFirm = ReadString();                          order.DeltaNeutralClearingAccount = ReadString();                          order.DeltaNeutralClearingIntent = ReadString();                      }                        if (msgVersion >= 31 && !Util.StringIsEmpty(order.DeltaNeutralOrderType))                      {                          order.DeltaNeutralOpenClose = ReadString();                          order.DeltaNeutralShortSale = ReadBoolFromInt();                          order.DeltaNeutralShortSaleSlot = ReadInt();                          order.DeltaNeutralDesignatedLocation = ReadString();                      }                  }                  order.ContinuousUpdate = ReadInt();                  if (parent.ServerVersion == 26)                  {                      order.StockRangeLower = ReadDouble();                      order.StockRangeUpper = ReadDouble();                  }                  order.ReferencePriceType = ReadInt();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 11)              {                  order.Volatility = ReadDoubleMax();                  order.VolatilityType = ReadInt();                  if (msgVersion == 11)                  {                      int receivedInt = ReadInt();                      order.DeltaNeutralOrderType = ((receivedInt == 0) ? "NONE" : "MKT");                  }                  else                  { // msgVersion 12 and up                      order.DeltaNeutralOrderType = ReadString();                      order.DeltaNeutralAuxPrice = ReadDoubleMax();                        if (msgVersion >= 27 && !Util.StringIsEmpty(order.DeltaNeutralOrderType))                      {                          order.DeltaNeutralConId = ReadInt();                          order.DeltaNeutralSettlingFirm = ReadString();                          order.DeltaNeutralClearingAccount = ReadString();                          order.DeltaNeutralClearingIntent = ReadString();                      }                        if (msgVersion >= 31 && !Util.StringIsEmpty(order.DeltaNeutralOrderType))                      {                          order.DeltaNeutralOpenClose = ReadString();                          order.DeltaNeutralShortSale = ReadBoolFromInt();                          order.DeltaNeutralShortSaleSlot = ReadInt();                          order.DeltaNeutralDesignatedLocation = ReadString();                      }                  }                  order.ContinuousUpdate = ReadInt();                  if (parent.ServerVersion == 26)                  {                      order.StockRangeLower = ReadDouble();                      order.StockRangeUpper = ReadDouble();                  }                  order.ReferencePriceType = ReadInt();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 13)              {                  order.TrailStopPrice = ReadDoubleMax();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 30)              {                  order.TrailingPercent = ReadDoubleMax();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 14)              {                  order.BasisPoints = ReadDoubleMax();                  order.BasisPointsType = ReadIntMax();                  contract.ComboLegsDescription = ReadString();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 29)              {                  int comboLegsCount = ReadInt();                  if (comboLegsCount > 0)                  {                      contract.ComboLegs = new List<ComboLeg>(comboLegsCount);                      for (int i = 0; i < comboLegsCount; ++i)                      {                          int conId = ReadInt();                          int ratio = ReadInt();                          String action = ReadString();                          String exchange = ReadString();                          int openClose = ReadInt();                          int shortSaleSlot = ReadInt();                          String designatedLocation = ReadString();                          int exemptCode = ReadInt();                            ComboLeg comboLeg = new ComboLeg(conId' ratio' action' exchange' openClose'                                  shortSaleSlot' designatedLocation' exemptCode);                          contract.ComboLegs.Add(comboLeg);                      }                  }                    int orderComboLegsCount = ReadInt();                  if (orderComboLegsCount > 0)                  {                      order.OrderComboLegs = new List<OrderComboLeg>(orderComboLegsCount);                      for (int i = 0; i < orderComboLegsCount; ++i)                      {                          double price = ReadDoubleMax();                            OrderComboLeg orderComboLeg = new OrderComboLeg(price);                          order.OrderComboLegs.Add(orderComboLeg);                      }                  }              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 26)              {                  int smartComboRoutingParamsCount = ReadInt();                  if (smartComboRoutingParamsCount > 0)                  {                      order.SmartComboRoutingParams = new List<TagValue>(smartComboRoutingParamsCount);                      for (int i = 0; i < smartComboRoutingParamsCount; ++i)                      {                          TagValue tagValue = new TagValue();                          tagValue.Tag = ReadString();                          tagValue.Value = ReadString();                          order.SmartComboRoutingParams.Add(tagValue);                      }                  }              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 15)              {                  if (msgVersion >= 20)                  {                      order.ScaleInitLevelSize = ReadIntMax();                      order.ScaleSubsLevelSize = ReadIntMax();                  }                  else                  {                      /* int notSuppScaleNumComponents = */                      ReadIntMax();                      order.ScaleInitLevelSize = ReadIntMax();                  }                  order.ScalePriceIncrement = ReadDoubleMax();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 15)              {                  if (msgVersion >= 20)                  {                      order.ScaleInitLevelSize = ReadIntMax();                      order.ScaleSubsLevelSize = ReadIntMax();                  }                  else                  {                      /* int notSuppScaleNumComponents = */                      ReadIntMax();                      order.ScaleInitLevelSize = ReadIntMax();                  }                  order.ScalePriceIncrement = ReadDoubleMax();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 28 && order.ScalePriceIncrement > 0.0 && order.ScalePriceIncrement != Double.MaxValue)              {                  order.ScalePriceAdjustValue = ReadDoubleMax();                  order.ScalePriceAdjustInterval = ReadIntMax();                  order.ScaleProfitOffset = ReadDoubleMax();                  order.ScaleAutoReset = ReadBoolFromInt();                  order.ScaleInitPosition = ReadIntMax();                  order.ScaleInitFillQty = ReadIntMax();                  order.ScaleRandomPercent = ReadBoolFromInt();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 24)              {                  order.HedgeType = ReadString();                  if (!Util.StringIsEmpty(order.HedgeType))                  {                      order.HedgeParam = ReadString();                  }              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 25)              {                  order.OptOutSmartRouting = ReadBoolFromInt();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 19)              {                  order.ClearingAccount = ReadString();                  order.ClearingIntent = ReadString();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 22)              {                  order.NotHeld = ReadBoolFromInt();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 20)              {                  if (ReadBoolFromInt())                  {                      UnderComp underComp = new UnderComp();                      underComp.ConId = ReadInt();                      underComp.Delta = ReadDouble();                      underComp.Price = ReadDouble();                      contract.UnderComp = underComp;                  }              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 21)              {                  order.AlgoStrategy = ReadString();                  if (!Util.StringIsEmpty(order.AlgoStrategy))                  {                      int algoParamsCount = ReadInt();                      if (algoParamsCount > 0)                      {                          order.AlgoParams = new List<TagValue>(algoParamsCount);                          for (int i = 0; i < algoParamsCount; ++i)                          {                              TagValue tagValue = new TagValue();                              tagValue.Tag = ReadString();                              tagValue.Value = ReadString();                              order.AlgoParams.Add(tagValue);                          }                      }                  }              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,OpenOrderEvent,The following statement contains a magic number: if (msgVersion >= 16)              {                  order.WhatIf = ReadBoolFromInt();                  orderState.Status = ReadString();                  orderState.InitMargin = ReadString();                  orderState.MaintMargin = ReadString();                  orderState.EquityWithLoan = ReadString();                  orderState.Commission = ReadDoubleMax();                  orderState.MinCommission = ReadDoubleMax();                  orderState.MaxCommission = ReadDoubleMax();                  orderState.CommissionCurrency = ReadString();                  orderState.WarningText = ReadString();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,ContractDataEvent,The following statement contains a magic number: if (msgVersion >= 3)                  requestId = ReadInt();
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,ContractDataEvent,The following statement contains a magic number: if (msgVersion >= 2)              {                  contract.PriceMagnifier = ReadInt();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,ContractDataEvent,The following statement contains a magic number: if (msgVersion >= 4)              {                  contract.UnderConId = ReadInt();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,ContractDataEvent,The following statement contains a magic number: if (msgVersion >= 5)              {                  contract.LongName = ReadString();                  contract.Summary.PrimaryExch = ReadString();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,ContractDataEvent,The following statement contains a magic number: if (msgVersion >= 6)              {                  contract.ContractMonth = ReadString();                  contract.Industry = ReadString();                  contract.Category = ReadString();                  contract.Subcategory = ReadString();                  contract.TimeZoneId = ReadString();                  contract.TradingHours = ReadString();                  contract.LiquidHours = ReadString();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,ContractDataEvent,The following statement contains a magic number: if (msgVersion >= 8)              {                  contract.EvRule = ReadString();                  contract.EvMultiplier = ReadDouble();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,ContractDataEvent,The following statement contains a magic number: if (msgVersion >= 7)              {                  int secIdListCount = ReadInt();                  if (secIdListCount > 0)                  {                      contract.SecIdList = new List<TagValue>(secIdListCount);                      for (int i = 0; i < secIdListCount; ++i)                      {                          TagValue tagValue = new TagValue();                          tagValue.Tag = ReadString();                          tagValue.Value = ReadString();                          contract.SecIdList.Add(tagValue);                      }                  }              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,ExecutionDataEvent,The following statement contains a magic number: if (msgVersion >= 7)                  requestId = ReadInt();
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,ExecutionDataEvent,The following statement contains a magic number: if (msgVersion >= 5)              {                  contract.ConId = ReadInt();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,ExecutionDataEvent,The following statement contains a magic number: if (msgVersion >= 9)              {                  contract.Multiplier = ReadString();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,ExecutionDataEvent,The following statement contains a magic number: if (msgVersion >= 10)              {                  contract.TradingClass = ReadString();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,ExecutionDataEvent,The following statement contains a magic number: if (msgVersion >= 2)              {                  exec.PermId = ReadInt();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,ExecutionDataEvent,The following statement contains a magic number: if (msgVersion >= 3)              {                  exec.ClientId = ReadInt();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,ExecutionDataEvent,The following statement contains a magic number: if (msgVersion >= 4)              {                  exec.Liquidation = ReadInt();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,ExecutionDataEvent,The following statement contains a magic number: if (msgVersion >= 6)              {                  exec.CumQty = ReadInt();                  exec.AvgPrice = ReadDouble();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,ExecutionDataEvent,The following statement contains a magic number: if (msgVersion >= 8)              {                  exec.OrderRef = ReadString();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,ExecutionDataEvent,The following statement contains a magic number: if (msgVersion >= 9)              {                  exec.EvRule = ReadString();                  exec.EvMultiplier = ReadDouble();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,HistoricalDataEvent,The following statement contains a magic number: if (msgVersion >= 2)              {                  startDateStr = ReadString();                  endDateStr = ReadString();                  completedIndicator += "-" + startDateStr + "-" + endDateStr;              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,HistoricalDataEvent,The following statement contains a magic number: for (int ctr = 0; ctr < itemCount; ctr++)              {                  string date = ReadString();                  double open = ReadDouble();                  double high = ReadDouble();                  double low = ReadDouble();                  double close = ReadDouble();                  int volume = ReadInt();                  double WAP = ReadDouble();                  string hasGaps = ReadString();                  int barCount = -1;                  if (msgVersion >= 3)                  {                      barCount = ReadInt();                  }                  parent.Wrapper.historicalData(requestId' date' open' high' low'                                          close' volume' barCount' WAP'                                          Boolean.Parse(hasGaps));              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,PositionEvent,The following statement contains a magic number: if (msgVersion >= 2)              {                  contract.TradingClass = ReadString();              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,PositionEvent,The following statement contains a magic number: if (msgVersion >= 3)                  avgCost = ReadDouble();
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,ScannerDataEvent,The following statement contains a magic number: for (int i = 0; i < numberOfElements; i++)              {                  int rank = ReadInt();                  if (msgVersion >= 3)                      conDet.Summary.ConId = ReadInt();                  conDet.Summary.Symbol = ReadString();                  conDet.Summary.SecType = ReadString();                  conDet.Summary.Expiry = ReadString();                  conDet.Summary.Strike = ReadDouble();                  conDet.Summary.Right = ReadString();                  conDet.Summary.Exchange = ReadString();                  conDet.Summary.Currency = ReadString();                  conDet.Summary.LocalSymbol = ReadString();                  conDet.MarketName = ReadString();                  conDet.Summary.TradingClass = ReadString();                  string distance = ReadString();                  string benchmark = ReadString();                  string projection = ReadString();                  string legsStr = null;                  if (msgVersion >= 2)                  {                      legsStr = ReadString();                  }                  parent.Wrapper.scannerData(requestId' rank' conDet' distance'                      benchmark' projection' legsStr);              }
Magic Number,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,ScannerDataEvent,The following statement contains a magic number: for (int i = 0; i < numberOfElements; i++)              {                  int rank = ReadInt();                  if (msgVersion >= 3)                      conDet.Summary.ConId = ReadInt();                  conDet.Summary.Symbol = ReadString();                  conDet.Summary.SecType = ReadString();                  conDet.Summary.Expiry = ReadString();                  conDet.Summary.Strike = ReadDouble();                  conDet.Summary.Right = ReadString();                  conDet.Summary.Exchange = ReadString();                  conDet.Summary.Currency = ReadString();                  conDet.Summary.LocalSymbol = ReadString();                  conDet.MarketName = ReadString();                  conDet.Summary.TradingClass = ReadString();                  string distance = ReadString();                  string benchmark = ReadString();                  string projection = ReadString();                  string legsStr = null;                  if (msgVersion >= 2)                  {                      legsStr = ReadString();                  }                  parent.Wrapper.scannerData(requestId' rank' conDet' distance'                      benchmark' projection' legsStr);              }
Missing Default,IBApi,EReader,C:\repos\letianzj_QuantTrading\Source\IBConnection\csharpclient\EReader.cs,TickPriceEvent,The following switch statement is missing a default case: switch (tickType)                  {                      case 1:                          sizeTickType = 0;//BID_SIZE                          break;                      case 2:                          sizeTickType = 3;//ASK_SIZE                          break;                      case 4:                          sizeTickType = 5;//LAST_SIZE                          break;                  }
