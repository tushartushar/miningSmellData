Implementation smell,Namespace,Class,File,Method,Description
Long Method,DailyPreMarket,Program,C:\repos\letianzj_QuantTrading\Source\BacktestAndDailyTools\DailyPreMarket\Program.cs,Main,The method has 213 lines of code.
Complex Method,DailyPreMarket,Program,C:\repos\letianzj_QuantTrading\Source\BacktestAndDailyTools\DailyPreMarket\Program.cs,Main,Cyclomatic complexity of the method is 28
Long Statement,DailyPreMarket,Program,C:\repos\letianzj_QuantTrading\Source\BacktestAndDailyTools\DailyPreMarket\Program.cs,Main,The length of the statement  "	Util.Sendemail ("DailyPreMarket"' ""' _rootpath + _configmanager.DailyResultPath + "DailyResults" + Util.ToIntDate (DateTime.Today) + ".xlsx"); " is 143.
Empty Catch Block,DailyPreMarket,Program,C:\repos\letianzj_QuantTrading\Source\BacktestAndDailyTools\DailyPreMarket\Program.cs,Main,The method has an empty catch block.
Empty Catch Block,DailyPreMarket,Program,C:\repos\letianzj_QuantTrading\Source\BacktestAndDailyTools\DailyPreMarket\Program.cs,Main,The method has an empty catch block.
Magic Number,DailyPreMarket,Program,C:\repos\letianzj_QuantTrading\Source\BacktestAndDailyTools\DailyPreMarket\Program.cs,Main,The following statement contains a magic number: try {  	_rresponse = _rengine.Evaluate ("rm(list=ls())").AsCharacter ();  	_rresponse = _rengine.Evaluate ("library('quantmod')").AsCharacter ();  	_rresponse = _rengine.CreateCharacter (_rootpath + _configmanager.RWorkspacePath);  	_rengine.SetSymbol ("workpath"' _rresponse);  	_rresponse = _rengine.Evaluate ("setwd(workpath)").AsCharacter ();  	_rresponse = _rengine.Evaluate ("getwd()").AsCharacter ();  	_rresponse = _rengine.CreateCharacter (_rootpath + _configmanager.RWorkspacePath + "DailyScan.R");  	_rengine.SetSymbol ("workpath"' _rresponse);  	_rresponse = _rengine.Evaluate ("source(workpath)").AsCharacter ();  	_rresponse = _rengine.CreateCharacter (_rootpath + _configmanager.RWorkspacePath + "DailyPairs.R");  	_rengine.SetSymbol ("workpath"' _rresponse);  	_rresponse = _rengine.Evaluate ("source(workpath)").AsCharacter ();  	//************************* 0. Match Pairs  *********************************  	if (matchpairs) {  		List<string> sublist0 = new List<string> ();  		sublist0.AddRange (results_sn [0]);  		sublist0.AddRange (results_sn [0]);  		bool gettitle = true;  		System.IO.StreamWriter error = new System.IO.StreamWriter (_rootpath + _configmanager.DailyResultPath + "error.txt");  		for (int i = 1; i < results_sn.Count; i++) {  			for (int j = i + 1; j < results_sn.Count; j++) {  				List<string> sublist = new List<string> ();  				CharacterVector symbolA = _rengine.CreateCharacter (results_sn [i] [0]);  				// create symbol string  				_rengine.SetSymbol ("A"' symbolA);  				// assign a name  				CharacterVector symbolB = _rengine.CreateCharacter (results_sn [j] [0]);  				// create symbol string  				_rengine.SetSymbol ("B"' symbolB);  				// assign a name  				NumericVector hratio = _rengine.CreateNumeric (0.0);  				_rengine.SetSymbol ("hratio"' hratio);  				// assign a name  				try {  					_rresponse = _rengine.Evaluate ("results <- DailyPairs(A'B'hratio)").AsCharacter ();  					// call DailyScan  					sublist.AddRange (results_sn [i]);  					sublist.AddRange (results_sn [j]);  					sublist.AddRange (_rresponse);  					if (gettitle) {  						_rresponse = _rengine.Evaluate ("names(results)").AsCharacter ();  						// get results names  						sublist0.AddRange (_rresponse);  						results_match.Add (sublist0);  						gettitle = false;  					}  					results_match.Add (sublist);  				}  				catch {  					error.WriteLine ("Pairs(" + i + "'" + j + ") (" + results_sn [i] [0] + "'" + results_sn [j] [0] + ") has error.");  				}  				Console.WriteLine ("Pairs(" + i + "'" + j + ") (" + results_sn [i] [0] + "'" + results_sn [j] [0] + ") is done.");  			}  		}  		error.Close ();  	}  	//************************* 1. process single names *********************************  	for (int j = 1; j < results_sn.Count; j++) {  		CharacterVector symbol = _rengine.CreateCharacter (results_sn [j] [0]);  		// create symbol string  		_rengine.SetSymbol ("sym"' symbol);  		// assign a name  		_rresponse = _rengine.Evaluate ("results <- DailyScan(sym)").AsCharacter ();  		// call DailyScan  		results_sn [j].AddRange (_rresponse);  		if (j == 1) {  			_rresponse = _rengine.Evaluate ("names(results)").AsCharacter ();  			// get results names  			results_sn [0].AddRange (_rresponse);  		}  		Console.WriteLine ("symbol " + j + " is done.");  	}  	//************************* 2. process pairs *********************************  	for (int j = 1; j < results_pair.Count; j++) {  		CharacterVector symbolA = _rengine.CreateCharacter (results_pair [j] [0]);  		// create symbol string  		_rengine.SetSymbol ("A"' symbolA);  		// assign a name  		CharacterVector symbolB = _rengine.CreateCharacter (results_pair [j] [2]);  		// create symbol string  		_rengine.SetSymbol ("B"' symbolB);  		// assign a name  		NumericVector hratio = _rengine.CreateNumeric (Convert.ToDouble (results_pair [j] [5]));  		_rengine.SetSymbol ("hratio"' hratio);  		// assign a name  		_rresponse = _rengine.Evaluate ("results <- DailyPairs(A'B'hratio)").AsCharacter ();  		// call DailyScan  		results_pair [j].AddRange (_rresponse);  		if (j == 1) {  			_rresponse = _rengine.Evaluate ("names(results)").AsCharacter ();  			// get results names  			results_pair [0].AddRange (_rresponse);  		}  		Console.WriteLine ("Pairs " + j + " is done.");  	}  }  catch {  }  finally {  	if (_rengine != null) {  		_rengine.Close ();  		_rengine.Dispose ();  	}  }  
Magic Number,DailyPreMarket,Program,C:\repos\letianzj_QuantTrading\Source\BacktestAndDailyTools\DailyPreMarket\Program.cs,Main,The following statement contains a magic number: try {  	_rresponse = _rengine.Evaluate ("rm(list=ls())").AsCharacter ();  	_rresponse = _rengine.Evaluate ("library('quantmod')").AsCharacter ();  	_rresponse = _rengine.CreateCharacter (_rootpath + _configmanager.RWorkspacePath);  	_rengine.SetSymbol ("workpath"' _rresponse);  	_rresponse = _rengine.Evaluate ("setwd(workpath)").AsCharacter ();  	_rresponse = _rengine.Evaluate ("getwd()").AsCharacter ();  	_rresponse = _rengine.CreateCharacter (_rootpath + _configmanager.RWorkspacePath + "DailyScan.R");  	_rengine.SetSymbol ("workpath"' _rresponse);  	_rresponse = _rengine.Evaluate ("source(workpath)").AsCharacter ();  	_rresponse = _rengine.CreateCharacter (_rootpath + _configmanager.RWorkspacePath + "DailyPairs.R");  	_rengine.SetSymbol ("workpath"' _rresponse);  	_rresponse = _rengine.Evaluate ("source(workpath)").AsCharacter ();  	//************************* 0. Match Pairs  *********************************  	if (matchpairs) {  		List<string> sublist0 = new List<string> ();  		sublist0.AddRange (results_sn [0]);  		sublist0.AddRange (results_sn [0]);  		bool gettitle = true;  		System.IO.StreamWriter error = new System.IO.StreamWriter (_rootpath + _configmanager.DailyResultPath + "error.txt");  		for (int i = 1; i < results_sn.Count; i++) {  			for (int j = i + 1; j < results_sn.Count; j++) {  				List<string> sublist = new List<string> ();  				CharacterVector symbolA = _rengine.CreateCharacter (results_sn [i] [0]);  				// create symbol string  				_rengine.SetSymbol ("A"' symbolA);  				// assign a name  				CharacterVector symbolB = _rengine.CreateCharacter (results_sn [j] [0]);  				// create symbol string  				_rengine.SetSymbol ("B"' symbolB);  				// assign a name  				NumericVector hratio = _rengine.CreateNumeric (0.0);  				_rengine.SetSymbol ("hratio"' hratio);  				// assign a name  				try {  					_rresponse = _rengine.Evaluate ("results <- DailyPairs(A'B'hratio)").AsCharacter ();  					// call DailyScan  					sublist.AddRange (results_sn [i]);  					sublist.AddRange (results_sn [j]);  					sublist.AddRange (_rresponse);  					if (gettitle) {  						_rresponse = _rengine.Evaluate ("names(results)").AsCharacter ();  						// get results names  						sublist0.AddRange (_rresponse);  						results_match.Add (sublist0);  						gettitle = false;  					}  					results_match.Add (sublist);  				}  				catch {  					error.WriteLine ("Pairs(" + i + "'" + j + ") (" + results_sn [i] [0] + "'" + results_sn [j] [0] + ") has error.");  				}  				Console.WriteLine ("Pairs(" + i + "'" + j + ") (" + results_sn [i] [0] + "'" + results_sn [j] [0] + ") is done.");  			}  		}  		error.Close ();  	}  	//************************* 1. process single names *********************************  	for (int j = 1; j < results_sn.Count; j++) {  		CharacterVector symbol = _rengine.CreateCharacter (results_sn [j] [0]);  		// create symbol string  		_rengine.SetSymbol ("sym"' symbol);  		// assign a name  		_rresponse = _rengine.Evaluate ("results <- DailyScan(sym)").AsCharacter ();  		// call DailyScan  		results_sn [j].AddRange (_rresponse);  		if (j == 1) {  			_rresponse = _rengine.Evaluate ("names(results)").AsCharacter ();  			// get results names  			results_sn [0].AddRange (_rresponse);  		}  		Console.WriteLine ("symbol " + j + " is done.");  	}  	//************************* 2. process pairs *********************************  	for (int j = 1; j < results_pair.Count; j++) {  		CharacterVector symbolA = _rengine.CreateCharacter (results_pair [j] [0]);  		// create symbol string  		_rengine.SetSymbol ("A"' symbolA);  		// assign a name  		CharacterVector symbolB = _rengine.CreateCharacter (results_pair [j] [2]);  		// create symbol string  		_rengine.SetSymbol ("B"' symbolB);  		// assign a name  		NumericVector hratio = _rengine.CreateNumeric (Convert.ToDouble (results_pair [j] [5]));  		_rengine.SetSymbol ("hratio"' hratio);  		// assign a name  		_rresponse = _rengine.Evaluate ("results <- DailyPairs(A'B'hratio)").AsCharacter ();  		// call DailyScan  		results_pair [j].AddRange (_rresponse);  		if (j == 1) {  			_rresponse = _rengine.Evaluate ("names(results)").AsCharacter ();  			// get results names  			results_pair [0].AddRange (_rresponse);  		}  		Console.WriteLine ("Pairs " + j + " is done.");  	}  }  catch {  }  finally {  	if (_rengine != null) {  		_rengine.Close ();  		_rengine.Dispose ();  	}  }  
Magic Number,DailyPreMarket,Program,C:\repos\letianzj_QuantTrading\Source\BacktestAndDailyTools\DailyPreMarket\Program.cs,Main,The following statement contains a magic number: for (int j = 1; j < results_pair.Count; j++) {  	CharacterVector symbolA = _rengine.CreateCharacter (results_pair [j] [0]);  	// create symbol string  	_rengine.SetSymbol ("A"' symbolA);  	// assign a name  	CharacterVector symbolB = _rengine.CreateCharacter (results_pair [j] [2]);  	// create symbol string  	_rengine.SetSymbol ("B"' symbolB);  	// assign a name  	NumericVector hratio = _rengine.CreateNumeric (Convert.ToDouble (results_pair [j] [5]));  	_rengine.SetSymbol ("hratio"' hratio);  	// assign a name  	_rresponse = _rengine.Evaluate ("results <- DailyPairs(A'B'hratio)").AsCharacter ();  	// call DailyScan  	results_pair [j].AddRange (_rresponse);  	if (j == 1) {  		_rresponse = _rengine.Evaluate ("names(results)").AsCharacter ();  		// get results names  		results_pair [0].AddRange (_rresponse);  	}  	Console.WriteLine ("Pairs " + j + " is done.");  }  
Magic Number,DailyPreMarket,Program,C:\repos\letianzj_QuantTrading\Source\BacktestAndDailyTools\DailyPreMarket\Program.cs,Main,The following statement contains a magic number: for (int j = 1; j < results_pair.Count; j++) {  	CharacterVector symbolA = _rengine.CreateCharacter (results_pair [j] [0]);  	// create symbol string  	_rengine.SetSymbol ("A"' symbolA);  	// assign a name  	CharacterVector symbolB = _rengine.CreateCharacter (results_pair [j] [2]);  	// create symbol string  	_rengine.SetSymbol ("B"' symbolB);  	// assign a name  	NumericVector hratio = _rengine.CreateNumeric (Convert.ToDouble (results_pair [j] [5]));  	_rengine.SetSymbol ("hratio"' hratio);  	// assign a name  	_rresponse = _rengine.Evaluate ("results <- DailyPairs(A'B'hratio)").AsCharacter ();  	// call DailyScan  	results_pair [j].AddRange (_rresponse);  	if (j == 1) {  		_rresponse = _rengine.Evaluate ("names(results)").AsCharacter ();  		// get results names  		results_pair [0].AddRange (_rresponse);  	}  	Console.WriteLine ("Pairs " + j + " is done.");  }  
