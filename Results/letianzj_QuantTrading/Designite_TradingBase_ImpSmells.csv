Implementation smell,Namespace,Class,File,Method,Description
Long Method,TradingBase,Broker,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Backtest\Broker.cs,Execute,The method has 103 lines of code.
Long Method,TradingBase,PerformanceEvaluator,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\PerformanceAnalysis\PerformanceEvaluator.cs,GenerateReports,The method has 186 lines of code.
Long Method,TradingBase,OffsetTracker,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\OffsetTracker.cs,doupdate,The method has 104 lines of code.
Complex Method,TradingBase,Broker,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Backtest\Broker.cs,Execute,Cyclomatic complexity of the method is 23
Complex Method,TradingBase,Bar,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Bar\Bar.cs,NewTick,Cyclomatic complexity of the method is 12
Complex Method,TradingBase,BarTimeIntervalData,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Bar\BarTimeIntervalData.cs,NewTick,Cyclomatic complexity of the method is 10
Complex Method,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,RequestHistoricalData,Cyclomatic complexity of the method is 17
Complex Method,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,openOrder,Cyclomatic complexity of the method is 8
Complex Method,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,ContractToSecurityFullName,Cyclomatic complexity of the method is 8
Complex Method,TradingBase,Order,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Order\Order.cs,FillHighLiquidityEOD,Cyclomatic complexity of the method is 9
Complex Method,TradingBase,OrderBook,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Order\OrderBook.cs,GotTick,Cyclomatic complexity of the method is 10
Complex Method,TradingBase,TrailTracker,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Order\TrailTracker.cs,newPoint,Cyclomatic complexity of the method is 12
Complex Method,TradingBase,PerformanceEvaluator,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\PerformanceAnalysis\PerformanceEvaluator.cs,GenerateReports,Cyclomatic complexity of the method is 34
Complex Method,TradingBase,Position,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Security\Position.cs,Adjust,Cyclomatic complexity of the method is 11
Complex Method,TradingBase,Tick,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Tick\Tick.cs,Deserialize,Cyclomatic complexity of the method is 10
Complex Method,TradingBase,TickArchiver,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Tick\TickArchiver.cs,newTick,Cyclomatic complexity of the method is 8
Complex Method,TradingBase,TickWatcher,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Tick\TickWatcher.cs,newTick,Cyclomatic complexity of the method is 12
Complex Method,TradingBase,TickWatcher,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Tick\TickWatcher.cs,_bw_DoWork,Cyclomatic complexity of the method is 11
Complex Method,TradingBase,EnumDescConverter,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\EnumDescConverter.cs,GetEnumValue,Cyclomatic complexity of the method is 10
Complex Method,TradingBase,OffsetTracker,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\OffsetTracker.cs,doupdate,Cyclomatic complexity of the method is 16
Complex Method,TradingBase,OffsetTracker,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\OffsetTracker.cs,Adjust,Cyclomatic complexity of the method is 10
Long Parameter List,TradingBase,Bar,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Bar\Bar.cs,Bar,The method has 9 parameters. Parameters: o' h' l' c' v' date' order' fullsymbol' interval
Long Parameter List,TradingBase,BarIntervalData,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Bar\BarIntervalData.cs,NewPoint,The method has 5 parameters. Parameters: symbol' p' time' date' size
Long Parameter List,TradingBase,BarRequest,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Bar\BarRequest.cs,BarRequest,The method has 7 parameters. Parameters: fullsymbol' interval' startdate' starttime' enddate' endtime' client
Long Parameter List,TradingBase,BarTimeIntervalData,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Bar\BarTimeIntervalData.cs,NewPoint,The method has 5 parameters. Parameters: symbol' p' time' date' size
Long Parameter List,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,updatePortfolio,The method has 8 parameters. Parameters: contract' position' marketPrice' marketValue' averageCost' unrealisedPNL' realisedPNL' accountName
Long Parameter List,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,updateMktDepth,The method has 6 parameters. Parameters: tickerId' position' operation' side' price' size
Long Parameter List,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,updateMktDepthL2,The method has 7 parameters. Parameters: tickerId' position' marketMaker' operation' side' price' size
Long Parameter List,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,historicalData,The method has 10 parameters. Parameters: reqId' date' open' high' low' close' volume' count' WAP' hasGaps
Long Parameter List,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,tickEFP,The method has 9 parameters. Parameters: tickerId' tickType' basisPoints' formattedBasisPoints' impliedFuture' holdDays' futureExpiry' dividendImpact' dividendsToExpiry
Long Parameter List,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,tickOptionComputation,The method has 10 parameters. Parameters: tickerId' field' impliedVolatility' delta' optPrice' pvDividend' gamma' vega' theta' undPrice
Long Parameter List,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,accountSummary,The method has 5 parameters. Parameters: reqId' account' tag' value' currency
Long Parameter List,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,orderStatus,The method has 10 parameters. Parameters: orderId' status' filled' remaining' avgFillPrice' permId' parentId' lastFillPrice' clientId' whyHeld
Long Parameter List,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,realtimeBar,The method has 9 parameters. Parameters: reqId' time' open' high' low' close' volume' WAP' count
Long Parameter List,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,scannerData,The method has 7 parameters. Parameters: reqId' rank' contractDetails' distance' benchmark' projection' legsStr
Long Parameter List,TradingBase,Order,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Order\Order.cs,Order,The method has 6 parameters. Parameters: symbol' size' id' p' s' t
Long Parameter List,TradingBase,Order,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Order\Order.cs,Order,The method has 9 parameters. Parameters: symbol' size' id' p' s' t' date' time' tif
Long Parameter List,TradingBase,MarketOrderFlat,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Order\Order.cs,MarketOrderFlat,The method has 5 parameters. Parameters: p' percent' normalizeSize' MinimumLotSize' id
Long Parameter List,TradingBase,StopLimitOrder,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Order\Order.cs,StopLimitOrder,The method has 5 parameters. Parameters: sym' size' price' stop' orderid
Long Parameter List,TradingBase,TrailingStopLimitOrder,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Order\Order.cs,TrailingStopLimitOrder,The method has 5 parameters. Parameters: sym' size' limit' trailing' orderid
Long Parameter List,TradingBase,Position,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Security\Position.cs,Position,The method has 5 parameters. Parameters: symbol' price' size' closedpl' account
Long Parameter List,TradingBase,Tick,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Tick\Tick.cs,NewTrade,The method has 5 parameters. Parameters: fullsym' date' time' trade' size
Long Parameter List,TradingBase,Trade,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Order\Trade.cs,Trade,The method has 5 parameters. Parameters: fullname' fillprice' fillsize' filldate' filltime
Long Parameter List,TradingBase,Calc,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Calc.cs,PositionProfit,The method has 5 parameters. Parameters: p' offset' percent' normalizesize' MINSIZE
Long Parameter List,TradingBase,Calc,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Calc.cs,PositionStop,The method has 5 parameters. Parameters: p' offset' percent' normalizesize' MINSIZE
Long Parameter List,TradingBase,Log,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Log.cs,Log,The method has 5 parameters. Parameters: path' logname' dateinlogname' appendtolog' timestamps
Long Parameter List,TradingBase,OffsetInfo,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\OffsetInfo.cs,OffsetInfo,The method has 6 parameters. Parameters: profitdist' stopdist' profitpercent' stoppercent' NormalizeSize' MinSize
Long Identifier,TradingBase,GoogleClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\GoogleClient.cs,,The length of the parameter SecurityFullNameToGoogleSymbol is 30.
Long Statement,TradingBase,Broker,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Backtest\Broker.cs,BestBidOrOffer,The length of the statement  "            if ((first.FullSymbol != second.FullSymbol) || (first.OrderSide != second.OrderSide) || !first.IsLimit || !second.IsLimit) " is 122.
Long Statement,TradingBase,Broker,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Backtest\Broker.cs,CancelOrder,The length of the statement  "                        OnGotOrderCancelBroadcast(orderlist[i].FullSymbol' orderlist[i].OrderSide' orderid); //send cancel notifcation to any subscribers " is 129.
Long Statement,TradingBase,simworker,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Backtest\MultiSim.cs,simworker_DoWork,The length of the statement  "                // while simulation hasn't been canceled' we still have historical ticks to read and we haven't read too many' cache a tick " is 123.
Long Statement,TradingBase,OptimizeEngine,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Backtest\OptimizeEngine.cs,Play,The length of the statement  "                    Debug("optimize " + id + " finished.  Used: " + value + " -> " + OptimizeDecisionsName + ": " + rv + " trades: " + trades.Count + " SimsRemaining: " + OptimizeRemain); " is 167.
Long Statement,TradingBase,OptimizeEngine,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Backtest\OptimizeEngine.cs,ChangeValue,The length of the statement  "                Debug("error setting parameter " + OptimizeName + " on strategy: " + s.FullName + " to: " + v + " err: " + ex.Message + ex.StackTrace); " is 135.
Long Statement,TradingBase,OptimizeEngine,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Backtest\OptimizeEngine.cs,GetResult,The length of the statement  "                Debug("error getting result from OptimizeDecision name: " + OptimizeDecisionsName + " err: " + ex.Message + ex.StackTrace); " is 123.
Long Statement,TradingBase,OptimizeEngine,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Backtest\OptimizeEngine.cs,DeepClone,The length of the statement  "                System.Runtime.Serialization.Formatters.Binary.BinaryFormatter bf = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter(); " is 137.
Long Statement,TradingBase,BarTimeIntervalData,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Bar\BarTimeIntervalData.cs,GetBar,The length of the statement  "            b = new Bar(opens[index]' highs[index]' lows[index]' closes[index]' vols[index]' dates[index]' orders[index]' symbol' intervallength); " is 134.
Long Statement,TradingBase,GoogleClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\GoogleClient.cs,RequestMarketData,The length of the statement  "                var task = Task.Factory.StartNew(() => GetQuoteLoop(cancellationtoken)' cancellationtoken' TaskCreationOptions.LongRunning' TaskScheduler.Default) " is 146.
Long Statement,TradingBase,GoogleClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\GoogleClient.cs,GetQuoteLoop,The length of the statement  "                        //DateTime dt = DateTime.SpecifyKind(DateTime.Parse(quote[0].lt_dts)' DateTimeKind.Utc);      // Z shouldn't refer to local time " is 128.
Long Statement,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,execDetails,The length of the statement  "            DateTime dt = DateTime.ParseExact(execution.Time' "yyyyMMdd  HH:mm:ss"' CultureInfo.InvariantCulture);       // Two blanks " is 122.
Long Statement,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,openOrder,The length of the statement  "            o.LimitPrice = ((order.OrderType == "LMT") || (order.OrderType == "TRAIL LIMIT") || (order.OrderType == "STP LMT")) ? (decimal)order.LmtPrice : 0m; " is 147.
Long Statement,TradingBase,PerformanceEvaluator,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\PerformanceAnalysis\PerformanceEvaluator.cs,GenerateReports,The length of the statement  "                            PerSymbolStats.Add(item.Value.FullSymbol' tradecount[item.Value.FullSymbol] + " for " + item.Value.ClosedPL.ToString("C2")); " is 124.
Long Statement,TradingBase,PerformanceEvaluator,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\PerformanceAnalysis\PerformanceEvaluator.cs,GenerateReports,The length of the statement  "                    SharpeRatio = tradepnl.Count < 2 ? 0 : Math.Round(Calc.SharpeRatio(tradepnl[tradepnl.Count - 1]' Calc.StdDev(tradepnl.ToArray())' (RiskFreeRate * MoneyInUse * DaysTraded/252))' 3); " is 180.
Long Statement,TradingBase,PerformanceEvaluator,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\PerformanceAnalysis\PerformanceEvaluator.cs,GenerateReports,The length of the statement  "                        SortinoRatio = Math.Round(Calc.SortinoRatio(tradepnl[tradepnl.Count - 1]' Calc.StdDev(negret.ToArray())' (RiskFreeRate * MoneyInUse))' 3); " is 138.
Long Statement,TradingBase,PerformanceEvaluator,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\PerformanceAnalysis\PerformanceEvaluator.cs,FillGrid,The length of the statement  "                table.Rows.Add(new string[] { fi.Name' (format != null) ? string.Format(format' fi.GetValue(this)) : fi.GetValue(this).ToString() }); " is 133.
Long Statement,TradingBase,PerformanceEvaluator,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\PerformanceAnalysis\PerformanceEvaluator.cs,FillGrid,The length of the statement  "                table.Rows.Add(new string[] { pi.Name' (format != null) ? string.Format(format' pi.GetValue(this' null)) : pi.GetValue(this' null).ToString() }); " is 145.
Long Statement,TradingBase,Position,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Security\Position.cs,Adjust,The length of the statement  "            if ((_fullsymbol!="") && (this._fullsymbol != pos._fullsymbol)) throw new Exception("Failed because adjustment symbol did not match position symbol"); " is 150.
Long Statement,TradingBase,Position,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Security\Position.cs,Adjust,The length of the statement  "            if (!pos.isValid) throw new Exception("Invalid position adjustment' existing:" + this.ToString() + " adjustment:" + pos.ToString()); " is 132.
Long Statement,TradingBase,Tick,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Tick\Tick.cs,Deserialize,The length of the statement  "            if (decimal.TryParse(r[3]' System.Globalization.NumberStyles.Any' System.Globalization.CultureInfo.InvariantCulture' out d)) " is 124.
Long Statement,TradingBase,Tick,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Tick\Tick.cs,Deserialize,The length of the statement  "            if (decimal.TryParse(r[5]' System.Globalization.NumberStyles.Any' System.Globalization.CultureInfo.InvariantCulture' out d)) " is 124.
Long Statement,TradingBase,Tick,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Tick\Tick.cs,Deserialize,The length of the statement  "            if (decimal.TryParse(r[7]' System.Globalization.NumberStyles.Any' System.Globalization.CultureInfo.InvariantCulture' out d)) " is 124.
Long Statement,TradingBase,Calc,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Calc.cs,ClosePT,The length of the statement  "                throw new Exception("Invalid position provided. (existing:" + existing.ToString() + " adjustment:" + adjust.ToString()); " is 120.
Long Statement,TradingBase,Calc,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Calc.cs,ClosePL,The length of the statement  "            int closedsize = Math.Abs(adjust.TradeSize) > existing.UnsignedSize ? existing.UnsignedSize : Math.Abs(adjust.TradeSize); " is 121.
Long Statement,TradingBase,Calc,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Calc.cs,PositionProfit,The length of the statement  "            int size = percent == 0 ? 0 : (!normalizesize ? (int)(p.FlatSize * percent) : Calc.Norm2Min(p.FlatSize * percent' MINSIZE)); " is 124.
Long Statement,TradingBase,Calc,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Calc.cs,PositionStop,The length of the statement  "            int size = percent == 0 ? 0 : (!normalizesize ? (int)(p.FlatSize * percent) : Calc.Norm2Min(p.FlatSize * percent' MINSIZE)); " is 124.
Long Statement,TradingBase,EnumDescConverter,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\EnumDescConverter.cs,GetEnumValue,The length of the statement  "            throw new InvalidCastException(string.Concat("The received value "' description' " was unrecognized as an "' value.Name' " enum value.")); " is 138.
Long Statement,TradingBase,OffsetInfo,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\OffsetInfo.cs,ToString,The length of the statement  "            return string.Format("p{0}/{1:p0} s{2}/{3:p0}"' ProfitDist.ToString("N" + decimals.ToString())' ProfitPercent' StopDist.ToString("N" + decimals.ToString())' StopPercent); " is 170.
Long Statement,TradingBase,OffsetInfo,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\OffsetInfo.cs,Serialize,The length of the statement  "                string.Format("{0}'{1}'{2}'{3}'{4}'{5}"' oi.ProfitDist' oi.StopDist' oi.ProfitPercent' oi.StopPercent' oi.NormalizeSize' oi.MinimumLotSize); " is 140.
Long Statement,TradingBase,OversellProtector,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\OversellProtector.cs,sendorder,The length of the statement  "                debug(o.FullSymbol + " oversell detected on pos: "+size+" order adjustment: " + osize + "->" + size + " " + o.ToString()); " is 122.
Long Statement,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,SecurityFromFileName,The length of the statement  "                string ds = System.Text.RegularExpressions.Regex.Match(filename' "([0-9]{8})[.]"' System.Text.RegularExpressions.RegexOptions.IgnoreCase).Result("$1"); " is 151.
Long Statement,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,DateFromFileName,The length of the statement  "                string ds = System.Text.RegularExpressions.Regex.Match(filename' "([0-9]{8})[.]"' System.Text.RegularExpressions.RegexOptions.IgnoreCase).Result("$1"); " is 151.
Long Statement,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,isTickFile,The length of the statement  "            return System.Text.RegularExpressions.Regex.IsMatch(path' "TXT"' System.Text.RegularExpressions.RegexOptions.IgnoreCase); " is 121.
Long Statement,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,isStrategyFile,The length of the statement  "            return System.Text.RegularExpressions.Regex.IsMatch(path' "DLL"' System.Text.RegularExpressions.RegexOptions.IgnoreCase); " is 121.
Long Statement,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,loadFile,The length of the statement  "            System.IO.FileStream fs = new System.IO.FileStream(filename' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.ReadWrite); " is 144.
Long Statement,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,IsStrategyDLL,The length of the statement  "            return System.Text.RegularExpressions.Regex.IsMatch(path' "DLL"' System.Text.RegularExpressions.RegexOptions.IgnoreCase); " is 121.
Complex Conditional,TradingBase,Broker,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Backtest\Broker.cs,BestBidOrOffer,The conditional expression  "(first.FullSymbol != second.FullSymbol) || (first.OrderSide != second.OrderSide) || !first.IsLimit || !second.IsLimit"  is complex.
Complex Conditional,TradingBase,Broker,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Backtest\Broker.cs,BestBidOrOffer,The conditional expression  "(first.OrderSide && (first.LimitPrice > second.LimitPrice)) || // if first is better' use it                  (!first.OrderSide && (first.LimitPrice < second.LimitPrice))"  is complex.
Complex Conditional,TradingBase,Broker,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Backtest\Broker.cs,BestBidOrOffer,The conditional expression  "(first.OrderSide && (first.LimitPrice < second.LimitPrice)) || // if second is better' use it                  (!first.OrderSide && (first.LimitPrice > second.LimitPrice))"  is complex.
Complex Conditional,TradingBase,Order,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Order\Order.cs,Fill,The conditional expression  "(IsLimit && OrderSide && (p <= LimitPrice)) // buy limit                  || (IsLimit && !OrderSide && (p >= LimitPrice))// sell limit                  || (IsStop && OrderSide && (p >= StopPrice)) // buy stop                  || (IsStop && !OrderSide && (p <= StopPrice)) // sell stop                  || IsMarket"  is complex.
Complex Conditional,TradingBase,Order,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Order\Order.cs,FillHighLiquidityEOD,The conditional expression  "(IsLimit && OrderSide && (p <= LimitPrice)) // buy limit               || (IsLimit && !OrderSide && (p >= LimitPrice))"  is complex.
Complex Conditional,TradingBase,Order,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Order\Order.cs,FillHighLiquidityEOD,The conditional expression  "(IsStop && OrderSide && (p >= StopPrice)) // buy stop                    || (IsStop && !OrderSide && (p <= StopPrice))"  is complex.
Complex Conditional,TradingBase,Order,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Order\Order.cs,Fill,The conditional expression  "(IsLimit && OrderSide && (o.LimitPrice <= LimitPrice)) // buy limit cross                  || (IsLimit && !OrderSide && (o.LimitPrice >= LimitPrice))// sell limit cross                  || (IsStop && OrderSide && (o.LimitPrice >= StopPrice)) // buy stop                  || (IsStop && !OrderSide && (o.LimitPrice <= StopPrice)) // sell stop                  || IsMarket"  is complex.
Complex Conditional,TradingBase,TrailTracker,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Order\TrailTracker.cs,newPoint,The conditional expression  "(refp == 0)                  || (_pt[symbol].isLong && (refp < p))                  || (_pt[symbol].isShort && (refp > p))"  is complex.
Complex Conditional,TradingBase,TrailTracker,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Order\TrailTracker.cs,newPoint,The conditional expression  "!_pendingfill[idx] && (trail.StopDist != 0) && trailtest && (MaxFireCount > firecount[symbol])"  is complex.
Complex Conditional,TradingBase,Position,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Security\Position.cs,Adjust,The conditional expression  "(pos.isLong && this.isLong) || (!pos.isLong && !this.isLong)"  is complex.
Complex Conditional,TradingBase,TickWatcher,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Tick\TickWatcher.cs,_bw_DoWork,The conditional expression  "!alltrading && !sentmissingfirstticks                      && (_starttime != 0) && (_lasttime > _starttime)"  is complex.
Complex Conditional,TradingBase,OffsetTracker,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\OffsetTracker.cs,doupdate,The conditional expression  "(updatestop && off.hasStop && !CancelOnce)                  || (updatestop && off.hasStop && CancelOnce && !off.StopcancelPending)"  is complex.
Complex Conditional,TradingBase,OffsetTracker,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\OffsetTracker.cs,doupdate,The conditional expression  "(updateprofit && off.hasProfit && AllowSimulatenousCancels) ||                  (updateprofit && off.hasProfit && AllowSimulatenousCancels && !sentcancel)"  is complex.
Complex Conditional,TradingBase,OffsetTracker,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\OffsetTracker.cs,doupdate,The conditional expression  "(!off.hasProfit && AllowSimulatenousOrders) || (!off.hasProfit && !AllowSimulatenousOrders && !sentorder)"  is complex.
Virtual Method Call from Constructor,TradingBase,BacktestEngine,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Backtest\BacktestEngine.cs,BacktestEngine,The constructor "BacktestEngine" calls a virtual method "Reset".
Empty Catch Block,TradingBase,BacktestEngine,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Backtest\BacktestEngine.cs,Stop,The method has an empty catch block.
Empty Catch Block,TradingBase,BacktestEngine,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Backtest\BacktestEngine.cs,UnbindStrategy,The method has an empty catch block.
Empty Catch Block,TradingBase,Broker,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Backtest\Broker.cs,AddOrder,The method has an empty catch block.
Empty Catch Block,TradingBase,MultiSim,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Backtest\MultiSim.cs,Stop,The method has an empty catch block.
Empty Catch Block,TradingBase,TickArchiver,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Tick\TickArchiver.cs,Stop,The method has an empty catch block.
Empty Catch Block,TradingBase,TickArchiver,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Tick\TickArchiver.cs,newTick,The method has an empty catch block.
Empty Catch Block,TradingBase,ConnectionTracker,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\ConnectionTracker.cs,Stop,The method has an empty catch block.
Empty Catch Block,TradingBase,Log,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Log.cs,setfile,The method has an empty catch block.
Empty Catch Block,TradingBase,Log,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Log.cs,GotDebug,The method has an empty catch block.
Empty Catch Block,TradingBase,Log,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Log.cs,Stop,The method has an empty catch block.
Magic Number,TradingBase,BacktestEngine,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Backtest\BacktestEngine.cs,Play,The following statement contains a magic number: int time = (int)(_histsim.NextTickTime % 100000);
Magic Number,TradingBase,BacktestEngine,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Backtest\BacktestEngine.cs,Play,The following statement contains a magic number: long date = (_histsim.NextTickTime / 100000) * 100000;
Magic Number,TradingBase,BacktestEngine,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Backtest\BacktestEngine.cs,Play,The following statement contains a magic number: long date = (_histsim.NextTickTime / 100000) * 100000;
Magic Number,TradingBase,BacktestEngine,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Backtest\BacktestEngine.cs,_histsim_GotTick,The following statement contains a magic number: t.BidSize *= 100;
Magic Number,TradingBase,BacktestEngine,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Backtest\BacktestEngine.cs,_histsim_GotTick,The following statement contains a magic number: t.AskSize *= 100;
Magic Number,TradingBase,BacktestEngine,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Backtest\BacktestEngine.cs,_histsim_GotTick,The following statement contains a magic number: t.TradeSize *= 100;
Magic Number,TradingBase,MultiSim,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Backtest\MultiSim.cs,FillCache,The following statement contains a magic number: System.Threading.Thread.Sleep(10);
Magic Number,TradingBase,MultiSim,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Backtest\MultiSim.cs,FillCache,The following statement contains a magic number: System.Threading.Thread.Sleep(10);
Magic Number,TradingBase,MultiSim,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Backtest\MultiSim.cs,FlushCache,The following statement contains a magic number: Buffer.BlockCopy(idx' 0' cidx' 0' idx.Length * 4);
Magic Number,TradingBase,MultiSim,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Backtest\MultiSim.cs,FlushCacheSingleCore,The following statement contains a magic number: Buffer.BlockCopy(idx' 0' cidx' 0' idx.Length * 4);
Magic Number,TradingBase,OptimizeEngine,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Backtest\OptimizeEngine.cs,progress,The following statement contains a magic number: int pct = (int)(((double)cur * 100) / max);
Magic Number,TradingBase,OptimizeEngine,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Backtest\OptimizeEngine.cs,progress,The following statement contains a magic number: pct = 100;
Magic Number,TradingBase,OptimizeEngine,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Backtest\OptimizeEngine.cs,progress,The following statement contains a magic number: pct > 100
Magic Number,TradingBase,Bar,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Bar\Bar.cs,Bar,The following statement contains a magic number: Interval = 300;
Magic Number,TradingBase,Bar,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Bar\Bar.cs,ToTick,The following statement contains a magic number: list.Add(Tick.NewTrade(bar.FullSymbol' bar.Date' bar.BarStartTime' bar.Open'                  (int)((double)bar.Volume / 4)));
Magic Number,TradingBase,Bar,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Bar\Bar.cs,ToTick,The following statement contains a magic number: list.Add(Tick.NewTrade(bar.FullSymbol' bar.Date' bar.BarStartTime' bar.High'                  (int)((double)bar.Volume / 4)));
Magic Number,TradingBase,Bar,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Bar\Bar.cs,ToTick,The following statement contains a magic number: list.Add(Tick.NewTrade(bar.FullSymbol' bar.Date' bar.BarStartTime' bar.Low'                  (int)((double)bar.Volume / 4)));
Magic Number,TradingBase,Bar,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Bar\Bar.cs,ToTick,The following statement contains a magic number: list.Add(Tick.NewTrade(bar.FullSymbol' bar.Date' bar.BarStartTime' bar.Close'                  (int)((double)bar.Volume / 4)));
Magic Number,TradingBase,BarTimeIntervalData,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Bar\BarTimeIntervalData.cs,GetBarId,The following statement contains a magic number: bcount += (long)date * 100000;
Magic Number,TradingBase,GoogleClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\GoogleClient.cs,RequestHistoricalData,The following statement contains a magic number: br.Interval != 86400
Magic Number,TradingBase,GoogleClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\GoogleClient.cs,RequestHistoricalData,The following statement contains a magic number: IEnumerable<string> history = lines2.Skip(7);
Magic Number,TradingBase,GoogleClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\GoogleClient.cs,RequestHistoricalData,The following statement contains a magic number: dt = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,TradingBase,GoogleClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\GoogleClient.cs,RequestHistoricalData,The following statement contains a magic number: bar.Open = decimal.Parse(entries[4]);
Magic Number,TradingBase,GoogleClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\GoogleClient.cs,RequestHistoricalData,The following statement contains a magic number: bar.High = decimal.Parse(entries[2]);
Magic Number,TradingBase,GoogleClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\GoogleClient.cs,RequestHistoricalData,The following statement contains a magic number: bar.Low = decimal.Parse(entries[3]);
Magic Number,TradingBase,GoogleClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\GoogleClient.cs,RequestHistoricalData,The following statement contains a magic number: bar.Volume = long.Parse(entries[5]);
Magic Number,TradingBase,GoogleClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\GoogleClient.cs,GetQuoteLoop,The following statement contains a magic number: k.Date = ct.Year * 10000 + ct.Month * 100 + ct.Day;
Magic Number,TradingBase,GoogleClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\GoogleClient.cs,GetQuoteLoop,The following statement contains a magic number: k.Date = ct.Year * 10000 + ct.Month * 100 + ct.Day;
Magic Number,TradingBase,GoogleClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\GoogleClient.cs,GetQuoteLoop,The following statement contains a magic number: k.Time = ct.Hour * 10000 + ct.Minute * 100 + ct.Second;
Magic Number,TradingBase,GoogleClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\GoogleClient.cs,GetQuoteLoop,The following statement contains a magic number: k.Time = ct.Hour * 10000 + ct.Minute * 100 + ct.Second;
Magic Number,TradingBase,GoogleClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\GoogleClient.cs,GetQuoteLoop,The following statement contains a magic number: k.TradeSize = 1000;
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,Connect,The following statement contains a magic number: _ibSocket.setServerLogLevel(5);
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,RequestHistoricalData,The following statement contains a magic number: switch (br.Interval)              {                  case 1:                      barSize = "1 secs";             // not 1 sec                      break;                  case 5:                      barSize = "5 secs";                      break;                  case 15:                      barSize = "15 secs";                      break;                  case 30:                      barSize = "30 secs";                      break;                  case 60:                      barSize = "1 min";                      break;                  case 120:                      barSize = "2 mins";                      break;                  case 180:                      barSize = "3 mins";                      break;                  case 300:                      barSize = "5 mins";                      break;                  case 900:                      barSize = "15 mins";                      break;                  case 1800:                      barSize = "30 mins";                      break;                  case 3600:                      barSize = "1 hour";                      break;                  case 86400:                      barSize = "1 day";                      break;                  default:                      throw new ArgumentOutOfRangeException("Invalid barsize/interval.");              }
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,RequestHistoricalData,The following statement contains a magic number: switch (br.Interval)              {                  case 1:                      barSize = "1 secs";             // not 1 sec                      break;                  case 5:                      barSize = "5 secs";                      break;                  case 15:                      barSize = "15 secs";                      break;                  case 30:                      barSize = "30 secs";                      break;                  case 60:                      barSize = "1 min";                      break;                  case 120:                      barSize = "2 mins";                      break;                  case 180:                      barSize = "3 mins";                      break;                  case 300:                      barSize = "5 mins";                      break;                  case 900:                      barSize = "15 mins";                      break;                  case 1800:                      barSize = "30 mins";                      break;                  case 3600:                      barSize = "1 hour";                      break;                  case 86400:                      barSize = "1 day";                      break;                  default:                      throw new ArgumentOutOfRangeException("Invalid barsize/interval.");              }
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,RequestHistoricalData,The following statement contains a magic number: switch (br.Interval)              {                  case 1:                      barSize = "1 secs";             // not 1 sec                      break;                  case 5:                      barSize = "5 secs";                      break;                  case 15:                      barSize = "15 secs";                      break;                  case 30:                      barSize = "30 secs";                      break;                  case 60:                      barSize = "1 min";                      break;                  case 120:                      barSize = "2 mins";                      break;                  case 180:                      barSize = "3 mins";                      break;                  case 300:                      barSize = "5 mins";                      break;                  case 900:                      barSize = "15 mins";                      break;                  case 1800:                      barSize = "30 mins";                      break;                  case 3600:                      barSize = "1 hour";                      break;                  case 86400:                      barSize = "1 day";                      break;                  default:                      throw new ArgumentOutOfRangeException("Invalid barsize/interval.");              }
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,RequestHistoricalData,The following statement contains a magic number: switch (br.Interval)              {                  case 1:                      barSize = "1 secs";             // not 1 sec                      break;                  case 5:                      barSize = "5 secs";                      break;                  case 15:                      barSize = "15 secs";                      break;                  case 30:                      barSize = "30 secs";                      break;                  case 60:                      barSize = "1 min";                      break;                  case 120:                      barSize = "2 mins";                      break;                  case 180:                      barSize = "3 mins";                      break;                  case 300:                      barSize = "5 mins";                      break;                  case 900:                      barSize = "15 mins";                      break;                  case 1800:                      barSize = "30 mins";                      break;                  case 3600:                      barSize = "1 hour";                      break;                  case 86400:                      barSize = "1 day";                      break;                  default:                      throw new ArgumentOutOfRangeException("Invalid barsize/interval.");              }
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,RequestHistoricalData,The following statement contains a magic number: switch (br.Interval)              {                  case 1:                      barSize = "1 secs";             // not 1 sec                      break;                  case 5:                      barSize = "5 secs";                      break;                  case 15:                      barSize = "15 secs";                      break;                  case 30:                      barSize = "30 secs";                      break;                  case 60:                      barSize = "1 min";                      break;                  case 120:                      barSize = "2 mins";                      break;                  case 180:                      barSize = "3 mins";                      break;                  case 300:                      barSize = "5 mins";                      break;                  case 900:                      barSize = "15 mins";                      break;                  case 1800:                      barSize = "30 mins";                      break;                  case 3600:                      barSize = "1 hour";                      break;                  case 86400:                      barSize = "1 day";                      break;                  default:                      throw new ArgumentOutOfRangeException("Invalid barsize/interval.");              }
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,RequestHistoricalData,The following statement contains a magic number: switch (br.Interval)              {                  case 1:                      barSize = "1 secs";             // not 1 sec                      break;                  case 5:                      barSize = "5 secs";                      break;                  case 15:                      barSize = "15 secs";                      break;                  case 30:                      barSize = "30 secs";                      break;                  case 60:                      barSize = "1 min";                      break;                  case 120:                      barSize = "2 mins";                      break;                  case 180:                      barSize = "3 mins";                      break;                  case 300:                      barSize = "5 mins";                      break;                  case 900:                      barSize = "15 mins";                      break;                  case 1800:                      barSize = "30 mins";                      break;                  case 3600:                      barSize = "1 hour";                      break;                  case 86400:                      barSize = "1 day";                      break;                  default:                      throw new ArgumentOutOfRangeException("Invalid barsize/interval.");              }
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,RequestHistoricalData,The following statement contains a magic number: switch (br.Interval)              {                  case 1:                      barSize = "1 secs";             // not 1 sec                      break;                  case 5:                      barSize = "5 secs";                      break;                  case 15:                      barSize = "15 secs";                      break;                  case 30:                      barSize = "30 secs";                      break;                  case 60:                      barSize = "1 min";                      break;                  case 120:                      barSize = "2 mins";                      break;                  case 180:                      barSize = "3 mins";                      break;                  case 300:                      barSize = "5 mins";                      break;                  case 900:                      barSize = "15 mins";                      break;                  case 1800:                      barSize = "30 mins";                      break;                  case 3600:                      barSize = "1 hour";                      break;                  case 86400:                      barSize = "1 day";                      break;                  default:                      throw new ArgumentOutOfRangeException("Invalid barsize/interval.");              }
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,RequestHistoricalData,The following statement contains a magic number: switch (br.Interval)              {                  case 1:                      barSize = "1 secs";             // not 1 sec                      break;                  case 5:                      barSize = "5 secs";                      break;                  case 15:                      barSize = "15 secs";                      break;                  case 30:                      barSize = "30 secs";                      break;                  case 60:                      barSize = "1 min";                      break;                  case 120:                      barSize = "2 mins";                      break;                  case 180:                      barSize = "3 mins";                      break;                  case 300:                      barSize = "5 mins";                      break;                  case 900:                      barSize = "15 mins";                      break;                  case 1800:                      barSize = "30 mins";                      break;                  case 3600:                      barSize = "1 hour";                      break;                  case 86400:                      barSize = "1 day";                      break;                  default:                      throw new ArgumentOutOfRangeException("Invalid barsize/interval.");              }
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,RequestHistoricalData,The following statement contains a magic number: switch (br.Interval)              {                  case 1:                      barSize = "1 secs";             // not 1 sec                      break;                  case 5:                      barSize = "5 secs";                      break;                  case 15:                      barSize = "15 secs";                      break;                  case 30:                      barSize = "30 secs";                      break;                  case 60:                      barSize = "1 min";                      break;                  case 120:                      barSize = "2 mins";                      break;                  case 180:                      barSize = "3 mins";                      break;                  case 300:                      barSize = "5 mins";                      break;                  case 900:                      barSize = "15 mins";                      break;                  case 1800:                      barSize = "30 mins";                      break;                  case 3600:                      barSize = "1 hour";                      break;                  case 86400:                      barSize = "1 day";                      break;                  default:                      throw new ArgumentOutOfRangeException("Invalid barsize/interval.");              }
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,RequestHistoricalData,The following statement contains a magic number: switch (br.Interval)              {                  case 1:                      barSize = "1 secs";             // not 1 sec                      break;                  case 5:                      barSize = "5 secs";                      break;                  case 15:                      barSize = "15 secs";                      break;                  case 30:                      barSize = "30 secs";                      break;                  case 60:                      barSize = "1 min";                      break;                  case 120:                      barSize = "2 mins";                      break;                  case 180:                      barSize = "3 mins";                      break;                  case 300:                      barSize = "5 mins";                      break;                  case 900:                      barSize = "15 mins";                      break;                  case 1800:                      barSize = "30 mins";                      break;                  case 3600:                      barSize = "1 hour";                      break;                  case 86400:                      barSize = "1 day";                      break;                  default:                      throw new ArgumentOutOfRangeException("Invalid barsize/interval.");              }
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,RequestHistoricalData,The following statement contains a magic number: switch (br.Interval)              {                  case 1:                      barSize = "1 secs";             // not 1 sec                      break;                  case 5:                      barSize = "5 secs";                      break;                  case 15:                      barSize = "15 secs";                      break;                  case 30:                      barSize = "30 secs";                      break;                  case 60:                      barSize = "1 min";                      break;                  case 120:                      barSize = "2 mins";                      break;                  case 180:                      barSize = "3 mins";                      break;                  case 300:                      barSize = "5 mins";                      break;                  case 900:                      barSize = "15 mins";                      break;                  case 1800:                      barSize = "30 mins";                      break;                  case 3600:                      barSize = "1 hour";                      break;                  case 86400:                      barSize = "1 day";                      break;                  default:                      throw new ArgumentOutOfRangeException("Invalid barsize/interval.");              }
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,error,The following statement contains a magic number: errorCode == 202
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,execDetails,The following statement contains a magic number: trade.TradeDate = dt.Year * 10000 + dt.Month * 100 + dt.Day;
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,execDetails,The following statement contains a magic number: trade.TradeDate = dt.Year * 10000 + dt.Month * 100 + dt.Day;
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,execDetails,The following statement contains a magic number: trade.TradeTime = dt.Hour * 10000 + dt.Minute * 100 + dt.Second;
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,execDetails,The following statement contains a magic number: trade.TradeTime = dt.Hour * 10000 + dt.Minute * 100 + dt.Second;
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,tickPrice,The following statement contains a magic number: k.Date = ct.Year * 10000 + ct.Month * 100 + ct.Day;
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,tickPrice,The following statement contains a magic number: k.Date = ct.Year * 10000 + ct.Month * 100 + ct.Day;
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,tickPrice,The following statement contains a magic number: k.Time = ct.Hour * 10000 + ct.Minute * 100 + ct.Second;
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,tickPrice,The following statement contains a magic number: k.Time = ct.Hour * 10000 + ct.Minute * 100 + ct.Second;
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,tickSize,The following statement contains a magic number: k.Date = ct.Year * 10000 + ct.Month * 100 + ct.Day;
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,tickSize,The following statement contains a magic number: k.Date = ct.Year * 10000 + ct.Month * 100 + ct.Day;
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,tickSize,The following statement contains a magic number: k.Time = ct.Hour * 10000 + ct.Minute * 100 + ct.Second;
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,tickSize,The following statement contains a magic number: k.Time = ct.Hour * 10000 + ct.Minute * 100 + ct.Second;
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,updateMktDepth,The following statement contains a magic number: k.Date = ct.Year * 10000 + ct.Month * 100 + ct.Day;
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,updateMktDepth,The following statement contains a magic number: k.Date = ct.Year * 10000 + ct.Month * 100 + ct.Day;
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,updateMktDepth,The following statement contains a magic number: k.Time = ct.Hour * 10000 + ct.Minute * 100 + ct.Second;
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,updateMktDepth,The following statement contains a magic number: k.Time = ct.Hour * 10000 + ct.Minute * 100 + ct.Second;
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,updateMktDepthL2,The following statement contains a magic number: k.Date = ct.Year * 10000 + ct.Month * 100 + ct.Day;
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,updateMktDepthL2,The following statement contains a magic number: k.Date = ct.Year * 10000 + ct.Month * 100 + ct.Day;
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,updateMktDepthL2,The following statement contains a magic number: k.Time = ct.Hour * 10000 + ct.Minute * 100 + ct.Second;
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,updateMktDepthL2,The following statement contains a magic number: k.Time = ct.Hour * 10000 + ct.Minute * 100 + ct.Second;
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,historicalData,The following statement contains a magic number: int ndate = dt.Year * 10000 + dt.Month * 100 + dt.Day;
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,historicalData,The following statement contains a magic number: int ndate = dt.Year * 10000 + dt.Month * 100 + dt.Day;
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,historicalData,The following statement contains a magic number: int ntime = dt.Hour * 10000 + dt.Minute * 100 + dt.Second;
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,historicalData,The following statement contains a magic number: int ntime = dt.Hour * 10000 + dt.Minute * 100 + dt.Second;
Magic Number,TradingBase,IBClient,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Brokers\IBClient.cs,GetMultiplier,The following statement contains a magic number: multiplier = 50;
Magic Number,TradingBase,Order,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Order\Order.cs,Deserialize,The following statement contains a magic number: o.Id = Convert.ToInt64(rec[2]);
Magic Number,TradingBase,Order,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Order\Order.cs,Deserialize,The following statement contains a magic number: o.Account = rec[3];
Magic Number,TradingBase,Order,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Order\Order.cs,Deserialize,The following statement contains a magic number: o.FullSymbol = rec[4];
Magic Number,TradingBase,Order,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Order\Order.cs,Deserialize,The following statement contains a magic number: o.OrderSize = Convert.ToInt32(rec[5]);
Magic Number,TradingBase,Order,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Order\Order.cs,Deserialize,The following statement contains a magic number: o.LimitPrice = Convert.ToDecimal(rec[6]' System.Globalization.CultureInfo.InvariantCulture);
Magic Number,TradingBase,Order,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Order\Order.cs,Deserialize,The following statement contains a magic number: o.StopPrice = Convert.ToDecimal(rec[7]' System.Globalization.CultureInfo.InvariantCulture);
Magic Number,TradingBase,Order,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Order\Order.cs,Deserialize,The following statement contains a magic number: o.TrailPrice = Convert.ToDecimal(rec[8]' System.Globalization.CultureInfo.InvariantCulture);
Magic Number,TradingBase,Order,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Order\Order.cs,Deserialize,The following statement contains a magic number: o.Currency = rec[9];
Magic Number,TradingBase,Order,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Order\Order.cs,Deserialize,The following statement contains a magic number: Enum.TryParse<TimeInForce>(rec[10]' out tif);
Magic Number,TradingBase,PerformanceEvaluator,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\PerformanceAnalysis\PerformanceEvaluator.cs,GenerateReports,The following statement contains a magic number: AvgPerTrade = Math.Round((losepl + winpl) / Trades' 2);
Magic Number,TradingBase,PerformanceEvaluator,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\PerformanceAnalysis\PerformanceEvaluator.cs,GenerateReports,The following statement contains a magic number: AvgLoser = Losers == 0 ? 0 : Math.Round(losepl / Losers' 2);
Magic Number,TradingBase,PerformanceEvaluator,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\PerformanceAnalysis\PerformanceEvaluator.cs,GenerateReports,The following statement contains a magic number: AvgWin = Winners == 0 ? 0 : Math.Round(winpl / Winners' 2);
Magic Number,TradingBase,PerformanceEvaluator,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\PerformanceAnalysis\PerformanceEvaluator.cs,GenerateReports,The following statement contains a magic number: MoneyInUse = Math.Round(Calc.Max(moneyinuse.ToArray())' 2);
Magic Number,TradingBase,PerformanceEvaluator,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\PerformanceAnalysis\PerformanceEvaluator.cs,GenerateReports,The following statement contains a magic number: MaxPL = Math.Round(Calc.Max(tradepnl.ToArray())' 2);
Magic Number,TradingBase,PerformanceEvaluator,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\PerformanceAnalysis\PerformanceEvaluator.cs,GenerateReports,The following statement contains a magic number: MinPL = Math.Round(Calc.Min(tradepnl.ToArray())' 2);
Magic Number,TradingBase,PerformanceEvaluator,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\PerformanceAnalysis\PerformanceEvaluator.cs,GenerateReports,The following statement contains a magic number: GrossPerDay = Math.Round(GrossPL / days.Count' 2);
Magic Number,TradingBase,PerformanceEvaluator,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\PerformanceAnalysis\PerformanceEvaluator.cs,GenerateReports,The following statement contains a magic number: GrossPerSymbol = Math.Round(GrossPL / _positions.Count' 2);
Magic Number,TradingBase,PerformanceEvaluator,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\PerformanceAnalysis\PerformanceEvaluator.cs,GenerateReports,The following statement contains a magic number: SharpeRatio = tradepnl.Count < 2 ? 0 : Math.Round(Calc.SharpeRatio(tradepnl[tradepnl.Count - 1]' Calc.StdDev(tradepnl.ToArray())' (RiskFreeRate * MoneyInUse * DaysTraded/252))' 3);
Magic Number,TradingBase,PerformanceEvaluator,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\PerformanceAnalysis\PerformanceEvaluator.cs,GenerateReports,The following statement contains a magic number: SharpeRatio = tradepnl.Count < 2 ? 0 : Math.Round(Calc.SharpeRatio(tradepnl[tradepnl.Count - 1]' Calc.StdDev(tradepnl.ToArray())' (RiskFreeRate * MoneyInUse * DaysTraded/252))' 3);
Magic Number,TradingBase,PerformanceEvaluator,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\PerformanceAnalysis\PerformanceEvaluator.cs,GenerateReports,The following statement contains a magic number: SharpeRatio = tradepnl.Count < 2 ? 0 : Math.Round(Calc.SharpeRatio(tradepnl[tradepnl.Count - 1]' Calc.StdDev(tradepnl.ToArray())' (RiskFreeRate * MoneyInUse * DaysTraded/252))' 3);
Magic Number,TradingBase,PerformanceEvaluator,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\PerformanceAnalysis\PerformanceEvaluator.cs,CalculateIBCommissions,The following statement contains a magic number: return (decimal)Math.Max(0.005 * Math.Abs(t.TradeSize)' 1);
Magic Number,TradingBase,Position,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Security\Position.cs,Deserialize,The following statement contains a magic number: int size = Convert.ToInt32(r[2]);
Magic Number,TradingBase,Position,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Security\Position.cs,Deserialize,The following statement contains a magic number: decimal cpl = Convert.ToDecimal(r[4]' System.Globalization.CultureInfo.InvariantCulture);
Magic Number,TradingBase,Position,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Security\Position.cs,Deserialize,The following statement contains a magic number: string act = r[5];
Magic Number,TradingBase,Security,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Security\Security.cs,Security,The following statement contains a magic number: _exchange = str[2];
Magic Number,TradingBase,Security,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Security\Security.cs,Security,The following statement contains a magic number: _multiplier = Int32.Parse(str[3]);
Magic Number,TradingBase,Security,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Security\Security.cs,Security,The following statement contains a magic number: str.Length > 3 && str[3] != ""
Magic Number,TradingBase,Security,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Security\Security.cs,Security,The following statement contains a magic number: str.Length > 3 && str[3] != ""
Magic Number,TradingBase,Tick,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Tick\Tick.cs,Deserialize,The following statement contains a magic number: int.TryParse(r[2]' out i)
Magic Number,TradingBase,Tick,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Tick\Tick.cs,Deserialize,The following statement contains a magic number: decimal.TryParse(r[3]' System.Globalization.NumberStyles.Any' System.Globalization.CultureInfo.InvariantCulture' out d)
Magic Number,TradingBase,Tick,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Tick\Tick.cs,Deserialize,The following statement contains a magic number: int.TryParse(r[4]' out i)
Magic Number,TradingBase,Tick,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Tick\Tick.cs,Deserialize,The following statement contains a magic number: decimal.TryParse(r[5]' System.Globalization.NumberStyles.Any' System.Globalization.CultureInfo.InvariantCulture' out d)
Magic Number,TradingBase,Tick,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Tick\Tick.cs,Deserialize,The following statement contains a magic number: int.TryParse(r[6]' out i)
Magic Number,TradingBase,Tick,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Tick\Tick.cs,Deserialize,The following statement contains a magic number: decimal.TryParse(r[7]' System.Globalization.NumberStyles.Any' System.Globalization.CultureInfo.InvariantCulture' out d)
Magic Number,TradingBase,Tick,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Tick\Tick.cs,Deserialize,The following statement contains a magic number: int.TryParse(r[8]' out i)
Magic Number,TradingBase,Tick,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Tick\Tick.cs,Deserialize,The following statement contains a magic number: int.TryParse(r[9]' out i)
Magic Number,TradingBase,Trade,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Order\Trade.cs,Deserialize,The following statement contains a magic number: ts.Length < 14
Magic Number,TradingBase,Trade,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Order\Trade.cs,Deserialize,The following statement contains a magic number: t.TradeDate = Convert.ToInt32(ts[2]' System.Globalization.CultureInfo.InvariantCulture);
Magic Number,TradingBase,Trade,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Order\Trade.cs,Deserialize,The following statement contains a magic number: t.TradeTime = Convert.ToInt32(ts[3]' System.Globalization.CultureInfo.InvariantCulture);
Magic Number,TradingBase,Trade,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Order\Trade.cs,Deserialize,The following statement contains a magic number: t.FullSymbol = ts[4];
Magic Number,TradingBase,Trade,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Order\Trade.cs,Deserialize,The following statement contains a magic number: t.TradeSize = Convert.ToInt32(ts[5]' System.Globalization.CultureInfo.InvariantCulture);
Magic Number,TradingBase,Trade,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Order\Trade.cs,Deserialize,The following statement contains a magic number: t.TradePrice = Convert.ToDecimal(ts[6]' System.Globalization.CultureInfo.InvariantCulture);
Magic Number,TradingBase,Calc,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Calc.cs,StdDev,The following statement contains a magic number: decimal stdev = (decimal)Math.Pow((double)tmp' .5);
Magic Number,TradingBase,ConfigManager,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\ConfigManager.cs,ConfigManager,The following statement contains a magic number: Port = 7496;
Magic Number,TradingBase,ConfigManager,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\ConfigManager.cs,ConfigManager,The following statement contains a magic number: TickQueueCapacity = 50000;
Magic Number,TradingBase,ConfigManager,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\ConfigManager.cs,ConfigManager,The following statement contains a magic number: TickSampleTime = 10;
Magic Number,TradingBase,ConfigManager,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\ConfigManager.cs,ConfigManager,The following statement contains a magic number: DailyOrderCapacity = 500;
Magic Number,TradingBase,ConfigManager,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\ConfigManager.cs,ConfigManager,The following statement contains a magic number: DecimalPlace = 2;
Magic Number,TradingBase,OffsetInfo,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\OffsetInfo.cs,ToString,The following statement contains a magic number: return ToString(2);
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,ToIntDate,The following statement contains a magic number: return (dt.Year * 10000) + (dt.Month * 100) + dt.Day;
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,ToIntDate,The following statement contains a magic number: return (dt.Year * 10000) + (dt.Month * 100) + dt.Day;
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,ToIntTime,The following statement contains a magic number: return (dt.Hour * 10000) + (dt.Minute * 100) + (dt.Second);
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,ToIntTime,The following statement contains a magic number: return (dt.Hour * 10000) + (dt.Minute * 100) + (dt.Second);
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,ToIntTime,The following statement contains a magic number: return hour * 10000 + min * 100 + sec;
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,ToIntTime,The following statement contains a magic number: return hour * 10000 + min * 100 + sec;
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,ToDateTime,The following statement contains a magic number: int sec = time % 100;
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,ToDateTime,The following statement contains a magic number: int hm = time % 10000;
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,ToDateTime,The following statement contains a magic number: int hour = (int)((time - hm) / 10000);
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,ToDateTime,The following statement contains a magic number: int min = (time - (hour * 10000)) / 100;
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,ToDateTime,The following statement contains a magic number: int min = (time - (hour * 10000)) / 100;
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,ToDateTime,The following statement contains a magic number: sec -= 60;
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,ToDateTime,The following statement contains a magic number: sec > 59
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,ToDateTime,The following statement contains a magic number: min -= 60;
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,ToDateTime,The following statement contains a magic number: min > 59
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,ToDateTime,The following statement contains a magic number: int ym = (date % 10000);
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,ToDateTime,The following statement contains a magic number: year = (int)((date - ym) / 10000);
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,ToDateTime,The following statement contains a magic number: int mm = ym % 100;
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,ToDateTime,The following statement contains a magic number: month = (int)((ym - mm) / 100);
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,IntTimeToIntTimeSpan,The following statement contains a magic number: int s1 = time % 100;
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,IntTimeToIntTimeSpan,The following statement contains a magic number: int m1 = ((time - s1) / 100) % 100;
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,IntTimeToIntTimeSpan,The following statement contains a magic number: int m1 = ((time - s1) / 100) % 100;
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,IntTimeToIntTimeSpan,The following statement contains a magic number: int h1 = (int)((time - (m1 * 100) - s1) / 10000);
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,IntTimeToIntTimeSpan,The following statement contains a magic number: int h1 = (int)((time - (m1 * 100) - s1) / 10000);
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,IntTimeToIntTimeSpan,The following statement contains a magic number: return h1 * 3600 + m1 * 60 + s1;
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,IntTimeToIntTimeSpan,The following statement contains a magic number: return h1 * 3600 + m1 * 60 + s1;
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,IntTimeAdd,The following statement contains a magic number: int s1 = firsttime % 100;
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,IntTimeAdd,The following statement contains a magic number: int m1 = ((firsttime - s1) / 100) % 100;
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,IntTimeAdd,The following statement contains a magic number: int m1 = ((firsttime - s1) / 100) % 100;
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,IntTimeAdd,The following statement contains a magic number: int h1 = (int)((firsttime - m1 * 100 - s1) / 10000);
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,IntTimeAdd,The following statement contains a magic number: int h1 = (int)((firsttime - m1 * 100 - s1) / 10000);
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,IntTimeAdd,The following statement contains a magic number: m1 += (int)(s1 / 60);
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,IntTimeAdd,The following statement contains a magic number: s1 = s1 % 60;
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,IntTimeAdd,The following statement contains a magic number: s1 >= 60
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,IntTimeAdd,The following statement contains a magic number: h1 += (int)(m1 / 60);
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,IntTimeAdd,The following statement contains a magic number: m1 = m1 % 60;
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,IntTimeAdd,The following statement contains a magic number: m1 >= 60
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,IntTimeAdd,The following statement contains a magic number: int sum = h1 * 10000 + m1 * 100 + s1;
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,IntTimeAdd,The following statement contains a magic number: int sum = h1 * 10000 + m1 * 100 + s1;
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,Sendemail,The following statement contains a magic number: smtpServer.Port = 587;
Magic Number,TradingBase,Util,D:\research\architectureSmells\repos\letianzj_QuantTrading\Source\TradingBase\TradingBase\Util\Util.cs,GmailAccount,The following statement contains a magic number: string[] ret = new string[2];
