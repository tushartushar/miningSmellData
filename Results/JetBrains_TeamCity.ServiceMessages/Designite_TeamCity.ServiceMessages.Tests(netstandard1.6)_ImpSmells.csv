Implementation smell,Namespace,Class,File,Method,Description
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Read,ServiceMessageParserPerformanceTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Read\ServiceMessageParserPerformanceTest.cs,GenerateTestData,The length of the statement  "                sb.AppendFormat("##teamcity[package Id='CommonServiceLocator{0}' Version='1.0.{0}' IsLatestVersion='true' teamcity.artifactPath='some/package/download/CommonServiceLocator.1.0.{0}.nupkg' Authors='Microsoft' Description='The Common Service Locator library contains a shared interface for service location which application and framework developers can reference. The library provides an abstraction over IoC containers and service locators. Using the library allows an application to indirectly access the capabilities without relying on hard references. The hope is that using this library' third-party applications and frameworks can begin to leverage IoC/Service Location without tying themselves down to a specific implementation.'  LastUpdated='2011-10-21T16:34:09Z' LicenseUrl='http://commonservicelocator.codeplex.com/license' PackageHash='RJjv0yxm+Fk/ak/CVMTGr0ng7g/nudkVYos4eQrIDpth3BdE1j7J2ddRm8FXtOoIZbgDqTU6hKq5zoackwL3HQ==' PackageHashAlgorithm='SHA512' PackageSize='37216' ProjectUrl='http://commonservicelocator.codeplex.com/' RequireLicenseAcceptance='false' TeamCityBuildId='42' TeamCityDownloadUrl='/app/nuget-packages/jonnyzzz5Z8mBocMOdtH4CJhxRaev11WxcWpHVCrrulezz/42/some/package/download/CommonServiceLocator.1.0.nupkg']"' sz); " is 1247.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Read,ServiceMessageParserPerformanceTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Read\ServiceMessageParserPerformanceTest.cs,MeasureTime,The length of the statement  "            Assert.Fail("Action is expected to complete in {0}' but was [{1}]"' time.TotalMilliseconds' string.Join("' "' result.Select(x => x.TotalMilliseconds.ToString()).ToArray())); " is 173.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Read,ServiceMessageParserTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Read\ServiceMessageParserTest.cs,BrokenStream_Combinatorics,The length of the statement  "                "##teamcity[name 'a'] ##teamcity[name 'a'] ##teamcity[name 'a']  ##teamcity[name 'a'] ##teamcity[name a  =  'a' b='qqq|n'  ]\t##teamcity[name a='z']\r\n##teamcity[name a='z']\r##teamcity[name a='z']##teamcity[package Id='CommonServiceLocator' Version='1.0' Authors='Microsoft' Description='The Common Service Locator library contains a shared interface for service location which application and framework developers can reference. The library provides an abstraction over IoC containers and service locators. Using the library allows an application to indirectly access the capabilities without relying on hard references. The hope is that using this library' third-party applications and frameworks can begin to leverage IoC/Service Location without tying themselves down to a specific implementation.' IsLatestVersion='true' LastUpdated='2011-10-21T16:34:09Z' LicenseUrl='http://commonservicelocator.codeplex.com/license' PackageHash='RJjv0yxm+Fk/ak/CVMTGr0ng7g/nudkVYos4eQrIDpth3BdE1j7J2ddRm8FXtOoIZbgDqTU6hKq5zoackwL3HQ==' PackageHashAlgorithm='SHA512' PackageSize='37216' ProjectUrl='http://commonservicelocator.codeplex.com/' RequireLicenseAcceptance='false' TeamCityBuildId='42' TeamCityDownloadUrl='/repository/download/bt/42:id/null']"; " is 1246.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Read,ServiceMessageParserTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Read\ServiceMessageParserTest.cs,BrokenStream_H,The length of the statement  "            const string text = @"                 ##teamcity[package Id='CommonServiceLocator' Version='1.0' Authors='Microsoft' Description='The Common Service Locator library contains a shared interface for service location which application and framework developers can reference. The library provides an abstraction over IoC containers and service locators. Using the library allows an application to indirectly access the capabilities without relying on hard references. The hope is that using this library' third-party applications and frameworks can begin to leverage IoC/Service Location without tying themselves down to a specific implementation.' IsLatestVersion='true' LastUpdated='2011-10-21T16:34:09Z' LicenseUrl='http://commonservicelocator.codeplex.com/license' PackageHash='RJjv0yxm+Fk/ak/CVMTGr0ng7g/nudkVYos4eQrIDpth3BdE1j7J2ddRm8FXtOoIZbgDqTU6hKq5zoackwL3HQ==' PackageHashAlgorithm='SHA512' PackageSize='37216' ProjectUrl='http://commonservicelocator.codeplex.com/' RequireLicenseAcceptance='false' TeamCityBuildId='42' TeamCityDownloadUrl='/repository/download/bt/42:id/null']                  "; " is 1105.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Read,ServiceMessageParserTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Read\ServiceMessageParserTest.cs,BrokenStream_I,The length of the statement  "                @"##teamcity[package Id='CommonServiceLocator' Version='1.0' Authors='Microsoft' Description='The Common Service Locator library contains a shared interface for service location which application and framework developers can reference. The library provides an abstraction over IoC containers and service locators. Using the library allows an application to indirectly access the capabilities without relying on hard references. The hope is that using this library' third-party applications and frameworks can begin to leverage IoC/Service Location without tying themselves down to a specific implementation.' IsLatestVersion='true' LastUpdated='2011-10-21T16:34:09Z' LicenseUrl='http://commonservicelocator.codeplex.com/license' PackageHash='RJjv0yxm+Fk/ak/CVMTGr0ng7g/nudkVYos4eQrIDpth3BdE1j7J2ddRm8FXtOoIZbgDqTU6hKq5zoackwL3HQ==' PackageHashAlgorithm='SHA512' PackageSize='37216' ProjectUrl='http://commonservicelocator.codeplex.com/' RequireLicenseAcceptance='false' TeamCityBuildId='42' TeamCityDownloadUrl='/repository/download/bt/42:id/null'] " is 1048.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Read,ServiceMessageParserTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Read\ServiceMessageParserTest.cs,BrokenStream_I,The length of the statement  "            new ServiceMessageParser().ParseServiceMessages(new StringWrapper(text)).Where(x => true).OrderBy(x => x.Name).ToArray(); " is 121.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Read,ServiceMessageParserTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Read\ServiceMessageParserTest.cs,BrokenStream_I,The length of the statement  "            new ServiceMessageParser().ParseServiceMessages(new StringWrapper(text.Trim())).Where(x => true).OrderBy(x => x.Name).ToArray(); " is 128.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Read,ServiceMessageParserTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Read\ServiceMessageParserTest.cs,BrokenStream_I,The length of the statement  "            new ServiceMessageParser().ParseServiceMessages(new StreamReader(memoryStream)).Where(x => true).OrderBy(x => x.Name).ToArray(); " is 128.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Read,ServiceMessageParserTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Read\ServiceMessageParserTest.cs,BrokenStream_J,The length of the statement  "            const string text = @"                 ##teamcity[package Id='CommonServiceLocator' Version='1.0' Authors='Microsoft' Description='The Common Service Locator library contains a shared interface for service location which application and framework developers can reference. The library provides an abstraction over IoC containers and service locators. Using the library allows an application to indirectly access the capabilities without relying on hard references. The hope is that using this library' third-party applications and frameworks can begin to leverage IoC/Service Location without tying themselves down to a specific implementation.' IsLatestVersion='true' LastUpdated='2011-10-21T16:34:09Z' LicenseUrl='http://commonservicelocator.codeplex.com/license' PackageHash='RJjv0yxm+Fk/ak/CVMTGr0ng7g/nudkVYos4eQrIDpth3BdE1j7J2ddRm8FXtOoIZbgDqTU6hKq5zoackwL3HQ==' PackageHashAlgorithm='SHA512' PackageSize='37216' ProjectUrl='http://commonservicelocator.codeplex.com/' RequireLicenseAcceptance='false' TeamCityBuildId='42' TeamCityDownloadUrl='/repository/download/bt/42:id/null']                  "; " is 1105.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Read,ServiceMessageParserTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Read\ServiceMessageParserTest.cs,ShouldParseService_simpleMessages_multi2,The length of the statement  "            var sr = new StringWrapper("##teamcity[name 'a']\r ##teamcity[name 'a']\n ##teamcity[name 'a'] \r\n ##teamcity[name 'a']"); " is 123.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Read,ServiceMessageParserTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Read\ServiceMessageParserTest.cs,ShouldParseString,The length of the statement  "            var result = new ServiceMessageParser().ParseServiceMessages("##teamcity[name    a='1\"|'|n|r|x|l|p|||[|]'     b='2\"|'|n|r|x|l|p|||[|]'   ]").ToArray(); " is 153.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Write,ServiceMessageFormatterTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\ServiceMessageFormatterTest.cs,ErrorOnEmptyField,The length of the statement  "            Assert.Throws<InvalidOperationException>(() => new ServiceMessageFormatter().FormatMessage("aaa"' new Dictionary<string' string> {{""' ""}})); " is 142.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Write,ServiceMessageFormatterTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\ServiceMessageFormatterTest.cs,ErrorOnEmptyMessage,The length of the statement  "            Assert.Throws<ArgumentException>(() => new ServiceMessageFormatter().FormatMessage(""' new Dictionary<string' string>())); " is 122.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Write,ServiceMessageFormatterTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\ServiceMessageFormatterTest.cs,ErrorOnEscapingField,The length of the statement  "            Assert.Throws<InvalidOperationException>(() => new ServiceMessageFormatter().FormatMessage("aaa"' new Dictionary<string' string> {{"\r\n"' ""}})); " is 146.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Write,ServiceMessageFormatterTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\ServiceMessageFormatterTest.cs,ErrorOnEscapingMessage,The length of the statement  "            Assert.Throws<ArgumentException>(() => new ServiceMessageFormatter().FormatMessage("\r\n"' new Dictionary<string' string>())); " is 126.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Write,ServiceMessageFormatterTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\ServiceMessageFormatterTest.cs,SupportArray2,The length of the statement  "                new ServiceMessageFormatter().FormatMessage("rulez"' new ServiceMessageProperty("qqq"' "ppp")' new ServiceMessageProperty("www"' "xxx"))); " is 138.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Write,ServiceMessageFormatterTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\ServiceMessageFormatterTest.cs,SupportEnumerable2,The length of the statement  "                new ServiceMessageFormatter().FormatMessage("rulez"' new ServiceMessageProperty("qqq"' "ppp")' new ServiceMessageProperty("rrr"' "wqe"))); " is 138.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Write.Specials,TeamCityCompilationBlockWriterTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\Specials\TeamCityCompilationBlockWriterTest.cs,TestOpenCloseBlock,The length of the statement  "            DoTest(x => x.OpenCompilationBlock("aaa").Dispose()' "##teamcity[compilationStarted compiler='aaa']"' "##teamcity[compilationFinished compiler='aaa']"); " is 152.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Write.Specials,TeamCityFlowWriterBaseTest<T>,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\Specials\TeamCityFlowWriterBaseTest.cs,Create,The length of the statement  "            return Create(new FlowServiceMessageWriter(proc' new DefaultFlowIdGenerator()' Enumerable.Empty<IServiceMessageUpdater>())); " is 124.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Write.Specials,FlowToStringProcessor,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\Specials\TeamCityFlowWriterBaseTest.cs,AddServiceMessage,The length of the statement  "                    serviceMessage = new PatchedServiceMessage(serviceMessage) {{"parent"' FlowToString(serviceMessage.GetValue("parent"))}}; " is 121.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Write.Specials,TeamCityMessageWriterTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\Specials\TeamCityMessageWriterTest.cs,TestErrorMessage,The length of the statement  "            DoTest(x => x.WriteError("Opps")' "##teamcity[message text='Opps' status='ERROR' tc:tags='tc:parseServiceMessagesInside']"); " is 124.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Write.Specials,TeamCityMessageWriterTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\Specials\TeamCityMessageWriterTest.cs,TestErrorMessage2,The length of the statement  "            DoTest(x => x.WriteError("Opps"' "Es gefaehlt mir gut")' "##teamcity[message text='Opps' status='ERROR' tc:tags='tc:parseServiceMessagesInside' errorDetails='Es gefaehlt mir gut']"); " is 182.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Write.Specials,TeamCityMessageWriterTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\Specials\TeamCityMessageWriterTest.cs,TestNormalMessage,The length of the statement  "            DoTest(x => x.WriteMessage("Hello TeamCity World")' "##teamcity[message text='Hello TeamCity World' status='NORMAL' tc:tags='tc:parseServiceMessagesInside']"); " is 159.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Write.Specials,TeamCityMessageWriterTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\Specials\TeamCityMessageWriterTest.cs,TestWarningMessage,The length of the statement  "            DoTest(x => x.WriteWarning("Opps")' "##teamcity[message text='Opps' status='WARNING' tc:tags='tc:parseServiceMessagesInside']"); " is 128.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Write.Specials,TeamCityTestsWriterTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\Specials\TeamCityTestsWriterTest.cs,TestSuiteOpenClose,The length of the statement  "            DoTest(x => x.OpenTestSuite("suite3").Dispose()' "##teamcity[testSuiteStarted name='suite3']"' "##teamcity[testSuiteFinished name='suite3']"); " is 142.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Write.Specials,TeamCityTestsWriterTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\Specials\TeamCityTestsWriterTest.cs,TestTestOpenClose,The length of the statement  "            DoTest(x => x.OpenTest("suite3").Dispose()' "##teamcity[testStarted name='suite3' captureStandardOutput='false']"' "##teamcity[testFinished name='suite3']"); " is 157.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Write.Specials,TeamCityTestWriterTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\Specials\TeamCityTestWriterTest.cs,TestFailed,The length of the statement  "            DoTest(x => x.WriteFailed("aaa"' "ooo")' "##teamcity[testFailed name='BadaBumBigBadaBum' message='aaa' details='ooo']"); " is 120.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Write.Specials,TeamCityTestWriterTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\Specials\TeamCityTestWriterTest.cs,TestStdErr,The length of the statement  "            DoTest(x => x.WriteErrOutput("outp4ut")' "##teamcity[testStdErr name='BadaBumBigBadaBum' out='outp4ut' tc:tags='tc:parseServiceMessagesInside']"); " is 146.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Write.Specials,TeamCityTestWriterTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\Specials\TeamCityTestWriterTest.cs,TestStdOut,The length of the statement  "            DoTest(x => x.WriteStdOutput("outp4uz")' "##teamcity[testStdOut name='BadaBumBigBadaBum' out='outp4uz' tc:tags='tc:parseServiceMessagesInside']"); " is 146.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Write.Specials,TeamCityTestWriterTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\Specials\TeamCityTestWriterTest.cs,TestWriteTextValue,The length of the statement  "            DoTest(x => x.WriteValue("strVal"' "myVal")' "##teamcity[testMetadata testName='BadaBumBigBadaBum' value='strVal' name='myVal']"); " is 130.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Write.Specials,TeamCityTestWriterTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\Specials\TeamCityTestWriterTest.cs,TestWriteNumber,The length of the statement  "            DoTest(x => x.WriteValue(value' "myVal")' "##teamcity[testMetadata testName='BadaBumBigBadaBum' type='number' value='" + expectedValueInMessage + "' name='myVal']"); " is 165.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Write.Specials,TeamCityTestWriterTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\Specials\TeamCityTestWriterTest.cs,TestWriteLink,The length of the statement  "            DoTest(x => x.WriteLink("http://abc.com"' "abc")' "##teamcity[testMetadata testName='BadaBumBigBadaBum' type='link' value='http://abc.com' name='abc']"); " is 153.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Write.Specials,TeamCityTestWriterTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\Specials\TeamCityTestWriterTest.cs,TestWriteFile,The length of the statement  "            DoTest(x => x.WriteFile("abc.txt"' "abc")' "##teamcity[testMetadata testName='BadaBumBigBadaBum' type='artifact' value='abc.txt' name='abc']"); " is 143.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Write.Specials,TeamCityTestWriterTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\Specials\TeamCityTestWriterTest.cs,TestWriteFileWithoutDescription,The length of the statement  "            DoTest(x => x.WriteFile("abc.txt")' "##teamcity[testMetadata testName='BadaBumBigBadaBum' type='artifact' value='abc.txt']"); " is 125.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Write.Specials,TeamCityTestWriterTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\Specials\TeamCityTestWriterTest.cs,TestWriteImage,The length of the statement  "            DoTest(x => x.WriteImage("abc.jpg"' "abc")' "##teamcity[testMetadata testName='BadaBumBigBadaBum' type='image' value='abc.jpg' name='abc']"); " is 141.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Write.Specials,TeamCityTestWriterTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\Specials\TeamCityTestWriterTest.cs,TestWriteImageWithoutDescription,The length of the statement  "            DoTest(x => x.WriteImage("abc.jpg")' "##teamcity[testMetadata testName='BadaBumBigBadaBum' type='image' value='abc.jpg']"); " is 123.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Write.Specials,TeamCityWriterBaseTest<T>,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\Specials\TeamCityWriterBaseTest.cs,DoTestImpl,The length of the statement  "            Func<string' string[]> preprocess = s => s.Split("\r\n".ToCharArray()).Select(x => x.Trim()).Where(x => x.Length > 0).ToArray(); " is 128.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Write.Updaters,FlowMessageUpdaterTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\Updaters\FlowMessageUpdaterTest.cs,TestFlowIdUpdated_Attributes,The length of the statement  "            var message = upd.UpdateServiceMessage(new ServiceMessageParser().ParseServiceMessages("##teamcity[simple a='message']").Single()); " is 131.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Write.Updaters,FlowMessageUpdaterTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\Updaters\FlowMessageUpdaterTest.cs,TestFlowIdUpdated_Simple,The length of the statement  "            var message = upd.UpdateServiceMessage(new ServiceMessageParser().ParseServiceMessages("##teamcity[simple 'message']").Single()); " is 129.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Write.Updaters,TimestampMessageUpdaterTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\Updaters\TimestampMessageUpdaterTest.cs,TestTimestampUpdated_Attributes,The length of the statement  "            var message = upd.UpdateServiceMessage(new ServiceMessageParser().ParseServiceMessages("##teamcity[simple a='message']").Single()); " is 131.
Long Statement,JetBrains.TeamCity.ServiceMessages.Tests.Write.Updaters,TimestampMessageUpdaterTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\Updaters\TimestampMessageUpdaterTest.cs,TestTimestampUpdated_Simple,The length of the statement  "            var message = upd.UpdateServiceMessage(new ServiceMessageParser().ParseServiceMessages("##teamcity[simple 'message']").Single()); " is 129.
Magic Number,JetBrains.TeamCity.ServiceMessages.Tests.Read,ServiceMessageParserPerformanceTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Read\ServiceMessageParserPerformanceTest.cs,Parse1000,The following statement contains a magic number: var text = GenerateTestData(1000);
Magic Number,JetBrains.TeamCity.ServiceMessages.Tests.Read,ServiceMessageParserPerformanceTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Read\ServiceMessageParserPerformanceTest.cs,Parse1000,The following statement contains a magic number: MeasureTime(TimeSpan.FromMilliseconds(100)' 10' () => trash.AddRange(ps.ParseServiceMessages(text)));
Magic Number,JetBrains.TeamCity.ServiceMessages.Tests.Read,ServiceMessageParserPerformanceTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Read\ServiceMessageParserPerformanceTest.cs,Parse1000,The following statement contains a magic number: MeasureTime(TimeSpan.FromMilliseconds(100)' 10' () => trash.AddRange(ps.ParseServiceMessages(text)));
Magic Number,JetBrains.TeamCity.ServiceMessages.Tests.Read,ServiceMessageParserPerformanceTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Read\ServiceMessageParserPerformanceTest.cs,Parse10000,The following statement contains a magic number: var text = GenerateTestData(10000);
Magic Number,JetBrains.TeamCity.ServiceMessages.Tests.Read,ServiceMessageParserPerformanceTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Read\ServiceMessageParserPerformanceTest.cs,Parse10000,The following statement contains a magic number: MeasureTime(TimeSpan.FromMilliseconds(1000)' 10' () => trash.AddRange(ps.ParseServiceMessages(text)));
Magic Number,JetBrains.TeamCity.ServiceMessages.Tests.Read,ServiceMessageParserPerformanceTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Read\ServiceMessageParserPerformanceTest.cs,Parse10000,The following statement contains a magic number: MeasureTime(TimeSpan.FromMilliseconds(1000)' 10' () => trash.AddRange(ps.ParseServiceMessages(text)));
Magic Number,JetBrains.TeamCity.ServiceMessages.Tests.Read,ServiceMessageParserTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Read\ServiceMessageParserTest.cs,BrokenStream_Combinatorics,The following statement contains a magic number: Assert.IsTrue(result.Contains(9));
Magic Number,JetBrains.TeamCity.ServiceMessages.Tests.Read,ServiceMessageParserTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Read\ServiceMessageParserTest.cs,ShouldParseService_complexMessage_escaping,The following statement contains a magic number: Assert.AreEqual(2' msg.Keys.Count());
Magic Number,JetBrains.TeamCity.ServiceMessages.Tests.Read,ServiceMessageParserTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Read\ServiceMessageParserTest.cs,ShouldParseService_complexMessage_multi,The following statement contains a magic number: Assert.AreEqual(3' result.Length);
Magic Number,JetBrains.TeamCity.ServiceMessages.Tests.Read,ServiceMessageParserTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Read\ServiceMessageParserTest.cs,ShouldParseService_complexMessage_multi2,The following statement contains a magic number: Assert.AreEqual(3' result.Length);
Magic Number,JetBrains.TeamCity.ServiceMessages.Tests.Read,ServiceMessageParserTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Read\ServiceMessageParserTest.cs,ShouldParseService_complexMessage0,The following statement contains a magic number: Assert.AreEqual(2' msg.Keys.Count());
Magic Number,JetBrains.TeamCity.ServiceMessages.Tests.Read,ServiceMessageParserTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Read\ServiceMessageParserTest.cs,ShouldParseService_complexMessage2,The following statement contains a magic number: Assert.AreEqual(2' msg.Keys.Count());
Magic Number,JetBrains.TeamCity.ServiceMessages.Tests.Read,ServiceMessageParserTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Read\ServiceMessageParserTest.cs,ShouldParseService_multi,The following statement contains a magic number: Assert.AreEqual(3' result.Length);
Magic Number,JetBrains.TeamCity.ServiceMessages.Tests.Read,ServiceMessageParserTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Read\ServiceMessageParserTest.cs,ShouldParseService_multi,The following statement contains a magic number: msg = result[2];
Magic Number,JetBrains.TeamCity.ServiceMessages.Tests.Read,ServiceMessageParserTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Read\ServiceMessageParserTest.cs,ShouldParseService_simpleMessages_multi,The following statement contains a magic number: Assert.AreEqual(4' result.Length);
Magic Number,JetBrains.TeamCity.ServiceMessages.Tests.Read,ServiceMessageParserTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Read\ServiceMessageParserTest.cs,ShouldParseService_simpleMessages_multi2,The following statement contains a magic number: Assert.AreEqual(4' result.Length);
Magic Number,JetBrains.TeamCity.ServiceMessages.Tests.Read,ServiceMessageParserTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Read\ServiceMessageParserTest.cs,ShouldParseString,The following statement contains a magic number: Assert.AreEqual(2' msg.Keys.Count());
Magic Number,JetBrains.TeamCity.ServiceMessages.Tests.Write,ServiceMessageFormatterTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\ServiceMessageFormatterTest.cs,SupportAnonymousType,The following statement contains a magic number: Assert.AreEqual(                  "##teamcity[rulez Version='ver' Vika='678' Int='42']"'                  new ServiceMessageFormatter().FormatMessage("rulez"' new                  {                      Version = "ver"'                      Vika = "678"'                      Int = 42                  }));
Magic Number,JetBrains.TeamCity.ServiceMessages.Tests.Write.Specials,TeamCityTestsWriterTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\Specials\TeamCityTestsWriterTest.cs,TestTestDuration,The following statement contains a magic number: DoTest(x =>                  {                      using (var test = x.OpenTest("test"))                      {                          test.WriteDuration(TimeSpan.FromMilliseconds(1000));                      }                  }'                  "##teamcity[testStarted name='test' captureStandardOutput='false']"'                  "##teamcity[testFinished name='test' duration='1000']");
Magic Number,JetBrains.TeamCity.ServiceMessages.Tests.Write.Specials,TeamCityWriterFlowsTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\Specials\TeamCityWriterFlowsTest.cs,TestFlows_OpenDispose,The following statement contains a magic number: DoTestWithoutAsseert(flowB =>              {                  using (flowB)                  {                      for (var i = 0; i < 100; i++)                          using (flowB.OpenFlow())                          {                              //NOP                          }                  }              });
Magic Number,JetBrains.TeamCity.ServiceMessages.Tests.Write.Specials,TeamCityWriterFlowsTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\Specials\TeamCityWriterFlowsTest.cs,TestFlows_OpenDispose_inverse_order,The following statement contains a magic number: DoTestWithoutAsseert(flowB =>              {                  using (flowB)                  {                      var list = new List<IDisposable>();                      for (var i = 0; i < 100; i++)                          list.Add(flowB.OpenFlow());                      list.Reverse();                      foreach (var d in list)                          d.Dispose();                  }              });
Magic Number,JetBrains.TeamCity.ServiceMessages.Tests.Write.Updaters,FlowMessageUpdaterTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\Updaters\FlowMessageUpdaterTest.cs,TestFlowIdUpdated_Attributes,The following statement contains a magic number: Assert.AreEqual(message.Keys.Count()' 2);
Magic Number,JetBrains.TeamCity.ServiceMessages.Tests.Write.Updaters,TimestampMessageUpdaterTest,D:\research\architectureSmells\repos\JetBrains_TeamCity.ServiceMessages\TeamCity.ServiceMessages.Tests\Write\Updaters\TimestampMessageUpdaterTest.cs,TestTimestampUpdated_Attributes,The following statement contains a magic number: Assert.AreEqual(message.Keys.Count()' 2);
