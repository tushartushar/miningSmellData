Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Nini.Ini,IniReader,C:\repos\twiglet_cs2j\CSharpTranslator\src\Nini\Ini\IniReader.cs,ReadKeyValue,Cyclomatic complexity of the method is 14
Magic Number,Nini.Config,ArgvConfigSource,C:\repos\twiglet_cs2j\CSharpTranslator\src\Nini\Config\ArgvConfigSource.cs,AddSwitch,The following statement contains a magic number: if (shortName != null &&   				(shortName.Length < 1 || shortName.Length > 2)) {  				throw new ArgumentException ("Short name may only be 1 or 2 characters");  			}
Magic Number,Nini.Config,ConfigSourceBase,C:\repos\twiglet_cs2j\CSharpTranslator\src\Nini\Config\ConfigSourceBase.cs,Expand,The following statement contains a magic number: while (true)  			{  				int startIndex = result.IndexOf ("${"' 0);  				if (startIndex == -1) {  					break;  				}    				int endIndex = result.IndexOf ("}"' startIndex + 2);  				if (endIndex == -1) {  					break;  				}    				string search = result.Substring (startIndex + 2'   												  endIndex - (startIndex + 2));    				if (search == key) {  					// Prevent infinite recursion  					throw new ArgumentException   						("Key cannot have a expand value of itself: " + key);  				}    				string replace = ExpandValue (config' search);    				result = result.Replace("${" + search + "}"' replace);  			}
Magic Number,Nini.Config,ConfigSourceBase,C:\repos\twiglet_cs2j\CSharpTranslator\src\Nini\Config\ConfigSourceBase.cs,Expand,The following statement contains a magic number: while (true)  			{  				int startIndex = result.IndexOf ("${"' 0);  				if (startIndex == -1) {  					break;  				}    				int endIndex = result.IndexOf ("}"' startIndex + 2);  				if (endIndex == -1) {  					break;  				}    				string search = result.Substring (startIndex + 2'   												  endIndex - (startIndex + 2));    				if (search == key) {  					// Prevent infinite recursion  					throw new ArgumentException   						("Key cannot have a expand value of itself: " + key);  				}    				string replace = ExpandValue (config' search);    				result = result.Replace("${" + search + "}"' replace);  			}
Magic Number,Nini.Config,ConfigSourceBase,C:\repos\twiglet_cs2j\CSharpTranslator\src\Nini\Config\ConfigSourceBase.cs,Expand,The following statement contains a magic number: while (true)  			{  				int startIndex = result.IndexOf ("${"' 0);  				if (startIndex == -1) {  					break;  				}    				int endIndex = result.IndexOf ("}"' startIndex + 2);  				if (endIndex == -1) {  					break;  				}    				string search = result.Substring (startIndex + 2'   												  endIndex - (startIndex + 2));    				if (search == key) {  					// Prevent infinite recursion  					throw new ArgumentException   						("Key cannot have a expand value of itself: " + key);  				}    				string replace = ExpandValue (config' search);    				result = result.Replace("${" + search + "}"' replace);  			}
Missing Default,Nini.Config,RegistryConfigSource,C:\repos\twiglet_cs2j\CSharpTranslator\src\Nini\Config\RegistryConfigSource.cs,AddMapping,The following switch statement is missing a default case: switch (recurse)  				{  				case RegistryRecurse.None:  					// no recursion  					break;  				case RegistryRecurse.Namespacing:  					AddMapping (registryKey' path + "\\" + subKeys[i]' recurse);  					break;  				case RegistryRecurse.Flattened:  					AddMapping (key' subKeys[i]' recurse);  					break;  				}
Missing Default,Nini.Ini,IniDocument,C:\repos\twiglet_cs2j\CSharpTranslator\src\Nini\Ini\IniDocument.cs,Save,The following switch statement is missing a default case: switch (item.Type)  					{  					case IniType.Key:  						writer.WriteKey (item.Name' item.Value' item.Comment);  						break;  					case IniType.Empty:  						writer.WriteEmpty (item.Comment);  						break;  					}
Missing Default,Nini.Ini,IniDocument,C:\repos\twiglet_cs2j\CSharpTranslator\src\Nini\Ini\IniDocument.cs,LoadReader,The following switch statement is missing a default case: switch (reader.Type)  					{  					case IniType.Empty:  						if (!sectionFound) {  							initialComment.Add (reader.Comment);  						} else {  							section.Set (reader.Comment);  						}    						break;  					case IniType.Section:  						sectionFound = true;  						// If section already exists then overwrite it  						if (sections[reader.Name] != null) {  							sections.Remove (reader.Name);  						}  						section = new IniSection (reader.Name' reader.Comment);  						sections.Add (section);    						break;  					case IniType.Key:  						if (section.GetValue (reader.Name) == null) {   							section.Set (reader.Name' reader.Value' reader.Comment);   						}   						break;  					}
Missing Default,Nini.Ini,IniDocument,C:\repos\twiglet_cs2j\CSharpTranslator\src\Nini\Ini\IniDocument.cs,GetIniReader,The following switch statement is missing a default case: switch (type)  			{  			case IniFileType.Standard:  				// do nothing  				break;  			case IniFileType.PythonStyle:  				result.AcceptCommentAfterKey = false;  				result.SetCommentDelimiters (new char[] { ';'' '#' });  				result.SetAssignDelimiters (new char[] { ':' });  				break;  			case IniFileType.SambaStyle:  				result.AcceptCommentAfterKey = false;  				result.SetCommentDelimiters (new char[] { ';'' '#' });  				result.LineContinuation = true;  				break;  			case IniFileType.MysqlStyle:  				result.AcceptCommentAfterKey = false;  				result.AcceptNoAssignmentOperator = true;  				result.SetCommentDelimiters (new char[] { '#' });  				result.SetAssignDelimiters (new char[] { ':'' '=' });  				break;  			case IniFileType.WindowsStyle:  				result.ConsumeAllKeyText = true;  				break;  			}
Missing Default,Nini.Ini,IniDocument,C:\repos\twiglet_cs2j\CSharpTranslator\src\Nini\Ini\IniDocument.cs,GetIniWriter,The following switch statement is missing a default case: switch (type)  			{  			case IniFileType.Standard:  			case IniFileType.WindowsStyle:  				// do nothing  				break;  			case IniFileType.PythonStyle:  				result.AssignDelimiter = ':';  				result.CommentDelimiter = '#';  				break;  			case IniFileType.SambaStyle:  			case IniFileType.MysqlStyle:  				result.AssignDelimiter = '=';  				result.CommentDelimiter = '#';  				break;  			}
Missing Default,Nini.Ini,IniWriter,C:\repos\twiglet_cs2j\CSharpTranslator\src\Nini\Ini\IniWriter.cs,ValidateStateKey,The following switch statement is missing a default case: switch (writeState)  			{  			case IniWriteState.BeforeFirstSection:  			case IniWriteState.Start:  				throw  new InvalidOperationException ("The WriteState is not Section");  			case IniWriteState.Closed:  				throw  new InvalidOperationException ("The writer is closed");  			}
