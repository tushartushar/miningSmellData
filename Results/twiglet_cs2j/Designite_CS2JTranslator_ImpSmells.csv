Implementation smell,Namespace,Class,File,Method,Description
Long Method,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,CS2JMain,The method has 168 lines of code.
Long Method,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,translateFile,The method has 129 lines of code.
Complex Method,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,CS2JMain,Cyclomatic complexity of the method is 26
Complex Method,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,translateFile,Cyclomatic complexity of the method is 19
Complex Method,Twiglet.CS2J.Translator.TypeRep,MethodRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,Equals,Cyclomatic complexity of the method is 10
Complex Method,Twiglet.CS2J.Translator.TypeRep,IndexerRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,Equals,Cyclomatic complexity of the method is 8
Complex Method,Twiglet.CS2J.Translator.TypeRep,TypeRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,TypeRepTemplate,Cyclomatic complexity of the method is 13
Complex Method,Twiglet.CS2J.Translator.TypeRep,TypeRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,ResolveCastTo,Cyclomatic complexity of the method is 11
Complex Method,Twiglet.CS2J.Translator.TypeRep,TypeRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,buildTypeList,Cyclomatic complexity of the method is 10
Complex Method,Twiglet.CS2J.Translator.TypeRep,TypeRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,Equals,Cyclomatic complexity of the method is 22
Complex Method,Twiglet.CS2J.Translator.TypeRep,TypeRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,GetHashCode,Cyclomatic complexity of the method is 11
Complex Method,Twiglet.CS2J.Translator.TypeRep,InterfaceRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,Apply,Cyclomatic complexity of the method is 10
Complex Method,Twiglet.CS2J.Translator.TypeRep,InterfaceRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,matchParamsToArgs,Cyclomatic complexity of the method is 10
Complex Method,Twiglet.CS2J.Translator.TypeRep,InterfaceRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,Resolve,Cyclomatic complexity of the method is 10
Complex Method,Twiglet.CS2J.Translator.TypeRep,InterfaceRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,Equals,Cyclomatic complexity of the method is 22
Complex Method,Twiglet.CS2J.Translator.TypeRep,InterfaceRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,GetHashCode,Cyclomatic complexity of the method is 11
Complex Method,Twiglet.CS2J.Translator.TypeRep,ClassRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,Apply,Cyclomatic complexity of the method is 9
Complex Method,Twiglet.CS2J.Translator.TypeRep,ClassRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,Equals,Cyclomatic complexity of the method is 18
Long Parameter List,Twiglet.CS2J.Translator.TypeRep,MethodRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,MethodRepTemplate,The method has 6 parameters. Parameters: retType' methodName' tParams' pars' imps' javaRep
Long Parameter List,Twiglet.CS2J.Translator.TypeRep,PropRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,PropRepTemplate,The method has 5 parameters. Parameters: fType' fName' imps' javaGet' javaSet
Long Parameter List,Twiglet.CS2J.Translator.TypeRep,IndexerRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,IndexerRepTemplate,The method has 5 parameters. Parameters: fType' pars' imps' javaGet' javaSet
Long Parameter List,Twiglet.CS2J.Translator.TypeRep,TypeRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,TypeRepTemplate,The method has 6 parameters. Parameters: tName' tParams' usePath' aliases' imports' javaTemplate
Long Parameter List,Twiglet.CS2J.Translator.TypeRep,InterfaceRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,InterfaceRepTemplate,The method has 11 parameters. Parameters: tName' tParams' usePath' aliases' inherits' ms' ps' es' ixs' imps' javaTemplate
Long Parameter List,Twiglet.CS2J.Translator.TypeRep,ClassRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,ClassRepTemplate,The method has 14 parameters. Parameters: tName' tParams' usePath' aliases' inherits' cs' ms' ps' fs' es' ixs' cts' imports' javaTemplate
Long Parameter List,Twiglet.CS2J.Translator.TypeRep,ClassRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,ClassRepTemplate,The method has 12 parameters. Parameters: tName' tParams' usePath' aliases' inherits' cs' ms' ps' fs' es' ixs' cts
Long Parameter List,Twiglet.CS2J.Translator.TypeRep,StructRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,StructRepTemplate,The method has 14 parameters. Parameters: tName' tParams' usePath' aliases' inherits' cs' ms' ps' fs' es' ixs' cts' imports' javaTemplate
Long Parameter List,Twiglet.CS2J.Translator.TypeRep,StructRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,StructRepTemplate,The method has 12 parameters. Parameters: tName' tParams' usePath' aliases' inherits' cs' ms' ps' fs' es' ixs' cts
Long Parameter List,Twiglet.CS2J.Translator.Transform,CUnit,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTransform\CommonWalker.cs,CUnit,The method has 5 parameters. Parameters: inTree' inSearchPath' inAliasKeys' inAliasValues' inIsPartial
Long Identifier,Twiglet.CS2J.Translator,CS2JSettings,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JSettings.cs,,The length of the parameter optTranslatorExceptionIsThrowable is 33.
Long Identifier,Twiglet.CS2J.Translator,CS2JSettings,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JSettings.cs,,The length of the parameter optTranslatorMakeJavadocComments is 32.
Long Identifier,Twiglet.CS2J.Translator,CS2JSettings,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JSettings.cs,,The length of the parameter optTranslatorMakeJavaNamingConventions is 38.
Long Identifier,Twiglet.CS2J.Translator,CS2JSettings,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JSettings.cs,,The length of the parameter optUnsignedNumbersToBiggerSignedNumbers is 39.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,showUsage,The length of the statement  "            Console.Out.WriteLine(" [-help]                                                                     (this usage message)"); " is 123.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,showUsage,The length of the statement  "            Console.Out.WriteLine(" [-v]                                                                        (be [somewhat more] verbose' repeat for more verbosity)"); " is 158.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,showUsage,The length of the statement  "            Console.Out.WriteLine(" [-config <iniFile>]                                                         (read settings from <iniFile>' overriden from command line"); " is 161.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,showUsage,The length of the statement  "            Console.Out.WriteLine(" [-D <macroVariable>]                                                        (define C# preprocessor <macroVariable>' option can be repeated)"); " is 167.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,showUsage,The length of the statement  "            Console.Out.WriteLine(" [-show-tokens]                                                              (the lexer prints the tokenized input to the console)"); " is 156.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,showUsage,The length of the statement  "            Console.Out.WriteLine(" [-show-csharp] [-show-javasyntax] [-show-java]                              (show parse tree at various stages of the translation)"); " is 157.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,showUsage,The length of the statement  "            Console.Out.WriteLine(" [-dump-xmls] [-out-xml-dir <directory to dump xml database>]                 (dump the translation repository as xml files)"); " is 150.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,showUsage,The length of the statement  "            Console.Out.WriteLine(" [-net-templates-dir <root of Library translation templates>+]               (can be multiple directories' separated by semi-colons)"); " is 158.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,showUsage,The length of the statement  "            Console.Out.WriteLine(" [-ex-net-templates-dir <directories/files to be excluded>+]                 (can be multiple directories/files' separated by semi-colons)"); " is 164.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,showUsage,The length of the statement  "            Console.Out.WriteLine(" [-alt-translations <template variants>+]                                    (enable these translaton template variants' can be repeated)"); " is 163.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,showUsage,The length of the statement  "            Console.Out.WriteLine(" [-app-dir <root of C# application>]                                         (can be multiple directories/files' separated by semi-colons)"); " is 164.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,showUsage,The length of the statement  "            Console.Out.WriteLine(" [-ex-app-dir <directories/files to be excluded>+]                           (can be multiple directories/files' separated by semi-colons)"); " is 164.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,showUsage,The length of the statement  "            Console.Out.WriteLine(" [-cs-dir <directories/files to be translated>+]                             (can be multiple directories/files' separated by semi-colons)"); " is 164.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,showUsage,The length of the statement  "            Console.Out.WriteLine(" [-ex-cs-dir <directories/files to be excluded from translation>+]           (can be multiple directories/files' separated by semi-colons)"); " is 164.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,showUsage,The length of the statement  "            Console.Out.WriteLine(" [-out-java-dir <root of translated classes>]                                (write Java classes here)"); " is 128.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,showUsage,The length of the statement  "            Console.Out.WriteLine(" [-debug <level>]                                                            (set debug level' default 0)"); " is 131.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,showUsage,The length of the statement  "            Console.Out.WriteLine(" [-debug-template-extraction <true/false>]                                   (show debug messages during template extraction' default true)"); " is 165.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,showUsage,The length of the statement  "            Console.Out.WriteLine(" [-warnings <true/false>]                                                    (show warnings' default true)"); " is 132.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,showUsage,The length of the statement  "            Console.Out.WriteLine(" [-warning-resolve-failures <true/false>]                                    (show warnings for resolve failures' default true)"); " is 153.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,showUsage,The length of the statement  "            Console.Out.WriteLine(" [-keep-parens <true/false>]                                                 (keep parens from source' default true)"); " is 142.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,showUsage,The length of the statement  "            Console.Out.WriteLine(" [-make-javadoc-comments <true/false>]                                       (convert C# documentation comments to Javadoc' default true)"); " is 163.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,showUsage,The length of the statement  "            Console.Out.WriteLine(" [-make-java-naming-conventions <true/false>]                                (convert method names to follow Java conventions' default true)"); " is 166.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,showUsage,The length of the statement  "            Console.Out.WriteLine(" <directory or file name to be translated>                                   (as cs-dir option)"); " is 121.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,updateFromConfigFile,The length of the statement  "                cfg.OptDebugTemplateExtraction.SetIfDefault(general.GetBoolean("debug-template-extraction"' cfg.DebugTemplateExtraction)); " is 122.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,updateFromConfigFile,The length of the statement  "                cfg.OptWarningsFailedResolves.SetIfDefault(general.GetBoolean("warnings-resolve-failures"' cfg.WarningsFailedResolves)); " is 120.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,updateFromConfigFile,The length of the statement  "                cfg.OptTranslatorExceptionIsThrowable.SetIfDefault(general.GetBoolean("exception-is-throwable"' cfg.TranslatorExceptionIsThrowable)); " is 133.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,updateFromConfigFile,The length of the statement  "                cfg.OptTranslatorMakeJavadocComments.SetIfDefault(general.GetBoolean("make-javadoc-comments"' cfg.TranslatorMakeJavadocComments)); " is 130.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,updateFromConfigFile,The length of the statement  "                cfg.OptTranslatorMakeJavaNamingConventions.SetIfDefault(general.GetBoolean("make-java-naming-conventions"' cfg.TranslatorMakeJavaNamingConventions)); " is 149.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,updateFromConfigFile,The length of the statement  "                cfg.OptUnsignedNumbersToSigned.SetIfDefault(experimental.GetBoolean("unsigned-to-signed"' cfg.UnsignedNumbersToSigned)); " is 120.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,updateFromConfigFile,The length of the statement  "                cfg.OptUnsignedNumbersToBiggerSignedNumbers.SetIfDefault(experimental.GetBoolean("unsigned-to-bigger-signed"' cfg.UnsignedNumbersToBiggerSignedNumbers)); " is 153.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,doFile,The length of the statement  "                else if ((Path.GetFileName(canonicalPath).Length > ext.Length) && canonicalPath.Substring(canonicalPath.Length - ext.Length).Equals(ext)) " is 137.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,addNetTranslation,The length of the statement  "                string txKey = t.TypeName+(t.TypeParams != null && t.TypeParams.Length > 0 ? "'" + t.TypeParams.Length.ToString() : ""); " is 120.
Long Statement,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,translateFile,The length of the statement  "                    string nsDir = typeName.LastIndexOf('.') >= 0 ? typeName.Substring(0'typeName.LastIndexOf('.')).Replace('.'' Path.DirectorySeparatorChar) : ""; " is 143.
Long Statement,Twiglet.CS2J.Translator.TypeRep,MethodRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,Equals,The length of the statement  "            if (InstantiatedTypes == null || other.InstantiatedTypes == null || InstantiatedTypes.Length != other.InstantiatedTypes.Length) " is 127.
Long Statement,Twiglet.CS2J.Translator.TypeRep,MethodRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,Equals,The length of the statement  "         return Return == other.Return && Name == other.Name && JavaName == other.JavaName && IsStatic == other.IsStatic && IsPartialDefiner == other.IsPartialDefiner && base.Equals(other); " is 180.
Long Statement,Twiglet.CS2J.Translator.TypeRep,MethodRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,GetHashCode,The length of the statement  "         return hashCode ^ (Name ?? String.Empty).GetHashCode () ^ (JavaName ?? String.Empty).GetHashCode () ^ IsStatic.GetHashCode() ^ IsPartialDefiner.GetHashCode() ^ base.GetHashCode(); " is 179.
Long Statement,Twiglet.CS2J.Translator.TypeRep,IndexerRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,GetHashCode,The length of the statement  "         return base.GetHashCode () ^ hashCode ^  (ParamArray == null ? 0 : ParamArray.GetHashCode()) ^ (_setParamArray == null ? 0 : _setParamArray.GetHashCode()); " is 155.
Long Statement,Twiglet.CS2J.Translator.TypeRep,TypeRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,IsA,The length of the statement  "            if (InstantiatedTypes != null && other.InstantiatedTypes != null && InstantiatedTypes.Length == other.InstantiatedTypes.Length) " is 127.
Long Statement,Twiglet.CS2J.Translator.TypeRep,TypeRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,buildTypeList,The length of the statement  "               typeRep = AppEnv.Search(this.Uses' typeName + (tyArgs.Count > 0 ? "'" + tyArgs.Count.ToString() : "")' new UnknownRepTemplate(typeName)); " is 137.
Long Statement,Twiglet.CS2J.Translator.TypeRep,TypeRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,Equals,The length of the statement  "            if (InstantiatedTypes == null || other.InstantiatedTypes == null || InstantiatedTypes.Length != other.InstantiatedTypes.Length) " is 127.
Long Statement,Twiglet.CS2J.Translator.TypeRep,InterfaceRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,matchParamsToArgs,The length of the statement  "                  if (args[idx] == null || !args[idx].IsA(BuildType(param[idx].Type' AppEnv' new UnknownRepTemplate(param[idx].Type.Type))'AppEnv)) " is 129.
Long Statement,Twiglet.CS2J.Translator.Transform,SyntaxFragments,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTransform\SyntaxFragments.cs,MultiDelegateMethods,The length of the statement  "          return rewriteCodeFragment(multiDelegateMethodsStr.Replace("${Del}"' Del).Replace("${DelClass}"' DelClass).Replace("${TyArgs}"' TyArgs)' new List<string>()); " is 157.
Complex Conditional,Twiglet.CS2J.Translator.TypeRep,InterfaceRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,Resolve,The conditional expression  "p.Name == name && ((forWrite && p.CanWrite) || (!forWrite && p.CanRead))"  is complex.
Complex Conditional,Twiglet.CS2J.Translator.Transform,CommonWalker,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTransform\CommonWalker.cs,rewriteMethodName,The conditional expression  "replacement == "main" || replacement == "notify" || replacement == "notifyAll" || replacement == "wait""  is complex.
Virtual Method Call from Constructor,Twiglet.CS2J.Translator.TypeRep,MethodRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,MethodRepTemplate,The constructor "MethodRepTemplate" calls a virtual method "Instantiate".
Empty Catch Block,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,parseBoolOption,The method has an empty catch block.
Magic Number,AntlrCSharp,AntlrUtils,C:\repos\twiglet_cs2j\CSharpTranslator\src\CSharpParser\AntlrUtils.cs,DumpNodes,The following statement contains a magic number: while (!nodes.IsEndOfFile(o))              {                  //object o = nodes.Get(n);                  //object o = nodes[n];                    if (o.ToString() == "DOWN")                  {                      spaces += 2;                      if (o_prev.ToString() != "UP" && o_prev.ToString() != "DOWN")                          Console.Write("\r\n{0} {1}"' str_spaces.Substring(0' spaces)' o_prev);                  }                  else if (o.ToString() == "UP")                  {                      spaces -= 2;                      if (o_prev.ToString() != "UP" && o_prev.ToString() != "DOWN")                          Console.Write(" {0}\r\n{1}"' o_prev' str_spaces.Substring(0' spaces));                  }                  else if (o_prev.ToString() != "UP" && o_prev.ToString() != "DOWN")                      Console.Write(" {0}"' o_prev.ToString());                    o_prev = o;                  o = nodes.NextElement();              }
Magic Number,AntlrCSharp,AntlrUtils,C:\repos\twiglet_cs2j\CSharpTranslator\src\CSharpParser\AntlrUtils.cs,DumpNodes,The following statement contains a magic number: while (!nodes.IsEndOfFile(o))              {                  //object o = nodes.Get(n);                  //object o = nodes[n];                    if (o.ToString() == "DOWN")                  {                      spaces += 2;                      if (o_prev.ToString() != "UP" && o_prev.ToString() != "DOWN")                          Console.Write("\r\n{0} {1}"' str_spaces.Substring(0' spaces)' o_prev);                  }                  else if (o.ToString() == "UP")                  {                      spaces -= 2;                      if (o_prev.ToString() != "UP" && o_prev.ToString() != "DOWN")                          Console.Write(" {0}\r\n{1}"' o_prev' str_spaces.Substring(0' spaces));                  }                  else if (o_prev.ToString() != "UP" && o_prev.ToString() != "DOWN")                      Console.Write(" {0}"' o_prev.ToString());                    o_prev = o;                  o = nodes.NextElement();              }
Magic Number,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,CS2JMain,The following statement contains a magic number: try              {                  // if we have at least one command-line argument                  if (args.Length > 0)                  {  			                      if (cfg.Verbosity >= 2) Console.Error.WriteLine("Parsing Command Line Arguments...");                        OptionSet p = new OptionSet ()                          .Add ("config="' f => updateFromConfigFile(f' cfg))                          .Add ("v"' v => cfg.Verbosity = cfg.OptVerbosity.IsDefault ? 1 : cfg.Verbosity + 1)                          .Add ("debug="' v => cfg.DebugLevel = Int32.Parse(v))                          .Add ("debug-template-extraction:"' v => cfg.DebugTemplateExtraction = parseBoolOption(v))                          .Add ("warnings:"' v => cfg.Warnings = parseBoolOption(v))                          .Add ("warnings-resolve-failures:"' v => cfg.WarningsFailedResolves = parseBoolOption(v))                          .Add ("version:"' v => { if (parseBoolOption(v)) showVersion(); })                          .Add ("help|h|?"' v => {doHelp = true; doEarlyExit = true; })                          .Add ("show-csharp:"' v => cfg.DumpCSharp = parseBoolOption(v))                          .Add ("show-java:"' v => cfg.DumpJava = parseBoolOption(v))                          .Add ("show-javasyntax:"' v => cfg.DumpJavaSyntax = parseBoolOption(v))                          .Add ("show-tokens:"' v => cfg.DisplayTokens = parseBoolOption(v))                          .Add ("D="' def => cfg.OptMacroDefines.Add(mkStrings(def))) 							                          .Add ("dump-enums:"' v => cfg.DumpEnums = parseBoolOption(v))                          .Add ("out-enums-file="' dir => cfg.EnumDir = Path.Combine(Directory.GetCurrentDirectory()' dir))							                          .Add ("dump-xmls:"' v => cfg.DumpXmls = parseBoolOption(v))                          .Add ("out-xml-dir="' dir => cfg.XmlDir = Path.Combine(Directory.GetCurrentDirectory()' dir))                          .Add ("out-java-dir="' dir => cfg.OutDir = dir)                          .Add ("cheat-dir="' dir => cfg.CheatDir = dir)                          .Add ("net-templates-dir="' dirs => cfg.OptNetRoot.Add(mkDirectories(dirs)))                          .Add ("ex-net-templates-dir="' dirs => cfg.OptExNetRoot.Add(mkDirectories(dirs)))                          .Add ("net-schema-dir="' dirs => cfg.OptNetSchemaDir.Add(mkDirectories(dirs)))                          .Add ("app-dir="' dirs => cfg.OptAppRoot.Add(mkDirectories(dirs)))                          .Add ("ex-app-dir="' dirs => cfg.OptExAppRoot.Add(mkDirectories(dirs)))                          .Add ("cs-dir="' dirs => cfg.OptCsDir.Add(mkDirectories(dirs)))                          .Add ("ex-cs-dir="' dirs => cfg.OptExCsDir.Add(mkDirectories(dirs)))                          .Add ("alt-translations="' alts => cfg.OptAltTranslations.Add(mkStrings(alts)))                          .Add ("keep-parens:"' v => cfg.TranslatorKeepParens = parseBoolOption(v))                          .Add ("timestamp-files:"' v => cfg.TranslatorAddTimeStamp = parseBoolOption(v))                          .Add ("blanket-throw:"' v => cfg.TranslatorBlanketThrow = parseBoolOption(v))                          .Add ("exception-is-throwable:"' v => cfg.TranslatorExceptionIsThrowable = parseBoolOption(v))                          .Add ("make-javadoc-comments:"' v => cfg.TranslatorMakeJavadocComments = parseBoolOption(v))                          .Add ("make-java-naming-conventions:"' v => cfg.TranslatorMakeJavaNamingConventions = parseBoolOption(v))                          .Add ("experimental-enums-to-numeric-consts:"' v => cfg.EnumsAsNumericConsts = parseBoolOption(v))                          .Add ("experimental-unsigned-to-signed:"' v => cfg.UnsignedNumbersToSigned = parseBoolOption(v))                          .Add ("experimental-unsigned-to-bigger-signed:"' v => cfg.UnsignedNumbersToBiggerSignedNumbers = parseBoolOption(v))                          .Add ("experimental-transforms:"' v => cfg.ExperimentalTransforms = parseBoolOption(v))                          .Add ("internal-isjavaish:"' v => cfg.InternalIsJavaish = parseBoolOption(v))                          ;  					                      // Final argument is translation target                      foreach (string s in p.Parse (args))                      {                         if (s.StartsWith("-") || s.StartsWith("/"))                         {                            Console.WriteLine("ERROR: Unrecognized Option: " + s);                            doEarlyExit = true;                         }                         else                         {                            cfg.OptCsDir.Add(mkDirectories(s));                         }                      }                        if (cfg.Verbosity > 0) showVersion();                        if (doHelp) showUsage();                      if (!doEarlyExit && (cfg.CsDir == null || cfg.CsDir.Count == 0)) {                          // No work                         Console.WriteLine("Please specify files to translate with -cs-dir option");                         doEarlyExit = true;                      }                        if (doEarlyExit)                      {                          Environment.Exit(0);                      }                        AppEnv = new DirectoryHT<TypeRepTemplate>();                      if (cfg.TranslatorMakeJavaNamingConventions)                      {                         // Search lowerCamelCase                         AppEnv.Alts.Add("LCC");                                             }                      foreach (string alt in cfg.AltTranslations)                      {                         AppEnv.Alts.Add(alt);                                             }                        // Load .Net templates                      // Do we have schemas for the templates?                      if (cfg.NetSchemaDir.Count == 0)                      {                         // By default look for schemas in net dirs                         cfg.NetSchemaDir = new List<string>(cfg.NetRoot);                      }                        // Comment out for now.  I don't see how to wrie an xsd file that will allow elements to appear in any order                      // foreach (string schemadir in cfg.NetSchemaDir)                      //   doFile(schemadir' ".xsd"' addNetSchema' null);                        foreach (string r in cfg.NetRoot)                          doFile(r' ".xml"' addNetTranslation' cfg.ExNetRoot);                        // Load Application Class Signatures (i.e. generate templates)                      if (cfg.AppRoot.Count == 0)                      {                          // By default translation target is application root                         foreach (string s in cfg.CsDir)                         {                            cfg.AppRoot.Add(s);                         }                      }                      foreach (string r in cfg.AppRoot)                          doFile(r' ".cs"' addAppSigTranslation' cfg.ExAppRoot); // parse it                      if (cfg.DumpEnums) {                          enumXmlWriter = new XmlTextWriter(cfg.EnumDir' System.Text.Encoding.UTF8);                          enumXmlWriter.WriteStartElement("enums");                      }                      if (cfg.DumpXmls)                      {                          // Get package name and convert to directory name                          foreach (KeyValuePair<string'TypeRepTemplate> de in AppEnv)                          {                              String xmlFName = Path.Combine(cfg.XmlDir'                                                             ((string)de.Key).Replace('.'' Path.DirectorySeparatorChar) + ".xml");                              String xmlFDir = Path.GetDirectoryName(xmlFName);                              if (!Directory.Exists(xmlFDir))                              {                                  Directory.CreateDirectory(xmlFDir);                              }                              XmlSerializer s = new XmlSerializer(de.Value.GetType()' CS2JConstants.TranslationTemplateNamespace);                              TextWriter w = new StreamWriter(xmlFName);                              s.Serialize(w' de.Value);                              w.Close();                          }                      }                        // load in T.stg template group' put in templates variable                      string templateLocation = Path.Combine(AppDomain.CurrentDomain.BaseDirectory' Path.Combine("templates"' "java.stg"));                      if (File.Exists(templateLocation)) {                         TextReader groupFileR = new StreamReader(templateLocation);                         templates = new StringTemplateGroup(groupFileR);                         groupFileR.Close();                      }                      else {                          templates = new StringTemplateGroup(new StringReader(Templates.JavaTemplateGroup));                      }                        foreach (string r in cfg.CsDir)                          doFile(r' ".cs"' translateFile' cfg.ExCsDir); // translate it                        if (cfg.DebugLevel >= 1 && partialTypes.Count > 0) Console.Out.WriteLine("Writing out collected partial types");                      foreach (KeyValuePair<string' ClassDescriptorSerialized> entry in partialTypes)                         emitPartialType(entry.Key' entry.Value);                        if (cfg.DumpEnums)                      {                          enumXmlWriter.WriteEndElement();                          enumXmlWriter.Close();                      }                  }                  else                  {                      showUsage();                  }              }              catch (System.Exception e)              {                  Console.Error.WriteLine("exception: " + e);                  Console.Error.WriteLine(e.StackTrace); // so we can get stack trace              }
Magic Number,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,CS2JMain,The following statement contains a magic number: double elapsedTime = ((DateTime.Now.Ticks - startTime) / TimeSpan.TicksPerMillisecond) / 1000.0;
Magic Number,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,doFile,The following statement contains a magic number: if (excludes == null || !excludes.Contains(canonicalPath.TrimEnd(Path.DirectorySeparatorChar)))              {                  if (Directory.Exists(canonicalPath))                  {                      string[] files = Directory.GetFileSystemEntries(canonicalPath);                      for (int i = 0; i < files.Length; i++)                          doFile(Path.Combine(canonicalPath' files[i])' ext' processFile' excludes);                  }                  else if ((Path.GetFileName(canonicalPath).Length > ext.Length) && canonicalPath.Substring(canonicalPath.Length - ext.Length).Equals(ext))                  {                      if (cfg.Verbosity >= 2) Console.WriteLine("   " + canonicalPath);                      try                      {                                                    processFile(canonicalPath);                      }                      catch (Exception e)                      {                          Console.Error.WriteLine("\nCannot process file: " + canonicalPath);                          Console.Error.WriteLine("exception: " + e);                      }                  }              }
Magic Number,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,parseFile,The following statement contains a magic number: if (cfg.Verbosity > 2) Console.WriteLine("Parsing " + Path.GetFileName(fullName));
Magic Number,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,addAppSigTranslation,The following statement contains a magic number: if (cfg.DebugLevel > 3) Console.Out.WriteLine("Extracting type info from file {0}"' fullName);
Magic Number,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,translateFile,The following statement contains a magic number: if (cfg.DebugLevel > 3) Console.Out.WriteLine("Translating file {0}"' fullName);
Magic Number,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,translateFile,The following statement contains a magic number: if (cfg.DebugLevel > 5) Console.Out.WriteLine("Parsing file {0}"' fullName);
Magic Number,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,translateFile,The following statement contains a magic number: if (csTree != null)              {                  // Make java compilation units from C# file                  JavaMaker javaMaker = new JavaMaker(csTree);                  javaMaker.Filename = fullName;                  javaMaker.TraceDestination = Console.Error;                    javaMaker.Cfg = cfg;                  javaMaker.CUMap = new Dictionary<string' CUnit>();                  javaMaker.CUKeys = new List<string>();                  javaMaker.IsJavaish = cfg.InternalIsJavaish;  	      		javaMaker.EnumXmlWriter = enumXmlWriter;                    if (cfg.DebugLevel >= 1) Console.Out.WriteLine("Translating {0} to Java"' fullName);                                    javaMaker.compilation_unit();                                    int saveEmittedCommentTokenIdx = 0;                  for (int i = 0; i < javaMaker.CUKeys.Count; i++)                  {                      string typeName = javaMaker.CUKeys[i];                      CommonTree typeAST = javaMaker.CUMap[typeName].Tree;                        string claName = typeName.Substring(typeName.LastIndexOf('.')+1);                       string nsDir = typeName.LastIndexOf('.') >= 0 ? typeName.Substring(0'typeName.LastIndexOf('.')).Replace('.'' Path.DirectorySeparatorChar) : "";                                            if (cfg.CheatDir != "")                      {                          String ignoreMarker = Path.Combine(cfg.CheatDir' Path.Combine(nsDir' claName + ".none"));                          if (File.Exists(ignoreMarker))                          {                              // Don't generate this class                              continue;                          }                      }                      // Make sure parent directory exists                      String javaFDir = Path.Combine(cfg.OutDir' nsDir);                      String javaFName = Path.Combine(javaFDir' claName + ".java");                      if (!Directory.Exists(javaFDir))                      {                          Directory.CreateDirectory(javaFDir);                      }                      if (cfg.CheatDir != "")                      {                          String cheatFile = Path.Combine(cfg.CheatDir' Path.Combine(nsDir' claName + ".java"));                          if (File.Exists(cheatFile))                          {                              // the old switcheroo                              File.Copy(cheatFile' javaFName'true);                              continue;                          }                      }                        // Translate calls to .Net to calls to Java libraries                      CommonTreeNodeStream javaSyntaxNodes = new CommonTreeNodeStream(typeAST);                                  if (cfg.DumpJavaSyntax && javaSyntaxNodes != null)                      {                          AntlrUtils.DumpNodesFlat(javaSyntaxNodes' "Java Syntax Parse Tree for " + claName);                          javaSyntaxNodes.Reset();                          }                      javaSyntaxNodes.TokenStream = csTree.TokenStream;                                            NetMaker netMaker = new NetMaker(javaSyntaxNodes);                      netMaker.Filename = fullName;                      netMaker.TraceDestination = Console.Error;                        netMaker.Cfg = cfg;                      netMaker.AppEnv = AppEnv;                        netMaker.SearchPath = javaMaker.CUMap[typeName].SearchPath;                      netMaker.AliasKeys = javaMaker.CUMap[typeName].NameSpaceAliasKeys;                      netMaker.AliasNamespaces = javaMaker.CUMap[typeName].NameSpaceAliasValues;                        netMaker.IsJavaish = cfg.InternalIsJavaish;                      netMaker.Imports = new Set<String>();                      netMaker.AddToImports(javaMaker.Imports);                        if (cfg.DebugLevel > 5) Console.Out.WriteLine("Translating {0} Net Calls to Java"' javaFName);                      NetMaker.compilation_unit_return javaCompilationUnit = netMaker.compilation_unit();                        CommonTreeNodeStream javaCompilationUnitNodes = new CommonTreeNodeStream(javaCompilationUnit.Tree);                                  javaCompilationUnitNodes.TokenStream = csTree.TokenStream;                                            if (cfg.DumpJava && javaCompilationUnitNodes != null)                      {                          AntlrUtils.DumpNodesFlat(javaCompilationUnitNodes' "Final Java Parse Tree for " + claName);                          javaCompilationUnitNodes.Reset();                          }                      // Pretty print java parse tree as text                      JavaPrettyPrint outputMaker = new JavaPrettyPrint(javaCompilationUnitNodes);                      outputMaker.Filename = fullName;                      outputMaker.TraceDestination = Console.Error;                      outputMaker.TemplateLib = templates;                        outputMaker.Cfg = cfg;                      outputMaker.EmittedCommentTokenIdx = saveEmittedCommentTokenIdx;                      bool isPartial = javaMaker.CUMap[typeName].IsPartial;                      if (isPartial)                      {                         if (!partialTypes.ContainsKey(typeName))                         {                            partialTypes[typeName] = new ClassDescriptorSerialized(claName);                            partialTypes[typeName].FileName = javaFName;                         }                         outputMaker.PartialDescriptor = partialTypes[typeName];                      }                        outputMaker.IsLast = i == (javaMaker.CUKeys.Count - 1);                                            if (!isPartial)                      {                         if (cfg.DebugLevel >= 1) Console.Out.WriteLine("Writing out {0}"' javaFName);                         StreamWriter javaW = new StreamWriter(javaFName);                         javaW.Write(outputMaker.compilation_unit().ToString());                         javaW.Close();                      }                      else                      {                         // fill out partialTypes[typeName]                         outputMaker.compilation_unit();                      }                      saveEmittedCommentTokenIdx = outputMaker.EmittedCommentTokenIdx;                  }              }
Magic Number,Twiglet.CS2J.Translator,CS2J,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JMain\CS2JMain.cs,translateFile,The following statement contains a magic number: double elapsedTime = ((DateTime.Now.Ticks - startTime) / TimeSpan.TicksPerMillisecond) / 1000.0;
Magic Number,Twiglet.CS2J.Translator.TypeRep,TypeRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,buildTypeList,The following statement contains a magic number: while (moreTypes)           {              // get type name from the start              int nameEnd = typeStr.IndexOfAny(new char[] { '*'''[''']'''''});                  string typeName = typeStr.Substring(0'(nameEnd >= 0 ? nameEnd : typeStr.Length)).TrimEnd();              typeStr = typeStr.Substring(typeName.Length).TrimStart();                // build basetype              TypeRepTemplate typeRep = null;                // Is it a type var?              foreach (string p in TypeParams) {                 if (p == typeName)                 {                    typeRep = new TypeVarRepTemplate(typeName);                    break;                 }                  }                 if (typeRep == null)              {                 // Not a type var' look for a type                 List<TypeRepTemplate> tyArgs = new List<TypeRepTemplate>();                   // Do we have type arguments?                 if (typeStr.Length > 0 && typeStr.StartsWith("*["))                 {                    // isolate type arguments                    ParseResult<TypeRepTemplate> args = buildTypeList(typeStr.Substring(2)' AppEnv);                    tyArgs = args.Parses;                    typeStr = args.RemainingStr.TrimStart();                    if (typeStr.StartsWith("]*"))                    {                       typeStr = typeStr.Substring(2).TrimStart();                    }                    else                    {                       throw new Exception("buildTypeList: Cannot parse " + types);                    }                 }                 typeRep = AppEnv.Search(this.Uses' typeName + (tyArgs.Count > 0 ? "'" + tyArgs.Count.ToString() : "")' new UnknownRepTemplate(typeName));                 if (!typeRep.IsUnknownType && tyArgs.Count > 0)                 {                     typeRep = typeRep.Instantiate(tyArgs);                 }              }                         // Take care of arrays ....              while (typeStr.StartsWith("[]"))              {                 TypeRepTemplate arrayType = AppEnv.Search("System.Array'1"' new UnknownRepTemplate("System.Array'1"));                 typeRep = arrayType.Instantiate(new TypeRepTemplate[] { typeRep });                 typeStr = typeStr.Substring(2).TrimStart();              }              types.Add(typeRep);              moreTypes = typeStr.StartsWith("'");              if (moreTypes)              {                 typeStr = typeStr.Substring(1).TrimStart();              }           }
Magic Number,Twiglet.CS2J.Translator.TypeRep,TypeRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,buildTypeList,The following statement contains a magic number: while (moreTypes)           {              // get type name from the start              int nameEnd = typeStr.IndexOfAny(new char[] { '*'''[''']'''''});                  string typeName = typeStr.Substring(0'(nameEnd >= 0 ? nameEnd : typeStr.Length)).TrimEnd();              typeStr = typeStr.Substring(typeName.Length).TrimStart();                // build basetype              TypeRepTemplate typeRep = null;                // Is it a type var?              foreach (string p in TypeParams) {                 if (p == typeName)                 {                    typeRep = new TypeVarRepTemplate(typeName);                    break;                 }                  }                 if (typeRep == null)              {                 // Not a type var' look for a type                 List<TypeRepTemplate> tyArgs = new List<TypeRepTemplate>();                   // Do we have type arguments?                 if (typeStr.Length > 0 && typeStr.StartsWith("*["))                 {                    // isolate type arguments                    ParseResult<TypeRepTemplate> args = buildTypeList(typeStr.Substring(2)' AppEnv);                    tyArgs = args.Parses;                    typeStr = args.RemainingStr.TrimStart();                    if (typeStr.StartsWith("]*"))                    {                       typeStr = typeStr.Substring(2).TrimStart();                    }                    else                    {                       throw new Exception("buildTypeList: Cannot parse " + types);                    }                 }                 typeRep = AppEnv.Search(this.Uses' typeName + (tyArgs.Count > 0 ? "'" + tyArgs.Count.ToString() : "")' new UnknownRepTemplate(typeName));                 if (!typeRep.IsUnknownType && tyArgs.Count > 0)                 {                     typeRep = typeRep.Instantiate(tyArgs);                 }              }                         // Take care of arrays ....              while (typeStr.StartsWith("[]"))              {                 TypeRepTemplate arrayType = AppEnv.Search("System.Array'1"' new UnknownRepTemplate("System.Array'1"));                 typeRep = arrayType.Instantiate(new TypeRepTemplate[] { typeRep });                 typeStr = typeStr.Substring(2).TrimStart();              }              types.Add(typeRep);              moreTypes = typeStr.StartsWith("'");              if (moreTypes)              {                 typeStr = typeStr.Substring(1).TrimStart();              }           }
Magic Number,Twiglet.CS2J.Translator.TypeRep,TypeRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,buildTypeList,The following statement contains a magic number: while (moreTypes)           {              // get type name from the start              int nameEnd = typeStr.IndexOfAny(new char[] { '*'''[''']'''''});                  string typeName = typeStr.Substring(0'(nameEnd >= 0 ? nameEnd : typeStr.Length)).TrimEnd();              typeStr = typeStr.Substring(typeName.Length).TrimStart();                // build basetype              TypeRepTemplate typeRep = null;                // Is it a type var?              foreach (string p in TypeParams) {                 if (p == typeName)                 {                    typeRep = new TypeVarRepTemplate(typeName);                    break;                 }                  }                 if (typeRep == null)              {                 // Not a type var' look for a type                 List<TypeRepTemplate> tyArgs = new List<TypeRepTemplate>();                   // Do we have type arguments?                 if (typeStr.Length > 0 && typeStr.StartsWith("*["))                 {                    // isolate type arguments                    ParseResult<TypeRepTemplate> args = buildTypeList(typeStr.Substring(2)' AppEnv);                    tyArgs = args.Parses;                    typeStr = args.RemainingStr.TrimStart();                    if (typeStr.StartsWith("]*"))                    {                       typeStr = typeStr.Substring(2).TrimStart();                    }                    else                    {                       throw new Exception("buildTypeList: Cannot parse " + types);                    }                 }                 typeRep = AppEnv.Search(this.Uses' typeName + (tyArgs.Count > 0 ? "'" + tyArgs.Count.ToString() : "")' new UnknownRepTemplate(typeName));                 if (!typeRep.IsUnknownType && tyArgs.Count > 0)                 {                     typeRep = typeRep.Instantiate(tyArgs);                 }              }                         // Take care of arrays ....              while (typeStr.StartsWith("[]"))              {                 TypeRepTemplate arrayType = AppEnv.Search("System.Array'1"' new UnknownRepTemplate("System.Array'1"));                 typeRep = arrayType.Instantiate(new TypeRepTemplate[] { typeRep });                 typeStr = typeStr.Substring(2).TrimStart();              }              types.Add(typeRep);              moreTypes = typeStr.StartsWith("'");              if (moreTypes)              {                 typeStr = typeStr.Substring(1).TrimStart();              }           }
Magic Number,Twiglet.CS2J.Translator.TypeRep,InterfaceRepTemplate,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTemplate\TranslationTemplate.cs,matchParamsToArgs,The following statement contains a magic number: paramsTypeStr = paramsTypeStr.Remove(paramsTypeStr.Length-2);
Magic Number,Twiglet.CS2J.Translator.Transform,CommonWalker,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTransform\CommonWalker.cs,DebugDetail,The following statement contains a magic number: Debug(5' s);
Magic Number,Twiglet.CS2J.Translator.Transform,CommonWalker,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTransform\CommonWalker.cs,parseString,The following statement contains a magic number: if (Cfg.Verbosity > 5) Console.WriteLine("Parsing fragment ");
Magic Number,Twiglet.CS2J.Translator.Utils,DirectoryHT<TValue>,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JUtil\DirectoryHT.cs,subDir,The following statement contains a magic number: string[] components = p.Split(new char[] { '.' }' 2);
Magic Number,Twiglet.CS2J.Translator.Utils,DirectoryHT<TValue>,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JUtil\DirectoryHT.cs,ContainsKey,The following statement contains a magic number: string[] components = key.Split(new char[] { '.' }' 2);
Magic Number,Twiglet.CS2J.Translator.Utils,DirectoryHT<TValue>,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JUtil\DirectoryHT.cs,Remove,The following statement contains a magic number: string[] components = ((string)key).Split(new char[] { '.' }' 2);
Magic Number,Twiglet.CS2J.Translator.Utils,DirectoryHT<TValue>,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JUtil\DirectoryHT.cs,TryGetValue,The following statement contains a magic number: string[] components = key.Split(new char[] { '.' }' 2);
Magic Number,Twiglet.CS2J.Translator.Utils,DirectoryHT<TValue>,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JUtil\DirectoryHT.cs,Add,The following statement contains a magic number: string[] components = key.Split(new char[] { '.' }' 2);
Missing Default,Twiglet.CS2J.Translator.Transform,CommonWalker,C:\repos\twiglet_cs2j\CSharpTranslator\src\CS2JTranslator\CS2JTransform\CommonWalker.cs,toJavaConvention,The following switch statement is missing a default case: switch(type)            {               case CSharpEntity.METHOD:                  ret = new StringBuilder(str.Length).Append(Char.ToLower(str[0]))                     .Append(str.Substring(1))                     .ToString();                  break;            }
