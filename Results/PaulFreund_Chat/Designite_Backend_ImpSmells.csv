Implementation smell,Namespace,Class,File,Method,Description
Long Method,Backend.Common,Connection,C:\repos\PaulFreund_Chat\Backend\Common\Connections.cs,Update,The method has 104 lines of code.
Complex Method,Backend.Common,Connections,C:\repos\PaulFreund_Chat\Backend\Common\Connections.cs,Update,Cyclomatic complexity of the method is 9
Complex Method,Backend.Common,Connection,C:\repos\PaulFreund_Chat\Backend\Common\Connections.cs,Update,Cyclomatic complexity of the method is 15
Long Statement,Backend.Common,BackendEventWindows,C:\repos\PaulFreund_Chat\Backend\Common\Events.cs,ToString,The length of the statement  "            return "[" + Id + "]" + "[" + Type.ToString() + "]" + "[" + Canceled.ToString() + "]" + "[" + Reason + "]" + WindowsType.ToString(); " is 132.
Long Statement,Backend.Common,BackendEventError,C:\repos\PaulFreund_Chat\Backend\Common\Events.cs,ToString,The length of the statement  "            return "[" + Id + "]" + "[" + Type.ToString() + "]" + "[" + Policy.ToString() + "]" + "[" + Error.ToString() + "]" + " (" + Message + ")"; " is 138.
Long Statement,Backend.Common,Helper,C:\repos\PaulFreund_Chat\Backend\Common\Helper.cs,RequestRoster,The length of the statement  "            System.Diagnostics.Debug.WriteLine("[Frontend] Requesting Roster for: " + account.CurrentJID.ToString() + " id " + iq.id); " is 122.
Long Statement,Backend.Common,Notifier,C:\repos\PaulFreund_Chat\Backend\Common\Notifier.cs,Push,The length of the statement  "                NotifyError(errorEvent.Policy' Helper.Translate("Error") + ": " + Helper.Translate("ErrorType"+errorEvent.Error.ToString())); " is 125.
Long Statement,Backend.Common,Notifier,C:\repos\PaulFreund_Chat\Backend\Common\Notifier.cs,Push,The length of the statement  "                if (windowsEvent.WindowsType == WindowsType.UserAway || windowsEvent.WindowsType == WindowsType.UserPresent ) // Es hat mit autoaway zutun " is 138.
Long Statement,Backend.Common,Notifier,C:\repos\PaulFreund_Chat\Backend\Common\Notifier.cs,Process,The length of the statement  "            else if (message.type == Tags.jabber.client.message.typeEnum.chat || message.type == Tags.jabber.client.message.typeEnum.normal) " is 128.
Long Statement,Backend.Common,Connections,C:\repos\PaulFreund_Chat\Backend\Common\Connections.cs,Update,The length of the statement  "                    if (parameters.RequestConnectedStandby && BackgroundExecutionManager.GetAccessStatus() != BackgroundAccessStatus.AllowedWithAlwaysOnRealTimeConnectivity) " is 153.
Long Statement,Backend.Common,Connections,C:\repos\PaulFreund_Chat\Backend\Common\Connections.cs,Update,The length of the statement  "                        _backend.OnConnectionEvent(this' new ConnectionEvent(new BackendEventError(parameters.JID' ErrorType.NoHardwareSlotsAllowed' ErrorPolicyType.Deactivate))); " is 155.
Long Statement,Backend.Common,Connections,C:\repos\PaulFreund_Chat\Backend\Common\Connections.cs,Update,The length of the statement  "                            _backend.OnConnectionEvent(this' new ConnectionEvent(new BackendEventLog(""' LogType.Info' "Server with name " + server.title + " added"))); " is 140.
Long Statement,Backend.Common,Connections,C:\repos\PaulFreund_Chat\Backend\Common\Connections.cs,Update,The length of the statement  "                            _backend.OnConnectionEvent(this' new ConnectionEvent(new BackendEventLog(""' LogType.Error' "Adding server with name " + server.title + " failed"))); " is 149.
Long Statement,Backend.Common,Connections,C:\repos\PaulFreund_Chat\Backend\Common\Connections.cs,Update,The length of the statement  "                    _backend.OnConnectionEvent(this' new ConnectionEvent(new BackendEventError(server.jid' ErrorType.InvalidSettings' ErrorPolicyType.Deactivate))); " is 144.
Long Statement,Backend.Common,Connections,C:\repos\PaulFreund_Chat\Backend\Common\Connections.cs,Update,The length of the statement  "                    _backend.OnConnectionEvent(this' new ConnectionEvent(new BackendEventLog(""' LogType.Error' "Server with name " + server.title + " is invalid"))); " is 146.
Long Statement,Backend.Common,Connection,C:\repos\PaulFreund_Chat\Backend\Common\Connections.cs,RegisterControlChannel,The length of the statement  "                    var slotType = _currentParameters.RequestConnectedStandby ? ControlChannelTriggerResourceType.RequestHardwareSlot : ControlChannelTriggerResourceType.RequestSoftwareSlot; " is 170.
Long Statement,Backend.Data,IValueStore<T>,C:\repos\PaulFreund_Chat\Backend\Data\Interfaces.cs,RemoveItem,The length of the statement  "            EmitCollectionChanged(this' new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Remove' itemTemp' index)); " is 121.
Long Statement,Backend.Data,ICollectionStore<T>,C:\repos\PaulFreund_Chat\Backend\Data\Interfaces.cs,RemoveItem,The length of the statement  "            EmitCollectionChanged(this' new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Remove' itemTemp' index)); " is 121.
Long Statement,Backend.Data,Roster,C:\repos\PaulFreund_Chat\Backend\Data\Roster.cs,ClearOffline,The length of the statement  "            var offline = this.Where((contact) => {                                             // All have to be true for the contact to be deleted " is 136.
Long Statement,Backend.Data,Roster,C:\repos\PaulFreund_Chat\Backend\Data\Roster.cs,CleanInvalid,The length of the statement  "            var invalid = this.Where((contact) => string.IsNullOrEmpty(contact.account) || string.IsNullOrEmpty(contact.jid)).ToList(); " is 123.
Long Statement,Backend,BackendInterface,C:\repos\PaulFreund_Chat\Backend\Runtime.cs,UpdateConnections,The length of the statement  "{ if (_backendRuntime._connections != null) { _backendRuntime._connections.Update(); _backendRuntime._notifier.UpdateBadge(); } }" is 129.
Complex Conditional,Backend.Data,Account,C:\repos\PaulFreund_Chat\Backend\Data\Accounts.cs,IsValid,The conditional expression  "string.IsNullOrEmpty(title) ||                  string.IsNullOrEmpty(host) ||                  string.IsNullOrEmpty(jid) ||                  string.IsNullOrEmpty(password)"  is complex.
Empty Catch Block,Backend.Common,Events,C:\repos\PaulFreund_Chat\Backend\Common\Events.cs,RemovePersistant,The method has an empty catch block.
Empty Catch Block,Backend.Common,Events,C:\repos\PaulFreund_Chat\Backend\Common\Events.cs,GetPersistant,The method has an empty catch block.
Empty Catch Block,Backend.Common,Events,C:\repos\PaulFreund_Chat\Backend\Common\Events.cs,ClearPersistant,The method has an empty catch block.
Empty Catch Block,Backend.Data,Avatar,C:\repos\PaulFreund_Chat\Backend\Data\Avatar.cs,Set,The method has an empty catch block.
Empty Catch Block,Backend.Data,Avatar,C:\repos\PaulFreund_Chat\Backend\Data\Avatar.cs,Remove,The method has an empty catch block.
Empty Catch Block,Backend.Data,Avatar,C:\repos\PaulFreund_Chat\Backend\Data\Avatar.cs,Clear,The method has an empty catch block.
Empty Catch Block,Backend.Data,Avatar,C:\repos\PaulFreund_Chat\Backend\Data\Avatar.cs,LoadFile,The method has an empty catch block.
Empty Catch Block,Backend.Data,Avatar,C:\repos\PaulFreund_Chat\Backend\Data\Avatar.cs,GetFiles,The method has an empty catch block.
Empty Catch Block,Backend,Runtime,C:\repos\PaulFreund_Chat\Backend\Runtime.cs,OnEvent,The method has an empty catch block.
Empty Catch Block,Backend,Runtime,C:\repos\PaulFreund_Chat\Backend\Runtime.cs,OnBackgroundTaskRunning,The method has an empty catch block.
Empty Catch Block,Backend,Runtime,C:\repos\PaulFreund_Chat\Backend\Runtime.cs,OnBackgroundTaskRunning,The method has an empty catch block.
Magic Number,Backend.Common,Events,C:\repos\PaulFreund_Chat\Backend\Common\Events.cs,Enqueue,The following statement contains a magic number: _accessMutex.WaitOne(4000);
Magic Number,Backend.Common,Events,C:\repos\PaulFreund_Chat\Backend\Common\Events.cs,Dequeue,The following statement contains a magic number: _accessMutex.WaitOne(4000);
Magic Number,Backend.Common,Events,C:\repos\PaulFreund_Chat\Backend\Common\Events.cs,GetPersistant,The following statement contains a magic number: try              {                  foreach (var key in _persistantQueue.Values.Keys)                  {                      string id = key.Substring(0' 36);                      int fragmentNo = 0;                        // Create Object                      if (!elements.ContainsKey(id))                          elements.Add(id' new Dictionary<int' string>());                        // Get fragment No if any                      if (key.Length > 36) // Bigger than a GUID => fragment                          fragmentNo = Convert.ToInt32(key.Split('#')[1]);                        elements[id][fragmentNo] = _persistantQueue.Values[key].ToString();                  }                      foreach (var key in elements.Keys)                  {                      var elementFragments = elements[key];                      var elementValue = string.Empty;                        int fragmentNo = 0;                      while (elementFragments.ContainsKey(fragmentNo))                      {                          elementValue += elementFragments[fragmentNo];                          fragmentNo++;                      }                        list.Add(new KeyValuePair<string' string>(key' elementValue));                  }                    ClearPersistant();              }              catch { }
Magic Number,Backend.Common,Events,C:\repos\PaulFreund_Chat\Backend\Common\Events.cs,GetPersistant,The following statement contains a magic number: try              {                  foreach (var key in _persistantQueue.Values.Keys)                  {                      string id = key.Substring(0' 36);                      int fragmentNo = 0;                        // Create Object                      if (!elements.ContainsKey(id))                          elements.Add(id' new Dictionary<int' string>());                        // Get fragment No if any                      if (key.Length > 36) // Bigger than a GUID => fragment                          fragmentNo = Convert.ToInt32(key.Split('#')[1]);                        elements[id][fragmentNo] = _persistantQueue.Values[key].ToString();                  }                      foreach (var key in elements.Keys)                  {                      var elementFragments = elements[key];                      var elementValue = string.Empty;                        int fragmentNo = 0;                      while (elementFragments.ContainsKey(fragmentNo))                      {                          elementValue += elementFragments[fragmentNo];                          fragmentNo++;                      }                        list.Add(new KeyValuePair<string' string>(key' elementValue));                  }                    ClearPersistant();              }              catch { }
Magic Number,Backend.Common,Helper,C:\repos\PaulFreund_Chat\Backend\Common\Helper.cs,OffsetColorValue,The following statement contains a magic number: var diff = (255 - (value + offset));
Magic Number,Backend.Common,Helper,C:\repos\PaulFreund_Chat\Backend\Common\Helper.cs,OffsetColorValue,The following statement contains a magic number: if (diff < 0 || diff > 255)                  offset *= (-1);
Magic Number,Backend.Common,Helper,C:\repos\PaulFreund_Chat\Backend\Common\Helper.cs,GetColorFromHexString,The following statement contains a magic number: if (string.IsNullOrEmpty(hexValue) || hexValue[0] != '#' || hexValue.Length != 9)                  hexValue = "#00000000";
Magic Number,Backend.Common,Helper,C:\repos\PaulFreund_Chat\Backend\Common\Helper.cs,GetColorFromHexString,The following statement contains a magic number: var a = Convert.ToByte(hexValue.Substring(0' 2)' 16);
Magic Number,Backend.Common,Helper,C:\repos\PaulFreund_Chat\Backend\Common\Helper.cs,GetColorFromHexString,The following statement contains a magic number: var a = Convert.ToByte(hexValue.Substring(0' 2)' 16);
Magic Number,Backend.Common,Helper,C:\repos\PaulFreund_Chat\Backend\Common\Helper.cs,GetColorFromHexString,The following statement contains a magic number: var r = Convert.ToByte(hexValue.Substring(2' 2)' 16);
Magic Number,Backend.Common,Helper,C:\repos\PaulFreund_Chat\Backend\Common\Helper.cs,GetColorFromHexString,The following statement contains a magic number: var r = Convert.ToByte(hexValue.Substring(2' 2)' 16);
Magic Number,Backend.Common,Helper,C:\repos\PaulFreund_Chat\Backend\Common\Helper.cs,GetColorFromHexString,The following statement contains a magic number: var r = Convert.ToByte(hexValue.Substring(2' 2)' 16);
Magic Number,Backend.Common,Helper,C:\repos\PaulFreund_Chat\Backend\Common\Helper.cs,GetColorFromHexString,The following statement contains a magic number: var g = Convert.ToByte(hexValue.Substring(4' 2)' 16);
Magic Number,Backend.Common,Helper,C:\repos\PaulFreund_Chat\Backend\Common\Helper.cs,GetColorFromHexString,The following statement contains a magic number: var g = Convert.ToByte(hexValue.Substring(4' 2)' 16);
Magic Number,Backend.Common,Helper,C:\repos\PaulFreund_Chat\Backend\Common\Helper.cs,GetColorFromHexString,The following statement contains a magic number: var g = Convert.ToByte(hexValue.Substring(4' 2)' 16);
Magic Number,Backend.Common,Helper,C:\repos\PaulFreund_Chat\Backend\Common\Helper.cs,GetColorFromHexString,The following statement contains a magic number: var b = Convert.ToByte(hexValue.Substring(6' 2)' 16);
Magic Number,Backend.Common,Helper,C:\repos\PaulFreund_Chat\Backend\Common\Helper.cs,GetColorFromHexString,The following statement contains a magic number: var b = Convert.ToByte(hexValue.Substring(6' 2)' 16);
Magic Number,Backend.Common,Helper,C:\repos\PaulFreund_Chat\Backend\Common\Helper.cs,GetColorFromHexString,The following statement contains a magic number: var b = Convert.ToByte(hexValue.Substring(6' 2)' 16);
Magic Number,Backend.Common,Helper,C:\repos\PaulFreund_Chat\Backend\Common\Helper.cs,UnixTimestampFromDateTime,The following statement contains a magic number: long unixTimestamp = date.Ticks - new DateTime(1970' 1' 1).Ticks;
Magic Number,Backend.Common,Connections,C:\repos\PaulFreund_Chat\Backend\Common\Connections.cs,Update,The following statement contains a magic number: _settingMutex.WaitOne(4000);
Magic Number,Backend.Common,Connection,C:\repos\PaulFreund_Chat\Backend\Common\Connections.cs,Update,The following statement contains a magic number: _updateMutex.WaitOne(4000);
Magic Number,Backend.Common,Connection,C:\repos\PaulFreund_Chat\Backend\Common\Connections.cs,WaitProcessing,The following statement contains a magic number: _XMPP.ProcessComplete.WaitOne(4000);
Magic Number,Backend.Common,Connection,C:\repos\PaulFreund_Chat\Backend\Common\Connections.cs,CheckKeepAlive,The following statement contains a magic number: var keepAliveMinutes = (trigger != null) ? trigger.CurrentKeepAliveIntervalInMinutes : 15;
Magic Number,Backend.Common,Connection,C:\repos\PaulFreund_Chat\Backend\Common\Connections.cs,RegisterControlChannel,The following statement contains a magic number: if (IsInternetAvailable)              {                  _XMPP.Socket = new StreamSocket();                    try                  {                      // Create controlchannel                      var slotType = _currentParameters.RequestConnectedStandby ? ControlChannelTriggerResourceType.RequestHardwareSlot : ControlChannelTriggerResourceType.RequestSoftwareSlot;                      _controlChannel = new ControlChannelTrigger("CT" + Id' 15' slotType);                      _controlChannel.UsingTransport(_XMPP.Socket);                        // Register package received event                      BackgroundTaskBuilder pushNotificationTrigger = new BackgroundTaskBuilder();                      pushNotificationTrigger.Name = "PN" + Id;                      pushNotificationTrigger.TaskEntryPoint = "BackgroundTasks.PushNotificationTrigger";                      pushNotificationTrigger.SetTrigger(_controlChannel.PushNotificationTrigger);                      pushNotificationTrigger.Register();                        // Register keepalive event                      BackgroundTaskBuilder keepAliveTrigger = new BackgroundTaskBuilder();                      keepAliveTrigger.Name = "KA" + Id;                      keepAliveTrigger.TaskEntryPoint = "BackgroundTasks.KeepAliveTrigger";                      keepAliveTrigger.SetTrigger(_controlChannel.KeepAliveTrigger);                      keepAliveTrigger.Register();                  }                  catch                  {                      PushEvent(ErrorType.RegisterControlChannel' ErrorPolicyType.Reconnect);                      return false;                  }  #if DEBUG                  PushEvent(LogType.Info' "ControlChanel registered");  #endif                  return true;              }              else              {                  return false;              }
Magic Number,Backend.Data,Avatar,C:\repos\PaulFreund_Chat\Backend\Data\Avatar.cs,Set,The following statement contains a magic number: try              {                  // Get the sha1 hash of the image for comparing                  var sha1Algorithm = HashAlgorithmProvider.OpenAlgorithm(HashAlgorithmNames.Sha1);                  var hashBuffer = sha1Algorithm.HashData(CryptographicBuffer.CreateFromByteArray(image));                  string hash = CryptographicBuffer.EncodeToHexString(hashBuffer);                    // Get Filename                  var filename = Helper.EncodeBASE64(jid) + "_" + Helper.UnixTimestampFromDateTime(DateTime.Now);                    // Create the file ( and overwrite if neccessary )                  var createTask = Folder.CreateFileAsync(filename' CreationCollisionOption.ReplaceExisting).AsTask();                  createTask.Wait(4000);                    // If creation succeeded' write the image                  if (createTask.IsCompleted && createTask.Result != null)                  {                      var writeTask = FileIO.WriteBytesAsync(createTask.Result' image).AsTask();                      writeTask.Wait(4000);                        // return the hash of the new image if everything went well                      if (writeTask.IsCompleted)                          return hash;                  }              } catch {}
Magic Number,Backend.Data,Avatar,C:\repos\PaulFreund_Chat\Backend\Data\Avatar.cs,Set,The following statement contains a magic number: try              {                  // Get the sha1 hash of the image for comparing                  var sha1Algorithm = HashAlgorithmProvider.OpenAlgorithm(HashAlgorithmNames.Sha1);                  var hashBuffer = sha1Algorithm.HashData(CryptographicBuffer.CreateFromByteArray(image));                  string hash = CryptographicBuffer.EncodeToHexString(hashBuffer);                    // Get Filename                  var filename = Helper.EncodeBASE64(jid) + "_" + Helper.UnixTimestampFromDateTime(DateTime.Now);                    // Create the file ( and overwrite if neccessary )                  var createTask = Folder.CreateFileAsync(filename' CreationCollisionOption.ReplaceExisting).AsTask();                  createTask.Wait(4000);                    // If creation succeeded' write the image                  if (createTask.IsCompleted && createTask.Result != null)                  {                      var writeTask = FileIO.WriteBytesAsync(createTask.Result' image).AsTask();                      writeTask.Wait(4000);                        // return the hash of the new image if everything went well                      if (writeTask.IsCompleted)                          return hash;                  }              } catch {}
Magic Number,Backend.Data,Avatar,C:\repos\PaulFreund_Chat\Backend\Data\Avatar.cs,RemoveOld,The following statement contains a magic number: foreach (var file in GetFiles())              {                  int lastUnderscore = file.Name.LastIndexOf('_');                    string jidhash = file.Name.Substring(0' lastUnderscore);                  int current = Convert.ToInt32(file.Name.Substring(lastUnderscore + 1));                    if (!mapLatest.ContainsKey(jidhash) && !mapLatestFile.ContainsKey(jidhash))                  {                      mapLatest.Add(jidhash' current);                      mapLatestFile.Add(jidhash' file);                  }                  else                  {                      if (current > mapLatest[jidhash])                      {                          mapLatest[jidhash] = current;                          mapLatestFile[jidhash].DeleteAsync().AsTask().Wait(4000);                          mapLatestFile[jidhash] = file;                      }                  }              }
Magic Number,Backend.Data,Avatar,C:\repos\PaulFreund_Chat\Backend\Data\Avatar.cs,Remove,The following statement contains a magic number: try              {                  foreach (var file in FindFiles(Helper.EncodeBASE64(jid)))                      file.DeleteAsync().AsTask().Wait(4000);              }              catch { }
Magic Number,Backend.Data,Avatar,C:\repos\PaulFreund_Chat\Backend\Data\Avatar.cs,Clear,The following statement contains a magic number: try               {                  var files = GetFiles();                  if (files != null)                  {                      foreach (var file in files)                          file.DeleteAsync().AsTask().Wait(4000);                  }              }              catch { }
Magic Number,Backend.Data,Avatar,C:\repos\PaulFreund_Chat\Backend\Data\Avatar.cs,BitmapFromBytes,The following statement contains a magic number: if (data != null)              {                  var stream = new InMemoryRandomAccessStream();                  var writer = new DataWriter(stream);                  writer.WriteBytes(data);                  writer.StoreAsync().AsTask().Wait(4000);                  stream.Seek(0);                  imageData.SetSource(stream);              }
Magic Number,Backend.Data,Avatar,C:\repos\PaulFreund_Chat\Backend\Data\Avatar.cs,LoadFile,The following statement contains a magic number: try              {                  if (file != null)                  {                      // Get the file                      var openTask = file.OpenAsync(FileAccessMode.Read).AsTask();                      openTask.Wait(4000);                        if (openTask.IsCompleted && openTask.Result != null)                      {                          IRandomAccessStream fileStream = openTask.Result;                            var reader = new DataReader(fileStream);                          var loadTask = reader.LoadAsync((uint)fileStream.Size).AsTask();                          loadTask.Wait(4000);                            if (loadTask.IsCompleted)                          {                              byte[] image = new byte[fileStream.Size];                              reader.ReadBytes(image);                              return image;                          }                      }                  }              }              catch { }
Magic Number,Backend.Data,Avatar,C:\repos\PaulFreund_Chat\Backend\Data\Avatar.cs,LoadFile,The following statement contains a magic number: try              {                  if (file != null)                  {                      // Get the file                      var openTask = file.OpenAsync(FileAccessMode.Read).AsTask();                      openTask.Wait(4000);                        if (openTask.IsCompleted && openTask.Result != null)                      {                          IRandomAccessStream fileStream = openTask.Result;                            var reader = new DataReader(fileStream);                          var loadTask = reader.LoadAsync((uint)fileStream.Size).AsTask();                          loadTask.Wait(4000);                            if (loadTask.IsCompleted)                          {                              byte[] image = new byte[fileStream.Size];                              reader.ReadBytes(image);                              return image;                          }                      }                  }              }              catch { }
Magic Number,Backend.Data,Avatar,C:\repos\PaulFreund_Chat\Backend\Data\Avatar.cs,GetFiles,The following statement contains a magic number: try              {                  var getFilesTask = Folder.GetFilesAsync().AsTask();                  getFilesTask.Wait(4000);                  if (getFilesTask.IsCompleted && getFilesTask.Result != null)                      return getFilesTask.Result;                  else                      return null;              }              catch { }
Magic Number,Backend.Data,Accounts,C:\repos\PaulFreund_Chat\Backend\Data\Accounts.cs,HardwareSlotsAvailable,The following statement contains a magic number: return count < 2 ? true : false;
Magic Number,Backend.Data,Account,C:\repos\PaulFreund_Chat\Backend\Data\Accounts.cs,Account,The following statement contains a magic number: SetDefault("port"' 5222);
Magic Number,Backend,Runtime,C:\repos\PaulFreund_Chat\Backend\Runtime.cs,OnBackgroundTaskRunning,The following statement contains a magic number: try              {                  // Get channel trigger                  var channelEventArgs = (IControlChannelTriggerEventDetails)instance.TriggerDetails;                  if (channelEventArgs != null)                      channelTrigger = channelEventArgs.ControlChannelTrigger;                    // Push notification                  if (instance.Task.Name.StartsWith("PN"))                  {                      var serverId = instance.Task.Name.Substring(2);                        if (_connections != null)                          _connections.WaitProcessing(serverId);                  }                  // Keep alive                  else if (instance.Task.Name.StartsWith("KA"))                  {                      var serverId = instance.Task.Name.Substring(2);                        if (_connections != null)                          _connections.CheckKeepAlive(serverId' channelTrigger);                  }                  // Everything else                  else                  {                      switch (instance.Task.Name)                      {                          case "ControlChannelReset":                              await Task.Delay(_eventDelayMS);                              PushEvent(WindowsType.ControlChannelReset);                              _connections.Update();                              break;                            case "InternetAvailable":                              await Task.Delay(_eventDelayMS);                              PushEvent(WindowsType.InternetAvailable);                              _connections.Update();                              break;                            case "InternetNotAvailable":                              await Task.Delay(_eventDelayMS);                              PushEvent(WindowsType.InternetNotAvailable);                              _connections.Update();                              break;                            case "ServicingComplete":                              PushEvent(WindowsType.ServicingComplete);                              break;                            case "SessionConnected":                              await Task.Delay(_eventDelayMS);                              PushEvent(WindowsType.SessionConnected);                              _connections.Update();                              break;                            case "UserAway":                              PushEvent(WindowsType.UserAway);                              break;                            case "UserPresent":                              PushEvent(WindowsType.UserPresent);                              break;                            case "LockScreenApplicationAdded":                              PushEvent(WindowsType.LockScreenApplicationAdded);                              OnBackgroundStatusChanged();                              break;                            case "LockScreenApplicationRemoved":                              PushEvent(WindowsType.LockScreenApplicationRemoved);                              OnBackgroundStatusChanged();                              break;                            case "TimeZoneChange":                              PushEvent(WindowsType.TimeZoneChange);                              break;                      }                  }              }              catch {}
Magic Number,Backend,Runtime,C:\repos\PaulFreund_Chat\Backend\Runtime.cs,OnBackgroundTaskRunning,The following statement contains a magic number: try              {                  // Get channel trigger                  var channelEventArgs = (IControlChannelTriggerEventDetails)instance.TriggerDetails;                  if (channelEventArgs != null)                      channelTrigger = channelEventArgs.ControlChannelTrigger;                    // Push notification                  if (instance.Task.Name.StartsWith("PN"))                  {                      var serverId = instance.Task.Name.Substring(2);                        if (_connections != null)                          _connections.WaitProcessing(serverId);                  }                  // Keep alive                  else if (instance.Task.Name.StartsWith("KA"))                  {                      var serverId = instance.Task.Name.Substring(2);                        if (_connections != null)                          _connections.CheckKeepAlive(serverId' channelTrigger);                  }                  // Everything else                  else                  {                      switch (instance.Task.Name)                      {                          case "ControlChannelReset":                              await Task.Delay(_eventDelayMS);                              PushEvent(WindowsType.ControlChannelReset);                              _connections.Update();                              break;                            case "InternetAvailable":                              await Task.Delay(_eventDelayMS);                              PushEvent(WindowsType.InternetAvailable);                              _connections.Update();                              break;                            case "InternetNotAvailable":                              await Task.Delay(_eventDelayMS);                              PushEvent(WindowsType.InternetNotAvailable);                              _connections.Update();                              break;                            case "ServicingComplete":                              PushEvent(WindowsType.ServicingComplete);                              break;                            case "SessionConnected":                              await Task.Delay(_eventDelayMS);                              PushEvent(WindowsType.SessionConnected);                              _connections.Update();                              break;                            case "UserAway":                              PushEvent(WindowsType.UserAway);                              break;                            case "UserPresent":                              PushEvent(WindowsType.UserPresent);                              break;                            case "LockScreenApplicationAdded":                              PushEvent(WindowsType.LockScreenApplicationAdded);                              OnBackgroundStatusChanged();                              break;                            case "LockScreenApplicationRemoved":                              PushEvent(WindowsType.LockScreenApplicationRemoved);                              OnBackgroundStatusChanged();                              break;                            case "TimeZoneChange":                              PushEvent(WindowsType.TimeZoneChange);                              break;                      }                  }              }              catch {}
Missing Default,Backend.Common,BackendEvent,C:\repos\PaulFreund_Chat\Backend\Common\Events.cs,ToString,The following switch statement is missing a default case: switch (Type)              {                  case EventType.Windows:                      be = this as BackendEventWindows;                      return be.ToString();                  case EventType.Message:                      be = this as BackendEventMessage;                      return be.ToString();                  case EventType.Request:                      be = this as BackendEventRequest;                      return be.ToString();                  case EventType.State:                      be = this as BackendEventState;                      return be.ToString();                  case EventType.Log:                      be = this as BackendEventLog;                      return be.ToString();                  case EventType.Error:                      be = this as BackendEventError;                      return be.ToString();              }
Missing Default,Backend.Common,Notifier,C:\repos\PaulFreund_Chat\Backend\Common\Notifier.cs,UpdateBadge,The following switch statement is missing a default case: switch (status.status)                  {                      case StatusType.Available:                          value = "available";                          break;                      case StatusType.Away:                          value = "away";                          break;                      case StatusType.Busy:                          value = "busy";                          break;                      case StatusType.Offline:                          value = "unavailable";                          break;                  }
Missing Default,Backend,Runtime,C:\repos\PaulFreund_Chat\Backend\Runtime.cs,OnBackgroundStatusChanged,The following switch statement is missing a default case: switch (status)              {                  case BackgroundAccessStatus.AllowedWithAlwaysOnRealTimeConnectivity:                      Init();                      break;                  case BackgroundAccessStatus.AllowedMayUseActiveRealTimeConnectivity:                      Init();                      break;                  case BackgroundAccessStatus.Unspecified:                      RequestBackgroundAccess();                      break;                  case BackgroundAccessStatus.Denied:                      PushEvent(ErrorType.RequestBackgroundAccess' ErrorPolicyType.Severe);                      break;              }
Missing Default,Backend,Runtime,C:\repos\PaulFreund_Chat\Backend\Runtime.cs,OnBackgroundTaskRunning,The following switch statement is missing a default case: switch (instance.Task.Name)                      {                          case "ControlChannelReset":                              await Task.Delay(_eventDelayMS);                              PushEvent(WindowsType.ControlChannelReset);                              _connections.Update();                              break;                            case "InternetAvailable":                              await Task.Delay(_eventDelayMS);                              PushEvent(WindowsType.InternetAvailable);                              _connections.Update();                              break;                            case "InternetNotAvailable":                              await Task.Delay(_eventDelayMS);                              PushEvent(WindowsType.InternetNotAvailable);                              _connections.Update();                              break;                            case "ServicingComplete":                              PushEvent(WindowsType.ServicingComplete);                              break;                            case "SessionConnected":                              await Task.Delay(_eventDelayMS);                              PushEvent(WindowsType.SessionConnected);                              _connections.Update();                              break;                            case "UserAway":                              PushEvent(WindowsType.UserAway);                              break;                            case "UserPresent":                              PushEvent(WindowsType.UserPresent);                              break;                            case "LockScreenApplicationAdded":                              PushEvent(WindowsType.LockScreenApplicationAdded);                              OnBackgroundStatusChanged();                              break;                            case "LockScreenApplicationRemoved":                              PushEvent(WindowsType.LockScreenApplicationRemoved);                              OnBackgroundStatusChanged();                              break;                            case "TimeZoneChange":                              PushEvent(WindowsType.TimeZoneChange);                              break;                      }
