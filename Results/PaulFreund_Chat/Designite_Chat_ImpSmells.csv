Implementation smell,Namespace,Class,File,Method,Description
Long Method,Chat.Frontend,Interpreter,C:\repos\PaulFreund_Chat\Chat\Frontend\Interpreter.cs,Process,The method has 117 lines of code.
Long Method,Chat.Frontend,Interpreter,C:\repos\PaulFreund_Chat\Chat\Frontend\Interpreter.cs,Process,The method has 102 lines of code.
Complex Method,Chat.Frontend,Interpreter,C:\repos\PaulFreund_Chat\Chat\Frontend\Interpreter.cs,Process,Cyclomatic complexity of the method is 15
Complex Method,Chat.Frontend,Interpreter,C:\repos\PaulFreund_Chat\Chat\Frontend\Interpreter.cs,Process,Cyclomatic complexity of the method is 9
Complex Method,Chat.Frontend,Interpreter,C:\repos\PaulFreund_Chat\Chat\Frontend\Interpreter.cs,Process,Cyclomatic complexity of the method is 19
Complex Method,Chat.UI.Controls,Roster,C:\repos\PaulFreund_Chat\Chat\UI\Controls\Roster.xaml.cs,GenerateList,Cyclomatic complexity of the method is 10
Long Statement,Chat,App,C:\repos\PaulFreund_Chat\Chat\App.xaml.cs,UIError,The length of the statement  "            string message = "Error from " + displaypath + " in function " + name + " on line " + lineNumber + ": " + e.Message + ". Please send to http://feedback.lvl3.org !"; " is 164.
Long Statement,Chat.Frontend,Events,C:\repos\PaulFreund_Chat\Chat\Frontend\Events.cs,SubscriptionContactSelected,The length of the statement  "{ if (OnSubscriptionContactSelected != null) OnSubscriptionContactSelected(sender' new ContactSelectedEventArgs(item)); }" is 121.
Long Statement,Chat.Frontend,Interpreter,C:\repos\PaulFreund_Chat\Chat\Frontend\Interpreter.cs,Process,The length of the statement  "                if (message.type == Tags.jabber.client.message.typeEnum.chat || message.type == Tags.jabber.client.message.typeEnum.normal) " is 123.
Long Statement,Chat.UI.Controls,Conversation,C:\repos\PaulFreund_Chat\Chat\UI\Controls\Conversation.xaml.cs,GetOther,The length of the statement  "                if (CurrentConversation != null && !string.IsNullOrEmpty(CurrentConversation.Self) && !string.IsNullOrEmpty(CurrentConversation.Other)) " is 135.
Long Statement,Chat.UI.Controls,Conversation,C:\repos\PaulFreund_Chat\Chat\UI\Controls\Conversation.xaml.cs,GetSelf,The length of the statement  "                if (CurrentConversation != null && !string.IsNullOrEmpty(CurrentConversation.Self) && !string.IsNullOrEmpty(CurrentConversation.Other)) " is 135.
Long Statement,Chat.UI.Controls,Roster,C:\repos\PaulFreund_Chat\Chat\UI\Controls\Roster.xaml.cs,ShowContact,The length of the statement  "            if (Frontend.Settings.showOffline || contact.IsOnline || contact.HasUnreadMessages || contact.subscription == item.subscriptionEnum.from || contact.subscription == item.subscriptionEnum.to || contact.subscriptionRequest == Contact.SubscriptionRequestType.Subscribe) " is 265.
Long Statement,Chat.UI.Flyout,AccountListEdit,C:\repos\PaulFreund_Chat\Chat\UI\Flyout\AccountListEdit.xaml.cs,OnAccountRemove,The length of the statement  "                    dialog.Commands.Add(new UICommand(Helper.Translate("MessageBoxYes")' new UICommandInvokedHandler(this.AccountRemoveDialogHandler)' "Yes")); " is 139.
Long Statement,Chat.UI.Flyout,AccountListEdit,C:\repos\PaulFreund_Chat\Chat\UI\Flyout\AccountListEdit.xaml.cs,OnAccountRemove,The length of the statement  "                    dialog.Commands.Add(new UICommand(Helper.Translate("MessageBoxNo")' new UICommandInvokedHandler(this.AccountRemoveDialogHandler)' "No")); " is 137.
Long Statement,Chat.UI.Flyout,AccountListEdit,C:\repos\PaulFreund_Chat\Chat\UI\Flyout\AccountListEdit.xaml.cs,OnAddFacebook,The length of the statement  "                dialog.Commands.Add(new UICommand(Helper.Translate("MessageBoxOk")' new UICommandInvokedHandler(this.FacebookAccountDialogHandler)' "Ok")); " is 139.
Long Statement,Chat.UI.Views,Main,C:\repos\PaulFreund_Chat\Chat\UI\Views\Main.xaml.cs,CommandsRequest,The length of the statement  "                    accountsCommand = new SettingsCommand("accounts"' Helper.Translate("FlyoutTypeAccountListEdit")' (x) => OnAccounts(true)); " is 122.
Complex Conditional,Chat.UI.Controls,Roster,C:\repos\PaulFreund_Chat\Chat\UI\Controls\Roster.xaml.cs,ShowContact,The conditional expression  "Frontend.Settings.showOffline || contact.IsOnline || contact.HasUnreadMessages || contact.subscription == item.subscriptionEnum.from || contact.subscription == item.subscriptionEnum.to || contact.subscriptionRequest == Contact.SubscriptionRequestType.Subscribe"  is complex.
Complex Conditional,Chat.UI.Flyout,AccountEdit,C:\repos\PaulFreund_Chat\Chat\UI\Flyout\AccountEdit.xaml.cs,SaveAccount,The conditional expression  "Title.Text.Length == 0 ||                          Jid.Text.Length == 0 ||                          Password.Password.Length == 0 ||                          Host.Text.Length == 0 ||                          ColorSelector.SelectedItem == null ||                          Port.Text.Length == 0"  is complex.
Complex Conditional,Chat.UI.Flyout,AddContact,C:\repos\PaulFreund_Chat\Chat\UI\Flyout\AddContact.xaml.cs,OnAdd,The conditional expression  "account == null ||                  string.IsNullOrEmpty(jid.Bare) ||                  string.IsNullOrEmpty(jid.Server) ||                  string.IsNullOrEmpty(jid.User)"  is complex.
Complex Conditional,Chat.Common,LayoutAwarePage,C:\repos\PaulFreund_Chat\Chat\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "(args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167)"  is complex.
Complex Conditional,Chat.Common,LayoutAwarePage,C:\repos\PaulFreund_Chat\Chat\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt)"  is complex.
Complex Conditional,Chat.Common,LayoutAwarePage,C:\repos\PaulFreund_Chat\Chat\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt)"  is complex.
Empty Catch Block,Chat.UI.Converter,ColorValueConverter,C:\repos\PaulFreund_Chat\Chat\UI\Converter\BasicConverter.cs,Convert,The method has an empty catch block.
Empty Catch Block,Chat.UI.Flyout,StatusEdit,C:\repos\PaulFreund_Chat\Chat\UI\Flyout\StatusEdit.xaml.cs,OnSetAvatar,The method has an empty catch block.
Magic Number,Chat,App,C:\repos\PaulFreund_Chat\Chat\App.xaml.cs,StartLoading,The following statement contains a magic number: try              {                  var accountObj = Accounts[account];                  if (accountObj != null)                  {                      // Create Timer                      var timer = new DispatcherTimer();                      timer.Interval = TimeSpan.FromSeconds(5);                      timer.Tick += (o' e) =>                      {                          Status.SetLoading(account' false);                          timer.Stop();                      };                        // Add it to list                      if (!_loadingTimers.ContainsKey(account))                          _loadingTimers.Add(account' timer);                      else                      {                          _loadingTimers[account].Stop();                          _loadingTimers[account] = timer;                      }                        _loadingTimers[account].Start();                      Status.SetLoading(account' true);                  }              }              catch (Exception uiEx) { UIError(uiEx); }
Magic Number,Chat.UI.Controls,ColorEdit,C:\repos\PaulFreund_Chat\Chat\UI\Controls\ColorEdit.xaml.cs,TextBox_TextChanged,The following statement contains a magic number: try              {                  if (!(sender is TextBox))                      return;                    var textbox = sender as TextBox;                    if (!string.IsNullOrEmpty(textbox.Text))                  {                      var hash = textbox.Text[0];                      var value = textbox.Text.Substring(1);                      var isHex = System.Text.RegularExpressions.Regex.IsMatch(value' @"\A\b[0-9a-fA-F]+\b\Z");                        if (hash == '#' && value.Length == 8 && isHex)                      {                          ColorValue = textbox.Text;                          textbox.BorderBrush = Frontend.Resources["TextBoxBorderThemeBrush"] as SolidColorBrush;                          return;                      }                  }                    textbox.BorderBrush = new SolidColorBrush(Helper.GetColorFromHexString(Frontend.AppColors.HighlightImportant));              }              catch (Exception uiEx) { Frontend.UIError(uiEx); }
Magic Number,Chat.UI.Controls,Roster,C:\repos\PaulFreund_Chat\Chat\UI\Controls\Roster.xaml.cs,UpdateData,The following statement contains a magic number: try              {                  if (_isDataUpdateRunning)                  {                      _isDataUpdatePending = true;                      return;                  }                    _isDataUpdateRunning = true;                  {                      _isDataUpdatePending = true;                      await Frontend.RunAsync(() =>                      {                          List<Contact> newList = null;                            while (_isDataUpdatePending)                          {                              _isDataUpdatePending = false;                              newList = GenerateList();                          }                            if (newList != null)                          {                              _lockListBuffer.WaitOne(4000);                              _lockListBuffer.Reset();                                _listBuffer = newList;                              _isListBufferUpdated = true;                                _lockListBuffer.Set();                                UpdateView();                          }                      });                  }                    _isDataUpdateRunning = false;                    if (_isDataUpdatePending)                  {                      _isDataUpdatePending = false;                      UpdateData();                  }              }              catch (Exception uiEx) { Frontend.UIError(uiEx); }
Magic Number,Chat.UI.Controls,Roster,C:\repos\PaulFreund_Chat\Chat\UI\Controls\Roster.xaml.cs,UpdateView,The following statement contains a magic number: try              {                  if (_isViewUpdateRunning)                  {                      _isViewUpdatePending = true;                      return;                  }                    _isViewUpdateRunning = true;                    if (!_updateCountdownTimer.IsEnabled)                  {                      if (_isListBufferUpdated)                      {                          await Frontend.RunAsync(() =>                          {                              _lockContactSelection = true;                              {                                  _lockListBuffer.WaitOne(4000);                                  _lockListBuffer.Reset();                                  {                                      RosterList.DataContext = _listBuffer;                                      _isListBufferUpdated = false;                                  }                                  _lockListBuffer.Set();                                    if (_listBuffer.Contains(_selectedContact))                                      RosterList.SelectedItem = _selectedContact;                                  else                                      RosterList.SelectedItem = _selectedContact = null;                              }                              _lockContactSelection = false;                          });                      }                        if (_isListScrolled)                      {                          await Frontend.RunAsync(() =>                          {                              if (Frontend.Settings.autoScrollRoster && RosterList.Items.Count > 0)                              {                                  if (Frontend.Settings.stickyRosterContacts || _selectedContact == null)                                      RosterList.ScrollIntoView(RosterList.Items.First());                                  else                                      RosterList.ScrollIntoView(_selectedContact);                              }                                _isListScrolled = false;                          });                      }                  }                    _isViewUpdateRunning = false;                    if (_isViewUpdatePending)                  {                      _isViewUpdatePending = false;                      UpdateView();                  }              }              catch (Exception uiEx) { Frontend.UIError(uiEx); }
Magic Number,Chat.UI.Converter,OverlayColorPointerOver,C:\repos\PaulFreund_Chat\Chat\UI\Converter\BasicConverter.cs,Convert,The following statement contains a magic number: const int offset = 30;
Magic Number,Chat.UI.Converter,OverlayColorPressed,C:\repos\PaulFreund_Chat\Chat\UI\Converter\BasicConverter.cs,Convert,The following statement contains a magic number: const int offset = -40;
Magic Number,Chat.UI.Converter,OverlayColorDisabled,C:\repos\PaulFreund_Chat\Chat\UI\Converter\BasicConverter.cs,Convert,The following statement contains a magic number: const int offset = -100;
Magic Number,Chat.UI.Converter,OverlayColorDisabled,C:\repos\PaulFreund_Chat\Chat\UI\Converter\BasicConverter.cs,Convert,The following statement contains a magic number: const int colorOffset = -10;
Magic Number,Chat.UI.Converter,OverlayColorDisabled,C:\repos\PaulFreund_Chat\Chat\UI\Converter\BasicConverter.cs,Convert,The following statement contains a magic number: if (color.A < 100)                  color.A = 100;
Magic Number,Chat.UI.Converter,OverlayColorDisabled,C:\repos\PaulFreund_Chat\Chat\UI\Converter\BasicConverter.cs,Convert,The following statement contains a magic number: if (color.A < 100)                  color.A = 100;
Magic Number,Chat.UI.Flyout,AccountListEdit,C:\repos\PaulFreund_Chat\Chat\UI\Flyout\AccountListEdit.xaml.cs,OnAddGTalk,The following statement contains a magic number: if (!Frontend.Accounts.IsFull)              {                  var template = new AccountTemplate();                  template.Jid = "@gmail.com";                  template.Host = "talk.google.com";                  template.Port = 5223;                  template.SSL = true;                  template.OldSSL = true;                  template.Plain = true;                  template.MD5 = true;                  template.SCRAM = true;                  new Flyout(FlyoutType.AccountEdit' template' flyoutSelf);              }
Magic Number,Chat.UI.Flyout,AccountListEdit,C:\repos\PaulFreund_Chat\Chat\UI\Flyout\AccountListEdit.xaml.cs,FacebookAccountDialogHandler,The following statement contains a magic number: template.Port = 5222;
Magic Number,Chat.UI.Flyout,StatusEdit,C:\repos\PaulFreund_Chat\Chat\UI\Flyout\StatusEdit.xaml.cs,OnSetAvatar,The following statement contains a magic number: if( file != null )              {                  var filetype = file.ContentType;                    IRandomAccessStream fileStream = await file.OpenAsync(FileAccessMode.Read);                  if( fileStream != null )                  {                      BitmapDecoder decoder = await BitmapDecoder.CreateAsync(fileStream);                      if (decoder != null)                      {                          InMemoryRandomAccessStream imageStream = new InMemoryRandomAccessStream();                          BitmapEncoder encoder = await BitmapEncoder.CreateForTranscodingAsync(imageStream' decoder);                          if (encoder != null)                          {                              encoder.BitmapTransform.ScaledHeight = 64;                              encoder.BitmapTransform.ScaledWidth = 64;                                try                              {                                  await encoder.FlushAsync();                                                                    // Rewind !                                  imageStream.Seek(0);                                    var reader = new DataReader(imageStream);                                  await reader.LoadAsync((uint)imageStream.Size);                                  if ( imageStream.Size > 0)                                  {                                      byte[] image = new byte[imageStream.Size];                                      reader.ReadBytes(image);                                      CurrentStatus.SetAvatar(image);                                        XMPPHelper.PublishAvatar(filetype' image);                                  }                              }                              catch { }                          }                      }                  }              }
Magic Number,Chat.UI.Flyout,StatusEdit,C:\repos\PaulFreund_Chat\Chat\UI\Flyout\StatusEdit.xaml.cs,OnSetAvatar,The following statement contains a magic number: if( file != null )              {                  var filetype = file.ContentType;                    IRandomAccessStream fileStream = await file.OpenAsync(FileAccessMode.Read);                  if( fileStream != null )                  {                      BitmapDecoder decoder = await BitmapDecoder.CreateAsync(fileStream);                      if (decoder != null)                      {                          InMemoryRandomAccessStream imageStream = new InMemoryRandomAccessStream();                          BitmapEncoder encoder = await BitmapEncoder.CreateForTranscodingAsync(imageStream' decoder);                          if (encoder != null)                          {                              encoder.BitmapTransform.ScaledHeight = 64;                              encoder.BitmapTransform.ScaledWidth = 64;                                try                              {                                  await encoder.FlushAsync();                                                                    // Rewind !                                  imageStream.Seek(0);                                    var reader = new DataReader(imageStream);                                  await reader.LoadAsync((uint)imageStream.Size);                                  if ( imageStream.Size > 0)                                  {                                      byte[] image = new byte[imageStream.Size];                                      reader.ReadBytes(image);                                      CurrentStatus.SetAvatar(image);                                        XMPPHelper.PublishAvatar(filetype' image);                                  }                              }                              catch { }                          }                      }                  }              }
Magic Number,Chat.Common,LayoutAwarePage,C:\repos\PaulFreund_Chat\Chat\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      args.Handled = true;                      this.GoBack(this' new RoutedEventArgs());                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      args.Handled = true;                      this.GoForward(this' new RoutedEventArgs());                  }              }
Magic Number,Chat.Common,LayoutAwarePage,C:\repos\PaulFreund_Chat\Chat\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      args.Handled = true;                      this.GoBack(this' new RoutedEventArgs());                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      args.Handled = true;                      this.GoForward(this' new RoutedEventArgs());                  }              }
Magic Number,Chat.Common,LayoutAwarePage,C:\repos\PaulFreund_Chat\Chat\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      args.Handled = true;                      this.GoBack(this' new RoutedEventArgs());                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      args.Handled = true;                      this.GoForward(this' new RoutedEventArgs());                  }              }
Magic Number,Chat.Common,LayoutAwarePage,C:\repos\PaulFreund_Chat\Chat\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      args.Handled = true;                      this.GoBack(this' new RoutedEventArgs());                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      args.Handled = true;                      this.GoForward(this' new RoutedEventArgs());                  }              }
Missing Default,Chat,App,C:\repos\PaulFreund_Chat\Chat\App.xaml.cs,OnBackendEventState,The following switch statement is missing a default case: switch (state.StateType)                          {                              case StateType.Connecting:                                  StartLoading(account.jid);                                  ResetAccountState(account.jid);                                  break;                              case StateType.ResourceBound:                                  break;                              case StateType.Running:                                  StartLoading(account.jid);                                  Helper.RequestRoster(account);                                  Helper.RequestVCard(account);                                  break;                              case StateType.Disconnecting:                                  StopLoading(account.jid);                                  break;                              case StateType.Disconnected:                                  StopLoading(account.jid);                                  ResetAccountState(account.jid);                                  break;                          }
Missing Default,Chat.Frontend,Notifications,C:\repos\PaulFreund_Chat\Chat\Frontend\Notifications.cs,CreateError,The following switch statement is missing a default case: switch (errorType)                      {                          case ErrorPolicyType.Deactivate: { notification.Action = FlyoutType.AccountListEdit; break; }                          case ErrorPolicyType.Informative: { notification.Action = FlyoutType.None; break; }                          case ErrorPolicyType.Severe: { notification.Action = FlyoutType.None; break; }                      }
Missing Default,Chat.Frontend,Notifications,C:\repos\PaulFreund_Chat\Chat\Frontend\Notifications.cs,CreateInformative,The following switch statement is missing a default case: switch (infoType)                  {                      case NotificationInfoType.Subscribed:    // Notify that he now sends you updates to his status                          notification.Message = fromJID.Bare + " " + Helper.Translate("SubscriptionAllowed");                          break;                        case NotificationInfoType.Unsubscribed:  // Notify that he dosn't send you updates to his status anymore                          notification.Message = fromJID.Bare + " " + Helper.Translate("SubscriptionRevoked");                          break;                      case NotificationInfoType.Unsubscribe:   // Notify that he dosn't want to see your updates anymore                          notification.Message = fromJID.Bare + " " + Helper.Translate("SubscriptionUnsubscribed");                          break;                  }
Missing Default,Chat.Frontend,Interpreter,C:\repos\PaulFreund_Chat\Chat\Frontend\Interpreter.cs,Process,The following switch statement is missing a default case: switch (presence.type)                  {                      case Tags.jabber.client.presence.typeEnum.none:                          {                              // Get Show                              var showElement = presence.showElements.FirstOrDefault();                              var status = showElement != null ? showElement.Value : Tags.jabber.client.show.valueEnum.none;                                // Get status message                              var statusElement = presence.statusElements.FirstOrDefault();                              var statusMessage = statusElement != null ? statusElement.Value : string.Empty;                                // Get priority                              var priorityElement = presence.priorityElements.FirstOrDefault();                              var priority = priorityElement != null ? priorityElement.Value : 0;                                contact.SetResource(from.Resource' priority' status' statusMessage);                              break;                          }                        case Tags.jabber.client.presence.typeEnum.unavailable:                          {                              contact.RemoveResource(from.Resource);                              break;                          }                        case Tags.jabber.client.presence.typeEnum.subscribe:                          {                              contact.subscriptionRequest = Backend.Data.Contact.SubscriptionRequestType.Subscribe;                              Frontend.Notifications.CreateRequest(NotificationRequestType.Subscribe' presence.Account' presence.from);                              break;                          }                        case Tags.jabber.client.presence.typeEnum.subscribed:                          {                              Frontend.Notifications.CreateInformative(NotificationInfoType.Subscribed' presence.Account' presence.from);                              break;                          }                      case Tags.jabber.client.presence.typeEnum.unsubscribe:                          {                              contact.subscriptionRequest = Backend.Data.Contact.SubscriptionRequestType.Unsubscribe;                              Frontend.Notifications.CreateInformative(NotificationInfoType.Unsubscribe' presence.Account' presence.from);                              break;                          }                      case Tags.jabber.client.presence.typeEnum.unsubscribed:                          {                              Frontend.Notifications.CreateInformative(NotificationInfoType.Unsubscribed' presence.Account' presence.from);                              break;                          }                  }
Missing Default,Chat.UI.Converter,ContactStatusToColor,C:\repos\PaulFreund_Chat\Chat\UI\Converter\ContactConverter.cs,Convert,The following switch statement is missing a default case: switch (status)                  {                      case StatusType.Available:                          return Frontend.Resources["StatusBrushAvailable"] as LinearGradientBrush;                      case StatusType.Away:                          return Frontend.Resources["StatusBrushAway"] as LinearGradientBrush;                      case StatusType.Busy:                          return Frontend.Resources["StatusBrushBusy"] as LinearGradientBrush;                      case StatusType.Offline:                          return Frontend.Resources["StatusBrushOffline"] as LinearGradientBrush;                  }
Missing Default,Chat.UI.Converter,NotificationTypeToColor,C:\repos\PaulFreund_Chat\Chat\UI\Converter\NotificationConverter.cs,Convert,The following switch statement is missing a default case: switch (type)                  {                      case NotificationType.Error:                          return colors.HighlightImportant;                      case NotificationType.Informative:                          return colors.HighlightWarning;                      case NotificationType.Request:                          return colors.HighlightRequest;                  }
Missing Default,Chat.UI.Converter,ColorValueConverter,C:\repos\PaulFreund_Chat\Chat\UI\Converter\BasicConverter.cs,Convert,The following switch statement is missing a default case: switch (parameterText)                      {                          case "A":                              return color.A;                          case "R":                              return color.R;                          case "G":                              return color.G;                          case "B":                              return color.B;                      }
Missing Default,Chat.UI.Flyout,Flyout,C:\repos\PaulFreund_Chat\Chat\UI\Flyout\Flyout.cs,GetFlyoutWidth,The following switch statement is missing a default case: switch (type)              {                  case FlyoutType.About: { return SmallFlyoutSize; }                  case FlyoutType.AccountEdit: { return SmallFlyoutSize; }                  case FlyoutType.AccountListEdit: { return SmallFlyoutSize; }                  case FlyoutType.AddContact: { return SmallFlyoutSize; }                  case FlyoutType.EditContact: { return SmallFlyoutSize; }                  case FlyoutType.Notifications: { return BigFlyoutSize; }                  case FlyoutType.Subscription: { return SmallFlyoutSize; }                  case FlyoutType.RemoveContact: { return SmallFlyoutSize; }                  case FlyoutType.SettingsEdit: { return SmallFlyoutSize; }                  case FlyoutType.StatusEdit: { return SmallFlyoutSize; }                  case FlyoutType.ThemeEdit: { return BigFlyoutSize; }              }
Missing Default,Chat.UI.Flyout,FlyoutControl,C:\repos\PaulFreund_Chat\Chat\UI\Flyout\FlyoutControl.xaml.cs,FlyoutControl,The following switch statement is missing a default case: switch(type)              {                  case FlyoutType.About:              { FlyoutContent.Child = new About(self); break; }                  case FlyoutType.AccountEdit:        { FlyoutContent.Child = new AccountEdit(self' data); break; }                  case FlyoutType.AccountListEdit:    { FlyoutContent.Child = new AccountListEdit(self); break; }                   case FlyoutType.AddContact:         { FlyoutContent.Child = new AddContact(self); break; }                  case FlyoutType.EditContact:        { FlyoutContent.Child = new EditContact(self' (Backend.Data.Contact)data); break; }                  case FlyoutType.Notifications:      { FlyoutContent.Child = new Notifications(self); break; }                  case FlyoutType.Subscription:       { FlyoutContent.Child = new Subscription(self' (Backend.Data.Contact)data); break; }                  case FlyoutType.RemoveContact:      { FlyoutContent.Child = new RemoveContact(self' (Backend.Data.Contact)data); break; }                  case FlyoutType.SettingsEdit:       { FlyoutContent.Child = new SettingsEdit(self); break; }                  case FlyoutType.StatusEdit:         { FlyoutContent.Child = new StatusEdit(self); break; }                  case FlyoutType.ThemeEdit:          { FlyoutContent.Child = new ThemeEdit(self); break; }              }
