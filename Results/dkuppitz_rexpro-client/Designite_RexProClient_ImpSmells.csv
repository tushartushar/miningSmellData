Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Rexster,RexProClient,C:\repos\dkuppitz_rexpro-client\RexProClient\RexProClient.cs,ParseResponse,Cyclomatic complexity of the method is 9
Long Statement,Rexster,RexProClient,C:\repos\dkuppitz_rexpro-client\RexProClient\RexProClient.cs,SendRequest,The length of the statement  "	var netStream = message.Session != Guid.Empty ? SessionStreams.GetOrAdd (message.Session' _ => this.tcpClientProvider ().GetStream ()) : this.tcpClientProvider ().GetStream (); " is 176.
Long Statement,Rexster,RexProClient,C:\repos\dkuppitz_rexpro-client\RexProClient\RexProClient.cs,ParseResponse,The length of the statement  "	if ((headerBytes [0] != ProtocolVersion) || (headerBytes [1] != 1) || (headerBytes [6] | expectedResponseMessageType) != expectedResponseMessageType) { " is 151.
Long Statement,Rexster,RexProClient,C:\repos\dkuppitz_rexpro-client\RexProClient\RexProClient.cs,ParseResponse,The length of the statement  "			var msg = string.Format (CultureInfo.InvariantCulture' "Unexpected message type '{0}'' expected '{1}'."' headerBytes [6]' expectedResponseMessageType); " is 151.
Complex Conditional,Rexster.Messages,ScriptRequest,C:\repos\dkuppitz_rexpro-client\RexProClient\Messages\ScriptRequest.cs,GetBindingValue,The conditional expression  "jToken != null && jToken.HasValues && jToken ["_type"] != null && jToken ["_id"] != null"  is complex.
Magic Number,Rexster,RexProClient,C:\repos\dkuppitz_rexpro-client\RexProClient\RexProClient.cs,BuildRequestMessageBuffer,The following statement contains a magic number: if (message is SessionRequest) {  	messageBytes [offset++] = requestMessageType = 1;  }  else if (message is ScriptRequest) {  	messageBytes [offset++] = requestMessageType = 3;  }  else {  	throw new RexProClientException (string.Format ("Unsupported message type: {0}"' message.GetType ().Name));  }  
Magic Number,Rexster,RexProClient,C:\repos\dkuppitz_rexpro-client\RexProClient\RexProClient.cs,BuildRequestMessageBuffer,The following statement contains a magic number: if (message is ScriptRequest) {  	messageBytes [offset++] = requestMessageType = 3;  }  else {  	throw new RexProClientException (string.Format ("Unsupported message type: {0}"' message.GetType ().Name));  }  
Magic Number,Rexster,RexProClient,C:\repos\dkuppitz_rexpro-client\RexProClient\RexProClient.cs,BuildRequestMessageBuffer,The following statement contains a magic number: messageBytes [offset++] = requestMessageType = 3;  
Magic Number,Rexster,RexProClient,C:\repos\dkuppitz_rexpro-client\RexProClient\RexProClient.cs,BuildRequestMessageBuffer,The following statement contains a magic number: messageBytes [offset++] = (byte)((jsonLength >> 24) & 255);  
Magic Number,Rexster,RexProClient,C:\repos\dkuppitz_rexpro-client\RexProClient\RexProClient.cs,BuildRequestMessageBuffer,The following statement contains a magic number: messageBytes [offset++] = (byte)((jsonLength >> 24) & 255);  
Magic Number,Rexster,RexProClient,C:\repos\dkuppitz_rexpro-client\RexProClient\RexProClient.cs,BuildRequestMessageBuffer,The following statement contains a magic number: messageBytes [offset++] = (byte)((jsonLength >> 16) & 255);  
Magic Number,Rexster,RexProClient,C:\repos\dkuppitz_rexpro-client\RexProClient\RexProClient.cs,BuildRequestMessageBuffer,The following statement contains a magic number: messageBytes [offset++] = (byte)((jsonLength >> 16) & 255);  
Magic Number,Rexster,RexProClient,C:\repos\dkuppitz_rexpro-client\RexProClient\RexProClient.cs,BuildRequestMessageBuffer,The following statement contains a magic number: messageBytes [offset++] = (byte)((jsonLength >> 8) & 255);  
Magic Number,Rexster,RexProClient,C:\repos\dkuppitz_rexpro-client\RexProClient\RexProClient.cs,BuildRequestMessageBuffer,The following statement contains a magic number: messageBytes [offset++] = (byte)((jsonLength >> 8) & 255);  
Magic Number,Rexster,RexProClient,C:\repos\dkuppitz_rexpro-client\RexProClient\RexProClient.cs,BuildRequestMessageBuffer,The following statement contains a magic number: messageBytes [offset++] = (byte)(jsonLength & 255);  
Magic Number,Rexster,RexProClient,C:\repos\dkuppitz_rexpro-client\RexProClient\RexProClient.cs,ParseResponse,The following statement contains a magic number: if ((headerBytes [0] != ProtocolVersion) || (headerBytes [1] != 1) || (headerBytes [6] | expectedResponseMessageType) != expectedResponseMessageType) {  	throw new RexProClientSerializationException ("Unexpected message header.");  }  
Magic Number,Rexster,RexProClient,C:\repos\dkuppitz_rexpro-client\RexProClient\RexProClient.cs,ParseResponse,The following statement contains a magic number: using (var stream = new MemoryStream ()) {  	while (bytesRead < messageLength) {  		var bytes = netStream.Read (buffer' 0' bufferSize);  		if (bytes > 0) {  			stream.Write (buffer' 0' bytes);  			bytesRead += bytes;  		}  	}  	var json = Encoding.UTF8.GetString (stream.ToArray ());  	if (headerBytes [6] == MessageType.Error) {  		var error = new ErrorResponse ();  		error.LoadJson (json);  		throw new RexProClientException (error);  	}  	if (headerBytes [6] != expectedResponseMessageType) {  		var msg = string.Format (CultureInfo.InvariantCulture' "Unexpected message type '{0}'' expected '{1}'."' headerBytes [6]' expectedResponseMessageType);  		throw new RexProClientSerializationException (msg);  	}  	result = Activator.CreateInstance<TResponse> ();  	result.LoadJson (json);  }  
Magic Number,Rexster,RexProClient,C:\repos\dkuppitz_rexpro-client\RexProClient\RexProClient.cs,ParseResponse,The following statement contains a magic number: using (var stream = new MemoryStream ()) {  	while (bytesRead < messageLength) {  		var bytes = netStream.Read (buffer' 0' bufferSize);  		if (bytes > 0) {  			stream.Write (buffer' 0' bytes);  			bytesRead += bytes;  		}  	}  	var json = Encoding.UTF8.GetString (stream.ToArray ());  	if (headerBytes [6] == MessageType.Error) {  		var error = new ErrorResponse ();  		error.LoadJson (json);  		throw new RexProClientException (error);  	}  	if (headerBytes [6] != expectedResponseMessageType) {  		var msg = string.Format (CultureInfo.InvariantCulture' "Unexpected message type '{0}'' expected '{1}'."' headerBytes [6]' expectedResponseMessageType);  		throw new RexProClientSerializationException (msg);  	}  	result = Activator.CreateInstance<TResponse> ();  	result.LoadJson (json);  }  
Magic Number,Rexster,RexProClient,C:\repos\dkuppitz_rexpro-client\RexProClient\RexProClient.cs,ParseResponse,The following statement contains a magic number: using (var stream = new MemoryStream ()) {  	while (bytesRead < messageLength) {  		var bytes = netStream.Read (buffer' 0' bufferSize);  		if (bytes > 0) {  			stream.Write (buffer' 0' bytes);  			bytesRead += bytes;  		}  	}  	var json = Encoding.UTF8.GetString (stream.ToArray ());  	if (headerBytes [6] == MessageType.Error) {  		var error = new ErrorResponse ();  		error.LoadJson (json);  		throw new RexProClientException (error);  	}  	if (headerBytes [6] != expectedResponseMessageType) {  		var msg = string.Format (CultureInfo.InvariantCulture' "Unexpected message type '{0}'' expected '{1}'."' headerBytes [6]' expectedResponseMessageType);  		throw new RexProClientSerializationException (msg);  	}  	result = Activator.CreateInstance<TResponse> ();  	result.LoadJson (json);  }  
Magic Number,Rexster,RexProClient,C:\repos\dkuppitz_rexpro-client\RexProClient\RexProClient.cs,ParseResponse,The following statement contains a magic number: if (headerBytes [6] == MessageType.Error) {  	var error = new ErrorResponse ();  	error.LoadJson (json);  	throw new RexProClientException (error);  }  
Magic Number,Rexster,RexProClient,C:\repos\dkuppitz_rexpro-client\RexProClient\RexProClient.cs,ParseResponse,The following statement contains a magic number: if (headerBytes [6] != expectedResponseMessageType) {  	var msg = string.Format (CultureInfo.InvariantCulture' "Unexpected message type '{0}'' expected '{1}'."' headerBytes [6]' expectedResponseMessageType);  	throw new RexProClientSerializationException (msg);  }  
Magic Number,Rexster,RexProClient,C:\repos\dkuppitz_rexpro-client\RexProClient\RexProClient.cs,ParseResponse,The following statement contains a magic number: if (headerBytes [6] != expectedResponseMessageType) {  	var msg = string.Format (CultureInfo.InvariantCulture' "Unexpected message type '{0}'' expected '{1}'."' headerBytes [6]' expectedResponseMessageType);  	throw new RexProClientSerializationException (msg);  }  
Magic Number,Rexster,RexProClient,C:\repos\dkuppitz_rexpro-client\RexProClient\RexProClient.cs,StartSession,The following statement contains a magic number: session.Kill += (sender' args) =>  {  	while (SessionStreams.ContainsKey (sessionGuid)) {  		NetworkStream stream;  		if (SessionStreams.TryRemove (sessionGuid' out stream)) {  			stream.Close ();  			stream.Dispose ();  		}  		else  			Thread.SpinWait (10);  	}  };  
Magic Number,Rexster,RexProClient,C:\repos\dkuppitz_rexpro-client\RexProClient\RexProClient.cs,StartSession,The following statement contains a magic number: while (SessionStreams.ContainsKey (sessionGuid)) {  	NetworkStream stream;  	if (SessionStreams.TryRemove (sessionGuid' out stream)) {  		stream.Close ();  		stream.Dispose ();  	}  	else  		Thread.SpinWait (10);  }  
Magic Number,Rexster,RexProClient,C:\repos\dkuppitz_rexpro-client\RexProClient\RexProClient.cs,StartSession,The following statement contains a magic number: if (SessionStreams.TryRemove (sessionGuid' out stream)) {  	stream.Close ();  	stream.Dispose ();  }  else  	Thread.SpinWait (10);  
Magic Number,Rexster,RexProClient,C:\repos\dkuppitz_rexpro-client\RexProClient\RexProClient.cs,StartSession,The following statement contains a magic number: Thread.SpinWait (10);  
Magic Number,Rexster.Messages,ErrorResponse,C:\repos\dkuppitz_rexpro-client\RexProClient\Messages\ErrorResponse.cs,LoadJson,The following statement contains a magic number: this.ErrorMessage = arr [3].ToObject<string> ();  
Magic Number,Rexster.Messages,SessionResponse,C:\repos\dkuppitz_rexpro-client\RexProClient\Messages\SessionResponse.cs,LoadJson,The following statement contains a magic number: this.Languages = arr [3].ToObject<string[]> ();  
Magic Number,Rexster.Messages,SessionRequest,C:\repos\dkuppitz_rexpro-client\RexProClient\Messages\SessionRequest.cs,ToSerializableArray,The following statement contains a magic number: Array.Resize (ref result' size + 2);  
Magic Number,Rexster.Messages,ScriptRequest,C:\repos\dkuppitz_rexpro-client\RexProClient\Messages\ScriptRequest.cs,ToSerializableArray,The following statement contains a magic number: Array.Resize (ref result' size + 3);  
Magic Number,Rexster.Messages,ScriptResponse,C:\repos\dkuppitz_rexpro-client\RexProClient\Messages\ScriptResponse.cs,LoadJson,The following statement contains a magic number: this.Meta = arr [2].ToObject<IDictionary<string' object>> ();  
Magic Number,Rexster.Messages,ScriptResponse,C:\repos\dkuppitz_rexpro-client\RexProClient\Messages\ScriptResponse.cs,LoadJson,The following statement contains a magic number: this.Result = arr [3].ToObject<T> ();  
Magic Number,Rexster.Messages,ScriptResponse,C:\repos\dkuppitz_rexpro-client\RexProClient\Messages\ScriptResponse.cs,LoadJson,The following statement contains a magic number: this.Bindings = arr [4].ToObject<IDictionary<string' object>> ();  
Missing Default,Rexster.Messages,ScriptRequest,C:\repos\dkuppitz_rexpro-client\RexProClient\Messages\ScriptRequest.cs,GetBindingValue,The following switch statement is missing a default case: switch (jToken ["_type"].ToObject<string> ()) {  case "vertex":  case "edge":  	return jToken ["_id"].ToObject<string> ();  }  
