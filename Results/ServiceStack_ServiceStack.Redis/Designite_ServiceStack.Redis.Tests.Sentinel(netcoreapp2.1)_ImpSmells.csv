Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ServiceStack.Redis.Tests.Sentinel,RedisSentinelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Redis\tests\ServiceStack.Redis.Tests.Sentinel\RedisSentinelTests.cs,Can_specify_Timeout_on_RedisManager,The length of the statement  "                sentinel.RedisManagerFactory = (masters' slaves) => new PooledRedisClientManager(masters' slaves) { IdleTimeOutSecs = 20 }; " is 123.
Long Statement,ServiceStack.Redis.Tests.Sentinel,RedisSentinelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Redis\tests\ServiceStack.Redis.Tests.Sentinel\RedisSentinelTests.cs,Run_sentinel_for_10_minutes,The length of the statement  "                sentinel.OnSentinelMessageReceived = (channel' msg) => "Received '{0}' on channel '{1}' from Sentinel".Print(channel' msg); " is 123.
Magic Number,ServiceStack.Redis.Tests.Sentinel,RedisResolverTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Redis\tests\ServiceStack.Redis.Tests.Sentinel\RedisResolverTests.cs,PooledRedisClientManager_alternates_hosts,The following statement contains a magic number: 5.Times(i =>                  {                      using (var readOnly = redisManager.GetReadOnlyClient())                      {                          Assert.That(readOnly.GetHostString()' Is.EqualTo(SlaveHosts[i % SlaveHosts.Length]));                          Assert.That(readOnly.GetValue("KEY")' Is.EqualTo("2"));                      }                  });
Magic Number,ServiceStack.Redis.Tests.Sentinel,RedisResolverTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Redis\tests\ServiceStack.Redis.Tests.Sentinel\RedisResolverTests.cs,RedisManagerPool_alternates_hosts,The following statement contains a magic number: 5.Times(i =>                  {                      using (var readOnly = redisManager.GetReadOnlyClient())                      {                          Assert.That(readOnly.GetHostString()' Is.EqualTo(MasterHosts[0]));                          Assert.That(readOnly.GetValue("KEY")' Is.EqualTo("2"));                      }                  });
Magic Number,ServiceStack.Redis.Tests.Sentinel,RedisResolverTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Redis\tests\ServiceStack.Redis.Tests.Sentinel\RedisResolverTests.cs,BasicRedisClientManager_alternates_hosts,The following statement contains a magic number: 5.Times(i =>                  {                      using (var readOnly = redisManager.GetReadOnlyClient())                      {                          Assert.That(readOnly.GetHostString()' Is.EqualTo(SlaveHosts[i % SlaveHosts.Length]));                          Assert.That(readOnly.GetValue("KEY")' Is.EqualTo("2"));                      }                  });
Magic Number,ServiceStack.Redis.Tests.Sentinel,RedisResolverTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Redis\tests\ServiceStack.Redis.Tests.Sentinel\RedisResolverTests.cs,PooledRedisClientManager_can_execute_CustomResolver,The following statement contains a magic number: 5.Times(i =>                  {                      using (var slave = redisManager.GetReadOnlyClient())                      {                          Assert.That(slave.GetHostString()' Is.EqualTo(SlaveHosts[0]));                          Assert.That(slave.GetValue("KEY")' Is.EqualTo("2"));                      }                  });
Magic Number,ServiceStack.Redis.Tests.Sentinel,RedisResolverTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Redis\tests\ServiceStack.Redis.Tests.Sentinel\RedisResolverTests.cs,PooledRedisClientManager_can_execute_CustomResolver,The following statement contains a magic number: Assert.That(resolver.NewClientsInitialized' Is.EqualTo(2));
Magic Number,ServiceStack.Redis.Tests.Sentinel,RedisResolverTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Redis\tests\ServiceStack.Redis.Tests.Sentinel\RedisResolverTests.cs,PooledRedisClientManager_can_execute_CustomResolver,The following statement contains a magic number: 5.Times(i =>                  {                      using (var master = redisManager.GetClient())                      {                          Assert.That(master.GetHostString()' Is.EqualTo(MasterHosts[0]));                          Assert.That(master.GetValue("KEY")' Is.EqualTo("2"));                      }                      using (var slave = redisManager.GetReadOnlyClient())                      {                          Assert.That(slave.GetHostString()' Is.EqualTo(SlaveHosts[0]));                          Assert.That(slave.GetValue("KEY")' Is.EqualTo("2"));                      }                  });
Magic Number,ServiceStack.Redis.Tests.Sentinel,RedisResolverTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Redis\tests\ServiceStack.Redis.Tests.Sentinel\RedisResolverTests.cs,PooledRedisClientManager_can_execute_CustomResolver,The following statement contains a magic number: Assert.That(resolver.NewClientsInitialized' Is.EqualTo(4));
Magic Number,ServiceStack.Redis.Tests.Sentinel,RedisResolverTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Redis\tests\ServiceStack.Redis.Tests.Sentinel\RedisResolverTests.cs,RedisManagerPool_can_execute_CustomResolver,The following statement contains a magic number: 5.Times(i =>                  {                      using (var slave = redisManager.GetReadOnlyClient())                      {                          Assert.That(slave.GetHostString()' Is.EqualTo(MasterHosts[0]));                          Assert.That(slave.GetValue("KEY")' Is.EqualTo("2"));                      }                  });
Magic Number,ServiceStack.Redis.Tests.Sentinel,RedisResolverTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Redis\tests\ServiceStack.Redis.Tests.Sentinel\RedisResolverTests.cs,RedisManagerPool_can_execute_CustomResolver,The following statement contains a magic number: 5.Times(i =>                  {                      using (var master = redisManager.GetClient())                      {                          Assert.That(master.GetHostString()' Is.EqualTo(MasterHosts[0]));                          Assert.That(master.GetValue("KEY")' Is.EqualTo("2"));                      }                      using (var slave = redisManager.GetReadOnlyClient())                      {                          Assert.That(slave.GetHostString()' Is.EqualTo(MasterHosts[0]));                          Assert.That(slave.GetValue("KEY")' Is.EqualTo("2"));                      }                  });
Magic Number,ServiceStack.Redis.Tests.Sentinel,RedisResolverTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Redis\tests\ServiceStack.Redis.Tests.Sentinel\RedisResolverTests.cs,RedisManagerPool_can_execute_CustomResolver,The following statement contains a magic number: Assert.That(resolver.NewClientsInitialized' Is.EqualTo(2));
Magic Number,ServiceStack.Redis.Tests.Sentinel,RedisSentinelConnectionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Redis\tests\ServiceStack.Redis.Tests.Sentinel\RedisSentinelConnectionTests.cs,Can_connect_to_AWS_Redis_Sentinel_SentinelMaster,The following statement contains a magic number: RedisConfig.AssumeServerVersion = 4000;
Magic Number,ServiceStack.Redis.Tests.Sentinel,RedisSentinelConnectionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Redis\tests\ServiceStack.Redis.Tests.Sentinel\RedisSentinelConnectionTests.cs,Can_connect_to_AWS_Redis_Sentinel_SentinelMaster,The following statement contains a magic number: var client = new RedisClient("52.7.181.87"' 26379);
Magic Number,ServiceStack.Redis.Tests.Sentinel,RedisSentinelConnectionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Redis\tests\ServiceStack.Redis.Tests.Sentinel\RedisSentinelConnectionTests.cs,Can_connect_to_AWS_Redis_Sentinel_Ping,The following statement contains a magic number: RedisConfig.AssumeServerVersion = 4000;
Magic Number,ServiceStack.Redis.Tests.Sentinel,RedisSentinelConnectionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Redis\tests\ServiceStack.Redis.Tests.Sentinel\RedisSentinelConnectionTests.cs,Can_connect_to_AWS_Redis_Sentinel_Ping,The following statement contains a magic number: var client = new RedisClient("52.7.181.87"' 26379);
Magic Number,ServiceStack.Redis.Tests.Sentinel,RedisSentinelConnectionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Redis\tests\ServiceStack.Redis.Tests.Sentinel\RedisSentinelConnectionTests.cs,Can_connect_to_RedisSentinel,The following statement contains a magic number: RedisConfig.AssumeServerVersion = 4000;
Magic Number,ServiceStack.Redis.Tests.Sentinel,RedisSentinelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Redis\tests\ServiceStack.Redis.Tests.Sentinel\RedisSentinelTests.cs,Can_specify_Timeout_on_RedisManager,The following statement contains a magic number: sentinel.RedisManagerFactory = (masters' slaves) => new PooledRedisClientManager(masters' slaves) { IdleTimeOutSecs = 20 };
Magic Number,ServiceStack.Redis.Tests.Sentinel,RedisSentinelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Redis\tests\ServiceStack.Redis.Tests.Sentinel\RedisSentinelTests.cs,Can_specify_Timeout_on_RedisManager,The following statement contains a magic number: Assert.That(clientsManager.IdleTimeOutSecs' Is.EqualTo(20));
Magic Number,ServiceStack.Redis.Tests.Sentinel,RedisSentinelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Redis\tests\ServiceStack.Redis.Tests.Sentinel\RedisSentinelTests.cs,Can_specify_Timeout_on_RedisManager,The following statement contains a magic number: Assert.That(((RedisNativeClient)client).IdleTimeOutSecs' Is.EqualTo(20));
Magic Number,ServiceStack.Redis.Tests.Sentinel,RedisSentinelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Redis\tests\ServiceStack.Redis.Tests.Sentinel\RedisSentinelTests.cs,Run_sentinel_for_10_minutes,The following statement contains a magic number: var aTimer = new Timer((state) =>                      {                          "Incrementing key".Print();                            string key = null;                          using (var redis = redisManager.GetClient())                          {                              var counter = redis.Increment("key"' 1);                              key = "key" + counter;                              log.InfoFormat("Set key {0} in read/write client"' key);                              redis.SetValue(key' "value" + 1);                          }                            using (var redis = redisManager.GetClient())                          {                              log.InfoFormat("Get key {0} in read-only client..."' key);                              var value = redis.GetValue(key);                              log.InfoFormat("{0} = {1}"' key' value);                          }                      }' null' 0' 1000);
Magic Number,ServiceStack.Redis.Tests.Sentinel,RedisSentinelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Redis\tests\ServiceStack.Redis.Tests.Sentinel\RedisSentinelTests.cs,Run_sentinel_for_10_minutes,The following statement contains a magic number: Thread.Sleep(TimeSpan.FromMinutes(10));
