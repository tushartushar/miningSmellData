Implementation smell,Namespace,Class,File,Method,Description
Long Method,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The method has 150 lines of code.
Long Method,BitMiracle.Jpeg,Program,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\Program.cs,parseSwitchesForCompression,The method has 203 lines of code.
Long Method,BitMiracle.Jpeg,Program,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\Program.cs,parseSwitchesForDecompression,The method has 161 lines of code.
Complex Method,BitMiracle.cdJpeg,cd_jpeg_error_mgr,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\cdJpeg\cd_jpeg_error_mgr.cs,GetMessageText,Cyclomatic complexity of the method is 31
Complex Method,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_colormap,Cyclomatic complexity of the method is 12
Complex Method,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,Cyclomatic complexity of the method is 25
Complex Method,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,preload_image,Cyclomatic complexity of the method is 8
Complex Method,BitMiracle.Jpeg,Program,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\Program.cs,parseSwitchesForCompression,Cyclomatic complexity of the method is 37
Complex Method,BitMiracle.Jpeg,Program,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\Program.cs,applyOptions,Cyclomatic complexity of the method is 12
Complex Method,BitMiracle.Jpeg,Program,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\Program.cs,parseSwitchesForDecompression,Cyclomatic complexity of the method is 32
Complex Method,BitMiracle.Jpeg,Program,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\Program.cs,applyOptions,Cyclomatic complexity of the method is 9
Complex Method,BitMiracle.Jpeg,Program,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\Program.cs,printTextMarker,Cyclomatic complexity of the method is 11
Long Statement,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,GET_4B,The length of the statement  "            return (int)array[offset] + ((int)array[offset + 1] << 8) + ((int)array[offset + 2] << 16) + ((int)array[offset + 3] << 24); " is 124.
Long Statement,BitMiracle.Jpeg,Program,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\Program.cs,writeUsageForDCT,The length of the statement  "            Console.WriteLine("  -dct int       Use integer DCT method {0}"' (JpegConstants.JDCT_DEFAULT == J_DCT_METHOD.JDCT_ISLOW) ? " (default)" : ""); " is 142.
Long Statement,BitMiracle.Jpeg,Program,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\Program.cs,writeUsageForDCT,The length of the statement  "            Console.WriteLine("  -dct fast      Use fast integer DCT (less accurate) {0}"' (JpegConstants.JDCT_DEFAULT == J_DCT_METHOD.JDCT_IFAST) ? " (default)" : ""); " is 156.
Long Statement,BitMiracle.Jpeg,Program,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\Program.cs,writeUsageForDCT,The length of the statement  "            Console.WriteLine("  -dct float     Use floating-point DCT method {0}"' (JpegConstants.JDCT_DEFAULT == J_DCT_METHOD.JDCT_FLOAT) ? " (default)" : ""); " is 149.
Long Statement,BitMiracle.Jpeg,Program,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\Program.cs,parseSwitchesForCompression,The length of the statement  "                        Console.Write(string.Format("Bit Miracle's CJPEG' version {0}\n{1}\n"' jpeg_common_struct.Version' jpeg_common_struct.Copyright)); " is 130.
Long Statement,BitMiracle.Jpeg,Program,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\Program.cs,decompress,The length of the statement  "            cinfo.jpeg_set_marker_processor((int)JPEG_MARKER.COM' new jpeg_decompress_struct.jpeg_marker_parser_method(printTextMarker)); " is 125.
Long Statement,BitMiracle.Jpeg,Program,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\Program.cs,parseSwitchesForDecompression,The length of the statement  "                        Console.Write(string.Format("Bit Miracle's DJPEG' version {0}\n{1}\n"' jpeg_common_struct.Version' jpeg_common_struct.Copyright)); " is 130.
Complex Conditional,BitMiracle.Jpeg,Program,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\Program.cs,parseSwitchesForDecompression,The conditional expression  "cdjpeg_utils.keymatch(arg' "colors"' 1) ||                           cdjpeg_utils.keymatch(arg' "colours"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantize"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantise"' 1)"  is complex.
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,bmp_dest_struct,The following statement contains a magic number: (row_width & 3) != 0
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,put_24bit_rows,The following statement contains a magic number: image_ptr[0][imageIndex + 2] = buffer[0][bufferIndex];
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,put_24bit_rows,The following statement contains a magic number: imageIndex += 3;
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: bits_per_pixel = 8;
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: cmap_entries = 256;
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: int headersize = 14 + 40 + cmap_entries * 4;
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: int headersize = 14 + 40 + cmap_entries * 4;
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: int headersize = 14 + 40 + cmap_entries * 4;
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: byte[] bmpfileheader = new byte[14];
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: byte[] bmpinfoheader = new byte[40];
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: PUT_4B(bmpfileheader' 2' bfSize);
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: PUT_4B(bmpfileheader' 10' headersize);
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: PUT_2B(bmpinfoheader' 0' 40);
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: PUT_4B(bmpinfoheader' 4' cinfo.Output_width);
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: PUT_4B(bmpinfoheader' 8' cinfo.Output_height);
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: PUT_2B(bmpinfoheader' 12' 1);
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: PUT_2B(bmpinfoheader' 14' bits_per_pixel);
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: PUT_4B(bmpinfoheader' 24' (int)(cinfo.X_density * 100));
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: PUT_4B(bmpinfoheader' 24' (int)(cinfo.X_density * 100));
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: PUT_4B(bmpinfoheader' 28' (int)(cinfo.Y_density * 100));
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: PUT_4B(bmpinfoheader' 28' (int)(cinfo.Y_density * 100));
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: PUT_2B(bmpinfoheader' 32' cmap_entries);
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: output_file.Write(bmpfileheader' 0' 14);
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: output_file.Write(bmpinfoheader' 0' 40);
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: write_colormap(cmap_entries' 4);
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: bits_per_pixel = 8;
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: cmap_entries = 256;
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: int headersize = 14 + 12 + cmap_entries * 3;
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: int headersize = 14 + 12 + cmap_entries * 3;
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: int headersize = 14 + 12 + cmap_entries * 3;
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: byte[] bmpfileheader = new byte[14];
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: byte[] bmpcoreheader = new byte[12];
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: PUT_4B(bmpfileheader' 2' bfSize);
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: PUT_4B(bmpfileheader' 10' headersize);
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: PUT_2B(bmpcoreheader' 0' 12);
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: PUT_2B(bmpcoreheader' 4' cinfo.Output_width);
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: PUT_2B(bmpcoreheader' 6' cinfo.Output_height);
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: PUT_2B(bmpcoreheader' 8' 1);
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: PUT_2B(bmpcoreheader' 10' bits_per_pixel);
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: output_file.Write(bmpfileheader' 0' 14);
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: output_file.Write(bmpcoreheader' 0' 12);
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: write_colormap(cmap_entries' 3);
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_colormap,The following statement contains a magic number: output_file.WriteByte(colormap[2][i]);
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_colormap,The following statement contains a magic number: map_entry_size == 4
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_colormap,The following statement contains a magic number: cinfo.Out_color_components == 3
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,write_colormap,The following statement contains a magic number: map_entry_size == 4
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,PUT_2B,The following statement contains a magic number: array[offset + 1] = (byte)(((value) >> 8) & 0xFF);
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,PUT_4B,The following statement contains a magic number: array[offset + 1] = (byte)(((value) >> 8) & 0xFF);
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,PUT_4B,The following statement contains a magic number: array[offset + 2] = (byte)(((value) >> 16) & 0xFF);
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,PUT_4B,The following statement contains a magic number: array[offset + 2] = (byte)(((value) >> 16) & 0xFF);
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,PUT_4B,The following statement contains a magic number: array[offset + 3] = (byte)(((value) >> 24) & 0xFF);
Magic Number,BitMiracle.Jpeg,bmp_dest_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_dest_struct.cs,PUT_4B,The following statement contains a magic number: array[offset + 3] = (byte)(((value) >> 24) & 0xFF);
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: byte[] bmpfileheader = new byte[14];
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: !ReadOK(input_file' bmpfileheader' 0' 14)
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: int bfOffBits = GET_4B(bmpfileheader' 10);
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: byte[] bmpinfoheader = new byte[64];
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: !ReadOK(input_file' bmpinfoheader' 0' 4)
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: headerSize < 12 || headerSize> 64
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: headerSize < 12 || headerSize> 64
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: !ReadOK(input_file' bmpinfoheader' 4' headerSize - 4)
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: !ReadOK(input_file' bmpinfoheader' 4' headerSize - 4)
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: switch (headerSize)              {                  case 12:                      /* Decode OS/2 1.x header (Microsoft calls this a BITMAPCOREHEADER) */                      biWidth = GET_2B(bmpinfoheader' 4);                      biHeight = GET_2B(bmpinfoheader' 6);                      biPlanes = GET_2B(bmpinfoheader' 8);                      bits_per_pixel = GET_2B(bmpinfoheader' 10);                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 3;       /* OS/2 uses RGBTRIPLE colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                      break;                  case 40:                  case 64:                      /* Decode Windows 3.x header (Microsoft calls this a BITMAPINFOHEADER) */                      /* or OS/2 2.x header' which has additional fields that we ignore */                      biWidth = GET_4B(bmpinfoheader' 4);                      biHeight = GET_4B(bmpinfoheader' 8);                      biPlanes = GET_2B(bmpinfoheader' 12);                      bits_per_pixel = GET_2B(bmpinfoheader' 14);                      biCompression = GET_4B(bmpinfoheader' 16);                      biXPelsPerMeter = GET_4B(bmpinfoheader' 24);                      biYPelsPerMeter = GET_4B(bmpinfoheader' 28);                      biClrUsed = GET_4B(bmpinfoheader' 32);                      /* biSizeImage' biClrImportant fields are ignored */                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 4;       /* Windows uses RGBQUAD colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                                            if (biCompression != 0)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_COMPRESSED);                        if (biXPelsPerMeter > 0 && biYPelsPerMeter > 0)                      {                          /* Set JFIF density parameters from the BMP data */                          cinfo.X_density = (short)(biXPelsPerMeter / 100); /* 100 cm per meter */                          cinfo.Y_density = (short)(biYPelsPerMeter / 100);                          cinfo.Density_unit = DensityUnit.DotsCm;                      }                      break;                  default:                      cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADHEADER);                      break;              }
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: switch (headerSize)              {                  case 12:                      /* Decode OS/2 1.x header (Microsoft calls this a BITMAPCOREHEADER) */                      biWidth = GET_2B(bmpinfoheader' 4);                      biHeight = GET_2B(bmpinfoheader' 6);                      biPlanes = GET_2B(bmpinfoheader' 8);                      bits_per_pixel = GET_2B(bmpinfoheader' 10);                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 3;       /* OS/2 uses RGBTRIPLE colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                      break;                  case 40:                  case 64:                      /* Decode Windows 3.x header (Microsoft calls this a BITMAPINFOHEADER) */                      /* or OS/2 2.x header' which has additional fields that we ignore */                      biWidth = GET_4B(bmpinfoheader' 4);                      biHeight = GET_4B(bmpinfoheader' 8);                      biPlanes = GET_2B(bmpinfoheader' 12);                      bits_per_pixel = GET_2B(bmpinfoheader' 14);                      biCompression = GET_4B(bmpinfoheader' 16);                      biXPelsPerMeter = GET_4B(bmpinfoheader' 24);                      biYPelsPerMeter = GET_4B(bmpinfoheader' 28);                      biClrUsed = GET_4B(bmpinfoheader' 32);                      /* biSizeImage' biClrImportant fields are ignored */                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 4;       /* Windows uses RGBQUAD colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                                            if (biCompression != 0)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_COMPRESSED);                        if (biXPelsPerMeter > 0 && biYPelsPerMeter > 0)                      {                          /* Set JFIF density parameters from the BMP data */                          cinfo.X_density = (short)(biXPelsPerMeter / 100); /* 100 cm per meter */                          cinfo.Y_density = (short)(biYPelsPerMeter / 100);                          cinfo.Density_unit = DensityUnit.DotsCm;                      }                      break;                  default:                      cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADHEADER);                      break;              }
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: switch (headerSize)              {                  case 12:                      /* Decode OS/2 1.x header (Microsoft calls this a BITMAPCOREHEADER) */                      biWidth = GET_2B(bmpinfoheader' 4);                      biHeight = GET_2B(bmpinfoheader' 6);                      biPlanes = GET_2B(bmpinfoheader' 8);                      bits_per_pixel = GET_2B(bmpinfoheader' 10);                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 3;       /* OS/2 uses RGBTRIPLE colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                      break;                  case 40:                  case 64:                      /* Decode Windows 3.x header (Microsoft calls this a BITMAPINFOHEADER) */                      /* or OS/2 2.x header' which has additional fields that we ignore */                      biWidth = GET_4B(bmpinfoheader' 4);                      biHeight = GET_4B(bmpinfoheader' 8);                      biPlanes = GET_2B(bmpinfoheader' 12);                      bits_per_pixel = GET_2B(bmpinfoheader' 14);                      biCompression = GET_4B(bmpinfoheader' 16);                      biXPelsPerMeter = GET_4B(bmpinfoheader' 24);                      biYPelsPerMeter = GET_4B(bmpinfoheader' 28);                      biClrUsed = GET_4B(bmpinfoheader' 32);                      /* biSizeImage' biClrImportant fields are ignored */                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 4;       /* Windows uses RGBQUAD colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                                            if (biCompression != 0)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_COMPRESSED);                        if (biXPelsPerMeter > 0 && biYPelsPerMeter > 0)                      {                          /* Set JFIF density parameters from the BMP data */                          cinfo.X_density = (short)(biXPelsPerMeter / 100); /* 100 cm per meter */                          cinfo.Y_density = (short)(biYPelsPerMeter / 100);                          cinfo.Density_unit = DensityUnit.DotsCm;                      }                      break;                  default:                      cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADHEADER);                      break;              }
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: switch (headerSize)              {                  case 12:                      /* Decode OS/2 1.x header (Microsoft calls this a BITMAPCOREHEADER) */                      biWidth = GET_2B(bmpinfoheader' 4);                      biHeight = GET_2B(bmpinfoheader' 6);                      biPlanes = GET_2B(bmpinfoheader' 8);                      bits_per_pixel = GET_2B(bmpinfoheader' 10);                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 3;       /* OS/2 uses RGBTRIPLE colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                      break;                  case 40:                  case 64:                      /* Decode Windows 3.x header (Microsoft calls this a BITMAPINFOHEADER) */                      /* or OS/2 2.x header' which has additional fields that we ignore */                      biWidth = GET_4B(bmpinfoheader' 4);                      biHeight = GET_4B(bmpinfoheader' 8);                      biPlanes = GET_2B(bmpinfoheader' 12);                      bits_per_pixel = GET_2B(bmpinfoheader' 14);                      biCompression = GET_4B(bmpinfoheader' 16);                      biXPelsPerMeter = GET_4B(bmpinfoheader' 24);                      biYPelsPerMeter = GET_4B(bmpinfoheader' 28);                      biClrUsed = GET_4B(bmpinfoheader' 32);                      /* biSizeImage' biClrImportant fields are ignored */                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 4;       /* Windows uses RGBQUAD colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                                            if (biCompression != 0)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_COMPRESSED);                        if (biXPelsPerMeter > 0 && biYPelsPerMeter > 0)                      {                          /* Set JFIF density parameters from the BMP data */                          cinfo.X_density = (short)(biXPelsPerMeter / 100); /* 100 cm per meter */                          cinfo.Y_density = (short)(biYPelsPerMeter / 100);                          cinfo.Density_unit = DensityUnit.DotsCm;                      }                      break;                  default:                      cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADHEADER);                      break;              }
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: switch (headerSize)              {                  case 12:                      /* Decode OS/2 1.x header (Microsoft calls this a BITMAPCOREHEADER) */                      biWidth = GET_2B(bmpinfoheader' 4);                      biHeight = GET_2B(bmpinfoheader' 6);                      biPlanes = GET_2B(bmpinfoheader' 8);                      bits_per_pixel = GET_2B(bmpinfoheader' 10);                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 3;       /* OS/2 uses RGBTRIPLE colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                      break;                  case 40:                  case 64:                      /* Decode Windows 3.x header (Microsoft calls this a BITMAPINFOHEADER) */                      /* or OS/2 2.x header' which has additional fields that we ignore */                      biWidth = GET_4B(bmpinfoheader' 4);                      biHeight = GET_4B(bmpinfoheader' 8);                      biPlanes = GET_2B(bmpinfoheader' 12);                      bits_per_pixel = GET_2B(bmpinfoheader' 14);                      biCompression = GET_4B(bmpinfoheader' 16);                      biXPelsPerMeter = GET_4B(bmpinfoheader' 24);                      biYPelsPerMeter = GET_4B(bmpinfoheader' 28);                      biClrUsed = GET_4B(bmpinfoheader' 32);                      /* biSizeImage' biClrImportant fields are ignored */                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 4;       /* Windows uses RGBQUAD colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                                            if (biCompression != 0)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_COMPRESSED);                        if (biXPelsPerMeter > 0 && biYPelsPerMeter > 0)                      {                          /* Set JFIF density parameters from the BMP data */                          cinfo.X_density = (short)(biXPelsPerMeter / 100); /* 100 cm per meter */                          cinfo.Y_density = (short)(biYPelsPerMeter / 100);                          cinfo.Density_unit = DensityUnit.DotsCm;                      }                      break;                  default:                      cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADHEADER);                      break;              }
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: switch (headerSize)              {                  case 12:                      /* Decode OS/2 1.x header (Microsoft calls this a BITMAPCOREHEADER) */                      biWidth = GET_2B(bmpinfoheader' 4);                      biHeight = GET_2B(bmpinfoheader' 6);                      biPlanes = GET_2B(bmpinfoheader' 8);                      bits_per_pixel = GET_2B(bmpinfoheader' 10);                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 3;       /* OS/2 uses RGBTRIPLE colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                      break;                  case 40:                  case 64:                      /* Decode Windows 3.x header (Microsoft calls this a BITMAPINFOHEADER) */                      /* or OS/2 2.x header' which has additional fields that we ignore */                      biWidth = GET_4B(bmpinfoheader' 4);                      biHeight = GET_4B(bmpinfoheader' 8);                      biPlanes = GET_2B(bmpinfoheader' 12);                      bits_per_pixel = GET_2B(bmpinfoheader' 14);                      biCompression = GET_4B(bmpinfoheader' 16);                      biXPelsPerMeter = GET_4B(bmpinfoheader' 24);                      biYPelsPerMeter = GET_4B(bmpinfoheader' 28);                      biClrUsed = GET_4B(bmpinfoheader' 32);                      /* biSizeImage' biClrImportant fields are ignored */                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 4;       /* Windows uses RGBQUAD colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                                            if (biCompression != 0)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_COMPRESSED);                        if (biXPelsPerMeter > 0 && biYPelsPerMeter > 0)                      {                          /* Set JFIF density parameters from the BMP data */                          cinfo.X_density = (short)(biXPelsPerMeter / 100); /* 100 cm per meter */                          cinfo.Y_density = (short)(biYPelsPerMeter / 100);                          cinfo.Density_unit = DensityUnit.DotsCm;                      }                      break;                  default:                      cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADHEADER);                      break;              }
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: switch (headerSize)              {                  case 12:                      /* Decode OS/2 1.x header (Microsoft calls this a BITMAPCOREHEADER) */                      biWidth = GET_2B(bmpinfoheader' 4);                      biHeight = GET_2B(bmpinfoheader' 6);                      biPlanes = GET_2B(bmpinfoheader' 8);                      bits_per_pixel = GET_2B(bmpinfoheader' 10);                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 3;       /* OS/2 uses RGBTRIPLE colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                      break;                  case 40:                  case 64:                      /* Decode Windows 3.x header (Microsoft calls this a BITMAPINFOHEADER) */                      /* or OS/2 2.x header' which has additional fields that we ignore */                      biWidth = GET_4B(bmpinfoheader' 4);                      biHeight = GET_4B(bmpinfoheader' 8);                      biPlanes = GET_2B(bmpinfoheader' 12);                      bits_per_pixel = GET_2B(bmpinfoheader' 14);                      biCompression = GET_4B(bmpinfoheader' 16);                      biXPelsPerMeter = GET_4B(bmpinfoheader' 24);                      biYPelsPerMeter = GET_4B(bmpinfoheader' 28);                      biClrUsed = GET_4B(bmpinfoheader' 32);                      /* biSizeImage' biClrImportant fields are ignored */                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 4;       /* Windows uses RGBQUAD colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                                            if (biCompression != 0)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_COMPRESSED);                        if (biXPelsPerMeter > 0 && biYPelsPerMeter > 0)                      {                          /* Set JFIF density parameters from the BMP data */                          cinfo.X_density = (short)(biXPelsPerMeter / 100); /* 100 cm per meter */                          cinfo.Y_density = (short)(biYPelsPerMeter / 100);                          cinfo.Density_unit = DensityUnit.DotsCm;                      }                      break;                  default:                      cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADHEADER);                      break;              }
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: switch (headerSize)              {                  case 12:                      /* Decode OS/2 1.x header (Microsoft calls this a BITMAPCOREHEADER) */                      biWidth = GET_2B(bmpinfoheader' 4);                      biHeight = GET_2B(bmpinfoheader' 6);                      biPlanes = GET_2B(bmpinfoheader' 8);                      bits_per_pixel = GET_2B(bmpinfoheader' 10);                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 3;       /* OS/2 uses RGBTRIPLE colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                      break;                  case 40:                  case 64:                      /* Decode Windows 3.x header (Microsoft calls this a BITMAPINFOHEADER) */                      /* or OS/2 2.x header' which has additional fields that we ignore */                      biWidth = GET_4B(bmpinfoheader' 4);                      biHeight = GET_4B(bmpinfoheader' 8);                      biPlanes = GET_2B(bmpinfoheader' 12);                      bits_per_pixel = GET_2B(bmpinfoheader' 14);                      biCompression = GET_4B(bmpinfoheader' 16);                      biXPelsPerMeter = GET_4B(bmpinfoheader' 24);                      biYPelsPerMeter = GET_4B(bmpinfoheader' 28);                      biClrUsed = GET_4B(bmpinfoheader' 32);                      /* biSizeImage' biClrImportant fields are ignored */                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 4;       /* Windows uses RGBQUAD colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                                            if (biCompression != 0)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_COMPRESSED);                        if (biXPelsPerMeter > 0 && biYPelsPerMeter > 0)                      {                          /* Set JFIF density parameters from the BMP data */                          cinfo.X_density = (short)(biXPelsPerMeter / 100); /* 100 cm per meter */                          cinfo.Y_density = (short)(biYPelsPerMeter / 100);                          cinfo.Density_unit = DensityUnit.DotsCm;                      }                      break;                  default:                      cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADHEADER);                      break;              }
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: switch (headerSize)              {                  case 12:                      /* Decode OS/2 1.x header (Microsoft calls this a BITMAPCOREHEADER) */                      biWidth = GET_2B(bmpinfoheader' 4);                      biHeight = GET_2B(bmpinfoheader' 6);                      biPlanes = GET_2B(bmpinfoheader' 8);                      bits_per_pixel = GET_2B(bmpinfoheader' 10);                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 3;       /* OS/2 uses RGBTRIPLE colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                      break;                  case 40:                  case 64:                      /* Decode Windows 3.x header (Microsoft calls this a BITMAPINFOHEADER) */                      /* or OS/2 2.x header' which has additional fields that we ignore */                      biWidth = GET_4B(bmpinfoheader' 4);                      biHeight = GET_4B(bmpinfoheader' 8);                      biPlanes = GET_2B(bmpinfoheader' 12);                      bits_per_pixel = GET_2B(bmpinfoheader' 14);                      biCompression = GET_4B(bmpinfoheader' 16);                      biXPelsPerMeter = GET_4B(bmpinfoheader' 24);                      biYPelsPerMeter = GET_4B(bmpinfoheader' 28);                      biClrUsed = GET_4B(bmpinfoheader' 32);                      /* biSizeImage' biClrImportant fields are ignored */                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 4;       /* Windows uses RGBQUAD colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                                            if (biCompression != 0)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_COMPRESSED);                        if (biXPelsPerMeter > 0 && biYPelsPerMeter > 0)                      {                          /* Set JFIF density parameters from the BMP data */                          cinfo.X_density = (short)(biXPelsPerMeter / 100); /* 100 cm per meter */                          cinfo.Y_density = (short)(biYPelsPerMeter / 100);                          cinfo.Density_unit = DensityUnit.DotsCm;                      }                      break;                  default:                      cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADHEADER);                      break;              }
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: switch (headerSize)              {                  case 12:                      /* Decode OS/2 1.x header (Microsoft calls this a BITMAPCOREHEADER) */                      biWidth = GET_2B(bmpinfoheader' 4);                      biHeight = GET_2B(bmpinfoheader' 6);                      biPlanes = GET_2B(bmpinfoheader' 8);                      bits_per_pixel = GET_2B(bmpinfoheader' 10);                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 3;       /* OS/2 uses RGBTRIPLE colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                      break;                  case 40:                  case 64:                      /* Decode Windows 3.x header (Microsoft calls this a BITMAPINFOHEADER) */                      /* or OS/2 2.x header' which has additional fields that we ignore */                      biWidth = GET_4B(bmpinfoheader' 4);                      biHeight = GET_4B(bmpinfoheader' 8);                      biPlanes = GET_2B(bmpinfoheader' 12);                      bits_per_pixel = GET_2B(bmpinfoheader' 14);                      biCompression = GET_4B(bmpinfoheader' 16);                      biXPelsPerMeter = GET_4B(bmpinfoheader' 24);                      biYPelsPerMeter = GET_4B(bmpinfoheader' 28);                      biClrUsed = GET_4B(bmpinfoheader' 32);                      /* biSizeImage' biClrImportant fields are ignored */                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 4;       /* Windows uses RGBQUAD colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                                            if (biCompression != 0)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_COMPRESSED);                        if (biXPelsPerMeter > 0 && biYPelsPerMeter > 0)                      {                          /* Set JFIF density parameters from the BMP data */                          cinfo.X_density = (short)(biXPelsPerMeter / 100); /* 100 cm per meter */                          cinfo.Y_density = (short)(biYPelsPerMeter / 100);                          cinfo.Density_unit = DensityUnit.DotsCm;                      }                      break;                  default:                      cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADHEADER);                      break;              }
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: switch (headerSize)              {                  case 12:                      /* Decode OS/2 1.x header (Microsoft calls this a BITMAPCOREHEADER) */                      biWidth = GET_2B(bmpinfoheader' 4);                      biHeight = GET_2B(bmpinfoheader' 6);                      biPlanes = GET_2B(bmpinfoheader' 8);                      bits_per_pixel = GET_2B(bmpinfoheader' 10);                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 3;       /* OS/2 uses RGBTRIPLE colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                      break;                  case 40:                  case 64:                      /* Decode Windows 3.x header (Microsoft calls this a BITMAPINFOHEADER) */                      /* or OS/2 2.x header' which has additional fields that we ignore */                      biWidth = GET_4B(bmpinfoheader' 4);                      biHeight = GET_4B(bmpinfoheader' 8);                      biPlanes = GET_2B(bmpinfoheader' 12);                      bits_per_pixel = GET_2B(bmpinfoheader' 14);                      biCompression = GET_4B(bmpinfoheader' 16);                      biXPelsPerMeter = GET_4B(bmpinfoheader' 24);                      biYPelsPerMeter = GET_4B(bmpinfoheader' 28);                      biClrUsed = GET_4B(bmpinfoheader' 32);                      /* biSizeImage' biClrImportant fields are ignored */                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 4;       /* Windows uses RGBQUAD colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                                            if (biCompression != 0)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_COMPRESSED);                        if (biXPelsPerMeter > 0 && biYPelsPerMeter > 0)                      {                          /* Set JFIF density parameters from the BMP data */                          cinfo.X_density = (short)(biXPelsPerMeter / 100); /* 100 cm per meter */                          cinfo.Y_density = (short)(biYPelsPerMeter / 100);                          cinfo.Density_unit = DensityUnit.DotsCm;                      }                      break;                  default:                      cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADHEADER);                      break;              }
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: switch (headerSize)              {                  case 12:                      /* Decode OS/2 1.x header (Microsoft calls this a BITMAPCOREHEADER) */                      biWidth = GET_2B(bmpinfoheader' 4);                      biHeight = GET_2B(bmpinfoheader' 6);                      biPlanes = GET_2B(bmpinfoheader' 8);                      bits_per_pixel = GET_2B(bmpinfoheader' 10);                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 3;       /* OS/2 uses RGBTRIPLE colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                      break;                  case 40:                  case 64:                      /* Decode Windows 3.x header (Microsoft calls this a BITMAPINFOHEADER) */                      /* or OS/2 2.x header' which has additional fields that we ignore */                      biWidth = GET_4B(bmpinfoheader' 4);                      biHeight = GET_4B(bmpinfoheader' 8);                      biPlanes = GET_2B(bmpinfoheader' 12);                      bits_per_pixel = GET_2B(bmpinfoheader' 14);                      biCompression = GET_4B(bmpinfoheader' 16);                      biXPelsPerMeter = GET_4B(bmpinfoheader' 24);                      biYPelsPerMeter = GET_4B(bmpinfoheader' 28);                      biClrUsed = GET_4B(bmpinfoheader' 32);                      /* biSizeImage' biClrImportant fields are ignored */                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 4;       /* Windows uses RGBQUAD colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                                            if (biCompression != 0)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_COMPRESSED);                        if (biXPelsPerMeter > 0 && biYPelsPerMeter > 0)                      {                          /* Set JFIF density parameters from the BMP data */                          cinfo.X_density = (short)(biXPelsPerMeter / 100); /* 100 cm per meter */                          cinfo.Y_density = (short)(biYPelsPerMeter / 100);                          cinfo.Density_unit = DensityUnit.DotsCm;                      }                      break;                  default:                      cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADHEADER);                      break;              }
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: switch (headerSize)              {                  case 12:                      /* Decode OS/2 1.x header (Microsoft calls this a BITMAPCOREHEADER) */                      biWidth = GET_2B(bmpinfoheader' 4);                      biHeight = GET_2B(bmpinfoheader' 6);                      biPlanes = GET_2B(bmpinfoheader' 8);                      bits_per_pixel = GET_2B(bmpinfoheader' 10);                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 3;       /* OS/2 uses RGBTRIPLE colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                      break;                  case 40:                  case 64:                      /* Decode Windows 3.x header (Microsoft calls this a BITMAPINFOHEADER) */                      /* or OS/2 2.x header' which has additional fields that we ignore */                      biWidth = GET_4B(bmpinfoheader' 4);                      biHeight = GET_4B(bmpinfoheader' 8);                      biPlanes = GET_2B(bmpinfoheader' 12);                      bits_per_pixel = GET_2B(bmpinfoheader' 14);                      biCompression = GET_4B(bmpinfoheader' 16);                      biXPelsPerMeter = GET_4B(bmpinfoheader' 24);                      biYPelsPerMeter = GET_4B(bmpinfoheader' 28);                      biClrUsed = GET_4B(bmpinfoheader' 32);                      /* biSizeImage' biClrImportant fields are ignored */                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 4;       /* Windows uses RGBQUAD colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                                            if (biCompression != 0)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_COMPRESSED);                        if (biXPelsPerMeter > 0 && biYPelsPerMeter > 0)                      {                          /* Set JFIF density parameters from the BMP data */                          cinfo.X_density = (short)(biXPelsPerMeter / 100); /* 100 cm per meter */                          cinfo.Y_density = (short)(biYPelsPerMeter / 100);                          cinfo.Density_unit = DensityUnit.DotsCm;                      }                      break;                  default:                      cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADHEADER);                      break;              }
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: switch (headerSize)              {                  case 12:                      /* Decode OS/2 1.x header (Microsoft calls this a BITMAPCOREHEADER) */                      biWidth = GET_2B(bmpinfoheader' 4);                      biHeight = GET_2B(bmpinfoheader' 6);                      biPlanes = GET_2B(bmpinfoheader' 8);                      bits_per_pixel = GET_2B(bmpinfoheader' 10);                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 3;       /* OS/2 uses RGBTRIPLE colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                      break;                  case 40:                  case 64:                      /* Decode Windows 3.x header (Microsoft calls this a BITMAPINFOHEADER) */                      /* or OS/2 2.x header' which has additional fields that we ignore */                      biWidth = GET_4B(bmpinfoheader' 4);                      biHeight = GET_4B(bmpinfoheader' 8);                      biPlanes = GET_2B(bmpinfoheader' 12);                      bits_per_pixel = GET_2B(bmpinfoheader' 14);                      biCompression = GET_4B(bmpinfoheader' 16);                      biXPelsPerMeter = GET_4B(bmpinfoheader' 24);                      biYPelsPerMeter = GET_4B(bmpinfoheader' 28);                      biClrUsed = GET_4B(bmpinfoheader' 32);                      /* biSizeImage' biClrImportant fields are ignored */                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 4;       /* Windows uses RGBQUAD colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                                            if (biCompression != 0)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_COMPRESSED);                        if (biXPelsPerMeter > 0 && biYPelsPerMeter > 0)                      {                          /* Set JFIF density parameters from the BMP data */                          cinfo.X_density = (short)(biXPelsPerMeter / 100); /* 100 cm per meter */                          cinfo.Y_density = (short)(biYPelsPerMeter / 100);                          cinfo.Density_unit = DensityUnit.DotsCm;                      }                      break;                  default:                      cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADHEADER);                      break;              }
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: switch (headerSize)              {                  case 12:                      /* Decode OS/2 1.x header (Microsoft calls this a BITMAPCOREHEADER) */                      biWidth = GET_2B(bmpinfoheader' 4);                      biHeight = GET_2B(bmpinfoheader' 6);                      biPlanes = GET_2B(bmpinfoheader' 8);                      bits_per_pixel = GET_2B(bmpinfoheader' 10);                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 3;       /* OS/2 uses RGBTRIPLE colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                      break;                  case 40:                  case 64:                      /* Decode Windows 3.x header (Microsoft calls this a BITMAPINFOHEADER) */                      /* or OS/2 2.x header' which has additional fields that we ignore */                      biWidth = GET_4B(bmpinfoheader' 4);                      biHeight = GET_4B(bmpinfoheader' 8);                      biPlanes = GET_2B(bmpinfoheader' 12);                      bits_per_pixel = GET_2B(bmpinfoheader' 14);                      biCompression = GET_4B(bmpinfoheader' 16);                      biXPelsPerMeter = GET_4B(bmpinfoheader' 24);                      biYPelsPerMeter = GET_4B(bmpinfoheader' 28);                      biClrUsed = GET_4B(bmpinfoheader' 32);                      /* biSizeImage' biClrImportant fields are ignored */                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 4;       /* Windows uses RGBQUAD colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                                            if (biCompression != 0)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_COMPRESSED);                        if (biXPelsPerMeter > 0 && biYPelsPerMeter > 0)                      {                          /* Set JFIF density parameters from the BMP data */                          cinfo.X_density = (short)(biXPelsPerMeter / 100); /* 100 cm per meter */                          cinfo.Y_density = (short)(biYPelsPerMeter / 100);                          cinfo.Density_unit = DensityUnit.DotsCm;                      }                      break;                  default:                      cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADHEADER);                      break;              }
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: switch (headerSize)              {                  case 12:                      /* Decode OS/2 1.x header (Microsoft calls this a BITMAPCOREHEADER) */                      biWidth = GET_2B(bmpinfoheader' 4);                      biHeight = GET_2B(bmpinfoheader' 6);                      biPlanes = GET_2B(bmpinfoheader' 8);                      bits_per_pixel = GET_2B(bmpinfoheader' 10);                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 3;       /* OS/2 uses RGBTRIPLE colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                      break;                  case 40:                  case 64:                      /* Decode Windows 3.x header (Microsoft calls this a BITMAPINFOHEADER) */                      /* or OS/2 2.x header' which has additional fields that we ignore */                      biWidth = GET_4B(bmpinfoheader' 4);                      biHeight = GET_4B(bmpinfoheader' 8);                      biPlanes = GET_2B(bmpinfoheader' 12);                      bits_per_pixel = GET_2B(bmpinfoheader' 14);                      biCompression = GET_4B(bmpinfoheader' 16);                      biXPelsPerMeter = GET_4B(bmpinfoheader' 24);                      biYPelsPerMeter = GET_4B(bmpinfoheader' 28);                      biClrUsed = GET_4B(bmpinfoheader' 32);                      /* biSizeImage' biClrImportant fields are ignored */                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 4;       /* Windows uses RGBQUAD colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                                            if (biCompression != 0)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_COMPRESSED);                        if (biXPelsPerMeter > 0 && biYPelsPerMeter > 0)                      {                          /* Set JFIF density parameters from the BMP data */                          cinfo.X_density = (short)(biXPelsPerMeter / 100); /* 100 cm per meter */                          cinfo.Y_density = (short)(biYPelsPerMeter / 100);                          cinfo.Density_unit = DensityUnit.DotsCm;                      }                      break;                  default:                      cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADHEADER);                      break;              }
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: switch (headerSize)              {                  case 12:                      /* Decode OS/2 1.x header (Microsoft calls this a BITMAPCOREHEADER) */                      biWidth = GET_2B(bmpinfoheader' 4);                      biHeight = GET_2B(bmpinfoheader' 6);                      biPlanes = GET_2B(bmpinfoheader' 8);                      bits_per_pixel = GET_2B(bmpinfoheader' 10);                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 3;       /* OS/2 uses RGBTRIPLE colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                      break;                  case 40:                  case 64:                      /* Decode Windows 3.x header (Microsoft calls this a BITMAPINFOHEADER) */                      /* or OS/2 2.x header' which has additional fields that we ignore */                      biWidth = GET_4B(bmpinfoheader' 4);                      biHeight = GET_4B(bmpinfoheader' 8);                      biPlanes = GET_2B(bmpinfoheader' 12);                      bits_per_pixel = GET_2B(bmpinfoheader' 14);                      biCompression = GET_4B(bmpinfoheader' 16);                      biXPelsPerMeter = GET_4B(bmpinfoheader' 24);                      biYPelsPerMeter = GET_4B(bmpinfoheader' 28);                      biClrUsed = GET_4B(bmpinfoheader' 32);                      /* biSizeImage' biClrImportant fields are ignored */                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 4;       /* Windows uses RGBQUAD colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                                            if (biCompression != 0)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_COMPRESSED);                        if (biXPelsPerMeter > 0 && biYPelsPerMeter > 0)                      {                          /* Set JFIF density parameters from the BMP data */                          cinfo.X_density = (short)(biXPelsPerMeter / 100); /* 100 cm per meter */                          cinfo.Y_density = (short)(biYPelsPerMeter / 100);                          cinfo.Density_unit = DensityUnit.DotsCm;                      }                      break;                  default:                      cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADHEADER);                      break;              }
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: switch (headerSize)              {                  case 12:                      /* Decode OS/2 1.x header (Microsoft calls this a BITMAPCOREHEADER) */                      biWidth = GET_2B(bmpinfoheader' 4);                      biHeight = GET_2B(bmpinfoheader' 6);                      biPlanes = GET_2B(bmpinfoheader' 8);                      bits_per_pixel = GET_2B(bmpinfoheader' 10);                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 3;       /* OS/2 uses RGBTRIPLE colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                      break;                  case 40:                  case 64:                      /* Decode Windows 3.x header (Microsoft calls this a BITMAPINFOHEADER) */                      /* or OS/2 2.x header' which has additional fields that we ignore */                      biWidth = GET_4B(bmpinfoheader' 4);                      biHeight = GET_4B(bmpinfoheader' 8);                      biPlanes = GET_2B(bmpinfoheader' 12);                      bits_per_pixel = GET_2B(bmpinfoheader' 14);                      biCompression = GET_4B(bmpinfoheader' 16);                      biXPelsPerMeter = GET_4B(bmpinfoheader' 24);                      biYPelsPerMeter = GET_4B(bmpinfoheader' 28);                      biClrUsed = GET_4B(bmpinfoheader' 32);                      /* biSizeImage' biClrImportant fields are ignored */                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 4;       /* Windows uses RGBQUAD colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                                            if (biCompression != 0)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_COMPRESSED);                        if (biXPelsPerMeter > 0 && biYPelsPerMeter > 0)                      {                          /* Set JFIF density parameters from the BMP data */                          cinfo.X_density = (short)(biXPelsPerMeter / 100); /* 100 cm per meter */                          cinfo.Y_density = (short)(biYPelsPerMeter / 100);                          cinfo.Density_unit = DensityUnit.DotsCm;                      }                      break;                  default:                      cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADHEADER);                      break;              }
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: switch (headerSize)              {                  case 12:                      /* Decode OS/2 1.x header (Microsoft calls this a BITMAPCOREHEADER) */                      biWidth = GET_2B(bmpinfoheader' 4);                      biHeight = GET_2B(bmpinfoheader' 6);                      biPlanes = GET_2B(bmpinfoheader' 8);                      bits_per_pixel = GET_2B(bmpinfoheader' 10);                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 3;       /* OS/2 uses RGBTRIPLE colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                      break;                  case 40:                  case 64:                      /* Decode Windows 3.x header (Microsoft calls this a BITMAPINFOHEADER) */                      /* or OS/2 2.x header' which has additional fields that we ignore */                      biWidth = GET_4B(bmpinfoheader' 4);                      biHeight = GET_4B(bmpinfoheader' 8);                      biPlanes = GET_2B(bmpinfoheader' 12);                      bits_per_pixel = GET_2B(bmpinfoheader' 14);                      biCompression = GET_4B(bmpinfoheader' 16);                      biXPelsPerMeter = GET_4B(bmpinfoheader' 24);                      biYPelsPerMeter = GET_4B(bmpinfoheader' 28);                      biClrUsed = GET_4B(bmpinfoheader' 32);                      /* biSizeImage' biClrImportant fields are ignored */                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 4;       /* Windows uses RGBQUAD colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                                            if (biCompression != 0)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_COMPRESSED);                        if (biXPelsPerMeter > 0 && biYPelsPerMeter > 0)                      {                          /* Set JFIF density parameters from the BMP data */                          cinfo.X_density = (short)(biXPelsPerMeter / 100); /* 100 cm per meter */                          cinfo.Y_density = (short)(biYPelsPerMeter / 100);                          cinfo.Density_unit = DensityUnit.DotsCm;                      }                      break;                  default:                      cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADHEADER);                      break;              }
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: switch (headerSize)              {                  case 12:                      /* Decode OS/2 1.x header (Microsoft calls this a BITMAPCOREHEADER) */                      biWidth = GET_2B(bmpinfoheader' 4);                      biHeight = GET_2B(bmpinfoheader' 6);                      biPlanes = GET_2B(bmpinfoheader' 8);                      bits_per_pixel = GET_2B(bmpinfoheader' 10);                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 3;       /* OS/2 uses RGBTRIPLE colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                      break;                  case 40:                  case 64:                      /* Decode Windows 3.x header (Microsoft calls this a BITMAPINFOHEADER) */                      /* or OS/2 2.x header' which has additional fields that we ignore */                      biWidth = GET_4B(bmpinfoheader' 4);                      biHeight = GET_4B(bmpinfoheader' 8);                      biPlanes = GET_2B(bmpinfoheader' 12);                      bits_per_pixel = GET_2B(bmpinfoheader' 14);                      biCompression = GET_4B(bmpinfoheader' 16);                      biXPelsPerMeter = GET_4B(bmpinfoheader' 24);                      biYPelsPerMeter = GET_4B(bmpinfoheader' 28);                      biClrUsed = GET_4B(bmpinfoheader' 32);                      /* biSizeImage' biClrImportant fields are ignored */                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 4;       /* Windows uses RGBQUAD colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                                            if (biCompression != 0)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_COMPRESSED);                        if (biXPelsPerMeter > 0 && biYPelsPerMeter > 0)                      {                          /* Set JFIF density parameters from the BMP data */                          cinfo.X_density = (short)(biXPelsPerMeter / 100); /* 100 cm per meter */                          cinfo.Y_density = (short)(biYPelsPerMeter / 100);                          cinfo.Density_unit = DensityUnit.DotsCm;                      }                      break;                  default:                      cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADHEADER);                      break;              }
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: switch (headerSize)              {                  case 12:                      /* Decode OS/2 1.x header (Microsoft calls this a BITMAPCOREHEADER) */                      biWidth = GET_2B(bmpinfoheader' 4);                      biHeight = GET_2B(bmpinfoheader' 6);                      biPlanes = GET_2B(bmpinfoheader' 8);                      bits_per_pixel = GET_2B(bmpinfoheader' 10);                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 3;       /* OS/2 uses RGBTRIPLE colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                      break;                  case 40:                  case 64:                      /* Decode Windows 3.x header (Microsoft calls this a BITMAPINFOHEADER) */                      /* or OS/2 2.x header' which has additional fields that we ignore */                      biWidth = GET_4B(bmpinfoheader' 4);                      biHeight = GET_4B(bmpinfoheader' 8);                      biPlanes = GET_2B(bmpinfoheader' 12);                      bits_per_pixel = GET_2B(bmpinfoheader' 14);                      biCompression = GET_4B(bmpinfoheader' 16);                      biXPelsPerMeter = GET_4B(bmpinfoheader' 24);                      biYPelsPerMeter = GET_4B(bmpinfoheader' 28);                      biClrUsed = GET_4B(bmpinfoheader' 32);                      /* biSizeImage' biClrImportant fields are ignored */                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 4;       /* Windows uses RGBQUAD colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                                            if (biCompression != 0)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_COMPRESSED);                        if (biXPelsPerMeter > 0 && biYPelsPerMeter > 0)                      {                          /* Set JFIF density parameters from the BMP data */                          cinfo.X_density = (short)(biXPelsPerMeter / 100); /* 100 cm per meter */                          cinfo.Y_density = (short)(biYPelsPerMeter / 100);                          cinfo.Density_unit = DensityUnit.DotsCm;                      }                      break;                  default:                      cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADHEADER);                      break;              }
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: switch (headerSize)              {                  case 12:                      /* Decode OS/2 1.x header (Microsoft calls this a BITMAPCOREHEADER) */                      biWidth = GET_2B(bmpinfoheader' 4);                      biHeight = GET_2B(bmpinfoheader' 6);                      biPlanes = GET_2B(bmpinfoheader' 8);                      bits_per_pixel = GET_2B(bmpinfoheader' 10);                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 3;       /* OS/2 uses RGBTRIPLE colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                      break;                  case 40:                  case 64:                      /* Decode Windows 3.x header (Microsoft calls this a BITMAPINFOHEADER) */                      /* or OS/2 2.x header' which has additional fields that we ignore */                      biWidth = GET_4B(bmpinfoheader' 4);                      biHeight = GET_4B(bmpinfoheader' 8);                      biPlanes = GET_2B(bmpinfoheader' 12);                      bits_per_pixel = GET_2B(bmpinfoheader' 14);                      biCompression = GET_4B(bmpinfoheader' 16);                      biXPelsPerMeter = GET_4B(bmpinfoheader' 24);                      biYPelsPerMeter = GET_4B(bmpinfoheader' 28);                      biClrUsed = GET_4B(bmpinfoheader' 32);                      /* biSizeImage' biClrImportant fields are ignored */                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 4;       /* Windows uses RGBQUAD colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                                            if (biCompression != 0)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_COMPRESSED);                        if (biXPelsPerMeter > 0 && biYPelsPerMeter > 0)                      {                          /* Set JFIF density parameters from the BMP data */                          cinfo.X_density = (short)(biXPelsPerMeter / 100); /* 100 cm per meter */                          cinfo.Y_density = (short)(biYPelsPerMeter / 100);                          cinfo.Density_unit = DensityUnit.DotsCm;                      }                      break;                  default:                      cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADHEADER);                      break;              }
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: switch (headerSize)              {                  case 12:                      /* Decode OS/2 1.x header (Microsoft calls this a BITMAPCOREHEADER) */                      biWidth = GET_2B(bmpinfoheader' 4);                      biHeight = GET_2B(bmpinfoheader' 6);                      biPlanes = GET_2B(bmpinfoheader' 8);                      bits_per_pixel = GET_2B(bmpinfoheader' 10);                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 3;       /* OS/2 uses RGBTRIPLE colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_OS2' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                      break;                  case 40:                  case 64:                      /* Decode Windows 3.x header (Microsoft calls this a BITMAPINFOHEADER) */                      /* or OS/2 2.x header' which has additional fields that we ignore */                      biWidth = GET_4B(bmpinfoheader' 4);                      biHeight = GET_4B(bmpinfoheader' 8);                      biPlanes = GET_2B(bmpinfoheader' 12);                      bits_per_pixel = GET_2B(bmpinfoheader' 14);                      biCompression = GET_4B(bmpinfoheader' 16);                      biXPelsPerMeter = GET_4B(bmpinfoheader' 24);                      biYPelsPerMeter = GET_4B(bmpinfoheader' 28);                      biClrUsed = GET_4B(bmpinfoheader' 32);                      /* biSizeImage' biClrImportant fields are ignored */                        switch (bits_per_pixel)                      {                          case 8:                              /* colormapped image */                              mapentrysize = 4;       /* Windows uses RGBQUAD colormap */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP_MAPPED' biWidth' biHeight);                              break;                          case 24:                              /* RGB image */                              cinfo.TRACEMS(1' (int)ADDON_MESSAGE_CODE.JTRC_BMP' biWidth' biHeight);                              break;                          default:                              cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                              break;                      }                        if (biPlanes != 1)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADPLANES);                                            if (biCompression != 0)                          cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_COMPRESSED);                        if (biXPelsPerMeter > 0 && biYPelsPerMeter > 0)                      {                          /* Set JFIF density parameters from the BMP data */                          cinfo.X_density = (short)(biXPelsPerMeter / 100); /* 100 cm per meter */                          cinfo.Y_density = (short)(biYPelsPerMeter / 100);                          cinfo.Density_unit = DensityUnit.DotsCm;                      }                      break;                  default:                      cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADHEADER);                      break;              }
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: int bPad = bfOffBits - (headerSize + 14);
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: biClrUsed = 256;
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: colormap = jpeg_common_struct.AllocJpegSamples(biClrUsed' 3);
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: row_width = biWidth * 3;
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: bits_per_pixel == 24
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: (row_width & 3) != 0
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: buffer = jpeg_common_struct.AllocJpegSamples(biWidth * 3' 1);
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: cinfo.Input_components = 3;
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,start_input,The following statement contains a magic number: cinfo.Data_precision = 8;
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,get_8bit_row,The following statement contains a magic number: buffer[0][outIndex] = colormap[2][t];
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,get_24bit_row,The following statement contains a magic number: buffer[0][outIndex + 2] = image_ptr[0][imageIndex];
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,get_24bit_row,The following statement contains a magic number: outIndex += 3;
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,preload_image,The following statement contains a magic number: switch (bits_per_pixel)              {                  case 8:                      m_pixelRowsMethod = PixelRowsMethod.use8bit;                      break;                  case 24:                      m_pixelRowsMethod = PixelRowsMethod.use24bit;                      break;                  default:                      cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                      break;              }
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,preload_image,The following statement contains a magic number: switch (bits_per_pixel)              {                  case 8:                      m_pixelRowsMethod = PixelRowsMethod.use8bit;                      break;                  case 24:                      m_pixelRowsMethod = PixelRowsMethod.use24bit;                      break;                  default:                      cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADDEPTH);                      break;              }
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,read_colormap,The following statement contains a magic number: switch (mapentrysize)              {                  case 3:                      /* BGR format (occurs in OS/2 files) */                      for (int i = 0; i < cmaplen; i++)                      {                          colormap[2][i] = (byte)read_byte();                          colormap[1][i] = (byte)read_byte();                          colormap[0][i] = (byte)read_byte();                      }                      break;                  case 4:                      /* BGR0 format (occurs in MS Windows files) */                      for (int i = 0; i < cmaplen; i++)                      {                          colormap[2][i] = (byte)read_byte();                          colormap[1][i] = (byte)read_byte();                          colormap[0][i] = (byte)read_byte();                          read_byte();                      }                      break;                  default:                      cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADCMAP);                      break;              }
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,read_colormap,The following statement contains a magic number: switch (mapentrysize)              {                  case 3:                      /* BGR format (occurs in OS/2 files) */                      for (int i = 0; i < cmaplen; i++)                      {                          colormap[2][i] = (byte)read_byte();                          colormap[1][i] = (byte)read_byte();                          colormap[0][i] = (byte)read_byte();                      }                      break;                  case 4:                      /* BGR0 format (occurs in MS Windows files) */                      for (int i = 0; i < cmaplen; i++)                      {                          colormap[2][i] = (byte)read_byte();                          colormap[1][i] = (byte)read_byte();                          colormap[0][i] = (byte)read_byte();                          read_byte();                      }                      break;                  default:                      cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADCMAP);                      break;              }
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,read_colormap,The following statement contains a magic number: switch (mapentrysize)              {                  case 3:                      /* BGR format (occurs in OS/2 files) */                      for (int i = 0; i < cmaplen; i++)                      {                          colormap[2][i] = (byte)read_byte();                          colormap[1][i] = (byte)read_byte();                          colormap[0][i] = (byte)read_byte();                      }                      break;                  case 4:                      /* BGR0 format (occurs in MS Windows files) */                      for (int i = 0; i < cmaplen; i++)                      {                          colormap[2][i] = (byte)read_byte();                          colormap[1][i] = (byte)read_byte();                          colormap[0][i] = (byte)read_byte();                          read_byte();                      }                      break;                  default:                      cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADCMAP);                      break;              }
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,read_colormap,The following statement contains a magic number: switch (mapentrysize)              {                  case 3:                      /* BGR format (occurs in OS/2 files) */                      for (int i = 0; i < cmaplen; i++)                      {                          colormap[2][i] = (byte)read_byte();                          colormap[1][i] = (byte)read_byte();                          colormap[0][i] = (byte)read_byte();                      }                      break;                  case 4:                      /* BGR0 format (occurs in MS Windows files) */                      for (int i = 0; i < cmaplen; i++)                      {                          colormap[2][i] = (byte)read_byte();                          colormap[1][i] = (byte)read_byte();                          colormap[0][i] = (byte)read_byte();                          read_byte();                      }                      break;                  default:                      cinfo.ERREXIT((int)ADDON_MESSAGE_CODE.JERR_BMP_BADCMAP);                      break;              }
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,GET_2B,The following statement contains a magic number: return (int)array[offset] + ((int)array[offset + 1] << 8);
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,GET_4B,The following statement contains a magic number: return (int)array[offset] + ((int)array[offset + 1] << 8) + ((int)array[offset + 2] << 16) + ((int)array[offset + 3] << 24);
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,GET_4B,The following statement contains a magic number: return (int)array[offset] + ((int)array[offset + 1] << 8) + ((int)array[offset + 2] << 16) + ((int)array[offset + 3] << 24);
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,GET_4B,The following statement contains a magic number: return (int)array[offset] + ((int)array[offset + 1] << 8) + ((int)array[offset + 2] << 16) + ((int)array[offset + 3] << 24);
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,GET_4B,The following statement contains a magic number: return (int)array[offset] + ((int)array[offset + 1] << 8) + ((int)array[offset + 2] << 16) + ((int)array[offset + 3] << 24);
Magic Number,BitMiracle.Jpeg,bmp_source_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\bmp_source_struct.cs,GET_4B,The following statement contains a magic number: return (int)array[offset] + ((int)array[offset + 1] << 8) + ((int)array[offset + 2] << 16) + ((int)array[offset + 3] << 24);
Magic Number,BitMiracle.Jpeg,Program,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\Program.cs,parseSwitchesForCompression,The following statement contains a magic number: lastFileArgSeen != argv.Length - 2
Magic Number,BitMiracle.Jpeg,Program,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\Program.cs,applyOptions,The following statement contains a magic number: int q_scale_factor = 100;
Magic Number,BitMiracle.Jpeg,Program,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\Program.cs,applyOptions,The following statement contains a magic number: options.Quality != 75
Magic Number,BitMiracle.Jpeg,Program,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\Program.cs,decompress,The following statement contains a magic number: cinfo.jpeg_set_marker_processor((int)JPEG_MARKER.APP0 + 12' printTextMarker);
Magic Number,BitMiracle.Jpeg,Program,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\Program.cs,parseSwitchesForDecompression,The following statement contains a magic number: lastFileArgSeen != argv.Length - 2
Magic Number,BitMiracle.Jpeg,Program,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\Program.cs,applyOptions,The following statement contains a magic number: decompressor.Desired_number_of_colors = 216;
Magic Number,BitMiracle.Jpeg,Program,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\Program.cs,printTextMarker,The following statement contains a magic number: int length = jpeg_getc(cinfo) << 8;
Magic Number,BitMiracle.Jpeg,Program,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\Program.cs,printTextMarker,The following statement contains a magic number: length -= 2;
Magic Number,BitMiracle.Jpeg,Program,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\Program.cs,encodeOctalString,The following statement contains a magic number: return string.Format(                  @"\{0}{1}{2}"'                  ((value >> 6) & 7)'                  ((value >> 3) & 7)'                  (value & 7)              );
Magic Number,BitMiracle.Jpeg,Program,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\Program.cs,encodeOctalString,The following statement contains a magic number: return string.Format(                  @"\{0}{1}{2}"'                  ((value >> 6) & 7)'                  ((value >> 3) & 7)'                  (value & 7)              );
Magic Number,BitMiracle.Jpeg,Program,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\Program.cs,encodeOctalString,The following statement contains a magic number: return string.Format(                  @"\{0}{1}{2}"'                  ((value >> 6) & 7)'                  ((value >> 3) & 7)'                  (value & 7)              );
Magic Number,BitMiracle.Jpeg,Program,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\Program.cs,encodeOctalString,The following statement contains a magic number: return string.Format(                  @"\{0}{1}{2}"'                  ((value >> 6) & 7)'                  ((value >> 3) & 7)'                  (value & 7)              );
Magic Number,BitMiracle.Jpeg,Program,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\Jpeg\Program.cs,encodeOctalString,The following statement contains a magic number: return string.Format(                  @"\{0}{1}{2}"'                  ((value >> 6) & 7)'                  ((value >> 3) & 7)'                  (value & 7)              );
