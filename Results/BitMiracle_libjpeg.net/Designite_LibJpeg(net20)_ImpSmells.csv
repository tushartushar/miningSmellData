Implementation smell,Namespace,Class,File,Method,Description
Long Method,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_calc_jpeg_dimensions,The method has 139 lines of code.
Long Method,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,initial_setup,The method has 119 lines of code.
Long Method,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,validate_script,The method has 133 lines of code.
Long Method,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,default_decompress_parms,The method has 112 lines of code.
Long Method,BitMiracle.LibJpeg.Classic,jpeg_error_mgr,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_error_mgr.cs,GetMessageText,The method has 217 lines of code.
Long Method,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,start_pass,The method has 227 lines of code.
Long Method,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,decode_mcu_full,The method has 117 lines of code.
Long Method,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,decode_mcu_sub,The method has 113 lines of code.
Long Method,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,decode_mcu_AC_refine,The method has 156 lines of code.
Long Method,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,jpeg_make_d_derived_tbl,The method has 107 lines of code.
Long Method,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,encode_mcu_AC_refine,The method has 106 lines of code.
Long Method,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,jpeg_gen_optimal_table,The method has 125 lines of code.
Long Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,jpeg_color_converter,The method has 168 lines of code.
Long Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,jpeg_color_deconverter,The method has 180 lines of code.
Long Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_decomp_master,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_decomp_master.cs,master_selection,The method has 118 lines of code.
Long Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The method has 113 lines of code.
Long Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_smooth_data,The method has 241 lines of code.
Long Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The method has 200 lines of code.
Long Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The method has 126 lines of code.
Long Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The method has 183 lines of code.
Long Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_input_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_input_controller.cs,jpeg_core_output_dimensions,The method has 169 lines of code.
Long Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_input_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_input_controller.cs,initial_setup,The method has 170 lines of code.
Long Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The method has 223 lines of code.
Long Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The method has 202 lines of code.
Long Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The method has 172 lines of code.
Long Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The method has 140 lines of code.
Long Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The method has 113 lines of code.
Long Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The method has 208 lines of code.
Long Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The method has 219 lines of code.
Long Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The method has 177 lines of code.
Long Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,read_markers,The method has 157 lines of code.
Long Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,save_marker,The method has 101 lines of code.
Long Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dqt,The method has 115 lines of code.
Long Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_lse,The method has 112 lines of code.
Long Method,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,pass2_fs_dither,The method has 131 lines of code.
Long Method,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,update_box,The method has 175 lines of code.
Long Method,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,find_nearby_colors,The method has 132 lines of code.
Complex Method,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,writeColormap,Cyclomatic complexity of the method is 12
Complex Method,BitMiracle.LibJpeg,SampleRow,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\SampleRow.cs,SampleRow,Cyclomatic complexity of the method is 8
Complex Method,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_finish_compress,Cyclomatic complexity of the method is 8
Complex Method,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_set_colorspace,Cyclomatic complexity of the method is 12
Complex Method,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_default_colorspace,Cyclomatic complexity of the method is 9
Complex Method,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_add_quant_table,Cyclomatic complexity of the method is 8
Complex Method,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_calc_jpeg_dimensions,Cyclomatic complexity of the method is 17
Complex Method,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,initial_setup,Cyclomatic complexity of the method is 20
Complex Method,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,validate_script,Cyclomatic complexity of the method is 31
Complex Method,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,jpeg_start_decompress,Cyclomatic complexity of the method is 12
Complex Method,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,jpeg_calc_output_dimensions,Cyclomatic complexity of the method is 13
Complex Method,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,jpeg_read_coefficients,Cyclomatic complexity of the method is 10
Complex Method,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,jpeg_copy_critical_parameters,Cyclomatic complexity of the method is 13
Complex Method,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,default_decompress_parms,Cyclomatic complexity of the method is 15
Complex Method,BitMiracle.LibJpeg.Classic,jpeg_error_mgr,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_error_mgr.cs,GetMessageText,Cyclomatic complexity of the method is 105
Complex Method,BitMiracle.LibJpeg.Classic,jpeg_source_mgr,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_source_mgr.cs,resync_to_restart,Cyclomatic complexity of the method is 9
Complex Method,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,start_pass,Cyclomatic complexity of the method is 48
Complex Method,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,decode_mcu_full,Cyclomatic complexity of the method is 16
Complex Method,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,decode_mcu_sub,Cyclomatic complexity of the method is 15
Complex Method,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,decode_mcu_AC_first,Cyclomatic complexity of the method is 10
Complex Method,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,jpeg_fill_bit_buffer,Cyclomatic complexity of the method is 8
Complex Method,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,jpeg_make_d_derived_tbl,Cyclomatic complexity of the method is 18
Complex Method,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,start_pass,Cyclomatic complexity of the method is 17
Complex Method,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,encode_mcu_huff,Cyclomatic complexity of the method is 8
Complex Method,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,finish_pass_gather,Cyclomatic complexity of the method is 9
Complex Method,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,encode_one_block,Cyclomatic complexity of the method is 18
Complex Method,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,htest_one_block,Cyclomatic complexity of the method is 11
Complex Method,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,encode_mcu_DC_first,Cyclomatic complexity of the method is 10
Complex Method,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,encode_mcu_AC_first,Cyclomatic complexity of the method is 15
Complex Method,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,encode_mcu_AC_refine,Cyclomatic complexity of the method is 14
Complex Method,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,jpeg_make_c_derived_tbl,Cyclomatic complexity of the method is 12
Complex Method,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,jpeg_gen_optimal_table,Cyclomatic complexity of the method is 20
Complex Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,jpeg_color_converter,Cyclomatic complexity of the method is 37
Complex Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,jpeg_color_deconverter,Cyclomatic complexity of the method is 37
Complex Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_comp_master,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_comp_master.cs,per_scan_setup,Cyclomatic complexity of the method is 10
Complex Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_c_prep_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_c_prep_controller.cs,pre_process_context,Cyclomatic complexity of the method is 12
Complex Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_decomp_master,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_decomp_master.cs,prepare_for_output_pass,Cyclomatic complexity of the method is 9
Complex Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_decomp_master,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_decomp_master.cs,master_selection,Cyclomatic complexity of the method is 18
Complex Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,jpeg_downsampler,Cyclomatic complexity of the method is 10
Complex Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,consume_data,Cyclomatic complexity of the method is 10
Complex Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_onepass,Cyclomatic complexity of the method is 12
Complex Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_data_ordinary,Cyclomatic complexity of the method is 10
Complex Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_smooth_data,Cyclomatic complexity of the method is 36
Complex Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,smoothing_ok,Cyclomatic complexity of the method is 9
Complex Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_main_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_main_controller.cs,process_data_context_main,Cyclomatic complexity of the method is 12
Complex Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_post_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_post_controller.cs,start_pass,Cyclomatic complexity of the method is 8
Complex Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,Cyclomatic complexity of the method is 45
Complex Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_input_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_input_controller.cs,jpeg_core_output_dimensions,Cyclomatic complexity of the method is 17
Complex Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_input_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_input_controller.cs,consume_markers,Cyclomatic complexity of the method is 13
Complex Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_input_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_input_controller.cs,initial_setup,Cyclomatic complexity of the method is 25
Complex Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_input_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_input_controller.cs,per_scan_setup,Cyclomatic complexity of the method is 9
Complex Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,Cyclomatic complexity of the method is 46
Complex Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,read_markers,Cyclomatic complexity of the method is 38
Complex Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,save_marker,Cyclomatic complexity of the method is 14
Complex Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_interesting_appn,Cyclomatic complexity of the method is 9
Complex Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app0,Cyclomatic complexity of the method is 9
Complex Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_sof,Cyclomatic complexity of the method is 18
Complex Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_sos,Cyclomatic complexity of the method is 19
Complex Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dac,Cyclomatic complexity of the method is 9
Complex Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dht,Cyclomatic complexity of the method is 14
Complex Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dqt,Cyclomatic complexity of the method is 25
Complex Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_lse,Cyclomatic complexity of the method is 35
Complex Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,write_frame_header,Cyclomatic complexity of the method is 12
Complex Method,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_dac,Cyclomatic complexity of the method is 9
Complex Method,BitMiracle.LibJpeg.Classic.Internal,my_1pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_1pass_cquantizer.cs,start_pass,Cyclomatic complexity of the method is 10
Complex Method,BitMiracle.LibJpeg.Classic.Internal,my_1pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_1pass_cquantizer.cs,create_colorindex,Cyclomatic complexity of the method is 8
Complex Method,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,my_2pass_cquantizer,Cyclomatic complexity of the method is 8
Complex Method,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,start_pass,Cyclomatic complexity of the method is 11
Complex Method,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,median_cut,Cyclomatic complexity of the method is 8
Complex Method,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,update_box,Cyclomatic complexity of the method is 47
Complex Method,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,find_nearby_colors,Cyclomatic complexity of the method is 14
Complex Method,BitMiracle.LibJpeg.Classic.Internal,my_c_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_c_coef_controller.cs,compressDataImpl,Cyclomatic complexity of the method is 12
Complex Method,BitMiracle.LibJpeg.Classic.Internal,my_c_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_c_coef_controller.cs,compressFirstPass,Cyclomatic complexity of the method is 13
Complex Method,BitMiracle.LibJpeg.Classic.Internal,my_c_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_c_coef_controller.cs,compressOutput,Cyclomatic complexity of the method is 9
Complex Method,BitMiracle.LibJpeg.Classic.Internal,my_trans_c_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_trans_c_coef_controller.cs,compress_data,Cyclomatic complexity of the method is 11
Complex Method,BitMiracle.LibJpeg.Classic.Internal,my_upsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_upsampler.cs,my_upsampler,Cyclomatic complexity of the method is 8
Long Parameter List,BitMiracle.LibJpeg,Utils,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Utils.cs,CMYK2RGB,The method has 7 parameters. Parameters: c' m' y' k' red' green' blue
Long Parameter List,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,fill_a_scan,The method has 6 parameters. Parameters: scanIndex' ci' Ss' Se' Ah' Al
Long Parameter List,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,fill_scans,The method has 6 parameters. Parameters: scanIndex' ncomps' Ss' Se' Ah' Al
Long Parameter List,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_set_colorspace_SET_COMP,The method has 7 parameters. Parameters: index' id' hsamp' vsamp' quant' dctbl' actbl
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,HUFF_DECODE,The method has 5 parameters. Parameters: result' state' htbl' get_buffer' bits_left
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,jpeg_huff_decode,The method has 5 parameters. Parameters: state' get_buffer' bits_left' htbl' min_bits
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,encode_one_block,The method has 5 parameters. Parameters: state' block' last_dc_val' dctbl' actbl
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,JpegUtils,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\JpegUtils.cs,jcopy_sample_rows,The method has 6 parameters. Parameters: input_array' source_row' output_array' dest_row' num_rows' num_cols
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,JpegUtils,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\JpegUtils.cs,jcopy_sample_rows,The method has 6 parameters. Parameters: input_array' source_row' output_array' dest_row' num_rows' num_cols
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,JpegUtils,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\JpegUtils.cs,jcopy_sample_rows,The method has 6 parameters. Parameters: input_array' source_row' output_array' dest_row' num_rows' num_cols
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,rgb_ycc_convert,The method has 5 parameters. Parameters: input_buf' input_row' output_buf' output_row' num_rows
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,rgb_gray_convert,The method has 5 parameters. Parameters: input_buf' input_row' output_buf' output_row' num_rows
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,cmyk_ycck_convert,The method has 5 parameters. Parameters: input_buf' input_row' output_buf' output_row' num_rows
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,rgb_rgb1_convert,The method has 5 parameters. Parameters: input_buf' input_row' output_buf' output_row' num_rows
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,grayscale_convert,The method has 5 parameters. Parameters: input_buf' input_row' output_buf' output_row' num_rows
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,rgb_convert,The method has 5 parameters. Parameters: input_buf' input_row' output_buf' output_row' num_rows
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,null_convert,The method has 5 parameters. Parameters: input_buf' input_row' output_buf' output_row' num_rows
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,color_convert,The method has 6 parameters. Parameters: input_buf' perComponentOffsets' input_row' output_buf' output_row' num_rows
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,ycc_rgb_convert,The method has 5 parameters. Parameters: input_buf' input_row' output_buf' output_row' num_rows
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,rgb_gray_convert,The method has 5 parameters. Parameters: input_buf' input_row' output_buf' output_row' num_rows
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,rgb1_rgb_convert,The method has 5 parameters. Parameters: input_buf' input_row' output_buf' output_row' num_rows
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,rgb1_gray_convert,The method has 5 parameters. Parameters: input_buf' input_row' output_buf' output_row' num_rows
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,rgb_convert,The method has 5 parameters. Parameters: input_buf' input_row' output_buf' output_row' num_rows
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,ycck_cmyk_convert,The method has 5 parameters. Parameters: input_buf' input_row' output_buf' output_row' num_rows
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,gray_rgb_convert,The method has 5 parameters. Parameters: input_buf' input_row' output_buf' output_row' num_rows
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,grayscale_convert,The method has 5 parameters. Parameters: input_buf' input_row' output_buf' output_row' num_rows
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,cmyk_rgb_convert,The method has 5 parameters. Parameters: input_buf' input_row' output_buf' output_row' num_rows
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,ycck_rgb_convert,The method has 5 parameters. Parameters: input_buf' input_row' output_buf' output_row' num_rows
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,null_convert,The method has 5 parameters. Parameters: input_buf' input_row' output_buf' output_row' num_rows
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_quantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_quantizer.cs,color_quantize,The method has 5 parameters. Parameters: input_buf' in_row' output_buf' out_row' num_rows
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_c_prep_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_c_prep_controller.cs,pre_process_data,The method has 6 parameters. Parameters: input_buf' in_row_ctr' in_rows_avail' output_buf' out_row_group_ctr' out_row_groups_avail
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_c_prep_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_c_prep_controller.cs,pre_process_WithoutContext,The method has 6 parameters. Parameters: input_buf' in_row_ctr' in_rows_avail' output_buf' out_row_group_ctr' out_row_groups_avail
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_c_prep_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_c_prep_controller.cs,pre_process_context,The method has 6 parameters. Parameters: input_buf' in_row_ctr' in_rows_avail' output_buf' out_row_group_ctr' out_row_groups_avail
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_c_prep_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_c_prep_controller.cs,expand_bottom_edge,The method has 5 parameters. Parameters: image_data' rowsOffset' num_cols' input_rows' output_rows
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,int_downsample,The method has 5 parameters. Parameters: componentIndex' input_data' startInputRow' output_data' startOutRow
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,fullsize_downsample,The method has 5 parameters. Parameters: componentIndex' input_data' startInputRow' output_data' startOutRow
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v1_downsample,The method has 5 parameters. Parameters: componentIndex' input_data' startInputRow' output_data' startOutRow
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_downsample,The method has 5 parameters. Parameters: componentIndex' input_data' startInputRow' output_data' startOutRow
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The method has 5 parameters. Parameters: componentIndex' input_data' startInputRow' output_data' startOutRow
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,fullsize_smooth_downsample,The method has 5 parameters. Parameters: componentIndex' input_data' startInputRow' output_data' startOutRow
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,expand_right_edge,The method has 5 parameters. Parameters: image_data' startInputRow' num_rows' input_cols' output_cols
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_post_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_post_controller.cs,post_process_data,The method has 6 parameters. Parameters: input_buf' in_row_group_ctr' in_row_groups_avail' output_buf' out_row_ctr' out_rows_avail
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_post_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_post_controller.cs,post_process_1pass,The method has 6 parameters. Parameters: input_buf' in_row_group_ctr' in_row_groups_avail' output_buf' out_row_ctr' out_rows_avail
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,forwardDCTImpl,The method has 6 parameters. Parameters: compptr' sample_data' coef_blocks' start_row' start_col' num_blocks
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,forwardDCTFloatImpl,The method has 6 parameters. Parameters: compptr' sample_data' coef_blocks' start_row' start_col' num_blocks
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,inverse,The method has 5 parameters. Parameters: component_index' coef_block' output_buf' output_row' output_col
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,jpeg_upsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_upsampler.cs,upsample,The method has 6 parameters. Parameters: input_buf' in_row_group_ctr' in_row_groups_avail' output_buf' out_row_ctr' out_rows_avail
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,my_1pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_1pass_cquantizer.cs,color_quantize,The method has 5 parameters. Parameters: input_buf' in_row' output_buf' out_row' num_rows
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,my_1pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_1pass_cquantizer.cs,quantize,The method has 5 parameters. Parameters: input_buf' in_row' output_buf' out_row' num_rows
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,my_1pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_1pass_cquantizer.cs,quantize3,The method has 5 parameters. Parameters: input_buf' in_row' output_buf' out_row' num_rows
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,my_1pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_1pass_cquantizer.cs,quantize_ord_dither,The method has 5 parameters. Parameters: input_buf' in_row' output_buf' out_row' num_rows
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,my_1pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_1pass_cquantizer.cs,quantize3_ord_dither,The method has 5 parameters. Parameters: input_buf' in_row' output_buf' out_row' num_rows
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,my_1pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_1pass_cquantizer.cs,quantize_fs_dither,The method has 5 parameters. Parameters: input_buf' in_row' output_buf' out_row' num_rows
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,color_quantize,The method has 5 parameters. Parameters: input_buf' in_row' output_buf' out_row' num_rows
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,pass2_fs_dither,The method has 5 parameters. Parameters: input_buf' in_row' output_buf' out_row' num_rows
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,pass2_no_dither,The method has 5 parameters. Parameters: input_buf' in_row' output_buf' out_row' num_rows
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,find_best_colors,The method has 6 parameters. Parameters: minc0' minc1' minc2' numcolors' colorlist' bestcolor
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,my_merged_upsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_merged_upsampler.cs,upsample,The method has 6 parameters. Parameters: input_buf' in_row_group_ctr' in_row_groups_avail' output_buf' out_row_ctr' out_rows_avail
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,my_merged_upsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_merged_upsampler.cs,merged_2v_upsample,The method has 5 parameters. Parameters: input_buf' in_row_group_ctr' output_buf' out_row_ctr' out_rows_avail
Long Parameter List,BitMiracle.LibJpeg.Classic.Internal,my_upsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_upsampler.cs,upsample,The method has 6 parameters. Parameters: input_buf' in_row_group_ctr' in_row_groups_avail' output_buf' out_row_ctr' out_rows_avail
Long Statement,BitMiracle.LibJpeg,DecompressorToJpegImage,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\DecompressorToJpegImage.cs,ProcessPixelsRow,The length of the statement  "            SampleRow samplesRow = new SampleRow(row' m_jpegImage.Width' m_jpegImage.BitsPerComponent' m_jpegImage.ComponentsPerSample); " is 124.
Long Statement,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_write_marker,The length of the statement  "            if (m_next_scanline != 0 || (m_global_state != JpegState.CSTATE_SCANNING && m_global_state != JpegState.CSTATE_RAW_OK && m_global_state != JpegState.CSTATE_WRCOEFS)) " is 165.
Long Statement,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_write_m_header,The length of the statement  "            if (m_next_scanline != 0 || (m_global_state != JpegState.CSTATE_SCANNING && m_global_state != JpegState.CSTATE_RAW_OK && m_global_state != JpegState.CSTATE_WRCOEFS)) " is 165.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,decode_mcu_DC_first,The length of the statement  "                    HUFF_DECODE(out s' ref br_state' derived_tbls[m_cinfo.Comp_info[m_cinfo.m_cur_comp_info[ci]].Dc_tbl_no]' ref get_buffer' ref bits_left); " is 136.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,rgb_ycc_convert,The length of the statement  "                    output_buf[0][output_row][col] = (byte)((m_rgb_ycc_tab[r + R_Y_OFF] + m_rgb_ycc_tab[g + G_Y_OFF] + m_rgb_ycc_tab[b + B_Y_OFF]) >> SCALEBITS); " is 141.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,rgb_ycc_convert,The length of the statement  "                    output_buf[1][output_row][col] = (byte)((m_rgb_ycc_tab[r + R_CB_OFF] + m_rgb_ycc_tab[g + G_CB_OFF] + m_rgb_ycc_tab[b + B_CB_OFF]) >> SCALEBITS); " is 144.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,rgb_ycc_convert,The length of the statement  "                    output_buf[2][output_row][col] = (byte)((m_rgb_ycc_tab[r + R_CR_OFF] + m_rgb_ycc_tab[g + G_CR_OFF] + m_rgb_ycc_tab[b + B_CR_OFF]) >> SCALEBITS); " is 144.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,rgb_gray_convert,The length of the statement  "                    output_buf[0][output_row][col] = (byte)((m_rgb_ycc_tab[r + R_Y_OFF] + m_rgb_ycc_tab[g + G_Y_OFF] + m_rgb_ycc_tab[b + B_Y_OFF]) >> SCALEBITS); " is 141.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,cmyk_ycck_convert,The length of the statement  "                    output_buf[0][output_row][col] = (byte)((m_rgb_ycc_tab[r + R_Y_OFF] + m_rgb_ycc_tab[g + G_Y_OFF] + m_rgb_ycc_tab[b + B_Y_OFF]) >> SCALEBITS); " is 141.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,cmyk_ycck_convert,The length of the statement  "                    output_buf[1][output_row][col] = (byte)((m_rgb_ycc_tab[r + R_CB_OFF] + m_rgb_ycc_tab[g + G_CB_OFF] + m_rgb_ycc_tab[b + B_CB_OFF]) >> SCALEBITS); " is 144.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,cmyk_ycck_convert,The length of the statement  "                    output_buf[2][output_row][col] = (byte)((m_rgb_ycc_tab[r + R_CR_OFF] + m_rgb_ycc_tab[g + G_CR_OFF] + m_rgb_ycc_tab[b + B_CR_OFF]) >> SCALEBITS); " is 144.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,ycc_rgb_convert,The length of the statement  "                    output_buf[output_row + row][columnOffset + JpegConstants.RGB_GREEN] = limit[limitOffset + y + JpegUtils.RIGHT_SHIFT(m_Cb_g_tab[cb] + m_Cr_g_tab[cr]' SCALEBITS)]; " is 162.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,rgb_gray_convert,The length of the statement  "                    output_buf[output_row + row][columnOffset++] = (byte)((rgb_y_tab[r + R_Y_OFF] + rgb_y_tab[g + G_Y_OFF] + rgb_y_tab[b + B_Y_OFF]) >> SCALEBITS); " is 143.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,rgb1_rgb_convert,The length of the statement  "                    output_buf[output_row + row][columnOffset + JpegConstants.RGB_RED] = (byte)((r + g - JpegConstants.CENTERJSAMPLE) & JpegConstants.MAXJSAMPLE); " is 142.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,rgb1_rgb_convert,The length of the statement  "                    output_buf[output_row + row][columnOffset + JpegConstants.RGB_BLUE] = (byte)((b + g - JpegConstants.CENTERJSAMPLE) & JpegConstants.MAXJSAMPLE); " is 143.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,rgb1_gray_convert,The length of the statement  "                    output_buf[output_row + row][columnOffset++] = (byte)((rgb_y_tab[r + R_Y_OFF] + rgb_y_tab[g + G_Y_OFF] + rgb_y_tab[b + B_Y_OFF]) >> SCALEBITS); " is 143.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,ycck_cmyk_convert,The length of the statement  "                    output_buf[output_row + row][columnOffset] = limit[limitOffset + JpegConstants.MAXJSAMPLE - (y + m_Cr_r_tab[cr])]; /* red */ " is 124.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,ycck_cmyk_convert,The length of the statement  "                    output_buf[output_row + row][columnOffset + 1] = limit[limitOffset + JpegConstants.MAXJSAMPLE - (y + JpegUtils.RIGHT_SHIFT(m_Cb_g_tab[cb] + m_Cr_g_tab[cr]' SCALEBITS))]; /* green */ " is 181.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,ycck_cmyk_convert,The length of the statement  "                    output_buf[output_row + row][columnOffset + 2] = limit[limitOffset + JpegConstants.MAXJSAMPLE - (y + m_Cb_b_tab[cb])]; /* blue */ " is 129.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,gray_rgb_convert,The length of the statement  "                    output_buf[output_row + row][columnOffset + JpegConstants.RGB_RED] = input_buf[0][input_row + component0RowOffset][col]; " is 120.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,gray_rgb_convert,The length of the statement  "                    output_buf[output_row + row][columnOffset + JpegConstants.RGB_GREEN] = input_buf[0][input_row + component1RowOffset][col]; " is 122.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,gray_rgb_convert,The length of the statement  "                    output_buf[output_row + row][columnOffset + JpegConstants.RGB_BLUE] = input_buf[0][input_row + component2RowOffset][col]; " is 121.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,grayscale_convert,The length of the statement  "            JpegUtils.jcopy_sample_rows(input_buf[0]' input_row + m_perComponentOffsets[0]' output_buf' output_row' num_rows' m_cinfo.m_output_width); " is 138.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,ycck_rgb_convert,The length of the statement  "                    int cmyk_m = limit[limitOffset + JpegConstants.MAXJSAMPLE - (y + JpegUtils.RIGHT_SHIFT(m_Cb_g_tab[cb] + m_Cr_g_tab[cr]' SCALEBITS))]; " is 133.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_c_prep_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_c_prep_controller.cs,pre_process_data,The length of the statement  "                pre_process_WithoutContext(input_buf' ref in_row_ctr' in_rows_avail' output_buf' ref out_row_group_ctr' out_row_groups_avail); " is 126.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_c_prep_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_c_prep_controller.cs,pre_process_WithoutContext,The length of the statement  "                        expand_bottom_edge(m_color_buf[ci]' m_colorBufRowsOffset' m_cinfo.m_image_width' m_next_buf_row' m_cinfo.m_max_v_samp_factor); " is 126.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_c_prep_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_c_prep_controller.cs,pre_process_context,The length of the statement  "                                JpegUtils.jcopy_sample_rows(m_color_buf[ci]' m_colorBufRowsOffset' m_color_buf[ci]' m_colorBufRowsOffset - row' 1' m_cinfo.m_image_width); " is 138.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,int_downsample,The length of the statement  "            expand_right_edge(input_data' startInputRow' m_cinfo.m_max_v_samp_factor' m_cinfo.m_image_width' output_cols * h_expand); " is 121.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,fullsize_downsample,The length of the statement  "            JpegUtils.jcopy_sample_rows(input_data' startInputRow' output_data' startOutRow' m_cinfo.m_max_v_samp_factor' m_cinfo.m_image_width); " is 133.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The length of the statement  "            expand_right_edge(input_data' startInputRow - 1' m_cinfo.m_max_v_samp_factor + 2' m_cinfo.m_image_width' output_cols * 2); " is 122.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_main_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_main_controller.cs,alloc_funny_pointers,The length of the statement  "                int rgroup = (m_cinfo.Comp_info[ci].V_samp_factor * m_cinfo.Comp_info[ci].DCT_v_scaled_size) / m_cinfo.min_DCT_v_scaled_size; " is 125.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_main_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_main_controller.cs,make_funny_pointers,The length of the statement  "                int rgroup = (m_cinfo.Comp_info[ci].V_samp_factor * m_cinfo.Comp_info[ci].DCT_v_scaled_size) / m_cinfo.min_DCT_v_scaled_size; " is 125.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_main_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_main_controller.cs,set_wraparound_pointers,The length of the statement  "                int rgroup = (m_cinfo.Comp_info[ci].V_samp_factor * m_cinfo.Comp_info[ci].DCT_v_scaled_size) / m_cinfo.min_DCT_v_scaled_size; " is 125.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_post_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_post_controller.cs,post_process_data,The length of the statement  "                    m_cinfo.m_upsample.upsample(input_buf' ref in_row_group_ctr' in_row_groups_avail' output_buf' ref out_row_ctr' out_rows_avail); " is 127.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_post_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_post_controller.cs,post_process_prepass,The length of the statement  "            m_cinfo.m_upsample.upsample(input_buf' ref in_row_group_ctr' in_row_groups_avail' m_buffer' ref m_next_row' m_strip_height); " is 124.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The length of the statement  "                            dtbl[i] = JpegUtils.DESCALE((int)qtbl.quantval[i] * (int)aanscales[i]' compptr.component_needed ? CONST_BITS - 4 : CONST_BITS - 3); " is 131.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The length of the statement  "                                fdtbl[i] = (float)(1.0 / (((double)qtbl.quantval[i] * aanscalefactor[row] * aanscalefactor[col] * (compptr.component_needed ? 16.0 : 8.0)))); " is 141.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The length of the statement  "                data[dataIndex + JpegConstants.DCTSIZE * 1] = JpegUtils.RIGHT_SHIFT(tmp0' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS); " is 125.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The length of the statement  "                data[dataIndex + JpegConstants.DCTSIZE * 3] = JpegUtils.RIGHT_SHIFT(tmp1' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS); " is 125.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The length of the statement  "                data[dataIndex + JpegConstants.DCTSIZE * 5] = JpegUtils.RIGHT_SHIFT(tmp2' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS); " is 125.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The length of the statement  "                data[dataIndex + JpegConstants.DCTSIZE * 7] = JpegUtils.RIGHT_SHIFT(tmp3' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS); " is 125.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The length of the statement  "                data[dataIndex + JpegConstants.DCTSIZE * 1] = JpegUtils.DESCALE(tmp10' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 2); " is 126.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The length of the statement  "                data[dataIndex + JpegConstants.DCTSIZE * 3] = JpegUtils.DESCALE(tmp11' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 2); " is 126.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The length of the statement  "                data[dataIndex + JpegConstants.DCTSIZE * 5] = JpegUtils.DESCALE(tmp12' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 2); " is 126.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The length of the statement  "                data[dataIndex + JpegConstants.DCTSIZE * 7] = JpegUtils.DESCALE(tmp13' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 2); " is 126.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The length of the statement  "                                fmtbl[ii] = (float)((double)componentInfo.quant_table.quantval[ii] * aanscalefactor[row] * aanscalefactor[col] * 0.125); " is 120.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The length of the statement  "                workspace[workspaceIndex + JpegConstants.DCTSIZE * 0] = JpegUtils.RIGHT_SHIFT(tmp10 + tmp3' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 143.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The length of the statement  "                workspace[workspaceIndex + JpegConstants.DCTSIZE * 7] = JpegUtils.RIGHT_SHIFT(tmp10 - tmp3' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 143.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The length of the statement  "                workspace[workspaceIndex + JpegConstants.DCTSIZE * 1] = JpegUtils.RIGHT_SHIFT(tmp11 + tmp2' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 143.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The length of the statement  "                workspace[workspaceIndex + JpegConstants.DCTSIZE * 6] = JpegUtils.RIGHT_SHIFT(tmp11 - tmp2' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 143.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The length of the statement  "                workspace[workspaceIndex + JpegConstants.DCTSIZE * 2] = JpegUtils.RIGHT_SHIFT(tmp12 + tmp1' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 143.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The length of the statement  "                workspace[workspaceIndex + JpegConstants.DCTSIZE * 5] = JpegUtils.RIGHT_SHIFT(tmp12 - tmp1' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 143.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The length of the statement  "                workspace[workspaceIndex + JpegConstants.DCTSIZE * 3] = JpegUtils.RIGHT_SHIFT(tmp13 + tmp0' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 143.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The length of the statement  "                workspace[workspaceIndex + JpegConstants.DCTSIZE * 4] = JpegUtils.RIGHT_SHIFT(tmp13 - tmp0' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 143.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The length of the statement  "                m_componentBuffer[currentOutRow][output_col + 0] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(tmp10 + tmp3' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK]; " is 176.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The length of the statement  "                m_componentBuffer[currentOutRow][output_col + 7] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(tmp10 - tmp3' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK]; " is 176.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The length of the statement  "                m_componentBuffer[currentOutRow][output_col + 1] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(tmp11 + tmp2' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK]; " is 176.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The length of the statement  "                m_componentBuffer[currentOutRow][output_col + 6] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(tmp11 - tmp2' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK]; " is 176.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The length of the statement  "                m_componentBuffer[currentOutRow][output_col + 2] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(tmp12 + tmp1' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK]; " is 176.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The length of the statement  "                m_componentBuffer[currentOutRow][output_col + 5] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(tmp12 - tmp1' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK]; " is 176.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The length of the statement  "                m_componentBuffer[currentOutRow][output_col + 3] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(tmp13 + tmp0' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK]; " is 176.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The length of the statement  "                m_componentBuffer[currentOutRow][output_col + 4] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(tmp13 - tmp0' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK]; " is 176.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The length of the statement  "                m_componentBuffer[currentOutRow][output_col + 0] = limit[limitOffset + FAST_INTEGER_IRIGHT_SHIFT(tmp0 + tmp7' FAST_INTEGER_PASS1_BITS + 3) & RANGE_MASK]; " is 153.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The length of the statement  "                m_componentBuffer[currentOutRow][output_col + 7] = limit[limitOffset + FAST_INTEGER_IRIGHT_SHIFT(tmp0 - tmp7' FAST_INTEGER_PASS1_BITS + 3) & RANGE_MASK]; " is 153.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The length of the statement  "                m_componentBuffer[currentOutRow][output_col + 1] = limit[limitOffset + FAST_INTEGER_IRIGHT_SHIFT(tmp1 + tmp6' FAST_INTEGER_PASS1_BITS + 3) & RANGE_MASK]; " is 153.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The length of the statement  "                m_componentBuffer[currentOutRow][output_col + 6] = limit[limitOffset + FAST_INTEGER_IRIGHT_SHIFT(tmp1 - tmp6' FAST_INTEGER_PASS1_BITS + 3) & RANGE_MASK]; " is 153.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The length of the statement  "                m_componentBuffer[currentOutRow][output_col + 2] = limit[limitOffset + FAST_INTEGER_IRIGHT_SHIFT(tmp2 + tmp5' FAST_INTEGER_PASS1_BITS + 3) & RANGE_MASK]; " is 153.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The length of the statement  "                m_componentBuffer[currentOutRow][output_col + 5] = limit[limitOffset + FAST_INTEGER_IRIGHT_SHIFT(tmp2 - tmp5' FAST_INTEGER_PASS1_BITS + 3) & RANGE_MASK]; " is 153.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The length of the statement  "                m_componentBuffer[currentOutRow][output_col + 3] = limit[limitOffset + FAST_INTEGER_IRIGHT_SHIFT(tmp3 + tmp4' FAST_INTEGER_PASS1_BITS + 3) & RANGE_MASK]; " is 153.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The length of the statement  "                m_componentBuffer[currentOutRow][output_col + 4] = limit[limitOffset + FAST_INTEGER_IRIGHT_SHIFT(tmp3 - tmp4' FAST_INTEGER_PASS1_BITS + 3) & RANGE_MASK]; " is 153.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The length of the statement  "                workspace[workspaceIndex + JpegConstants.DCTSIZE * 0] = JpegUtils.DESCALE(tmp10 + tmp2' REDUCED_CONST_BITS - REDUCED_PASS1_BITS + 1); " is 133.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The length of the statement  "                workspace[workspaceIndex + JpegConstants.DCTSIZE * 3] = JpegUtils.DESCALE(tmp10 - tmp2' REDUCED_CONST_BITS - REDUCED_PASS1_BITS + 1); " is 133.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The length of the statement  "                workspace[workspaceIndex + JpegConstants.DCTSIZE * 1] = JpegUtils.DESCALE(tmp12 + tmp0' REDUCED_CONST_BITS - REDUCED_PASS1_BITS + 1); " is 133.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The length of the statement  "                workspace[workspaceIndex + JpegConstants.DCTSIZE * 2] = JpegUtils.DESCALE(tmp12 - tmp0' REDUCED_CONST_BITS - REDUCED_PASS1_BITS + 1); " is 133.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The length of the statement  "                    byte dcval = limit[limitOffset + JpegUtils.DESCALE(workspace[workspaceIndex + 0]' REDUCED_PASS1_BITS + 3) & RANGE_MASK]; " is 120.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The length of the statement  "                int tmp2 = workspace[workspaceIndex + 2] * REDUCED_FIX_1_847759065 + workspace[workspaceIndex + 6] * (-REDUCED_FIX_0_765366865); " is 128.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The length of the statement  "                m_componentBuffer[currentOutRow][output_col + 0] = limit[limitOffset + JpegUtils.DESCALE(tmp10 + tmp2' REDUCED_CONST_BITS + REDUCED_PASS1_BITS + 3 + 1) & RANGE_MASK]; " is 166.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The length of the statement  "                m_componentBuffer[currentOutRow][output_col + 3] = limit[limitOffset + JpegUtils.DESCALE(tmp10 - tmp2' REDUCED_CONST_BITS + REDUCED_PASS1_BITS + 3 + 1) & RANGE_MASK]; " is 166.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The length of the statement  "                m_componentBuffer[currentOutRow][output_col + 1] = limit[limitOffset + JpegUtils.DESCALE(tmp12 + tmp0' REDUCED_CONST_BITS + REDUCED_PASS1_BITS + 3 + 1) & RANGE_MASK]; " is 166.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The length of the statement  "                m_componentBuffer[currentOutRow][output_col + 2] = limit[limitOffset + JpegUtils.DESCALE(tmp12 - tmp0' REDUCED_CONST_BITS + REDUCED_PASS1_BITS + 3 + 1) & RANGE_MASK]; " is 166.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The length of the statement  "                workspace[workspaceIndex + JpegConstants.DCTSIZE * 0] = JpegUtils.DESCALE(tmp10 + tmp0' REDUCED_CONST_BITS - REDUCED_PASS1_BITS + 2); " is 133.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The length of the statement  "                workspace[workspaceIndex + JpegConstants.DCTSIZE * 1] = JpegUtils.DESCALE(tmp10 - tmp0' REDUCED_CONST_BITS - REDUCED_PASS1_BITS + 2); " is 133.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The length of the statement  "                    byte dcval = limit[limitOffset + JpegUtils.DESCALE(workspace[workspaceIndex + 0]' REDUCED_PASS1_BITS + 3) & RANGE_MASK]; " is 120.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The length of the statement  "                m_componentBuffer[currentOutRow][output_col + 0] = limit[limitOffset + JpegUtils.DESCALE(tmp10 + tmp0' REDUCED_CONST_BITS + REDUCED_PASS1_BITS + 3 + 2) & RANGE_MASK]; " is 166.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The length of the statement  "                m_componentBuffer[currentOutRow][output_col + 1] = limit[limitOffset + JpegUtils.DESCALE(tmp10 - tmp0' REDUCED_CONST_BITS + REDUCED_PASS1_BITS + 3 + 2) & RANGE_MASK]; " is 166.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The length of the statement  "                workspace[workspaceIndex + 8 * 0] = JpegUtils.RIGHT_SHIFT(tmp20 + tmp0' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 123.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The length of the statement  "                workspace[workspaceIndex + 8 * 15] = JpegUtils.RIGHT_SHIFT(tmp20 - tmp0' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 124.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The length of the statement  "                workspace[workspaceIndex + 8 * 1] = JpegUtils.RIGHT_SHIFT(tmp21 + tmp1' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 123.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The length of the statement  "                workspace[workspaceIndex + 8 * 14] = JpegUtils.RIGHT_SHIFT(tmp21 - tmp1' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 124.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The length of the statement  "                workspace[workspaceIndex + 8 * 2] = JpegUtils.RIGHT_SHIFT(tmp22 + tmp2' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 123.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The length of the statement  "                workspace[workspaceIndex + 8 * 13] = JpegUtils.RIGHT_SHIFT(tmp22 - tmp2' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 124.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The length of the statement  "                workspace[workspaceIndex + 8 * 3] = JpegUtils.RIGHT_SHIFT(tmp23 + tmp3' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 123.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The length of the statement  "                workspace[workspaceIndex + 8 * 12] = JpegUtils.RIGHT_SHIFT(tmp23 - tmp3' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 124.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The length of the statement  "                workspace[workspaceIndex + 8 * 4] = JpegUtils.RIGHT_SHIFT(tmp24 + tmp10' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 124.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The length of the statement  "                workspace[workspaceIndex + 8 * 11] = JpegUtils.RIGHT_SHIFT(tmp24 - tmp10' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 125.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The length of the statement  "                workspace[workspaceIndex + 8 * 5] = JpegUtils.RIGHT_SHIFT(tmp25 + tmp11' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 124.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The length of the statement  "                workspace[workspaceIndex + 8 * 10] = JpegUtils.RIGHT_SHIFT(tmp25 - tmp11' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 125.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The length of the statement  "                workspace[workspaceIndex + 8 * 6] = JpegUtils.RIGHT_SHIFT(tmp26 + tmp12' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 124.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The length of the statement  "                workspace[workspaceIndex + 8 * 9] = JpegUtils.RIGHT_SHIFT(tmp26 - tmp12' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 124.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The length of the statement  "                workspace[workspaceIndex + 8 * 7] = JpegUtils.RIGHT_SHIFT(tmp27 + tmp13' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 124.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The length of the statement  "                workspace[workspaceIndex + 8 * 8] = JpegUtils.RIGHT_SHIFT(tmp27 - tmp13' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 124.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The length of the statement  "                workspace[workspaceIndex + JpegConstants.DCTSIZE * 0] = JpegUtils.RIGHT_SHIFT(tmp10 + tmp3' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 143.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The length of the statement  "                workspace[workspaceIndex + JpegConstants.DCTSIZE * 7] = JpegUtils.RIGHT_SHIFT(tmp10 - tmp3' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 143.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The length of the statement  "                workspace[workspaceIndex + JpegConstants.DCTSIZE * 1] = JpegUtils.RIGHT_SHIFT(tmp11 + tmp2' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 143.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The length of the statement  "                workspace[workspaceIndex + JpegConstants.DCTSIZE * 6] = JpegUtils.RIGHT_SHIFT(tmp11 - tmp2' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 143.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The length of the statement  "                workspace[workspaceIndex + JpegConstants.DCTSIZE * 2] = JpegUtils.RIGHT_SHIFT(tmp12 + tmp1' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 143.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The length of the statement  "                workspace[workspaceIndex + JpegConstants.DCTSIZE * 5] = JpegUtils.RIGHT_SHIFT(tmp12 - tmp1' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 143.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The length of the statement  "                workspace[workspaceIndex + JpegConstants.DCTSIZE * 3] = JpegUtils.RIGHT_SHIFT(tmp13 + tmp0' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 143.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The length of the statement  "                workspace[workspaceIndex + JpegConstants.DCTSIZE * 4] = JpegUtils.RIGHT_SHIFT(tmp13 - tmp0' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 143.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The length of the statement  "                workspace[workspaceIndex + 8 * 0] = JpegUtils.RIGHT_SHIFT(tmp20 + tmp0' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 123.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The length of the statement  "                workspace[workspaceIndex + 8 * 15] = JpegUtils.RIGHT_SHIFT(tmp20 - tmp0' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 124.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The length of the statement  "                workspace[workspaceIndex + 8 * 1] = JpegUtils.RIGHT_SHIFT(tmp21 + tmp1' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 123.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The length of the statement  "                workspace[workspaceIndex + 8 * 14] = JpegUtils.RIGHT_SHIFT(tmp21 - tmp1' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 124.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The length of the statement  "                workspace[workspaceIndex + 8 * 2] = JpegUtils.RIGHT_SHIFT(tmp22 + tmp2' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 123.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The length of the statement  "                workspace[workspaceIndex + 8 * 13] = JpegUtils.RIGHT_SHIFT(tmp22 - tmp2' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 124.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The length of the statement  "                workspace[workspaceIndex + 8 * 3] = JpegUtils.RIGHT_SHIFT(tmp23 + tmp3' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 123.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The length of the statement  "                workspace[workspaceIndex + 8 * 12] = JpegUtils.RIGHT_SHIFT(tmp23 - tmp3' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 124.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The length of the statement  "                workspace[workspaceIndex + 8 * 4] = JpegUtils.RIGHT_SHIFT(tmp24 + tmp10' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 124.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The length of the statement  "                workspace[workspaceIndex + 8 * 11] = JpegUtils.RIGHT_SHIFT(tmp24 - tmp10' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 125.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The length of the statement  "                workspace[workspaceIndex + 8 * 5] = JpegUtils.RIGHT_SHIFT(tmp25 + tmp11' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 124.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The length of the statement  "                workspace[workspaceIndex + 8 * 10] = JpegUtils.RIGHT_SHIFT(tmp25 - tmp11' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 125.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The length of the statement  "                workspace[workspaceIndex + 8 * 6] = JpegUtils.RIGHT_SHIFT(tmp26 + tmp12' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 124.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The length of the statement  "                workspace[workspaceIndex + 8 * 9] = JpegUtils.RIGHT_SHIFT(tmp26 - tmp12' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 124.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The length of the statement  "                workspace[workspaceIndex + 8 * 7] = JpegUtils.RIGHT_SHIFT(tmp27 + tmp13' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 124.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The length of the statement  "                workspace[workspaceIndex + 8 * 8] = JpegUtils.RIGHT_SHIFT(tmp27 - tmp13' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS); " is 124.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dht,The length of the statement  "                m_cinfo.TRACEMS(2' J_MESSAGE_CODE.JTRC_HUFFBITS' bits[1]' bits[2]' bits[3]' bits[4]' bits[5]' bits[6]' bits[7]' bits[8]); " is 121.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dht,The length of the statement  "                m_cinfo.TRACEMS(2' J_MESSAGE_CODE.JTRC_HUFFBITS' bits[9]' bits[10]' bits[11]' bits[12]' bits[13]' bits[14]' bits[15]' bits[16]); " is 128.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,my_1pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_1pass_cquantizer.cs,quantize_ord_dither,The length of the statement  "                        output_buf[outRow][outIndex] += m_colorindex[ci][m_colorindexOffset[ci] + input_buf[in_row + row][inputIndex] + m_odither[ci][row_index][col_index]]; " is 149.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,my_1pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_1pass_cquantizer.cs,create_colorindex,The length of the statement  "                        m_colorindex[i][m_colorindexOffset[i] + JpegConstants.MAXJSAMPLE + j] = m_colorindex[i][m_colorindexOffset[i] + JpegConstants.MAXJSAMPLE]; " is 138.
Long Statement,BitMiracle.LibJpeg.Classic.Internal,my_upsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_upsampler.cs,upsample,The length of the statement  "            m_cinfo.m_cconvert.color_convert(m_color_buf' m_perComponentOffsets' m_next_row_out' output_buf' out_row_ctr' num_rows); " is 120.
Complex Conditional,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_write_marker,The conditional expression  "m_next_scanline != 0 || (m_global_state != JpegState.CSTATE_SCANNING && m_global_state != JpegState.CSTATE_RAW_OK && m_global_state != JpegState.CSTATE_WRCOEFS)"  is complex.
Complex Conditional,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_write_m_header,The conditional expression  "m_next_scanline != 0 || (m_global_state != JpegState.CSTATE_SCANNING && m_global_state != JpegState.CSTATE_RAW_OK && m_global_state != JpegState.CSTATE_WRCOEFS)"  is complex.
Complex Conditional,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jinit_c_master_control,The conditional expression  "!arith_code &&                  (m_progressive_mode || (block_size > 1 && block_size < JpegConstants.DCTSIZE))"  is complex.
Complex Conditional,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,initial_setup,The conditional expression  "m_comp_info[ci].H_samp_factor <= 0 || m_comp_info[ci].H_samp_factor > JpegConstants.MAX_SAMP_FACTOR ||                      m_comp_info[ci].V_samp_factor <= 0 || m_comp_info[ci].V_samp_factor > JpegConstants.MAX_SAMP_FACTOR"  is complex.
Complex Conditional,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,validate_script,The conditional expression  "Ss < 0 || Ss >= JpegConstants.DCTSIZE2 || Se < Ss || Se >= JpegConstants.DCTSIZE2 ||                          Ah < 0 || Ah > MAX_AH_AL || Al < 0 || Al > MAX_AH_AL"  is complex.
Complex Conditional,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,validate_script,The conditional expression  "Ss != 0 || Se != JpegConstants.DCTSIZE2 - 1 || Ah != 0 || Al != 0"  is complex.
Complex Conditional,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,use_merged_upsample,The conditional expression  "(m_jpeg_color_space != J_COLOR_SPACE.JCS_YCbCr &&                  m_jpeg_color_space != J_COLOR_SPACE.JCS_BG_YCC) ||                  m_num_components != 3 ||                  m_out_color_space != J_COLOR_SPACE.JCS_RGB ||                  m_out_color_components != JpegConstants.RGB_PIXELSIZE ||                  color_transform != J_COLOR_TRANSFORM.JCT_NONE"  is complex.
Complex Conditional,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,use_merged_upsample,The conditional expression  "m_comp_info[0].H_samp_factor != 2 || m_comp_info[1].H_samp_factor != 1 ||                  m_comp_info[2].H_samp_factor != 1 || m_comp_info[0].V_samp_factor > 2 ||                  m_comp_info[1].V_samp_factor != 1 || m_comp_info[2].V_samp_factor != 1"  is complex.
Complex Conditional,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,use_merged_upsample,The conditional expression  "m_comp_info[0].DCT_h_scaled_size != min_DCT_h_scaled_size ||                  m_comp_info[1].DCT_h_scaled_size != min_DCT_h_scaled_size ||                  m_comp_info[2].DCT_h_scaled_size != min_DCT_h_scaled_size ||                  m_comp_info[0].DCT_v_scaled_size != min_DCT_v_scaled_size ||                  m_comp_info[1].DCT_v_scaled_size != min_DCT_v_scaled_size ||                  m_comp_info[2].DCT_v_scaled_size != min_DCT_v_scaled_size"  is complex.
Complex Conditional,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,start_pass,The conditional expression  "m_cinfo.m_Ss != 0 || m_cinfo.m_Ah != 0 || m_cinfo.m_Al != 0 ||                      ((m_cinfo.is_baseline || m_cinfo.m_Se < JpegConstants.DCTSIZE2) &&                      m_cinfo.m_Se != m_cinfo.lim_Se)"  is complex.
Complex Conditional,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,smoothing_ok,The conditional expression  "qtable.quantval[0] == 0 || qtable.quantval[Q01_POS] == 0 ||                      qtable.quantval[Q10_POS] == 0 || qtable.quantval[Q20_POS] == 0 ||                      qtable.quantval[Q11_POS] == 0 || qtable.quantval[Q02_POS] == 0"  is complex.
Complex Conditional,BitMiracle.LibJpeg.Classic.Internal,jpeg_input_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_input_controller.cs,initial_setup,The conditional expression  "m_cinfo.Comp_info[ci].H_samp_factor <= 0 || m_cinfo.Comp_info[ci].H_samp_factor > JpegConstants.MAX_SAMP_FACTOR ||                      m_cinfo.Comp_info[ci].V_samp_factor <= 0 || m_cinfo.Comp_info[ci].V_samp_factor > JpegConstants.MAX_SAMP_FACTOR"  is complex.
Complex Conditional,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The conditional expression  "coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0"  is complex.
Complex Conditional,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The conditional expression  "workspace[workspaceIndex + 1] == 0 &&                      workspace[workspaceIndex + 2] == 0 &&                      workspace[workspaceIndex + 3] == 0 &&                      workspace[workspaceIndex + 4] == 0 &&                      workspace[workspaceIndex + 5] == 0 &&                      workspace[workspaceIndex + 6] == 0 &&                      workspace[workspaceIndex + 7] == 0"  is complex.
Complex Conditional,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The conditional expression  "coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0"  is complex.
Complex Conditional,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The conditional expression  "workspace[workspaceIndex + 1] == 0 &&                      workspace[workspaceIndex + 2] == 0 &&                      workspace[workspaceIndex + 3] == 0 &&                      workspace[workspaceIndex + 4] == 0 &&                      workspace[workspaceIndex + 5] == 0 &&                      workspace[workspaceIndex + 6] == 0 &&                      workspace[workspaceIndex + 7] == 0"  is complex.
Complex Conditional,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The conditional expression  "coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0"  is complex.
Complex Conditional,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The conditional expression  "coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0"  is complex.
Complex Conditional,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The conditional expression  "workspace[workspaceIndex + 1] == 0 &&                      workspace[workspaceIndex + 2] == 0 &&                      workspace[workspaceIndex + 3] == 0 &&                      workspace[workspaceIndex + 5] == 0 &&                      workspace[workspaceIndex + 6] == 0 &&                      workspace[workspaceIndex + 7] == 0"  is complex.
Complex Conditional,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The conditional expression  "coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0"  is complex.
Complex Conditional,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The conditional expression  "workspace[workspaceIndex + 1] == 0 &&                      workspace[workspaceIndex + 3] == 0 &&                      workspace[workspaceIndex + 5] == 0 &&                      workspace[workspaceIndex + 7] == 0"  is complex.
Complex Conditional,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The conditional expression  "coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0"  is complex.
Complex Conditional,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app0,The conditional expression  "datalen >= APP0_DATA_LEN &&                  data[0] == 0x4A &&                  data[1] == 0x46 &&                  data[2] == 0x49 &&                  data[3] == 0x46 &&                  data[4] == 0"  is complex.
Complex Conditional,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app0,The conditional expression  "datalen >= 6 && data[0] == 0x4A && data[1] == 0x46 && data[2] == 0x58 && data[3] == 0x58 && data[4] == 0"  is complex.
Complex Conditional,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app14,The conditional expression  "datalen >= APP14_DATA_LEN &&                  data[0] == 0x41 &&                  data[1] == 0x64 &&                  data[2] == 0x6F &&                  data[3] == 0x62 &&                  data[4] == 0x65"  is complex.
Complex Conditional,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_sos,The conditional expression  "length != (n * 2 + 6) || n > JpegConstants.MAX_COMPS_IN_SCAN ||                  (n == 0 && m_cinfo.m_progressive_mode)"  is complex.
Complex Conditional,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,write_frame_header,The conditional expression  "m_cinfo.arith_code || m_cinfo.m_progressive_mode ||                  m_cinfo.m_data_precision != 8 || m_cinfo.block_size != JpegConstants.DCTSIZE"  is complex.
Virtual Method Call from Constructor,BitMiracle.LibJpeg,Sample,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Sample.cs,Sample,The constructor "Sample" calls a virtual method "Read".
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,BeginWrite,The following statement contains a magic number: m_rowWidth % 4 != 0
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,putRgbRow,The following statement contains a magic number: int firstComponent = i * 3;
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,putRgbRow,The following statement contains a magic number: byte blue = row[firstComponent + 2];
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,putRgbRow,The following statement contains a magic number: m_pixels[firstComponent + 2][m_currentRow] = red;
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,putCmykRow,The following statement contains a magic number: int firstComponent = i * 4;
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,putCmykRow,The following statement contains a magic number: m_pixels[firstComponent][m_currentRow] = row[firstComponent + 2];
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,putCmykRow,The following statement contains a magic number: m_pixels[firstComponent + 2][m_currentRow] = row[firstComponent + 0];
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,putCmykRow,The following statement contains a magic number: m_pixels[firstComponent + 3][m_currentRow] = row[firstComponent + 3];
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,putCmykRow,The following statement contains a magic number: m_pixels[firstComponent + 3][m_currentRow] = row[firstComponent + 3];
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,writeHeader,The following statement contains a magic number: bits_per_pixel = 8;
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,writeHeader,The following statement contains a magic number: cmap_entries = 256;
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,writeHeader,The following statement contains a magic number: const int fileHeaderSize = 14;
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,writeHeader,The following statement contains a magic number: int paletteSize = cmap_entries * 4;
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,writeHeader,The following statement contains a magic number: writeColormap(cmap_entries' 4);
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,createBitmapFileHeader,The following statement contains a magic number: byte[] bmpfileheader = new byte[14];
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,createBitmapFileHeader,The following statement contains a magic number: PUT_4B(bmpfileheader' 2' fileSize);
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,createBitmapFileHeader,The following statement contains a magic number: PUT_4B(bmpfileheader' 10' offsetToPixels);
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,createBitmapInfoHeader,The following statement contains a magic number: byte[] bmpinfoheader = new byte[40];
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,fillBitmapInfoHeader,The following statement contains a magic number: PUT_4B(infoHeader' 4' m_parameters.Width);
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,fillBitmapInfoHeader,The following statement contains a magic number: PUT_4B(infoHeader' 8' m_parameters.Height);
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,fillBitmapInfoHeader,The following statement contains a magic number: PUT_2B(infoHeader' 12' 1);
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,fillBitmapInfoHeader,The following statement contains a magic number: PUT_2B(infoHeader' 14' bitsPerPixel);
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,fillBitmapInfoHeader,The following statement contains a magic number: PUT_4B(infoHeader' 24' m_parameters.DensityX * 100);
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,fillBitmapInfoHeader,The following statement contains a magic number: PUT_4B(infoHeader' 24' m_parameters.DensityX * 100);
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,fillBitmapInfoHeader,The following statement contains a magic number: PUT_4B(infoHeader' 28' m_parameters.DensityY * 100);
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,fillBitmapInfoHeader,The following statement contains a magic number: PUT_4B(infoHeader' 28' m_parameters.DensityY * 100);
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,fillBitmapInfoHeader,The following statement contains a magic number: PUT_2B(infoHeader' 32' cmap_entries);
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,createBitmapV4InfoHeader,The following statement contains a magic number: byte[] infoHeader = new byte[40 + 68];
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,createBitmapV4InfoHeader,The following statement contains a magic number: byte[] infoHeader = new byte[40 + 68];
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,createBitmapV4InfoHeader,The following statement contains a magic number: PUT_4B(infoHeader' 56' 0x02);
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,writeColormap,The following statement contains a magic number: m_output.WriteByte(colormap[2][i]);
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,writeColormap,The following statement contains a magic number: map_entry_size == 4
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,writeColormap,The following statement contains a magic number: m_parameters.ComponentsPerSample == 3
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,writeColormap,The following statement contains a magic number: map_entry_size == 4
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,PUT_2B,The following statement contains a magic number: array[offset + 1] = (byte)(((value) >> 8) & 0xFF);
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,PUT_4B,The following statement contains a magic number: array[offset + 1] = (byte)(((value) >> 8) & 0xFF);
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,PUT_4B,The following statement contains a magic number: array[offset + 2] = (byte)(((value) >> 16) & 0xFF);
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,PUT_4B,The following statement contains a magic number: array[offset + 2] = (byte)(((value) >> 16) & 0xFF);
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,PUT_4B,The following statement contains a magic number: array[offset + 3] = (byte)(((value) >> 24) & 0xFF);
Magic Number,BitMiracle.LibJpeg,BitmapDestination,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitmapDestination.cs,PUT_4B,The following statement contains a magic number: array[offset + 3] = (byte)(((value) >> 24) & 0xFF);
Magic Number,BitMiracle.LibJpeg,BitStream,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitStream.cs,read,The following statement contains a magic number: bitsCount < 0 || bitsCount > 32
Magic Number,BitMiracle.LibJpeg,BitStream,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitStream.cs,read,The following statement contains a magic number: bitsRead += 8;
Magic Number,BitMiracle.LibJpeg,BitStream,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitStream.cs,read,The following statement contains a magic number: m_positionInByte = (m_positionInByte + bitsCount) % 8;
Magic Number,BitMiracle.LibJpeg,BitStream,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitStream.cs,read,The following statement contains a magic number: bitsCount < 32
Magic Number,BitMiracle.LibJpeg,DecompressorToJpegImage,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\DecompressorToJpegImage.cs,SetImageAttributes,The following statement contains a magic number: m_jpegImage.BitsPerComponent = 8;
Magic Number,BitMiracle.LibJpeg,JpegImage,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\JpegImage.cs,isCompressed,The following statement contains a magic number: imageData.Length <= 2
Magic Number,BitMiracle.LibJpeg,JpegImage,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\JpegImage.cs,processPixelFormat,The following statement contains a magic number: m_bitsPerComponent = 16;
Magic Number,BitMiracle.LibJpeg,JpegImage,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\JpegImage.cs,processPixelFormat,The following statement contains a magic number: m_bitsPerComponent = 8;
Magic Number,BitMiracle.LibJpeg,JpegImage,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\JpegImage.cs,processPixelFormat,The following statement contains a magic number: m_componentsPerSample = 4;
Magic Number,BitMiracle.LibJpeg,JpegImage,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\JpegImage.cs,processPixelFormat,The following statement contains a magic number: pixelSizeByte == 32 && formatIndexByte == 15
Magic Number,BitMiracle.LibJpeg,JpegImage,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\JpegImage.cs,processPixelFormat,The following statement contains a magic number: pixelSizeByte == 32 && formatIndexByte == 15
Magic Number,BitMiracle.LibJpeg,JpegImage,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\JpegImage.cs,processPixelFormat,The following statement contains a magic number: m_bitsPerComponent = 8;
Magic Number,BitMiracle.LibJpeg,JpegImage,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\JpegImage.cs,processPixelFormat,The following statement contains a magic number: m_componentsPerSample = 3;
Magic Number,BitMiracle.LibJpeg,JpegImage,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\JpegImage.cs,processPixelFormat,The following statement contains a magic number: m_bitsPerComponent = 6;
Magic Number,BitMiracle.LibJpeg,JpegImage,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\JpegImage.cs,processPixelFormat,The following statement contains a magic number: pixelSizeByte == 16
Magic Number,BitMiracle.LibJpeg,JpegImage,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\JpegImage.cs,fillSamplesFromBitmap,The following statement contains a magic number: short[] samples = new short[Width * 3];
Magic Number,BitMiracle.LibJpeg,JpegImage,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\JpegImage.cs,fillSamplesFromBitmap,The following statement contains a magic number: samples[x * 3] = color.R;
Magic Number,BitMiracle.LibJpeg,JpegImage,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\JpegImage.cs,fillSamplesFromBitmap,The following statement contains a magic number: samples[x * 3 + 1] = color.G;
Magic Number,BitMiracle.LibJpeg,JpegImage,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\JpegImage.cs,fillSamplesFromBitmap,The following statement contains a magic number: samples[x * 3 + 2] = color.B;
Magic Number,BitMiracle.LibJpeg,JpegImage,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\JpegImage.cs,fillSamplesFromBitmap,The following statement contains a magic number: samples[x * 3 + 2] = color.B;
Magic Number,BitMiracle.LibJpeg,Sample,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Sample.cs,Sample,The following statement contains a magic number: bitsPerComponent <= 0 || bitsPerComponent > 16
Magic Number,BitMiracle.LibJpeg,Sample,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Sample.cs,Sample,The following statement contains a magic number: componentCount <= 0 || componentCount > 5
Magic Number,BitMiracle.LibJpeg,Sample,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Sample.cs,Sample,The following statement contains a magic number: components.Length == 0 || components.Length > 5
Magic Number,BitMiracle.LibJpeg,Sample,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Sample.cs,Sample,The following statement contains a magic number: bitsPerComponent <= 0 || bitsPerComponent > 16
Magic Number,BitMiracle.LibJpeg,SampleRow,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\SampleRow.cs,SampleRow,The following statement contains a magic number: bitsPerComponent <= 0 || bitsPerComponent > 16
Magic Number,BitMiracle.LibJpeg,SampleRow,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\SampleRow.cs,SampleRow,The following statement contains a magic number: componentsPerSample <= 0 || componentsPerSample > 5
Magic Number,BitMiracle.LibJpeg,SampleRow,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\SampleRow.cs,SampleRow,The following statement contains a magic number: bitsPerComponent <= 0 || bitsPerComponent > 16
Magic Number,BitMiracle.LibJpeg,SampleRow,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\SampleRow.cs,SampleRow,The following statement contains a magic number: componentsPerSample <= 0 || componentsPerSample > 5
Magic Number,BitMiracle.LibJpeg,Utils,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Utils.cs,CopyStream,The following statement contains a magic number: byte[] block = new byte[2048];
Magic Number,BitMiracle.LibJpeg,Utils,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Utils.cs,CopyStream,The following statement contains a magic number: int bytesRead = stream.Read(block' 0' 2048);
Magic Number,BitMiracle.LibJpeg,Utils,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Utils.cs,CopyStream,The following statement contains a magic number: bytesRead < 2048
Magic Number,BitMiracle.LibJpeg,Utils,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Utils.cs,CMYK2RGB,The following statement contains a magic number: C = c / 255.0f;
Magic Number,BitMiracle.LibJpeg,Utils,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Utils.cs,CMYK2RGB,The following statement contains a magic number: M = m / 255.0f;
Magic Number,BitMiracle.LibJpeg,Utils,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Utils.cs,CMYK2RGB,The following statement contains a magic number: Y = y / 255.0f;
Magic Number,BitMiracle.LibJpeg,Utils,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Utils.cs,CMYK2RGB,The following statement contains a magic number: K = k / 255.0f;
Magic Number,BitMiracle.LibJpeg,Utils,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Utils.cs,CMYK2RGB,The following statement contains a magic number: R = (1.0f - R) * 255.0f + 0.5f;
Magic Number,BitMiracle.LibJpeg,Utils,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Utils.cs,CMYK2RGB,The following statement contains a magic number: R = (1.0f - R) * 255.0f + 0.5f;
Magic Number,BitMiracle.LibJpeg,Utils,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Utils.cs,CMYK2RGB,The following statement contains a magic number: G = (1.0f - G) * 255.0f + 0.5f;
Magic Number,BitMiracle.LibJpeg,Utils,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Utils.cs,CMYK2RGB,The following statement contains a magic number: G = (1.0f - G) * 255.0f + 0.5f;
Magic Number,BitMiracle.LibJpeg,Utils,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Utils.cs,CMYK2RGB,The following statement contains a magic number: B = (1.0f - B) * 255.0f + 0.5f;
Magic Number,BitMiracle.LibJpeg,Utils,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Utils.cs,CMYK2RGB,The following statement contains a magic number: B = (1.0f - B) * 255.0f + 0.5f;
Magic Number,BitMiracle.LibJpeg,Utils,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Utils.cs,CMYK2RGB,The following statement contains a magic number: red = (byte)(R * 255);
Magic Number,BitMiracle.LibJpeg,Utils,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Utils.cs,CMYK2RGB,The following statement contains a magic number: green = (byte)(G * 255);
Magic Number,BitMiracle.LibJpeg,Utils,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Utils.cs,CMYK2RGB,The following statement contains a magic number: blue = (byte)(B * 255);
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_set_defaults,The following statement contains a magic number: jpeg_set_quality(75' true);
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_set_defaults,The following statement contains a magic number: arith_code = (m_data_precision > 8);
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_set_colorspace,The following statement contains a magic number: switch (colorspace)              {                  case J_COLOR_SPACE.JCS_UNKNOWN:                      m_num_components = m_input_components;                      if (m_num_components < 1 || m_num_components > JpegConstants.MAX_COMPONENTS)                          ERREXIT(J_MESSAGE_CODE.JERR_COMPONENT_COUNT' m_num_components' JpegConstants.MAX_COMPONENTS);                        for (ci = 0; ci < m_num_components; ci++)                          jpeg_set_colorspace_SET_COMP(ci' ci' 1' 1' 0' 0' 0);                        break;                    case J_COLOR_SPACE.JCS_GRAYSCALE:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 1;                      /* JFIF specifies component ID 1 */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_RGB:                      m_write_Adobe_marker = true; /* write Adobe marker to flag RGB */                      m_num_components = 3;                      jpeg_set_colorspace_SET_COMP(0' 0x52 /* 'R' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x47 /* 'G' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x42 /* 'B' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 3;                      /* JFIF specifies component IDs 1'2'3 */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      break;                    case J_COLOR_SPACE.JCS_CMYK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag CMYK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x43 /* 'C' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x4D /* 'M' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x59 /* 'Y' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(3' 0x4B /* 'K' */' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_YCCK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag YCCK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(3' 0x04' 2' 2' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_BG_RGB:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal R/G/B component IDs */                      jpeg_set_colorspace_SET_COMP(0' 0x72 /* 'r' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x67 /* 'g' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x62 /* 'b' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_BG_YCC:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal Cb/Cr component IDs */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x22' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x23' 1' 1' 1' 1' 1);                      break;                    default:                      ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_set_colorspace,The following statement contains a magic number: switch (colorspace)              {                  case J_COLOR_SPACE.JCS_UNKNOWN:                      m_num_components = m_input_components;                      if (m_num_components < 1 || m_num_components > JpegConstants.MAX_COMPONENTS)                          ERREXIT(J_MESSAGE_CODE.JERR_COMPONENT_COUNT' m_num_components' JpegConstants.MAX_COMPONENTS);                        for (ci = 0; ci < m_num_components; ci++)                          jpeg_set_colorspace_SET_COMP(ci' ci' 1' 1' 0' 0' 0);                        break;                    case J_COLOR_SPACE.JCS_GRAYSCALE:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 1;                      /* JFIF specifies component ID 1 */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_RGB:                      m_write_Adobe_marker = true; /* write Adobe marker to flag RGB */                      m_num_components = 3;                      jpeg_set_colorspace_SET_COMP(0' 0x52 /* 'R' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x47 /* 'G' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x42 /* 'B' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 3;                      /* JFIF specifies component IDs 1'2'3 */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      break;                    case J_COLOR_SPACE.JCS_CMYK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag CMYK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x43 /* 'C' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x4D /* 'M' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x59 /* 'Y' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(3' 0x4B /* 'K' */' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_YCCK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag YCCK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(3' 0x04' 2' 2' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_BG_RGB:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal R/G/B component IDs */                      jpeg_set_colorspace_SET_COMP(0' 0x72 /* 'r' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x67 /* 'g' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x62 /* 'b' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_BG_YCC:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal Cb/Cr component IDs */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x22' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x23' 1' 1' 1' 1' 1);                      break;                    default:                      ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_set_colorspace,The following statement contains a magic number: switch (colorspace)              {                  case J_COLOR_SPACE.JCS_UNKNOWN:                      m_num_components = m_input_components;                      if (m_num_components < 1 || m_num_components > JpegConstants.MAX_COMPONENTS)                          ERREXIT(J_MESSAGE_CODE.JERR_COMPONENT_COUNT' m_num_components' JpegConstants.MAX_COMPONENTS);                        for (ci = 0; ci < m_num_components; ci++)                          jpeg_set_colorspace_SET_COMP(ci' ci' 1' 1' 0' 0' 0);                        break;                    case J_COLOR_SPACE.JCS_GRAYSCALE:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 1;                      /* JFIF specifies component ID 1 */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_RGB:                      m_write_Adobe_marker = true; /* write Adobe marker to flag RGB */                      m_num_components = 3;                      jpeg_set_colorspace_SET_COMP(0' 0x52 /* 'R' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x47 /* 'G' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x42 /* 'B' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 3;                      /* JFIF specifies component IDs 1'2'3 */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      break;                    case J_COLOR_SPACE.JCS_CMYK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag CMYK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x43 /* 'C' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x4D /* 'M' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x59 /* 'Y' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(3' 0x4B /* 'K' */' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_YCCK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag YCCK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(3' 0x04' 2' 2' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_BG_RGB:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal R/G/B component IDs */                      jpeg_set_colorspace_SET_COMP(0' 0x72 /* 'r' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x67 /* 'g' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x62 /* 'b' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_BG_YCC:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal Cb/Cr component IDs */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x22' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x23' 1' 1' 1' 1' 1);                      break;                    default:                      ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_set_colorspace,The following statement contains a magic number: switch (colorspace)              {                  case J_COLOR_SPACE.JCS_UNKNOWN:                      m_num_components = m_input_components;                      if (m_num_components < 1 || m_num_components > JpegConstants.MAX_COMPONENTS)                          ERREXIT(J_MESSAGE_CODE.JERR_COMPONENT_COUNT' m_num_components' JpegConstants.MAX_COMPONENTS);                        for (ci = 0; ci < m_num_components; ci++)                          jpeg_set_colorspace_SET_COMP(ci' ci' 1' 1' 0' 0' 0);                        break;                    case J_COLOR_SPACE.JCS_GRAYSCALE:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 1;                      /* JFIF specifies component ID 1 */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_RGB:                      m_write_Adobe_marker = true; /* write Adobe marker to flag RGB */                      m_num_components = 3;                      jpeg_set_colorspace_SET_COMP(0' 0x52 /* 'R' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x47 /* 'G' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x42 /* 'B' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 3;                      /* JFIF specifies component IDs 1'2'3 */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      break;                    case J_COLOR_SPACE.JCS_CMYK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag CMYK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x43 /* 'C' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x4D /* 'M' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x59 /* 'Y' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(3' 0x4B /* 'K' */' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_YCCK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag YCCK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(3' 0x04' 2' 2' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_BG_RGB:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal R/G/B component IDs */                      jpeg_set_colorspace_SET_COMP(0' 0x72 /* 'r' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x67 /* 'g' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x62 /* 'b' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_BG_YCC:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal Cb/Cr component IDs */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x22' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x23' 1' 1' 1' 1' 1);                      break;                    default:                      ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_set_colorspace,The following statement contains a magic number: switch (colorspace)              {                  case J_COLOR_SPACE.JCS_UNKNOWN:                      m_num_components = m_input_components;                      if (m_num_components < 1 || m_num_components > JpegConstants.MAX_COMPONENTS)                          ERREXIT(J_MESSAGE_CODE.JERR_COMPONENT_COUNT' m_num_components' JpegConstants.MAX_COMPONENTS);                        for (ci = 0; ci < m_num_components; ci++)                          jpeg_set_colorspace_SET_COMP(ci' ci' 1' 1' 0' 0' 0);                        break;                    case J_COLOR_SPACE.JCS_GRAYSCALE:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 1;                      /* JFIF specifies component ID 1 */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_RGB:                      m_write_Adobe_marker = true; /* write Adobe marker to flag RGB */                      m_num_components = 3;                      jpeg_set_colorspace_SET_COMP(0' 0x52 /* 'R' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x47 /* 'G' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x42 /* 'B' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 3;                      /* JFIF specifies component IDs 1'2'3 */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      break;                    case J_COLOR_SPACE.JCS_CMYK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag CMYK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x43 /* 'C' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x4D /* 'M' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x59 /* 'Y' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(3' 0x4B /* 'K' */' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_YCCK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag YCCK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(3' 0x04' 2' 2' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_BG_RGB:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal R/G/B component IDs */                      jpeg_set_colorspace_SET_COMP(0' 0x72 /* 'r' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x67 /* 'g' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x62 /* 'b' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_BG_YCC:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal Cb/Cr component IDs */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x22' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x23' 1' 1' 1' 1' 1);                      break;                    default:                      ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_set_colorspace,The following statement contains a magic number: switch (colorspace)              {                  case J_COLOR_SPACE.JCS_UNKNOWN:                      m_num_components = m_input_components;                      if (m_num_components < 1 || m_num_components > JpegConstants.MAX_COMPONENTS)                          ERREXIT(J_MESSAGE_CODE.JERR_COMPONENT_COUNT' m_num_components' JpegConstants.MAX_COMPONENTS);                        for (ci = 0; ci < m_num_components; ci++)                          jpeg_set_colorspace_SET_COMP(ci' ci' 1' 1' 0' 0' 0);                        break;                    case J_COLOR_SPACE.JCS_GRAYSCALE:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 1;                      /* JFIF specifies component ID 1 */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_RGB:                      m_write_Adobe_marker = true; /* write Adobe marker to flag RGB */                      m_num_components = 3;                      jpeg_set_colorspace_SET_COMP(0' 0x52 /* 'R' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x47 /* 'G' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x42 /* 'B' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 3;                      /* JFIF specifies component IDs 1'2'3 */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      break;                    case J_COLOR_SPACE.JCS_CMYK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag CMYK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x43 /* 'C' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x4D /* 'M' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x59 /* 'Y' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(3' 0x4B /* 'K' */' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_YCCK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag YCCK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(3' 0x04' 2' 2' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_BG_RGB:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal R/G/B component IDs */                      jpeg_set_colorspace_SET_COMP(0' 0x72 /* 'r' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x67 /* 'g' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x62 /* 'b' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_BG_YCC:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal Cb/Cr component IDs */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x22' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x23' 1' 1' 1' 1' 1);                      break;                    default:                      ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_set_colorspace,The following statement contains a magic number: switch (colorspace)              {                  case J_COLOR_SPACE.JCS_UNKNOWN:                      m_num_components = m_input_components;                      if (m_num_components < 1 || m_num_components > JpegConstants.MAX_COMPONENTS)                          ERREXIT(J_MESSAGE_CODE.JERR_COMPONENT_COUNT' m_num_components' JpegConstants.MAX_COMPONENTS);                        for (ci = 0; ci < m_num_components; ci++)                          jpeg_set_colorspace_SET_COMP(ci' ci' 1' 1' 0' 0' 0);                        break;                    case J_COLOR_SPACE.JCS_GRAYSCALE:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 1;                      /* JFIF specifies component ID 1 */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_RGB:                      m_write_Adobe_marker = true; /* write Adobe marker to flag RGB */                      m_num_components = 3;                      jpeg_set_colorspace_SET_COMP(0' 0x52 /* 'R' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x47 /* 'G' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x42 /* 'B' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 3;                      /* JFIF specifies component IDs 1'2'3 */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      break;                    case J_COLOR_SPACE.JCS_CMYK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag CMYK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x43 /* 'C' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x4D /* 'M' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x59 /* 'Y' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(3' 0x4B /* 'K' */' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_YCCK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag YCCK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(3' 0x04' 2' 2' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_BG_RGB:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal R/G/B component IDs */                      jpeg_set_colorspace_SET_COMP(0' 0x72 /* 'r' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x67 /* 'g' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x62 /* 'b' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_BG_YCC:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal Cb/Cr component IDs */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x22' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x23' 1' 1' 1' 1' 1);                      break;                    default:                      ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_set_colorspace,The following statement contains a magic number: switch (colorspace)              {                  case J_COLOR_SPACE.JCS_UNKNOWN:                      m_num_components = m_input_components;                      if (m_num_components < 1 || m_num_components > JpegConstants.MAX_COMPONENTS)                          ERREXIT(J_MESSAGE_CODE.JERR_COMPONENT_COUNT' m_num_components' JpegConstants.MAX_COMPONENTS);                        for (ci = 0; ci < m_num_components; ci++)                          jpeg_set_colorspace_SET_COMP(ci' ci' 1' 1' 0' 0' 0);                        break;                    case J_COLOR_SPACE.JCS_GRAYSCALE:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 1;                      /* JFIF specifies component ID 1 */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_RGB:                      m_write_Adobe_marker = true; /* write Adobe marker to flag RGB */                      m_num_components = 3;                      jpeg_set_colorspace_SET_COMP(0' 0x52 /* 'R' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x47 /* 'G' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x42 /* 'B' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 3;                      /* JFIF specifies component IDs 1'2'3 */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      break;                    case J_COLOR_SPACE.JCS_CMYK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag CMYK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x43 /* 'C' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x4D /* 'M' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x59 /* 'Y' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(3' 0x4B /* 'K' */' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_YCCK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag YCCK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(3' 0x04' 2' 2' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_BG_RGB:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal R/G/B component IDs */                      jpeg_set_colorspace_SET_COMP(0' 0x72 /* 'r' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x67 /* 'g' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x62 /* 'b' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_BG_YCC:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal Cb/Cr component IDs */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x22' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x23' 1' 1' 1' 1' 1);                      break;                    default:                      ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_set_colorspace,The following statement contains a magic number: switch (colorspace)              {                  case J_COLOR_SPACE.JCS_UNKNOWN:                      m_num_components = m_input_components;                      if (m_num_components < 1 || m_num_components > JpegConstants.MAX_COMPONENTS)                          ERREXIT(J_MESSAGE_CODE.JERR_COMPONENT_COUNT' m_num_components' JpegConstants.MAX_COMPONENTS);                        for (ci = 0; ci < m_num_components; ci++)                          jpeg_set_colorspace_SET_COMP(ci' ci' 1' 1' 0' 0' 0);                        break;                    case J_COLOR_SPACE.JCS_GRAYSCALE:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 1;                      /* JFIF specifies component ID 1 */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_RGB:                      m_write_Adobe_marker = true; /* write Adobe marker to flag RGB */                      m_num_components = 3;                      jpeg_set_colorspace_SET_COMP(0' 0x52 /* 'R' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x47 /* 'G' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x42 /* 'B' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 3;                      /* JFIF specifies component IDs 1'2'3 */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      break;                    case J_COLOR_SPACE.JCS_CMYK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag CMYK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x43 /* 'C' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x4D /* 'M' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x59 /* 'Y' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(3' 0x4B /* 'K' */' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_YCCK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag YCCK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(3' 0x04' 2' 2' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_BG_RGB:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal R/G/B component IDs */                      jpeg_set_colorspace_SET_COMP(0' 0x72 /* 'r' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x67 /* 'g' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x62 /* 'b' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_BG_YCC:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal Cb/Cr component IDs */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x22' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x23' 1' 1' 1' 1' 1);                      break;                    default:                      ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_set_colorspace,The following statement contains a magic number: switch (colorspace)              {                  case J_COLOR_SPACE.JCS_UNKNOWN:                      m_num_components = m_input_components;                      if (m_num_components < 1 || m_num_components > JpegConstants.MAX_COMPONENTS)                          ERREXIT(J_MESSAGE_CODE.JERR_COMPONENT_COUNT' m_num_components' JpegConstants.MAX_COMPONENTS);                        for (ci = 0; ci < m_num_components; ci++)                          jpeg_set_colorspace_SET_COMP(ci' ci' 1' 1' 0' 0' 0);                        break;                    case J_COLOR_SPACE.JCS_GRAYSCALE:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 1;                      /* JFIF specifies component ID 1 */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_RGB:                      m_write_Adobe_marker = true; /* write Adobe marker to flag RGB */                      m_num_components = 3;                      jpeg_set_colorspace_SET_COMP(0' 0x52 /* 'R' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x47 /* 'G' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x42 /* 'B' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 3;                      /* JFIF specifies component IDs 1'2'3 */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      break;                    case J_COLOR_SPACE.JCS_CMYK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag CMYK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x43 /* 'C' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x4D /* 'M' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x59 /* 'Y' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(3' 0x4B /* 'K' */' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_YCCK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag YCCK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(3' 0x04' 2' 2' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_BG_RGB:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal R/G/B component IDs */                      jpeg_set_colorspace_SET_COMP(0' 0x72 /* 'r' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x67 /* 'g' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x62 /* 'b' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_BG_YCC:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal Cb/Cr component IDs */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x22' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x23' 1' 1' 1' 1' 1);                      break;                    default:                      ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_set_colorspace,The following statement contains a magic number: switch (colorspace)              {                  case J_COLOR_SPACE.JCS_UNKNOWN:                      m_num_components = m_input_components;                      if (m_num_components < 1 || m_num_components > JpegConstants.MAX_COMPONENTS)                          ERREXIT(J_MESSAGE_CODE.JERR_COMPONENT_COUNT' m_num_components' JpegConstants.MAX_COMPONENTS);                        for (ci = 0; ci < m_num_components; ci++)                          jpeg_set_colorspace_SET_COMP(ci' ci' 1' 1' 0' 0' 0);                        break;                    case J_COLOR_SPACE.JCS_GRAYSCALE:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 1;                      /* JFIF specifies component ID 1 */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_RGB:                      m_write_Adobe_marker = true; /* write Adobe marker to flag RGB */                      m_num_components = 3;                      jpeg_set_colorspace_SET_COMP(0' 0x52 /* 'R' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x47 /* 'G' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x42 /* 'B' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 3;                      /* JFIF specifies component IDs 1'2'3 */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      break;                    case J_COLOR_SPACE.JCS_CMYK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag CMYK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x43 /* 'C' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x4D /* 'M' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x59 /* 'Y' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(3' 0x4B /* 'K' */' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_YCCK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag YCCK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(3' 0x04' 2' 2' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_BG_RGB:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal R/G/B component IDs */                      jpeg_set_colorspace_SET_COMP(0' 0x72 /* 'r' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x67 /* 'g' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x62 /* 'b' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_BG_YCC:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal Cb/Cr component IDs */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x22' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x23' 1' 1' 1' 1' 1);                      break;                    default:                      ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_set_colorspace,The following statement contains a magic number: switch (colorspace)              {                  case J_COLOR_SPACE.JCS_UNKNOWN:                      m_num_components = m_input_components;                      if (m_num_components < 1 || m_num_components > JpegConstants.MAX_COMPONENTS)                          ERREXIT(J_MESSAGE_CODE.JERR_COMPONENT_COUNT' m_num_components' JpegConstants.MAX_COMPONENTS);                        for (ci = 0; ci < m_num_components; ci++)                          jpeg_set_colorspace_SET_COMP(ci' ci' 1' 1' 0' 0' 0);                        break;                    case J_COLOR_SPACE.JCS_GRAYSCALE:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 1;                      /* JFIF specifies component ID 1 */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_RGB:                      m_write_Adobe_marker = true; /* write Adobe marker to flag RGB */                      m_num_components = 3;                      jpeg_set_colorspace_SET_COMP(0' 0x52 /* 'R' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x47 /* 'G' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x42 /* 'B' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 3;                      /* JFIF specifies component IDs 1'2'3 */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      break;                    case J_COLOR_SPACE.JCS_CMYK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag CMYK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x43 /* 'C' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x4D /* 'M' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x59 /* 'Y' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(3' 0x4B /* 'K' */' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_YCCK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag YCCK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(3' 0x04' 2' 2' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_BG_RGB:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal R/G/B component IDs */                      jpeg_set_colorspace_SET_COMP(0' 0x72 /* 'r' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x67 /* 'g' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x62 /* 'b' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_BG_YCC:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal Cb/Cr component IDs */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x22' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x23' 1' 1' 1' 1' 1);                      break;                    default:                      ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_set_colorspace,The following statement contains a magic number: switch (colorspace)              {                  case J_COLOR_SPACE.JCS_UNKNOWN:                      m_num_components = m_input_components;                      if (m_num_components < 1 || m_num_components > JpegConstants.MAX_COMPONENTS)                          ERREXIT(J_MESSAGE_CODE.JERR_COMPONENT_COUNT' m_num_components' JpegConstants.MAX_COMPONENTS);                        for (ci = 0; ci < m_num_components; ci++)                          jpeg_set_colorspace_SET_COMP(ci' ci' 1' 1' 0' 0' 0);                        break;                    case J_COLOR_SPACE.JCS_GRAYSCALE:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 1;                      /* JFIF specifies component ID 1 */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_RGB:                      m_write_Adobe_marker = true; /* write Adobe marker to flag RGB */                      m_num_components = 3;                      jpeg_set_colorspace_SET_COMP(0' 0x52 /* 'R' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x47 /* 'G' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x42 /* 'B' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 3;                      /* JFIF specifies component IDs 1'2'3 */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      break;                    case J_COLOR_SPACE.JCS_CMYK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag CMYK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x43 /* 'C' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x4D /* 'M' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x59 /* 'Y' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(3' 0x4B /* 'K' */' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_YCCK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag YCCK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(3' 0x04' 2' 2' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_BG_RGB:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal R/G/B component IDs */                      jpeg_set_colorspace_SET_COMP(0' 0x72 /* 'r' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x67 /* 'g' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x62 /* 'b' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_BG_YCC:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal Cb/Cr component IDs */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x22' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x23' 1' 1' 1' 1' 1);                      break;                    default:                      ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_set_colorspace,The following statement contains a magic number: switch (colorspace)              {                  case J_COLOR_SPACE.JCS_UNKNOWN:                      m_num_components = m_input_components;                      if (m_num_components < 1 || m_num_components > JpegConstants.MAX_COMPONENTS)                          ERREXIT(J_MESSAGE_CODE.JERR_COMPONENT_COUNT' m_num_components' JpegConstants.MAX_COMPONENTS);                        for (ci = 0; ci < m_num_components; ci++)                          jpeg_set_colorspace_SET_COMP(ci' ci' 1' 1' 0' 0' 0);                        break;                    case J_COLOR_SPACE.JCS_GRAYSCALE:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 1;                      /* JFIF specifies component ID 1 */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_RGB:                      m_write_Adobe_marker = true; /* write Adobe marker to flag RGB */                      m_num_components = 3;                      jpeg_set_colorspace_SET_COMP(0' 0x52 /* 'R' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x47 /* 'G' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x42 /* 'B' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 3;                      /* JFIF specifies component IDs 1'2'3 */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      break;                    case J_COLOR_SPACE.JCS_CMYK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag CMYK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x43 /* 'C' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x4D /* 'M' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x59 /* 'Y' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(3' 0x4B /* 'K' */' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_YCCK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag YCCK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(3' 0x04' 2' 2' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_BG_RGB:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal R/G/B component IDs */                      jpeg_set_colorspace_SET_COMP(0' 0x72 /* 'r' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x67 /* 'g' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x62 /* 'b' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_BG_YCC:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal Cb/Cr component IDs */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x22' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x23' 1' 1' 1' 1' 1);                      break;                    default:                      ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_set_colorspace,The following statement contains a magic number: switch (colorspace)              {                  case J_COLOR_SPACE.JCS_UNKNOWN:                      m_num_components = m_input_components;                      if (m_num_components < 1 || m_num_components > JpegConstants.MAX_COMPONENTS)                          ERREXIT(J_MESSAGE_CODE.JERR_COMPONENT_COUNT' m_num_components' JpegConstants.MAX_COMPONENTS);                        for (ci = 0; ci < m_num_components; ci++)                          jpeg_set_colorspace_SET_COMP(ci' ci' 1' 1' 0' 0' 0);                        break;                    case J_COLOR_SPACE.JCS_GRAYSCALE:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 1;                      /* JFIF specifies component ID 1 */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_RGB:                      m_write_Adobe_marker = true; /* write Adobe marker to flag RGB */                      m_num_components = 3;                      jpeg_set_colorspace_SET_COMP(0' 0x52 /* 'R' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x47 /* 'G' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x42 /* 'B' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 3;                      /* JFIF specifies component IDs 1'2'3 */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      break;                    case J_COLOR_SPACE.JCS_CMYK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag CMYK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x43 /* 'C' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x4D /* 'M' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x59 /* 'Y' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(3' 0x4B /* 'K' */' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_YCCK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag YCCK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(3' 0x04' 2' 2' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_BG_RGB:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal R/G/B component IDs */                      jpeg_set_colorspace_SET_COMP(0' 0x72 /* 'r' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x67 /* 'g' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x62 /* 'b' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_BG_YCC:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal Cb/Cr component IDs */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x22' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x23' 1' 1' 1' 1' 1);                      break;                    default:                      ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_set_colorspace,The following statement contains a magic number: switch (colorspace)              {                  case J_COLOR_SPACE.JCS_UNKNOWN:                      m_num_components = m_input_components;                      if (m_num_components < 1 || m_num_components > JpegConstants.MAX_COMPONENTS)                          ERREXIT(J_MESSAGE_CODE.JERR_COMPONENT_COUNT' m_num_components' JpegConstants.MAX_COMPONENTS);                        for (ci = 0; ci < m_num_components; ci++)                          jpeg_set_colorspace_SET_COMP(ci' ci' 1' 1' 0' 0' 0);                        break;                    case J_COLOR_SPACE.JCS_GRAYSCALE:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 1;                      /* JFIF specifies component ID 1 */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_RGB:                      m_write_Adobe_marker = true; /* write Adobe marker to flag RGB */                      m_num_components = 3;                      jpeg_set_colorspace_SET_COMP(0' 0x52 /* 'R' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x47 /* 'G' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x42 /* 'B' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 3;                      /* JFIF specifies component IDs 1'2'3 */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      break;                    case J_COLOR_SPACE.JCS_CMYK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag CMYK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x43 /* 'C' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x4D /* 'M' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x59 /* 'Y' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(3' 0x4B /* 'K' */' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_YCCK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag YCCK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(3' 0x04' 2' 2' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_BG_RGB:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal R/G/B component IDs */                      jpeg_set_colorspace_SET_COMP(0' 0x72 /* 'r' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x67 /* 'g' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x62 /* 'b' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_BG_YCC:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal Cb/Cr component IDs */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x22' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x23' 1' 1' 1' 1' 1);                      break;                    default:                      ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_set_colorspace,The following statement contains a magic number: switch (colorspace)              {                  case J_COLOR_SPACE.JCS_UNKNOWN:                      m_num_components = m_input_components;                      if (m_num_components < 1 || m_num_components > JpegConstants.MAX_COMPONENTS)                          ERREXIT(J_MESSAGE_CODE.JERR_COMPONENT_COUNT' m_num_components' JpegConstants.MAX_COMPONENTS);                        for (ci = 0; ci < m_num_components; ci++)                          jpeg_set_colorspace_SET_COMP(ci' ci' 1' 1' 0' 0' 0);                        break;                    case J_COLOR_SPACE.JCS_GRAYSCALE:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 1;                      /* JFIF specifies component ID 1 */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_RGB:                      m_write_Adobe_marker = true; /* write Adobe marker to flag RGB */                      m_num_components = 3;                      jpeg_set_colorspace_SET_COMP(0' 0x52 /* 'R' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x47 /* 'G' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x42 /* 'B' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 3;                      /* JFIF specifies component IDs 1'2'3 */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      break;                    case J_COLOR_SPACE.JCS_CMYK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag CMYK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x43 /* 'C' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x4D /* 'M' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x59 /* 'Y' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(3' 0x4B /* 'K' */' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_YCCK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag YCCK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(3' 0x04' 2' 2' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_BG_RGB:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal R/G/B component IDs */                      jpeg_set_colorspace_SET_COMP(0' 0x72 /* 'r' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x67 /* 'g' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x62 /* 'b' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_BG_YCC:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal Cb/Cr component IDs */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x22' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x23' 1' 1' 1' 1' 1);                      break;                    default:                      ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_set_colorspace,The following statement contains a magic number: switch (colorspace)              {                  case J_COLOR_SPACE.JCS_UNKNOWN:                      m_num_components = m_input_components;                      if (m_num_components < 1 || m_num_components > JpegConstants.MAX_COMPONENTS)                          ERREXIT(J_MESSAGE_CODE.JERR_COMPONENT_COUNT' m_num_components' JpegConstants.MAX_COMPONENTS);                        for (ci = 0; ci < m_num_components; ci++)                          jpeg_set_colorspace_SET_COMP(ci' ci' 1' 1' 0' 0' 0);                        break;                    case J_COLOR_SPACE.JCS_GRAYSCALE:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 1;                      /* JFIF specifies component ID 1 */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_RGB:                      m_write_Adobe_marker = true; /* write Adobe marker to flag RGB */                      m_num_components = 3;                      jpeg_set_colorspace_SET_COMP(0' 0x52 /* 'R' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x47 /* 'G' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x42 /* 'B' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 3;                      /* JFIF specifies component IDs 1'2'3 */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      break;                    case J_COLOR_SPACE.JCS_CMYK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag CMYK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x43 /* 'C' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x4D /* 'M' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x59 /* 'Y' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(3' 0x4B /* 'K' */' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_YCCK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag YCCK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(3' 0x04' 2' 2' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_BG_RGB:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal R/G/B component IDs */                      jpeg_set_colorspace_SET_COMP(0' 0x72 /* 'r' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x67 /* 'g' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x62 /* 'b' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_BG_YCC:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal Cb/Cr component IDs */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x22' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x23' 1' 1' 1' 1' 1);                      break;                    default:                      ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_set_colorspace,The following statement contains a magic number: switch (colorspace)              {                  case J_COLOR_SPACE.JCS_UNKNOWN:                      m_num_components = m_input_components;                      if (m_num_components < 1 || m_num_components > JpegConstants.MAX_COMPONENTS)                          ERREXIT(J_MESSAGE_CODE.JERR_COMPONENT_COUNT' m_num_components' JpegConstants.MAX_COMPONENTS);                        for (ci = 0; ci < m_num_components; ci++)                          jpeg_set_colorspace_SET_COMP(ci' ci' 1' 1' 0' 0' 0);                        break;                    case J_COLOR_SPACE.JCS_GRAYSCALE:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 1;                      /* JFIF specifies component ID 1 */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_RGB:                      m_write_Adobe_marker = true; /* write Adobe marker to flag RGB */                      m_num_components = 3;                      jpeg_set_colorspace_SET_COMP(0' 0x52 /* 'R' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x47 /* 'G' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x42 /* 'B' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 3;                      /* JFIF specifies component IDs 1'2'3 */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      break;                    case J_COLOR_SPACE.JCS_CMYK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag CMYK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x43 /* 'C' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x4D /* 'M' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x59 /* 'Y' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(3' 0x4B /* 'K' */' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_YCCK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag YCCK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(3' 0x04' 2' 2' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_BG_RGB:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal R/G/B component IDs */                      jpeg_set_colorspace_SET_COMP(0' 0x72 /* 'r' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x67 /* 'g' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x62 /* 'b' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_BG_YCC:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal Cb/Cr component IDs */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x22' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x23' 1' 1' 1' 1' 1);                      break;                    default:                      ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_set_colorspace,The following statement contains a magic number: switch (colorspace)              {                  case J_COLOR_SPACE.JCS_UNKNOWN:                      m_num_components = m_input_components;                      if (m_num_components < 1 || m_num_components > JpegConstants.MAX_COMPONENTS)                          ERREXIT(J_MESSAGE_CODE.JERR_COMPONENT_COUNT' m_num_components' JpegConstants.MAX_COMPONENTS);                        for (ci = 0; ci < m_num_components; ci++)                          jpeg_set_colorspace_SET_COMP(ci' ci' 1' 1' 0' 0' 0);                        break;                    case J_COLOR_SPACE.JCS_GRAYSCALE:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 1;                      /* JFIF specifies component ID 1 */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_RGB:                      m_write_Adobe_marker = true; /* write Adobe marker to flag RGB */                      m_num_components = 3;                      jpeg_set_colorspace_SET_COMP(0' 0x52 /* 'R' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x47 /* 'G' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x42 /* 'B' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 3;                      /* JFIF specifies component IDs 1'2'3 */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      break;                    case J_COLOR_SPACE.JCS_CMYK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag CMYK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x43 /* 'C' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x4D /* 'M' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x59 /* 'Y' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(3' 0x4B /* 'K' */' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_YCCK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag YCCK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(3' 0x04' 2' 2' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_BG_RGB:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal R/G/B component IDs */                      jpeg_set_colorspace_SET_COMP(0' 0x72 /* 'r' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x67 /* 'g' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x62 /* 'b' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_BG_YCC:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal Cb/Cr component IDs */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x22' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x23' 1' 1' 1' 1' 1);                      break;                    default:                      ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_set_colorspace,The following statement contains a magic number: switch (colorspace)              {                  case J_COLOR_SPACE.JCS_UNKNOWN:                      m_num_components = m_input_components;                      if (m_num_components < 1 || m_num_components > JpegConstants.MAX_COMPONENTS)                          ERREXIT(J_MESSAGE_CODE.JERR_COMPONENT_COUNT' m_num_components' JpegConstants.MAX_COMPONENTS);                        for (ci = 0; ci < m_num_components; ci++)                          jpeg_set_colorspace_SET_COMP(ci' ci' 1' 1' 0' 0' 0);                        break;                    case J_COLOR_SPACE.JCS_GRAYSCALE:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 1;                      /* JFIF specifies component ID 1 */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_RGB:                      m_write_Adobe_marker = true; /* write Adobe marker to flag RGB */                      m_num_components = 3;                      jpeg_set_colorspace_SET_COMP(0' 0x52 /* 'R' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x47 /* 'G' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x42 /* 'B' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 3;                      /* JFIF specifies component IDs 1'2'3 */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      break;                    case J_COLOR_SPACE.JCS_CMYK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag CMYK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x43 /* 'C' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x4D /* 'M' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x59 /* 'Y' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(3' 0x4B /* 'K' */' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_YCCK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag YCCK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(3' 0x04' 2' 2' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_BG_RGB:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal R/G/B component IDs */                      jpeg_set_colorspace_SET_COMP(0' 0x72 /* 'r' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x67 /* 'g' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x62 /* 'b' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_BG_YCC:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal Cb/Cr component IDs */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x22' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x23' 1' 1' 1' 1' 1);                      break;                    default:                      ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_set_colorspace,The following statement contains a magic number: switch (colorspace)              {                  case J_COLOR_SPACE.JCS_UNKNOWN:                      m_num_components = m_input_components;                      if (m_num_components < 1 || m_num_components > JpegConstants.MAX_COMPONENTS)                          ERREXIT(J_MESSAGE_CODE.JERR_COMPONENT_COUNT' m_num_components' JpegConstants.MAX_COMPONENTS);                        for (ci = 0; ci < m_num_components; ci++)                          jpeg_set_colorspace_SET_COMP(ci' ci' 1' 1' 0' 0' 0);                        break;                    case J_COLOR_SPACE.JCS_GRAYSCALE:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 1;                      /* JFIF specifies component ID 1 */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_RGB:                      m_write_Adobe_marker = true; /* write Adobe marker to flag RGB */                      m_num_components = 3;                      jpeg_set_colorspace_SET_COMP(0' 0x52 /* 'R' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x47 /* 'G' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x42 /* 'B' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 3;                      /* JFIF specifies component IDs 1'2'3 */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      break;                    case J_COLOR_SPACE.JCS_CMYK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag CMYK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x43 /* 'C' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x4D /* 'M' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x59 /* 'Y' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(3' 0x4B /* 'K' */' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_YCCK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag YCCK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(3' 0x04' 2' 2' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_BG_RGB:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal R/G/B component IDs */                      jpeg_set_colorspace_SET_COMP(0' 0x72 /* 'r' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x67 /* 'g' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x62 /* 'b' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_BG_YCC:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal Cb/Cr component IDs */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x22' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x23' 1' 1' 1' 1' 1);                      break;                    default:                      ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_set_colorspace,The following statement contains a magic number: switch (colorspace)              {                  case J_COLOR_SPACE.JCS_UNKNOWN:                      m_num_components = m_input_components;                      if (m_num_components < 1 || m_num_components > JpegConstants.MAX_COMPONENTS)                          ERREXIT(J_MESSAGE_CODE.JERR_COMPONENT_COUNT' m_num_components' JpegConstants.MAX_COMPONENTS);                        for (ci = 0; ci < m_num_components; ci++)                          jpeg_set_colorspace_SET_COMP(ci' ci' 1' 1' 0' 0' 0);                        break;                    case J_COLOR_SPACE.JCS_GRAYSCALE:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 1;                      /* JFIF specifies component ID 1 */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_RGB:                      m_write_Adobe_marker = true; /* write Adobe marker to flag RGB */                      m_num_components = 3;                      jpeg_set_colorspace_SET_COMP(0' 0x52 /* 'R' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x47 /* 'G' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x42 /* 'B' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 3;                      /* JFIF specifies component IDs 1'2'3 */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      break;                    case J_COLOR_SPACE.JCS_CMYK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag CMYK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x43 /* 'C' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x4D /* 'M' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x59 /* 'Y' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(3' 0x4B /* 'K' */' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_YCCK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag YCCK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(3' 0x04' 2' 2' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_BG_RGB:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal R/G/B component IDs */                      jpeg_set_colorspace_SET_COMP(0' 0x72 /* 'r' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x67 /* 'g' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x62 /* 'b' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_BG_YCC:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal Cb/Cr component IDs */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x22' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x23' 1' 1' 1' 1' 1);                      break;                    default:                      ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_set_colorspace,The following statement contains a magic number: switch (colorspace)              {                  case J_COLOR_SPACE.JCS_UNKNOWN:                      m_num_components = m_input_components;                      if (m_num_components < 1 || m_num_components > JpegConstants.MAX_COMPONENTS)                          ERREXIT(J_MESSAGE_CODE.JERR_COMPONENT_COUNT' m_num_components' JpegConstants.MAX_COMPONENTS);                        for (ci = 0; ci < m_num_components; ci++)                          jpeg_set_colorspace_SET_COMP(ci' ci' 1' 1' 0' 0' 0);                        break;                    case J_COLOR_SPACE.JCS_GRAYSCALE:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 1;                      /* JFIF specifies component ID 1 */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_RGB:                      m_write_Adobe_marker = true; /* write Adobe marker to flag RGB */                      m_num_components = 3;                      jpeg_set_colorspace_SET_COMP(0' 0x52 /* 'R' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x47 /* 'G' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x42 /* 'B' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      m_num_components = 3;                      /* JFIF specifies component IDs 1'2'3 */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      break;                    case J_COLOR_SPACE.JCS_CMYK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag CMYK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x43 /* 'C' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x4D /* 'M' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x59 /* 'Y' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(3' 0x4B /* 'K' */' 1' 1' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_YCCK:                      m_write_Adobe_marker = true; /* write Adobe marker to flag YCCK */                      m_num_components = 4;                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x02' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x03' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(3' 0x04' 2' 2' 0' 0' 0);                      break;                    case J_COLOR_SPACE.JCS_BG_RGB:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal R/G/B component IDs */                      jpeg_set_colorspace_SET_COMP(0' 0x72 /* 'r' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      jpeg_set_colorspace_SET_COMP(1' 0x67 /* 'g' */' 1' 1' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(2' 0x62 /* 'b' */' 1' 1' 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0'                          color_transform == J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN ? 1 : 0);                      break;                    case J_COLOR_SPACE.JCS_BG_YCC:                      m_write_JFIF_header = true; /* Write a JFIF marker */                      JFIF_major_version = 2;   /* Set JFIF major version = 2 */                      m_num_components = 3;                      /* Add offset 0x20 to the normal Cb/Cr component IDs */                      /* We default to 2x2 subsamples of chrominance */                      jpeg_set_colorspace_SET_COMP(0' 0x01' 2' 2' 0' 0' 0);                      jpeg_set_colorspace_SET_COMP(1' 0x22' 1' 1' 1' 1' 1);                      jpeg_set_colorspace_SET_COMP(2' 0x23' 1' 1' 1' 1' 1);                      break;                    default:                      ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_add_quant_table,The following statement contains a magic number: int temp = (basic_table[i] * scale_factor + 50) / 100;
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_add_quant_table,The following statement contains a magic number: int temp = (basic_table[i] * scale_factor + 50) / 100;
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_add_quant_table,The following statement contains a magic number: temp = 32767;
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_add_quant_table,The following statement contains a magic number: temp > 32767
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_add_quant_table,The following statement contains a magic number: temp = 255;
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_add_quant_table,The following statement contains a magic number: force_baseline && temp > 255
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_quality_scaling,The following statement contains a magic number: quality = 100;
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_quality_scaling,The following statement contains a magic number: quality > 100
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_quality_scaling,The following statement contains a magic number: quality = 5000 / quality;
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_quality_scaling,The following statement contains a magic number: quality < 50
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_simple_progression,The following statement contains a magic number: nscans = 10;
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_simple_progression,The following statement contains a magic number: m_num_components == 3 &&                  (m_jpeg_color_space == J_COLOR_SPACE.JCS_YCbCr ||                  m_jpeg_color_space == J_COLOR_SPACE.JCS_BG_YCC)
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_simple_progression,The following statement contains a magic number: m_script_space_size = Math.Max(nscans' 10);
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_simple_progression,The following statement contains a magic number: fill_a_scan(ref scanIndex' 0' 1' 5' 0' 2);
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_simple_progression,The following statement contains a magic number: fill_a_scan(ref scanIndex' 0' 1' 5' 0' 2);
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_simple_progression,The following statement contains a magic number: fill_a_scan(ref scanIndex' 2' 1' 63' 0' 1);
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_simple_progression,The following statement contains a magic number: fill_a_scan(ref scanIndex' 2' 1' 63' 0' 1);
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_simple_progression,The following statement contains a magic number: fill_a_scan(ref scanIndex' 1' 1' 63' 0' 1);
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_simple_progression,The following statement contains a magic number: fill_a_scan(ref scanIndex' 0' 6' 63' 0' 2);
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_simple_progression,The following statement contains a magic number: fill_a_scan(ref scanIndex' 0' 6' 63' 0' 2);
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_simple_progression,The following statement contains a magic number: fill_a_scan(ref scanIndex' 0' 6' 63' 0' 2);
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_simple_progression,The following statement contains a magic number: fill_a_scan(ref scanIndex' 0' 1' 63' 2' 1);
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_simple_progression,The following statement contains a magic number: fill_a_scan(ref scanIndex' 0' 1' 63' 2' 1);
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_simple_progression,The following statement contains a magic number: fill_a_scan(ref scanIndex' 2' 1' 63' 1' 0);
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_simple_progression,The following statement contains a magic number: fill_a_scan(ref scanIndex' 2' 1' 63' 1' 0);
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_simple_progression,The following statement contains a magic number: fill_a_scan(ref scanIndex' 1' 1' 63' 1' 0);
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_simple_progression,The following statement contains a magic number: fill_a_scan(ref scanIndex' 0' 1' 63' 1' 0);
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_simple_progression,The following statement contains a magic number: m_num_components == 3 &&                  (m_jpeg_color_space == J_COLOR_SPACE.JCS_YCbCr ||                  m_jpeg_color_space == J_COLOR_SPACE.JCS_BG_YCC)
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_calc_jpeg_dimensions,The following statement contains a magic number: ((long)m_image_width >> 24) != 0 || ((long)m_image_height >> 24) != 0
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,jpeg_calc_jpeg_dimensions,The following statement contains a magic number: ((long)m_image_width >> 24) != 0 || ((long)m_image_height >> 24) != 0
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,initialize,The following statement contains a magic number: q_scale_factor[i] = 100;
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,initial_setup,The following statement contains a magic number: block_size < 1 || block_size > 16
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,initial_setup,The following statement contains a magic number: switch (block_size)              {                  case 2:                      natural_order = JpegUtils.jpeg_natural_order2;                      break;                    case 3:                      natural_order = JpegUtils.jpeg_natural_order3;                      break;                    case 4:                      natural_order = JpegUtils.jpeg_natural_order4;                      break;                    case 5:                      natural_order = JpegUtils.jpeg_natural_order5;                      break;                    case 6:                      natural_order = JpegUtils.jpeg_natural_order6;                      break;                    case 7:                      natural_order = JpegUtils.jpeg_natural_order7;                      break;                    default:                      natural_order = JpegUtils.jpeg_natural_order;                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,initial_setup,The following statement contains a magic number: switch (block_size)              {                  case 2:                      natural_order = JpegUtils.jpeg_natural_order2;                      break;                    case 3:                      natural_order = JpegUtils.jpeg_natural_order3;                      break;                    case 4:                      natural_order = JpegUtils.jpeg_natural_order4;                      break;                    case 5:                      natural_order = JpegUtils.jpeg_natural_order5;                      break;                    case 6:                      natural_order = JpegUtils.jpeg_natural_order6;                      break;                    case 7:                      natural_order = JpegUtils.jpeg_natural_order7;                      break;                    default:                      natural_order = JpegUtils.jpeg_natural_order;                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,initial_setup,The following statement contains a magic number: switch (block_size)              {                  case 2:                      natural_order = JpegUtils.jpeg_natural_order2;                      break;                    case 3:                      natural_order = JpegUtils.jpeg_natural_order3;                      break;                    case 4:                      natural_order = JpegUtils.jpeg_natural_order4;                      break;                    case 5:                      natural_order = JpegUtils.jpeg_natural_order5;                      break;                    case 6:                      natural_order = JpegUtils.jpeg_natural_order6;                      break;                    case 7:                      natural_order = JpegUtils.jpeg_natural_order7;                      break;                    default:                      natural_order = JpegUtils.jpeg_natural_order;                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,initial_setup,The following statement contains a magic number: switch (block_size)              {                  case 2:                      natural_order = JpegUtils.jpeg_natural_order2;                      break;                    case 3:                      natural_order = JpegUtils.jpeg_natural_order3;                      break;                    case 4:                      natural_order = JpegUtils.jpeg_natural_order4;                      break;                    case 5:                      natural_order = JpegUtils.jpeg_natural_order5;                      break;                    case 6:                      natural_order = JpegUtils.jpeg_natural_order6;                      break;                    case 7:                      natural_order = JpegUtils.jpeg_natural_order7;                      break;                    default:                      natural_order = JpegUtils.jpeg_natural_order;                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,initial_setup,The following statement contains a magic number: switch (block_size)              {                  case 2:                      natural_order = JpegUtils.jpeg_natural_order2;                      break;                    case 3:                      natural_order = JpegUtils.jpeg_natural_order3;                      break;                    case 4:                      natural_order = JpegUtils.jpeg_natural_order4;                      break;                    case 5:                      natural_order = JpegUtils.jpeg_natural_order5;                      break;                    case 6:                      natural_order = JpegUtils.jpeg_natural_order6;                      break;                    case 7:                      natural_order = JpegUtils.jpeg_natural_order7;                      break;                    default:                      natural_order = JpegUtils.jpeg_natural_order;                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,initial_setup,The following statement contains a magic number: switch (block_size)              {                  case 2:                      natural_order = JpegUtils.jpeg_natural_order2;                      break;                    case 3:                      natural_order = JpegUtils.jpeg_natural_order3;                      break;                    case 4:                      natural_order = JpegUtils.jpeg_natural_order4;                      break;                    case 5:                      natural_order = JpegUtils.jpeg_natural_order5;                      break;                    case 6:                      natural_order = JpegUtils.jpeg_natural_order6;                      break;                    case 7:                      natural_order = JpegUtils.jpeg_natural_order7;                      break;                    default:                      natural_order = JpegUtils.jpeg_natural_order;                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,initial_setup,The following statement contains a magic number: m_data_precision < 8 || m_data_precision > 12
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,initial_setup,The following statement contains a magic number: m_data_precision < 8 || m_data_precision > 12
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,initial_setup,The following statement contains a magic number: ssize = ssize * 2;
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,initial_setup,The following statement contains a magic number: min_DCT_h_scaled_size * ssize <=                     (do_fancy_downsampling ? JpegConstants.DCTSIZE : JpegConstants.DCTSIZE / 2) &&                     (m_max_h_samp_factor % (compptr.H_samp_factor * ssize * 2)) == 0
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,initial_setup,The following statement contains a magic number: min_DCT_h_scaled_size * ssize <=                     (do_fancy_downsampling ? JpegConstants.DCTSIZE : JpegConstants.DCTSIZE / 2) &&                     (m_max_h_samp_factor % (compptr.H_samp_factor * ssize * 2)) == 0
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,initial_setup,The following statement contains a magic number: ssize = ssize * 2;
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,initial_setup,The following statement contains a magic number: min_DCT_v_scaled_size * ssize <=                     (do_fancy_downsampling ? JpegConstants.DCTSIZE : JpegConstants.DCTSIZE / 2) &&                     (m_max_v_samp_factor % (compptr.V_samp_factor * ssize * 2)) == 0
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,initial_setup,The following statement contains a magic number: min_DCT_v_scaled_size * ssize <=                     (do_fancy_downsampling ? JpegConstants.DCTSIZE : JpegConstants.DCTSIZE / 2) &&                     (m_max_v_samp_factor % (compptr.V_samp_factor * ssize * 2)) == 0
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,initial_setup,The following statement contains a magic number: compptr.DCT_h_scaled_size = compptr.DCT_v_scaled_size * 2;
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,initial_setup,The following statement contains a magic number: compptr.DCT_h_scaled_size > compptr.DCT_v_scaled_size * 2
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,validate_script,The following statement contains a magic number: const int MAX_AH_AL = 10;
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,add_huff_table,The following statement contains a magic number: len <= 16
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_compress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_compress_struct.cs,add_huff_table,The following statement contains a magic number: nsymbols < 1 || nsymbols > 256
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,jpeg_calc_output_dimensions,The following statement contains a magic number: ssize = ssize * 2;
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,jpeg_calc_output_dimensions,The following statement contains a magic number: min_DCT_h_scaled_size * ssize <=                       (m_do_fancy_upsampling ? JpegConstants.DCTSIZE : JpegConstants.DCTSIZE / 2) &&                      (m_max_h_samp_factor % (compptr.H_samp_factor * ssize * 2)) == 0
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,jpeg_calc_output_dimensions,The following statement contains a magic number: min_DCT_h_scaled_size * ssize <=                       (m_do_fancy_upsampling ? JpegConstants.DCTSIZE : JpegConstants.DCTSIZE / 2) &&                      (m_max_h_samp_factor % (compptr.H_samp_factor * ssize * 2)) == 0
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,jpeg_calc_output_dimensions,The following statement contains a magic number: ssize = ssize * 2;
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,jpeg_calc_output_dimensions,The following statement contains a magic number: min_DCT_v_scaled_size * ssize <=                     (m_do_fancy_upsampling ? JpegConstants.DCTSIZE : JpegConstants.DCTSIZE / 2) &&                     (m_max_v_samp_factor % (compptr.V_samp_factor * ssize * 2)) == 0
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,jpeg_calc_output_dimensions,The following statement contains a magic number: min_DCT_v_scaled_size * ssize <=                     (m_do_fancy_upsampling ? JpegConstants.DCTSIZE : JpegConstants.DCTSIZE / 2) &&                     (m_max_v_samp_factor % (compptr.V_samp_factor * ssize * 2)) == 0
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,jpeg_calc_output_dimensions,The following statement contains a magic number: compptr.DCT_h_scaled_size = compptr.DCT_v_scaled_size * 2;
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,jpeg_calc_output_dimensions,The following statement contains a magic number: compptr.DCT_h_scaled_size > compptr.DCT_v_scaled_size * 2
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,jpeg_calc_output_dimensions,The following statement contains a magic number: switch (m_out_color_space)              {                  case J_COLOR_SPACE.JCS_GRAYSCALE:                      m_out_color_components = 1;                      break;                    case J_COLOR_SPACE.JCS_RGB:                  case J_COLOR_SPACE.JCS_BG_RGB:                      m_out_color_components = JpegConstants.RGB_PIXELSIZE;                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                  case J_COLOR_SPACE.JCS_BG_YCC:                      m_out_color_components = 3;                      break;                    case J_COLOR_SPACE.JCS_CMYK:                  case J_COLOR_SPACE.JCS_YCCK:                      m_out_color_components = 4;                      break;                    default:                      /* else must be same colorspace as in file */                      m_out_color_components = m_num_components;                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,jpeg_calc_output_dimensions,The following statement contains a magic number: switch (m_out_color_space)              {                  case J_COLOR_SPACE.JCS_GRAYSCALE:                      m_out_color_components = 1;                      break;                    case J_COLOR_SPACE.JCS_RGB:                  case J_COLOR_SPACE.JCS_BG_RGB:                      m_out_color_components = JpegConstants.RGB_PIXELSIZE;                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                  case J_COLOR_SPACE.JCS_BG_YCC:                      m_out_color_components = 3;                      break;                    case J_COLOR_SPACE.JCS_CMYK:                  case J_COLOR_SPACE.JCS_YCCK:                      m_out_color_components = 4;                      break;                    default:                      /* else must be same colorspace as in file */                      m_out_color_components = m_num_components;                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,jpeg_copy_critical_parameters,The following statement contains a magic number: m_JFIF_major_version == 1 || m_JFIF_major_version == 2
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,use_merged_upsample,The following statement contains a magic number: (m_jpeg_color_space != J_COLOR_SPACE.JCS_YCbCr &&                  m_jpeg_color_space != J_COLOR_SPACE.JCS_BG_YCC) ||                  m_num_components != 3 ||                  m_out_color_space != J_COLOR_SPACE.JCS_RGB ||                  m_out_color_components != JpegConstants.RGB_PIXELSIZE ||                  color_transform != J_COLOR_TRANSFORM.JCT_NONE
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,use_merged_upsample,The following statement contains a magic number: m_comp_info[0].H_samp_factor != 2 || m_comp_info[1].H_samp_factor != 1 ||                  m_comp_info[2].H_samp_factor != 1 || m_comp_info[0].V_samp_factor > 2 ||                  m_comp_info[1].V_samp_factor != 1 || m_comp_info[2].V_samp_factor != 1
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,use_merged_upsample,The following statement contains a magic number: m_comp_info[0].H_samp_factor != 2 || m_comp_info[1].H_samp_factor != 1 ||                  m_comp_info[2].H_samp_factor != 1 || m_comp_info[0].V_samp_factor > 2 ||                  m_comp_info[1].V_samp_factor != 1 || m_comp_info[2].V_samp_factor != 1
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,use_merged_upsample,The following statement contains a magic number: m_comp_info[0].H_samp_factor != 2 || m_comp_info[1].H_samp_factor != 1 ||                  m_comp_info[2].H_samp_factor != 1 || m_comp_info[0].V_samp_factor > 2 ||                  m_comp_info[1].V_samp_factor != 1 || m_comp_info[2].V_samp_factor != 1
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,use_merged_upsample,The following statement contains a magic number: m_comp_info[0].H_samp_factor != 2 || m_comp_info[1].H_samp_factor != 1 ||                  m_comp_info[2].H_samp_factor != 1 || m_comp_info[0].V_samp_factor > 2 ||                  m_comp_info[1].V_samp_factor != 1 || m_comp_info[2].V_samp_factor != 1
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,use_merged_upsample,The following statement contains a magic number: m_comp_info[0].DCT_h_scaled_size != min_DCT_h_scaled_size ||                  m_comp_info[1].DCT_h_scaled_size != min_DCT_h_scaled_size ||                  m_comp_info[2].DCT_h_scaled_size != min_DCT_h_scaled_size ||                  m_comp_info[0].DCT_v_scaled_size != min_DCT_v_scaled_size ||                  m_comp_info[1].DCT_v_scaled_size != min_DCT_v_scaled_size ||                  m_comp_info[2].DCT_v_scaled_size != min_DCT_v_scaled_size
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,use_merged_upsample,The following statement contains a magic number: m_comp_info[0].DCT_h_scaled_size != min_DCT_h_scaled_size ||                  m_comp_info[1].DCT_h_scaled_size != min_DCT_h_scaled_size ||                  m_comp_info[2].DCT_h_scaled_size != min_DCT_h_scaled_size ||                  m_comp_info[0].DCT_v_scaled_size != min_DCT_v_scaled_size ||                  m_comp_info[1].DCT_v_scaled_size != min_DCT_v_scaled_size ||                  m_comp_info[2].DCT_v_scaled_size != min_DCT_v_scaled_size
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,transdecode_master_selection,The following statement contains a magic number: nscans = 2 + 3 * m_num_components;
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,transdecode_master_selection,The following statement contains a magic number: nscans = 2 + 3 * m_num_components;
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,default_decompress_parms,The following statement contains a magic number: switch (m_num_components)              {                  case 1:                      m_jpeg_color_space = J_COLOR_SPACE.JCS_GRAYSCALE;                      m_out_color_space = J_COLOR_SPACE.JCS_GRAYSCALE;                      break;                    case 3:                      int cid0 = m_comp_info[0].Component_id;                      int cid1 = m_comp_info[1].Component_id;                      int cid2 = m_comp_info[2].Component_id;                        // Use Adobe marker info' otherwise try to guess from the component IDs                      if (m_saw_Adobe_marker)                      {                          switch (m_Adobe_transform)                          {                              case 0:                                  m_jpeg_color_space = J_COLOR_SPACE.JCS_RGB;                                  break;                              case 1:                                  m_jpeg_color_space = J_COLOR_SPACE.JCS_YCbCr;                                  break;                              default:                                  WARNMS(J_MESSAGE_CODE.JWRN_ADOBE_XFORM' m_Adobe_transform);                                  /* assume it's YCbCr */                                  m_jpeg_color_space = J_COLOR_SPACE.JCS_YCbCr;                                  break;                          }                      }                      else if (cid0 == 0x01 && cid1 == 0x02 && cid2 == 0x03)                      {                          m_jpeg_color_space = J_COLOR_SPACE.JCS_YCbCr;                      }                      else if (cid0 == 0x01 && cid1 == 0x22 && cid2 == 0x23)                      {                          m_jpeg_color_space = J_COLOR_SPACE.JCS_BG_YCC;                      }                      else if (cid0 == 0x52 && cid1 == 0x47 && cid2 == 0x42)                      {                          /* ASCII 'R'' 'G'' 'B' */                          m_jpeg_color_space = J_COLOR_SPACE.JCS_RGB;                      }                      else if (cid0 == 0x72 && cid1 == 0x67 && cid2 == 0x62)                      {                          /* ASCII 'r'' 'g'' 'b' */                          m_jpeg_color_space = J_COLOR_SPACE.JCS_BG_RGB;                      }                      else if (m_saw_JFIF_marker)                      {                          /* assume it's YCbCr */                          m_jpeg_color_space = J_COLOR_SPACE.JCS_YCbCr;                      }                      else                      {                          TRACEMS(1' J_MESSAGE_CODE.JTRC_UNKNOWN_IDS' cid0' cid1' cid2);                          /* assume it's YCbCr */                          m_jpeg_color_space = J_COLOR_SPACE.JCS_YCbCr;                      }                      /* Always guess RGB is proper output colorspace. */                      m_out_color_space = J_COLOR_SPACE.JCS_RGB;                      break;                    case 4:                      if (m_saw_Adobe_marker)                      {                          switch (m_Adobe_transform)                          {                              case 0:                                  m_jpeg_color_space = J_COLOR_SPACE.JCS_CMYK;                                  break;                              case 2:                                  m_jpeg_color_space = J_COLOR_SPACE.JCS_YCCK;                                  break;                              default:                                  WARNMS(J_MESSAGE_CODE.JWRN_ADOBE_XFORM' m_Adobe_transform);                                  /* assume it's YCCK */                                  m_jpeg_color_space = J_COLOR_SPACE.JCS_YCCK;                                  break;                          }                      }                      else                      {                          /* No special markers' assume straight CMYK. */                          m_jpeg_color_space = J_COLOR_SPACE.JCS_CMYK;                      }                        m_out_color_space = J_COLOR_SPACE.JCS_CMYK;                      break;                    default:                      m_jpeg_color_space = J_COLOR_SPACE.JCS_UNKNOWN;                      m_out_color_space = J_COLOR_SPACE.JCS_UNKNOWN;                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,default_decompress_parms,The following statement contains a magic number: switch (m_num_components)              {                  case 1:                      m_jpeg_color_space = J_COLOR_SPACE.JCS_GRAYSCALE;                      m_out_color_space = J_COLOR_SPACE.JCS_GRAYSCALE;                      break;                    case 3:                      int cid0 = m_comp_info[0].Component_id;                      int cid1 = m_comp_info[1].Component_id;                      int cid2 = m_comp_info[2].Component_id;                        // Use Adobe marker info' otherwise try to guess from the component IDs                      if (m_saw_Adobe_marker)                      {                          switch (m_Adobe_transform)                          {                              case 0:                                  m_jpeg_color_space = J_COLOR_SPACE.JCS_RGB;                                  break;                              case 1:                                  m_jpeg_color_space = J_COLOR_SPACE.JCS_YCbCr;                                  break;                              default:                                  WARNMS(J_MESSAGE_CODE.JWRN_ADOBE_XFORM' m_Adobe_transform);                                  /* assume it's YCbCr */                                  m_jpeg_color_space = J_COLOR_SPACE.JCS_YCbCr;                                  break;                          }                      }                      else if (cid0 == 0x01 && cid1 == 0x02 && cid2 == 0x03)                      {                          m_jpeg_color_space = J_COLOR_SPACE.JCS_YCbCr;                      }                      else if (cid0 == 0x01 && cid1 == 0x22 && cid2 == 0x23)                      {                          m_jpeg_color_space = J_COLOR_SPACE.JCS_BG_YCC;                      }                      else if (cid0 == 0x52 && cid1 == 0x47 && cid2 == 0x42)                      {                          /* ASCII 'R'' 'G'' 'B' */                          m_jpeg_color_space = J_COLOR_SPACE.JCS_RGB;                      }                      else if (cid0 == 0x72 && cid1 == 0x67 && cid2 == 0x62)                      {                          /* ASCII 'r'' 'g'' 'b' */                          m_jpeg_color_space = J_COLOR_SPACE.JCS_BG_RGB;                      }                      else if (m_saw_JFIF_marker)                      {                          /* assume it's YCbCr */                          m_jpeg_color_space = J_COLOR_SPACE.JCS_YCbCr;                      }                      else                      {                          TRACEMS(1' J_MESSAGE_CODE.JTRC_UNKNOWN_IDS' cid0' cid1' cid2);                          /* assume it's YCbCr */                          m_jpeg_color_space = J_COLOR_SPACE.JCS_YCbCr;                      }                      /* Always guess RGB is proper output colorspace. */                      m_out_color_space = J_COLOR_SPACE.JCS_RGB;                      break;                    case 4:                      if (m_saw_Adobe_marker)                      {                          switch (m_Adobe_transform)                          {                              case 0:                                  m_jpeg_color_space = J_COLOR_SPACE.JCS_CMYK;                                  break;                              case 2:                                  m_jpeg_color_space = J_COLOR_SPACE.JCS_YCCK;                                  break;                              default:                                  WARNMS(J_MESSAGE_CODE.JWRN_ADOBE_XFORM' m_Adobe_transform);                                  /* assume it's YCCK */                                  m_jpeg_color_space = J_COLOR_SPACE.JCS_YCCK;                                  break;                          }                      }                      else                      {                          /* No special markers' assume straight CMYK. */                          m_jpeg_color_space = J_COLOR_SPACE.JCS_CMYK;                      }                        m_out_color_space = J_COLOR_SPACE.JCS_CMYK;                      break;                    default:                      m_jpeg_color_space = J_COLOR_SPACE.JCS_UNKNOWN;                      m_out_color_space = J_COLOR_SPACE.JCS_UNKNOWN;                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,default_decompress_parms,The following statement contains a magic number: switch (m_num_components)              {                  case 1:                      m_jpeg_color_space = J_COLOR_SPACE.JCS_GRAYSCALE;                      m_out_color_space = J_COLOR_SPACE.JCS_GRAYSCALE;                      break;                    case 3:                      int cid0 = m_comp_info[0].Component_id;                      int cid1 = m_comp_info[1].Component_id;                      int cid2 = m_comp_info[2].Component_id;                        // Use Adobe marker info' otherwise try to guess from the component IDs                      if (m_saw_Adobe_marker)                      {                          switch (m_Adobe_transform)                          {                              case 0:                                  m_jpeg_color_space = J_COLOR_SPACE.JCS_RGB;                                  break;                              case 1:                                  m_jpeg_color_space = J_COLOR_SPACE.JCS_YCbCr;                                  break;                              default:                                  WARNMS(J_MESSAGE_CODE.JWRN_ADOBE_XFORM' m_Adobe_transform);                                  /* assume it's YCbCr */                                  m_jpeg_color_space = J_COLOR_SPACE.JCS_YCbCr;                                  break;                          }                      }                      else if (cid0 == 0x01 && cid1 == 0x02 && cid2 == 0x03)                      {                          m_jpeg_color_space = J_COLOR_SPACE.JCS_YCbCr;                      }                      else if (cid0 == 0x01 && cid1 == 0x22 && cid2 == 0x23)                      {                          m_jpeg_color_space = J_COLOR_SPACE.JCS_BG_YCC;                      }                      else if (cid0 == 0x52 && cid1 == 0x47 && cid2 == 0x42)                      {                          /* ASCII 'R'' 'G'' 'B' */                          m_jpeg_color_space = J_COLOR_SPACE.JCS_RGB;                      }                      else if (cid0 == 0x72 && cid1 == 0x67 && cid2 == 0x62)                      {                          /* ASCII 'r'' 'g'' 'b' */                          m_jpeg_color_space = J_COLOR_SPACE.JCS_BG_RGB;                      }                      else if (m_saw_JFIF_marker)                      {                          /* assume it's YCbCr */                          m_jpeg_color_space = J_COLOR_SPACE.JCS_YCbCr;                      }                      else                      {                          TRACEMS(1' J_MESSAGE_CODE.JTRC_UNKNOWN_IDS' cid0' cid1' cid2);                          /* assume it's YCbCr */                          m_jpeg_color_space = J_COLOR_SPACE.JCS_YCbCr;                      }                      /* Always guess RGB is proper output colorspace. */                      m_out_color_space = J_COLOR_SPACE.JCS_RGB;                      break;                    case 4:                      if (m_saw_Adobe_marker)                      {                          switch (m_Adobe_transform)                          {                              case 0:                                  m_jpeg_color_space = J_COLOR_SPACE.JCS_CMYK;                                  break;                              case 2:                                  m_jpeg_color_space = J_COLOR_SPACE.JCS_YCCK;                                  break;                              default:                                  WARNMS(J_MESSAGE_CODE.JWRN_ADOBE_XFORM' m_Adobe_transform);                                  /* assume it's YCCK */                                  m_jpeg_color_space = J_COLOR_SPACE.JCS_YCCK;                                  break;                          }                      }                      else                      {                          /* No special markers' assume straight CMYK. */                          m_jpeg_color_space = J_COLOR_SPACE.JCS_CMYK;                      }                        m_out_color_space = J_COLOR_SPACE.JCS_CMYK;                      break;                    default:                      m_jpeg_color_space = J_COLOR_SPACE.JCS_UNKNOWN;                      m_out_color_space = J_COLOR_SPACE.JCS_UNKNOWN;                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,default_decompress_parms,The following statement contains a magic number: switch (m_num_components)              {                  case 1:                      m_jpeg_color_space = J_COLOR_SPACE.JCS_GRAYSCALE;                      m_out_color_space = J_COLOR_SPACE.JCS_GRAYSCALE;                      break;                    case 3:                      int cid0 = m_comp_info[0].Component_id;                      int cid1 = m_comp_info[1].Component_id;                      int cid2 = m_comp_info[2].Component_id;                        // Use Adobe marker info' otherwise try to guess from the component IDs                      if (m_saw_Adobe_marker)                      {                          switch (m_Adobe_transform)                          {                              case 0:                                  m_jpeg_color_space = J_COLOR_SPACE.JCS_RGB;                                  break;                              case 1:                                  m_jpeg_color_space = J_COLOR_SPACE.JCS_YCbCr;                                  break;                              default:                                  WARNMS(J_MESSAGE_CODE.JWRN_ADOBE_XFORM' m_Adobe_transform);                                  /* assume it's YCbCr */                                  m_jpeg_color_space = J_COLOR_SPACE.JCS_YCbCr;                                  break;                          }                      }                      else if (cid0 == 0x01 && cid1 == 0x02 && cid2 == 0x03)                      {                          m_jpeg_color_space = J_COLOR_SPACE.JCS_YCbCr;                      }                      else if (cid0 == 0x01 && cid1 == 0x22 && cid2 == 0x23)                      {                          m_jpeg_color_space = J_COLOR_SPACE.JCS_BG_YCC;                      }                      else if (cid0 == 0x52 && cid1 == 0x47 && cid2 == 0x42)                      {                          /* ASCII 'R'' 'G'' 'B' */                          m_jpeg_color_space = J_COLOR_SPACE.JCS_RGB;                      }                      else if (cid0 == 0x72 && cid1 == 0x67 && cid2 == 0x62)                      {                          /* ASCII 'r'' 'g'' 'b' */                          m_jpeg_color_space = J_COLOR_SPACE.JCS_BG_RGB;                      }                      else if (m_saw_JFIF_marker)                      {                          /* assume it's YCbCr */                          m_jpeg_color_space = J_COLOR_SPACE.JCS_YCbCr;                      }                      else                      {                          TRACEMS(1' J_MESSAGE_CODE.JTRC_UNKNOWN_IDS' cid0' cid1' cid2);                          /* assume it's YCbCr */                          m_jpeg_color_space = J_COLOR_SPACE.JCS_YCbCr;                      }                      /* Always guess RGB is proper output colorspace. */                      m_out_color_space = J_COLOR_SPACE.JCS_RGB;                      break;                    case 4:                      if (m_saw_Adobe_marker)                      {                          switch (m_Adobe_transform)                          {                              case 0:                                  m_jpeg_color_space = J_COLOR_SPACE.JCS_CMYK;                                  break;                              case 2:                                  m_jpeg_color_space = J_COLOR_SPACE.JCS_YCCK;                                  break;                              default:                                  WARNMS(J_MESSAGE_CODE.JWRN_ADOBE_XFORM' m_Adobe_transform);                                  /* assume it's YCCK */                                  m_jpeg_color_space = J_COLOR_SPACE.JCS_YCCK;                                  break;                          }                      }                      else                      {                          /* No special markers' assume straight CMYK. */                          m_jpeg_color_space = J_COLOR_SPACE.JCS_CMYK;                      }                        m_out_color_space = J_COLOR_SPACE.JCS_CMYK;                      break;                    default:                      m_jpeg_color_space = J_COLOR_SPACE.JCS_UNKNOWN;                      m_out_color_space = J_COLOR_SPACE.JCS_UNKNOWN;                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,default_decompress_parms,The following statement contains a magic number: m_desired_number_of_colors = 256;
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_error_mgr,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_error_mgr.cs,emit_message,The following statement contains a magic number: m_num_warnings == 0 || m_trace_level >= 3
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_source_mgr,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_source_mgr.cs,resync_to_restart,The following statement contains a magic number: action = 2;
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_source_mgr,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_source_mgr.cs,resync_to_restart,The following statement contains a magic number: cinfo.TRACEMS(4' J_MESSAGE_CODE.JTRC_RECOVERY_ACTION' cinfo.m_unread_marker' action);
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_source_mgr,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_source_mgr.cs,resync_to_restart,The following statement contains a magic number: switch (action)                  {                      case 1:                          /* Discard marker and let entropy decoder resume processing. */                          cinfo.m_unread_marker = 0;                          return true;                      case 2:                          /* Scan to the next marker' and repeat the decision loop. */                          if (!cinfo.m_marker.next_marker())                              return false;                          break;                      case 3:                          /* Return without advancing past this marker. */                          /* Entropy decoder will be forced to process an empty segment. */                          return true;                  }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_source_mgr,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_source_mgr.cs,resync_to_restart,The following statement contains a magic number: switch (action)                  {                      case 1:                          /* Discard marker and let entropy decoder resume processing. */                          cinfo.m_unread_marker = 0;                          return true;                      case 2:                          /* Scan to the next marker' and repeat the decision loop. */                          if (!cinfo.m_marker.next_marker())                              return false;                          break;                      case 3:                          /* Return without advancing past this marker. */                          /* Entropy decoder will be forced to process an empty segment. */                          return true;                  }
Magic Number,BitMiracle.LibJpeg.Classic,jpeg_source_mgr,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_source_mgr.cs,GetTwoBytes,The following statement contains a magic number: V = m_next_input_byte[m_position] << 8;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,start_pass,The following statement contains a magic number: m_cinfo.m_Al > 13
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,decode_mcu_full,The following statement contains a magic number: int r = s >> 4;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,decode_mcu_full,The following statement contains a magic number: s &= 15;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,decode_mcu_full,The following statement contains a magic number: int r = s >> 4;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,decode_mcu_full,The following statement contains a magic number: s &= 15;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,decode_mcu_sub,The following statement contains a magic number: int r = s >> 4;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,decode_mcu_sub,The following statement contains a magic number: s &= 15;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,decode_mcu_sub,The following statement contains a magic number: int r = s >> 4;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,decode_mcu_sub,The following statement contains a magic number: s &= 15;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,decode_mcu_AC_refine,The following statement contains a magic number: int r = s >> 4;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,decode_mcu_AC_refine,The following statement contains a magic number: s &= 15;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,finish_pass_huff,The following statement contains a magic number: m_cinfo.m_marker.SkipBytes(m_bitstate.bits_left / 8);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,jpeg_fill_bit_buffer,The following statement contains a magic number: get_buffer = (get_buffer << 8) | c;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,jpeg_fill_bit_buffer,The following statement contains a magic number: bits_left += 8;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,jpeg_make_d_derived_tbl,The following statement contains a magic number: char[] huffsize = new char[257];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,jpeg_make_d_derived_tbl,The following statement contains a magic number: p + i > 256
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,jpeg_make_d_derived_tbl,The following statement contains a magic number: l <= 16
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,jpeg_make_d_derived_tbl,The following statement contains a magic number: int[] huffcode = new int[257];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,jpeg_make_d_derived_tbl,The following statement contains a magic number: l <= 16
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,jpeg_make_d_derived_tbl,The following statement contains a magic number: dtbl.maxcode[17] = 0xFFFFF;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,jpeg_make_d_derived_tbl,The following statement contains a magic number: sym > 15
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_decoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_decoder.cs,jpeg_huff_decode,The following statement contains a magic number: l > 16
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,start_pass,The following statement contains a magic number: m_dc_count_ptrs[tbl] = new long[257];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,start_pass,The following statement contains a magic number: m_ac_count_ptrs[tbl] = new long[257];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,encode_mcu_huff,The following statement contains a magic number: m_next_restart_num &= 7;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,emit_bits_s,The following statement contains a magic number: put_buffer <<= 24 - put_bits;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,emit_bits_s,The following statement contains a magic number: int c = (put_buffer >> 16) & 0xFF;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,emit_bits_s,The following statement contains a magic number: put_buffer <<= 8;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,emit_bits_s,The following statement contains a magic number: put_bits -= 8;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,emit_bits_s,The following statement contains a magic number: put_bits >= 8
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,emit_bits_e,The following statement contains a magic number: local_put_buffer <<= 24 - put_bits;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,emit_bits_e,The following statement contains a magic number: int c = (local_put_buffer >> 16) & 0xFF;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,emit_bits_e,The following statement contains a magic number: local_put_buffer <<= 8;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,emit_bits_e,The following statement contains a magic number: put_bits -= 8;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,emit_bits_e,The following statement contains a magic number: put_bits >= 8
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,flush_bits_s,The following statement contains a magic number: !emit_bits_s(state' 0x7F' 7)
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,flush_bits_e,The following statement contains a magic number: emit_bits_e(0x7F' 7);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,emit_eobrun,The following statement contains a magic number: nbits > 14
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,emit_eobrun,The following statement contains a magic number: emit_ac_symbol(ac_tbl_no' nbits << 4);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,IRIGHT_SHIFT,The following statement contains a magic number: return (x >> shft) | (~0) << (16 - shft);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,encode_mcu_DC_first,The following statement contains a magic number: m_next_restart_num &= 7;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,encode_mcu_AC_first,The following statement contains a magic number: r -= 16;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,encode_mcu_AC_first,The following statement contains a magic number: r > 15
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,encode_mcu_AC_first,The following statement contains a magic number: emit_ac_symbol(ac_tbl_no' (r << 4) + nbits);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,encode_mcu_AC_first,The following statement contains a magic number: m_next_restart_num &= 7;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,encode_mcu_DC_refine,The following statement contains a magic number: m_next_restart_num &= 7;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,encode_mcu_AC_refine,The following statement contains a magic number: r -= 16;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,encode_mcu_AC_refine,The following statement contains a magic number: r > 15 && k <= EOB
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,encode_mcu_AC_refine,The following statement contains a magic number: emit_ac_symbol(ac_tbl_no' (r << 4) + 1);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,encode_mcu_AC_refine,The following statement contains a magic number: m_next_restart_num &= 7;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,jpeg_make_c_derived_tbl,The following statement contains a magic number: char[] huffsize = new char[257];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,jpeg_make_c_derived_tbl,The following statement contains a magic number: p + i > 256
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,jpeg_make_c_derived_tbl,The following statement contains a magic number: l <= 16
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,jpeg_make_c_derived_tbl,The following statement contains a magic number: int[] huffcode = new int[257];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,jpeg_make_c_derived_tbl,The following statement contains a magic number: int maxsymbol = isDC ? 15 : 255;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,jpeg_make_c_derived_tbl,The following statement contains a magic number: int maxsymbol = isDC ? 15 : 255;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,jpeg_gen_optimal_table,The following statement contains a magic number: const int MAX_CLEN = 32;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,jpeg_gen_optimal_table,The following statement contains a magic number: int[] codesize = new int[257];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,jpeg_gen_optimal_table,The following statement contains a magic number: int[] others = new int[257];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,jpeg_gen_optimal_table,The following statement contains a magic number: i < 257
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,jpeg_gen_optimal_table,The following statement contains a magic number: freq[256] = 1;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,jpeg_gen_optimal_table,The following statement contains a magic number: v = 1000000000L;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,jpeg_gen_optimal_table,The following statement contains a magic number: i <= 256
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,jpeg_gen_optimal_table,The following statement contains a magic number: v = 1000000000L;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,jpeg_gen_optimal_table,The following statement contains a magic number: i <= 256
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,jpeg_gen_optimal_table,The following statement contains a magic number: i <= 256
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,jpeg_gen_optimal_table,The following statement contains a magic number: j = i - 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,jpeg_gen_optimal_table,The following statement contains a magic number: bits[i] -= 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,jpeg_gen_optimal_table,The following statement contains a magic number: bits[j + 1] += 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,jpeg_gen_optimal_table,The following statement contains a magic number: i > 16
Magic Number,BitMiracle.LibJpeg.Classic.Internal,huff_entropy_encoder,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\huff_entropy_encoder.cs,jpeg_gen_optimal_table,The following statement contains a magic number: j <= 255
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,jpeg_color_converter,The following statement contains a magic number: switch (cinfo.m_in_color_space)              {                  case J_COLOR_SPACE.JCS_GRAYSCALE:                      if (cinfo.m_input_components != 1)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_IN_COLORSPACE);                      break;                    case J_COLOR_SPACE.JCS_RGB:                  case J_COLOR_SPACE.JCS_BG_RGB:                      if (cinfo.m_input_components != JpegConstants.RGB_PIXELSIZE)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_IN_COLORSPACE);                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                  case J_COLOR_SPACE.JCS_BG_YCC:                      if (cinfo.m_input_components != 3)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_IN_COLORSPACE);                      break;                    case J_COLOR_SPACE.JCS_CMYK:                  case J_COLOR_SPACE.JCS_YCCK:                      if (cinfo.m_input_components != 4)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_IN_COLORSPACE);                      break;                    default:                      /* JCS_UNKNOWN can be anything */                      if (cinfo.m_input_components < 1)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_IN_COLORSPACE);                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,jpeg_color_converter,The following statement contains a magic number: switch (cinfo.m_in_color_space)              {                  case J_COLOR_SPACE.JCS_GRAYSCALE:                      if (cinfo.m_input_components != 1)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_IN_COLORSPACE);                      break;                    case J_COLOR_SPACE.JCS_RGB:                  case J_COLOR_SPACE.JCS_BG_RGB:                      if (cinfo.m_input_components != JpegConstants.RGB_PIXELSIZE)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_IN_COLORSPACE);                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                  case J_COLOR_SPACE.JCS_BG_YCC:                      if (cinfo.m_input_components != 3)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_IN_COLORSPACE);                      break;                    case J_COLOR_SPACE.JCS_CMYK:                  case J_COLOR_SPACE.JCS_YCCK:                      if (cinfo.m_input_components != 4)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_IN_COLORSPACE);                      break;                    default:                      /* JCS_UNKNOWN can be anything */                      if (cinfo.m_input_components < 1)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_IN_COLORSPACE);                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,jpeg_color_converter,The following statement contains a magic number: switch (cinfo.m_jpeg_color_space)              {                  case J_COLOR_SPACE.JCS_GRAYSCALE:                      if (cinfo.m_num_components != 1)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        switch (cinfo.m_in_color_space)                      {                          case J_COLOR_SPACE.JCS_GRAYSCALE:                          case J_COLOR_SPACE.JCS_YCbCr:                          case J_COLOR_SPACE.JCS_BG_YCC:                              color_convert = grayscale_convert;                              break;                            case J_COLOR_SPACE.JCS_RGB:                              m_useNullStart = false; // use rgb_ycc_start                              color_convert = rgb_gray_convert;                              break;                            default:                              cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                              break;                      }                      break;                    case J_COLOR_SPACE.JCS_RGB:                  case J_COLOR_SPACE.JCS_BG_RGB:                      if (cinfo.m_num_components != 3)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        if (cinfo.m_in_color_space == cinfo.Jpeg_color_space)                      {                          switch (cinfo.color_transform)                          {                              case J_COLOR_TRANSFORM.JCT_NONE:                                  color_convert = rgb_convert;                                  break;                              case J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN:                                  color_convert = rgb_rgb1_convert;                                  break;                              default:                                  cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                                  break;                          }                      }                      else                      {                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                      }                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                      if (cinfo.m_num_components != 3)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        switch (cinfo.m_in_color_space)                      {                          case J_COLOR_SPACE.JCS_RGB:                              m_useNullStart = false; // use rgb_ycc_start                              color_convert = rgb_ycc_convert;                              break;                            case J_COLOR_SPACE.JCS_YCbCr:                              color_convert = null_convert;                              break;                            default:                              cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                              break;                      }                      break;                    case J_COLOR_SPACE.JCS_BG_YCC:                      if (cinfo.m_num_components != 3)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        switch (cinfo.m_in_color_space)                      {                          case J_COLOR_SPACE.JCS_RGB:                              /* For conversion from normal RGB input to BG_YCC representation'                               * the Cb/Cr values are first computed as usual' and then                               * quantized further after DCT processing by a factor of                               * 2 in reference to the nominal quantization factor.                               */                              /* need quantization scale by factor of 2 after DCT */                              cinfo.Component_info[1].component_needed = true;                              cinfo.Component_info[2].component_needed = true;                              /* compute normal YCC first */                              m_useNullStart = false; // use rgb_ycc_start                              color_convert = rgb_ycc_convert;                              break;                          case J_COLOR_SPACE.JCS_YCbCr:                              /* need quantization scale by factor of 2 after DCT */                              cinfo.Component_info[1].component_needed = true;                              cinfo.Component_info[2].component_needed = true;                              color_convert = null_convert;                              break;                          case J_COLOR_SPACE.JCS_BG_YCC:                              /* Pass through for BG_YCC input */                              color_convert = null_convert;                              break;                          default:                              cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                              break;                      }                      break;                    case J_COLOR_SPACE.JCS_CMYK:                      if (cinfo.m_num_components != 4)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        if (cinfo.m_in_color_space == J_COLOR_SPACE.JCS_CMYK)                          color_convert = null_convert;                      else                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                      break;                    case J_COLOR_SPACE.JCS_YCCK:                      if (cinfo.m_num_components != 4)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        switch (cinfo.m_in_color_space)                      {                          case J_COLOR_SPACE.JCS_CMYK:                              m_useNullStart = false; // use rgb_ycc_start                              color_convert = cmyk_ycck_convert;                              break;                            case J_COLOR_SPACE.JCS_YCCK:                              color_convert = null_convert;                              break;                            default:                              cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                              break;                      }                      break;                    default:                      /* allow null conversion of JCS_UNKNOWN */                      if (cinfo.m_jpeg_color_space != cinfo.m_in_color_space || cinfo.m_num_components != cinfo.m_input_components)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                        color_convert = null_convert;                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,jpeg_color_converter,The following statement contains a magic number: switch (cinfo.m_jpeg_color_space)              {                  case J_COLOR_SPACE.JCS_GRAYSCALE:                      if (cinfo.m_num_components != 1)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        switch (cinfo.m_in_color_space)                      {                          case J_COLOR_SPACE.JCS_GRAYSCALE:                          case J_COLOR_SPACE.JCS_YCbCr:                          case J_COLOR_SPACE.JCS_BG_YCC:                              color_convert = grayscale_convert;                              break;                            case J_COLOR_SPACE.JCS_RGB:                              m_useNullStart = false; // use rgb_ycc_start                              color_convert = rgb_gray_convert;                              break;                            default:                              cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                              break;                      }                      break;                    case J_COLOR_SPACE.JCS_RGB:                  case J_COLOR_SPACE.JCS_BG_RGB:                      if (cinfo.m_num_components != 3)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        if (cinfo.m_in_color_space == cinfo.Jpeg_color_space)                      {                          switch (cinfo.color_transform)                          {                              case J_COLOR_TRANSFORM.JCT_NONE:                                  color_convert = rgb_convert;                                  break;                              case J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN:                                  color_convert = rgb_rgb1_convert;                                  break;                              default:                                  cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                                  break;                          }                      }                      else                      {                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                      }                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                      if (cinfo.m_num_components != 3)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        switch (cinfo.m_in_color_space)                      {                          case J_COLOR_SPACE.JCS_RGB:                              m_useNullStart = false; // use rgb_ycc_start                              color_convert = rgb_ycc_convert;                              break;                            case J_COLOR_SPACE.JCS_YCbCr:                              color_convert = null_convert;                              break;                            default:                              cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                              break;                      }                      break;                    case J_COLOR_SPACE.JCS_BG_YCC:                      if (cinfo.m_num_components != 3)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        switch (cinfo.m_in_color_space)                      {                          case J_COLOR_SPACE.JCS_RGB:                              /* For conversion from normal RGB input to BG_YCC representation'                               * the Cb/Cr values are first computed as usual' and then                               * quantized further after DCT processing by a factor of                               * 2 in reference to the nominal quantization factor.                               */                              /* need quantization scale by factor of 2 after DCT */                              cinfo.Component_info[1].component_needed = true;                              cinfo.Component_info[2].component_needed = true;                              /* compute normal YCC first */                              m_useNullStart = false; // use rgb_ycc_start                              color_convert = rgb_ycc_convert;                              break;                          case J_COLOR_SPACE.JCS_YCbCr:                              /* need quantization scale by factor of 2 after DCT */                              cinfo.Component_info[1].component_needed = true;                              cinfo.Component_info[2].component_needed = true;                              color_convert = null_convert;                              break;                          case J_COLOR_SPACE.JCS_BG_YCC:                              /* Pass through for BG_YCC input */                              color_convert = null_convert;                              break;                          default:                              cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                              break;                      }                      break;                    case J_COLOR_SPACE.JCS_CMYK:                      if (cinfo.m_num_components != 4)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        if (cinfo.m_in_color_space == J_COLOR_SPACE.JCS_CMYK)                          color_convert = null_convert;                      else                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                      break;                    case J_COLOR_SPACE.JCS_YCCK:                      if (cinfo.m_num_components != 4)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        switch (cinfo.m_in_color_space)                      {                          case J_COLOR_SPACE.JCS_CMYK:                              m_useNullStart = false; // use rgb_ycc_start                              color_convert = cmyk_ycck_convert;                              break;                            case J_COLOR_SPACE.JCS_YCCK:                              color_convert = null_convert;                              break;                            default:                              cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                              break;                      }                      break;                    default:                      /* allow null conversion of JCS_UNKNOWN */                      if (cinfo.m_jpeg_color_space != cinfo.m_in_color_space || cinfo.m_num_components != cinfo.m_input_components)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                        color_convert = null_convert;                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,jpeg_color_converter,The following statement contains a magic number: switch (cinfo.m_jpeg_color_space)              {                  case J_COLOR_SPACE.JCS_GRAYSCALE:                      if (cinfo.m_num_components != 1)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        switch (cinfo.m_in_color_space)                      {                          case J_COLOR_SPACE.JCS_GRAYSCALE:                          case J_COLOR_SPACE.JCS_YCbCr:                          case J_COLOR_SPACE.JCS_BG_YCC:                              color_convert = grayscale_convert;                              break;                            case J_COLOR_SPACE.JCS_RGB:                              m_useNullStart = false; // use rgb_ycc_start                              color_convert = rgb_gray_convert;                              break;                            default:                              cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                              break;                      }                      break;                    case J_COLOR_SPACE.JCS_RGB:                  case J_COLOR_SPACE.JCS_BG_RGB:                      if (cinfo.m_num_components != 3)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        if (cinfo.m_in_color_space == cinfo.Jpeg_color_space)                      {                          switch (cinfo.color_transform)                          {                              case J_COLOR_TRANSFORM.JCT_NONE:                                  color_convert = rgb_convert;                                  break;                              case J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN:                                  color_convert = rgb_rgb1_convert;                                  break;                              default:                                  cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                                  break;                          }                      }                      else                      {                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                      }                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                      if (cinfo.m_num_components != 3)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        switch (cinfo.m_in_color_space)                      {                          case J_COLOR_SPACE.JCS_RGB:                              m_useNullStart = false; // use rgb_ycc_start                              color_convert = rgb_ycc_convert;                              break;                            case J_COLOR_SPACE.JCS_YCbCr:                              color_convert = null_convert;                              break;                            default:                              cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                              break;                      }                      break;                    case J_COLOR_SPACE.JCS_BG_YCC:                      if (cinfo.m_num_components != 3)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        switch (cinfo.m_in_color_space)                      {                          case J_COLOR_SPACE.JCS_RGB:                              /* For conversion from normal RGB input to BG_YCC representation'                               * the Cb/Cr values are first computed as usual' and then                               * quantized further after DCT processing by a factor of                               * 2 in reference to the nominal quantization factor.                               */                              /* need quantization scale by factor of 2 after DCT */                              cinfo.Component_info[1].component_needed = true;                              cinfo.Component_info[2].component_needed = true;                              /* compute normal YCC first */                              m_useNullStart = false; // use rgb_ycc_start                              color_convert = rgb_ycc_convert;                              break;                          case J_COLOR_SPACE.JCS_YCbCr:                              /* need quantization scale by factor of 2 after DCT */                              cinfo.Component_info[1].component_needed = true;                              cinfo.Component_info[2].component_needed = true;                              color_convert = null_convert;                              break;                          case J_COLOR_SPACE.JCS_BG_YCC:                              /* Pass through for BG_YCC input */                              color_convert = null_convert;                              break;                          default:                              cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                              break;                      }                      break;                    case J_COLOR_SPACE.JCS_CMYK:                      if (cinfo.m_num_components != 4)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        if (cinfo.m_in_color_space == J_COLOR_SPACE.JCS_CMYK)                          color_convert = null_convert;                      else                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                      break;                    case J_COLOR_SPACE.JCS_YCCK:                      if (cinfo.m_num_components != 4)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        switch (cinfo.m_in_color_space)                      {                          case J_COLOR_SPACE.JCS_CMYK:                              m_useNullStart = false; // use rgb_ycc_start                              color_convert = cmyk_ycck_convert;                              break;                            case J_COLOR_SPACE.JCS_YCCK:                              color_convert = null_convert;                              break;                            default:                              cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                              break;                      }                      break;                    default:                      /* allow null conversion of JCS_UNKNOWN */                      if (cinfo.m_jpeg_color_space != cinfo.m_in_color_space || cinfo.m_num_components != cinfo.m_input_components)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                        color_convert = null_convert;                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,jpeg_color_converter,The following statement contains a magic number: switch (cinfo.m_jpeg_color_space)              {                  case J_COLOR_SPACE.JCS_GRAYSCALE:                      if (cinfo.m_num_components != 1)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        switch (cinfo.m_in_color_space)                      {                          case J_COLOR_SPACE.JCS_GRAYSCALE:                          case J_COLOR_SPACE.JCS_YCbCr:                          case J_COLOR_SPACE.JCS_BG_YCC:                              color_convert = grayscale_convert;                              break;                            case J_COLOR_SPACE.JCS_RGB:                              m_useNullStart = false; // use rgb_ycc_start                              color_convert = rgb_gray_convert;                              break;                            default:                              cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                              break;                      }                      break;                    case J_COLOR_SPACE.JCS_RGB:                  case J_COLOR_SPACE.JCS_BG_RGB:                      if (cinfo.m_num_components != 3)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        if (cinfo.m_in_color_space == cinfo.Jpeg_color_space)                      {                          switch (cinfo.color_transform)                          {                              case J_COLOR_TRANSFORM.JCT_NONE:                                  color_convert = rgb_convert;                                  break;                              case J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN:                                  color_convert = rgb_rgb1_convert;                                  break;                              default:                                  cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                                  break;                          }                      }                      else                      {                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                      }                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                      if (cinfo.m_num_components != 3)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        switch (cinfo.m_in_color_space)                      {                          case J_COLOR_SPACE.JCS_RGB:                              m_useNullStart = false; // use rgb_ycc_start                              color_convert = rgb_ycc_convert;                              break;                            case J_COLOR_SPACE.JCS_YCbCr:                              color_convert = null_convert;                              break;                            default:                              cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                              break;                      }                      break;                    case J_COLOR_SPACE.JCS_BG_YCC:                      if (cinfo.m_num_components != 3)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        switch (cinfo.m_in_color_space)                      {                          case J_COLOR_SPACE.JCS_RGB:                              /* For conversion from normal RGB input to BG_YCC representation'                               * the Cb/Cr values are first computed as usual' and then                               * quantized further after DCT processing by a factor of                               * 2 in reference to the nominal quantization factor.                               */                              /* need quantization scale by factor of 2 after DCT */                              cinfo.Component_info[1].component_needed = true;                              cinfo.Component_info[2].component_needed = true;                              /* compute normal YCC first */                              m_useNullStart = false; // use rgb_ycc_start                              color_convert = rgb_ycc_convert;                              break;                          case J_COLOR_SPACE.JCS_YCbCr:                              /* need quantization scale by factor of 2 after DCT */                              cinfo.Component_info[1].component_needed = true;                              cinfo.Component_info[2].component_needed = true;                              color_convert = null_convert;                              break;                          case J_COLOR_SPACE.JCS_BG_YCC:                              /* Pass through for BG_YCC input */                              color_convert = null_convert;                              break;                          default:                              cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                              break;                      }                      break;                    case J_COLOR_SPACE.JCS_CMYK:                      if (cinfo.m_num_components != 4)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        if (cinfo.m_in_color_space == J_COLOR_SPACE.JCS_CMYK)                          color_convert = null_convert;                      else                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                      break;                    case J_COLOR_SPACE.JCS_YCCK:                      if (cinfo.m_num_components != 4)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        switch (cinfo.m_in_color_space)                      {                          case J_COLOR_SPACE.JCS_CMYK:                              m_useNullStart = false; // use rgb_ycc_start                              color_convert = cmyk_ycck_convert;                              break;                            case J_COLOR_SPACE.JCS_YCCK:                              color_convert = null_convert;                              break;                            default:                              cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                              break;                      }                      break;                    default:                      /* allow null conversion of JCS_UNKNOWN */                      if (cinfo.m_jpeg_color_space != cinfo.m_in_color_space || cinfo.m_num_components != cinfo.m_input_components)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                        color_convert = null_convert;                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,jpeg_color_converter,The following statement contains a magic number: switch (cinfo.m_jpeg_color_space)              {                  case J_COLOR_SPACE.JCS_GRAYSCALE:                      if (cinfo.m_num_components != 1)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        switch (cinfo.m_in_color_space)                      {                          case J_COLOR_SPACE.JCS_GRAYSCALE:                          case J_COLOR_SPACE.JCS_YCbCr:                          case J_COLOR_SPACE.JCS_BG_YCC:                              color_convert = grayscale_convert;                              break;                            case J_COLOR_SPACE.JCS_RGB:                              m_useNullStart = false; // use rgb_ycc_start                              color_convert = rgb_gray_convert;                              break;                            default:                              cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                              break;                      }                      break;                    case J_COLOR_SPACE.JCS_RGB:                  case J_COLOR_SPACE.JCS_BG_RGB:                      if (cinfo.m_num_components != 3)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        if (cinfo.m_in_color_space == cinfo.Jpeg_color_space)                      {                          switch (cinfo.color_transform)                          {                              case J_COLOR_TRANSFORM.JCT_NONE:                                  color_convert = rgb_convert;                                  break;                              case J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN:                                  color_convert = rgb_rgb1_convert;                                  break;                              default:                                  cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                                  break;                          }                      }                      else                      {                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                      }                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                      if (cinfo.m_num_components != 3)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        switch (cinfo.m_in_color_space)                      {                          case J_COLOR_SPACE.JCS_RGB:                              m_useNullStart = false; // use rgb_ycc_start                              color_convert = rgb_ycc_convert;                              break;                            case J_COLOR_SPACE.JCS_YCbCr:                              color_convert = null_convert;                              break;                            default:                              cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                              break;                      }                      break;                    case J_COLOR_SPACE.JCS_BG_YCC:                      if (cinfo.m_num_components != 3)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        switch (cinfo.m_in_color_space)                      {                          case J_COLOR_SPACE.JCS_RGB:                              /* For conversion from normal RGB input to BG_YCC representation'                               * the Cb/Cr values are first computed as usual' and then                               * quantized further after DCT processing by a factor of                               * 2 in reference to the nominal quantization factor.                               */                              /* need quantization scale by factor of 2 after DCT */                              cinfo.Component_info[1].component_needed = true;                              cinfo.Component_info[2].component_needed = true;                              /* compute normal YCC first */                              m_useNullStart = false; // use rgb_ycc_start                              color_convert = rgb_ycc_convert;                              break;                          case J_COLOR_SPACE.JCS_YCbCr:                              /* need quantization scale by factor of 2 after DCT */                              cinfo.Component_info[1].component_needed = true;                              cinfo.Component_info[2].component_needed = true;                              color_convert = null_convert;                              break;                          case J_COLOR_SPACE.JCS_BG_YCC:                              /* Pass through for BG_YCC input */                              color_convert = null_convert;                              break;                          default:                              cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                              break;                      }                      break;                    case J_COLOR_SPACE.JCS_CMYK:                      if (cinfo.m_num_components != 4)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        if (cinfo.m_in_color_space == J_COLOR_SPACE.JCS_CMYK)                          color_convert = null_convert;                      else                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                      break;                    case J_COLOR_SPACE.JCS_YCCK:                      if (cinfo.m_num_components != 4)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        switch (cinfo.m_in_color_space)                      {                          case J_COLOR_SPACE.JCS_CMYK:                              m_useNullStart = false; // use rgb_ycc_start                              color_convert = cmyk_ycck_convert;                              break;                            case J_COLOR_SPACE.JCS_YCCK:                              color_convert = null_convert;                              break;                            default:                              cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                              break;                      }                      break;                    default:                      /* allow null conversion of JCS_UNKNOWN */                      if (cinfo.m_jpeg_color_space != cinfo.m_in_color_space || cinfo.m_num_components != cinfo.m_input_components)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                        color_convert = null_convert;                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,jpeg_color_converter,The following statement contains a magic number: switch (cinfo.m_jpeg_color_space)              {                  case J_COLOR_SPACE.JCS_GRAYSCALE:                      if (cinfo.m_num_components != 1)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        switch (cinfo.m_in_color_space)                      {                          case J_COLOR_SPACE.JCS_GRAYSCALE:                          case J_COLOR_SPACE.JCS_YCbCr:                          case J_COLOR_SPACE.JCS_BG_YCC:                              color_convert = grayscale_convert;                              break;                            case J_COLOR_SPACE.JCS_RGB:                              m_useNullStart = false; // use rgb_ycc_start                              color_convert = rgb_gray_convert;                              break;                            default:                              cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                              break;                      }                      break;                    case J_COLOR_SPACE.JCS_RGB:                  case J_COLOR_SPACE.JCS_BG_RGB:                      if (cinfo.m_num_components != 3)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        if (cinfo.m_in_color_space == cinfo.Jpeg_color_space)                      {                          switch (cinfo.color_transform)                          {                              case J_COLOR_TRANSFORM.JCT_NONE:                                  color_convert = rgb_convert;                                  break;                              case J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN:                                  color_convert = rgb_rgb1_convert;                                  break;                              default:                                  cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                                  break;                          }                      }                      else                      {                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                      }                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                      if (cinfo.m_num_components != 3)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        switch (cinfo.m_in_color_space)                      {                          case J_COLOR_SPACE.JCS_RGB:                              m_useNullStart = false; // use rgb_ycc_start                              color_convert = rgb_ycc_convert;                              break;                            case J_COLOR_SPACE.JCS_YCbCr:                              color_convert = null_convert;                              break;                            default:                              cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                              break;                      }                      break;                    case J_COLOR_SPACE.JCS_BG_YCC:                      if (cinfo.m_num_components != 3)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        switch (cinfo.m_in_color_space)                      {                          case J_COLOR_SPACE.JCS_RGB:                              /* For conversion from normal RGB input to BG_YCC representation'                               * the Cb/Cr values are first computed as usual' and then                               * quantized further after DCT processing by a factor of                               * 2 in reference to the nominal quantization factor.                               */                              /* need quantization scale by factor of 2 after DCT */                              cinfo.Component_info[1].component_needed = true;                              cinfo.Component_info[2].component_needed = true;                              /* compute normal YCC first */                              m_useNullStart = false; // use rgb_ycc_start                              color_convert = rgb_ycc_convert;                              break;                          case J_COLOR_SPACE.JCS_YCbCr:                              /* need quantization scale by factor of 2 after DCT */                              cinfo.Component_info[1].component_needed = true;                              cinfo.Component_info[2].component_needed = true;                              color_convert = null_convert;                              break;                          case J_COLOR_SPACE.JCS_BG_YCC:                              /* Pass through for BG_YCC input */                              color_convert = null_convert;                              break;                          default:                              cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                              break;                      }                      break;                    case J_COLOR_SPACE.JCS_CMYK:                      if (cinfo.m_num_components != 4)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        if (cinfo.m_in_color_space == J_COLOR_SPACE.JCS_CMYK)                          color_convert = null_convert;                      else                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                      break;                    case J_COLOR_SPACE.JCS_YCCK:                      if (cinfo.m_num_components != 4)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        switch (cinfo.m_in_color_space)                      {                          case J_COLOR_SPACE.JCS_CMYK:                              m_useNullStart = false; // use rgb_ycc_start                              color_convert = cmyk_ycck_convert;                              break;                            case J_COLOR_SPACE.JCS_YCCK:                              color_convert = null_convert;                              break;                            default:                              cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                              break;                      }                      break;                    default:                      /* allow null conversion of JCS_UNKNOWN */                      if (cinfo.m_jpeg_color_space != cinfo.m_in_color_space || cinfo.m_num_components != cinfo.m_input_components)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                        color_convert = null_convert;                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,jpeg_color_converter,The following statement contains a magic number: switch (cinfo.m_jpeg_color_space)              {                  case J_COLOR_SPACE.JCS_GRAYSCALE:                      if (cinfo.m_num_components != 1)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        switch (cinfo.m_in_color_space)                      {                          case J_COLOR_SPACE.JCS_GRAYSCALE:                          case J_COLOR_SPACE.JCS_YCbCr:                          case J_COLOR_SPACE.JCS_BG_YCC:                              color_convert = grayscale_convert;                              break;                            case J_COLOR_SPACE.JCS_RGB:                              m_useNullStart = false; // use rgb_ycc_start                              color_convert = rgb_gray_convert;                              break;                            default:                              cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                              break;                      }                      break;                    case J_COLOR_SPACE.JCS_RGB:                  case J_COLOR_SPACE.JCS_BG_RGB:                      if (cinfo.m_num_components != 3)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        if (cinfo.m_in_color_space == cinfo.Jpeg_color_space)                      {                          switch (cinfo.color_transform)                          {                              case J_COLOR_TRANSFORM.JCT_NONE:                                  color_convert = rgb_convert;                                  break;                              case J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN:                                  color_convert = rgb_rgb1_convert;                                  break;                              default:                                  cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                                  break;                          }                      }                      else                      {                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                      }                      break;                    case J_COLOR_SPACE.JCS_YCbCr:                      if (cinfo.m_num_components != 3)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        switch (cinfo.m_in_color_space)                      {                          case J_COLOR_SPACE.JCS_RGB:                              m_useNullStart = false; // use rgb_ycc_start                              color_convert = rgb_ycc_convert;                              break;                            case J_COLOR_SPACE.JCS_YCbCr:                              color_convert = null_convert;                              break;                            default:                              cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                              break;                      }                      break;                    case J_COLOR_SPACE.JCS_BG_YCC:                      if (cinfo.m_num_components != 3)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        switch (cinfo.m_in_color_space)                      {                          case J_COLOR_SPACE.JCS_RGB:                              /* For conversion from normal RGB input to BG_YCC representation'                               * the Cb/Cr values are first computed as usual' and then                               * quantized further after DCT processing by a factor of                               * 2 in reference to the nominal quantization factor.                               */                              /* need quantization scale by factor of 2 after DCT */                              cinfo.Component_info[1].component_needed = true;                              cinfo.Component_info[2].component_needed = true;                              /* compute normal YCC first */                              m_useNullStart = false; // use rgb_ycc_start                              color_convert = rgb_ycc_convert;                              break;                          case J_COLOR_SPACE.JCS_YCbCr:                              /* need quantization scale by factor of 2 after DCT */                              cinfo.Component_info[1].component_needed = true;                              cinfo.Component_info[2].component_needed = true;                              color_convert = null_convert;                              break;                          case J_COLOR_SPACE.JCS_BG_YCC:                              /* Pass through for BG_YCC input */                              color_convert = null_convert;                              break;                          default:                              cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                              break;                      }                      break;                    case J_COLOR_SPACE.JCS_CMYK:                      if (cinfo.m_num_components != 4)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        if (cinfo.m_in_color_space == J_COLOR_SPACE.JCS_CMYK)                          color_convert = null_convert;                      else                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                      break;                    case J_COLOR_SPACE.JCS_YCCK:                      if (cinfo.m_num_components != 4)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                        switch (cinfo.m_in_color_space)                      {                          case J_COLOR_SPACE.JCS_CMYK:                              m_useNullStart = false; // use rgb_ycc_start                              color_convert = cmyk_ycck_convert;                              break;                            case J_COLOR_SPACE.JCS_YCCK:                              color_convert = null_convert;                              break;                            default:                              cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                              break;                      }                      break;                    default:                      /* allow null conversion of JCS_UNKNOWN */                      if (cinfo.m_jpeg_color_space != cinfo.m_in_color_space || cinfo.m_num_components != cinfo.m_input_components)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                        color_convert = null_convert;                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,rgb_ycc_start,The following statement contains a magic number: m_rgb_ycc_tab[i + R_Y_OFF] = FIX(0.299) * i;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,rgb_ycc_start,The following statement contains a magic number: m_rgb_ycc_tab[i + G_Y_OFF] = FIX(0.587) * i;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,rgb_ycc_start,The following statement contains a magic number: m_rgb_ycc_tab[i + B_Y_OFF] = FIX(0.114) * i + ONE_HALF;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,rgb_ycc_start,The following statement contains a magic number: m_rgb_ycc_tab[i + R_CB_OFF] = (-FIX(0.168735892)) * i;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,rgb_ycc_start,The following statement contains a magic number: m_rgb_ycc_tab[i + G_CB_OFF] = (-FIX(0.331264108)) * i;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,rgb_ycc_start,The following statement contains a magic number: m_rgb_ycc_tab[i + B_CB_OFF] = FIX(0.5) * i + CBCR_OFFSET + ONE_HALF - 1;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,rgb_ycc_start,The following statement contains a magic number: m_rgb_ycc_tab[i + G_CR_OFF] = (-FIX(0.418687589)) * i;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,rgb_ycc_start,The following statement contains a magic number: m_rgb_ycc_tab[i + B_CR_OFF] = (-FIX(0.081312411)) * i;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,FIX,The following statement contains a magic number: return (int)(x * (1L << SCALEBITS) + 0.5);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,rgb_ycc_convert,The following statement contains a magic number: output_buf[2][output_row][col] = (byte)((m_rgb_ycc_tab[r + R_CR_OFF] + m_rgb_ycc_tab[g + G_CR_OFF] + m_rgb_ycc_tab[b + B_CR_OFF]) >> SCALEBITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,cmyk_ycck_convert,The following statement contains a magic number: int b = JpegConstants.MAXJSAMPLE - input_buf[input_row + row][columnOffset + 2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,cmyk_ycck_convert,The following statement contains a magic number: output_buf[3][output_row][col] = input_buf[input_row + row][columnOffset + 3];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,cmyk_ycck_convert,The following statement contains a magic number: output_buf[3][output_row][col] = input_buf[input_row + row][columnOffset + 3];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,cmyk_ycck_convert,The following statement contains a magic number: columnOffset += 4;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,cmyk_ycck_convert,The following statement contains a magic number: output_buf[2][output_row][col] = (byte)((m_rgb_ycc_tab[r + R_CR_OFF] + m_rgb_ycc_tab[g + G_CR_OFF] + m_rgb_ycc_tab[b + B_CR_OFF]) >> SCALEBITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,rgb_rgb1_convert,The following statement contains a magic number: int b = input_buf[input_row + row][columnOffset + 2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,rgb_rgb1_convert,The following statement contains a magic number: output_buf[2][output_row][col] = (byte)((b - g + JpegConstants.CENTERJSAMPLE) & JpegConstants.MAXJSAMPLE);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,rgb_convert,The following statement contains a magic number: output_buf[2][output_row][col] = input_buf[input_row + row][columnOffset + 2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_converter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_converter.cs,rgb_convert,The following statement contains a magic number: output_buf[2][output_row][col] = input_buf[input_row + row][columnOffset + 2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,jpeg_color_deconverter,The following statement contains a magic number: switch (cinfo.m_jpeg_color_space)              {                  case J_COLOR_SPACE.JCS_GRAYSCALE:                      if (cinfo.m_num_components != 1)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;                    case J_COLOR_SPACE.JCS_RGB:                  case J_COLOR_SPACE.JCS_YCbCr:                  case J_COLOR_SPACE.JCS_BG_RGB:                  case J_COLOR_SPACE.JCS_BG_YCC:                      if (cinfo.m_num_components != 3)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;                    case J_COLOR_SPACE.JCS_CMYK:                  case J_COLOR_SPACE.JCS_YCCK:                      if (cinfo.m_num_components != 4)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;                    case J_COLOR_SPACE.JCS_NCHANNEL:                      if (cinfo.m_num_components < 1)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;                    default:                      /* JCS_UNKNOWN can be anything */                      if (cinfo.m_num_components < 1)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,jpeg_color_deconverter,The following statement contains a magic number: switch (cinfo.m_jpeg_color_space)              {                  case J_COLOR_SPACE.JCS_GRAYSCALE:                      if (cinfo.m_num_components != 1)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;                    case J_COLOR_SPACE.JCS_RGB:                  case J_COLOR_SPACE.JCS_YCbCr:                  case J_COLOR_SPACE.JCS_BG_RGB:                  case J_COLOR_SPACE.JCS_BG_YCC:                      if (cinfo.m_num_components != 3)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;                    case J_COLOR_SPACE.JCS_CMYK:                  case J_COLOR_SPACE.JCS_YCCK:                      if (cinfo.m_num_components != 4)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;                    case J_COLOR_SPACE.JCS_NCHANNEL:                      if (cinfo.m_num_components < 1)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;                    default:                      /* JCS_UNKNOWN can be anything */                      if (cinfo.m_num_components < 1)                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE);                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,jpeg_color_deconverter,The following statement contains a magic number: switch (cinfo.m_out_color_space)              {                  case J_COLOR_SPACE.JCS_GRAYSCALE:                      cinfo.m_out_color_components = 1;                      switch (cinfo.m_jpeg_color_space)                      {                          case J_COLOR_SPACE.JCS_GRAYSCALE:                          case J_COLOR_SPACE.JCS_YCbCr:                          case J_COLOR_SPACE.JCS_BG_YCC:                              m_converter = grayscale_convert;                              /* For color->grayscale conversion' only the Y (0) component is needed */                              for (int ci = 1; ci < cinfo.m_num_components; ci++)                                  cinfo.Comp_info[ci].component_needed = false;                              break;                            case J_COLOR_SPACE.JCS_RGB:                              switch (cinfo.color_transform)                              {                                  case J_COLOR_TRANSFORM.JCT_NONE:                                      m_converter = rgb_gray_convert;                                      break;                                    case J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN:                                      m_converter = rgb1_gray_convert;                                      break;                                    default:                                      cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                                      break;                              }                                build_rgb_y_table();                              break;                            default:                              cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                              break;                      }                      break;                    case J_COLOR_SPACE.JCS_RGB:                      cinfo.m_out_color_components = JpegConstants.RGB_PIXELSIZE;                      switch (cinfo.m_jpeg_color_space)                      {                          case J_COLOR_SPACE.JCS_GRAYSCALE:                              m_converter = gray_rgb_convert;                              break;                            case J_COLOR_SPACE.JCS_YCbCr:                              m_converter = ycc_rgb_convert;                              build_ycc_rgb_table();                              break;                            case J_COLOR_SPACE.JCS_BG_YCC:                              m_converter = ycc_rgb_convert;                              build_bg_ycc_rgb_table();                              break;                            case J_COLOR_SPACE.JCS_RGB:                              switch (cinfo.color_transform)                              {                                  case J_COLOR_TRANSFORM.JCT_NONE:                                      m_converter = rgb_convert;                                      break;                                    case J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN:                                      m_converter = rgb1_rgb_convert;                                      break;                                    default:                                      cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                                      break;                              }                              break;                            case J_COLOR_SPACE.JCS_CMYK:                              m_converter = cmyk_rgb_convert;                              break;                            case J_COLOR_SPACE.JCS_YCCK:                              m_converter = ycck_rgb_convert;                              build_ycc_rgb_table();                              break;                            default:                              cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                              break;                      }                      break;                    case J_COLOR_SPACE.JCS_BG_RGB:                      cinfo.m_out_color_components = JpegConstants.RGB_PIXELSIZE;                      if (cinfo.m_jpeg_color_space == J_COLOR_SPACE.JCS_BG_RGB)                      {                          switch (cinfo.color_transform)                          {                              case J_COLOR_TRANSFORM.JCT_NONE:                                  m_converter = rgb_convert;                                  break;                                case J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN:                                  m_converter = rgb1_rgb_convert;                                  break;                                default:                                  cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                                  break;                          }                      }                      else                      {                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                      }                      break;                    case J_COLOR_SPACE.JCS_CMYK:                      cinfo.m_out_color_components = 4;                      switch (cinfo.m_jpeg_color_space)                      {                          case J_COLOR_SPACE.JCS_YCCK:                              m_converter = ycck_cmyk_convert;                              build_ycc_rgb_table();                              break;                            case J_COLOR_SPACE.JCS_CMYK:                              m_converter = null_convert;                              break;                            default:                              cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                              break;                      }                      break;                    case J_COLOR_SPACE.JCS_NCHANNEL:                      if (cinfo.m_jpeg_color_space == J_COLOR_SPACE.JCS_NCHANNEL)                          m_converter = null_convert;                      else                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                      break;                    default:                      /* Permit null conversion to same output space */                      if (cinfo.m_out_color_space == cinfo.m_jpeg_color_space)                      {                          cinfo.m_out_color_components = cinfo.m_num_components;                          m_converter = null_convert;                      }                      else                      {                          /* unsupported non-null conversion */                          cinfo.ERREXIT(J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL);                      }                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,build_ycc_rgb_table,The following statement contains a magic number: m_Cr_r_tab[i] = JpegUtils.RIGHT_SHIFT(FIX(1.402) * x + ONE_HALF' SCALEBITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,build_ycc_rgb_table,The following statement contains a magic number: m_Cb_b_tab[i] = JpegUtils.RIGHT_SHIFT(FIX(1.772) * x + ONE_HALF' SCALEBITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,build_ycc_rgb_table,The following statement contains a magic number: m_Cr_g_tab[i] = (-FIX(0.714136286)) * x;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,build_ycc_rgb_table,The following statement contains a magic number: m_Cb_g_tab[i] = (-FIX(0.344136286)) * x + ONE_HALF;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,build_bg_ycc_rgb_table,The following statement contains a magic number: m_Cr_r_tab[i] = JpegUtils.RIGHT_SHIFT(FIX(2.804) * x + ONE_HALF' SCALEBITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,build_bg_ycc_rgb_table,The following statement contains a magic number: m_Cb_b_tab[i] = JpegUtils.RIGHT_SHIFT(FIX(3.544) * x + ONE_HALF' SCALEBITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,build_bg_ycc_rgb_table,The following statement contains a magic number: m_Cr_g_tab[i] = (-FIX(1.428272572)) * x;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,build_bg_ycc_rgb_table,The following statement contains a magic number: m_Cb_g_tab[i] = (-FIX(0.688272572)) * x + ONE_HALF;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,ycc_rgb_convert,The following statement contains a magic number: int component2RowOffset = m_perComponentOffsets[2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,ycc_rgb_convert,The following statement contains a magic number: int cr = input_buf[2][input_row + component2RowOffset][col];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,build_rgb_y_table,The following statement contains a magic number: rgb_y_tab[i + R_Y_OFF] = FIX(0.299) * i;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,build_rgb_y_table,The following statement contains a magic number: rgb_y_tab[i + G_Y_OFF] = FIX(0.587) * i;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,build_rgb_y_table,The following statement contains a magic number: rgb_y_tab[i + B_Y_OFF] = FIX(0.114) * i + ONE_HALF;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,rgb_gray_convert,The following statement contains a magic number: int component2RowOffset = m_perComponentOffsets[2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,rgb_gray_convert,The following statement contains a magic number: int b = input_buf[2][input_row + component2RowOffset][col];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,rgb1_rgb_convert,The following statement contains a magic number: int component2RowOffset = m_perComponentOffsets[2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,rgb1_rgb_convert,The following statement contains a magic number: int b = input_buf[2][input_row + component2RowOffset][col];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,rgb1_gray_convert,The following statement contains a magic number: int component2RowOffset = m_perComponentOffsets[2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,rgb1_gray_convert,The following statement contains a magic number: int b = input_buf[2][input_row + component2RowOffset][col];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,rgb_convert,The following statement contains a magic number: int component2RowOffset = m_perComponentOffsets[2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,rgb_convert,The following statement contains a magic number: int b = input_buf[2][input_row + component2RowOffset][col];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,ycck_cmyk_convert,The following statement contains a magic number: int component2RowOffset = m_perComponentOffsets[2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,ycck_cmyk_convert,The following statement contains a magic number: int component3RowOffset = m_perComponentOffsets[3];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,ycck_cmyk_convert,The following statement contains a magic number: int cr = input_buf[2][input_row + component2RowOffset][col];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,ycck_cmyk_convert,The following statement contains a magic number: output_buf[output_row + row][columnOffset + 2] = limit[limitOffset + JpegConstants.MAXJSAMPLE - (y + m_Cb_b_tab[cb])];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,ycck_cmyk_convert,The following statement contains a magic number: output_buf[output_row + row][columnOffset + 3] = input_buf[3][input_row + component3RowOffset][col];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,ycck_cmyk_convert,The following statement contains a magic number: output_buf[output_row + row][columnOffset + 3] = input_buf[3][input_row + component3RowOffset][col];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,ycck_cmyk_convert,The following statement contains a magic number: columnOffset += 4;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,gray_rgb_convert,The following statement contains a magic number: int component2RowOffset = m_perComponentOffsets[2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,cmyk_rgb_convert,The following statement contains a magic number: int component2RowOffset = m_perComponentOffsets[2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,cmyk_rgb_convert,The following statement contains a magic number: int component3RowOffset = m_perComponentOffsets[3];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,cmyk_rgb_convert,The following statement contains a magic number: int y = input_buf[2][input_row + component2RowOffset][col];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,cmyk_rgb_convert,The following statement contains a magic number: int k = input_buf[3][input_row + component3RowOffset][col];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,cmyk_rgb_convert,The following statement contains a magic number: output_buf[output_row + row][columnOffset + JpegConstants.RGB_RED] = (byte)((c * k) / 255);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,cmyk_rgb_convert,The following statement contains a magic number: output_buf[output_row + row][columnOffset + JpegConstants.RGB_GREEN] = (byte)((m * k) / 255);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,cmyk_rgb_convert,The following statement contains a magic number: output_buf[output_row + row][columnOffset + JpegConstants.RGB_BLUE] = (byte)((y * k) / 255);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,ycck_rgb_convert,The following statement contains a magic number: int component2RowOffset = m_perComponentOffsets[2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,ycck_rgb_convert,The following statement contains a magic number: int component3RowOffset = m_perComponentOffsets[3];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,ycck_rgb_convert,The following statement contains a magic number: int cr = input_buf[2][input_row + component2RowOffset][col];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,ycck_rgb_convert,The following statement contains a magic number: int cmyk_k = input_buf[3][input_row + component3RowOffset][col];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,ycck_rgb_convert,The following statement contains a magic number: output_buf[output_row + row][columnOffset + JpegConstants.RGB_RED] = (byte)((cmyk_c * cmyk_k) / 255);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,ycck_rgb_convert,The following statement contains a magic number: output_buf[output_row + row][columnOffset + JpegConstants.RGB_GREEN] = (byte)((cmyk_m * cmyk_k) / 255);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,ycck_rgb_convert,The following statement contains a magic number: output_buf[output_row + row][columnOffset + JpegConstants.RGB_BLUE] = (byte)((cmyk_y * cmyk_k) / 255);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_color_deconverter,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_color_deconverter.cs,FIX,The following statement contains a magic number: return (int)(x * (1L << SCALEBITS) + 0.5);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_comp_master,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_comp_master.cs,jpeg_comp_master,The following statement contains a magic number: m_total_passes = cinfo.m_num_scans * 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_comp_master,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_comp_master.cs,per_scan_setup,The following statement contains a magic number: m_cinfo.m_restart_interval = Math.Min(nominal' 65535);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_c_prep_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_c_prep_controller.cs,start_pass,The following statement contains a magic number: m_next_buf_stop = 2 * m_cinfo.m_max_v_samp_factor;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_c_prep_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_c_prep_controller.cs,create_context_buffer,The following statement contains a magic number: byte[][] fake_buffer = new byte[5 * rgroup_height][];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_c_prep_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_c_prep_controller.cs,create_context_buffer,The following statement contains a magic number: i < 4 * rgroup_height
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_c_prep_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_c_prep_controller.cs,create_context_buffer,The following statement contains a magic number: byte[][] true_buffer = jpeg_common_struct.AllocJpegSamples(samplesPerRow' 3 * rgroup_height);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_c_prep_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_c_prep_controller.cs,create_context_buffer,The following statement contains a magic number: i < 3 * rgroup_height
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_c_prep_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_c_prep_controller.cs,create_context_buffer,The following statement contains a magic number: fake_buffer[i] = true_buffer[2 * rgroup_height + i];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_c_prep_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_c_prep_controller.cs,create_context_buffer,The following statement contains a magic number: fake_buffer[4 * rgroup_height + i] = true_buffer[i];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_c_prep_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_c_prep_controller.cs,pre_process_context,The following statement contains a magic number: int buf_height = m_cinfo.m_max_v_samp_factor * 3;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_decomp_master,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_decomp_master.cs,prepare_for_output_pass,The following statement contains a magic number: m_cinfo.m_progress.Total_passes = m_pass_number + (m_is_dummy_pass ? 2 : 1);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_decomp_master,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_decomp_master.cs,prepare_for_output_pass,The following statement contains a magic number: m_cinfo.m_progress.Total_passes += (m_cinfo.m_enable_2pass_quant ? 2 : 1);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_decomp_master,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_decomp_master.cs,master_selection,The following statement contains a magic number: m_cinfo.m_out_color_components != 3
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_decomp_master,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_decomp_master.cs,master_selection,The following statement contains a magic number: nscans = 2 + 3 * m_cinfo.m_num_components;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_decomp_master,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_decomp_master.cs,master_selection,The following statement contains a magic number: nscans = 2 + 3 * m_cinfo.m_num_components;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_decomp_master,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_decomp_master.cs,master_selection,The following statement contains a magic number: m_cinfo.m_progress.Total_passes = (m_cinfo.m_enable_2pass_quant ? 3 : 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_decomp_master,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_decomp_master.cs,master_selection,The following statement contains a magic number: m_cinfo.m_progress.Total_passes = (m_cinfo.m_enable_2pass_quant ? 3 : 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_decomp_master,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_decomp_master.cs,prepare_range_limit_table,The following statement contains a magic number: byte[] table = new byte[5 * (JpegConstants.MAXJSAMPLE + 1)];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_decomp_master,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_decomp_master.cs,prepare_range_limit_table,The following statement contains a magic number: int tableOffset = 2 * (JpegConstants.MAXJSAMPLE + 1);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_decomp_master,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_decomp_master.cs,prepare_range_limit_table,The following statement contains a magic number: i < 3 * (JpegConstants.MAXJSAMPLE + 1)
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,int_downsample,The following statement contains a magic number: int numpix2 = numpix / 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v1_downsample,The following statement contains a magic number: expand_right_edge(input_data' startInputRow' m_cinfo.m_max_v_samp_factor' m_cinfo.m_image_width' output_cols * 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v1_downsample,The following statement contains a magic number: inputColumn += 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_downsample,The following statement contains a magic number: expand_right_edge(input_data' startInputRow' m_cinfo.m_max_v_samp_factor' m_cinfo.m_image_width' output_cols * 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_downsample,The following statement contains a magic number: output_data[startOutRow + outrow][outcol] = (byte)((                          (int)input_data[startInputRow + inrow][inputColumn] +                          (int)input_data[startInputRow + inrow][inputColumn + 1] +                          (int)input_data[startInputRow + inrow + 1][inputColumn] +                          (int)input_data[startInputRow + inrow + 1][inputColumn + 1] + bias) >> 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_downsample,The following statement contains a magic number: bias ^= 3;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_downsample,The following statement contains a magic number: inputColumn += 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_downsample,The following statement contains a magic number: inrow += 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: expand_right_edge(input_data' startInputRow - 1' m_cinfo.m_max_v_samp_factor + 2' m_cinfo.m_image_width' output_cols * 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: expand_right_edge(input_data' startInputRow - 1' m_cinfo.m_max_v_samp_factor + 2' m_cinfo.m_image_width' output_cols * 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: int memberscale = 16384 - m_cinfo.m_smoothing_factor * 80;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: int memberscale = 16384 - m_cinfo.m_smoothing_factor * 80;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: int neighscale = m_cinfo.m_smoothing_factor * 16;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: int neighsum = input_data[startInputRow + inrow - 1][aboveIndex] +                      input_data[startInputRow + inrow - 1][aboveIndex + 1] +                      input_data[startInputRow + inrow + 2][belowIndex] +                      input_data[startInputRow + inrow + 2][belowIndex + 1] +                      input_data[startInputRow + inrow][inIndex0] +                      input_data[startInputRow + inrow][inIndex0 + 2] +                      input_data[startInputRow + inrow + 1][inIndex1] +                      input_data[startInputRow + inrow + 1][inIndex1 + 2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: int neighsum = input_data[startInputRow + inrow - 1][aboveIndex] +                      input_data[startInputRow + inrow - 1][aboveIndex + 1] +                      input_data[startInputRow + inrow + 2][belowIndex] +                      input_data[startInputRow + inrow + 2][belowIndex + 1] +                      input_data[startInputRow + inrow][inIndex0] +                      input_data[startInputRow + inrow][inIndex0 + 2] +                      input_data[startInputRow + inrow + 1][inIndex1] +                      input_data[startInputRow + inrow + 1][inIndex1 + 2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: int neighsum = input_data[startInputRow + inrow - 1][aboveIndex] +                      input_data[startInputRow + inrow - 1][aboveIndex + 1] +                      input_data[startInputRow + inrow + 2][belowIndex] +                      input_data[startInputRow + inrow + 2][belowIndex + 1] +                      input_data[startInputRow + inrow][inIndex0] +                      input_data[startInputRow + inrow][inIndex0 + 2] +                      input_data[startInputRow + inrow + 1][inIndex1] +                      input_data[startInputRow + inrow + 1][inIndex1 + 2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: int neighsum = input_data[startInputRow + inrow - 1][aboveIndex] +                      input_data[startInputRow + inrow - 1][aboveIndex + 1] +                      input_data[startInputRow + inrow + 2][belowIndex] +                      input_data[startInputRow + inrow + 2][belowIndex + 1] +                      input_data[startInputRow + inrow][inIndex0] +                      input_data[startInputRow + inrow][inIndex0 + 2] +                      input_data[startInputRow + inrow + 1][inIndex1] +                      input_data[startInputRow + inrow + 1][inIndex1 + 2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: neighsum += input_data[startInputRow + inrow - 1][aboveIndex] +                      input_data[startInputRow + inrow - 1][aboveIndex + 2] +                      input_data[startInputRow + inrow + 2][belowIndex] +                      input_data[startInputRow + inrow + 2][belowIndex + 2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: neighsum += input_data[startInputRow + inrow - 1][aboveIndex] +                      input_data[startInputRow + inrow - 1][aboveIndex + 2] +                      input_data[startInputRow + inrow + 2][belowIndex] +                      input_data[startInputRow + inrow + 2][belowIndex + 2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: neighsum += input_data[startInputRow + inrow - 1][aboveIndex] +                      input_data[startInputRow + inrow - 1][aboveIndex + 2] +                      input_data[startInputRow + inrow + 2][belowIndex] +                      input_data[startInputRow + inrow + 2][belowIndex + 2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: neighsum += input_data[startInputRow + inrow - 1][aboveIndex] +                      input_data[startInputRow + inrow - 1][aboveIndex + 2] +                      input_data[startInputRow + inrow + 2][belowIndex] +                      input_data[startInputRow + inrow + 2][belowIndex + 2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: output_data[startOutRow + outrow][outIndex] = (byte)((membersum + 32768) >> 16);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: output_data[startOutRow + outrow][outIndex] = (byte)((membersum + 32768) >> 16);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: inIndex0 += 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: inIndex1 += 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: aboveIndex += 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: belowIndex += 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: neighsum = input_data[startInputRow + inrow - 1][aboveIndex] +                          input_data[startInputRow + inrow - 1][aboveIndex + 1] +                          input_data[startInputRow + inrow + 2][belowIndex] +                          input_data[startInputRow + inrow + 2][belowIndex + 1] +                          input_data[startInputRow + inrow][inIndex0 - 1] +                          input_data[startInputRow + inrow][inIndex0 + 2] +                          input_data[startInputRow + inrow + 1][inIndex1 - 1] +                          input_data[startInputRow + inrow + 1][inIndex1 + 2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: neighsum = input_data[startInputRow + inrow - 1][aboveIndex] +                          input_data[startInputRow + inrow - 1][aboveIndex + 1] +                          input_data[startInputRow + inrow + 2][belowIndex] +                          input_data[startInputRow + inrow + 2][belowIndex + 1] +                          input_data[startInputRow + inrow][inIndex0 - 1] +                          input_data[startInputRow + inrow][inIndex0 + 2] +                          input_data[startInputRow + inrow + 1][inIndex1 - 1] +                          input_data[startInputRow + inrow + 1][inIndex1 + 2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: neighsum = input_data[startInputRow + inrow - 1][aboveIndex] +                          input_data[startInputRow + inrow - 1][aboveIndex + 1] +                          input_data[startInputRow + inrow + 2][belowIndex] +                          input_data[startInputRow + inrow + 2][belowIndex + 1] +                          input_data[startInputRow + inrow][inIndex0 - 1] +                          input_data[startInputRow + inrow][inIndex0 + 2] +                          input_data[startInputRow + inrow + 1][inIndex1 - 1] +                          input_data[startInputRow + inrow + 1][inIndex1 + 2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: neighsum = input_data[startInputRow + inrow - 1][aboveIndex] +                          input_data[startInputRow + inrow - 1][aboveIndex + 1] +                          input_data[startInputRow + inrow + 2][belowIndex] +                          input_data[startInputRow + inrow + 2][belowIndex + 1] +                          input_data[startInputRow + inrow][inIndex0 - 1] +                          input_data[startInputRow + inrow][inIndex0 + 2] +                          input_data[startInputRow + inrow + 1][inIndex1 - 1] +                          input_data[startInputRow + inrow + 1][inIndex1 + 2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: neighsum += input_data[startInputRow + inrow - 1][aboveIndex - 1] +                          input_data[startInputRow + inrow - 1][aboveIndex + 2] +                          input_data[startInputRow + inrow + 2][belowIndex - 1] +                          input_data[startInputRow + inrow + 2][belowIndex + 2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: neighsum += input_data[startInputRow + inrow - 1][aboveIndex - 1] +                          input_data[startInputRow + inrow - 1][aboveIndex + 2] +                          input_data[startInputRow + inrow + 2][belowIndex - 1] +                          input_data[startInputRow + inrow + 2][belowIndex + 2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: neighsum += input_data[startInputRow + inrow - 1][aboveIndex - 1] +                          input_data[startInputRow + inrow - 1][aboveIndex + 2] +                          input_data[startInputRow + inrow + 2][belowIndex - 1] +                          input_data[startInputRow + inrow + 2][belowIndex + 2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: neighsum += input_data[startInputRow + inrow - 1][aboveIndex - 1] +                          input_data[startInputRow + inrow - 1][aboveIndex + 2] +                          input_data[startInputRow + inrow + 2][belowIndex - 1] +                          input_data[startInputRow + inrow + 2][belowIndex + 2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: output_data[startOutRow + outrow][outIndex] = (byte)((membersum + 32768) >> 16);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: output_data[startOutRow + outrow][outIndex] = (byte)((membersum + 32768) >> 16);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: inIndex0 += 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: inIndex1 += 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: aboveIndex += 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: belowIndex += 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: neighsum = input_data[startInputRow + inrow - 1][aboveIndex] +                      input_data[startInputRow + inrow - 1][aboveIndex + 1] +                      input_data[startInputRow + inrow + 2][belowIndex] +                      input_data[startInputRow + inrow + 2][belowIndex + 1] +                      input_data[startInputRow + inrow][inIndex0 - 1] +                      input_data[startInputRow + inrow][inIndex0 + 1] +                      input_data[startInputRow + inrow + 1][inIndex1 - 1] +                      input_data[startInputRow + inrow + 1][inIndex1 + 1];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: neighsum = input_data[startInputRow + inrow - 1][aboveIndex] +                      input_data[startInputRow + inrow - 1][aboveIndex + 1] +                      input_data[startInputRow + inrow + 2][belowIndex] +                      input_data[startInputRow + inrow + 2][belowIndex + 1] +                      input_data[startInputRow + inrow][inIndex0 - 1] +                      input_data[startInputRow + inrow][inIndex0 + 1] +                      input_data[startInputRow + inrow + 1][inIndex1 - 1] +                      input_data[startInputRow + inrow + 1][inIndex1 + 1];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: neighsum += input_data[startInputRow + inrow - 1][aboveIndex - 1] +                      input_data[startInputRow + inrow - 1][aboveIndex + 1] +                      input_data[startInputRow + inrow + 2][belowIndex - 1] +                      input_data[startInputRow + inrow + 2][belowIndex + 1];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: neighsum += input_data[startInputRow + inrow - 1][aboveIndex - 1] +                      input_data[startInputRow + inrow - 1][aboveIndex + 1] +                      input_data[startInputRow + inrow + 2][belowIndex - 1] +                      input_data[startInputRow + inrow + 2][belowIndex + 1];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: output_data[startOutRow + outrow][outIndex] = (byte)((membersum + 32768) >> 16);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: output_data[startOutRow + outrow][outIndex] = (byte)((membersum + 32768) >> 16);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,h2v2_smooth_downsample,The following statement contains a magic number: inrow += 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,fullsize_smooth_downsample,The following statement contains a magic number: expand_right_edge(input_data' startInputRow - 1' m_cinfo.m_max_v_samp_factor + 2' m_cinfo.m_image_width' output_cols);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,fullsize_smooth_downsample,The following statement contains a magic number: int memberscale = 65536 - m_cinfo.m_smoothing_factor * 512;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,fullsize_smooth_downsample,The following statement contains a magic number: int memberscale = 65536 - m_cinfo.m_smoothing_factor * 512;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,fullsize_smooth_downsample,The following statement contains a magic number: int neighscale = m_cinfo.m_smoothing_factor * 64;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,fullsize_smooth_downsample,The following statement contains a magic number: output_data[startOutRow + outrow][outIndex] = (byte)((membersum + 32768) >> 16);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,fullsize_smooth_downsample,The following statement contains a magic number: output_data[startOutRow + outrow][outIndex] = (byte)((membersum + 32768) >> 16);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,fullsize_smooth_downsample,The following statement contains a magic number: output_data[startOutRow + outrow][outIndex] = (byte)((membersum + 32768) >> 16);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,fullsize_smooth_downsample,The following statement contains a magic number: output_data[startOutRow + outrow][outIndex] = (byte)((membersum + 32768) >> 16);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,fullsize_smooth_downsample,The following statement contains a magic number: output_data[startOutRow + outrow][outIndex] = (byte)((membersum + 32768) >> 16);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,fullsize_smooth_downsample,The following statement contains a magic number: output_data[startOutRow + outrow][outIndex] = (byte)((membersum + 32768) >> 16);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_smooth_data,The following statement contains a magic number: access_rows = block_rows * 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_smooth_data,The following statement contains a magic number: int num = 36 * Q00 * (DC4 - DC6);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_smooth_data,The following statement contains a magic number: pred = ((Q01 << 7) + num) / (Q01 << 8);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_smooth_data,The following statement contains a magic number: pred = ((Q01 << 7) + num) / (Q01 << 8);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_smooth_data,The following statement contains a magic number: Al = m_coef_bits_latch[m_coef_bits_savedOffset + coefBitsOffset + 2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_smooth_data,The following statement contains a magic number: int num = 36 * Q00 * (DC2 - DC8);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_smooth_data,The following statement contains a magic number: pred = ((Q10 << 7) + num) / (Q10 << 8);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_smooth_data,The following statement contains a magic number: pred = ((Q10 << 7) + num) / (Q10 << 8);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_smooth_data,The following statement contains a magic number: workspace[8] = (short) pred;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_smooth_data,The following statement contains a magic number: Al != 0 && workspace[8] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_smooth_data,The following statement contains a magic number: Al = m_coef_bits_latch[m_coef_bits_savedOffset + coefBitsOffset + 3];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_smooth_data,The following statement contains a magic number: int num = 9 * Q00 * (DC2 + DC8 - 2 * DC5);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_smooth_data,The following statement contains a magic number: int num = 9 * Q00 * (DC2 + DC8 - 2 * DC5);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_smooth_data,The following statement contains a magic number: pred = ((Q20 << 7) + num) / (Q20 << 8);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_smooth_data,The following statement contains a magic number: pred = ((Q20 << 7) + num) / (Q20 << 8);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_smooth_data,The following statement contains a magic number: workspace[16] = (short) pred;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_smooth_data,The following statement contains a magic number: Al != 0 && workspace[16] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_smooth_data,The following statement contains a magic number: Al = m_coef_bits_latch[m_coef_bits_savedOffset + coefBitsOffset + 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_smooth_data,The following statement contains a magic number: int num = 5 * Q00 * (DC1 - DC3 - DC7 + DC9);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_smooth_data,The following statement contains a magic number: pred = ((Q11 << 7) + num) / (Q11 << 8);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_smooth_data,The following statement contains a magic number: pred = ((Q11 << 7) + num) / (Q11 << 8);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_smooth_data,The following statement contains a magic number: workspace[9] = (short) pred;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_smooth_data,The following statement contains a magic number: Al != 0 && workspace[9] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_smooth_data,The following statement contains a magic number: Al = m_coef_bits_latch[m_coef_bits_savedOffset + coefBitsOffset + 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_smooth_data,The following statement contains a magic number: int num = 9 * Q00 * (DC4 + DC6 - 2 * DC5);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_smooth_data,The following statement contains a magic number: int num = 9 * Q00 * (DC4 + DC6 - 2 * DC5);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_smooth_data,The following statement contains a magic number: pred = ((Q02 << 7) + num) / (Q02 << 8);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_smooth_data,The following statement contains a magic number: pred = ((Q02 << 7) + num) / (Q02 << 8);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_smooth_data,The following statement contains a magic number: workspace[2] = (short) pred;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_smooth_data,The following statement contains a magic number: Al != 0 && workspace[2] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,smoothing_ok,The following statement contains a magic number: coefi <= 5
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_main_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_main_controller.cs,jpeg_d_main_controller,The following statement contains a magic number: cinfo.min_DCT_v_scaled_size < 2
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_main_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_main_controller.cs,jpeg_d_main_controller,The following statement contains a magic number: ngroups = cinfo.min_DCT_v_scaled_size + 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_main_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_main_controller.cs,process_data_context_main,The following statement contains a magic number: m_rowgroups_avail = m_cinfo.min_DCT_v_scaled_size + 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_main_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_main_controller.cs,alloc_funny_pointers,The following statement contains a magic number: m_funnyIndices[0][ci] = new int[rgroup * (M + 4)];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_main_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_main_controller.cs,alloc_funny_pointers,The following statement contains a magic number: m_funnyIndices[1][ci] = new int[rgroup * (M + 4)];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_main_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_main_controller.cs,make_funny_pointers,The following statement contains a magic number: i < rgroup * (M + 2)
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_main_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_main_controller.cs,make_funny_pointers,The following statement contains a magic number: ind1[rgroup * (M + 1) + i] = rgroup * (M - 2) + i;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_main_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_main_controller.cs,make_funny_pointers,The following statement contains a magic number: i < rgroup * 2
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_main_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_main_controller.cs,set_wraparound_pointers,The following statement contains a magic number: ind0[i] = ind0[rgroup * (M + 2) + i];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_main_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_main_controller.cs,set_wraparound_pointers,The following statement contains a magic number: ind1[i] = ind1[rgroup * (M + 2) + i];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_main_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_main_controller.cs,set_wraparound_pointers,The following statement contains a magic number: ind0[rgroup * (M + 3) + i] = ind0[i + rgroup];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_main_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_main_controller.cs,set_wraparound_pointers,The following statement contains a magic number: ind1[rgroup * (M + 3) + i] = ind1[i + rgroup];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_main_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_main_controller.cs,set_bottom_pointers,The following statement contains a magic number: i < rgroup * 2
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch ((compptr.DCT_h_scaled_size << 8) + compptr.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          do_dct[ci] = jpeg_fdct_1x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          do_dct[ci] = jpeg_fdct_2x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          do_dct[ci] = jpeg_fdct_3x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          do_dct[ci] = jpeg_fdct_4x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          do_dct[ci] = jpeg_fdct_5x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          do_dct[ci] = jpeg_fdct_6x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          do_dct[ci] = jpeg_fdct_7x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          do_dct[ci] = jpeg_fdct_9x9;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          do_dct[ci] = jpeg_fdct_10x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          do_dct[ci] = jpeg_fdct_11x11;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          do_dct[ci] = jpeg_fdct_12x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          do_dct[ci] = jpeg_fdct_13x13;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          do_dct[ci] = jpeg_fdct_14x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          do_dct[ci] = jpeg_fdct_15x15;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          do_dct[ci] = jpeg_fdct_16x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          do_dct[ci] = jpeg_fdct_16x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          do_dct[ci] = jpeg_fdct_14x7;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          do_dct[ci] = jpeg_fdct_12x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          do_dct[ci] = jpeg_fdct_10x5;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          do_dct[ci] = jpeg_fdct_8x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          do_dct[ci] = jpeg_fdct_6x3;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          do_dct[ci] = jpeg_fdct_4x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          do_dct[ci] = jpeg_fdct_2x1;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          do_dct[ci] = jpeg_fdct_8x16;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          do_dct[ci] = jpeg_fdct_7x14;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          do_dct[ci] = jpeg_fdct_6x12;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          do_dct[ci] = jpeg_fdct_5x10;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          do_dct[ci] = jpeg_fdct_4x8;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          do_dct[ci] = jpeg_fdct_3x6;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          do_dct[ci] = jpeg_fdct_2x4;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          do_dct[ci] = jpeg_fdct_1x2;                          method = J_DCT_METHOD.JDCT_ISLOW;    /* jfdctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  do_dct[ci] = jpeg_fdct_islow;                                  method = J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  do_dct[ci] = jpeg_fdct_ifast;                                  method = J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  do_float_dct[ci] = jpeg_fdct_float;                                  method = J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' compptr.DCT_h_scaled_size' compptr.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch (method)                  {                      case J_DCT_METHOD.JDCT_ISLOW:                          /* For LL&M IDCT method' divisors are equal to raw quantization                           * coefficients multiplied by 8 (to counteract scaling).                           */                          dtbl = m_dctTables[ci].int_array;                          for (i = 0; i < JpegConstants.DCTSIZE2; i++)                              dtbl[i] = ((int)qtbl.quantval[i]) << (compptr.component_needed ? 4 : 3);                          forward_DCT[ci] = forwardDCTImpl;                          break;                        case J_DCT_METHOD.JDCT_IFAST:                          dtbl = m_dctTables[ci].int_array;                          for (i = 0; i < JpegConstants.DCTSIZE2; i++)                              dtbl[i] = JpegUtils.DESCALE((int)qtbl.quantval[i] * (int)aanscales[i]' compptr.component_needed ? CONST_BITS - 4 : CONST_BITS - 3);                          forward_DCT[ci] = forwardDCTImpl;                          break;                        case J_DCT_METHOD.JDCT_FLOAT:                          float[] fdtbl = m_dctTables[ci].float_array;                          i = 0;                          for (int row = 0; row < JpegConstants.DCTSIZE; row++)                          {                              for (int col = 0; col < JpegConstants.DCTSIZE; col++)                              {                                  fdtbl[i] = (float)(1.0 / (((double)qtbl.quantval[i] * aanscalefactor[row] * aanscalefactor[col] * (compptr.component_needed ? 16.0 : 8.0))));                                  i++;                              }                          }                          forward_DCT[ci] = forwardDCTFloatImpl;                          break;                        default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch (method)                  {                      case J_DCT_METHOD.JDCT_ISLOW:                          /* For LL&M IDCT method' divisors are equal to raw quantization                           * coefficients multiplied by 8 (to counteract scaling).                           */                          dtbl = m_dctTables[ci].int_array;                          for (i = 0; i < JpegConstants.DCTSIZE2; i++)                              dtbl[i] = ((int)qtbl.quantval[i]) << (compptr.component_needed ? 4 : 3);                          forward_DCT[ci] = forwardDCTImpl;                          break;                        case J_DCT_METHOD.JDCT_IFAST:                          dtbl = m_dctTables[ci].int_array;                          for (i = 0; i < JpegConstants.DCTSIZE2; i++)                              dtbl[i] = JpegUtils.DESCALE((int)qtbl.quantval[i] * (int)aanscales[i]' compptr.component_needed ? CONST_BITS - 4 : CONST_BITS - 3);                          forward_DCT[ci] = forwardDCTImpl;                          break;                        case J_DCT_METHOD.JDCT_FLOAT:                          float[] fdtbl = m_dctTables[ci].float_array;                          i = 0;                          for (int row = 0; row < JpegConstants.DCTSIZE; row++)                          {                              for (int col = 0; col < JpegConstants.DCTSIZE; col++)                              {                                  fdtbl[i] = (float)(1.0 / (((double)qtbl.quantval[i] * aanscalefactor[row] * aanscalefactor[col] * (compptr.component_needed ? 16.0 : 8.0))));                                  i++;                              }                          }                          forward_DCT[ci] = forwardDCTFloatImpl;                          break;                        default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch (method)                  {                      case J_DCT_METHOD.JDCT_ISLOW:                          /* For LL&M IDCT method' divisors are equal to raw quantization                           * coefficients multiplied by 8 (to counteract scaling).                           */                          dtbl = m_dctTables[ci].int_array;                          for (i = 0; i < JpegConstants.DCTSIZE2; i++)                              dtbl[i] = ((int)qtbl.quantval[i]) << (compptr.component_needed ? 4 : 3);                          forward_DCT[ci] = forwardDCTImpl;                          break;                        case J_DCT_METHOD.JDCT_IFAST:                          dtbl = m_dctTables[ci].int_array;                          for (i = 0; i < JpegConstants.DCTSIZE2; i++)                              dtbl[i] = JpegUtils.DESCALE((int)qtbl.quantval[i] * (int)aanscales[i]' compptr.component_needed ? CONST_BITS - 4 : CONST_BITS - 3);                          forward_DCT[ci] = forwardDCTImpl;                          break;                        case J_DCT_METHOD.JDCT_FLOAT:                          float[] fdtbl = m_dctTables[ci].float_array;                          i = 0;                          for (int row = 0; row < JpegConstants.DCTSIZE; row++)                          {                              for (int col = 0; col < JpegConstants.DCTSIZE; col++)                              {                                  fdtbl[i] = (float)(1.0 / (((double)qtbl.quantval[i] * aanscalefactor[row] * aanscalefactor[col] * (compptr.component_needed ? 16.0 : 8.0))));                                  i++;                              }                          }                          forward_DCT[ci] = forwardDCTFloatImpl;                          break;                        default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch (method)                  {                      case J_DCT_METHOD.JDCT_ISLOW:                          /* For LL&M IDCT method' divisors are equal to raw quantization                           * coefficients multiplied by 8 (to counteract scaling).                           */                          dtbl = m_dctTables[ci].int_array;                          for (i = 0; i < JpegConstants.DCTSIZE2; i++)                              dtbl[i] = ((int)qtbl.quantval[i]) << (compptr.component_needed ? 4 : 3);                          forward_DCT[ci] = forwardDCTImpl;                          break;                        case J_DCT_METHOD.JDCT_IFAST:                          dtbl = m_dctTables[ci].int_array;                          for (i = 0; i < JpegConstants.DCTSIZE2; i++)                              dtbl[i] = JpegUtils.DESCALE((int)qtbl.quantval[i] * (int)aanscales[i]' compptr.component_needed ? CONST_BITS - 4 : CONST_BITS - 3);                          forward_DCT[ci] = forwardDCTImpl;                          break;                        case J_DCT_METHOD.JDCT_FLOAT:                          float[] fdtbl = m_dctTables[ci].float_array;                          i = 0;                          for (int row = 0; row < JpegConstants.DCTSIZE; row++)                          {                              for (int col = 0; col < JpegConstants.DCTSIZE; col++)                              {                                  fdtbl[i] = (float)(1.0 / (((double)qtbl.quantval[i] * aanscalefactor[row] * aanscalefactor[col] * (compptr.component_needed ? 16.0 : 8.0))));                                  i++;                              }                          }                          forward_DCT[ci] = forwardDCTFloatImpl;                          break;                        default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch (method)                  {                      case J_DCT_METHOD.JDCT_ISLOW:                          /* For LL&M IDCT method' divisors are equal to raw quantization                           * coefficients multiplied by 8 (to counteract scaling).                           */                          dtbl = m_dctTables[ci].int_array;                          for (i = 0; i < JpegConstants.DCTSIZE2; i++)                              dtbl[i] = ((int)qtbl.quantval[i]) << (compptr.component_needed ? 4 : 3);                          forward_DCT[ci] = forwardDCTImpl;                          break;                        case J_DCT_METHOD.JDCT_IFAST:                          dtbl = m_dctTables[ci].int_array;                          for (i = 0; i < JpegConstants.DCTSIZE2; i++)                              dtbl[i] = JpegUtils.DESCALE((int)qtbl.quantval[i] * (int)aanscales[i]' compptr.component_needed ? CONST_BITS - 4 : CONST_BITS - 3);                          forward_DCT[ci] = forwardDCTImpl;                          break;                        case J_DCT_METHOD.JDCT_FLOAT:                          float[] fdtbl = m_dctTables[ci].float_array;                          i = 0;                          for (int row = 0; row < JpegConstants.DCTSIZE; row++)                          {                              for (int col = 0; col < JpegConstants.DCTSIZE; col++)                              {                                  fdtbl[i] = (float)(1.0 / (((double)qtbl.quantval[i] * aanscalefactor[row] * aanscalefactor[col] * (compptr.component_needed ? 16.0 : 8.0))));                                  i++;                              }                          }                          forward_DCT[ci] = forwardDCTFloatImpl;                          break;                        default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,start_pass,The following statement contains a magic number: switch (method)                  {                      case J_DCT_METHOD.JDCT_ISLOW:                          /* For LL&M IDCT method' divisors are equal to raw quantization                           * coefficients multiplied by 8 (to counteract scaling).                           */                          dtbl = m_dctTables[ci].int_array;                          for (i = 0; i < JpegConstants.DCTSIZE2; i++)                              dtbl[i] = ((int)qtbl.quantval[i]) << (compptr.component_needed ? 4 : 3);                          forward_DCT[ci] = forwardDCTImpl;                          break;                        case J_DCT_METHOD.JDCT_IFAST:                          dtbl = m_dctTables[ci].int_array;                          for (i = 0; i < JpegConstants.DCTSIZE2; i++)                              dtbl[i] = JpegUtils.DESCALE((int)qtbl.quantval[i] * (int)aanscales[i]' compptr.component_needed ? CONST_BITS - 4 : CONST_BITS - 3);                          forward_DCT[ci] = forwardDCTImpl;                          break;                        case J_DCT_METHOD.JDCT_FLOAT:                          float[] fdtbl = m_dctTables[ci].float_array;                          i = 0;                          for (int row = 0; row < JpegConstants.DCTSIZE; row++)                          {                              for (int col = 0; col < JpegConstants.DCTSIZE; col++)                              {                                  fdtbl[i] = (float)(1.0 / (((double)qtbl.quantval[i] * aanscalefactor[row] * aanscalefactor[col] * (compptr.component_needed ? 16.0 : 8.0))));                                  i++;                              }                          }                          forward_DCT[ci] = forwardDCTFloatImpl;                          break;                        default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,forwardDCTFloatImpl,The following statement contains a magic number: coef_blocks[bi][i] = (short)((int)(temp + (float)16384.5) - 16384);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,forwardDCTFloatImpl,The following statement contains a magic number: coef_blocks[bi][i] = (short)((int)(temp + (float)16384.5) - 16384);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float tmp0 = elem[elemIndex + 0] + elem[elemIndex + 7];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float tmp7 = elem[elemIndex + 0] - elem[elemIndex + 7];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float tmp1 = elem[elemIndex + 1] + elem[elemIndex + 6];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float tmp6 = elem[elemIndex + 1] - elem[elemIndex + 6];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float tmp2 = elem[elemIndex + 2] + elem[elemIndex + 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float tmp2 = elem[elemIndex + 2] + elem[elemIndex + 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float tmp5 = elem[elemIndex + 2] - elem[elemIndex + 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float tmp5 = elem[elemIndex + 2] - elem[elemIndex + 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float tmp3 = elem[elemIndex + 3] + elem[elemIndex + 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float tmp3 = elem[elemIndex + 3] + elem[elemIndex + 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float tmp4 = elem[elemIndex + 3] - elem[elemIndex + 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float tmp4 = elem[elemIndex + 3] - elem[elemIndex + 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: data[dataIndex + 0] = tmp10 + tmp11 - 8 * JpegConstants.CENTERJSAMPLE;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: data[dataIndex + 4] = tmp10 - tmp11;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float z1 = (tmp12 + tmp13) * ((float)0.707106781);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: data[dataIndex + 2] = tmp13 + z1;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: data[dataIndex + 6] = tmp13 - z1;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float z5 = (tmp10 - tmp12) * ((float)0.382683433);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float z2 = ((float)0.541196100) * tmp10 + z5;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float z4 = ((float)1.306562965) * tmp12 + z5;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float z3 = tmp11 * ((float)0.707106781);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: data[dataIndex + 5] = z13 + z2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: data[dataIndex + 3] = z13 - z2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: data[dataIndex + 7] = z11 - z4;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float tmp0 = data[dataIndex + JpegConstants.DCTSIZE * 0] + data[dataIndex + JpegConstants.DCTSIZE * 7];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float tmp7 = data[dataIndex + JpegConstants.DCTSIZE * 0] - data[dataIndex + JpegConstants.DCTSIZE * 7];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float tmp1 = data[dataIndex + JpegConstants.DCTSIZE * 1] + data[dataIndex + JpegConstants.DCTSIZE * 6];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float tmp6 = data[dataIndex + JpegConstants.DCTSIZE * 1] - data[dataIndex + JpegConstants.DCTSIZE * 6];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float tmp2 = data[dataIndex + JpegConstants.DCTSIZE * 2] + data[dataIndex + JpegConstants.DCTSIZE * 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float tmp2 = data[dataIndex + JpegConstants.DCTSIZE * 2] + data[dataIndex + JpegConstants.DCTSIZE * 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float tmp5 = data[dataIndex + JpegConstants.DCTSIZE * 2] - data[dataIndex + JpegConstants.DCTSIZE * 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float tmp5 = data[dataIndex + JpegConstants.DCTSIZE * 2] - data[dataIndex + JpegConstants.DCTSIZE * 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float tmp3 = data[dataIndex + JpegConstants.DCTSIZE * 3] + data[dataIndex + JpegConstants.DCTSIZE * 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float tmp3 = data[dataIndex + JpegConstants.DCTSIZE * 3] + data[dataIndex + JpegConstants.DCTSIZE * 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float tmp4 = data[dataIndex + JpegConstants.DCTSIZE * 3] - data[dataIndex + JpegConstants.DCTSIZE * 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float tmp4 = data[dataIndex + JpegConstants.DCTSIZE * 3] - data[dataIndex + JpegConstants.DCTSIZE * 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 4] = tmp10 - tmp11;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float z1 = (tmp12 + tmp13) * ((float)0.707106781);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 2] = tmp13 + z1;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 6] = tmp13 - z1;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float z5 = (tmp10 - tmp12) * ((float)0.382683433);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float z2 = ((float)0.541196100) * tmp10 + z5;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float z4 = ((float)1.306562965) * tmp12 + z5;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: float z3 = tmp11 * ((float)0.707106781);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 5] = z13 + z2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 3] = z13 - z2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_float,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 7] = z11 - z4;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: int tmp0 = elem[elemIndex + 0] + elem[elemIndex + 7];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: int tmp7 = elem[elemIndex + 0] - elem[elemIndex + 7];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: int tmp1 = elem[elemIndex + 1] + elem[elemIndex + 6];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: int tmp6 = elem[elemIndex + 1] - elem[elemIndex + 6];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: int tmp2 = elem[elemIndex + 2] + elem[elemIndex + 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: int tmp2 = elem[elemIndex + 2] + elem[elemIndex + 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: int tmp5 = elem[elemIndex + 2] - elem[elemIndex + 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: int tmp5 = elem[elemIndex + 2] - elem[elemIndex + 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: int tmp3 = elem[elemIndex + 3] + elem[elemIndex + 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: int tmp3 = elem[elemIndex + 3] + elem[elemIndex + 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: int tmp4 = elem[elemIndex + 3] - elem[elemIndex + 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: int tmp4 = elem[elemIndex + 3] - elem[elemIndex + 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: data[dataIndex + 0] = tmp10 + tmp11 - 8 * JpegConstants.CENTERJSAMPLE;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: data[dataIndex + 4] = tmp10 - tmp11;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: data[dataIndex + 2] = tmp13 + z1;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: data[dataIndex + 6] = tmp13 - z1;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: data[dataIndex + 5] = z13 + z2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: data[dataIndex + 3] = z13 - z2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: data[dataIndex + 7] = z11 - z4;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: int tmp0 = data[dataIndex + JpegConstants.DCTSIZE * 0] + data[dataIndex + JpegConstants.DCTSIZE * 7];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: int tmp7 = data[dataIndex + JpegConstants.DCTSIZE * 0] - data[dataIndex + JpegConstants.DCTSIZE * 7];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: int tmp1 = data[dataIndex + JpegConstants.DCTSIZE * 1] + data[dataIndex + JpegConstants.DCTSIZE * 6];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: int tmp6 = data[dataIndex + JpegConstants.DCTSIZE * 1] - data[dataIndex + JpegConstants.DCTSIZE * 6];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: int tmp2 = data[dataIndex + JpegConstants.DCTSIZE * 2] + data[dataIndex + JpegConstants.DCTSIZE * 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: int tmp2 = data[dataIndex + JpegConstants.DCTSIZE * 2] + data[dataIndex + JpegConstants.DCTSIZE * 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: int tmp5 = data[dataIndex + JpegConstants.DCTSIZE * 2] - data[dataIndex + JpegConstants.DCTSIZE * 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: int tmp5 = data[dataIndex + JpegConstants.DCTSIZE * 2] - data[dataIndex + JpegConstants.DCTSIZE * 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: int tmp3 = data[dataIndex + JpegConstants.DCTSIZE * 3] + data[dataIndex + JpegConstants.DCTSIZE * 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: int tmp3 = data[dataIndex + JpegConstants.DCTSIZE * 3] + data[dataIndex + JpegConstants.DCTSIZE * 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: int tmp4 = data[dataIndex + JpegConstants.DCTSIZE * 3] - data[dataIndex + JpegConstants.DCTSIZE * 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: int tmp4 = data[dataIndex + JpegConstants.DCTSIZE * 3] - data[dataIndex + JpegConstants.DCTSIZE * 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 4] = tmp10 - tmp11;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 2] = tmp13 + z1;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 6] = tmp13 - z1;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 5] = z13 + z2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 3] = z13 - z2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_ifast,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 7] = z11 - z4;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: int tmp0 = elem[elemIndex + 0] + elem[elemIndex + 7];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: int tmp1 = elem[elemIndex + 1] + elem[elemIndex + 6];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: int tmp2 = elem[elemIndex + 2] + elem[elemIndex + 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: int tmp2 = elem[elemIndex + 2] + elem[elemIndex + 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: int tmp3 = elem[elemIndex + 3] + elem[elemIndex + 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: int tmp3 = elem[elemIndex + 3] + elem[elemIndex + 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: tmp0 = elem[elemIndex + 0] - elem[elemIndex + 7];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: tmp1 = elem[elemIndex + 1] - elem[elemIndex + 6];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: tmp2 = elem[elemIndex + 2] - elem[elemIndex + 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: tmp2 = elem[elemIndex + 2] - elem[elemIndex + 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: tmp3 = elem[elemIndex + 3] - elem[elemIndex + 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: tmp3 = elem[elemIndex + 3] - elem[elemIndex + 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: data[dataIndex + 0] = (tmp10 + tmp11 - 8 * JpegConstants.CENTERJSAMPLE) << SLOW_INTEGER_PASS1_BITS;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: data[dataIndex + 4] = (tmp10 - tmp11) << SLOW_INTEGER_PASS1_BITS;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: data[dataIndex + 2] = JpegUtils.RIGHT_SHIFT(z1 + tmp12 * SLOW_INTEGER_FIX_0_765366865' /* c2-c6 */                                                  SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: data[dataIndex + 6] = JpegUtils.DESCALE(z1 - tmp13 * SLOW_INTEGER_FIX_1_847759065'                                                  SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: data[dataIndex + 3] = JpegUtils.RIGHT_SHIFT(tmp1' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: data[dataIndex + 5] = JpegUtils.RIGHT_SHIFT(tmp2' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: data[dataIndex + 7] = JpegUtils.RIGHT_SHIFT(tmp3' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: int tmp0 = data[dataIndex + JpegConstants.DCTSIZE * 0] + data[dataIndex + JpegConstants.DCTSIZE * 7];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: int tmp1 = data[dataIndex + JpegConstants.DCTSIZE * 1] + data[dataIndex + JpegConstants.DCTSIZE * 6];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: int tmp2 = data[dataIndex + JpegConstants.DCTSIZE * 2] + data[dataIndex + JpegConstants.DCTSIZE * 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: int tmp2 = data[dataIndex + JpegConstants.DCTSIZE * 2] + data[dataIndex + JpegConstants.DCTSIZE * 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: int tmp3 = data[dataIndex + JpegConstants.DCTSIZE * 3] + data[dataIndex + JpegConstants.DCTSIZE * 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: int tmp3 = data[dataIndex + JpegConstants.DCTSIZE * 3] + data[dataIndex + JpegConstants.DCTSIZE * 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: tmp0 = data[dataIndex + JpegConstants.DCTSIZE * 0] - data[dataIndex + JpegConstants.DCTSIZE * 7];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: tmp1 = data[dataIndex + JpegConstants.DCTSIZE * 1] - data[dataIndex + JpegConstants.DCTSIZE * 6];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: tmp2 = data[dataIndex + JpegConstants.DCTSIZE * 2] - data[dataIndex + JpegConstants.DCTSIZE * 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: tmp2 = data[dataIndex + JpegConstants.DCTSIZE * 2] - data[dataIndex + JpegConstants.DCTSIZE * 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: tmp3 = data[dataIndex + JpegConstants.DCTSIZE * 3] - data[dataIndex + JpegConstants.DCTSIZE * 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: tmp3 = data[dataIndex + JpegConstants.DCTSIZE * 3] - data[dataIndex + JpegConstants.DCTSIZE * 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 4] = JpegUtils.RIGHT_SHIFT(tmp10 - tmp11' SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 2] = JpegUtils.RIGHT_SHIFT(                      z1 + tmp12 * SLOW_INTEGER_FIX_0_765366865'                      SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 6] = JpegUtils.RIGHT_SHIFT(                      z1 - tmp13 * SLOW_INTEGER_FIX_1_847759065'                      SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 3] = JpegUtils.RIGHT_SHIFT(tmp1' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 5] = JpegUtils.RIGHT_SHIFT(tmp2' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_islow,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 7] = JpegUtils.RIGHT_SHIFT(tmp3' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,SLOW_INTEGER_FIX,The following statement contains a magic number: return ((int)((x) * (((int)1) << SLOW_INTEGER_CONST_BITS) + 0.5));
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: int tmp0 = elem[elemIndex + 0] + elem[elemIndex + 15];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: int tmp1 = elem[elemIndex + 1] + elem[elemIndex + 14];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: int tmp2 = elem[elemIndex + 2] + elem[elemIndex + 13];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: int tmp2 = elem[elemIndex + 2] + elem[elemIndex + 13];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: int tmp3 = elem[elemIndex + 3] + elem[elemIndex + 12];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: int tmp3 = elem[elemIndex + 3] + elem[elemIndex + 12];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: int tmp4 = elem[elemIndex + 4] + elem[elemIndex + 11];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: int tmp4 = elem[elemIndex + 4] + elem[elemIndex + 11];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: int tmp5 = elem[elemIndex + 5] + elem[elemIndex + 10];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: int tmp5 = elem[elemIndex + 5] + elem[elemIndex + 10];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: int tmp6 = elem[elemIndex + 6] + elem[elemIndex + 9];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: int tmp6 = elem[elemIndex + 6] + elem[elemIndex + 9];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: int tmp7 = elem[elemIndex + 7] + elem[elemIndex + 8];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: int tmp7 = elem[elemIndex + 7] + elem[elemIndex + 8];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp0 = elem[elemIndex + 0] - elem[elemIndex + 15];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp1 = elem[elemIndex + 1] - elem[elemIndex + 14];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp2 = elem[elemIndex + 2] - elem[elemIndex + 13];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp2 = elem[elemIndex + 2] - elem[elemIndex + 13];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp3 = elem[elemIndex + 3] - elem[elemIndex + 12];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp3 = elem[elemIndex + 3] - elem[elemIndex + 12];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp4 = elem[elemIndex + 4] - elem[elemIndex + 11];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp4 = elem[elemIndex + 4] - elem[elemIndex + 11];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp5 = elem[elemIndex + 5] - elem[elemIndex + 10];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp5 = elem[elemIndex + 5] - elem[elemIndex + 10];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp6 = elem[elemIndex + 6] - elem[elemIndex + 9];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp6 = elem[elemIndex + 6] - elem[elemIndex + 9];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp7 = elem[elemIndex + 7] - elem[elemIndex + 8];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp7 = elem[elemIndex + 7] - elem[elemIndex + 8];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: data[dataIndex + 0] =                    ((tmp10 + tmp11 + tmp12 + tmp13 - 16 * JpegConstants.CENTERJSAMPLE) << SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: data[dataIndex + 4] =                    JpegUtils.DESCALE(                        (tmp10 - tmp13) * SLOW_INTEGER_FIX(1.306562965) + /* c4[16] = c2[8] */                        (tmp11 - tmp12) * SLOW_INTEGER_FIX_0_541196100'   /* c12[16] = c6[8] */                        SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: data[dataIndex + 4] =                    JpegUtils.DESCALE(                        (tmp10 - tmp13) * SLOW_INTEGER_FIX(1.306562965) + /* c4[16] = c2[8] */                        (tmp11 - tmp12) * SLOW_INTEGER_FIX_0_541196100'   /* c12[16] = c6[8] */                        SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp10 = (tmp17 - tmp15) * SLOW_INTEGER_FIX(0.275899379) +   /* c14[16] = c7[8] */                      (tmp14 - tmp16) * SLOW_INTEGER_FIX(1.387039845);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp10 = (tmp17 - tmp15) * SLOW_INTEGER_FIX(0.275899379) +   /* c14[16] = c7[8] */                      (tmp14 - tmp16) * SLOW_INTEGER_FIX(1.387039845);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: data[dataIndex + 2] = JpegUtils.DESCALE(                      tmp10 + tmp15 * SLOW_INTEGER_FIX(1.451774982)   /* c6+c14 */                      + tmp16 * SLOW_INTEGER_FIX(2.172734804)'        /* c2+c10 */                      SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: data[dataIndex + 2] = JpegUtils.DESCALE(                      tmp10 + tmp15 * SLOW_INTEGER_FIX(1.451774982)   /* c6+c14 */                      + tmp16 * SLOW_INTEGER_FIX(2.172734804)'        /* c2+c10 */                      SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: data[dataIndex + 2] = JpegUtils.DESCALE(                      tmp10 + tmp15 * SLOW_INTEGER_FIX(1.451774982)   /* c6+c14 */                      + tmp16 * SLOW_INTEGER_FIX(2.172734804)'        /* c2+c10 */                      SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: data[dataIndex + 6] = JpegUtils.DESCALE(                      tmp10 - tmp14 * SLOW_INTEGER_FIX(0.211164243)   /* c2-c6 */                      - tmp17 * SLOW_INTEGER_FIX(1.061594338)'        /* c10+c14 */                      SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: data[dataIndex + 6] = JpegUtils.DESCALE(                      tmp10 - tmp14 * SLOW_INTEGER_FIX(0.211164243)   /* c2-c6 */                      - tmp17 * SLOW_INTEGER_FIX(1.061594338)'        /* c10+c14 */                      SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: data[dataIndex + 6] = JpegUtils.DESCALE(                      tmp10 - tmp14 * SLOW_INTEGER_FIX(0.211164243)   /* c2-c6 */                      - tmp17 * SLOW_INTEGER_FIX(1.061594338)'        /* c10+c14 */                      SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp11 = (tmp0 + tmp1) * SLOW_INTEGER_FIX(1.353318001) +         /* c3 */                      (tmp6 - tmp7) * SLOW_INTEGER_FIX(0.410524528);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp11 = (tmp0 + tmp1) * SLOW_INTEGER_FIX(1.353318001) +         /* c3 */                      (tmp6 - tmp7) * SLOW_INTEGER_FIX(0.410524528);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp12 = (tmp0 + tmp2) * SLOW_INTEGER_FIX(1.247225013) +         /* c5 */                      (tmp5 + tmp7) * SLOW_INTEGER_FIX(0.666655658);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp12 = (tmp0 + tmp2) * SLOW_INTEGER_FIX(1.247225013) +         /* c5 */                      (tmp5 + tmp7) * SLOW_INTEGER_FIX(0.666655658);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp13 = (tmp0 + tmp3) * SLOW_INTEGER_FIX(1.093201867) +         /* c7 */                      (tmp4 - tmp7) * SLOW_INTEGER_FIX(0.897167586);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp13 = (tmp0 + tmp3) * SLOW_INTEGER_FIX(1.093201867) +         /* c7 */                      (tmp4 - tmp7) * SLOW_INTEGER_FIX(0.897167586);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp14 = (tmp1 + tmp2) * SLOW_INTEGER_FIX(0.138617169) +         /* c15 */                      (tmp6 - tmp5) * SLOW_INTEGER_FIX(1.407403738);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp14 = (tmp1 + tmp2) * SLOW_INTEGER_FIX(0.138617169) +         /* c15 */                      (tmp6 - tmp5) * SLOW_INTEGER_FIX(1.407403738);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp15 = (tmp1 + tmp3) * (-SLOW_INTEGER_FIX(0.666655658)) +       /* -c11 */                      (tmp4 + tmp6) * (-SLOW_INTEGER_FIX(1.247225013));
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp15 = (tmp1 + tmp3) * (-SLOW_INTEGER_FIX(0.666655658)) +       /* -c11 */                      (tmp4 + tmp6) * (-SLOW_INTEGER_FIX(1.247225013));
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp16 = (tmp2 + tmp3) * (-SLOW_INTEGER_FIX(1.353318001)) +       /* -c3 */                      (tmp5 - tmp4) * SLOW_INTEGER_FIX(0.410524528);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp16 = (tmp2 + tmp3) * (-SLOW_INTEGER_FIX(1.353318001)) +       /* -c3 */                      (tmp5 - tmp4) * SLOW_INTEGER_FIX(0.410524528);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp10 = tmp11 + tmp12 + tmp13 -                      tmp0 * SLOW_INTEGER_FIX(2.286341144) +                /* c7+c5+c3-c1 */                      tmp7 * SLOW_INTEGER_FIX(0.779653625);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp10 = tmp11 + tmp12 + tmp13 -                      tmp0 * SLOW_INTEGER_FIX(2.286341144) +                /* c7+c5+c3-c1 */                      tmp7 * SLOW_INTEGER_FIX(0.779653625);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp11 += tmp14 + tmp15 + tmp1 * SLOW_INTEGER_FIX(0.071888074) /* c9-c3-c15+c11 */                       - tmp6 * SLOW_INTEGER_FIX(1.663905119);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp11 += tmp14 + tmp15 + tmp1 * SLOW_INTEGER_FIX(0.071888074) /* c9-c3-c15+c11 */                       - tmp6 * SLOW_INTEGER_FIX(1.663905119);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp12 += tmp14 + tmp16 - tmp2 * SLOW_INTEGER_FIX(1.125726048) /* c7+c5+c15-c3 */                       + tmp5 * SLOW_INTEGER_FIX(1.227391138);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp12 += tmp14 + tmp16 - tmp2 * SLOW_INTEGER_FIX(1.125726048) /* c7+c5+c15-c3 */                       + tmp5 * SLOW_INTEGER_FIX(1.227391138);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp13 += tmp15 + tmp16 + tmp3 * SLOW_INTEGER_FIX(1.065388962) /* c15+c3+c11-c7 */                       + tmp4 * SLOW_INTEGER_FIX(2.167985692);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp13 += tmp15 + tmp16 + tmp3 * SLOW_INTEGER_FIX(1.065388962) /* c15+c3+c11-c7 */                       + tmp4 * SLOW_INTEGER_FIX(2.167985692);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: data[dataIndex + 3] = JpegUtils.DESCALE(tmp11' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: data[dataIndex + 5] = JpegUtils.DESCALE(tmp12' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: data[dataIndex + 7] = JpegUtils.DESCALE(tmp13' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: ctr == JpegConstants.DCTSIZE * 2
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: int tmp0 = data[dataIndex + JpegConstants.DCTSIZE * 0] + workspace[workspaceIndex + JpegConstants.DCTSIZE * 7];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: int tmp1 = data[dataIndex + JpegConstants.DCTSIZE * 1] + workspace[workspaceIndex + JpegConstants.DCTSIZE * 6];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: int tmp2 = data[dataIndex + JpegConstants.DCTSIZE * 2] + workspace[workspaceIndex + JpegConstants.DCTSIZE * 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: int tmp2 = data[dataIndex + JpegConstants.DCTSIZE * 2] + workspace[workspaceIndex + JpegConstants.DCTSIZE * 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: int tmp3 = data[dataIndex + JpegConstants.DCTSIZE * 3] + workspace[workspaceIndex + JpegConstants.DCTSIZE * 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: int tmp3 = data[dataIndex + JpegConstants.DCTSIZE * 3] + workspace[workspaceIndex + JpegConstants.DCTSIZE * 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: int tmp4 = data[dataIndex + JpegConstants.DCTSIZE * 4] + workspace[workspaceIndex + JpegConstants.DCTSIZE * 3];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: int tmp4 = data[dataIndex + JpegConstants.DCTSIZE * 4] + workspace[workspaceIndex + JpegConstants.DCTSIZE * 3];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: int tmp5 = data[dataIndex + JpegConstants.DCTSIZE * 5] + workspace[workspaceIndex + JpegConstants.DCTSIZE * 2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: int tmp5 = data[dataIndex + JpegConstants.DCTSIZE * 5] + workspace[workspaceIndex + JpegConstants.DCTSIZE * 2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: int tmp6 = data[dataIndex + JpegConstants.DCTSIZE * 6] + workspace[workspaceIndex + JpegConstants.DCTSIZE * 1];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: int tmp7 = data[dataIndex + JpegConstants.DCTSIZE * 7] + workspace[workspaceIndex + JpegConstants.DCTSIZE * 0];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp0 = data[dataIndex + JpegConstants.DCTSIZE * 0] - workspace[workspaceIndex + JpegConstants.DCTSIZE * 7];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp1 = data[dataIndex + JpegConstants.DCTSIZE * 1] - workspace[workspaceIndex + JpegConstants.DCTSIZE * 6];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp2 = data[dataIndex + JpegConstants.DCTSIZE * 2] - workspace[workspaceIndex + JpegConstants.DCTSIZE * 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp2 = data[dataIndex + JpegConstants.DCTSIZE * 2] - workspace[workspaceIndex + JpegConstants.DCTSIZE * 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp3 = data[dataIndex + JpegConstants.DCTSIZE * 3] - workspace[workspaceIndex + JpegConstants.DCTSIZE * 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp3 = data[dataIndex + JpegConstants.DCTSIZE * 3] - workspace[workspaceIndex + JpegConstants.DCTSIZE * 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp4 = data[dataIndex + JpegConstants.DCTSIZE * 4] - workspace[workspaceIndex + JpegConstants.DCTSIZE * 3];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp4 = data[dataIndex + JpegConstants.DCTSIZE * 4] - workspace[workspaceIndex + JpegConstants.DCTSIZE * 3];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp5 = data[dataIndex + JpegConstants.DCTSIZE * 5] - workspace[workspaceIndex + JpegConstants.DCTSIZE * 2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp5 = data[dataIndex + JpegConstants.DCTSIZE * 5] - workspace[workspaceIndex + JpegConstants.DCTSIZE * 2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp6 = data[dataIndex + JpegConstants.DCTSIZE * 6] - workspace[workspaceIndex + JpegConstants.DCTSIZE * 1];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp7 = data[dataIndex + JpegConstants.DCTSIZE * 7] - workspace[workspaceIndex + JpegConstants.DCTSIZE * 0];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 0] =                    JpegUtils.DESCALE(tmp10 + tmp11 + tmp12 + tmp13' SLOW_INTEGER_PASS1_BITS + 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 4] =                    JpegUtils.DESCALE((tmp10 - tmp13) * SLOW_INTEGER_FIX(1.306562965) + /* c4[16] = c2[8] */                        (tmp11 - tmp12) * SLOW_INTEGER_FIX_0_541196100'   /* c12[16] = c6[8] */                        SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 4] =                    JpegUtils.DESCALE((tmp10 - tmp13) * SLOW_INTEGER_FIX(1.306562965) + /* c4[16] = c2[8] */                        (tmp11 - tmp12) * SLOW_INTEGER_FIX_0_541196100'   /* c12[16] = c6[8] */                        SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 4] =                    JpegUtils.DESCALE((tmp10 - tmp13) * SLOW_INTEGER_FIX(1.306562965) + /* c4[16] = c2[8] */                        (tmp11 - tmp12) * SLOW_INTEGER_FIX_0_541196100'   /* c12[16] = c6[8] */                        SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp10 = (tmp17 - tmp15) * SLOW_INTEGER_FIX(0.275899379) +   /* c14[16] = c7[8] */                      (tmp14 - tmp16) * SLOW_INTEGER_FIX(1.387039845);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp10 = (tmp17 - tmp15) * SLOW_INTEGER_FIX(0.275899379) +   /* c14[16] = c7[8] */                      (tmp14 - tmp16) * SLOW_INTEGER_FIX(1.387039845);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 2] =                    JpegUtils.DESCALE(tmp10 + tmp15 * SLOW_INTEGER_FIX(1.451774982)   /* c6+c14 */                        + tmp16 * SLOW_INTEGER_FIX(2.172734804)'        /* c2+10 */                        SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 2] =                    JpegUtils.DESCALE(tmp10 + tmp15 * SLOW_INTEGER_FIX(1.451774982)   /* c6+c14 */                        + tmp16 * SLOW_INTEGER_FIX(2.172734804)'        /* c2+10 */                        SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 2] =                    JpegUtils.DESCALE(tmp10 + tmp15 * SLOW_INTEGER_FIX(1.451774982)   /* c6+c14 */                        + tmp16 * SLOW_INTEGER_FIX(2.172734804)'        /* c2+10 */                        SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 2] =                    JpegUtils.DESCALE(tmp10 + tmp15 * SLOW_INTEGER_FIX(1.451774982)   /* c6+c14 */                        + tmp16 * SLOW_INTEGER_FIX(2.172734804)'        /* c2+10 */                        SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 6] =                    JpegUtils.DESCALE(tmp10 - tmp14 * SLOW_INTEGER_FIX(0.211164243)   /* c2-c6 */                        - tmp17 * SLOW_INTEGER_FIX(1.061594338)'        /* c10+c14 */                        SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 6] =                    JpegUtils.DESCALE(tmp10 - tmp14 * SLOW_INTEGER_FIX(0.211164243)   /* c2-c6 */                        - tmp17 * SLOW_INTEGER_FIX(1.061594338)'        /* c10+c14 */                        SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 6] =                    JpegUtils.DESCALE(tmp10 - tmp14 * SLOW_INTEGER_FIX(0.211164243)   /* c2-c6 */                        - tmp17 * SLOW_INTEGER_FIX(1.061594338)'        /* c10+c14 */                        SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 6] =                    JpegUtils.DESCALE(tmp10 - tmp14 * SLOW_INTEGER_FIX(0.211164243)   /* c2-c6 */                        - tmp17 * SLOW_INTEGER_FIX(1.061594338)'        /* c10+c14 */                        SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp11 = (tmp0 + tmp1) * SLOW_INTEGER_FIX(1.353318001) +         /* c3 */                      (tmp6 - tmp7) * SLOW_INTEGER_FIX(0.410524528);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp11 = (tmp0 + tmp1) * SLOW_INTEGER_FIX(1.353318001) +         /* c3 */                      (tmp6 - tmp7) * SLOW_INTEGER_FIX(0.410524528);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp12 = (tmp0 + tmp2) * SLOW_INTEGER_FIX(1.247225013) +         /* c5 */                      (tmp5 + tmp7) * SLOW_INTEGER_FIX(0.666655658);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp12 = (tmp0 + tmp2) * SLOW_INTEGER_FIX(1.247225013) +         /* c5 */                      (tmp5 + tmp7) * SLOW_INTEGER_FIX(0.666655658);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp13 = (tmp0 + tmp3) * SLOW_INTEGER_FIX(1.093201867) +         /* c7 */                      (tmp4 - tmp7) * SLOW_INTEGER_FIX(0.897167586);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp13 = (tmp0 + tmp3) * SLOW_INTEGER_FIX(1.093201867) +         /* c7 */                      (tmp4 - tmp7) * SLOW_INTEGER_FIX(0.897167586);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp14 = (tmp1 + tmp2) * SLOW_INTEGER_FIX(0.138617169) +         /* c15 */                      (tmp6 - tmp5) * SLOW_INTEGER_FIX(1.407403738);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp14 = (tmp1 + tmp2) * SLOW_INTEGER_FIX(0.138617169) +         /* c15 */                      (tmp6 - tmp5) * SLOW_INTEGER_FIX(1.407403738);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp15 = (tmp1 + tmp3) * (-SLOW_INTEGER_FIX(0.666655658)) +       /* -c11 */                      (tmp4 + tmp6) * (-SLOW_INTEGER_FIX(1.247225013));
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp15 = (tmp1 + tmp3) * (-SLOW_INTEGER_FIX(0.666655658)) +       /* -c11 */                      (tmp4 + tmp6) * (-SLOW_INTEGER_FIX(1.247225013));
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp16 = (tmp2 + tmp3) * (-SLOW_INTEGER_FIX(1.353318001)) +       /* -c3 */                      (tmp5 - tmp4) * SLOW_INTEGER_FIX(0.410524528);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp16 = (tmp2 + tmp3) * (-SLOW_INTEGER_FIX(1.353318001)) +       /* -c3 */                      (tmp5 - tmp4) * SLOW_INTEGER_FIX(0.410524528);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp10 = tmp11 + tmp12 + tmp13 -                      tmp0 * SLOW_INTEGER_FIX(2.286341144) +                /* c7+c5+c3-c1 */                      tmp7 * SLOW_INTEGER_FIX(0.779653625);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp10 = tmp11 + tmp12 + tmp13 -                      tmp0 * SLOW_INTEGER_FIX(2.286341144) +                /* c7+c5+c3-c1 */                      tmp7 * SLOW_INTEGER_FIX(0.779653625);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp11 += tmp14 + tmp15 + tmp1 * SLOW_INTEGER_FIX(0.071888074) /* c9-c3-c15+c11 */                       - tmp6 * SLOW_INTEGER_FIX(1.663905119);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp11 += tmp14 + tmp15 + tmp1 * SLOW_INTEGER_FIX(0.071888074) /* c9-c3-c15+c11 */                       - tmp6 * SLOW_INTEGER_FIX(1.663905119);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp12 += tmp14 + tmp16 - tmp2 * SLOW_INTEGER_FIX(1.125726048) /* c7+c5+c15-c3 */                       + tmp5 * SLOW_INTEGER_FIX(1.227391138);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp12 += tmp14 + tmp16 - tmp2 * SLOW_INTEGER_FIX(1.125726048) /* c7+c5+c15-c3 */                       + tmp5 * SLOW_INTEGER_FIX(1.227391138);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp13 += tmp15 + tmp16 + tmp3 * SLOW_INTEGER_FIX(1.065388962) /* c15+c3+c11-c7 */                       + tmp4 * SLOW_INTEGER_FIX(2.167985692);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: tmp13 += tmp15 + tmp16 + tmp3 * SLOW_INTEGER_FIX(1.065388962) /* c15+c3+c11-c7 */                       + tmp4 * SLOW_INTEGER_FIX(2.167985692);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 1] = JpegUtils.DESCALE(tmp10' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 3] = JpegUtils.DESCALE(tmp11' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 3] = JpegUtils.DESCALE(tmp11' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 5] = JpegUtils.DESCALE(tmp12' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 5] = JpegUtils.DESCALE(tmp12' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 7] = JpegUtils.DESCALE(tmp13' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The following statement contains a magic number: data[dataIndex + JpegConstants.DCTSIZE * 7] = JpegUtils.DESCALE(tmp13' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_input_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_input_controller.cs,consume_markers,The following statement contains a magic number: switch (val)                  {                      case ReadResult.JPEG_REACHED_SOS:                          /* Found SOS */                          if (m_inheaders != 0)                          {                              /* 1st SOS */                              if (m_inheaders == 1)                                  initial_setup();                                if (m_cinfo.m_comps_in_scan == 0)                              {                                  /* pseudo SOS marker */                                  m_inheaders = 2;                                  break;                              }                                m_inheaders = 0;                                /* Note: start_input_pass must be called by jpeg_decomp_master                               * before any more input can be consumed.                               */                          }                          else                          {                              /* 2nd or later SOS marker */                              if (!m_has_multiple_scans)                              {                                  /* Oops' I wasn't expecting this! */                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_EOI_EXPECTED);                              }                                if (m_cinfo.m_comps_in_scan == 0)                              {                                  /* unexpected pseudo SOS marker */                                  break;                              }                                m_cinfo.m_inputctl.start_input_pass();                          }                          return val;                        case ReadResult.JPEG_REACHED_EOI:                          /* Found EOI */                          m_eoi_reached = true;                          if (m_inheaders != 0)                          {                              /* Tables-only datastream' apparently */                              if (m_cinfo.m_marker.SawSOF())                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_SOF_NO_SOS);                          }                          else                          {                              /* Prevent infinite loop in coef ctlr's decompress_data routine                               * if user set output_scan_number larger than number of scans.                               */                              if (m_cinfo.m_output_scan_number > m_cinfo.m_input_scan_number)                                  m_cinfo.m_output_scan_number = m_cinfo.m_input_scan_number;                          }                            return val;                        case ReadResult.JPEG_SUSPENDED:                      default:                          return val;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_input_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_input_controller.cs,initial_setup,The following statement contains a magic number: m_cinfo.m_data_precision < 8 || m_cinfo.m_data_precision > 12
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_input_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_input_controller.cs,initial_setup,The following statement contains a magic number: m_cinfo.m_data_precision < 8 || m_cinfo.m_data_precision > 12
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((componentInfo.DCT_h_scaled_size << 8) + componentInfo.DCT_v_scaled_size)                  {                      case ((1 << 8) + 1):                          im = jpeg_idct_1x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 2):                          im = jpeg_idct_2x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 3):                          im = jpeg_idct_3x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 4):                          im = jpeg_idct_4x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 5):                          im = jpeg_idct_5x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 6):                          im = jpeg_idct_6x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 7):                          im = jpeg_idct_7x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((9 << 8) + 9):                          im = jpeg_idct_9x9;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 10):                          im = jpeg_idct_10x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((11 << 8) + 11):                          im = jpeg_idct_11x11;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 12):                          im = jpeg_idct_12x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((13 << 8) + 13):                          im = jpeg_idct_13x13;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 14):                          im = jpeg_idct_14x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((15 << 8) + 15):                          im = jpeg_idct_15x15;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 16):                          im = jpeg_idct_16x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((16 << 8) + 8):                          im = jpeg_idct_16x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((14 << 8) + 7):                          im = jpeg_idct_14x7;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((12 << 8) + 6):                          im = jpeg_idct_12x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((10 << 8) + 5):                          im = jpeg_idct_10x5;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 4):                          im = jpeg_idct_8x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 3):                          im = jpeg_idct_6x3;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 2):                          im = jpeg_idct_4x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 1):                          im = jpeg_idct_2x1;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((8 << 8) + 16):                          im = jpeg_idct_8x16;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((7 << 8) + 14):                          im = jpeg_idct_7x14;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((6 << 8) + 12):                          im = jpeg_idct_6x12;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((5 << 8) + 10):                          im = jpeg_idct_5x10;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((4 << 8) + 8):                          im = jpeg_idct_4x8;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((3 << 8) + 6):                          im = jpeg_idct_3x6;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((2 << 8) + 4):                          im = jpeg_idct_2x4;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((1 << 8) + 2):                          im = jpeg_idct_1x2;                          method = (int)J_DCT_METHOD.JDCT_ISLOW;    /* jidctint uses islow-style table */                          break;                      case ((JpegConstants.DCTSIZE << 8) + JpegConstants.DCTSIZE):                          switch (m_cinfo.m_dct_method)                          {                              case J_DCT_METHOD.JDCT_ISLOW:                                  im = jpeg_idct_islow;                                  method = (int)J_DCT_METHOD.JDCT_ISLOW;                                  break;                              case J_DCT_METHOD.JDCT_IFAST:                                  im = jpeg_idct_ifast;                                  method = (int)J_DCT_METHOD.JDCT_IFAST;                                  break;                              case J_DCT_METHOD.JDCT_FLOAT:                                  im = jpeg_idct_float;                                  method = (int)J_DCT_METHOD.JDCT_FLOAT;                                  break;                              default:                                  m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                                  break;                          }                          break;                      default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_BAD_DCTSIZE' componentInfo.DCT_h_scaled_size' componentInfo.DCT_v_scaled_size);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,start_pass,The following statement contains a magic number: switch ((J_DCT_METHOD)method)                  {                      case J_DCT_METHOD.JDCT_ISLOW:                          /* For LL&M IDCT method' multipliers are equal to raw quantization                           * coefficients' but are stored as ints to ensure access efficiency.                           */                          int[] ismtbl = m_dctTables[ci].int_array;                          for (int i = 0; i < JpegConstants.DCTSIZE2; i++)                              ismtbl[i] = componentInfo.quant_table.quantval[i];                          break;                        case J_DCT_METHOD.JDCT_IFAST:                          /* For AA&N IDCT method' multipliers are equal to quantization                           * coefficients scaled by scalefactor[row]*scalefactor[col]' where                           *   scalefactor[0] = 1                           *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7                           * For integer operation' the multiplier table is to be scaled by                           * IFAST_SCALE_BITS.                           */                          int[] ifmtbl = m_dctTables[ci].int_array;                            for (int i = 0; i < JpegConstants.DCTSIZE2; i++)                          {                              ifmtbl[i] = JpegUtils.DESCALE(                                  (int)componentInfo.quant_table.quantval[i] * (int)aanscales[i]'                                  CONST_BITS - IFAST_SCALE_BITS);                          }                          break;                        case J_DCT_METHOD.JDCT_FLOAT:                          /* For float AA&N IDCT method' multipliers are equal to quantization                           * coefficients scaled by scalefactor[row]*scalefactor[col]' where                           *   scalefactor[0] = 1                           *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7                           * We apply a further scale factor of 1/8.                           */                          float[] fmtbl = m_dctTables[ci].float_array;                          int ii = 0;                          for (int row = 0; row < JpegConstants.DCTSIZE; row++)                          {                              for (int col = 0; col < JpegConstants.DCTSIZE; col++)                              {                                  fmtbl[ii] = (float)((double)componentInfo.quant_table.quantval[ii] * aanscalefactor[row] * aanscalefactor[col] * 0.125);                                  ii++;                              }                          }                          break;                        default:                          m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 2] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 3] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 4] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 5] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 6] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 7] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: int z3 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 4]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: int z3 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 4]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: z2 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 2]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: z2 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 2]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: z3 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 6]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: z3 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 6]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: tmp0 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 7]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: tmp0 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 7]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: tmp1 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 5]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: tmp1 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 5]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: tmp2 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 3]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: tmp2 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 3]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 7] = JpegUtils.RIGHT_SHIFT(tmp10 - tmp3' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 6] = JpegUtils.RIGHT_SHIFT(tmp11 - tmp2' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 2] = JpegUtils.RIGHT_SHIFT(tmp12 + tmp1' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 5] = JpegUtils.RIGHT_SHIFT(tmp12 - tmp1' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 3] = JpegUtils.RIGHT_SHIFT(tmp13 + tmp0' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 4] = JpegUtils.RIGHT_SHIFT(tmp13 - tmp0' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: int z2 = workspace[workspaceIndex + 0] +                      (RANGE_CENTER << (SLOW_INTEGER_PASS1_BITS + 3)) +                      (1 << (SLOW_INTEGER_PASS1_BITS + 2));
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: int z2 = workspace[workspaceIndex + 0] +                      (RANGE_CENTER << (SLOW_INTEGER_PASS1_BITS + 3)) +                      (1 << (SLOW_INTEGER_PASS1_BITS + 2));
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: byte dcval = limit[limitOffset + JpegUtils.RIGHT_SHIFT(z2' SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 2] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 3] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 4] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 5] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 6] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 7] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: workspace[workspaceIndex + 1] == 0 &&                      workspace[workspaceIndex + 2] == 0 &&                      workspace[workspaceIndex + 3] == 0 &&                      workspace[workspaceIndex + 4] == 0 &&                      workspace[workspaceIndex + 5] == 0 &&                      workspace[workspaceIndex + 6] == 0 &&                      workspace[workspaceIndex + 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: workspace[workspaceIndex + 1] == 0 &&                      workspace[workspaceIndex + 2] == 0 &&                      workspace[workspaceIndex + 3] == 0 &&                      workspace[workspaceIndex + 4] == 0 &&                      workspace[workspaceIndex + 5] == 0 &&                      workspace[workspaceIndex + 6] == 0 &&                      workspace[workspaceIndex + 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: workspace[workspaceIndex + 1] == 0 &&                      workspace[workspaceIndex + 2] == 0 &&                      workspace[workspaceIndex + 3] == 0 &&                      workspace[workspaceIndex + 4] == 0 &&                      workspace[workspaceIndex + 5] == 0 &&                      workspace[workspaceIndex + 6] == 0 &&                      workspace[workspaceIndex + 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: workspace[workspaceIndex + 1] == 0 &&                      workspace[workspaceIndex + 2] == 0 &&                      workspace[workspaceIndex + 3] == 0 &&                      workspace[workspaceIndex + 4] == 0 &&                      workspace[workspaceIndex + 5] == 0 &&                      workspace[workspaceIndex + 6] == 0 &&                      workspace[workspaceIndex + 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: workspace[workspaceIndex + 1] == 0 &&                      workspace[workspaceIndex + 2] == 0 &&                      workspace[workspaceIndex + 3] == 0 &&                      workspace[workspaceIndex + 4] == 0 &&                      workspace[workspaceIndex + 5] == 0 &&                      workspace[workspaceIndex + 6] == 0 &&                      workspace[workspaceIndex + 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: workspace[workspaceIndex + 1] == 0 &&                      workspace[workspaceIndex + 2] == 0 &&                      workspace[workspaceIndex + 3] == 0 &&                      workspace[workspaceIndex + 4] == 0 &&                      workspace[workspaceIndex + 5] == 0 &&                      workspace[workspaceIndex + 6] == 0 &&                      workspace[workspaceIndex + 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: int z3 = workspace[workspaceIndex + 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: z2 = workspace[workspaceIndex + 2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: z3 = workspace[workspaceIndex + 6];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: tmp0 = workspace[workspaceIndex + 7];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: tmp1 = workspace[workspaceIndex + 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: tmp2 = workspace[workspaceIndex + 3];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 0] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(tmp10 + tmp3' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 7] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(tmp10 - tmp3' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 7] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(tmp10 - tmp3' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 1] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(tmp11 + tmp2' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 6] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(tmp11 - tmp2' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 6] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(tmp11 - tmp2' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 2] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(tmp12 + tmp1' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 2] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(tmp12 + tmp1' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 5] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(tmp12 - tmp1' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 5] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(tmp12 - tmp1' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 3] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(tmp13 + tmp0' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 3] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(tmp13 + tmp0' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 4] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(tmp13 - tmp0' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 4] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(tmp13 - tmp0' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,SLOW_INTEGER_FIX,The following statement contains a magic number: return (int)(x * (1 << SLOW_INTEGER_CONST_BITS) + 0.5);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 2] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 3] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 4] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 5] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 6] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 7] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: int tmp1 = FAST_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 2]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: int tmp1 = FAST_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 2]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: int tmp2 = FAST_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 4]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: int tmp2 = FAST_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 4]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: int tmp3 = FAST_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 6]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: int tmp3 = FAST_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 6]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: int tmp5 = FAST_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 3]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: int tmp5 = FAST_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 3]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: int tmp6 = FAST_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 5]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: int tmp6 = FAST_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 5]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: int tmp7 = FAST_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 7]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: int tmp7 = FAST_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 7]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 7] = tmp0 - tmp7;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 6] = tmp1 - tmp6;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 2] = tmp2 + tmp5;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 5] = tmp2 - tmp5;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 3] = tmp3 + tmp4;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 4] = tmp3 - tmp4;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: int z5 = workspace[workspaceIndex + 0] +                     ((RANGE_CENTER << (FAST_INTEGER_PASS1_BITS + 3)) +                      (1 << (FAST_INTEGER_PASS1_BITS + 2)));
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: int z5 = workspace[workspaceIndex + 0] +                     ((RANGE_CENTER << (FAST_INTEGER_PASS1_BITS + 3)) +                      (1 << (FAST_INTEGER_PASS1_BITS + 2)));
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: byte dcval = limit[limitOffset + FAST_INTEGER_IRIGHT_SHIFT(z5' FAST_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 2] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 3] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 4] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 5] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 6] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 7] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: workspace[workspaceIndex + 1] == 0 &&                      workspace[workspaceIndex + 2] == 0 &&                      workspace[workspaceIndex + 3] == 0 &&                      workspace[workspaceIndex + 4] == 0 &&                      workspace[workspaceIndex + 5] == 0 &&                      workspace[workspaceIndex + 6] == 0 &&                      workspace[workspaceIndex + 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: workspace[workspaceIndex + 1] == 0 &&                      workspace[workspaceIndex + 2] == 0 &&                      workspace[workspaceIndex + 3] == 0 &&                      workspace[workspaceIndex + 4] == 0 &&                      workspace[workspaceIndex + 5] == 0 &&                      workspace[workspaceIndex + 6] == 0 &&                      workspace[workspaceIndex + 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: workspace[workspaceIndex + 1] == 0 &&                      workspace[workspaceIndex + 2] == 0 &&                      workspace[workspaceIndex + 3] == 0 &&                      workspace[workspaceIndex + 4] == 0 &&                      workspace[workspaceIndex + 5] == 0 &&                      workspace[workspaceIndex + 6] == 0 &&                      workspace[workspaceIndex + 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: workspace[workspaceIndex + 1] == 0 &&                      workspace[workspaceIndex + 2] == 0 &&                      workspace[workspaceIndex + 3] == 0 &&                      workspace[workspaceIndex + 4] == 0 &&                      workspace[workspaceIndex + 5] == 0 &&                      workspace[workspaceIndex + 6] == 0 &&                      workspace[workspaceIndex + 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: workspace[workspaceIndex + 1] == 0 &&                      workspace[workspaceIndex + 2] == 0 &&                      workspace[workspaceIndex + 3] == 0 &&                      workspace[workspaceIndex + 4] == 0 &&                      workspace[workspaceIndex + 5] == 0 &&                      workspace[workspaceIndex + 6] == 0 &&                      workspace[workspaceIndex + 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: workspace[workspaceIndex + 1] == 0 &&                      workspace[workspaceIndex + 2] == 0 &&                      workspace[workspaceIndex + 3] == 0 &&                      workspace[workspaceIndex + 4] == 0 &&                      workspace[workspaceIndex + 5] == 0 &&                      workspace[workspaceIndex + 6] == 0 &&                      workspace[workspaceIndex + 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: int tmp10 = z5 + workspace[workspaceIndex + 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: int tmp11 = z5 - workspace[workspaceIndex + 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: int tmp13 = workspace[workspaceIndex + 2] + workspace[workspaceIndex + 6];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: int tmp13 = workspace[workspaceIndex + 2] + workspace[workspaceIndex + 6];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: int tmp12 = FAST_INTEGER_MULTIPLY(workspace[workspaceIndex + 2] - workspace[workspaceIndex + 6]'                      FAST_INTEGER_FIX_1_414213562) - tmp13;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: int tmp12 = FAST_INTEGER_MULTIPLY(workspace[workspaceIndex + 2] - workspace[workspaceIndex + 6]'                      FAST_INTEGER_FIX_1_414213562) - tmp13;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: int z13 = workspace[workspaceIndex + 5] + workspace[workspaceIndex + 3];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: int z13 = workspace[workspaceIndex + 5] + workspace[workspaceIndex + 3];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: int z10 = workspace[workspaceIndex + 5] - workspace[workspaceIndex + 3];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: int z10 = workspace[workspaceIndex + 5] - workspace[workspaceIndex + 3];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: int z11 = workspace[workspaceIndex + 1] + workspace[workspaceIndex + 7];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: int z12 = workspace[workspaceIndex + 1] - workspace[workspaceIndex + 7];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 0] = limit[limitOffset + FAST_INTEGER_IRIGHT_SHIFT(tmp0 + tmp7' FAST_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 7] = limit[limitOffset + FAST_INTEGER_IRIGHT_SHIFT(tmp0 - tmp7' FAST_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 7] = limit[limitOffset + FAST_INTEGER_IRIGHT_SHIFT(tmp0 - tmp7' FAST_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 1] = limit[limitOffset + FAST_INTEGER_IRIGHT_SHIFT(tmp1 + tmp6' FAST_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 6] = limit[limitOffset + FAST_INTEGER_IRIGHT_SHIFT(tmp1 - tmp6' FAST_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 6] = limit[limitOffset + FAST_INTEGER_IRIGHT_SHIFT(tmp1 - tmp6' FAST_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 2] = limit[limitOffset + FAST_INTEGER_IRIGHT_SHIFT(tmp2 + tmp5' FAST_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 2] = limit[limitOffset + FAST_INTEGER_IRIGHT_SHIFT(tmp2 + tmp5' FAST_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 5] = limit[limitOffset + FAST_INTEGER_IRIGHT_SHIFT(tmp2 - tmp5' FAST_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 5] = limit[limitOffset + FAST_INTEGER_IRIGHT_SHIFT(tmp2 - tmp5' FAST_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 3] = limit[limitOffset + FAST_INTEGER_IRIGHT_SHIFT(tmp3 + tmp4' FAST_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 3] = limit[limitOffset + FAST_INTEGER_IRIGHT_SHIFT(tmp3 + tmp4' FAST_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 4] = limit[limitOffset + FAST_INTEGER_IRIGHT_SHIFT(tmp3 - tmp4' FAST_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_ifast,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 4] = limit[limitOffset + FAST_INTEGER_IRIGHT_SHIFT(tmp3 - tmp4' FAST_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 2] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 3] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 4] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 5] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 6] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 7] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: float tmp1 = FLOAT_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 2]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: float tmp1 = FLOAT_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 2]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: float tmp2 = FLOAT_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 4]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: float tmp2 = FLOAT_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 4]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: float tmp3 = FLOAT_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 6]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: float tmp3 = FLOAT_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 6]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: float tmp12 = (tmp1 - tmp3) * 1.414213562f - tmp13;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: float tmp5 = FLOAT_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 3]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: float tmp5 = FLOAT_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 3]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: float tmp6 = FLOAT_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 5]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: float tmp6 = FLOAT_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 5]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: float tmp7 = FLOAT_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 7]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: float tmp7 = FLOAT_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 7]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: tmp11 = (z11 - z13) * 1.414213562f;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: float z5 = (z10 + z12) * 1.847759065f;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: tmp10 = z5 - z12 * 1.082392200f;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: tmp12 = z5 - z10 * 2.613125930f;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 7] = tmp0 - tmp7;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 6] = tmp1 - tmp6;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 2] = tmp2 + tmp5;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 5] = tmp2 - tmp5;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 3] = tmp3 + tmp4;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 4] = tmp3 - tmp4;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: float z5 = workspace[workspaceIndex + 0] + (RANGE_CENTER + 0.5f);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: float tmp10 = z5 + workspace[workspaceIndex + 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: float tmp11 = z5 - workspace[workspaceIndex + 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: float tmp13 = workspace[workspaceIndex + 2] + workspace[workspaceIndex + 6];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: float tmp13 = workspace[workspaceIndex + 2] + workspace[workspaceIndex + 6];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: float tmp12 = (workspace[workspaceIndex + 2] - workspace[workspaceIndex + 6]) * 1.414213562f - tmp13;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: float tmp12 = (workspace[workspaceIndex + 2] - workspace[workspaceIndex + 6]) * 1.414213562f - tmp13;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: float tmp12 = (workspace[workspaceIndex + 2] - workspace[workspaceIndex + 6]) * 1.414213562f - tmp13;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: float z13 = workspace[workspaceIndex + 5] + workspace[workspaceIndex + 3];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: float z13 = workspace[workspaceIndex + 5] + workspace[workspaceIndex + 3];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: float z10 = workspace[workspaceIndex + 5] - workspace[workspaceIndex + 3];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: float z10 = workspace[workspaceIndex + 5] - workspace[workspaceIndex + 3];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: float z11 = workspace[workspaceIndex + 1] + workspace[workspaceIndex + 7];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: float z12 = workspace[workspaceIndex + 1] - workspace[workspaceIndex + 7];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: tmp11 = (z11 - z13) * 1.414213562f;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: z5 = (z10 + z12) * 1.847759065f;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: tmp10 = z5 - z12 * 1.082392200f;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: tmp12 = z5 - z10 * 2.613125930f;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 7] = limit[limitOffset + (int)(tmp0 - tmp7) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 6] = limit[limitOffset + (int)(tmp1 - tmp6) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 2] = limit[limitOffset + (int)(tmp2 + tmp5) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 5] = limit[limitOffset + (int)(tmp2 - tmp5) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 3] = limit[limitOffset + (int)(tmp3 + tmp4) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_float,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 4] = limit[limitOffset + (int)(tmp3 - tmp4) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: int[] workspace = new int[JpegConstants.DCTSIZE * 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: ctr == JpegConstants.DCTSIZE - 4
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 2] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 3] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: int z2 = REDUCED_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 2]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: int z2 = REDUCED_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 2]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: int z3 = REDUCED_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 6]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: int z3 = REDUCED_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 6]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: int z1 = REDUCED_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 7]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: int z1 = REDUCED_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 7]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: z2 = REDUCED_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 5]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: z2 = REDUCED_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 5]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: z3 = REDUCED_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 3]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: z3 = REDUCED_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 3]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 3] = JpegUtils.DESCALE(tmp10 - tmp2' REDUCED_CONST_BITS - REDUCED_PASS1_BITS + 1);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 2] = JpegUtils.DESCALE(tmp12 - tmp0' REDUCED_CONST_BITS - REDUCED_PASS1_BITS + 1);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: byte dcval = limit[limitOffset + JpegUtils.DESCALE(workspace[workspaceIndex + 0]' REDUCED_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 2] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 3] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: workspace[workspaceIndex + 1] == 0 &&                      workspace[workspaceIndex + 2] == 0 &&                      workspace[workspaceIndex + 3] == 0 &&                      workspace[workspaceIndex + 5] == 0 &&                      workspace[workspaceIndex + 6] == 0 &&                      workspace[workspaceIndex + 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: workspace[workspaceIndex + 1] == 0 &&                      workspace[workspaceIndex + 2] == 0 &&                      workspace[workspaceIndex + 3] == 0 &&                      workspace[workspaceIndex + 5] == 0 &&                      workspace[workspaceIndex + 6] == 0 &&                      workspace[workspaceIndex + 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: workspace[workspaceIndex + 1] == 0 &&                      workspace[workspaceIndex + 2] == 0 &&                      workspace[workspaceIndex + 3] == 0 &&                      workspace[workspaceIndex + 5] == 0 &&                      workspace[workspaceIndex + 6] == 0 &&                      workspace[workspaceIndex + 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: workspace[workspaceIndex + 1] == 0 &&                      workspace[workspaceIndex + 2] == 0 &&                      workspace[workspaceIndex + 3] == 0 &&                      workspace[workspaceIndex + 5] == 0 &&                      workspace[workspaceIndex + 6] == 0 &&                      workspace[workspaceIndex + 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: workspace[workspaceIndex + 1] == 0 &&                      workspace[workspaceIndex + 2] == 0 &&                      workspace[workspaceIndex + 3] == 0 &&                      workspace[workspaceIndex + 5] == 0 &&                      workspace[workspaceIndex + 6] == 0 &&                      workspace[workspaceIndex + 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: int tmp2 = workspace[workspaceIndex + 2] * REDUCED_FIX_1_847759065 + workspace[workspaceIndex + 6] * (-REDUCED_FIX_0_765366865);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: int tmp2 = workspace[workspaceIndex + 2] * REDUCED_FIX_1_847759065 + workspace[workspaceIndex + 6] * (-REDUCED_FIX_0_765366865);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: int z1 = workspace[workspaceIndex + 7];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: int z2 = workspace[workspaceIndex + 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: int z3 = workspace[workspaceIndex + 3];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 0] = limit[limitOffset + JpegUtils.DESCALE(tmp10 + tmp2' REDUCED_CONST_BITS + REDUCED_PASS1_BITS + 3 + 1) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 3] = limit[limitOffset + JpegUtils.DESCALE(tmp10 - tmp2' REDUCED_CONST_BITS + REDUCED_PASS1_BITS + 3 + 1) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 3] = limit[limitOffset + JpegUtils.DESCALE(tmp10 - tmp2' REDUCED_CONST_BITS + REDUCED_PASS1_BITS + 3 + 1) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 1] = limit[limitOffset + JpegUtils.DESCALE(tmp12 + tmp0' REDUCED_CONST_BITS + REDUCED_PASS1_BITS + 3 + 1) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 2] = limit[limitOffset + JpegUtils.DESCALE(tmp12 - tmp0' REDUCED_CONST_BITS + REDUCED_PASS1_BITS + 3 + 1) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 2] = limit[limitOffset + JpegUtils.DESCALE(tmp12 - tmp0' REDUCED_CONST_BITS + REDUCED_PASS1_BITS + 3 + 1) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_4x4,The following statement contains a magic number: ctr < 4
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The following statement contains a magic number: int[] workspace = new int[JpegConstants.DCTSIZE * 2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The following statement contains a magic number: ctr == JpegConstants.DCTSIZE - 2 || ctr == JpegConstants.DCTSIZE - 4 || ctr == JpegConstants.DCTSIZE - 6
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The following statement contains a magic number: ctr == JpegConstants.DCTSIZE - 2 || ctr == JpegConstants.DCTSIZE - 4 || ctr == JpegConstants.DCTSIZE - 6
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The following statement contains a magic number: ctr == JpegConstants.DCTSIZE - 2 || ctr == JpegConstants.DCTSIZE - 4 || ctr == JpegConstants.DCTSIZE - 6
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The following statement contains a magic number: coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The following statement contains a magic number: coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The following statement contains a magic number: coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The following statement contains a magic number: int tmp10 = z1 << (REDUCED_CONST_BITS + 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The following statement contains a magic number: z1 = REDUCED_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 7]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The following statement contains a magic number: z1 = REDUCED_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 7]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The following statement contains a magic number: z1 = REDUCED_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 5]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The following statement contains a magic number: z1 = REDUCED_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 5]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The following statement contains a magic number: z1 = REDUCED_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 3]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The following statement contains a magic number: z1 = REDUCED_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 3]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 0] = JpegUtils.DESCALE(tmp10 + tmp0' REDUCED_CONST_BITS - REDUCED_PASS1_BITS + 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 1] = JpegUtils.DESCALE(tmp10 - tmp0' REDUCED_CONST_BITS - REDUCED_PASS1_BITS + 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The following statement contains a magic number: byte dcval = limit[limitOffset + JpegUtils.DESCALE(workspace[workspaceIndex + 0]' REDUCED_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The following statement contains a magic number: workspace[workspaceIndex + 1] == 0 &&                      workspace[workspaceIndex + 3] == 0 &&                      workspace[workspaceIndex + 5] == 0 &&                      workspace[workspaceIndex + 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The following statement contains a magic number: workspace[workspaceIndex + 1] == 0 &&                      workspace[workspaceIndex + 3] == 0 &&                      workspace[workspaceIndex + 5] == 0 &&                      workspace[workspaceIndex + 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The following statement contains a magic number: workspace[workspaceIndex + 1] == 0 &&                      workspace[workspaceIndex + 3] == 0 &&                      workspace[workspaceIndex + 5] == 0 &&                      workspace[workspaceIndex + 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The following statement contains a magic number: int tmp10 = (workspace[workspaceIndex + 0]) << (REDUCED_CONST_BITS + 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The following statement contains a magic number: int tmp0 = workspace[workspaceIndex + 7] * (-REDUCED_FIX_0_720959822) /* sqrt(2) * (c7-c5+c3-c1) */ +                         workspace[workspaceIndex + 5] * REDUCED_FIX_0_850430095 /* sqrt(2) * (-c1+c3+c5+c7) */ +                         workspace[workspaceIndex + 3] * (-REDUCED_FIX_1_272758580) /* sqrt(2) * (-c1+c3-c5-c7) */ +                         workspace[workspaceIndex + 1] * REDUCED_FIX_3_624509785;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The following statement contains a magic number: int tmp0 = workspace[workspaceIndex + 7] * (-REDUCED_FIX_0_720959822) /* sqrt(2) * (c7-c5+c3-c1) */ +                         workspace[workspaceIndex + 5] * REDUCED_FIX_0_850430095 /* sqrt(2) * (-c1+c3+c5+c7) */ +                         workspace[workspaceIndex + 3] * (-REDUCED_FIX_1_272758580) /* sqrt(2) * (-c1+c3-c5-c7) */ +                         workspace[workspaceIndex + 1] * REDUCED_FIX_3_624509785;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The following statement contains a magic number: int tmp0 = workspace[workspaceIndex + 7] * (-REDUCED_FIX_0_720959822) /* sqrt(2) * (c7-c5+c3-c1) */ +                         workspace[workspaceIndex + 5] * REDUCED_FIX_0_850430095 /* sqrt(2) * (-c1+c3+c5+c7) */ +                         workspace[workspaceIndex + 3] * (-REDUCED_FIX_1_272758580) /* sqrt(2) * (-c1+c3-c5-c7) */ +                         workspace[workspaceIndex + 1] * REDUCED_FIX_3_624509785;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 0] = limit[limitOffset + JpegUtils.DESCALE(tmp10 + tmp0' REDUCED_CONST_BITS + REDUCED_PASS1_BITS + 3 + 2) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 0] = limit[limitOffset + JpegUtils.DESCALE(tmp10 + tmp0' REDUCED_CONST_BITS + REDUCED_PASS1_BITS + 3 + 2) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 1] = limit[limitOffset + JpegUtils.DESCALE(tmp10 - tmp0' REDUCED_CONST_BITS + REDUCED_PASS1_BITS + 3 + 2) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 1] = limit[limitOffset + JpegUtils.DESCALE(tmp10 - tmp0' REDUCED_CONST_BITS + REDUCED_PASS1_BITS + 3 + 2) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_2x2,The following statement contains a magic number: ctr < 2
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_1x1,The following statement contains a magic number: dcval = JpegUtils.DESCALE(dcval' 3);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: int[] workspace = new int[8 * 16];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: int[] workspace = new int[8 * 16];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: int z1 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 4]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: int z1 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 4]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: int tmp1 = z1 * SLOW_INTEGER_FIX(1.306562965);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: z1 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 2]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: z1 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 2]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: int z2 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 6]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: int z2 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 6]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: int z4 = z3 * SLOW_INTEGER_FIX(0.275899379);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: z3 = z3 * SLOW_INTEGER_FIX(1.387039845);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: tmp2 = z3 - z1 * SLOW_INTEGER_FIX(0.601344887);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: int tmp3 = z4 - z2 * SLOW_INTEGER_FIX(0.509795579);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: z2 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 3]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: z2 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 3]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: z3 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 5]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: z3 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 5]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: z4 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 7]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: z4 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 7]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: tmp1 = (z1 + z2) * SLOW_INTEGER_FIX(1.353318001);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: tmp2 = tmp11 * SLOW_INTEGER_FIX(1.247225013);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: tmp3 = (z1 + z4) * SLOW_INTEGER_FIX(1.093201867);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: tmp10 = (z1 - z4) * SLOW_INTEGER_FIX(0.897167586);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: tmp11 = tmp11 * SLOW_INTEGER_FIX(0.666655658);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: tmp12 = (z1 - z2) * SLOW_INTEGER_FIX(0.410524528);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: tmp0 = tmp1 + tmp2 + tmp3 - z1 * SLOW_INTEGER_FIX(2.286341144);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: tmp13 = tmp10 + tmp11 + tmp12 - z1 * SLOW_INTEGER_FIX(1.835730603);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: z1 = (z2 + z3) * SLOW_INTEGER_FIX(0.138617169);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: tmp1 += z1 + z2 * SLOW_INTEGER_FIX(0.071888074);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: tmp2 += z1 - z3 * SLOW_INTEGER_FIX(1.125726048);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: z1 = (z3 - z2) * SLOW_INTEGER_FIX(1.407403738);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: tmp11 += z1 - z3 * SLOW_INTEGER_FIX(0.766367282);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: tmp12 += z1 + z2 * SLOW_INTEGER_FIX(1.971951411);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: z1 = z2 * (-SLOW_INTEGER_FIX(0.666655658));
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: tmp3 += z1 + z4 * SLOW_INTEGER_FIX(1.065388962);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: z2 = z2 * (-SLOW_INTEGER_FIX(1.247225013));
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: tmp10 += z2 + z4 * SLOW_INTEGER_FIX(3.141271809);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: z2 = (z3 + z4) * (-SLOW_INTEGER_FIX(1.353318001));
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: z2 = (z4 - z3) * SLOW_INTEGER_FIX(0.410524528);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 0] = JpegUtils.RIGHT_SHIFT(tmp20 + tmp0' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 15] = JpegUtils.RIGHT_SHIFT(tmp20 - tmp0' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 15] = JpegUtils.RIGHT_SHIFT(tmp20 - tmp0' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 1] = JpegUtils.RIGHT_SHIFT(tmp21 + tmp1' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 14] = JpegUtils.RIGHT_SHIFT(tmp21 - tmp1' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 14] = JpegUtils.RIGHT_SHIFT(tmp21 - tmp1' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 2] = JpegUtils.RIGHT_SHIFT(tmp22 + tmp2' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 2] = JpegUtils.RIGHT_SHIFT(tmp22 + tmp2' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 13] = JpegUtils.RIGHT_SHIFT(tmp22 - tmp2' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 13] = JpegUtils.RIGHT_SHIFT(tmp22 - tmp2' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 3] = JpegUtils.RIGHT_SHIFT(tmp23 + tmp3' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 3] = JpegUtils.RIGHT_SHIFT(tmp23 + tmp3' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 12] = JpegUtils.RIGHT_SHIFT(tmp23 - tmp3' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 12] = JpegUtils.RIGHT_SHIFT(tmp23 - tmp3' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 4] = JpegUtils.RIGHT_SHIFT(tmp24 + tmp10' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 4] = JpegUtils.RIGHT_SHIFT(tmp24 + tmp10' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 11] = JpegUtils.RIGHT_SHIFT(tmp24 - tmp10' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 11] = JpegUtils.RIGHT_SHIFT(tmp24 - tmp10' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 5] = JpegUtils.RIGHT_SHIFT(tmp25 + tmp11' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 5] = JpegUtils.RIGHT_SHIFT(tmp25 + tmp11' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 10] = JpegUtils.RIGHT_SHIFT(tmp25 - tmp11' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 10] = JpegUtils.RIGHT_SHIFT(tmp25 - tmp11' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 6] = JpegUtils.RIGHT_SHIFT(tmp26 + tmp12' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 6] = JpegUtils.RIGHT_SHIFT(tmp26 + tmp12' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 9] = JpegUtils.RIGHT_SHIFT(tmp26 - tmp12' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 9] = JpegUtils.RIGHT_SHIFT(tmp26 - tmp12' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 7] = JpegUtils.RIGHT_SHIFT(tmp27 + tmp13' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 7] = JpegUtils.RIGHT_SHIFT(tmp27 + tmp13' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 8] = JpegUtils.RIGHT_SHIFT(tmp27 - tmp13' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 8] = JpegUtils.RIGHT_SHIFT(tmp27 - tmp13' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: ctr < 8
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: int tmp0 = workspace[workspaceIndex + 0] +                      (RANGE_CENTER << (SLOW_INTEGER_PASS1_BITS + 3)) +                      (1 << (SLOW_INTEGER_PASS1_BITS + 2));
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: int tmp0 = workspace[workspaceIndex + 0] +                      (RANGE_CENTER << (SLOW_INTEGER_PASS1_BITS + 3)) +                      (1 << (SLOW_INTEGER_PASS1_BITS + 2));
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: int z1 = workspace[workspaceIndex + 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: int tmp1 = z1 * SLOW_INTEGER_FIX(1.306562965);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: z1 = workspace[workspaceIndex + 2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: int z2 = workspace[workspaceIndex + 6];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: int z4 = z3 * SLOW_INTEGER_FIX(0.275899379);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: z3 = z3 * SLOW_INTEGER_FIX(1.387039845);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: tmp2 = z3 - z1 * SLOW_INTEGER_FIX(0.601344887);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: int tmp3 = z4 - z2 * SLOW_INTEGER_FIX(0.509795579);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: z2 = workspace[workspaceIndex + 3];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: z3 = workspace[workspaceIndex + 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: z4 = workspace[workspaceIndex + 7];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: tmp1 = (z1 + z2) * SLOW_INTEGER_FIX(1.353318001);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: tmp2 = tmp11 * SLOW_INTEGER_FIX(1.247225013);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: tmp3 = (z1 + z4) * SLOW_INTEGER_FIX(1.093201867);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: tmp10 = (z1 - z4) * SLOW_INTEGER_FIX(0.897167586);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: tmp11 = tmp11 * SLOW_INTEGER_FIX(0.666655658);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: tmp12 = (z1 - z2) * SLOW_INTEGER_FIX(0.410524528);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: tmp0 = tmp1 + tmp2 + tmp3 - z1 * SLOW_INTEGER_FIX(2.286341144);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: tmp13 = tmp10 + tmp11 + tmp12 - z1 * SLOW_INTEGER_FIX(1.835730603);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: z1 = (z2 + z3) * SLOW_INTEGER_FIX(0.138617169);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: tmp1 += z1 + z2 * SLOW_INTEGER_FIX(0.071888074);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: tmp2 += z1 - z3 * SLOW_INTEGER_FIX(1.125726048);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: z1 = (z3 - z2) * SLOW_INTEGER_FIX(1.407403738);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: tmp11 += z1 - z3 * SLOW_INTEGER_FIX(0.766367282);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: tmp12 += z1 + z2 * SLOW_INTEGER_FIX(1.971951411);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: z1 = z2 * (-SLOW_INTEGER_FIX(0.666655658));
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: tmp3 += z1 + z4 * SLOW_INTEGER_FIX(1.065388962);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: z2 = z2 * (-SLOW_INTEGER_FIX(1.247225013));
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: tmp10 += z2 + z4 * SLOW_INTEGER_FIX(3.141271809);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: z2 = (z3 + z4) * (-SLOW_INTEGER_FIX(1.353318001));
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: z2 = (z4 - z3) * SLOW_INTEGER_FIX(0.410524528);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 0] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                          tmp20 + tmp0' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 15] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp20 - tmp0' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 15] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp20 - tmp0' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 1] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp21 + tmp1' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 14] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp21 - tmp1' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 14] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp21 - tmp1' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 2] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp22 + tmp2' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 2] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp22 + tmp2' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 13] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp22 - tmp2' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 13] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp22 - tmp2' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 3] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp23 + tmp3' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 3] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp23 + tmp3' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 12] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp23 - tmp3' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 12] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp23 - tmp3' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 4] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp24 + tmp10' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 4] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp24 + tmp10' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 11] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp24 - tmp10' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 11] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp24 - tmp10' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 5] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp25 + tmp11' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 5] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp25 + tmp11' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 10] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp25 - tmp11' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 10] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp25 - tmp11' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 6] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp26 + tmp12' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 6] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp26 + tmp12' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 9] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp26 - tmp12' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 9] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp26 - tmp12' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 7] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp27 + tmp13' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 7] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp27 + tmp13' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 8] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp27 - tmp13' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 8] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp27 - tmp13' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: workspaceIndex += 8;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The following statement contains a magic number: ctr < 16
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: int[] workspace = new int[8 * 8];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: int[] workspace = new int[8 * 8];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 2] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 3] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 4] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 5] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 6] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 7] = dcval;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 1] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6] == 0 &&                      coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: int z2 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 2]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: int z2 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 2]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: int z3 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 6]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: int z3 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 6]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: z3 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 4]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: z3 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 4]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: tmp0 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 7]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: tmp0 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 7]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: tmp1 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 5]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: tmp1 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 5]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: tmp2 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 3]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: tmp2 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 3]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 7] = JpegUtils.RIGHT_SHIFT(tmp10 - tmp3' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 6] = JpegUtils.RIGHT_SHIFT(tmp11 - tmp2' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 2] = JpegUtils.RIGHT_SHIFT(tmp12 + tmp1' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 5] = JpegUtils.RIGHT_SHIFT(tmp12 - tmp1' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 3] = JpegUtils.RIGHT_SHIFT(tmp13 + tmp0' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: workspace[workspaceIndex + JpegConstants.DCTSIZE * 4] = JpegUtils.RIGHT_SHIFT(tmp13 - tmp0' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: int tmp0 = workspace[workspaceIndex + 0] +                      (RANGE_CENTER << (SLOW_INTEGER_PASS1_BITS + 3)) +                      (1 << (SLOW_INTEGER_PASS1_BITS + 2));
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: int tmp0 = workspace[workspaceIndex + 0] +                      (RANGE_CENTER << (SLOW_INTEGER_PASS1_BITS + 3)) +                      (1 << (SLOW_INTEGER_PASS1_BITS + 2));
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: int z1 = workspace[workspaceIndex + 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: int tmp1 = z1 * SLOW_INTEGER_FIX(1.306562965);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: z1 = workspace[workspaceIndex + 2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: int z2 = workspace[workspaceIndex + 6];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: int z4 = z3 * SLOW_INTEGER_FIX(0.275899379);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: z3 = z3 * SLOW_INTEGER_FIX(1.387039845);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: tmp2 = z3 - z1 * SLOW_INTEGER_FIX(0.601344887);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: int tmp3 = z4 - z2 * SLOW_INTEGER_FIX(0.509795579);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: z2 = workspace[workspaceIndex + 3];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: z3 = workspace[workspaceIndex + 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: z4 = workspace[workspaceIndex + 7];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: tmp1 = (z1 + z2) * SLOW_INTEGER_FIX(1.353318001);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: tmp2 = tmp11 * SLOW_INTEGER_FIX(1.247225013);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: tmp3 = (z1 + z4) * SLOW_INTEGER_FIX(1.093201867);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: tmp10 = (z1 - z4) * SLOW_INTEGER_FIX(0.897167586);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: tmp11 = tmp11 * SLOW_INTEGER_FIX(0.666655658);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: tmp12 = (z1 - z2) * SLOW_INTEGER_FIX(0.410524528);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: tmp0 = tmp1 + tmp2 + tmp3 - z1 * SLOW_INTEGER_FIX(2.286341144);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: tmp13 = tmp10 + tmp11 + tmp12 - z1 * SLOW_INTEGER_FIX(1.835730603);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: z1 = (z2 + z3) * SLOW_INTEGER_FIX(0.138617169);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: tmp1 += z1 + z2 * SLOW_INTEGER_FIX(0.071888074);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: tmp2 += z1 - z3 * SLOW_INTEGER_FIX(1.125726048);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: z1 = (z3 - z2) * SLOW_INTEGER_FIX(1.407403738);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: tmp11 += z1 - z3 * SLOW_INTEGER_FIX(0.766367282);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: tmp12 += z1 + z2 * SLOW_INTEGER_FIX(1.971951411);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: z1 = z2 * (-SLOW_INTEGER_FIX(0.666655658));
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: tmp3 += z1 + z4 * SLOW_INTEGER_FIX(1.065388962);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: z2 = z2 * (-SLOW_INTEGER_FIX(1.247225013));
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: tmp10 += z2 + z4 * SLOW_INTEGER_FIX(3.141271809);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: z2 = (z3 + z4) * (-SLOW_INTEGER_FIX(1.353318001));
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: z2 = (z4 - z3) * SLOW_INTEGER_FIX(0.410524528);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 0] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                          tmp20 + tmp0' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 15] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp20 - tmp0' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 15] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp20 - tmp0' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 1] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp21 + tmp1' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 14] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp21 - tmp1' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 14] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp21 - tmp1' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 2] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp22 + tmp2' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 2] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp22 + tmp2' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 13] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp22 - tmp2' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 13] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp22 - tmp2' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 3] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp23 + tmp3' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 3] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp23 + tmp3' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 12] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp23 - tmp3' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 12] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp23 - tmp3' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 4] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp24 + tmp10' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 4] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp24 + tmp10' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 11] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp24 - tmp10' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 11] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp24 - tmp10' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 5] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp25 + tmp11' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 5] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp25 + tmp11' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 10] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp25 - tmp11' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 10] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp25 - tmp11' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 6] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp26 + tmp12' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 6] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp26 + tmp12' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 9] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp26 - tmp12' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 9] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp26 - tmp12' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 7] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp27 + tmp13' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 7] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp27 + tmp13' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 8] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp27 - tmp13' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 8] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp27 - tmp13' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: workspaceIndex += 8;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x8,The following statement contains a magic number: ctr < 8
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: int[] workspace = new int[8 * 16];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: int[] workspace = new int[8 * 16];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: int z1 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 4]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: int z1 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 4]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 4]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: int tmp1 = z1 * SLOW_INTEGER_FIX(1.306562965);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: z1 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 2]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: z1 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 2]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 2]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: int z2 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 6]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: int z2 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 6]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 6]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: int z4 = z3 * SLOW_INTEGER_FIX(0.275899379);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: z3 = z3 * SLOW_INTEGER_FIX(1.387039845);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: tmp2 = z3 - z1 * SLOW_INTEGER_FIX(0.601344887);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: int tmp3 = z4 - z2 * SLOW_INTEGER_FIX(0.509795579);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: z2 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 3]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: z2 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 3]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 3]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: z3 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 5]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: z3 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 5]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 5]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: z4 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 7]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: z4 = SLOW_INTEGER_DEQUANTIZE(coef_block[coefBlockIndex + JpegConstants.DCTSIZE * 7]'                      quantTable[quantTableIndex + JpegConstants.DCTSIZE * 7]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: tmp1 = (z1 + z2) * SLOW_INTEGER_FIX(1.353318001);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: tmp2 = tmp11 * SLOW_INTEGER_FIX(1.247225013);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: tmp3 = (z1 + z4) * SLOW_INTEGER_FIX(1.093201867);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: tmp10 = (z1 - z4) * SLOW_INTEGER_FIX(0.897167586);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: tmp11 = tmp11 * SLOW_INTEGER_FIX(0.666655658);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: tmp12 = (z1 - z2) * SLOW_INTEGER_FIX(0.410524528);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: tmp0 = tmp1 + tmp2 + tmp3 - z1 * SLOW_INTEGER_FIX(2.286341144);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: tmp13 = tmp10 + tmp11 + tmp12 - z1 * SLOW_INTEGER_FIX(1.835730603);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: z1 = (z2 + z3) * SLOW_INTEGER_FIX(0.138617169);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: tmp1 += z1 + z2 * SLOW_INTEGER_FIX(0.071888074);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: tmp2 += z1 - z3 * SLOW_INTEGER_FIX(1.125726048);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: z1 = (z3 - z2) * SLOW_INTEGER_FIX(1.407403738);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: tmp11 += z1 - z3 * SLOW_INTEGER_FIX(0.766367282);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: tmp12 += z1 + z2 * SLOW_INTEGER_FIX(1.971951411);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: z1 = z2 * (-SLOW_INTEGER_FIX(0.666655658));
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: tmp3 += z1 + z4 * SLOW_INTEGER_FIX(1.065388962);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: z2 = z2 * (-SLOW_INTEGER_FIX(1.247225013));
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: tmp10 += z2 + z4 * SLOW_INTEGER_FIX(3.141271809);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: z2 = (z3 + z4) * (-SLOW_INTEGER_FIX(1.353318001));
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: z2 = (z4 - z3) * SLOW_INTEGER_FIX(0.410524528);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 0] = JpegUtils.RIGHT_SHIFT(tmp20 + tmp0' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 15] = JpegUtils.RIGHT_SHIFT(tmp20 - tmp0' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 15] = JpegUtils.RIGHT_SHIFT(tmp20 - tmp0' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 1] = JpegUtils.RIGHT_SHIFT(tmp21 + tmp1' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 14] = JpegUtils.RIGHT_SHIFT(tmp21 - tmp1' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 14] = JpegUtils.RIGHT_SHIFT(tmp21 - tmp1' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 2] = JpegUtils.RIGHT_SHIFT(tmp22 + tmp2' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 2] = JpegUtils.RIGHT_SHIFT(tmp22 + tmp2' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 13] = JpegUtils.RIGHT_SHIFT(tmp22 - tmp2' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 13] = JpegUtils.RIGHT_SHIFT(tmp22 - tmp2' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 3] = JpegUtils.RIGHT_SHIFT(tmp23 + tmp3' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 3] = JpegUtils.RIGHT_SHIFT(tmp23 + tmp3' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 12] = JpegUtils.RIGHT_SHIFT(tmp23 - tmp3' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 12] = JpegUtils.RIGHT_SHIFT(tmp23 - tmp3' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 4] = JpegUtils.RIGHT_SHIFT(tmp24 + tmp10' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 4] = JpegUtils.RIGHT_SHIFT(tmp24 + tmp10' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 11] = JpegUtils.RIGHT_SHIFT(tmp24 - tmp10' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 11] = JpegUtils.RIGHT_SHIFT(tmp24 - tmp10' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 5] = JpegUtils.RIGHT_SHIFT(tmp25 + tmp11' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 5] = JpegUtils.RIGHT_SHIFT(tmp25 + tmp11' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 10] = JpegUtils.RIGHT_SHIFT(tmp25 - tmp11' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 10] = JpegUtils.RIGHT_SHIFT(tmp25 - tmp11' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 6] = JpegUtils.RIGHT_SHIFT(tmp26 + tmp12' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 6] = JpegUtils.RIGHT_SHIFT(tmp26 + tmp12' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 9] = JpegUtils.RIGHT_SHIFT(tmp26 - tmp12' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 9] = JpegUtils.RIGHT_SHIFT(tmp26 - tmp12' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 7] = JpegUtils.RIGHT_SHIFT(tmp27 + tmp13' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 7] = JpegUtils.RIGHT_SHIFT(tmp27 + tmp13' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 8] = JpegUtils.RIGHT_SHIFT(tmp27 - tmp13' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: workspace[workspaceIndex + 8 * 8] = JpegUtils.RIGHT_SHIFT(tmp27 - tmp13' SLOW_INTEGER_CONST_BITS - SLOW_INTEGER_PASS1_BITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: ctr < 8
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: int z2 = workspace[workspaceIndex + 0] +                       (RANGE_CENTER << (SLOW_INTEGER_PASS1_BITS + 3)) +                       (1 << (SLOW_INTEGER_PASS1_BITS + 2));
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: int z2 = workspace[workspaceIndex + 0] +                       (RANGE_CENTER << (SLOW_INTEGER_PASS1_BITS + 3)) +                       (1 << (SLOW_INTEGER_PASS1_BITS + 2));
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: int z3 = workspace[workspaceIndex + 4];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: z2 = workspace[workspaceIndex + 2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: z3 = workspace[workspaceIndex + 6];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: tmp0 = workspace[workspaceIndex + 7];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: tmp1 = workspace[workspaceIndex + 5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: tmp2 = workspace[workspaceIndex + 3];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 0] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp10 + tmp3' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 7] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp10 - tmp3' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 7] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp10 - tmp3' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 1] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp11 + tmp2' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 6] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp11 - tmp2' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 6] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp11 - tmp2' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 2] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp12 + tmp1' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 2] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp12 + tmp1' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 5] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp12 - tmp1' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 5] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp12 - tmp1' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 3] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp13 + tmp0' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 3] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp13 + tmp0' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 4] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp13 - tmp0' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: m_componentBuffer[currentOutRow][output_col + 4] = limit[limitOffset + JpegUtils.RIGHT_SHIFT(                      tmp13 - tmp0' SLOW_INTEGER_CONST_BITS + SLOW_INTEGER_PASS1_BITS + 3) & RANGE_MASK];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_8x16,The following statement contains a magic number: ctr < 16
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,jpeg_marker_reader,The following statement contains a magic number: i < 16
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,jpeg_marker_reader,The following statement contains a magic number: m_process_APPn[14] = get_interesting_appn;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,read_restart_marker,The following statement contains a magic number: m_cinfo.TRACEMS(3' J_MESSAGE_CODE.JTRC_RST' m_cinfo.m_marker.m_next_restart_num);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,read_restart_marker,The following statement contains a magic number: m_cinfo.m_marker.m_next_restart_num = (m_cinfo.m_marker.m_next_restart_num + 1) & 7;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,next_marker,The following statement contains a magic number: m_cinfo.m_marker.m_discarded_bytes += 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,save_marker,The following statement contains a magic number: length -= 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,skip_variable,The following statement contains a magic number: length -= 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_interesting_appn,The following statement contains a magic number: length -= 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app0,The following statement contains a magic number: cinfo.m_JFIF_major_version = data[5];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app0,The following statement contains a magic number: cinfo.m_JFIF_minor_version = data[6];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app0,The following statement contains a magic number: cinfo.m_density_unit = (DensityUnit)data[7];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app0,The following statement contains a magic number: cinfo.m_X_density = (short)((data[8] << 8) + data[9]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app0,The following statement contains a magic number: cinfo.m_X_density = (short)((data[8] << 8) + data[9]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app0,The following statement contains a magic number: cinfo.m_X_density = (short)((data[8] << 8) + data[9]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app0,The following statement contains a magic number: cinfo.m_Y_density = (short)((data[10] << 8) + data[11]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app0,The following statement contains a magic number: cinfo.m_Y_density = (short)((data[10] << 8) + data[11]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app0,The following statement contains a magic number: cinfo.m_Y_density = (short)((data[10] << 8) + data[11]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app0,The following statement contains a magic number: cinfo.m_JFIF_major_version != 1 && cinfo.m_JFIF_major_version != 2
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app0,The following statement contains a magic number: cinfo.TRACEMS(1' J_MESSAGE_CODE.JTRC_JFIF_THUMBNAIL' data[12]' data[13]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app0,The following statement contains a magic number: cinfo.TRACEMS(1' J_MESSAGE_CODE.JTRC_JFIF_THUMBNAIL' data[12]' data[13]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app0,The following statement contains a magic number: (data[12] | data[13]) != 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app0,The following statement contains a magic number: (data[12] | data[13]) != 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app0,The following statement contains a magic number: totallen != ((int)data[12] * (int)data[13] * 3)
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app0,The following statement contains a magic number: totallen != ((int)data[12] * (int)data[13] * 3)
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app0,The following statement contains a magic number: totallen != ((int)data[12] * (int)data[13] * 3)
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app0,The following statement contains a magic number: datalen >= APP0_DATA_LEN &&                  data[0] == 0x4A &&                  data[1] == 0x46 &&                  data[2] == 0x49 &&                  data[3] == 0x46 &&                  data[4] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app0,The following statement contains a magic number: datalen >= APP0_DATA_LEN &&                  data[0] == 0x4A &&                  data[1] == 0x46 &&                  data[2] == 0x49 &&                  data[3] == 0x46 &&                  data[4] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app0,The following statement contains a magic number: datalen >= APP0_DATA_LEN &&                  data[0] == 0x4A &&                  data[1] == 0x46 &&                  data[2] == 0x49 &&                  data[3] == 0x46 &&                  data[4] == 0
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app14,The following statement contains a magic number: int version = (data[5] << 8) + data[6];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app14,The following statement contains a magic number: int version = (data[5] << 8) + data[6];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app14,The following statement contains a magic number: int version = (data[5] << 8) + data[6];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app14,The following statement contains a magic number: int flags0 = (data[7] << 8) + data[8];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app14,The following statement contains a magic number: int flags0 = (data[7] << 8) + data[8];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app14,The following statement contains a magic number: int flags0 = (data[7] << 8) + data[8];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app14,The following statement contains a magic number: int flags1 = (data[9] << 8) + data[10];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app14,The following statement contains a magic number: int flags1 = (data[9] << 8) + data[10];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app14,The following statement contains a magic number: int flags1 = (data[9] << 8) + data[10];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app14,The following statement contains a magic number: int transform = data[11];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app14,The following statement contains a magic number: datalen >= APP14_DATA_LEN &&                  data[0] == 0x41 &&                  data[1] == 0x64 &&                  data[2] == 0x6F &&                  data[3] == 0x62 &&                  data[4] == 0x65
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app14,The following statement contains a magic number: datalen >= APP14_DATA_LEN &&                  data[0] == 0x41 &&                  data[1] == 0x64 &&                  data[2] == 0x6F &&                  data[3] == 0x62 &&                  data[4] == 0x65
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,examine_app14,The following statement contains a magic number: datalen >= APP14_DATA_LEN &&                  data[0] == 0x41 &&                  data[1] == 0x64 &&                  data[2] == 0x6F &&                  data[3] == 0x62 &&                  data[4] == 0x65
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_sof,The following statement contains a magic number: length -= 8;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_sof,The following statement contains a magic number: length != (m_cinfo.m_num_components * 3)
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_sof,The following statement contains a magic number: compptr.H_samp_factor = (c >> 4) & 15;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_sof,The following statement contains a magic number: compptr.H_samp_factor = (c >> 4) & 15;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_sof,The following statement contains a magic number: compptr.V_samp_factor = (c) & 15;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_sos,The following statement contains a magic number: length != (n * 2 + 6) || n > JpegConstants.MAX_COMPS_IN_SCAN ||                  (n == 0 && m_cinfo.m_progressive_mode)
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_sos,The following statement contains a magic number: length != (n * 2 + 6) || n > JpegConstants.MAX_COMPS_IN_SCAN ||                  (n == 0 && m_cinfo.m_progressive_mode)
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_sos,The following statement contains a magic number: m_cinfo.Comp_info[foundIndex].Dc_tbl_no = (c >> 4) & 15;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_sos,The following statement contains a magic number: m_cinfo.Comp_info[foundIndex].Dc_tbl_no = (c >> 4) & 15;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_sos,The following statement contains a magic number: m_cinfo.Comp_info[foundIndex].Ac_tbl_no = (c) & 15;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_sos,The following statement contains a magic number: m_cinfo.m_Ah = (temp >> 4) & 15;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_sos,The following statement contains a magic number: m_cinfo.m_Ah = (temp >> 4) & 15;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_sos,The following statement contains a magic number: m_cinfo.m_Al = (temp) & 15;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dac,The following statement contains a magic number: length -= 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dac,The following statement contains a magic number: length -= 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dac,The following statement contains a magic number: index < 0 || index >= (2 * JpegConstants.NUM_ARITH_TBLS)
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dht,The following statement contains a magic number: length -= 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dht,The following statement contains a magic number: byte[] bits = new byte[17];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dht,The following statement contains a magic number: byte[] huffval = new byte[256];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dht,The following statement contains a magic number: i <= 16
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dht,The following statement contains a magic number: length -= 1 + 16;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dht,The following statement contains a magic number: m_cinfo.TRACEMS(2' J_MESSAGE_CODE.JTRC_HUFFBITS' bits[1]' bits[2]' bits[3]' bits[4]' bits[5]' bits[6]' bits[7]' bits[8]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dht,The following statement contains a magic number: m_cinfo.TRACEMS(2' J_MESSAGE_CODE.JTRC_HUFFBITS' bits[1]' bits[2]' bits[3]' bits[4]' bits[5]' bits[6]' bits[7]' bits[8]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dht,The following statement contains a magic number: m_cinfo.TRACEMS(2' J_MESSAGE_CODE.JTRC_HUFFBITS' bits[1]' bits[2]' bits[3]' bits[4]' bits[5]' bits[6]' bits[7]' bits[8]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dht,The following statement contains a magic number: m_cinfo.TRACEMS(2' J_MESSAGE_CODE.JTRC_HUFFBITS' bits[1]' bits[2]' bits[3]' bits[4]' bits[5]' bits[6]' bits[7]' bits[8]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dht,The following statement contains a magic number: m_cinfo.TRACEMS(2' J_MESSAGE_CODE.JTRC_HUFFBITS' bits[1]' bits[2]' bits[3]' bits[4]' bits[5]' bits[6]' bits[7]' bits[8]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dht,The following statement contains a magic number: m_cinfo.TRACEMS(2' J_MESSAGE_CODE.JTRC_HUFFBITS' bits[1]' bits[2]' bits[3]' bits[4]' bits[5]' bits[6]' bits[7]' bits[8]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dht,The following statement contains a magic number: m_cinfo.TRACEMS(2' J_MESSAGE_CODE.JTRC_HUFFBITS' bits[1]' bits[2]' bits[3]' bits[4]' bits[5]' bits[6]' bits[7]' bits[8]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dht,The following statement contains a magic number: m_cinfo.TRACEMS(2' J_MESSAGE_CODE.JTRC_HUFFBITS' bits[1]' bits[2]' bits[3]' bits[4]' bits[5]' bits[6]' bits[7]' bits[8]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dht,The following statement contains a magic number: m_cinfo.TRACEMS(2' J_MESSAGE_CODE.JTRC_HUFFBITS' bits[9]' bits[10]' bits[11]' bits[12]' bits[13]' bits[14]' bits[15]' bits[16]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dht,The following statement contains a magic number: m_cinfo.TRACEMS(2' J_MESSAGE_CODE.JTRC_HUFFBITS' bits[9]' bits[10]' bits[11]' bits[12]' bits[13]' bits[14]' bits[15]' bits[16]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dht,The following statement contains a magic number: m_cinfo.TRACEMS(2' J_MESSAGE_CODE.JTRC_HUFFBITS' bits[9]' bits[10]' bits[11]' bits[12]' bits[13]' bits[14]' bits[15]' bits[16]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dht,The following statement contains a magic number: m_cinfo.TRACEMS(2' J_MESSAGE_CODE.JTRC_HUFFBITS' bits[9]' bits[10]' bits[11]' bits[12]' bits[13]' bits[14]' bits[15]' bits[16]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dht,The following statement contains a magic number: m_cinfo.TRACEMS(2' J_MESSAGE_CODE.JTRC_HUFFBITS' bits[9]' bits[10]' bits[11]' bits[12]' bits[13]' bits[14]' bits[15]' bits[16]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dht,The following statement contains a magic number: m_cinfo.TRACEMS(2' J_MESSAGE_CODE.JTRC_HUFFBITS' bits[9]' bits[10]' bits[11]' bits[12]' bits[13]' bits[14]' bits[15]' bits[16]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dht,The following statement contains a magic number: m_cinfo.TRACEMS(2' J_MESSAGE_CODE.JTRC_HUFFBITS' bits[9]' bits[10]' bits[11]' bits[12]' bits[13]' bits[14]' bits[15]' bits[16]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dht,The following statement contains a magic number: m_cinfo.TRACEMS(2' J_MESSAGE_CODE.JTRC_HUFFBITS' bits[9]' bits[10]' bits[11]' bits[12]' bits[13]' bits[14]' bits[15]' bits[16]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dht,The following statement contains a magic number: m_cinfo.TRACEMS(2' J_MESSAGE_CODE.JTRC_HUFFBITS' bits[9]' bits[10]' bits[11]' bits[12]' bits[13]' bits[14]' bits[15]' bits[16]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dht,The following statement contains a magic number: count > 256 || count > length
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dht,The following statement contains a magic number: length > 16
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dqt,The following statement contains a magic number: length -= 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dqt,The following statement contains a magic number: int prec = n >> 4;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dqt,The following statement contains a magic number: length < JpegConstants.DCTSIZE2 * 2
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dqt,The following statement contains a magic number: switch (count)                  {                      case (2 * 2):                          natural_order = JpegUtils.jpeg_natural_order2;                          break;                      case (3 * 3):                          natural_order = JpegUtils.jpeg_natural_order3;                          break;                      case (4 * 4):                          natural_order = JpegUtils.jpeg_natural_order4;                          break;                      case (5 * 5):                          natural_order = JpegUtils.jpeg_natural_order5;                          break;                      case (6 * 6):                          natural_order = JpegUtils.jpeg_natural_order6;                          break;                      case (7 * 7):                          natural_order = JpegUtils.jpeg_natural_order7;                          break;                      default:                          natural_order = JpegUtils.jpeg_natural_order;                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dqt,The following statement contains a magic number: switch (count)                  {                      case (2 * 2):                          natural_order = JpegUtils.jpeg_natural_order2;                          break;                      case (3 * 3):                          natural_order = JpegUtils.jpeg_natural_order3;                          break;                      case (4 * 4):                          natural_order = JpegUtils.jpeg_natural_order4;                          break;                      case (5 * 5):                          natural_order = JpegUtils.jpeg_natural_order5;                          break;                      case (6 * 6):                          natural_order = JpegUtils.jpeg_natural_order6;                          break;                      case (7 * 7):                          natural_order = JpegUtils.jpeg_natural_order7;                          break;                      default:                          natural_order = JpegUtils.jpeg_natural_order;                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dqt,The following statement contains a magic number: switch (count)                  {                      case (2 * 2):                          natural_order = JpegUtils.jpeg_natural_order2;                          break;                      case (3 * 3):                          natural_order = JpegUtils.jpeg_natural_order3;                          break;                      case (4 * 4):                          natural_order = JpegUtils.jpeg_natural_order4;                          break;                      case (5 * 5):                          natural_order = JpegUtils.jpeg_natural_order5;                          break;                      case (6 * 6):                          natural_order = JpegUtils.jpeg_natural_order6;                          break;                      case (7 * 7):                          natural_order = JpegUtils.jpeg_natural_order7;                          break;                      default:                          natural_order = JpegUtils.jpeg_natural_order;                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dqt,The following statement contains a magic number: switch (count)                  {                      case (2 * 2):                          natural_order = JpegUtils.jpeg_natural_order2;                          break;                      case (3 * 3):                          natural_order = JpegUtils.jpeg_natural_order3;                          break;                      case (4 * 4):                          natural_order = JpegUtils.jpeg_natural_order4;                          break;                      case (5 * 5):                          natural_order = JpegUtils.jpeg_natural_order5;                          break;                      case (6 * 6):                          natural_order = JpegUtils.jpeg_natural_order6;                          break;                      case (7 * 7):                          natural_order = JpegUtils.jpeg_natural_order7;                          break;                      default:                          natural_order = JpegUtils.jpeg_natural_order;                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dqt,The following statement contains a magic number: switch (count)                  {                      case (2 * 2):                          natural_order = JpegUtils.jpeg_natural_order2;                          break;                      case (3 * 3):                          natural_order = JpegUtils.jpeg_natural_order3;                          break;                      case (4 * 4):                          natural_order = JpegUtils.jpeg_natural_order4;                          break;                      case (5 * 5):                          natural_order = JpegUtils.jpeg_natural_order5;                          break;                      case (6 * 6):                          natural_order = JpegUtils.jpeg_natural_order6;                          break;                      case (7 * 7):                          natural_order = JpegUtils.jpeg_natural_order7;                          break;                      default:                          natural_order = JpegUtils.jpeg_natural_order;                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dqt,The following statement contains a magic number: switch (count)                  {                      case (2 * 2):                          natural_order = JpegUtils.jpeg_natural_order2;                          break;                      case (3 * 3):                          natural_order = JpegUtils.jpeg_natural_order3;                          break;                      case (4 * 4):                          natural_order = JpegUtils.jpeg_natural_order4;                          break;                      case (5 * 5):                          natural_order = JpegUtils.jpeg_natural_order5;                          break;                      case (6 * 6):                          natural_order = JpegUtils.jpeg_natural_order6;                          break;                      case (7 * 7):                          natural_order = JpegUtils.jpeg_natural_order7;                          break;                      default:                          natural_order = JpegUtils.jpeg_natural_order;                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dqt,The following statement contains a magic number: switch (count)                  {                      case (2 * 2):                          natural_order = JpegUtils.jpeg_natural_order2;                          break;                      case (3 * 3):                          natural_order = JpegUtils.jpeg_natural_order3;                          break;                      case (4 * 4):                          natural_order = JpegUtils.jpeg_natural_order4;                          break;                      case (5 * 5):                          natural_order = JpegUtils.jpeg_natural_order5;                          break;                      case (6 * 6):                          natural_order = JpegUtils.jpeg_natural_order6;                          break;                      case (7 * 7):                          natural_order = JpegUtils.jpeg_natural_order7;                          break;                      default:                          natural_order = JpegUtils.jpeg_natural_order;                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dqt,The following statement contains a magic number: switch (count)                  {                      case (2 * 2):                          natural_order = JpegUtils.jpeg_natural_order2;                          break;                      case (3 * 3):                          natural_order = JpegUtils.jpeg_natural_order3;                          break;                      case (4 * 4):                          natural_order = JpegUtils.jpeg_natural_order4;                          break;                      case (5 * 5):                          natural_order = JpegUtils.jpeg_natural_order5;                          break;                      case (6 * 6):                          natural_order = JpegUtils.jpeg_natural_order6;                          break;                      case (7 * 7):                          natural_order = JpegUtils.jpeg_natural_order7;                          break;                      default:                          natural_order = JpegUtils.jpeg_natural_order;                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dqt,The following statement contains a magic number: switch (count)                  {                      case (2 * 2):                          natural_order = JpegUtils.jpeg_natural_order2;                          break;                      case (3 * 3):                          natural_order = JpegUtils.jpeg_natural_order3;                          break;                      case (4 * 4):                          natural_order = JpegUtils.jpeg_natural_order4;                          break;                      case (5 * 5):                          natural_order = JpegUtils.jpeg_natural_order5;                          break;                      case (6 * 6):                          natural_order = JpegUtils.jpeg_natural_order6;                          break;                      case (7 * 7):                          natural_order = JpegUtils.jpeg_natural_order7;                          break;                      default:                          natural_order = JpegUtils.jpeg_natural_order;                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dqt,The following statement contains a magic number: switch (count)                  {                      case (2 * 2):                          natural_order = JpegUtils.jpeg_natural_order2;                          break;                      case (3 * 3):                          natural_order = JpegUtils.jpeg_natural_order3;                          break;                      case (4 * 4):                          natural_order = JpegUtils.jpeg_natural_order4;                          break;                      case (5 * 5):                          natural_order = JpegUtils.jpeg_natural_order5;                          break;                      case (6 * 6):                          natural_order = JpegUtils.jpeg_natural_order6;                          break;                      case (7 * 7):                          natural_order = JpegUtils.jpeg_natural_order7;                          break;                      default:                          natural_order = JpegUtils.jpeg_natural_order;                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dqt,The following statement contains a magic number: switch (count)                  {                      case (2 * 2):                          natural_order = JpegUtils.jpeg_natural_order2;                          break;                      case (3 * 3):                          natural_order = JpegUtils.jpeg_natural_order3;                          break;                      case (4 * 4):                          natural_order = JpegUtils.jpeg_natural_order4;                          break;                      case (5 * 5):                          natural_order = JpegUtils.jpeg_natural_order5;                          break;                      case (6 * 6):                          natural_order = JpegUtils.jpeg_natural_order6;                          break;                      case (7 * 7):                          natural_order = JpegUtils.jpeg_natural_order7;                          break;                      default:                          natural_order = JpegUtils.jpeg_natural_order;                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dqt,The following statement contains a magic number: switch (count)                  {                      case (2 * 2):                          natural_order = JpegUtils.jpeg_natural_order2;                          break;                      case (3 * 3):                          natural_order = JpegUtils.jpeg_natural_order3;                          break;                      case (4 * 4):                          natural_order = JpegUtils.jpeg_natural_order4;                          break;                      case (5 * 5):                          natural_order = JpegUtils.jpeg_natural_order5;                          break;                      case (6 * 6):                          natural_order = JpegUtils.jpeg_natural_order6;                          break;                      case (7 * 7):                          natural_order = JpegUtils.jpeg_natural_order7;                          break;                      default:                          natural_order = JpegUtils.jpeg_natural_order;                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dqt,The following statement contains a magic number: m_cinfo.TRACEMS(2' J_MESSAGE_CODE.JTRC_QUANTVALS' quant_ptr.quantval[i]'                              quant_ptr.quantval[i + 1]' quant_ptr.quantval[i + 2]'                              quant_ptr.quantval[i + 3]' quant_ptr.quantval[i + 4]'                              quant_ptr.quantval[i + 5]' quant_ptr.quantval[i + 6]' quant_ptr.quantval[i + 7]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dqt,The following statement contains a magic number: m_cinfo.TRACEMS(2' J_MESSAGE_CODE.JTRC_QUANTVALS' quant_ptr.quantval[i]'                              quant_ptr.quantval[i + 1]' quant_ptr.quantval[i + 2]'                              quant_ptr.quantval[i + 3]' quant_ptr.quantval[i + 4]'                              quant_ptr.quantval[i + 5]' quant_ptr.quantval[i + 6]' quant_ptr.quantval[i + 7]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dqt,The following statement contains a magic number: m_cinfo.TRACEMS(2' J_MESSAGE_CODE.JTRC_QUANTVALS' quant_ptr.quantval[i]'                              quant_ptr.quantval[i + 1]' quant_ptr.quantval[i + 2]'                              quant_ptr.quantval[i + 3]' quant_ptr.quantval[i + 4]'                              quant_ptr.quantval[i + 5]' quant_ptr.quantval[i + 6]' quant_ptr.quantval[i + 7]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dqt,The following statement contains a magic number: m_cinfo.TRACEMS(2' J_MESSAGE_CODE.JTRC_QUANTVALS' quant_ptr.quantval[i]'                              quant_ptr.quantval[i + 1]' quant_ptr.quantval[i + 2]'                              quant_ptr.quantval[i + 3]' quant_ptr.quantval[i + 4]'                              quant_ptr.quantval[i + 5]' quant_ptr.quantval[i + 6]' quant_ptr.quantval[i + 7]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dqt,The following statement contains a magic number: m_cinfo.TRACEMS(2' J_MESSAGE_CODE.JTRC_QUANTVALS' quant_ptr.quantval[i]'                              quant_ptr.quantval[i + 1]' quant_ptr.quantval[i + 2]'                              quant_ptr.quantval[i + 3]' quant_ptr.quantval[i + 4]'                              quant_ptr.quantval[i + 5]' quant_ptr.quantval[i + 6]' quant_ptr.quantval[i + 7]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dqt,The following statement contains a magic number: m_cinfo.TRACEMS(2' J_MESSAGE_CODE.JTRC_QUANTVALS' quant_ptr.quantval[i]'                              quant_ptr.quantval[i + 1]' quant_ptr.quantval[i + 2]'                              quant_ptr.quantval[i + 3]' quant_ptr.quantval[i + 4]'                              quant_ptr.quantval[i + 5]' quant_ptr.quantval[i + 6]' quant_ptr.quantval[i + 7]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dqt,The following statement contains a magic number: m_cinfo.TRACEMS(2' J_MESSAGE_CODE.JTRC_QUANTVALS' quant_ptr.quantval[i]'                              quant_ptr.quantval[i + 1]' quant_ptr.quantval[i + 2]'                              quant_ptr.quantval[i + 3]' quant_ptr.quantval[i + 4]'                              quant_ptr.quantval[i + 5]' quant_ptr.quantval[i + 6]' quant_ptr.quantval[i + 7]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dqt,The following statement contains a magic number: m_cinfo.m_err.m_trace_level >= 2
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_dri,The following statement contains a magic number: length != 4
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_lse,The following statement contains a magic number: m_cinfo.m_num_components < 3
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_lse,The following statement contains a magic number: length != 24
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_lse,The following statement contains a magic number: tmp != 3
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_reader,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_reader.cs,get_lse,The following statement contains a magic number: cid != m_cinfo.Comp_info[2].Component_id
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,write_frame_header,The following statement contains a magic number: m_cinfo.arith_code || m_cinfo.m_progressive_mode ||                  m_cinfo.m_data_precision != 8 || m_cinfo.block_size != JpegConstants.DCTSIZE
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,write_marker_header,The following statement contains a magic number: datalen > 65533
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,write_marker_header,The following statement contains a magic number: emit_2bytes(datalen + 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_sos,The following statement contains a magic number: emit_2bytes(2 * m_cinfo.m_comps_in_scan + 2 + 1 + 3);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_sos,The following statement contains a magic number: emit_2bytes(2 * m_cinfo.m_comps_in_scan + 2 + 1 + 3);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_sos,The following statement contains a magic number: emit_2bytes(2 * m_cinfo.m_comps_in_scan + 2 + 1 + 3);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_sos,The following statement contains a magic number: emit_byte((td << 4) + ta);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_sos,The following statement contains a magic number: emit_byte((m_cinfo.m_Ah << 4) + m_cinfo.m_Al);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_lse_ict,The following statement contains a magic number: m_cinfo.color_transform != J_COLOR_TRANSFORM.JCT_SUBTRACT_GREEN || m_cinfo.Num_components < 3
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_lse_ict,The following statement contains a magic number: emit_2bytes(24);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_lse_ict,The following statement contains a magic number: emit_byte(3);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_lse_ict,The following statement contains a magic number: emit_byte(m_cinfo.Component_info[2].Component_id);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_sof,The following statement contains a magic number: emit_2bytes(3 * m_cinfo.m_num_components + 2 + 5 + 1);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_sof,The following statement contains a magic number: emit_2bytes(3 * m_cinfo.m_num_components + 2 + 5 + 1);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_sof,The following statement contains a magic number: emit_2bytes(3 * m_cinfo.m_num_components + 2 + 5 + 1);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_sof,The following statement contains a magic number: m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_IMAGE_TOO_BIG' 65535);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_sof,The following statement contains a magic number: m_cinfo.jpeg_height > 65535 || m_cinfo.jpeg_width > 65535
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_sof,The following statement contains a magic number: m_cinfo.jpeg_height > 65535 || m_cinfo.jpeg_width > 65535
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_sof,The following statement contains a magic number: emit_byte((componentInfo.H_samp_factor << 4) + componentInfo.V_samp_factor);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_adobe_app14,The following statement contains a magic number: emit_2bytes(2 + 5 + 2 + 2 + 2 + 1);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_adobe_app14,The following statement contains a magic number: emit_2bytes(2 + 5 + 2 + 2 + 2 + 1);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_adobe_app14,The following statement contains a magic number: emit_2bytes(2 + 5 + 2 + 2 + 2 + 1);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_adobe_app14,The following statement contains a magic number: emit_2bytes(2 + 5 + 2 + 2 + 2 + 1);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_adobe_app14,The following statement contains a magic number: emit_2bytes(2 + 5 + 2 + 2 + 2 + 1);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_adobe_app14,The following statement contains a magic number: emit_2bytes(100);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_adobe_app14,The following statement contains a magic number: switch (m_cinfo.m_jpeg_color_space)              {                  case J_COLOR_SPACE.JCS_YCbCr:                      emit_byte(1);    /* Color transform = 1 */                      break;                  case J_COLOR_SPACE.JCS_YCCK:                      emit_byte(2);    /* Color transform = 2 */                      break;                  default:                      emit_byte(0);    /* Color transform = 0 */                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_dri,The following statement contains a magic number: emit_2bytes(4);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_dht,The following statement contains a magic number: i <= 16
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_dht,The following statement contains a magic number: emit_2bytes(length + 2 + 1 + 16);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_dht,The following statement contains a magic number: emit_2bytes(length + 2 + 1 + 16);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_dht,The following statement contains a magic number: i <= 16
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_dqt,The following statement contains a magic number: qtbl.quantval[m_cinfo.natural_order[i]] > 255
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_dqt,The following statement contains a magic number: emit_2bytes(prec != 0 ?                      m_cinfo.lim_Se * 2 + 2 + 1 + 2 : m_cinfo.lim_Se + 1 + 1 + 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_dqt,The following statement contains a magic number: emit_2bytes(prec != 0 ?                      m_cinfo.lim_Se * 2 + 2 + 1 + 2 : m_cinfo.lim_Se + 1 + 1 + 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_dqt,The following statement contains a magic number: emit_2bytes(prec != 0 ?                      m_cinfo.lim_Se * 2 + 2 + 1 + 2 : m_cinfo.lim_Se + 1 + 1 + 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_dqt,The following statement contains a magic number: emit_2bytes(prec != 0 ?                      m_cinfo.lim_Se * 2 + 2 + 1 + 2 : m_cinfo.lim_Se + 1 + 1 + 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_dqt,The following statement contains a magic number: emit_byte(index + (prec << 4));
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_dqt,The following statement contains a magic number: emit_byte(qval >> 8);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_dac,The following statement contains a magic number: emit_2bytes(length * 2 + 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_dac,The following statement contains a magic number: emit_2bytes(length * 2 + 2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_dac,The following statement contains a magic number: emit_byte(m_cinfo.arith_dc_L[i] + (m_cinfo.arith_dc_U[i] << 4));
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_pseudo_sos,The following statement contains a magic number: emit_2bytes(2 + 1 + 3);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_pseudo_sos,The following statement contains a magic number: emit_2bytes(2 + 1 + 3);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_jfif_app0,The following statement contains a magic number: emit_2bytes(2 + 4 + 1 + 2 + 1 + 2 + 2 + 1 + 1);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_jfif_app0,The following statement contains a magic number: emit_2bytes(2 + 4 + 1 + 2 + 1 + 2 + 2 + 1 + 1);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_jfif_app0,The following statement contains a magic number: emit_2bytes(2 + 4 + 1 + 2 + 1 + 2 + 2 + 1 + 1);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_jfif_app0,The following statement contains a magic number: emit_2bytes(2 + 4 + 1 + 2 + 1 + 2 + 2 + 1 + 1);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_jfif_app0,The following statement contains a magic number: emit_2bytes(2 + 4 + 1 + 2 + 1 + 2 + 2 + 1 + 1);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,jpeg_marker_writer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_marker_writer.cs,emit_2bytes,The following statement contains a magic number: emit_byte((value >> 8) & 0xFF);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_1pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_1pass_cquantizer.cs,start_pass,The following statement contains a magic number: switch (m_cinfo.m_dither_mode)              {                  case J_DITHER_MODE.JDITHER_NONE:                      if (m_cinfo.m_out_color_components == 3)                          m_quantizer = QuantizerType.color_quantizer3;                      else                          m_quantizer = QuantizerType.color_quantizer;                        break;                  case J_DITHER_MODE.JDITHER_ORDERED:                      if (m_cinfo.m_out_color_components == 3)                          m_quantizer = QuantizerType.quantize3_ord_dither_quantizer;                      else                          m_quantizer = QuantizerType.quantize_ord_dither_quantizer;                        /* initialize state for ordered dither */                      m_row_index = 0;                        /* If user changed to ordered dither from another mode'                       * we must recreate the color index table with padding.                       * This will cost extra space' but probably isn't very likely.                       */                      if (!m_is_padded)                          create_colorindex();                        /* Create ordered-dither tables if we didn't already. */                      if (m_odither[0] == null)                          create_odither_tables();                        break;                  case J_DITHER_MODE.JDITHER_FS:                      m_quantizer = QuantizerType.quantize_fs_dither_quantizer;                        /* initialize state for F-S dither */                      m_on_odd_row = false;                        /* Allocate Floyd-Steinberg workspace if didn't already. */                      if (m_fserrors[0] == null)                          alloc_fs_workspace();                        /* Initialize the propagated errors to zero. */                      int arraysize = m_cinfo.m_output_width + 2;                      for (int i = 0; i < m_cinfo.m_out_color_components; i++)                          Array.Clear(m_fserrors[i]' 0' arraysize);                        break;                  default:                      m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_1pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_1pass_cquantizer.cs,start_pass,The following statement contains a magic number: switch (m_cinfo.m_dither_mode)              {                  case J_DITHER_MODE.JDITHER_NONE:                      if (m_cinfo.m_out_color_components == 3)                          m_quantizer = QuantizerType.color_quantizer3;                      else                          m_quantizer = QuantizerType.color_quantizer;                        break;                  case J_DITHER_MODE.JDITHER_ORDERED:                      if (m_cinfo.m_out_color_components == 3)                          m_quantizer = QuantizerType.quantize3_ord_dither_quantizer;                      else                          m_quantizer = QuantizerType.quantize_ord_dither_quantizer;                        /* initialize state for ordered dither */                      m_row_index = 0;                        /* If user changed to ordered dither from another mode'                       * we must recreate the color index table with padding.                       * This will cost extra space' but probably isn't very likely.                       */                      if (!m_is_padded)                          create_colorindex();                        /* Create ordered-dither tables if we didn't already. */                      if (m_odither[0] == null)                          create_odither_tables();                        break;                  case J_DITHER_MODE.JDITHER_FS:                      m_quantizer = QuantizerType.quantize_fs_dither_quantizer;                        /* initialize state for F-S dither */                      m_on_odd_row = false;                        /* Allocate Floyd-Steinberg workspace if didn't already. */                      if (m_fserrors[0] == null)                          alloc_fs_workspace();                        /* Initialize the propagated errors to zero. */                      int arraysize = m_cinfo.m_output_width + 2;                      for (int i = 0; i < m_cinfo.m_out_color_components; i++)                          Array.Clear(m_fserrors[i]' 0' arraysize);                        break;                  default:                      m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_1pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_1pass_cquantizer.cs,start_pass,The following statement contains a magic number: switch (m_cinfo.m_dither_mode)              {                  case J_DITHER_MODE.JDITHER_NONE:                      if (m_cinfo.m_out_color_components == 3)                          m_quantizer = QuantizerType.color_quantizer3;                      else                          m_quantizer = QuantizerType.color_quantizer;                        break;                  case J_DITHER_MODE.JDITHER_ORDERED:                      if (m_cinfo.m_out_color_components == 3)                          m_quantizer = QuantizerType.quantize3_ord_dither_quantizer;                      else                          m_quantizer = QuantizerType.quantize_ord_dither_quantizer;                        /* initialize state for ordered dither */                      m_row_index = 0;                        /* If user changed to ordered dither from another mode'                       * we must recreate the color index table with padding.                       * This will cost extra space' but probably isn't very likely.                       */                      if (!m_is_padded)                          create_colorindex();                        /* Create ordered-dither tables if we didn't already. */                      if (m_odither[0] == null)                          create_odither_tables();                        break;                  case J_DITHER_MODE.JDITHER_FS:                      m_quantizer = QuantizerType.quantize_fs_dither_quantizer;                        /* initialize state for F-S dither */                      m_on_odd_row = false;                        /* Allocate Floyd-Steinberg workspace if didn't already. */                      if (m_fserrors[0] == null)                          alloc_fs_workspace();                        /* Initialize the propagated errors to zero. */                      int arraysize = m_cinfo.m_output_width + 2;                      for (int i = 0; i < m_cinfo.m_out_color_components; i++)                          Array.Clear(m_fserrors[i]' 0' arraysize);                        break;                  default:                      m_cinfo.ERREXIT(J_MESSAGE_CODE.JERR_NOT_COMPILED);                      break;              }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_1pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_1pass_cquantizer.cs,quantize3,The following statement contains a magic number: pixcode += m_colorindex[2][m_colorindexOffset[2] + input_buf[inRow][inIndex]];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_1pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_1pass_cquantizer.cs,quantize3,The following statement contains a magic number: pixcode += m_colorindex[2][m_colorindexOffset[2] + input_buf[inRow][inIndex]];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_1pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_1pass_cquantizer.cs,quantize3_ord_dither,The following statement contains a magic number: pixcode += m_colorindex[2][m_colorindexOffset[2] + input_buf[inRow][inIndex] + m_odither[2][row_index][col_index]];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_1pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_1pass_cquantizer.cs,quantize3_ord_dither,The following statement contains a magic number: pixcode += m_colorindex[2][m_colorindexOffset[2] + input_buf[inRow][inIndex] + m_odither[2][row_index][col_index]];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_1pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_1pass_cquantizer.cs,quantize3_ord_dither,The following statement contains a magic number: pixcode += m_colorindex[2][m_colorindexOffset[2] + input_buf[inRow][inIndex] + m_odither[2][row_index][col_index]];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_1pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_1pass_cquantizer.cs,quantize_fs_dither,The following statement contains a magic number: cur = JpegUtils.RIGHT_SHIFT(cur + m_fserrors[ci][errorIndex + dir] + 8' 4);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_1pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_1pass_cquantizer.cs,quantize_fs_dither,The following statement contains a magic number: cur = JpegUtils.RIGHT_SHIFT(cur + m_fserrors[ci][errorIndex + dir] + 8' 4);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_1pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_1pass_cquantizer.cs,quantize_fs_dither,The following statement contains a magic number: int delta = cur * 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_1pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_1pass_cquantizer.cs,create_colormap,The following statement contains a magic number: m_cinfo.TRACEMS(1' J_MESSAGE_CODE.JTRC_QUANT_3_NCOLORS' total_colors' m_Ncolors[0]' m_Ncolors[1]' m_Ncolors[2]);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_1pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_1pass_cquantizer.cs,create_colormap,The following statement contains a magic number: m_cinfo.m_out_color_components == 3
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_1pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_1pass_cquantizer.cs,create_colorindex,The following statement contains a magic number: pad = JpegConstants.MAXJSAMPLE * 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_1pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_1pass_cquantizer.cs,alloc_fs_workspace,The following statement contains a magic number: m_fserrors[i] = new short[m_cinfo.m_output_width + 2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_1pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_1pass_cquantizer.cs,largest_input_value,The following statement contains a magic number: return (int)(((2 * j + 1) * JpegConstants.MAXJSAMPLE + maxj) / (2 * maxj));
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_1pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_1pass_cquantizer.cs,largest_input_value,The following statement contains a magic number: return (int)(((2 * j + 1) * JpegConstants.MAXJSAMPLE + maxj) / (2 * maxj));
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_1pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_1pass_cquantizer.cs,output_value,The following statement contains a magic number: return (int)((j * JpegConstants.MAXJSAMPLE + maxj / 2) / maxj);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_1pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_1pass_cquantizer.cs,select_ncolors,The following statement contains a magic number: iroot < 2
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_1pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_1pass_cquantizer.cs,make_odither_array,The following statement contains a magic number: int den = 2 * ODITHER_CELLS * (ncolors - 1);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_1pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_1pass_cquantizer.cs,make_odither_array,The following statement contains a magic number: int num = ((int)(ODITHER_CELLS - 1 - 2 * ((int)base_dither_matrix[j][k]))) * JpegConstants.MAXJSAMPLE;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,my_2pass_cquantizer,The following statement contains a magic number: cinfo.m_out_color_components != 3
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,my_2pass_cquantizer,The following statement contains a magic number: cinfo.ERREXIT(J_MESSAGE_CODE.JERR_QUANT_FEW_COLORS' 8);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,my_2pass_cquantizer,The following statement contains a magic number: desired_local < 8
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,my_2pass_cquantizer,The following statement contains a magic number: m_sv_colormap = jpeg_common_struct.AllocJpegSamples(desired_local' 3);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,my_2pass_cquantizer,The following statement contains a magic number: m_fserrors = new short[(cinfo.m_output_width + 2) * 3];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,my_2pass_cquantizer,The following statement contains a magic number: m_fserrors = new short[(cinfo.m_output_width + 2) * 3];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,prescan_quantize,The following statement contains a magic number: int columnIndex = ((int)input_buf[in_row + row][inputIndex + 1] >> C1_SHIFT) * HIST_C2_ELEMS +                          ((int)input_buf[in_row + row][inputIndex + 2] >> C2_SHIFT);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,prescan_quantize,The following statement contains a magic number: inputIndex += 3;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,pass2_fs_dither,The following statement contains a magic number: inputPixelIndex += (m_cinfo.m_output_width - 1) * 3;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,pass2_fs_dither,The following statement contains a magic number: dir3 = -3;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,pass2_fs_dither,The following statement contains a magic number: errorIndex = (m_cinfo.m_output_width + 1) * 3;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,pass2_fs_dither,The following statement contains a magic number: cur0 = JpegUtils.RIGHT_SHIFT(cur0 + m_fserrors[errorIndex + dir3] + 8' 4);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,pass2_fs_dither,The following statement contains a magic number: cur0 = JpegUtils.RIGHT_SHIFT(cur0 + m_fserrors[errorIndex + dir3] + 8' 4);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,pass2_fs_dither,The following statement contains a magic number: cur1 = JpegUtils.RIGHT_SHIFT(cur1 + m_fserrors[errorIndex + dir3 + 1] + 8' 4);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,pass2_fs_dither,The following statement contains a magic number: cur1 = JpegUtils.RIGHT_SHIFT(cur1 + m_fserrors[errorIndex + dir3 + 1] + 8' 4);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,pass2_fs_dither,The following statement contains a magic number: cur2 = JpegUtils.RIGHT_SHIFT(cur2 + m_fserrors[errorIndex + dir3 + 2] + 8' 4);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,pass2_fs_dither,The following statement contains a magic number: cur2 = JpegUtils.RIGHT_SHIFT(cur2 + m_fserrors[errorIndex + dir3 + 2] + 8' 4);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,pass2_fs_dither,The following statement contains a magic number: cur2 = JpegUtils.RIGHT_SHIFT(cur2 + m_fserrors[errorIndex + dir3 + 2] + 8' 4);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,pass2_fs_dither,The following statement contains a magic number: cur2 += input_buf[in_row + row][inputPixelIndex + 2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,pass2_fs_dither,The following statement contains a magic number: cur2 -= m_cinfo.m_colormap[2][pixcode];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,pass2_fs_dither,The following statement contains a magic number: int delta = cur0 * 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,pass2_fs_dither,The following statement contains a magic number: delta = cur1 * 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,pass2_fs_dither,The following statement contains a magic number: delta = cur2 * 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,pass2_fs_dither,The following statement contains a magic number: m_fserrors[errorIndex + 2] = (short) (bpreverr2 + cur2);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,pass2_fs_dither,The following statement contains a magic number: m_fserrors[errorIndex + 2] = (short) bpreverr2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,compute_color,The following statement contains a magic number: m_cinfo.m_colormap[2][icolor] = (byte)((c2total + (total >> 1)) / total);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,median_cut,The following statement contains a magic number: numboxes * 2 <= desired_colors
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,median_cut,The following statement contains a magic number: n = 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,median_cut,The following statement contains a magic number: switch (n)                  {                      case 0:                          lb = (boxlist[foundIndex].c0max + boxlist[foundIndex].c0min) / 2;                          boxlist[foundIndex].c0max = lb;                          boxlist[numboxes].c0min = lb + 1;                          break;                      case 1:                          lb = (boxlist[foundIndex].c1max + boxlist[foundIndex].c1min) / 2;                          boxlist[foundIndex].c1max = lb;                          boxlist[numboxes].c1min = lb + 1;                          break;                      case 2:                          lb = (boxlist[foundIndex].c2max + boxlist[foundIndex].c2min) / 2;                          boxlist[foundIndex].c2max = lb;                          boxlist[numboxes].c2min = lb + 1;                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,median_cut,The following statement contains a magic number: switch (n)                  {                      case 0:                          lb = (boxlist[foundIndex].c0max + boxlist[foundIndex].c0min) / 2;                          boxlist[foundIndex].c0max = lb;                          boxlist[numboxes].c0min = lb + 1;                          break;                      case 1:                          lb = (boxlist[foundIndex].c1max + boxlist[foundIndex].c1min) / 2;                          boxlist[foundIndex].c1max = lb;                          boxlist[numboxes].c1min = lb + 1;                          break;                      case 2:                          lb = (boxlist[foundIndex].c2max + boxlist[foundIndex].c2min) / 2;                          boxlist[foundIndex].c2max = lb;                          boxlist[numboxes].c2min = lb + 1;                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,median_cut,The following statement contains a magic number: switch (n)                  {                      case 0:                          lb = (boxlist[foundIndex].c0max + boxlist[foundIndex].c0min) / 2;                          boxlist[foundIndex].c0max = lb;                          boxlist[numboxes].c0min = lb + 1;                          break;                      case 1:                          lb = (boxlist[foundIndex].c1max + boxlist[foundIndex].c1min) / 2;                          boxlist[foundIndex].c1max = lb;                          boxlist[numboxes].c1min = lb + 1;                          break;                      case 2:                          lb = (boxlist[foundIndex].c2max + boxlist[foundIndex].c2min) / 2;                          boxlist[foundIndex].c2max = lb;                          boxlist[numboxes].c2min = lb + 1;                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,median_cut,The following statement contains a magic number: switch (n)                  {                      case 0:                          lb = (boxlist[foundIndex].c0max + boxlist[foundIndex].c0min) / 2;                          boxlist[foundIndex].c0max = lb;                          boxlist[numboxes].c0min = lb + 1;                          break;                      case 1:                          lb = (boxlist[foundIndex].c1max + boxlist[foundIndex].c1min) / 2;                          boxlist[foundIndex].c1max = lb;                          boxlist[numboxes].c1min = lb + 1;                          break;                      case 2:                          lb = (boxlist[foundIndex].c2max + boxlist[foundIndex].c2min) / 2;                          boxlist[foundIndex].c2max = lb;                          boxlist[numboxes].c2min = lb + 1;                          break;                  }
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,init_error_limit,The following statement contains a magic number: m_error_limiter = new int [JpegConstants.MAXJSAMPLE * 2 + 1];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,init_error_limit,The following statement contains a magic number: const int STEPSIZE = ((JpegConstants.MAXJSAMPLE + 1) / 16);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,init_error_limit,The following statement contains a magic number: input < STEPSIZE*3
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,find_nearby_colors,The following statement contains a magic number: x = m_cinfo.m_colormap[2][i];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,find_best_colors,The following statement contains a magic number: int inc2 = (minc2 - m_cinfo.m_colormap[2][icolor]) * B_SCALE;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,find_best_colors,The following statement contains a magic number: inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,find_best_colors,The following statement contains a magic number: inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,find_best_colors,The following statement contains a magic number: inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,find_best_colors,The following statement contains a magic number: xx2 += 2 * STEP_C2 * STEP_C2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,find_best_colors,The following statement contains a magic number: xx1 += 2 * STEP_C1 * STEP_C1;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,find_best_colors,The following statement contains a magic number: xx0 += 2 * STEP_C0 * STEP_C0;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_merged_upsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_merged_upsampler.cs,my_merged_upsampler,The following statement contains a magic number: cinfo.m_max_v_samp_factor == 2
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_merged_upsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_merged_upsampler.cs,h2v1_merged_upsample,The following statement contains a magic number: int cr = input_buf[2][in_row_group_ctr][inputIndex2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_merged_upsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_merged_upsampler.cs,h2v1_merged_upsample,The following statement contains a magic number: int cr = input_buf[2][in_row_group_ctr][inputIndex2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_merged_upsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_merged_upsampler.cs,h2v2_merged_upsample,The following statement contains a magic number: int inputRow00 = in_row_group_ctr * 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_merged_upsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_merged_upsampler.cs,h2v2_merged_upsample,The following statement contains a magic number: int inputRow01 = in_row_group_ctr * 2 + 1;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_merged_upsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_merged_upsampler.cs,h2v2_merged_upsample,The following statement contains a magic number: int cr = input_buf[2][in_row_group_ctr][inputIndex2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_merged_upsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_merged_upsampler.cs,h2v2_merged_upsample,The following statement contains a magic number: int cr = input_buf[2][in_row_group_ctr][inputIndex2];
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_merged_upsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_merged_upsampler.cs,build_ycc_rgb_table,The following statement contains a magic number: m_Cr_r_tab[i] = JpegUtils.RIGHT_SHIFT(FIX(1.402) * x + ONE_HALF' SCALEBITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_merged_upsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_merged_upsampler.cs,build_ycc_rgb_table,The following statement contains a magic number: m_Cb_b_tab[i] = JpegUtils.RIGHT_SHIFT(FIX(1.772) * x + ONE_HALF' SCALEBITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_merged_upsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_merged_upsampler.cs,build_ycc_rgb_table,The following statement contains a magic number: m_Cr_g_tab[i] = (-FIX(0.714136286)) * x;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_merged_upsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_merged_upsampler.cs,build_ycc_rgb_table,The following statement contains a magic number: m_Cb_g_tab[i] = (-FIX(0.344136286)) * x + ONE_HALF;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_merged_upsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_merged_upsampler.cs,build_bg_ycc_rgb_table,The following statement contains a magic number: m_Cr_r_tab[i] = JpegUtils.RIGHT_SHIFT(FIX(2.804) * x + ONE_HALF' SCALEBITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_merged_upsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_merged_upsampler.cs,build_bg_ycc_rgb_table,The following statement contains a magic number: m_Cb_b_tab[i] = JpegUtils.RIGHT_SHIFT(FIX(3.544) * x + ONE_HALF' SCALEBITS);
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_merged_upsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_merged_upsampler.cs,build_bg_ycc_rgb_table,The following statement contains a magic number: m_Cr_g_tab[i] = (-FIX(1.428272572)) * x;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_merged_upsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_merged_upsampler.cs,build_bg_ycc_rgb_table,The following statement contains a magic number: m_Cb_g_tab[i] = (-FIX(0.688272572)) * x + ONE_HALF;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_merged_upsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_merged_upsampler.cs,FIX,The following statement contains a magic number: return ((int)((x) * (1L << SCALEBITS) + 0.5));
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_source_mgr,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_source_mgr.cs,fill_input_buffer,The following statement contains a magic number: nbytes = 2;
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_upsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_upsampler.cs,my_upsampler,The following statement contains a magic number: h_in_group * 2 == h_out_group && v_in_group == v_out_group
Magic Number,BitMiracle.LibJpeg.Classic.Internal,my_upsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_upsampler.cs,h2v2_upsample,The following statement contains a magic number: outrow += 2;
Duplicate Code,BitMiracle.LibJpeg.Classic.Internal,jpeg_forward_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_forward_dct.cs,jpeg_fdct_16x16,The method contains a code clone-set at the following line numbers (starting from the method definition): ((67' 91)' (176' 200))
Duplicate Code,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_islow,The method contains a code clone-set at the following line numbers (starting from the method definition): ((97' 120)' (211' 234))
Duplicate Code,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The method contains a code clone-set at the following line numbers (starting from the method definition): ((36' 55)' (147' 166))
Duplicate Code,BitMiracle.LibJpeg.Classic.Internal,jpeg_inverse_dct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_inverse_dct.cs,jpeg_idct_16x16,The method contains a code clone-set at the following line numbers (starting from the method definition): ((64' 95)' (171' 202))
Missing Default,BitMiracle.LibJpeg,BitStream,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\BitStream.cs,Seek,The following switch statement is missing a default case: switch (mode)              {                  case SeekOrigin.Begin:                      seekSet(pos);                      break;                    case SeekOrigin.Current:                      seekCurrent(pos);                      break;                    case SeekOrigin.End:                      seekSet(Size() + pos);                      break;              }
Missing Default,BitMiracle.LibJpeg.Classic,jpeg_decompress_struct,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_decompress_struct.cs,jpeg_read_header,The following switch statement is missing a default case: switch (retcode)              {                  case ReadResult.JPEG_REACHED_SOS:                      return ReadResult.JPEG_HEADER_OK;                  case ReadResult.JPEG_REACHED_EOI:                      if (require_image)      /* Complain if application wanted an image */                          ERREXIT(J_MESSAGE_CODE.JERR_NO_IMAGE);                      /* Reset to start state; it would be safer to require the application to                      * call jpeg_abort' but we can't change it now for compatibility reasons.                      * A side effect is to free any temporary memory (there shouldn't be any).                      */                      jpeg_abort(); /* sets state = DSTATE_START */                      return ReadResult.JPEG_HEADER_TABLES_ONLY;                    case ReadResult.JPEG_SUSPENDED:                      /* no work */                      break;              }
Missing Default,BitMiracle.LibJpeg.Classic,jpeg_source_mgr,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\jpeg_source_mgr.cs,resync_to_restart,The following switch statement is missing a default case: switch (action)                  {                      case 1:                          /* Discard marker and let entropy decoder resume processing. */                          cinfo.m_unread_marker = 0;                          return true;                      case 2:                          /* Scan to the next marker' and repeat the decision loop. */                          if (!cinfo.m_marker.next_marker())                              return false;                          break;                      case 3:                          /* Return without advancing past this marker. */                          /* Entropy decoder will be forced to process an empty segment. */                          return true;                  }
Missing Default,BitMiracle.LibJpeg.Classic.Internal,jpeg_comp_master,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_comp_master.cs,finish_pass,The following switch statement is missing a default case: switch (m_pass_type)              {                  case c_pass_type.main_pass:                      /* next pass is either output of scan 0 (after optimization)                      * or output of scan 1 (if no optimization).                      */                      m_pass_type = c_pass_type.output_pass;                      if (!m_cinfo.m_optimize_coding)                          m_scan_number++;                      break;                  case c_pass_type.huff_opt_pass:                      /* next pass is always output of current scan */                      m_pass_type = c_pass_type.output_pass;                      break;                  case c_pass_type.output_pass:                      /* next pass is either optimization or output of next scan */                      if (m_cinfo.m_optimize_coding)                          m_pass_type = c_pass_type.huff_opt_pass;                      m_scan_number++;                      break;              }
Missing Default,BitMiracle.LibJpeg.Classic.Internal,jpeg_downsampler,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_downsampler.cs,downsample,The following switch statement is missing a default case: switch (m_downSamplers[ci])                  {                      case downSampleMethod.fullsize_smooth_downsampler:                          fullsize_smooth_downsample(ci' input_buf[ci]' in_row_index' output_buf[ci]' outIndex);                          break;                        case downSampleMethod.fullsize_downsampler:                          fullsize_downsample(ci' input_buf[ci]' in_row_index' output_buf[ci]' outIndex);                          break;                        case downSampleMethod.h2v1_downsampler:                          h2v1_downsample(ci' input_buf[ci]' in_row_index' output_buf[ci]' outIndex);                          break;                        case downSampleMethod.h2v2_smooth_downsampler:                          h2v2_smooth_downsample(ci' input_buf[ci]' in_row_index' output_buf[ci]' outIndex);                          break;                        case downSampleMethod.h2v2_downsampler:                          h2v2_downsample(ci' input_buf[ci]' in_row_index' output_buf[ci]' outIndex);                          break;                        case downSampleMethod.int_downsampler:                          int_downsample(ci' input_buf[ci]' in_row_index' output_buf[ci]' outIndex);                          break;                  }
Missing Default,BitMiracle.LibJpeg.Classic.Internal,jpeg_d_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\jpeg_d_coef_controller.cs,decompress_data,The following switch statement is missing a default case: switch (m_decompressor)              {                  case DecompressorType.Ordinary:                      return decompress_data_ordinary(output_buf);                    case DecompressorType.Smooth:                      return decompress_smooth_data(output_buf);                    case DecompressorType.OnePass:                      return decompress_onepass(output_buf);              }
Missing Default,BitMiracle.LibJpeg.Classic.Internal,my_2pass_cquantizer,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_2pass_cquantizer.cs,median_cut,The following switch statement is missing a default case: switch (n)                  {                      case 0:                          lb = (boxlist[foundIndex].c0max + boxlist[foundIndex].c0min) / 2;                          boxlist[foundIndex].c0max = lb;                          boxlist[numboxes].c0min = lb + 1;                          break;                      case 1:                          lb = (boxlist[foundIndex].c1max + boxlist[foundIndex].c1min) / 2;                          boxlist[foundIndex].c1max = lb;                          boxlist[numboxes].c1min = lb + 1;                          break;                      case 2:                          lb = (boxlist[foundIndex].c2max + boxlist[foundIndex].c2min) / 2;                          boxlist[foundIndex].c2max = lb;                          boxlist[numboxes].c2min = lb + 1;                          break;                  }
Missing Default,BitMiracle.LibJpeg.Classic.Internal,my_c_coef_controller,D:\research\architectureSmells\repos\BitMiracle_libjpeg.net\LibJpeg\Classic\Internal\my_c_coef_controller.cs,compress_data,The following switch statement is missing a default case: switch (m_passModeSetByLastStartPass)              {                  case J_BUF_MODE.JBUF_PASS_THRU:                      return compressDataImpl(input_buf);                    case J_BUF_MODE.JBUF_SAVE_AND_PASS:                      return compressFirstPass(input_buf);                    case J_BUF_MODE.JBUF_CRANK_DEST:                      return compressOutput();              }
