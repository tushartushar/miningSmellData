Implementation smell,Namespace,Class,File,Method,Description
Long Method,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,Main,The method has 137 lines of code.
Long Method,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,parse_switches,The method has 154 lines of code.
Complex Method,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_colormap,Cyclomatic complexity of the method is 8
Complex Method,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,Main,Cyclomatic complexity of the method is 9
Long Statement,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,Main,The length of the statement  "            cinfo.jpeg_set_marker_processor((int)JPEG_MARKER.COM' new jpeg_decompress_struct.jpeg_marker_parser_method(print_text_marker)); " is 127.
Long Statement,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,parse_switches,The length of the statement  "                        Console.Write(string.Format("Bit Miracle's DJPEG' version {0}\n{1}\n"' jpeg_common_struct.Version' jpeg_common_struct.Copyright)); " is 130.
Long Statement,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,usage,The length of the statement  "            Console.WriteLine("  -dct int       Use integer DCT method {0}"' (JpegConstants.JDCT_DEFAULT == J_DCT_METHOD.JDCT_ISLOW) ? " (default)" : ""); " is 142.
Long Statement,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,usage,The length of the statement  "            Console.WriteLine("  -dct fast      Use fast integer DCT (less accurate) {0}"' (JpegConstants.JDCT_DEFAULT == J_DCT_METHOD.JDCT_IFAST) ? " (default)" : ""); " is 156.
Long Statement,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,usage,The length of the statement  "            Console.WriteLine("  -dct float     Use floating-point DCT method {0}"' (JpegConstants.JDCT_DEFAULT == J_DCT_METHOD.JDCT_FLOAT) ? " (default)" : ""); " is 149.
Complex Conditional,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,parse_switches,The conditional expression  "cdjpeg_utils.keymatch(arg' "colors"' 1) ||                           cdjpeg_utils.keymatch(arg' "colours"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantize"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantise"' 1)"  is complex.
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,bmp_dest_struct,The following statement contains a magic number: while ((row_width & 3) != 0)                  row_width++;
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,put_24bit_rows,The following statement contains a magic number: for (int col = cinfo.Output_width; col > 0; col--)              {                  image_ptr[0][imageIndex + 2] = buffer[0][bufferIndex];   /* can omit GETJSAMPLE() safely */                  bufferIndex++;                  image_ptr[0][imageIndex + 1] = buffer[0][bufferIndex];                  bufferIndex++;                  image_ptr[0][imageIndex] = buffer[0][bufferIndex];                  bufferIndex++;                  imageIndex += 3;              }
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,put_24bit_rows,The following statement contains a magic number: for (int col = cinfo.Output_width; col > 0; col--)              {                  image_ptr[0][imageIndex + 2] = buffer[0][bufferIndex];   /* can omit GETJSAMPLE() safely */                  bufferIndex++;                  image_ptr[0][imageIndex + 1] = buffer[0][bufferIndex];                  bufferIndex++;                  image_ptr[0][imageIndex] = buffer[0][bufferIndex];                  bufferIndex++;                  imageIndex += 3;              }
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: if (cinfo.Out_color_space == J_COLOR_SPACE.JCS_RGB)              {                  if (cinfo.Quantize_colors)                  {                      /* Colormapped RGB */                      bits_per_pixel = 8;                      cmap_entries = 256;                  }                  else                  {                      /* Unquantized' full color RGB */                      bits_per_pixel = 24;                      cmap_entries = 0;                  }              }              else              {                  /* Grayscale output.  We need to fake a 256-entry colormap. */                  bits_per_pixel = 8;                  cmap_entries = 256;              }
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: if (cinfo.Out_color_space == J_COLOR_SPACE.JCS_RGB)              {                  if (cinfo.Quantize_colors)                  {                      /* Colormapped RGB */                      bits_per_pixel = 8;                      cmap_entries = 256;                  }                  else                  {                      /* Unquantized' full color RGB */                      bits_per_pixel = 24;                      cmap_entries = 0;                  }              }              else              {                  /* Grayscale output.  We need to fake a 256-entry colormap. */                  bits_per_pixel = 8;                  cmap_entries = 256;              }
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: if (cinfo.Out_color_space == J_COLOR_SPACE.JCS_RGB)              {                  if (cinfo.Quantize_colors)                  {                      /* Colormapped RGB */                      bits_per_pixel = 8;                      cmap_entries = 256;                  }                  else                  {                      /* Unquantized' full color RGB */                      bits_per_pixel = 24;                      cmap_entries = 0;                  }              }              else              {                  /* Grayscale output.  We need to fake a 256-entry colormap. */                  bits_per_pixel = 8;                  cmap_entries = 256;              }
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: if (cinfo.Out_color_space == J_COLOR_SPACE.JCS_RGB)              {                  if (cinfo.Quantize_colors)                  {                      /* Colormapped RGB */                      bits_per_pixel = 8;                      cmap_entries = 256;                  }                  else                  {                      /* Unquantized' full color RGB */                      bits_per_pixel = 24;                      cmap_entries = 0;                  }              }              else              {                  /* Grayscale output.  We need to fake a 256-entry colormap. */                  bits_per_pixel = 8;                  cmap_entries = 256;              }
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: if (cinfo.Out_color_space == J_COLOR_SPACE.JCS_RGB)              {                  if (cinfo.Quantize_colors)                  {                      /* Colormapped RGB */                      bits_per_pixel = 8;                      cmap_entries = 256;                  }                  else                  {                      /* Unquantized' full color RGB */                      bits_per_pixel = 24;                      cmap_entries = 0;                  }              }              else              {                  /* Grayscale output.  We need to fake a 256-entry colormap. */                  bits_per_pixel = 8;                  cmap_entries = 256;              }
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: int headersize = 14 + 40 + cmap_entries * 4;
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: int headersize = 14 + 40 + cmap_entries * 4;
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: int headersize = 14 + 40 + cmap_entries * 4;
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: byte[] bmpfileheader = new byte[14];
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: byte[] bmpinfoheader = new byte[40];
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: PUT_4B(bmpfileheader' 2' bfSize);
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: PUT_4B(bmpfileheader' 10' headersize);
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: PUT_2B(bmpinfoheader' 0' 40);
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: PUT_4B(bmpinfoheader' 4' cinfo.Output_width);
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: PUT_4B(bmpinfoheader' 8' cinfo.Output_height);
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: PUT_2B(bmpinfoheader' 12' 1);
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: PUT_2B(bmpinfoheader' 14' bits_per_pixel);
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: if (cinfo.Density_unit == DensityUnit.DotsCm)              {                  /* if have density in dots/cm' then */                  PUT_4B(bmpinfoheader' 24' (int)(cinfo.X_density * 100)); /* XPels/M */                  PUT_4B(bmpinfoheader' 28' (int)(cinfo.Y_density * 100)); /* XPels/M */              }
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: if (cinfo.Density_unit == DensityUnit.DotsCm)              {                  /* if have density in dots/cm' then */                  PUT_4B(bmpinfoheader' 24' (int)(cinfo.X_density * 100)); /* XPels/M */                  PUT_4B(bmpinfoheader' 28' (int)(cinfo.Y_density * 100)); /* XPels/M */              }
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: if (cinfo.Density_unit == DensityUnit.DotsCm)              {                  /* if have density in dots/cm' then */                  PUT_4B(bmpinfoheader' 24' (int)(cinfo.X_density * 100)); /* XPels/M */                  PUT_4B(bmpinfoheader' 28' (int)(cinfo.Y_density * 100)); /* XPels/M */              }
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: if (cinfo.Density_unit == DensityUnit.DotsCm)              {                  /* if have density in dots/cm' then */                  PUT_4B(bmpinfoheader' 24' (int)(cinfo.X_density * 100)); /* XPels/M */                  PUT_4B(bmpinfoheader' 28' (int)(cinfo.Y_density * 100)); /* XPels/M */              }
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: PUT_2B(bmpinfoheader' 32' cmap_entries);
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: try              {                  output_file.Write(bmpfileheader' 0' 14);              }              catch (Exception e)              {                  cinfo.TRACEMS(0' J_MESSAGE_CODE.JERR_FILE_WRITE' e.Message);                  cinfo.ERREXIT(J_MESSAGE_CODE.JERR_FILE_WRITE);              }
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: try              {                  output_file.Write(bmpinfoheader' 0' 40);              }              catch (Exception e)              {                  cinfo.TRACEMS(0' J_MESSAGE_CODE.JERR_FILE_WRITE' e.Message);                  cinfo.ERREXIT(J_MESSAGE_CODE.JERR_FILE_WRITE);              }
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_bmp_header,The following statement contains a magic number: if (cmap_entries > 0)                  write_colormap(cmap_entries' 4);
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: if (cinfo.Out_color_space == J_COLOR_SPACE.JCS_RGB)              {                  if (cinfo.Quantize_colors)                  {                      /* Colormapped RGB */                      bits_per_pixel = 8;                      cmap_entries = 256;                  }                  else                  {                      /* Unquantized' full color RGB */                      bits_per_pixel = 24;                      cmap_entries = 0;                  }              }              else              {                  /* Grayscale output.  We need to fake a 256-entry colormap. */                  bits_per_pixel = 8;                  cmap_entries = 256;              }
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: if (cinfo.Out_color_space == J_COLOR_SPACE.JCS_RGB)              {                  if (cinfo.Quantize_colors)                  {                      /* Colormapped RGB */                      bits_per_pixel = 8;                      cmap_entries = 256;                  }                  else                  {                      /* Unquantized' full color RGB */                      bits_per_pixel = 24;                      cmap_entries = 0;                  }              }              else              {                  /* Grayscale output.  We need to fake a 256-entry colormap. */                  bits_per_pixel = 8;                  cmap_entries = 256;              }
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: if (cinfo.Out_color_space == J_COLOR_SPACE.JCS_RGB)              {                  if (cinfo.Quantize_colors)                  {                      /* Colormapped RGB */                      bits_per_pixel = 8;                      cmap_entries = 256;                  }                  else                  {                      /* Unquantized' full color RGB */                      bits_per_pixel = 24;                      cmap_entries = 0;                  }              }              else              {                  /* Grayscale output.  We need to fake a 256-entry colormap. */                  bits_per_pixel = 8;                  cmap_entries = 256;              }
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: if (cinfo.Out_color_space == J_COLOR_SPACE.JCS_RGB)              {                  if (cinfo.Quantize_colors)                  {                      /* Colormapped RGB */                      bits_per_pixel = 8;                      cmap_entries = 256;                  }                  else                  {                      /* Unquantized' full color RGB */                      bits_per_pixel = 24;                      cmap_entries = 0;                  }              }              else              {                  /* Grayscale output.  We need to fake a 256-entry colormap. */                  bits_per_pixel = 8;                  cmap_entries = 256;              }
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: if (cinfo.Out_color_space == J_COLOR_SPACE.JCS_RGB)              {                  if (cinfo.Quantize_colors)                  {                      /* Colormapped RGB */                      bits_per_pixel = 8;                      cmap_entries = 256;                  }                  else                  {                      /* Unquantized' full color RGB */                      bits_per_pixel = 24;                      cmap_entries = 0;                  }              }              else              {                  /* Grayscale output.  We need to fake a 256-entry colormap. */                  bits_per_pixel = 8;                  cmap_entries = 256;              }
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: int headersize = 14 + 12 + cmap_entries * 3;
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: int headersize = 14 + 12 + cmap_entries * 3;
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: int headersize = 14 + 12 + cmap_entries * 3;
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: byte[] bmpfileheader = new byte[14];
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: byte[] bmpcoreheader = new byte[12];
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: PUT_4B(bmpfileheader' 2' bfSize);
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: PUT_4B(bmpfileheader' 10' headersize);
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: PUT_2B(bmpcoreheader' 0' 12);
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: PUT_2B(bmpcoreheader' 4' cinfo.Output_width);
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: PUT_2B(bmpcoreheader' 6' cinfo.Output_height);
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: PUT_2B(bmpcoreheader' 8' 1);
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: PUT_2B(bmpcoreheader' 10' bits_per_pixel);
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: try              {                  output_file.Write(bmpfileheader' 0' 14);              }              catch (Exception e)              {                  cinfo.TRACEMS(0' J_MESSAGE_CODE.JERR_FILE_WRITE' e.Message);                  cinfo.ERREXIT(J_MESSAGE_CODE.JERR_FILE_WRITE);              }
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: try              {                  output_file.Write(bmpcoreheader' 0' 12);              }              catch (Exception e)              {                  cinfo.TRACEMS(0' J_MESSAGE_CODE.JERR_FILE_WRITE' e.Message);                  cinfo.ERREXIT(J_MESSAGE_CODE.JERR_FILE_WRITE);              }
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_os2_header,The following statement contains a magic number: if (cmap_entries > 0)                  write_colormap(cmap_entries' 3);
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_colormap,The following statement contains a magic number: if (colormap != null)              {                  if (cinfo.Out_color_components == 3)                  {                      /* Normal case with RGB colormap */                      for (i = 0; i < num_colors; i++)                      {                          output_file.WriteByte(colormap[2][i]);                          output_file.WriteByte(colormap[1][i]);                          output_file.WriteByte(colormap[0][i]);                          if (map_entry_size == 4)                              output_file.WriteByte(0);                      }                  }                  else                  {                      /* Grayscale colormap (only happens with grayscale quantization) */                      for (i = 0; i < num_colors; i++)                      {                          output_file.WriteByte(colormap[0][i]);                          output_file.WriteByte(colormap[0][i]);                          output_file.WriteByte(colormap[0][i]);                          if (map_entry_size == 4)                              output_file.WriteByte(0);                      }                  }              }              else              {                  /* If no colormap' must be grayscale data.  Generate a linear "map". */                  for (i = 0; i < 256; i++)                  {                      output_file.WriteByte((byte)i);                      output_file.WriteByte((byte)i);                      output_file.WriteByte((byte)i);                      if (map_entry_size == 4)                          output_file.WriteByte(0);                  }              }
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_colormap,The following statement contains a magic number: if (colormap != null)              {                  if (cinfo.Out_color_components == 3)                  {                      /* Normal case with RGB colormap */                      for (i = 0; i < num_colors; i++)                      {                          output_file.WriteByte(colormap[2][i]);                          output_file.WriteByte(colormap[1][i]);                          output_file.WriteByte(colormap[0][i]);                          if (map_entry_size == 4)                              output_file.WriteByte(0);                      }                  }                  else                  {                      /* Grayscale colormap (only happens with grayscale quantization) */                      for (i = 0; i < num_colors; i++)                      {                          output_file.WriteByte(colormap[0][i]);                          output_file.WriteByte(colormap[0][i]);                          output_file.WriteByte(colormap[0][i]);                          if (map_entry_size == 4)                              output_file.WriteByte(0);                      }                  }              }              else              {                  /* If no colormap' must be grayscale data.  Generate a linear "map". */                  for (i = 0; i < 256; i++)                  {                      output_file.WriteByte((byte)i);                      output_file.WriteByte((byte)i);                      output_file.WriteByte((byte)i);                      if (map_entry_size == 4)                          output_file.WriteByte(0);                  }              }
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_colormap,The following statement contains a magic number: if (colormap != null)              {                  if (cinfo.Out_color_components == 3)                  {                      /* Normal case with RGB colormap */                      for (i = 0; i < num_colors; i++)                      {                          output_file.WriteByte(colormap[2][i]);                          output_file.WriteByte(colormap[1][i]);                          output_file.WriteByte(colormap[0][i]);                          if (map_entry_size == 4)                              output_file.WriteByte(0);                      }                  }                  else                  {                      /* Grayscale colormap (only happens with grayscale quantization) */                      for (i = 0; i < num_colors; i++)                      {                          output_file.WriteByte(colormap[0][i]);                          output_file.WriteByte(colormap[0][i]);                          output_file.WriteByte(colormap[0][i]);                          if (map_entry_size == 4)                              output_file.WriteByte(0);                      }                  }              }              else              {                  /* If no colormap' must be grayscale data.  Generate a linear "map". */                  for (i = 0; i < 256; i++)                  {                      output_file.WriteByte((byte)i);                      output_file.WriteByte((byte)i);                      output_file.WriteByte((byte)i);                      if (map_entry_size == 4)                          output_file.WriteByte(0);                  }              }
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_colormap,The following statement contains a magic number: if (colormap != null)              {                  if (cinfo.Out_color_components == 3)                  {                      /* Normal case with RGB colormap */                      for (i = 0; i < num_colors; i++)                      {                          output_file.WriteByte(colormap[2][i]);                          output_file.WriteByte(colormap[1][i]);                          output_file.WriteByte(colormap[0][i]);                          if (map_entry_size == 4)                              output_file.WriteByte(0);                      }                  }                  else                  {                      /* Grayscale colormap (only happens with grayscale quantization) */                      for (i = 0; i < num_colors; i++)                      {                          output_file.WriteByte(colormap[0][i]);                          output_file.WriteByte(colormap[0][i]);                          output_file.WriteByte(colormap[0][i]);                          if (map_entry_size == 4)                              output_file.WriteByte(0);                      }                  }              }              else              {                  /* If no colormap' must be grayscale data.  Generate a linear "map". */                  for (i = 0; i < 256; i++)                  {                      output_file.WriteByte((byte)i);                      output_file.WriteByte((byte)i);                      output_file.WriteByte((byte)i);                      if (map_entry_size == 4)                          output_file.WriteByte(0);                  }              }
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_colormap,The following statement contains a magic number: if (colormap != null)              {                  if (cinfo.Out_color_components == 3)                  {                      /* Normal case with RGB colormap */                      for (i = 0; i < num_colors; i++)                      {                          output_file.WriteByte(colormap[2][i]);                          output_file.WriteByte(colormap[1][i]);                          output_file.WriteByte(colormap[0][i]);                          if (map_entry_size == 4)                              output_file.WriteByte(0);                      }                  }                  else                  {                      /* Grayscale colormap (only happens with grayscale quantization) */                      for (i = 0; i < num_colors; i++)                      {                          output_file.WriteByte(colormap[0][i]);                          output_file.WriteByte(colormap[0][i]);                          output_file.WriteByte(colormap[0][i]);                          if (map_entry_size == 4)                              output_file.WriteByte(0);                      }                  }              }              else              {                  /* If no colormap' must be grayscale data.  Generate a linear "map". */                  for (i = 0; i < 256; i++)                  {                      output_file.WriteByte((byte)i);                      output_file.WriteByte((byte)i);                      output_file.WriteByte((byte)i);                      if (map_entry_size == 4)                          output_file.WriteByte(0);                  }              }
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_colormap,The following statement contains a magic number: if (colormap != null)              {                  if (cinfo.Out_color_components == 3)                  {                      /* Normal case with RGB colormap */                      for (i = 0; i < num_colors; i++)                      {                          output_file.WriteByte(colormap[2][i]);                          output_file.WriteByte(colormap[1][i]);                          output_file.WriteByte(colormap[0][i]);                          if (map_entry_size == 4)                              output_file.WriteByte(0);                      }                  }                  else                  {                      /* Grayscale colormap (only happens with grayscale quantization) */                      for (i = 0; i < num_colors; i++)                      {                          output_file.WriteByte(colormap[0][i]);                          output_file.WriteByte(colormap[0][i]);                          output_file.WriteByte(colormap[0][i]);                          if (map_entry_size == 4)                              output_file.WriteByte(0);                      }                  }              }              else              {                  /* If no colormap' must be grayscale data.  Generate a linear "map". */                  for (i = 0; i < 256; i++)                  {                      output_file.WriteByte((byte)i);                      output_file.WriteByte((byte)i);                      output_file.WriteByte((byte)i);                      if (map_entry_size == 4)                          output_file.WriteByte(0);                  }              }
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,write_colormap,The following statement contains a magic number: for (; i < map_colors; i++)              {                  output_file.WriteByte(0);                  output_file.WriteByte(0);                  output_file.WriteByte(0);                  if (map_entry_size == 4)                      output_file.WriteByte(0);              }
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,PUT_2B,The following statement contains a magic number: array[offset + 1] = (byte)(((value) >> 8) & 0xFF);
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,PUT_4B,The following statement contains a magic number: array[offset + 1] = (byte)(((value) >> 8) & 0xFF);
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,PUT_4B,The following statement contains a magic number: array[offset + 2] = (byte)(((value) >> 16) & 0xFF);
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,PUT_4B,The following statement contains a magic number: array[offset + 2] = (byte)(((value) >> 16) & 0xFF);
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,PUT_4B,The following statement contains a magic number: array[offset + 3] = (byte)(((value) >> 24) & 0xFF);
Magic Number,BitMiracle.dJpeg,bmp_dest_struct,C:\repos\BitMiracle_libjpeg.net\dJpeg\bmp_dest_struct.cs,PUT_4B,The following statement contains a magic number: array[offset + 3] = (byte)(((value) >> 24) & 0xFF);
Magic Number,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,Main,The following statement contains a magic number: cinfo.jpeg_set_marker_processor((int)JPEG_MARKER.APP0 + 12' print_text_marker);
Magic Number,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,Main,The following statement contains a magic number: if (outfilename == null)              {                  // file_index should point to input file                   if (file_index != args.Length - 2)                  {                      Console.WriteLine(string.Format("{0}: must name one input and one output file."' progname));                      usage();                      return;                  }                    // output file comes right after input one                  outfilename = args[file_index + 1];              }              else              {                  // file_index should point to input file                  if (file_index != args.Length - 1)                  {                      Console.WriteLine(string.Format("{0}: must name one input and one output file."' progname));                      usage();                      return;                  }              }
Magic Number,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,print_text_marker,The following statement contains a magic number: int length = jpeg_getc(cinfo) << 8;
Magic Number,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,print_text_marker,The following statement contains a magic number: length -= 2;
Magic Number,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,parse_switches,The following statement contains a magic number: for ( ; argn < argv.Length; argn++)              {                  arg = argv[argn];                  if (arg[0] != '-')                  {                      /* Not a switch' must be a file name argument */                      last_file_arg_seen = argn;                      break;                  }                    arg = arg.Substring(1);                    if (cdjpeg_utils.keymatch(arg' "bmp"' 1))                  {                      /* BMP output format. */                      requested_fmt = IMAGE_FORMATS.FMT_BMP;                  }                  else if (cdjpeg_utils.keymatch(arg' "colors"' 1) ||                           cdjpeg_utils.keymatch(arg' "colours"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantize"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantise"' 1))                  {                      /* Do color quantization. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        try                      {                          int val = int.Parse(argv[argn]);                          cinfo.Desired_number_of_colors = val;                          cinfo.Quantize_colors = true;                      }                      catch (Exception e)                      {                          Console.WriteLine(e.Message);                          return false;                      }                  }                  else if (cdjpeg_utils.keymatch(arg' "dct"' 2))                  {                      /* Select IDCT algorithm. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        if (cdjpeg_utils.keymatch(argv[argn]' "int"' 1))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_ISLOW;                      else if (cdjpeg_utils.keymatch(argv[argn]' "fast"' 2))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_IFAST;                      else if (cdjpeg_utils.keymatch(argv[argn]' "float"' 2))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_FLOAT;                      else                          return false;                  }                  else if (cdjpeg_utils.keymatch(arg' "dither"' 2))                  {                      /* Select dithering algorithm. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        if (cdjpeg_utils.keymatch(argv[argn]' "fs"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_FS;                      else if (cdjpeg_utils.keymatch(argv[argn]' "none"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_NONE;                      else if (cdjpeg_utils.keymatch(argv[argn]' "ordered"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_ORDERED;                      else                          return false;                  }                  else if (cdjpeg_utils.keymatch(arg' "debug"' 1) || cdjpeg_utils.keymatch(arg' "verbose"' 1))                  {                      /* Enable debug printouts. */                      /* On first -d' print version identification */                      if (!printed_version)                      {                          Console.Write(string.Format("Bit Miracle's DJPEG' version {0}\n{1}\n"' jpeg_common_struct.Version' jpeg_common_struct.Copyright));                          printed_version = true;                      }                      cinfo.Err.Trace_level++;                  }                  else if (cdjpeg_utils.keymatch(arg' "fast"' 1))                  {                      /* Select recommended processing options for quick-and-dirty output. */                      cinfo.Two_pass_quantize = false;                      cinfo.Dither_mode = J_DITHER_MODE.JDITHER_ORDERED;                      if (!cinfo.Quantize_colors) /* don't override an earlier -colors */                          cinfo.Desired_number_of_colors = 216;                      cinfo.Dct_method = JpegConstants.JDCT_FASTEST;                      cinfo.Do_fancy_upsampling = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "grayscale"' 2) || cdjpeg_utils.keymatch(arg' "greyscale"' 2))                  {                      /* Force monochrome output. */                      cinfo.Out_color_space = J_COLOR_SPACE.JCS_GRAYSCALE;                  }                  else if (cdjpeg_utils.keymatch(arg' "rgb"' 3))                  {                      /* Force RGB output. */                      cinfo.Out_color_space = J_COLOR_SPACE.JCS_RGB;                  }                  else if (cdjpeg_utils.keymatch(arg' "nosmooth"' 3))                  {                      /* Suppress fancy upsampling */                      cinfo.Do_fancy_upsampling = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "onepass"' 3))                  {                      /* Use fast one-pass quantization. */                      cinfo.Two_pass_quantize = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "os2"' 3))                  {                      /* BMP output format (OS/2 flavor). */                      requested_fmt = IMAGE_FORMATS.FMT_OS2;                  }                  else if (cdjpeg_utils.keymatch(arg' "outfile"' 4))                  {                      /* Set output file name. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        outfilename = argv[argn];   /* save it away for later use */                  }                  else if (cdjpeg_utils.keymatch(arg' "scale"' 1))                  {                      /* Scale the output image by a fraction M/N. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        int slashPos = argv[argn].IndexOf('/');                      if (slashPos == -1)                          return false;                        try                      {                          string num = argv[argn].Substring(0' slashPos);                          cinfo.Scale_num = int.Parse(num);                          string denom = argv[argn].Substring(slashPos + 1);                          cinfo.Scale_denom = int.Parse(denom);                      }                      catch (Exception e)                      {                          Console.WriteLine(e.Message);                          return false;                      }                  }                  else                  {                      /* bogus switch */                      return false;                  }              }
Magic Number,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,parse_switches,The following statement contains a magic number: for ( ; argn < argv.Length; argn++)              {                  arg = argv[argn];                  if (arg[0] != '-')                  {                      /* Not a switch' must be a file name argument */                      last_file_arg_seen = argn;                      break;                  }                    arg = arg.Substring(1);                    if (cdjpeg_utils.keymatch(arg' "bmp"' 1))                  {                      /* BMP output format. */                      requested_fmt = IMAGE_FORMATS.FMT_BMP;                  }                  else if (cdjpeg_utils.keymatch(arg' "colors"' 1) ||                           cdjpeg_utils.keymatch(arg' "colours"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantize"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantise"' 1))                  {                      /* Do color quantization. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        try                      {                          int val = int.Parse(argv[argn]);                          cinfo.Desired_number_of_colors = val;                          cinfo.Quantize_colors = true;                      }                      catch (Exception e)                      {                          Console.WriteLine(e.Message);                          return false;                      }                  }                  else if (cdjpeg_utils.keymatch(arg' "dct"' 2))                  {                      /* Select IDCT algorithm. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        if (cdjpeg_utils.keymatch(argv[argn]' "int"' 1))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_ISLOW;                      else if (cdjpeg_utils.keymatch(argv[argn]' "fast"' 2))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_IFAST;                      else if (cdjpeg_utils.keymatch(argv[argn]' "float"' 2))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_FLOAT;                      else                          return false;                  }                  else if (cdjpeg_utils.keymatch(arg' "dither"' 2))                  {                      /* Select dithering algorithm. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        if (cdjpeg_utils.keymatch(argv[argn]' "fs"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_FS;                      else if (cdjpeg_utils.keymatch(argv[argn]' "none"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_NONE;                      else if (cdjpeg_utils.keymatch(argv[argn]' "ordered"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_ORDERED;                      else                          return false;                  }                  else if (cdjpeg_utils.keymatch(arg' "debug"' 1) || cdjpeg_utils.keymatch(arg' "verbose"' 1))                  {                      /* Enable debug printouts. */                      /* On first -d' print version identification */                      if (!printed_version)                      {                          Console.Write(string.Format("Bit Miracle's DJPEG' version {0}\n{1}\n"' jpeg_common_struct.Version' jpeg_common_struct.Copyright));                          printed_version = true;                      }                      cinfo.Err.Trace_level++;                  }                  else if (cdjpeg_utils.keymatch(arg' "fast"' 1))                  {                      /* Select recommended processing options for quick-and-dirty output. */                      cinfo.Two_pass_quantize = false;                      cinfo.Dither_mode = J_DITHER_MODE.JDITHER_ORDERED;                      if (!cinfo.Quantize_colors) /* don't override an earlier -colors */                          cinfo.Desired_number_of_colors = 216;                      cinfo.Dct_method = JpegConstants.JDCT_FASTEST;                      cinfo.Do_fancy_upsampling = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "grayscale"' 2) || cdjpeg_utils.keymatch(arg' "greyscale"' 2))                  {                      /* Force monochrome output. */                      cinfo.Out_color_space = J_COLOR_SPACE.JCS_GRAYSCALE;                  }                  else if (cdjpeg_utils.keymatch(arg' "rgb"' 3))                  {                      /* Force RGB output. */                      cinfo.Out_color_space = J_COLOR_SPACE.JCS_RGB;                  }                  else if (cdjpeg_utils.keymatch(arg' "nosmooth"' 3))                  {                      /* Suppress fancy upsampling */                      cinfo.Do_fancy_upsampling = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "onepass"' 3))                  {                      /* Use fast one-pass quantization. */                      cinfo.Two_pass_quantize = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "os2"' 3))                  {                      /* BMP output format (OS/2 flavor). */                      requested_fmt = IMAGE_FORMATS.FMT_OS2;                  }                  else if (cdjpeg_utils.keymatch(arg' "outfile"' 4))                  {                      /* Set output file name. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        outfilename = argv[argn];   /* save it away for later use */                  }                  else if (cdjpeg_utils.keymatch(arg' "scale"' 1))                  {                      /* Scale the output image by a fraction M/N. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        int slashPos = argv[argn].IndexOf('/');                      if (slashPos == -1)                          return false;                        try                      {                          string num = argv[argn].Substring(0' slashPos);                          cinfo.Scale_num = int.Parse(num);                          string denom = argv[argn].Substring(slashPos + 1);                          cinfo.Scale_denom = int.Parse(denom);                      }                      catch (Exception e)                      {                          Console.WriteLine(e.Message);                          return false;                      }                  }                  else                  {                      /* bogus switch */                      return false;                  }              }
Magic Number,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,parse_switches,The following statement contains a magic number: for ( ; argn < argv.Length; argn++)              {                  arg = argv[argn];                  if (arg[0] != '-')                  {                      /* Not a switch' must be a file name argument */                      last_file_arg_seen = argn;                      break;                  }                    arg = arg.Substring(1);                    if (cdjpeg_utils.keymatch(arg' "bmp"' 1))                  {                      /* BMP output format. */                      requested_fmt = IMAGE_FORMATS.FMT_BMP;                  }                  else if (cdjpeg_utils.keymatch(arg' "colors"' 1) ||                           cdjpeg_utils.keymatch(arg' "colours"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantize"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantise"' 1))                  {                      /* Do color quantization. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        try                      {                          int val = int.Parse(argv[argn]);                          cinfo.Desired_number_of_colors = val;                          cinfo.Quantize_colors = true;                      }                      catch (Exception e)                      {                          Console.WriteLine(e.Message);                          return false;                      }                  }                  else if (cdjpeg_utils.keymatch(arg' "dct"' 2))                  {                      /* Select IDCT algorithm. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        if (cdjpeg_utils.keymatch(argv[argn]' "int"' 1))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_ISLOW;                      else if (cdjpeg_utils.keymatch(argv[argn]' "fast"' 2))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_IFAST;                      else if (cdjpeg_utils.keymatch(argv[argn]' "float"' 2))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_FLOAT;                      else                          return false;                  }                  else if (cdjpeg_utils.keymatch(arg' "dither"' 2))                  {                      /* Select dithering algorithm. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        if (cdjpeg_utils.keymatch(argv[argn]' "fs"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_FS;                      else if (cdjpeg_utils.keymatch(argv[argn]' "none"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_NONE;                      else if (cdjpeg_utils.keymatch(argv[argn]' "ordered"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_ORDERED;                      else                          return false;                  }                  else if (cdjpeg_utils.keymatch(arg' "debug"' 1) || cdjpeg_utils.keymatch(arg' "verbose"' 1))                  {                      /* Enable debug printouts. */                      /* On first -d' print version identification */                      if (!printed_version)                      {                          Console.Write(string.Format("Bit Miracle's DJPEG' version {0}\n{1}\n"' jpeg_common_struct.Version' jpeg_common_struct.Copyright));                          printed_version = true;                      }                      cinfo.Err.Trace_level++;                  }                  else if (cdjpeg_utils.keymatch(arg' "fast"' 1))                  {                      /* Select recommended processing options for quick-and-dirty output. */                      cinfo.Two_pass_quantize = false;                      cinfo.Dither_mode = J_DITHER_MODE.JDITHER_ORDERED;                      if (!cinfo.Quantize_colors) /* don't override an earlier -colors */                          cinfo.Desired_number_of_colors = 216;                      cinfo.Dct_method = JpegConstants.JDCT_FASTEST;                      cinfo.Do_fancy_upsampling = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "grayscale"' 2) || cdjpeg_utils.keymatch(arg' "greyscale"' 2))                  {                      /* Force monochrome output. */                      cinfo.Out_color_space = J_COLOR_SPACE.JCS_GRAYSCALE;                  }                  else if (cdjpeg_utils.keymatch(arg' "rgb"' 3))                  {                      /* Force RGB output. */                      cinfo.Out_color_space = J_COLOR_SPACE.JCS_RGB;                  }                  else if (cdjpeg_utils.keymatch(arg' "nosmooth"' 3))                  {                      /* Suppress fancy upsampling */                      cinfo.Do_fancy_upsampling = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "onepass"' 3))                  {                      /* Use fast one-pass quantization. */                      cinfo.Two_pass_quantize = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "os2"' 3))                  {                      /* BMP output format (OS/2 flavor). */                      requested_fmt = IMAGE_FORMATS.FMT_OS2;                  }                  else if (cdjpeg_utils.keymatch(arg' "outfile"' 4))                  {                      /* Set output file name. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        outfilename = argv[argn];   /* save it away for later use */                  }                  else if (cdjpeg_utils.keymatch(arg' "scale"' 1))                  {                      /* Scale the output image by a fraction M/N. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        int slashPos = argv[argn].IndexOf('/');                      if (slashPos == -1)                          return false;                        try                      {                          string num = argv[argn].Substring(0' slashPos);                          cinfo.Scale_num = int.Parse(num);                          string denom = argv[argn].Substring(slashPos + 1);                          cinfo.Scale_denom = int.Parse(denom);                      }                      catch (Exception e)                      {                          Console.WriteLine(e.Message);                          return false;                      }                  }                  else                  {                      /* bogus switch */                      return false;                  }              }
Magic Number,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,parse_switches,The following statement contains a magic number: for ( ; argn < argv.Length; argn++)              {                  arg = argv[argn];                  if (arg[0] != '-')                  {                      /* Not a switch' must be a file name argument */                      last_file_arg_seen = argn;                      break;                  }                    arg = arg.Substring(1);                    if (cdjpeg_utils.keymatch(arg' "bmp"' 1))                  {                      /* BMP output format. */                      requested_fmt = IMAGE_FORMATS.FMT_BMP;                  }                  else if (cdjpeg_utils.keymatch(arg' "colors"' 1) ||                           cdjpeg_utils.keymatch(arg' "colours"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantize"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantise"' 1))                  {                      /* Do color quantization. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        try                      {                          int val = int.Parse(argv[argn]);                          cinfo.Desired_number_of_colors = val;                          cinfo.Quantize_colors = true;                      }                      catch (Exception e)                      {                          Console.WriteLine(e.Message);                          return false;                      }                  }                  else if (cdjpeg_utils.keymatch(arg' "dct"' 2))                  {                      /* Select IDCT algorithm. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        if (cdjpeg_utils.keymatch(argv[argn]' "int"' 1))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_ISLOW;                      else if (cdjpeg_utils.keymatch(argv[argn]' "fast"' 2))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_IFAST;                      else if (cdjpeg_utils.keymatch(argv[argn]' "float"' 2))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_FLOAT;                      else                          return false;                  }                  else if (cdjpeg_utils.keymatch(arg' "dither"' 2))                  {                      /* Select dithering algorithm. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        if (cdjpeg_utils.keymatch(argv[argn]' "fs"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_FS;                      else if (cdjpeg_utils.keymatch(argv[argn]' "none"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_NONE;                      else if (cdjpeg_utils.keymatch(argv[argn]' "ordered"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_ORDERED;                      else                          return false;                  }                  else if (cdjpeg_utils.keymatch(arg' "debug"' 1) || cdjpeg_utils.keymatch(arg' "verbose"' 1))                  {                      /* Enable debug printouts. */                      /* On first -d' print version identification */                      if (!printed_version)                      {                          Console.Write(string.Format("Bit Miracle's DJPEG' version {0}\n{1}\n"' jpeg_common_struct.Version' jpeg_common_struct.Copyright));                          printed_version = true;                      }                      cinfo.Err.Trace_level++;                  }                  else if (cdjpeg_utils.keymatch(arg' "fast"' 1))                  {                      /* Select recommended processing options for quick-and-dirty output. */                      cinfo.Two_pass_quantize = false;                      cinfo.Dither_mode = J_DITHER_MODE.JDITHER_ORDERED;                      if (!cinfo.Quantize_colors) /* don't override an earlier -colors */                          cinfo.Desired_number_of_colors = 216;                      cinfo.Dct_method = JpegConstants.JDCT_FASTEST;                      cinfo.Do_fancy_upsampling = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "grayscale"' 2) || cdjpeg_utils.keymatch(arg' "greyscale"' 2))                  {                      /* Force monochrome output. */                      cinfo.Out_color_space = J_COLOR_SPACE.JCS_GRAYSCALE;                  }                  else if (cdjpeg_utils.keymatch(arg' "rgb"' 3))                  {                      /* Force RGB output. */                      cinfo.Out_color_space = J_COLOR_SPACE.JCS_RGB;                  }                  else if (cdjpeg_utils.keymatch(arg' "nosmooth"' 3))                  {                      /* Suppress fancy upsampling */                      cinfo.Do_fancy_upsampling = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "onepass"' 3))                  {                      /* Use fast one-pass quantization. */                      cinfo.Two_pass_quantize = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "os2"' 3))                  {                      /* BMP output format (OS/2 flavor). */                      requested_fmt = IMAGE_FORMATS.FMT_OS2;                  }                  else if (cdjpeg_utils.keymatch(arg' "outfile"' 4))                  {                      /* Set output file name. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        outfilename = argv[argn];   /* save it away for later use */                  }                  else if (cdjpeg_utils.keymatch(arg' "scale"' 1))                  {                      /* Scale the output image by a fraction M/N. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        int slashPos = argv[argn].IndexOf('/');                      if (slashPos == -1)                          return false;                        try                      {                          string num = argv[argn].Substring(0' slashPos);                          cinfo.Scale_num = int.Parse(num);                          string denom = argv[argn].Substring(slashPos + 1);                          cinfo.Scale_denom = int.Parse(denom);                      }                      catch (Exception e)                      {                          Console.WriteLine(e.Message);                          return false;                      }                  }                  else                  {                      /* bogus switch */                      return false;                  }              }
Magic Number,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,parse_switches,The following statement contains a magic number: for ( ; argn < argv.Length; argn++)              {                  arg = argv[argn];                  if (arg[0] != '-')                  {                      /* Not a switch' must be a file name argument */                      last_file_arg_seen = argn;                      break;                  }                    arg = arg.Substring(1);                    if (cdjpeg_utils.keymatch(arg' "bmp"' 1))                  {                      /* BMP output format. */                      requested_fmt = IMAGE_FORMATS.FMT_BMP;                  }                  else if (cdjpeg_utils.keymatch(arg' "colors"' 1) ||                           cdjpeg_utils.keymatch(arg' "colours"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantize"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantise"' 1))                  {                      /* Do color quantization. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        try                      {                          int val = int.Parse(argv[argn]);                          cinfo.Desired_number_of_colors = val;                          cinfo.Quantize_colors = true;                      }                      catch (Exception e)                      {                          Console.WriteLine(e.Message);                          return false;                      }                  }                  else if (cdjpeg_utils.keymatch(arg' "dct"' 2))                  {                      /* Select IDCT algorithm. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        if (cdjpeg_utils.keymatch(argv[argn]' "int"' 1))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_ISLOW;                      else if (cdjpeg_utils.keymatch(argv[argn]' "fast"' 2))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_IFAST;                      else if (cdjpeg_utils.keymatch(argv[argn]' "float"' 2))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_FLOAT;                      else                          return false;                  }                  else if (cdjpeg_utils.keymatch(arg' "dither"' 2))                  {                      /* Select dithering algorithm. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        if (cdjpeg_utils.keymatch(argv[argn]' "fs"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_FS;                      else if (cdjpeg_utils.keymatch(argv[argn]' "none"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_NONE;                      else if (cdjpeg_utils.keymatch(argv[argn]' "ordered"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_ORDERED;                      else                          return false;                  }                  else if (cdjpeg_utils.keymatch(arg' "debug"' 1) || cdjpeg_utils.keymatch(arg' "verbose"' 1))                  {                      /* Enable debug printouts. */                      /* On first -d' print version identification */                      if (!printed_version)                      {                          Console.Write(string.Format("Bit Miracle's DJPEG' version {0}\n{1}\n"' jpeg_common_struct.Version' jpeg_common_struct.Copyright));                          printed_version = true;                      }                      cinfo.Err.Trace_level++;                  }                  else if (cdjpeg_utils.keymatch(arg' "fast"' 1))                  {                      /* Select recommended processing options for quick-and-dirty output. */                      cinfo.Two_pass_quantize = false;                      cinfo.Dither_mode = J_DITHER_MODE.JDITHER_ORDERED;                      if (!cinfo.Quantize_colors) /* don't override an earlier -colors */                          cinfo.Desired_number_of_colors = 216;                      cinfo.Dct_method = JpegConstants.JDCT_FASTEST;                      cinfo.Do_fancy_upsampling = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "grayscale"' 2) || cdjpeg_utils.keymatch(arg' "greyscale"' 2))                  {                      /* Force monochrome output. */                      cinfo.Out_color_space = J_COLOR_SPACE.JCS_GRAYSCALE;                  }                  else if (cdjpeg_utils.keymatch(arg' "rgb"' 3))                  {                      /* Force RGB output. */                      cinfo.Out_color_space = J_COLOR_SPACE.JCS_RGB;                  }                  else if (cdjpeg_utils.keymatch(arg' "nosmooth"' 3))                  {                      /* Suppress fancy upsampling */                      cinfo.Do_fancy_upsampling = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "onepass"' 3))                  {                      /* Use fast one-pass quantization. */                      cinfo.Two_pass_quantize = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "os2"' 3))                  {                      /* BMP output format (OS/2 flavor). */                      requested_fmt = IMAGE_FORMATS.FMT_OS2;                  }                  else if (cdjpeg_utils.keymatch(arg' "outfile"' 4))                  {                      /* Set output file name. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        outfilename = argv[argn];   /* save it away for later use */                  }                  else if (cdjpeg_utils.keymatch(arg' "scale"' 1))                  {                      /* Scale the output image by a fraction M/N. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        int slashPos = argv[argn].IndexOf('/');                      if (slashPos == -1)                          return false;                        try                      {                          string num = argv[argn].Substring(0' slashPos);                          cinfo.Scale_num = int.Parse(num);                          string denom = argv[argn].Substring(slashPos + 1);                          cinfo.Scale_denom = int.Parse(denom);                      }                      catch (Exception e)                      {                          Console.WriteLine(e.Message);                          return false;                      }                  }                  else                  {                      /* bogus switch */                      return false;                  }              }
Magic Number,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,parse_switches,The following statement contains a magic number: for ( ; argn < argv.Length; argn++)              {                  arg = argv[argn];                  if (arg[0] != '-')                  {                      /* Not a switch' must be a file name argument */                      last_file_arg_seen = argn;                      break;                  }                    arg = arg.Substring(1);                    if (cdjpeg_utils.keymatch(arg' "bmp"' 1))                  {                      /* BMP output format. */                      requested_fmt = IMAGE_FORMATS.FMT_BMP;                  }                  else if (cdjpeg_utils.keymatch(arg' "colors"' 1) ||                           cdjpeg_utils.keymatch(arg' "colours"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantize"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantise"' 1))                  {                      /* Do color quantization. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        try                      {                          int val = int.Parse(argv[argn]);                          cinfo.Desired_number_of_colors = val;                          cinfo.Quantize_colors = true;                      }                      catch (Exception e)                      {                          Console.WriteLine(e.Message);                          return false;                      }                  }                  else if (cdjpeg_utils.keymatch(arg' "dct"' 2))                  {                      /* Select IDCT algorithm. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        if (cdjpeg_utils.keymatch(argv[argn]' "int"' 1))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_ISLOW;                      else if (cdjpeg_utils.keymatch(argv[argn]' "fast"' 2))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_IFAST;                      else if (cdjpeg_utils.keymatch(argv[argn]' "float"' 2))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_FLOAT;                      else                          return false;                  }                  else if (cdjpeg_utils.keymatch(arg' "dither"' 2))                  {                      /* Select dithering algorithm. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        if (cdjpeg_utils.keymatch(argv[argn]' "fs"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_FS;                      else if (cdjpeg_utils.keymatch(argv[argn]' "none"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_NONE;                      else if (cdjpeg_utils.keymatch(argv[argn]' "ordered"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_ORDERED;                      else                          return false;                  }                  else if (cdjpeg_utils.keymatch(arg' "debug"' 1) || cdjpeg_utils.keymatch(arg' "verbose"' 1))                  {                      /* Enable debug printouts. */                      /* On first -d' print version identification */                      if (!printed_version)                      {                          Console.Write(string.Format("Bit Miracle's DJPEG' version {0}\n{1}\n"' jpeg_common_struct.Version' jpeg_common_struct.Copyright));                          printed_version = true;                      }                      cinfo.Err.Trace_level++;                  }                  else if (cdjpeg_utils.keymatch(arg' "fast"' 1))                  {                      /* Select recommended processing options for quick-and-dirty output. */                      cinfo.Two_pass_quantize = false;                      cinfo.Dither_mode = J_DITHER_MODE.JDITHER_ORDERED;                      if (!cinfo.Quantize_colors) /* don't override an earlier -colors */                          cinfo.Desired_number_of_colors = 216;                      cinfo.Dct_method = JpegConstants.JDCT_FASTEST;                      cinfo.Do_fancy_upsampling = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "grayscale"' 2) || cdjpeg_utils.keymatch(arg' "greyscale"' 2))                  {                      /* Force monochrome output. */                      cinfo.Out_color_space = J_COLOR_SPACE.JCS_GRAYSCALE;                  }                  else if (cdjpeg_utils.keymatch(arg' "rgb"' 3))                  {                      /* Force RGB output. */                      cinfo.Out_color_space = J_COLOR_SPACE.JCS_RGB;                  }                  else if (cdjpeg_utils.keymatch(arg' "nosmooth"' 3))                  {                      /* Suppress fancy upsampling */                      cinfo.Do_fancy_upsampling = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "onepass"' 3))                  {                      /* Use fast one-pass quantization. */                      cinfo.Two_pass_quantize = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "os2"' 3))                  {                      /* BMP output format (OS/2 flavor). */                      requested_fmt = IMAGE_FORMATS.FMT_OS2;                  }                  else if (cdjpeg_utils.keymatch(arg' "outfile"' 4))                  {                      /* Set output file name. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        outfilename = argv[argn];   /* save it away for later use */                  }                  else if (cdjpeg_utils.keymatch(arg' "scale"' 1))                  {                      /* Scale the output image by a fraction M/N. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        int slashPos = argv[argn].IndexOf('/');                      if (slashPos == -1)                          return false;                        try                      {                          string num = argv[argn].Substring(0' slashPos);                          cinfo.Scale_num = int.Parse(num);                          string denom = argv[argn].Substring(slashPos + 1);                          cinfo.Scale_denom = int.Parse(denom);                      }                      catch (Exception e)                      {                          Console.WriteLine(e.Message);                          return false;                      }                  }                  else                  {                      /* bogus switch */                      return false;                  }              }
Magic Number,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,parse_switches,The following statement contains a magic number: for ( ; argn < argv.Length; argn++)              {                  arg = argv[argn];                  if (arg[0] != '-')                  {                      /* Not a switch' must be a file name argument */                      last_file_arg_seen = argn;                      break;                  }                    arg = arg.Substring(1);                    if (cdjpeg_utils.keymatch(arg' "bmp"' 1))                  {                      /* BMP output format. */                      requested_fmt = IMAGE_FORMATS.FMT_BMP;                  }                  else if (cdjpeg_utils.keymatch(arg' "colors"' 1) ||                           cdjpeg_utils.keymatch(arg' "colours"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantize"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantise"' 1))                  {                      /* Do color quantization. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        try                      {                          int val = int.Parse(argv[argn]);                          cinfo.Desired_number_of_colors = val;                          cinfo.Quantize_colors = true;                      }                      catch (Exception e)                      {                          Console.WriteLine(e.Message);                          return false;                      }                  }                  else if (cdjpeg_utils.keymatch(arg' "dct"' 2))                  {                      /* Select IDCT algorithm. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        if (cdjpeg_utils.keymatch(argv[argn]' "int"' 1))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_ISLOW;                      else if (cdjpeg_utils.keymatch(argv[argn]' "fast"' 2))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_IFAST;                      else if (cdjpeg_utils.keymatch(argv[argn]' "float"' 2))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_FLOAT;                      else                          return false;                  }                  else if (cdjpeg_utils.keymatch(arg' "dither"' 2))                  {                      /* Select dithering algorithm. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        if (cdjpeg_utils.keymatch(argv[argn]' "fs"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_FS;                      else if (cdjpeg_utils.keymatch(argv[argn]' "none"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_NONE;                      else if (cdjpeg_utils.keymatch(argv[argn]' "ordered"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_ORDERED;                      else                          return false;                  }                  else if (cdjpeg_utils.keymatch(arg' "debug"' 1) || cdjpeg_utils.keymatch(arg' "verbose"' 1))                  {                      /* Enable debug printouts. */                      /* On first -d' print version identification */                      if (!printed_version)                      {                          Console.Write(string.Format("Bit Miracle's DJPEG' version {0}\n{1}\n"' jpeg_common_struct.Version' jpeg_common_struct.Copyright));                          printed_version = true;                      }                      cinfo.Err.Trace_level++;                  }                  else if (cdjpeg_utils.keymatch(arg' "fast"' 1))                  {                      /* Select recommended processing options for quick-and-dirty output. */                      cinfo.Two_pass_quantize = false;                      cinfo.Dither_mode = J_DITHER_MODE.JDITHER_ORDERED;                      if (!cinfo.Quantize_colors) /* don't override an earlier -colors */                          cinfo.Desired_number_of_colors = 216;                      cinfo.Dct_method = JpegConstants.JDCT_FASTEST;                      cinfo.Do_fancy_upsampling = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "grayscale"' 2) || cdjpeg_utils.keymatch(arg' "greyscale"' 2))                  {                      /* Force monochrome output. */                      cinfo.Out_color_space = J_COLOR_SPACE.JCS_GRAYSCALE;                  }                  else if (cdjpeg_utils.keymatch(arg' "rgb"' 3))                  {                      /* Force RGB output. */                      cinfo.Out_color_space = J_COLOR_SPACE.JCS_RGB;                  }                  else if (cdjpeg_utils.keymatch(arg' "nosmooth"' 3))                  {                      /* Suppress fancy upsampling */                      cinfo.Do_fancy_upsampling = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "onepass"' 3))                  {                      /* Use fast one-pass quantization. */                      cinfo.Two_pass_quantize = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "os2"' 3))                  {                      /* BMP output format (OS/2 flavor). */                      requested_fmt = IMAGE_FORMATS.FMT_OS2;                  }                  else if (cdjpeg_utils.keymatch(arg' "outfile"' 4))                  {                      /* Set output file name. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        outfilename = argv[argn];   /* save it away for later use */                  }                  else if (cdjpeg_utils.keymatch(arg' "scale"' 1))                  {                      /* Scale the output image by a fraction M/N. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        int slashPos = argv[argn].IndexOf('/');                      if (slashPos == -1)                          return false;                        try                      {                          string num = argv[argn].Substring(0' slashPos);                          cinfo.Scale_num = int.Parse(num);                          string denom = argv[argn].Substring(slashPos + 1);                          cinfo.Scale_denom = int.Parse(denom);                      }                      catch (Exception e)                      {                          Console.WriteLine(e.Message);                          return false;                      }                  }                  else                  {                      /* bogus switch */                      return false;                  }              }
Magic Number,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,parse_switches,The following statement contains a magic number: for ( ; argn < argv.Length; argn++)              {                  arg = argv[argn];                  if (arg[0] != '-')                  {                      /* Not a switch' must be a file name argument */                      last_file_arg_seen = argn;                      break;                  }                    arg = arg.Substring(1);                    if (cdjpeg_utils.keymatch(arg' "bmp"' 1))                  {                      /* BMP output format. */                      requested_fmt = IMAGE_FORMATS.FMT_BMP;                  }                  else if (cdjpeg_utils.keymatch(arg' "colors"' 1) ||                           cdjpeg_utils.keymatch(arg' "colours"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantize"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantise"' 1))                  {                      /* Do color quantization. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        try                      {                          int val = int.Parse(argv[argn]);                          cinfo.Desired_number_of_colors = val;                          cinfo.Quantize_colors = true;                      }                      catch (Exception e)                      {                          Console.WriteLine(e.Message);                          return false;                      }                  }                  else if (cdjpeg_utils.keymatch(arg' "dct"' 2))                  {                      /* Select IDCT algorithm. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        if (cdjpeg_utils.keymatch(argv[argn]' "int"' 1))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_ISLOW;                      else if (cdjpeg_utils.keymatch(argv[argn]' "fast"' 2))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_IFAST;                      else if (cdjpeg_utils.keymatch(argv[argn]' "float"' 2))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_FLOAT;                      else                          return false;                  }                  else if (cdjpeg_utils.keymatch(arg' "dither"' 2))                  {                      /* Select dithering algorithm. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        if (cdjpeg_utils.keymatch(argv[argn]' "fs"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_FS;                      else if (cdjpeg_utils.keymatch(argv[argn]' "none"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_NONE;                      else if (cdjpeg_utils.keymatch(argv[argn]' "ordered"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_ORDERED;                      else                          return false;                  }                  else if (cdjpeg_utils.keymatch(arg' "debug"' 1) || cdjpeg_utils.keymatch(arg' "verbose"' 1))                  {                      /* Enable debug printouts. */                      /* On first -d' print version identification */                      if (!printed_version)                      {                          Console.Write(string.Format("Bit Miracle's DJPEG' version {0}\n{1}\n"' jpeg_common_struct.Version' jpeg_common_struct.Copyright));                          printed_version = true;                      }                      cinfo.Err.Trace_level++;                  }                  else if (cdjpeg_utils.keymatch(arg' "fast"' 1))                  {                      /* Select recommended processing options for quick-and-dirty output. */                      cinfo.Two_pass_quantize = false;                      cinfo.Dither_mode = J_DITHER_MODE.JDITHER_ORDERED;                      if (!cinfo.Quantize_colors) /* don't override an earlier -colors */                          cinfo.Desired_number_of_colors = 216;                      cinfo.Dct_method = JpegConstants.JDCT_FASTEST;                      cinfo.Do_fancy_upsampling = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "grayscale"' 2) || cdjpeg_utils.keymatch(arg' "greyscale"' 2))                  {                      /* Force monochrome output. */                      cinfo.Out_color_space = J_COLOR_SPACE.JCS_GRAYSCALE;                  }                  else if (cdjpeg_utils.keymatch(arg' "rgb"' 3))                  {                      /* Force RGB output. */                      cinfo.Out_color_space = J_COLOR_SPACE.JCS_RGB;                  }                  else if (cdjpeg_utils.keymatch(arg' "nosmooth"' 3))                  {                      /* Suppress fancy upsampling */                      cinfo.Do_fancy_upsampling = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "onepass"' 3))                  {                      /* Use fast one-pass quantization. */                      cinfo.Two_pass_quantize = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "os2"' 3))                  {                      /* BMP output format (OS/2 flavor). */                      requested_fmt = IMAGE_FORMATS.FMT_OS2;                  }                  else if (cdjpeg_utils.keymatch(arg' "outfile"' 4))                  {                      /* Set output file name. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        outfilename = argv[argn];   /* save it away for later use */                  }                  else if (cdjpeg_utils.keymatch(arg' "scale"' 1))                  {                      /* Scale the output image by a fraction M/N. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        int slashPos = argv[argn].IndexOf('/');                      if (slashPos == -1)                          return false;                        try                      {                          string num = argv[argn].Substring(0' slashPos);                          cinfo.Scale_num = int.Parse(num);                          string denom = argv[argn].Substring(slashPos + 1);                          cinfo.Scale_denom = int.Parse(denom);                      }                      catch (Exception e)                      {                          Console.WriteLine(e.Message);                          return false;                      }                  }                  else                  {                      /* bogus switch */                      return false;                  }              }
Magic Number,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,parse_switches,The following statement contains a magic number: for ( ; argn < argv.Length; argn++)              {                  arg = argv[argn];                  if (arg[0] != '-')                  {                      /* Not a switch' must be a file name argument */                      last_file_arg_seen = argn;                      break;                  }                    arg = arg.Substring(1);                    if (cdjpeg_utils.keymatch(arg' "bmp"' 1))                  {                      /* BMP output format. */                      requested_fmt = IMAGE_FORMATS.FMT_BMP;                  }                  else if (cdjpeg_utils.keymatch(arg' "colors"' 1) ||                           cdjpeg_utils.keymatch(arg' "colours"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantize"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantise"' 1))                  {                      /* Do color quantization. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        try                      {                          int val = int.Parse(argv[argn]);                          cinfo.Desired_number_of_colors = val;                          cinfo.Quantize_colors = true;                      }                      catch (Exception e)                      {                          Console.WriteLine(e.Message);                          return false;                      }                  }                  else if (cdjpeg_utils.keymatch(arg' "dct"' 2))                  {                      /* Select IDCT algorithm. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        if (cdjpeg_utils.keymatch(argv[argn]' "int"' 1))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_ISLOW;                      else if (cdjpeg_utils.keymatch(argv[argn]' "fast"' 2))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_IFAST;                      else if (cdjpeg_utils.keymatch(argv[argn]' "float"' 2))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_FLOAT;                      else                          return false;                  }                  else if (cdjpeg_utils.keymatch(arg' "dither"' 2))                  {                      /* Select dithering algorithm. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        if (cdjpeg_utils.keymatch(argv[argn]' "fs"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_FS;                      else if (cdjpeg_utils.keymatch(argv[argn]' "none"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_NONE;                      else if (cdjpeg_utils.keymatch(argv[argn]' "ordered"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_ORDERED;                      else                          return false;                  }                  else if (cdjpeg_utils.keymatch(arg' "debug"' 1) || cdjpeg_utils.keymatch(arg' "verbose"' 1))                  {                      /* Enable debug printouts. */                      /* On first -d' print version identification */                      if (!printed_version)                      {                          Console.Write(string.Format("Bit Miracle's DJPEG' version {0}\n{1}\n"' jpeg_common_struct.Version' jpeg_common_struct.Copyright));                          printed_version = true;                      }                      cinfo.Err.Trace_level++;                  }                  else if (cdjpeg_utils.keymatch(arg' "fast"' 1))                  {                      /* Select recommended processing options for quick-and-dirty output. */                      cinfo.Two_pass_quantize = false;                      cinfo.Dither_mode = J_DITHER_MODE.JDITHER_ORDERED;                      if (!cinfo.Quantize_colors) /* don't override an earlier -colors */                          cinfo.Desired_number_of_colors = 216;                      cinfo.Dct_method = JpegConstants.JDCT_FASTEST;                      cinfo.Do_fancy_upsampling = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "grayscale"' 2) || cdjpeg_utils.keymatch(arg' "greyscale"' 2))                  {                      /* Force monochrome output. */                      cinfo.Out_color_space = J_COLOR_SPACE.JCS_GRAYSCALE;                  }                  else if (cdjpeg_utils.keymatch(arg' "rgb"' 3))                  {                      /* Force RGB output. */                      cinfo.Out_color_space = J_COLOR_SPACE.JCS_RGB;                  }                  else if (cdjpeg_utils.keymatch(arg' "nosmooth"' 3))                  {                      /* Suppress fancy upsampling */                      cinfo.Do_fancy_upsampling = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "onepass"' 3))                  {                      /* Use fast one-pass quantization. */                      cinfo.Two_pass_quantize = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "os2"' 3))                  {                      /* BMP output format (OS/2 flavor). */                      requested_fmt = IMAGE_FORMATS.FMT_OS2;                  }                  else if (cdjpeg_utils.keymatch(arg' "outfile"' 4))                  {                      /* Set output file name. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        outfilename = argv[argn];   /* save it away for later use */                  }                  else if (cdjpeg_utils.keymatch(arg' "scale"' 1))                  {                      /* Scale the output image by a fraction M/N. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        int slashPos = argv[argn].IndexOf('/');                      if (slashPos == -1)                          return false;                        try                      {                          string num = argv[argn].Substring(0' slashPos);                          cinfo.Scale_num = int.Parse(num);                          string denom = argv[argn].Substring(slashPos + 1);                          cinfo.Scale_denom = int.Parse(denom);                      }                      catch (Exception e)                      {                          Console.WriteLine(e.Message);                          return false;                      }                  }                  else                  {                      /* bogus switch */                      return false;                  }              }
Magic Number,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,parse_switches,The following statement contains a magic number: for ( ; argn < argv.Length; argn++)              {                  arg = argv[argn];                  if (arg[0] != '-')                  {                      /* Not a switch' must be a file name argument */                      last_file_arg_seen = argn;                      break;                  }                    arg = arg.Substring(1);                    if (cdjpeg_utils.keymatch(arg' "bmp"' 1))                  {                      /* BMP output format. */                      requested_fmt = IMAGE_FORMATS.FMT_BMP;                  }                  else if (cdjpeg_utils.keymatch(arg' "colors"' 1) ||                           cdjpeg_utils.keymatch(arg' "colours"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantize"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantise"' 1))                  {                      /* Do color quantization. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        try                      {                          int val = int.Parse(argv[argn]);                          cinfo.Desired_number_of_colors = val;                          cinfo.Quantize_colors = true;                      }                      catch (Exception e)                      {                          Console.WriteLine(e.Message);                          return false;                      }                  }                  else if (cdjpeg_utils.keymatch(arg' "dct"' 2))                  {                      /* Select IDCT algorithm. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        if (cdjpeg_utils.keymatch(argv[argn]' "int"' 1))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_ISLOW;                      else if (cdjpeg_utils.keymatch(argv[argn]' "fast"' 2))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_IFAST;                      else if (cdjpeg_utils.keymatch(argv[argn]' "float"' 2))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_FLOAT;                      else                          return false;                  }                  else if (cdjpeg_utils.keymatch(arg' "dither"' 2))                  {                      /* Select dithering algorithm. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        if (cdjpeg_utils.keymatch(argv[argn]' "fs"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_FS;                      else if (cdjpeg_utils.keymatch(argv[argn]' "none"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_NONE;                      else if (cdjpeg_utils.keymatch(argv[argn]' "ordered"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_ORDERED;                      else                          return false;                  }                  else if (cdjpeg_utils.keymatch(arg' "debug"' 1) || cdjpeg_utils.keymatch(arg' "verbose"' 1))                  {                      /* Enable debug printouts. */                      /* On first -d' print version identification */                      if (!printed_version)                      {                          Console.Write(string.Format("Bit Miracle's DJPEG' version {0}\n{1}\n"' jpeg_common_struct.Version' jpeg_common_struct.Copyright));                          printed_version = true;                      }                      cinfo.Err.Trace_level++;                  }                  else if (cdjpeg_utils.keymatch(arg' "fast"' 1))                  {                      /* Select recommended processing options for quick-and-dirty output. */                      cinfo.Two_pass_quantize = false;                      cinfo.Dither_mode = J_DITHER_MODE.JDITHER_ORDERED;                      if (!cinfo.Quantize_colors) /* don't override an earlier -colors */                          cinfo.Desired_number_of_colors = 216;                      cinfo.Dct_method = JpegConstants.JDCT_FASTEST;                      cinfo.Do_fancy_upsampling = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "grayscale"' 2) || cdjpeg_utils.keymatch(arg' "greyscale"' 2))                  {                      /* Force monochrome output. */                      cinfo.Out_color_space = J_COLOR_SPACE.JCS_GRAYSCALE;                  }                  else if (cdjpeg_utils.keymatch(arg' "rgb"' 3))                  {                      /* Force RGB output. */                      cinfo.Out_color_space = J_COLOR_SPACE.JCS_RGB;                  }                  else if (cdjpeg_utils.keymatch(arg' "nosmooth"' 3))                  {                      /* Suppress fancy upsampling */                      cinfo.Do_fancy_upsampling = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "onepass"' 3))                  {                      /* Use fast one-pass quantization. */                      cinfo.Two_pass_quantize = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "os2"' 3))                  {                      /* BMP output format (OS/2 flavor). */                      requested_fmt = IMAGE_FORMATS.FMT_OS2;                  }                  else if (cdjpeg_utils.keymatch(arg' "outfile"' 4))                  {                      /* Set output file name. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        outfilename = argv[argn];   /* save it away for later use */                  }                  else if (cdjpeg_utils.keymatch(arg' "scale"' 1))                  {                      /* Scale the output image by a fraction M/N. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        int slashPos = argv[argn].IndexOf('/');                      if (slashPos == -1)                          return false;                        try                      {                          string num = argv[argn].Substring(0' slashPos);                          cinfo.Scale_num = int.Parse(num);                          string denom = argv[argn].Substring(slashPos + 1);                          cinfo.Scale_denom = int.Parse(denom);                      }                      catch (Exception e)                      {                          Console.WriteLine(e.Message);                          return false;                      }                  }                  else                  {                      /* bogus switch */                      return false;                  }              }
Magic Number,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,parse_switches,The following statement contains a magic number: for ( ; argn < argv.Length; argn++)              {                  arg = argv[argn];                  if (arg[0] != '-')                  {                      /* Not a switch' must be a file name argument */                      last_file_arg_seen = argn;                      break;                  }                    arg = arg.Substring(1);                    if (cdjpeg_utils.keymatch(arg' "bmp"' 1))                  {                      /* BMP output format. */                      requested_fmt = IMAGE_FORMATS.FMT_BMP;                  }                  else if (cdjpeg_utils.keymatch(arg' "colors"' 1) ||                           cdjpeg_utils.keymatch(arg' "colours"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantize"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantise"' 1))                  {                      /* Do color quantization. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        try                      {                          int val = int.Parse(argv[argn]);                          cinfo.Desired_number_of_colors = val;                          cinfo.Quantize_colors = true;                      }                      catch (Exception e)                      {                          Console.WriteLine(e.Message);                          return false;                      }                  }                  else if (cdjpeg_utils.keymatch(arg' "dct"' 2))                  {                      /* Select IDCT algorithm. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        if (cdjpeg_utils.keymatch(argv[argn]' "int"' 1))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_ISLOW;                      else if (cdjpeg_utils.keymatch(argv[argn]' "fast"' 2))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_IFAST;                      else if (cdjpeg_utils.keymatch(argv[argn]' "float"' 2))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_FLOAT;                      else                          return false;                  }                  else if (cdjpeg_utils.keymatch(arg' "dither"' 2))                  {                      /* Select dithering algorithm. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        if (cdjpeg_utils.keymatch(argv[argn]' "fs"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_FS;                      else if (cdjpeg_utils.keymatch(argv[argn]' "none"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_NONE;                      else if (cdjpeg_utils.keymatch(argv[argn]' "ordered"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_ORDERED;                      else                          return false;                  }                  else if (cdjpeg_utils.keymatch(arg' "debug"' 1) || cdjpeg_utils.keymatch(arg' "verbose"' 1))                  {                      /* Enable debug printouts. */                      /* On first -d' print version identification */                      if (!printed_version)                      {                          Console.Write(string.Format("Bit Miracle's DJPEG' version {0}\n{1}\n"' jpeg_common_struct.Version' jpeg_common_struct.Copyright));                          printed_version = true;                      }                      cinfo.Err.Trace_level++;                  }                  else if (cdjpeg_utils.keymatch(arg' "fast"' 1))                  {                      /* Select recommended processing options for quick-and-dirty output. */                      cinfo.Two_pass_quantize = false;                      cinfo.Dither_mode = J_DITHER_MODE.JDITHER_ORDERED;                      if (!cinfo.Quantize_colors) /* don't override an earlier -colors */                          cinfo.Desired_number_of_colors = 216;                      cinfo.Dct_method = JpegConstants.JDCT_FASTEST;                      cinfo.Do_fancy_upsampling = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "grayscale"' 2) || cdjpeg_utils.keymatch(arg' "greyscale"' 2))                  {                      /* Force monochrome output. */                      cinfo.Out_color_space = J_COLOR_SPACE.JCS_GRAYSCALE;                  }                  else if (cdjpeg_utils.keymatch(arg' "rgb"' 3))                  {                      /* Force RGB output. */                      cinfo.Out_color_space = J_COLOR_SPACE.JCS_RGB;                  }                  else if (cdjpeg_utils.keymatch(arg' "nosmooth"' 3))                  {                      /* Suppress fancy upsampling */                      cinfo.Do_fancy_upsampling = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "onepass"' 3))                  {                      /* Use fast one-pass quantization. */                      cinfo.Two_pass_quantize = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "os2"' 3))                  {                      /* BMP output format (OS/2 flavor). */                      requested_fmt = IMAGE_FORMATS.FMT_OS2;                  }                  else if (cdjpeg_utils.keymatch(arg' "outfile"' 4))                  {                      /* Set output file name. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        outfilename = argv[argn];   /* save it away for later use */                  }                  else if (cdjpeg_utils.keymatch(arg' "scale"' 1))                  {                      /* Scale the output image by a fraction M/N. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        int slashPos = argv[argn].IndexOf('/');                      if (slashPos == -1)                          return false;                        try                      {                          string num = argv[argn].Substring(0' slashPos);                          cinfo.Scale_num = int.Parse(num);                          string denom = argv[argn].Substring(slashPos + 1);                          cinfo.Scale_denom = int.Parse(denom);                      }                      catch (Exception e)                      {                          Console.WriteLine(e.Message);                          return false;                      }                  }                  else                  {                      /* bogus switch */                      return false;                  }              }
Magic Number,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,parse_switches,The following statement contains a magic number: for ( ; argn < argv.Length; argn++)              {                  arg = argv[argn];                  if (arg[0] != '-')                  {                      /* Not a switch' must be a file name argument */                      last_file_arg_seen = argn;                      break;                  }                    arg = arg.Substring(1);                    if (cdjpeg_utils.keymatch(arg' "bmp"' 1))                  {                      /* BMP output format. */                      requested_fmt = IMAGE_FORMATS.FMT_BMP;                  }                  else if (cdjpeg_utils.keymatch(arg' "colors"' 1) ||                           cdjpeg_utils.keymatch(arg' "colours"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantize"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantise"' 1))                  {                      /* Do color quantization. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        try                      {                          int val = int.Parse(argv[argn]);                          cinfo.Desired_number_of_colors = val;                          cinfo.Quantize_colors = true;                      }                      catch (Exception e)                      {                          Console.WriteLine(e.Message);                          return false;                      }                  }                  else if (cdjpeg_utils.keymatch(arg' "dct"' 2))                  {                      /* Select IDCT algorithm. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        if (cdjpeg_utils.keymatch(argv[argn]' "int"' 1))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_ISLOW;                      else if (cdjpeg_utils.keymatch(argv[argn]' "fast"' 2))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_IFAST;                      else if (cdjpeg_utils.keymatch(argv[argn]' "float"' 2))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_FLOAT;                      else                          return false;                  }                  else if (cdjpeg_utils.keymatch(arg' "dither"' 2))                  {                      /* Select dithering algorithm. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        if (cdjpeg_utils.keymatch(argv[argn]' "fs"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_FS;                      else if (cdjpeg_utils.keymatch(argv[argn]' "none"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_NONE;                      else if (cdjpeg_utils.keymatch(argv[argn]' "ordered"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_ORDERED;                      else                          return false;                  }                  else if (cdjpeg_utils.keymatch(arg' "debug"' 1) || cdjpeg_utils.keymatch(arg' "verbose"' 1))                  {                      /* Enable debug printouts. */                      /* On first -d' print version identification */                      if (!printed_version)                      {                          Console.Write(string.Format("Bit Miracle's DJPEG' version {0}\n{1}\n"' jpeg_common_struct.Version' jpeg_common_struct.Copyright));                          printed_version = true;                      }                      cinfo.Err.Trace_level++;                  }                  else if (cdjpeg_utils.keymatch(arg' "fast"' 1))                  {                      /* Select recommended processing options for quick-and-dirty output. */                      cinfo.Two_pass_quantize = false;                      cinfo.Dither_mode = J_DITHER_MODE.JDITHER_ORDERED;                      if (!cinfo.Quantize_colors) /* don't override an earlier -colors */                          cinfo.Desired_number_of_colors = 216;                      cinfo.Dct_method = JpegConstants.JDCT_FASTEST;                      cinfo.Do_fancy_upsampling = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "grayscale"' 2) || cdjpeg_utils.keymatch(arg' "greyscale"' 2))                  {                      /* Force monochrome output. */                      cinfo.Out_color_space = J_COLOR_SPACE.JCS_GRAYSCALE;                  }                  else if (cdjpeg_utils.keymatch(arg' "rgb"' 3))                  {                      /* Force RGB output. */                      cinfo.Out_color_space = J_COLOR_SPACE.JCS_RGB;                  }                  else if (cdjpeg_utils.keymatch(arg' "nosmooth"' 3))                  {                      /* Suppress fancy upsampling */                      cinfo.Do_fancy_upsampling = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "onepass"' 3))                  {                      /* Use fast one-pass quantization. */                      cinfo.Two_pass_quantize = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "os2"' 3))                  {                      /* BMP output format (OS/2 flavor). */                      requested_fmt = IMAGE_FORMATS.FMT_OS2;                  }                  else if (cdjpeg_utils.keymatch(arg' "outfile"' 4))                  {                      /* Set output file name. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        outfilename = argv[argn];   /* save it away for later use */                  }                  else if (cdjpeg_utils.keymatch(arg' "scale"' 1))                  {                      /* Scale the output image by a fraction M/N. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        int slashPos = argv[argn].IndexOf('/');                      if (slashPos == -1)                          return false;                        try                      {                          string num = argv[argn].Substring(0' slashPos);                          cinfo.Scale_num = int.Parse(num);                          string denom = argv[argn].Substring(slashPos + 1);                          cinfo.Scale_denom = int.Parse(denom);                      }                      catch (Exception e)                      {                          Console.WriteLine(e.Message);                          return false;                      }                  }                  else                  {                      /* bogus switch */                      return false;                  }              }
Magic Number,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,parse_switches,The following statement contains a magic number: for ( ; argn < argv.Length; argn++)              {                  arg = argv[argn];                  if (arg[0] != '-')                  {                      /* Not a switch' must be a file name argument */                      last_file_arg_seen = argn;                      break;                  }                    arg = arg.Substring(1);                    if (cdjpeg_utils.keymatch(arg' "bmp"' 1))                  {                      /* BMP output format. */                      requested_fmt = IMAGE_FORMATS.FMT_BMP;                  }                  else if (cdjpeg_utils.keymatch(arg' "colors"' 1) ||                           cdjpeg_utils.keymatch(arg' "colours"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantize"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantise"' 1))                  {                      /* Do color quantization. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        try                      {                          int val = int.Parse(argv[argn]);                          cinfo.Desired_number_of_colors = val;                          cinfo.Quantize_colors = true;                      }                      catch (Exception e)                      {                          Console.WriteLine(e.Message);                          return false;                      }                  }                  else if (cdjpeg_utils.keymatch(arg' "dct"' 2))                  {                      /* Select IDCT algorithm. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        if (cdjpeg_utils.keymatch(argv[argn]' "int"' 1))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_ISLOW;                      else if (cdjpeg_utils.keymatch(argv[argn]' "fast"' 2))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_IFAST;                      else if (cdjpeg_utils.keymatch(argv[argn]' "float"' 2))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_FLOAT;                      else                          return false;                  }                  else if (cdjpeg_utils.keymatch(arg' "dither"' 2))                  {                      /* Select dithering algorithm. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        if (cdjpeg_utils.keymatch(argv[argn]' "fs"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_FS;                      else if (cdjpeg_utils.keymatch(argv[argn]' "none"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_NONE;                      else if (cdjpeg_utils.keymatch(argv[argn]' "ordered"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_ORDERED;                      else                          return false;                  }                  else if (cdjpeg_utils.keymatch(arg' "debug"' 1) || cdjpeg_utils.keymatch(arg' "verbose"' 1))                  {                      /* Enable debug printouts. */                      /* On first -d' print version identification */                      if (!printed_version)                      {                          Console.Write(string.Format("Bit Miracle's DJPEG' version {0}\n{1}\n"' jpeg_common_struct.Version' jpeg_common_struct.Copyright));                          printed_version = true;                      }                      cinfo.Err.Trace_level++;                  }                  else if (cdjpeg_utils.keymatch(arg' "fast"' 1))                  {                      /* Select recommended processing options for quick-and-dirty output. */                      cinfo.Two_pass_quantize = false;                      cinfo.Dither_mode = J_DITHER_MODE.JDITHER_ORDERED;                      if (!cinfo.Quantize_colors) /* don't override an earlier -colors */                          cinfo.Desired_number_of_colors = 216;                      cinfo.Dct_method = JpegConstants.JDCT_FASTEST;                      cinfo.Do_fancy_upsampling = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "grayscale"' 2) || cdjpeg_utils.keymatch(arg' "greyscale"' 2))                  {                      /* Force monochrome output. */                      cinfo.Out_color_space = J_COLOR_SPACE.JCS_GRAYSCALE;                  }                  else if (cdjpeg_utils.keymatch(arg' "rgb"' 3))                  {                      /* Force RGB output. */                      cinfo.Out_color_space = J_COLOR_SPACE.JCS_RGB;                  }                  else if (cdjpeg_utils.keymatch(arg' "nosmooth"' 3))                  {                      /* Suppress fancy upsampling */                      cinfo.Do_fancy_upsampling = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "onepass"' 3))                  {                      /* Use fast one-pass quantization. */                      cinfo.Two_pass_quantize = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "os2"' 3))                  {                      /* BMP output format (OS/2 flavor). */                      requested_fmt = IMAGE_FORMATS.FMT_OS2;                  }                  else if (cdjpeg_utils.keymatch(arg' "outfile"' 4))                  {                      /* Set output file name. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        outfilename = argv[argn];   /* save it away for later use */                  }                  else if (cdjpeg_utils.keymatch(arg' "scale"' 1))                  {                      /* Scale the output image by a fraction M/N. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        int slashPos = argv[argn].IndexOf('/');                      if (slashPos == -1)                          return false;                        try                      {                          string num = argv[argn].Substring(0' slashPos);                          cinfo.Scale_num = int.Parse(num);                          string denom = argv[argn].Substring(slashPos + 1);                          cinfo.Scale_denom = int.Parse(denom);                      }                      catch (Exception e)                      {                          Console.WriteLine(e.Message);                          return false;                      }                  }                  else                  {                      /* bogus switch */                      return false;                  }              }
Magic Number,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,parse_switches,The following statement contains a magic number: for ( ; argn < argv.Length; argn++)              {                  arg = argv[argn];                  if (arg[0] != '-')                  {                      /* Not a switch' must be a file name argument */                      last_file_arg_seen = argn;                      break;                  }                    arg = arg.Substring(1);                    if (cdjpeg_utils.keymatch(arg' "bmp"' 1))                  {                      /* BMP output format. */                      requested_fmt = IMAGE_FORMATS.FMT_BMP;                  }                  else if (cdjpeg_utils.keymatch(arg' "colors"' 1) ||                           cdjpeg_utils.keymatch(arg' "colours"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantize"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantise"' 1))                  {                      /* Do color quantization. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        try                      {                          int val = int.Parse(argv[argn]);                          cinfo.Desired_number_of_colors = val;                          cinfo.Quantize_colors = true;                      }                      catch (Exception e)                      {                          Console.WriteLine(e.Message);                          return false;                      }                  }                  else if (cdjpeg_utils.keymatch(arg' "dct"' 2))                  {                      /* Select IDCT algorithm. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        if (cdjpeg_utils.keymatch(argv[argn]' "int"' 1))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_ISLOW;                      else if (cdjpeg_utils.keymatch(argv[argn]' "fast"' 2))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_IFAST;                      else if (cdjpeg_utils.keymatch(argv[argn]' "float"' 2))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_FLOAT;                      else                          return false;                  }                  else if (cdjpeg_utils.keymatch(arg' "dither"' 2))                  {                      /* Select dithering algorithm. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        if (cdjpeg_utils.keymatch(argv[argn]' "fs"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_FS;                      else if (cdjpeg_utils.keymatch(argv[argn]' "none"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_NONE;                      else if (cdjpeg_utils.keymatch(argv[argn]' "ordered"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_ORDERED;                      else                          return false;                  }                  else if (cdjpeg_utils.keymatch(arg' "debug"' 1) || cdjpeg_utils.keymatch(arg' "verbose"' 1))                  {                      /* Enable debug printouts. */                      /* On first -d' print version identification */                      if (!printed_version)                      {                          Console.Write(string.Format("Bit Miracle's DJPEG' version {0}\n{1}\n"' jpeg_common_struct.Version' jpeg_common_struct.Copyright));                          printed_version = true;                      }                      cinfo.Err.Trace_level++;                  }                  else if (cdjpeg_utils.keymatch(arg' "fast"' 1))                  {                      /* Select recommended processing options for quick-and-dirty output. */                      cinfo.Two_pass_quantize = false;                      cinfo.Dither_mode = J_DITHER_MODE.JDITHER_ORDERED;                      if (!cinfo.Quantize_colors) /* don't override an earlier -colors */                          cinfo.Desired_number_of_colors = 216;                      cinfo.Dct_method = JpegConstants.JDCT_FASTEST;                      cinfo.Do_fancy_upsampling = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "grayscale"' 2) || cdjpeg_utils.keymatch(arg' "greyscale"' 2))                  {                      /* Force monochrome output. */                      cinfo.Out_color_space = J_COLOR_SPACE.JCS_GRAYSCALE;                  }                  else if (cdjpeg_utils.keymatch(arg' "rgb"' 3))                  {                      /* Force RGB output. */                      cinfo.Out_color_space = J_COLOR_SPACE.JCS_RGB;                  }                  else if (cdjpeg_utils.keymatch(arg' "nosmooth"' 3))                  {                      /* Suppress fancy upsampling */                      cinfo.Do_fancy_upsampling = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "onepass"' 3))                  {                      /* Use fast one-pass quantization. */                      cinfo.Two_pass_quantize = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "os2"' 3))                  {                      /* BMP output format (OS/2 flavor). */                      requested_fmt = IMAGE_FORMATS.FMT_OS2;                  }                  else if (cdjpeg_utils.keymatch(arg' "outfile"' 4))                  {                      /* Set output file name. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        outfilename = argv[argn];   /* save it away for later use */                  }                  else if (cdjpeg_utils.keymatch(arg' "scale"' 1))                  {                      /* Scale the output image by a fraction M/N. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        int slashPos = argv[argn].IndexOf('/');                      if (slashPos == -1)                          return false;                        try                      {                          string num = argv[argn].Substring(0' slashPos);                          cinfo.Scale_num = int.Parse(num);                          string denom = argv[argn].Substring(slashPos + 1);                          cinfo.Scale_denom = int.Parse(denom);                      }                      catch (Exception e)                      {                          Console.WriteLine(e.Message);                          return false;                      }                  }                  else                  {                      /* bogus switch */                      return false;                  }              }
Magic Number,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,parse_switches,The following statement contains a magic number: for ( ; argn < argv.Length; argn++)              {                  arg = argv[argn];                  if (arg[0] != '-')                  {                      /* Not a switch' must be a file name argument */                      last_file_arg_seen = argn;                      break;                  }                    arg = arg.Substring(1);                    if (cdjpeg_utils.keymatch(arg' "bmp"' 1))                  {                      /* BMP output format. */                      requested_fmt = IMAGE_FORMATS.FMT_BMP;                  }                  else if (cdjpeg_utils.keymatch(arg' "colors"' 1) ||                           cdjpeg_utils.keymatch(arg' "colours"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantize"' 1) ||                           cdjpeg_utils.keymatch(arg' "quantise"' 1))                  {                      /* Do color quantization. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        try                      {                          int val = int.Parse(argv[argn]);                          cinfo.Desired_number_of_colors = val;                          cinfo.Quantize_colors = true;                      }                      catch (Exception e)                      {                          Console.WriteLine(e.Message);                          return false;                      }                  }                  else if (cdjpeg_utils.keymatch(arg' "dct"' 2))                  {                      /* Select IDCT algorithm. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        if (cdjpeg_utils.keymatch(argv[argn]' "int"' 1))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_ISLOW;                      else if (cdjpeg_utils.keymatch(argv[argn]' "fast"' 2))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_IFAST;                      else if (cdjpeg_utils.keymatch(argv[argn]' "float"' 2))                          cinfo.Dct_method = J_DCT_METHOD.JDCT_FLOAT;                      else                          return false;                  }                  else if (cdjpeg_utils.keymatch(arg' "dither"' 2))                  {                      /* Select dithering algorithm. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        if (cdjpeg_utils.keymatch(argv[argn]' "fs"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_FS;                      else if (cdjpeg_utils.keymatch(argv[argn]' "none"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_NONE;                      else if (cdjpeg_utils.keymatch(argv[argn]' "ordered"' 2))                          cinfo.Dither_mode = J_DITHER_MODE.JDITHER_ORDERED;                      else                          return false;                  }                  else if (cdjpeg_utils.keymatch(arg' "debug"' 1) || cdjpeg_utils.keymatch(arg' "verbose"' 1))                  {                      /* Enable debug printouts. */                      /* On first -d' print version identification */                      if (!printed_version)                      {                          Console.Write(string.Format("Bit Miracle's DJPEG' version {0}\n{1}\n"' jpeg_common_struct.Version' jpeg_common_struct.Copyright));                          printed_version = true;                      }                      cinfo.Err.Trace_level++;                  }                  else if (cdjpeg_utils.keymatch(arg' "fast"' 1))                  {                      /* Select recommended processing options for quick-and-dirty output. */                      cinfo.Two_pass_quantize = false;                      cinfo.Dither_mode = J_DITHER_MODE.JDITHER_ORDERED;                      if (!cinfo.Quantize_colors) /* don't override an earlier -colors */                          cinfo.Desired_number_of_colors = 216;                      cinfo.Dct_method = JpegConstants.JDCT_FASTEST;                      cinfo.Do_fancy_upsampling = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "grayscale"' 2) || cdjpeg_utils.keymatch(arg' "greyscale"' 2))                  {                      /* Force monochrome output. */                      cinfo.Out_color_space = J_COLOR_SPACE.JCS_GRAYSCALE;                  }                  else if (cdjpeg_utils.keymatch(arg' "rgb"' 3))                  {                      /* Force RGB output. */                      cinfo.Out_color_space = J_COLOR_SPACE.JCS_RGB;                  }                  else if (cdjpeg_utils.keymatch(arg' "nosmooth"' 3))                  {                      /* Suppress fancy upsampling */                      cinfo.Do_fancy_upsampling = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "onepass"' 3))                  {                      /* Use fast one-pass quantization. */                      cinfo.Two_pass_quantize = false;                  }                  else if (cdjpeg_utils.keymatch(arg' "os2"' 3))                  {                      /* BMP output format (OS/2 flavor). */                      requested_fmt = IMAGE_FORMATS.FMT_OS2;                  }                  else if (cdjpeg_utils.keymatch(arg' "outfile"' 4))                  {                      /* Set output file name. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        outfilename = argv[argn];   /* save it away for later use */                  }                  else if (cdjpeg_utils.keymatch(arg' "scale"' 1))                  {                      /* Scale the output image by a fraction M/N. */                      if (++argn >= argv.Length) /* advance to next argument */                          return false;                        int slashPos = argv[argn].IndexOf('/');                      if (slashPos == -1)                          return false;                        try                      {                          string num = argv[argn].Substring(0' slashPos);                          cinfo.Scale_num = int.Parse(num);                          string denom = argv[argn].Substring(slashPos + 1);                          cinfo.Scale_denom = int.Parse(denom);                      }                      catch (Exception e)                      {                          Console.WriteLine(e.Message);                          return false;                      }                  }                  else                  {                      /* bogus switch */                      return false;                  }              }
Magic Number,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,encodeOctalString,The following statement contains a magic number: return string.Format(                  @"\{0}{1}{2}"'                  ((value >> 6) & 7)'                  ((value >> 3) & 7)'                  (value & 7)              );
Magic Number,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,encodeOctalString,The following statement contains a magic number: return string.Format(                  @"\{0}{1}{2}"'                  ((value >> 6) & 7)'                  ((value >> 3) & 7)'                  (value & 7)              );
Magic Number,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,encodeOctalString,The following statement contains a magic number: return string.Format(                  @"\{0}{1}{2}"'                  ((value >> 6) & 7)'                  ((value >> 3) & 7)'                  (value & 7)              );
Magic Number,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,encodeOctalString,The following statement contains a magic number: return string.Format(                  @"\{0}{1}{2}"'                  ((value >> 6) & 7)'                  ((value >> 3) & 7)'                  (value & 7)              );
Magic Number,BitMiracle.dJpeg,Program,C:\repos\BitMiracle_libjpeg.net\dJpeg\Program.cs,encodeOctalString,The following statement contains a magic number: return string.Format(                  @"\{0}{1}{2}"'                  ((value >> 6) & 7)'                  ((value >> 3) & 7)'                  (value & 7)              );
