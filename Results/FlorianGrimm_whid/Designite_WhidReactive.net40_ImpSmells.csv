Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,AddJanusFace,The method has 126 lines of code.
Long Method,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,GetJanusFace,The method has 101 lines of code.
Long Method,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,GetJanusFaces,The method has 106 lines of code.
Complex Method,System.Collections.ObjectModel,ObservableSlaveCollection,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\Collections\ObjectModel\ObservableSlaveCollection.cs,SyncIfNeeded,Cyclomatic complexity of the method is 9
Complex Method,System.Collections.ObjectModel,ObservableSlaveCollection,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\Collections\ObjectModel\ObservableSlaveCollection.cs,Replay,Cyclomatic complexity of the method is 24
Complex Method,System.Collections.ObjectModel,ObservableSlaveProjectCollection,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\Collections\ObjectModel\ObservableSlaveProjectCollection.cs,SyncIfNeeded,Cyclomatic complexity of the method is 14
Complex Method,System.Collections.ObjectModel,ObservableSlaveProjectCollection,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\Collections\ObjectModel\ObservableSlaveProjectCollection.cs,Replay,Cyclomatic complexity of the method is 24
Complex Method,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,AddJanusFace,Cyclomatic complexity of the method is 26
Complex Method,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,GetJanusFace,Cyclomatic complexity of the method is 21
Complex Method,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,GetJanusFaces,Cyclomatic complexity of the method is 22
Complex Method,System.ComponentModel,ReactiveProperty,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\ReactiveProperty.cs,OnNextInternal,Cyclomatic complexity of the method is 8
Complex Method,System.ComponentModel,ReactivePropertyFirstValue,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\ReactivePropertyFirstValue.cs,OnNextInternal,Cyclomatic complexity of the method is 8
Complex Method,System.ComponentModel,ReactivePropertyStoppable,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\ReactivePropertyStoppable.cs,unStop,Cyclomatic complexity of the method is 8
Complex Method,System.ComponentModel,ReactivePropertyStoppable,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\ReactivePropertyStoppable.cs,OnNextInternal,Cyclomatic complexity of the method is 8
Long Parameter List,System.Collections.ObjectModel,ObservableSlaveProjectCollection,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\Collections\ObjectModel\ObservableSlaveProjectCollection.cs,ObservableSlaveProjectCollection,The method has 5 parameters.
Long Parameter List,System.ComponentModel,MessageBusMsgEventArgsWire,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\MessageBus.cs,MessageBusMsgEventArgsWire,The method has 5 parameters.
Long Parameter List,System.ComponentModel,ReactiveProperty,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\ReactiveProperty.cs,ReactiveProperty,The method has 7 parameters.
Long Parameter List,System.ComponentModel,ReactivePropertyFirstValue,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\ReactivePropertyFirstValue.cs,ReactivePropertyFirstValue,The method has 7 parameters.
Long Parameter List,System.ComponentModel,ReactivePropertyHistory,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\ReactivePropertyHistory.cs,ReactivePropertyHistory,The method has 8 parameters.
Long Parameter List,System.ComponentModel,ReactivePropertyStoppable,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\ReactivePropertyStoppable.cs,ReactivePropertyStoppable,The method has 7 parameters.
Long Parameter List,System.Reactive.Concurrency,DispatcherImmediateScheduler,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\Reactive\Concurrency\DispatcherImmediateScheduler.cs,Schedule,The method has 7 parameters.
Long Parameter List,System.Reactive.Concurrency,DispatcherImmediateScheduler,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\Reactive\Concurrency\DispatcherImmediateScheduler.cs,SchedulePeriodic,The method has 6 parameters.
Long Parameter List,System.Windows.Threading,EventDispatcher,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\Windows\Threading\EventDispatcher.cs,InvokeAction,The method has 5 parameters.
Long Parameter List,System.Windows.Threading,EventDispatcher,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\Windows\Threading\EventDispatcher.cs,BeginInvokeAction,The method has 5 parameters.
Long Parameter List,System.Windows.Threading,EventDispatcherExtension,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\Windows\Threading\EventDispatcher.cs,InvokeActionSafe,The method has 5 parameters.
Long Parameter List,System.Windows.Threading,EventDispatcherExtension,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\Windows\Threading\EventDispatcher.cs,InvokeActionSafe,The method has 6 parameters.
Long Parameter List,System.Windows.Threading,EventDispatcherExtension,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\Windows\Threading\EventDispatcher.cs,BeginInvokeActionSafe,The method has 5 parameters.
Long Parameter List,System.Windows.Threading,EventDispatcherExtension,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\Windows\Threading\EventDispatcher.cs,BeginInvokeActionSafe,The method has 6 parameters.
Long Parameter List,System.Windows.Threading,IEventDispatcher,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\Windows\Threading\IEventDispatcher.cs,BeginInvokeAction,The method has 5 parameters.
Long Parameter List,System.Windows.Threading,IEventDispatcher,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\Windows\Threading\IEventDispatcher.cs,InvokeAction,The method has 5 parameters.
Long Identifier,System.Collections.ObjectModel,ObservableSlaveProjectCollection,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\Collections\ObjectModel\ObservableSlaveProjectCollection.cs,SetSourceList,The length of the parameter sourceAsNotifyCollectionChanged is 31.
Long Identifier,System.ComponentModel,ReactiveProperty,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\ReactiveProperty.cs,OnNextInternal,The length of the parameter isNeededObserversOldNewValueOnNext is 34.
Long Identifier,System.ComponentModel,ReactivePropertyFirstValue,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\ReactivePropertyFirstValue.cs,OnNextInternal,The length of the parameter isNeededObserversOldNewValueOnNext is 34.
Long Identifier,System.ComponentModel,ReactivePropertyStoppable,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\ReactivePropertyStoppable.cs,unStop,The length of the parameter isNeededObserversOldNewValueOnNext is 34.
Long Identifier,System.ComponentModel,ReactivePropertyStoppable,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\ReactivePropertyStoppable.cs,OnNextInternal,The length of the parameter isNeededObserversOldNewValueOnNext is 34.
Long Statement,System.ComponentModel,BaseNotifyPropertyChanged,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\BaseNotifyPropertyChanged.cs,OnBeginPropertyChangedGui,The length of the statement  "		var pc = _EventDispatcherPropertyChangedEventHandler ?? (_EventDispatcherPropertyChangedEventHandler = new PropertyChangedEventHandler (this.eventDispatcherPropertyChangedEventHandler)); " is 186.
Long Statement,System.ComponentModel,BaseNotifyPropertyChanged,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\BaseNotifyPropertyChanged.cs,OnBeginPropertyChangedGui,The length of the statement  "		var pc = _EventDispatcherPropertyChangedEventHandler ?? (_EventDispatcherPropertyChangedEventHandler = new PropertyChangedEventHandler (this.eventDispatcherPropertyChangedEventHandler)); " is 186.
Long Statement,System.ComponentModel,BaseNotifyPropertyChanged,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\BaseNotifyPropertyChanged.cs,OnPropertyChangedGui,The length of the statement  "		var pc = _EventDispatcherPropertyChangedEventHandler ?? (_EventDispatcherPropertyChangedEventHandler = new PropertyChangedEventHandler (this.eventDispatcherPropertyChangedEventHandler)); " is 186.
Long Statement,System.ComponentModel,BaseNotifyPropertyChanged,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\BaseNotifyPropertyChanged.cs,OnPropertyChangedGui,The length of the statement  "		var pc = _EventDispatcherPropertyChangedEventHandler ?? (_EventDispatcherPropertyChangedEventHandler = new PropertyChangedEventHandler (this.eventDispatcherPropertyChangedEventHandler)); " is 186.
Long Statement,System.ComponentModel,BaseGuiNotifyPropertyChanged,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\BaseNotifyPropertyChanged.cs,OnBeginPropertyChanged,The length of the statement  "		var pc = _EventDispatcherPropertyChangedEventHandler ?? (_EventDispatcherPropertyChangedEventHandler = new PropertyChangedEventHandler (this.eventDispatcherPropertyChangedEventHandler)); " is 186.
Long Statement,System.ComponentModel,BaseGuiNotifyPropertyChanged,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\BaseNotifyPropertyChanged.cs,OnBeginPropertyChanged,The length of the statement  "		var pc = _EventDispatcherPropertyChangedEventHandler ?? (_EventDispatcherPropertyChangedEventHandler = new PropertyChangedEventHandler (this.eventDispatcherPropertyChangedEventHandler)); " is 186.
Long Statement,System.ComponentModel,BaseGuiNotifyPropertyChanged,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\BaseNotifyPropertyChanged.cs,OnPropertyChanged,The length of the statement  "		var pc = _EventDispatcherPropertyChangedEventHandler ?? (_EventDispatcherPropertyChangedEventHandler = new PropertyChangedEventHandler (this.eventDispatcherPropertyChangedEventHandler)); " is 186.
Long Statement,System.ComponentModel,BaseGuiNotifyPropertyChanged,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\BaseNotifyPropertyChanged.cs,OnPropertyChanged,The length of the statement  "		var pc = _EventDispatcherPropertyChangedEventHandler ?? (_EventDispatcherPropertyChangedEventHandler = new PropertyChangedEventHandler (this.eventDispatcherPropertyChangedEventHandler)); " is 186.
Long Statement,System.ComponentModel,EventHandlerTrampolinViaPropertyNotifyCollectionChanged,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\EventHandlerTrampolinViaPropertyEventArgs.cs,wireSourceActionHandlers,The length of the statement  "	return new WiredEventHandlerClassic<TBack' NotifyCollectionChangedEventHandler> (back' _AddHandler' _RemoveHandler' method); " is 124.
Long Statement,System.ComponentModel,MessageBusMsgEventArgs,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\MessageBus.cs,ToString,The length of the statement  "	return string.Concat (this.InstanceId.ToString ()' "'"' this.Category ?? "<NULL>"' "'"' this.Message ?? "<NULL>"' this.Handeled ? "'Handeled" : "'"' this.Cancel ? "'Cancel" : "'"' this.Final ? "'Final" : "'"); " is 209.
Long Statement,System.ComponentModel,ReactiveProperty,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\ReactiveProperty.cs,OnNextInternal,The length of the statement  "			propertyChanged (this' _ValuePropertyChangedEventArgs ?? (_ValuePropertyChangedEventArgs = new PropertyChangedEventArgs ("Value"))); " is 132.
Long Statement,System.ComponentModel,ReactivePropertyFirstValue,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\ReactivePropertyFirstValue.cs,OnNextInternal,The length of the statement  "			propertyChanged (this' _ValuePropertyChangedEventArgs ?? (_ValuePropertyChangedEventArgs = new PropertyChangedEventArgs ("Value"))); " is 132.
Long Statement,System.ComponentModel,ReactivePropertyHistory,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\ReactivePropertyHistory.cs,OnNextInternal,The length of the statement  "			propertyChanged (this' _ValuePropertyChangedEventArgs ?? (_ValuePropertyChangedEventArgs = new PropertyChangedEventArgs ("Value"))); " is 132.
Long Statement,System.ComponentModel,ReactivePropertyStoppable,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\ReactivePropertyStoppable.cs,unStop,The length of the statement  "			propertyChanged (this' _ValuePropertyChangedEventArgs ?? (_ValuePropertyChangedEventArgs = new PropertyChangedEventArgs ("Value"))); " is 132.
Long Statement,System.ComponentModel,ReactivePropertyStoppable,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\ReactivePropertyStoppable.cs,OnNextInternal,The length of the statement  "			propertyChanged (this' _ValuePropertyChangedEventArgs ?? (_ValuePropertyChangedEventArgs = new PropertyChangedEventArgs ("Value"))); " is 132.
Empty Catch Block,System.Windows.Threading,EventDispatcher,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\Windows\Threading\EventDispatcher.cs,InvokeQueue,The method has an empty catch block.
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,AddJanusFace,The following statement contains a magic number: if (value == null) {  	var hashCode = jfkey.GetHashCode ();  	var tripple = new Tripple (jfkey);  	while (true) {  		List<Tripple> oldTripples = null;  		var tripples = _Tripples;  		var pos = tripples.BinarySearch (tripple' TrippleHashCodeComparer.GetInstance ());  		if (pos < 0) {  			// not found  			break;  		}  		else {  			while (pos > 0) {  				if (tripples [pos - 1].HashCode == hashCode) {  					pos--;  				}  				else {  					break;  				}  			}  			while (pos < tripples.Count) {  				var t = tripples [pos];  				if (t.HashCode == hashCode) {  					var tvalue = t.Value;  					if (tvalue != null) {  						if (t.Key.Equals (jfkey)) {  							tvalue = null;  						}  					}  					if (tvalue == null) {  						if (oldTripples == null) {  							oldTripples = tripples;  							tripples = new List<Tripple> (tripples);  						}  						tripples.RemoveAt (pos);  						continue;  					}  					pos++;  				}  				else {  					break;  				}  			}  			if (oldTripples == null) {  				break;  			}  			else {  				#pragma  				if (System.Threading.Interlocked.CompareExchange (ref _Tripples' tripples' oldTripples) == oldTripples) {  					break;  				}  				else {  					continue;  				}  				#pragma  			}  		}  	}  }  else {  	var hashCode = jfkey.GetHashCode ();  	var tripple = new Tripple (jfkey);  	tripple.Value = value;  	while (true) {  		var oldTripples = _Tripples;  		var tripples = new List<Tripple> (oldTripples);  		var pos = tripples.BinarySearch (tripple' TrippleHashCodeComparer.GetInstance ());  		if (pos < 0) {  			tripples.Insert (~pos' tripple);  		}  		else {  			//tripples.Insert(pos' tripple);  			while (pos > 0) {  				if (tripples [pos - 1].HashCode == hashCode) {  					pos--;  				}  				else {  					break;  				}  			}  			while (pos < tripples.Count) {  				var t = tripples [pos];  				if (t.HashCode == hashCode) {  					if (t.Key.Equals (jfkey)) {  						tripples [pos] = tripple;  						tripple = null;  						break;  					}  					else {  						var tvalue = t.Value;  						if (tvalue == null) {  							tripples [pos] = tripple;  							tripple = null;  							break;  						}  						else {  							pos++;  						}  					}  				}  				else {  					tripples.Insert (pos' tripple);  					tripple = null;  					break;  				}  			}  			if (tripple != null) {  				tripples.Add (tripple);  			}  		}  		#pragma  		if (System.Threading.Interlocked.CompareExchange (ref _Tripples' tripples' oldTripples) == oldTripples) {  			break;  		}  		#pragma  	}  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,AddJanusFace,The following statement contains a magic number: if (value == null) {  	var hashCode = jfkey.GetHashCode ();  	var tripple = new Tripple (jfkey);  	while (true) {  		List<Tripple> oldTripples = null;  		var tripples = _Tripples;  		var pos = tripples.BinarySearch (tripple' TrippleHashCodeComparer.GetInstance ());  		if (pos < 0) {  			// not found  			break;  		}  		else {  			while (pos > 0) {  				if (tripples [pos - 1].HashCode == hashCode) {  					pos--;  				}  				else {  					break;  				}  			}  			while (pos < tripples.Count) {  				var t = tripples [pos];  				if (t.HashCode == hashCode) {  					var tvalue = t.Value;  					if (tvalue != null) {  						if (t.Key.Equals (jfkey)) {  							tvalue = null;  						}  					}  					if (tvalue == null) {  						if (oldTripples == null) {  							oldTripples = tripples;  							tripples = new List<Tripple> (tripples);  						}  						tripples.RemoveAt (pos);  						continue;  					}  					pos++;  				}  				else {  					break;  				}  			}  			if (oldTripples == null) {  				break;  			}  			else {  				#pragma  				if (System.Threading.Interlocked.CompareExchange (ref _Tripples' tripples' oldTripples) == oldTripples) {  					break;  				}  				else {  					continue;  				}  				#pragma  			}  		}  	}  }  else {  	var hashCode = jfkey.GetHashCode ();  	var tripple = new Tripple (jfkey);  	tripple.Value = value;  	while (true) {  		var oldTripples = _Tripples;  		var tripples = new List<Tripple> (oldTripples);  		var pos = tripples.BinarySearch (tripple' TrippleHashCodeComparer.GetInstance ());  		if (pos < 0) {  			tripples.Insert (~pos' tripple);  		}  		else {  			//tripples.Insert(pos' tripple);  			while (pos > 0) {  				if (tripples [pos - 1].HashCode == hashCode) {  					pos--;  				}  				else {  					break;  				}  			}  			while (pos < tripples.Count) {  				var t = tripples [pos];  				if (t.HashCode == hashCode) {  					if (t.Key.Equals (jfkey)) {  						tripples [pos] = tripple;  						tripple = null;  						break;  					}  					else {  						var tvalue = t.Value;  						if (tvalue == null) {  							tripples [pos] = tripple;  							tripple = null;  							break;  						}  						else {  							pos++;  						}  					}  				}  				else {  					tripples.Insert (pos' tripple);  					tripple = null;  					break;  				}  			}  			if (tripple != null) {  				tripples.Add (tripple);  			}  		}  		#pragma  		if (System.Threading.Interlocked.CompareExchange (ref _Tripples' tripples' oldTripples) == oldTripples) {  			break;  		}  		#pragma  	}  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,AddJanusFace,The following statement contains a magic number: if (value == null) {  	var hashCode = jfkey.GetHashCode ();  	var tripple = new Tripple (jfkey);  	while (true) {  		List<Tripple> oldTripples = null;  		var tripples = _Tripples;  		var pos = tripples.BinarySearch (tripple' TrippleHashCodeComparer.GetInstance ());  		if (pos < 0) {  			// not found  			break;  		}  		else {  			while (pos > 0) {  				if (tripples [pos - 1].HashCode == hashCode) {  					pos--;  				}  				else {  					break;  				}  			}  			while (pos < tripples.Count) {  				var t = tripples [pos];  				if (t.HashCode == hashCode) {  					var tvalue = t.Value;  					if (tvalue != null) {  						if (t.Key.Equals (jfkey)) {  							tvalue = null;  						}  					}  					if (tvalue == null) {  						if (oldTripples == null) {  							oldTripples = tripples;  							tripples = new List<Tripple> (tripples);  						}  						tripples.RemoveAt (pos);  						continue;  					}  					pos++;  				}  				else {  					break;  				}  			}  			if (oldTripples == null) {  				break;  			}  			else {  				#pragma  				if (System.Threading.Interlocked.CompareExchange (ref _Tripples' tripples' oldTripples) == oldTripples) {  					break;  				}  				else {  					continue;  				}  				#pragma  			}  		}  	}  }  else {  	var hashCode = jfkey.GetHashCode ();  	var tripple = new Tripple (jfkey);  	tripple.Value = value;  	while (true) {  		var oldTripples = _Tripples;  		var tripples = new List<Tripple> (oldTripples);  		var pos = tripples.BinarySearch (tripple' TrippleHashCodeComparer.GetInstance ());  		if (pos < 0) {  			tripples.Insert (~pos' tripple);  		}  		else {  			//tripples.Insert(pos' tripple);  			while (pos > 0) {  				if (tripples [pos - 1].HashCode == hashCode) {  					pos--;  				}  				else {  					break;  				}  			}  			while (pos < tripples.Count) {  				var t = tripples [pos];  				if (t.HashCode == hashCode) {  					if (t.Key.Equals (jfkey)) {  						tripples [pos] = tripple;  						tripple = null;  						break;  					}  					else {  						var tvalue = t.Value;  						if (tvalue == null) {  							tripples [pos] = tripple;  							tripple = null;  							break;  						}  						else {  							pos++;  						}  					}  				}  				else {  					tripples.Insert (pos' tripple);  					tripple = null;  					break;  				}  			}  			if (tripple != null) {  				tripples.Add (tripple);  			}  		}  		#pragma  		if (System.Threading.Interlocked.CompareExchange (ref _Tripples' tripples' oldTripples) == oldTripples) {  			break;  		}  		#pragma  	}  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,AddJanusFace,The following statement contains a magic number: if (value == null) {  	var hashCode = jfkey.GetHashCode ();  	var tripple = new Tripple (jfkey);  	while (true) {  		List<Tripple> oldTripples = null;  		var tripples = _Tripples;  		var pos = tripples.BinarySearch (tripple' TrippleHashCodeComparer.GetInstance ());  		if (pos < 0) {  			// not found  			break;  		}  		else {  			while (pos > 0) {  				if (tripples [pos - 1].HashCode == hashCode) {  					pos--;  				}  				else {  					break;  				}  			}  			while (pos < tripples.Count) {  				var t = tripples [pos];  				if (t.HashCode == hashCode) {  					var tvalue = t.Value;  					if (tvalue != null) {  						if (t.Key.Equals (jfkey)) {  							tvalue = null;  						}  					}  					if (tvalue == null) {  						if (oldTripples == null) {  							oldTripples = tripples;  							tripples = new List<Tripple> (tripples);  						}  						tripples.RemoveAt (pos);  						continue;  					}  					pos++;  				}  				else {  					break;  				}  			}  			if (oldTripples == null) {  				break;  			}  			else {  				#pragma  				if (System.Threading.Interlocked.CompareExchange (ref _Tripples' tripples' oldTripples) == oldTripples) {  					break;  				}  				else {  					continue;  				}  				#pragma  			}  		}  	}  }  else {  	var hashCode = jfkey.GetHashCode ();  	var tripple = new Tripple (jfkey);  	tripple.Value = value;  	while (true) {  		var oldTripples = _Tripples;  		var tripples = new List<Tripple> (oldTripples);  		var pos = tripples.BinarySearch (tripple' TrippleHashCodeComparer.GetInstance ());  		if (pos < 0) {  			tripples.Insert (~pos' tripple);  		}  		else {  			//tripples.Insert(pos' tripple);  			while (pos > 0) {  				if (tripples [pos - 1].HashCode == hashCode) {  					pos--;  				}  				else {  					break;  				}  			}  			while (pos < tripples.Count) {  				var t = tripples [pos];  				if (t.HashCode == hashCode) {  					if (t.Key.Equals (jfkey)) {  						tripples [pos] = tripple;  						tripple = null;  						break;  					}  					else {  						var tvalue = t.Value;  						if (tvalue == null) {  							tripples [pos] = tripple;  							tripple = null;  							break;  						}  						else {  							pos++;  						}  					}  				}  				else {  					tripples.Insert (pos' tripple);  					tripple = null;  					break;  				}  			}  			if (tripple != null) {  				tripples.Add (tripple);  			}  		}  		#pragma  		if (System.Threading.Interlocked.CompareExchange (ref _Tripples' tripples' oldTripples) == oldTripples) {  			break;  		}  		#pragma  	}  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,AddJanusFace,The following statement contains a magic number: while (true) {  	List<Tripple> oldTripples = null;  	var tripples = _Tripples;  	var pos = tripples.BinarySearch (tripple' TrippleHashCodeComparer.GetInstance ());  	if (pos < 0) {  		// not found  		break;  	}  	else {  		while (pos > 0) {  			if (tripples [pos - 1].HashCode == hashCode) {  				pos--;  			}  			else {  				break;  			}  		}  		while (pos < tripples.Count) {  			var t = tripples [pos];  			if (t.HashCode == hashCode) {  				var tvalue = t.Value;  				if (tvalue != null) {  					if (t.Key.Equals (jfkey)) {  						tvalue = null;  					}  				}  				if (tvalue == null) {  					if (oldTripples == null) {  						oldTripples = tripples;  						tripples = new List<Tripple> (tripples);  					}  					tripples.RemoveAt (pos);  					continue;  				}  				pos++;  			}  			else {  				break;  			}  		}  		if (oldTripples == null) {  			break;  		}  		else {  			#pragma  			if (System.Threading.Interlocked.CompareExchange (ref _Tripples' tripples' oldTripples) == oldTripples) {  				break;  			}  			else {  				continue;  			}  			#pragma  		}  	}  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,AddJanusFace,The following statement contains a magic number: while (true) {  	List<Tripple> oldTripples = null;  	var tripples = _Tripples;  	var pos = tripples.BinarySearch (tripple' TrippleHashCodeComparer.GetInstance ());  	if (pos < 0) {  		// not found  		break;  	}  	else {  		while (pos > 0) {  			if (tripples [pos - 1].HashCode == hashCode) {  				pos--;  			}  			else {  				break;  			}  		}  		while (pos < tripples.Count) {  			var t = tripples [pos];  			if (t.HashCode == hashCode) {  				var tvalue = t.Value;  				if (tvalue != null) {  					if (t.Key.Equals (jfkey)) {  						tvalue = null;  					}  				}  				if (tvalue == null) {  					if (oldTripples == null) {  						oldTripples = tripples;  						tripples = new List<Tripple> (tripples);  					}  					tripples.RemoveAt (pos);  					continue;  				}  				pos++;  			}  			else {  				break;  			}  		}  		if (oldTripples == null) {  			break;  		}  		else {  			#pragma  			if (System.Threading.Interlocked.CompareExchange (ref _Tripples' tripples' oldTripples) == oldTripples) {  				break;  			}  			else {  				continue;  			}  			#pragma  		}  	}  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,AddJanusFace,The following statement contains a magic number: if (pos < 0) {  	// not found  	break;  }  else {  	while (pos > 0) {  		if (tripples [pos - 1].HashCode == hashCode) {  			pos--;  		}  		else {  			break;  		}  	}  	while (pos < tripples.Count) {  		var t = tripples [pos];  		if (t.HashCode == hashCode) {  			var tvalue = t.Value;  			if (tvalue != null) {  				if (t.Key.Equals (jfkey)) {  					tvalue = null;  				}  			}  			if (tvalue == null) {  				if (oldTripples == null) {  					oldTripples = tripples;  					tripples = new List<Tripple> (tripples);  				}  				tripples.RemoveAt (pos);  				continue;  			}  			pos++;  		}  		else {  			break;  		}  	}  	if (oldTripples == null) {  		break;  	}  	else {  		#pragma  		if (System.Threading.Interlocked.CompareExchange (ref _Tripples' tripples' oldTripples) == oldTripples) {  			break;  		}  		else {  			continue;  		}  		#pragma  	}  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,AddJanusFace,The following statement contains a magic number: if (pos < 0) {  	// not found  	break;  }  else {  	while (pos > 0) {  		if (tripples [pos - 1].HashCode == hashCode) {  			pos--;  		}  		else {  			break;  		}  	}  	while (pos < tripples.Count) {  		var t = tripples [pos];  		if (t.HashCode == hashCode) {  			var tvalue = t.Value;  			if (tvalue != null) {  				if (t.Key.Equals (jfkey)) {  					tvalue = null;  				}  			}  			if (tvalue == null) {  				if (oldTripples == null) {  					oldTripples = tripples;  					tripples = new List<Tripple> (tripples);  				}  				tripples.RemoveAt (pos);  				continue;  			}  			pos++;  		}  		else {  			break;  		}  	}  	if (oldTripples == null) {  		break;  	}  	else {  		#pragma  		if (System.Threading.Interlocked.CompareExchange (ref _Tripples' tripples' oldTripples) == oldTripples) {  			break;  		}  		else {  			continue;  		}  		#pragma  	}  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,AddJanusFace,The following statement contains a magic number: if (oldTripples == null) {  	break;  }  else {  	#pragma  	if (System.Threading.Interlocked.CompareExchange (ref _Tripples' tripples' oldTripples) == oldTripples) {  		break;  	}  	else {  		continue;  	}  	#pragma  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,AddJanusFace,The following statement contains a magic number: if (oldTripples == null) {  	break;  }  else {  	#pragma  	if (System.Threading.Interlocked.CompareExchange (ref _Tripples' tripples' oldTripples) == oldTripples) {  		break;  	}  	else {  		continue;  	}  	#pragma  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,AddJanusFace,The following statement contains a magic number: while (true) {  	var oldTripples = _Tripples;  	var tripples = new List<Tripple> (oldTripples);  	var pos = tripples.BinarySearch (tripple' TrippleHashCodeComparer.GetInstance ());  	if (pos < 0) {  		tripples.Insert (~pos' tripple);  	}  	else {  		//tripples.Insert(pos' tripple);  		while (pos > 0) {  			if (tripples [pos - 1].HashCode == hashCode) {  				pos--;  			}  			else {  				break;  			}  		}  		while (pos < tripples.Count) {  			var t = tripples [pos];  			if (t.HashCode == hashCode) {  				if (t.Key.Equals (jfkey)) {  					tripples [pos] = tripple;  					tripple = null;  					break;  				}  				else {  					var tvalue = t.Value;  					if (tvalue == null) {  						tripples [pos] = tripple;  						tripple = null;  						break;  					}  					else {  						pos++;  					}  				}  			}  			else {  				tripples.Insert (pos' tripple);  				tripple = null;  				break;  			}  		}  		if (tripple != null) {  			tripples.Add (tripple);  		}  	}  	#pragma  	if (System.Threading.Interlocked.CompareExchange (ref _Tripples' tripples' oldTripples) == oldTripples) {  		break;  	}  	#pragma  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,AddJanusFace,The following statement contains a magic number: while (true) {  	var oldTripples = _Tripples;  	var tripples = new List<Tripple> (oldTripples);  	var pos = tripples.BinarySearch (tripple' TrippleHashCodeComparer.GetInstance ());  	if (pos < 0) {  		tripples.Insert (~pos' tripple);  	}  	else {  		//tripples.Insert(pos' tripple);  		while (pos > 0) {  			if (tripples [pos - 1].HashCode == hashCode) {  				pos--;  			}  			else {  				break;  			}  		}  		while (pos < tripples.Count) {  			var t = tripples [pos];  			if (t.HashCode == hashCode) {  				if (t.Key.Equals (jfkey)) {  					tripples [pos] = tripple;  					tripple = null;  					break;  				}  				else {  					var tvalue = t.Value;  					if (tvalue == null) {  						tripples [pos] = tripple;  						tripple = null;  						break;  					}  					else {  						pos++;  					}  				}  			}  			else {  				tripples.Insert (pos' tripple);  				tripple = null;  				break;  			}  		}  		if (tripple != null) {  			tripples.Add (tripple);  		}  	}  	#pragma  	if (System.Threading.Interlocked.CompareExchange (ref _Tripples' tripples' oldTripples) == oldTripples) {  		break;  	}  	#pragma  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,GetJanusFace,The following statement contains a magic number: if (key == null) {  	return this;  }  else {  	JanusFaceComparer jfcmp = key as JanusFaceComparer;  	if (jfcmp == null) {  		if (key is Array) {  			Array a = (Array)key;  			int len = a.GetLength (0);  			if (len == 0) {  				jfcmp = new JanusFaceComparer (key);  			}  			else if (len == 1) {  				jfcmp = new JanusFaceComparer (a.GetValue (0));  			}  			else if (len == 2) {  				jfcmp = new JanusFaceKey (a.GetValue (0)' a.GetValue (1));  			}  			else {  				jfcmp = new JanusFaceComparer (key);  			}  		}  		else {  			jfcmp = new JanusFaceComparer (key);  		}  	}  	var hashCode = jfcmp.GetHashCode ();  	var tripple = new Tripple (jfcmp);  	var tripples = this._Tripples;  	List<Tripple> oldTripples = null;  	int pos;  	if (tripples.Count > 4) {  		var cmp = TrippleHashCodeComparer.GetInstance ();  		pos = tripples.BinarySearch (tripple' cmp);  	}  	else {  		pos = 0;  		var cmp = TrippleHashCodeComparer.GetIntComparer ();  		while (pos < tripples.Count) {  			var t = tripples [pos];  			if (t.HashCode > hashCode) {  				pos = ~pos;  				break;  			}  			if (t.HashCode == hashCode) {  				break;  			}  			pos++;  		}  		if (pos == tripples.Count) {  			pos = ~pos;  		}  	}  	if (pos < 0) {  		return null;  	}  	else {  		while (pos > 0) {  			if (tripples [pos - 1].HashCode == hashCode) {  				pos--;  			}  			else {  				break;  			}  		}  		// firstpos found  		object result = null;  		while (pos < tripples.Count) {  			var t = tripples [pos];  			if (t.HashCode == hashCode) {  				var value = t.Value;  				if (value == null) {  					if (oldTripples == null) {  						oldTripples = tripples;  						tripples = new List<Tripple> (tripples);  					}  					tripples.RemoveAt (pos);  					continue;  				}  				if (t.Key.Equals (jfcmp)) {  					result = value;  					break;  				}  				else {  					pos++;  				}  			}  			else {  				break;  			}  		}  		if (oldTripples != null) {  			#pragma  			System.Threading.Interlocked.CompareExchange (ref _Tripples' tripples' oldTripples);  			#pragma  		}  		return result;  	}  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,GetJanusFace,The following statement contains a magic number: if (key == null) {  	return this;  }  else {  	JanusFaceComparer jfcmp = key as JanusFaceComparer;  	if (jfcmp == null) {  		if (key is Array) {  			Array a = (Array)key;  			int len = a.GetLength (0);  			if (len == 0) {  				jfcmp = new JanusFaceComparer (key);  			}  			else if (len == 1) {  				jfcmp = new JanusFaceComparer (a.GetValue (0));  			}  			else if (len == 2) {  				jfcmp = new JanusFaceKey (a.GetValue (0)' a.GetValue (1));  			}  			else {  				jfcmp = new JanusFaceComparer (key);  			}  		}  		else {  			jfcmp = new JanusFaceComparer (key);  		}  	}  	var hashCode = jfcmp.GetHashCode ();  	var tripple = new Tripple (jfcmp);  	var tripples = this._Tripples;  	List<Tripple> oldTripples = null;  	int pos;  	if (tripples.Count > 4) {  		var cmp = TrippleHashCodeComparer.GetInstance ();  		pos = tripples.BinarySearch (tripple' cmp);  	}  	else {  		pos = 0;  		var cmp = TrippleHashCodeComparer.GetIntComparer ();  		while (pos < tripples.Count) {  			var t = tripples [pos];  			if (t.HashCode > hashCode) {  				pos = ~pos;  				break;  			}  			if (t.HashCode == hashCode) {  				break;  			}  			pos++;  		}  		if (pos == tripples.Count) {  			pos = ~pos;  		}  	}  	if (pos < 0) {  		return null;  	}  	else {  		while (pos > 0) {  			if (tripples [pos - 1].HashCode == hashCode) {  				pos--;  			}  			else {  				break;  			}  		}  		// firstpos found  		object result = null;  		while (pos < tripples.Count) {  			var t = tripples [pos];  			if (t.HashCode == hashCode) {  				var value = t.Value;  				if (value == null) {  					if (oldTripples == null) {  						oldTripples = tripples;  						tripples = new List<Tripple> (tripples);  					}  					tripples.RemoveAt (pos);  					continue;  				}  				if (t.Key.Equals (jfcmp)) {  					result = value;  					break;  				}  				else {  					pos++;  				}  			}  			else {  				break;  			}  		}  		if (oldTripples != null) {  			#pragma  			System.Threading.Interlocked.CompareExchange (ref _Tripples' tripples' oldTripples);  			#pragma  		}  		return result;  	}  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,GetJanusFace,The following statement contains a magic number: if (key == null) {  	return this;  }  else {  	JanusFaceComparer jfcmp = key as JanusFaceComparer;  	if (jfcmp == null) {  		if (key is Array) {  			Array a = (Array)key;  			int len = a.GetLength (0);  			if (len == 0) {  				jfcmp = new JanusFaceComparer (key);  			}  			else if (len == 1) {  				jfcmp = new JanusFaceComparer (a.GetValue (0));  			}  			else if (len == 2) {  				jfcmp = new JanusFaceKey (a.GetValue (0)' a.GetValue (1));  			}  			else {  				jfcmp = new JanusFaceComparer (key);  			}  		}  		else {  			jfcmp = new JanusFaceComparer (key);  		}  	}  	var hashCode = jfcmp.GetHashCode ();  	var tripple = new Tripple (jfcmp);  	var tripples = this._Tripples;  	List<Tripple> oldTripples = null;  	int pos;  	if (tripples.Count > 4) {  		var cmp = TrippleHashCodeComparer.GetInstance ();  		pos = tripples.BinarySearch (tripple' cmp);  	}  	else {  		pos = 0;  		var cmp = TrippleHashCodeComparer.GetIntComparer ();  		while (pos < tripples.Count) {  			var t = tripples [pos];  			if (t.HashCode > hashCode) {  				pos = ~pos;  				break;  			}  			if (t.HashCode == hashCode) {  				break;  			}  			pos++;  		}  		if (pos == tripples.Count) {  			pos = ~pos;  		}  	}  	if (pos < 0) {  		return null;  	}  	else {  		while (pos > 0) {  			if (tripples [pos - 1].HashCode == hashCode) {  				pos--;  			}  			else {  				break;  			}  		}  		// firstpos found  		object result = null;  		while (pos < tripples.Count) {  			var t = tripples [pos];  			if (t.HashCode == hashCode) {  				var value = t.Value;  				if (value == null) {  					if (oldTripples == null) {  						oldTripples = tripples;  						tripples = new List<Tripple> (tripples);  					}  					tripples.RemoveAt (pos);  					continue;  				}  				if (t.Key.Equals (jfcmp)) {  					result = value;  					break;  				}  				else {  					pos++;  				}  			}  			else {  				break;  			}  		}  		if (oldTripples != null) {  			#pragma  			System.Threading.Interlocked.CompareExchange (ref _Tripples' tripples' oldTripples);  			#pragma  		}  		return result;  	}  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,GetJanusFace,The following statement contains a magic number: if (key == null) {  	return this;  }  else {  	JanusFaceComparer jfcmp = key as JanusFaceComparer;  	if (jfcmp == null) {  		if (key is Array) {  			Array a = (Array)key;  			int len = a.GetLength (0);  			if (len == 0) {  				jfcmp = new JanusFaceComparer (key);  			}  			else if (len == 1) {  				jfcmp = new JanusFaceComparer (a.GetValue (0));  			}  			else if (len == 2) {  				jfcmp = new JanusFaceKey (a.GetValue (0)' a.GetValue (1));  			}  			else {  				jfcmp = new JanusFaceComparer (key);  			}  		}  		else {  			jfcmp = new JanusFaceComparer (key);  		}  	}  	var hashCode = jfcmp.GetHashCode ();  	var tripple = new Tripple (jfcmp);  	var tripples = this._Tripples;  	List<Tripple> oldTripples = null;  	int pos;  	if (tripples.Count > 4) {  		var cmp = TrippleHashCodeComparer.GetInstance ();  		pos = tripples.BinarySearch (tripple' cmp);  	}  	else {  		pos = 0;  		var cmp = TrippleHashCodeComparer.GetIntComparer ();  		while (pos < tripples.Count) {  			var t = tripples [pos];  			if (t.HashCode > hashCode) {  				pos = ~pos;  				break;  			}  			if (t.HashCode == hashCode) {  				break;  			}  			pos++;  		}  		if (pos == tripples.Count) {  			pos = ~pos;  		}  	}  	if (pos < 0) {  		return null;  	}  	else {  		while (pos > 0) {  			if (tripples [pos - 1].HashCode == hashCode) {  				pos--;  			}  			else {  				break;  			}  		}  		// firstpos found  		object result = null;  		while (pos < tripples.Count) {  			var t = tripples [pos];  			if (t.HashCode == hashCode) {  				var value = t.Value;  				if (value == null) {  					if (oldTripples == null) {  						oldTripples = tripples;  						tripples = new List<Tripple> (tripples);  					}  					tripples.RemoveAt (pos);  					continue;  				}  				if (t.Key.Equals (jfcmp)) {  					result = value;  					break;  				}  				else {  					pos++;  				}  			}  			else {  				break;  			}  		}  		if (oldTripples != null) {  			#pragma  			System.Threading.Interlocked.CompareExchange (ref _Tripples' tripples' oldTripples);  			#pragma  		}  		return result;  	}  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,GetJanusFace,The following statement contains a magic number: if (jfcmp == null) {  	if (key is Array) {  		Array a = (Array)key;  		int len = a.GetLength (0);  		if (len == 0) {  			jfcmp = new JanusFaceComparer (key);  		}  		else if (len == 1) {  			jfcmp = new JanusFaceComparer (a.GetValue (0));  		}  		else if (len == 2) {  			jfcmp = new JanusFaceKey (a.GetValue (0)' a.GetValue (1));  		}  		else {  			jfcmp = new JanusFaceComparer (key);  		}  	}  	else {  		jfcmp = new JanusFaceComparer (key);  	}  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,GetJanusFace,The following statement contains a magic number: if (key is Array) {  	Array a = (Array)key;  	int len = a.GetLength (0);  	if (len == 0) {  		jfcmp = new JanusFaceComparer (key);  	}  	else if (len == 1) {  		jfcmp = new JanusFaceComparer (a.GetValue (0));  	}  	else if (len == 2) {  		jfcmp = new JanusFaceKey (a.GetValue (0)' a.GetValue (1));  	}  	else {  		jfcmp = new JanusFaceComparer (key);  	}  }  else {  	jfcmp = new JanusFaceComparer (key);  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,GetJanusFace,The following statement contains a magic number: if (len == 0) {  	jfcmp = new JanusFaceComparer (key);  }  else if (len == 1) {  	jfcmp = new JanusFaceComparer (a.GetValue (0));  }  else if (len == 2) {  	jfcmp = new JanusFaceKey (a.GetValue (0)' a.GetValue (1));  }  else {  	jfcmp = new JanusFaceComparer (key);  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,GetJanusFace,The following statement contains a magic number: if (len == 1) {  	jfcmp = new JanusFaceComparer (a.GetValue (0));  }  else if (len == 2) {  	jfcmp = new JanusFaceKey (a.GetValue (0)' a.GetValue (1));  }  else {  	jfcmp = new JanusFaceComparer (key);  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,GetJanusFace,The following statement contains a magic number: if (len == 2) {  	jfcmp = new JanusFaceKey (a.GetValue (0)' a.GetValue (1));  }  else {  	jfcmp = new JanusFaceComparer (key);  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,GetJanusFace,The following statement contains a magic number: if (tripples.Count > 4) {  	var cmp = TrippleHashCodeComparer.GetInstance ();  	pos = tripples.BinarySearch (tripple' cmp);  }  else {  	pos = 0;  	var cmp = TrippleHashCodeComparer.GetIntComparer ();  	while (pos < tripples.Count) {  		var t = tripples [pos];  		if (t.HashCode > hashCode) {  			pos = ~pos;  			break;  		}  		if (t.HashCode == hashCode) {  			break;  		}  		pos++;  	}  	if (pos == tripples.Count) {  		pos = ~pos;  	}  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,GetJanusFace,The following statement contains a magic number: if (pos < 0) {  	return null;  }  else {  	while (pos > 0) {  		if (tripples [pos - 1].HashCode == hashCode) {  			pos--;  		}  		else {  			break;  		}  	}  	// firstpos found  	object result = null;  	while (pos < tripples.Count) {  		var t = tripples [pos];  		if (t.HashCode == hashCode) {  			var value = t.Value;  			if (value == null) {  				if (oldTripples == null) {  					oldTripples = tripples;  					tripples = new List<Tripple> (tripples);  				}  				tripples.RemoveAt (pos);  				continue;  			}  			if (t.Key.Equals (jfcmp)) {  				result = value;  				break;  			}  			else {  				pos++;  			}  		}  		else {  			break;  		}  	}  	if (oldTripples != null) {  		#pragma  		System.Threading.Interlocked.CompareExchange (ref _Tripples' tripples' oldTripples);  		#pragma  	}  	return result;  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,GetJanusFace,The following statement contains a magic number: if (pos < 0) {  	return null;  }  else {  	while (pos > 0) {  		if (tripples [pos - 1].HashCode == hashCode) {  			pos--;  		}  		else {  			break;  		}  	}  	// firstpos found  	object result = null;  	while (pos < tripples.Count) {  		var t = tripples [pos];  		if (t.HashCode == hashCode) {  			var value = t.Value;  			if (value == null) {  				if (oldTripples == null) {  					oldTripples = tripples;  					tripples = new List<Tripple> (tripples);  				}  				tripples.RemoveAt (pos);  				continue;  			}  			if (t.Key.Equals (jfcmp)) {  				result = value;  				break;  			}  			else {  				pos++;  			}  		}  		else {  			break;  		}  	}  	if (oldTripples != null) {  		#pragma  		System.Threading.Interlocked.CompareExchange (ref _Tripples' tripples' oldTripples);  		#pragma  	}  	return result;  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,GetJanusFace,The following statement contains a magic number: if (oldTripples != null) {  	#pragma  	System.Threading.Interlocked.CompareExchange (ref _Tripples' tripples' oldTripples);  	#pragma  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,GetJanusFace,The following statement contains a magic number: if (oldTripples != null) {  	#pragma  	System.Threading.Interlocked.CompareExchange (ref _Tripples' tripples' oldTripples);  	#pragma  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,GetJanusFaces,The following statement contains a magic number: if (key == null) {  	return new object[] {  		this  	};  }  else {  	JanusFaceComparer jfcmp = key as JanusFaceComparer;  	if (jfcmp == null) {  		if (key is Array) {  			Array a = (Array)key;  			int len = a.GetLength (0);  			if (len == 0) {  				jfcmp = new JanusFaceComparer (key);  			}  			else if (len == 1) {  				jfcmp = new JanusFaceComparer (a.GetValue (0));  			}  			else if (len == 2) {  				jfcmp = new JanusFaceKey (a.GetValue (0)' a.GetValue (1));  			}  			else {  				jfcmp = new JanusFaceComparer (key);  			}  		}  		else {  			jfcmp = new JanusFaceComparer (key);  		}  	}  	var hashCode = jfcmp.GetHashCode ();  	var tripple = new Tripple (jfcmp);  	//  	var tripples = this._Tripples;  	List<Tripple> oldTripples = null;  	int pos;  	if (tripples.Count > 4) {  		var cmp = TrippleHashCodeComparer.GetInstance ();  		pos = tripples.BinarySearch (tripple' cmp);  		if (pos > 0) {  			while (pos > 0) {  				if (tripples [pos - 1].HashCode == hashCode) {  					pos--;  				}  				else {  					break;  				}  			}  		}  	}  	else {  		pos = 0;  		// var cmp = TrippleHashCodeComparer.GetIntComparer();  		while (pos < tripples.Count) {  			var t = tripples [pos];  			if (t.HashCode > hashCode) {  				pos = ~pos;  				break;  			}  			if (t.HashCode == hashCode) {  				break;  			}  			pos++;  		}  		if (pos == tripples.Count) {  			pos = ~pos;  		}  	}  	if (pos < 0) {  		return new object[0];  	}  	else {  		// firstpos found  		List<object> result = new List<object> ();  		while (pos < tripples.Count) {  			var t = tripples [pos];  			if (t.HashCode == hashCode) {  				var value = t.Value;  				if (value == null) {  					if (oldTripples == null) {  						oldTripples = tripples;  						tripples = new List<Tripple> (tripples);  					}  					tripples.RemoveAt (pos);  					continue;  				}  				if (t.Key.Equals (jfcmp)) {  					result.Add (value);  					pos++;  				}  				else {  					pos++;  				}  			}  			else {  				break;  			}  		}  		if (oldTripples != null) {  			#pragma  			System.Threading.Interlocked.CompareExchange (ref _Tripples' tripples' oldTripples);  			#pragma  		}  		return result.ToArray ();  	}  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,GetJanusFaces,The following statement contains a magic number: if (key == null) {  	return new object[] {  		this  	};  }  else {  	JanusFaceComparer jfcmp = key as JanusFaceComparer;  	if (jfcmp == null) {  		if (key is Array) {  			Array a = (Array)key;  			int len = a.GetLength (0);  			if (len == 0) {  				jfcmp = new JanusFaceComparer (key);  			}  			else if (len == 1) {  				jfcmp = new JanusFaceComparer (a.GetValue (0));  			}  			else if (len == 2) {  				jfcmp = new JanusFaceKey (a.GetValue (0)' a.GetValue (1));  			}  			else {  				jfcmp = new JanusFaceComparer (key);  			}  		}  		else {  			jfcmp = new JanusFaceComparer (key);  		}  	}  	var hashCode = jfcmp.GetHashCode ();  	var tripple = new Tripple (jfcmp);  	//  	var tripples = this._Tripples;  	List<Tripple> oldTripples = null;  	int pos;  	if (tripples.Count > 4) {  		var cmp = TrippleHashCodeComparer.GetInstance ();  		pos = tripples.BinarySearch (tripple' cmp);  		if (pos > 0) {  			while (pos > 0) {  				if (tripples [pos - 1].HashCode == hashCode) {  					pos--;  				}  				else {  					break;  				}  			}  		}  	}  	else {  		pos = 0;  		// var cmp = TrippleHashCodeComparer.GetIntComparer();  		while (pos < tripples.Count) {  			var t = tripples [pos];  			if (t.HashCode > hashCode) {  				pos = ~pos;  				break;  			}  			if (t.HashCode == hashCode) {  				break;  			}  			pos++;  		}  		if (pos == tripples.Count) {  			pos = ~pos;  		}  	}  	if (pos < 0) {  		return new object[0];  	}  	else {  		// firstpos found  		List<object> result = new List<object> ();  		while (pos < tripples.Count) {  			var t = tripples [pos];  			if (t.HashCode == hashCode) {  				var value = t.Value;  				if (value == null) {  					if (oldTripples == null) {  						oldTripples = tripples;  						tripples = new List<Tripple> (tripples);  					}  					tripples.RemoveAt (pos);  					continue;  				}  				if (t.Key.Equals (jfcmp)) {  					result.Add (value);  					pos++;  				}  				else {  					pos++;  				}  			}  			else {  				break;  			}  		}  		if (oldTripples != null) {  			#pragma  			System.Threading.Interlocked.CompareExchange (ref _Tripples' tripples' oldTripples);  			#pragma  		}  		return result.ToArray ();  	}  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,GetJanusFaces,The following statement contains a magic number: if (key == null) {  	return new object[] {  		this  	};  }  else {  	JanusFaceComparer jfcmp = key as JanusFaceComparer;  	if (jfcmp == null) {  		if (key is Array) {  			Array a = (Array)key;  			int len = a.GetLength (0);  			if (len == 0) {  				jfcmp = new JanusFaceComparer (key);  			}  			else if (len == 1) {  				jfcmp = new JanusFaceComparer (a.GetValue (0));  			}  			else if (len == 2) {  				jfcmp = new JanusFaceKey (a.GetValue (0)' a.GetValue (1));  			}  			else {  				jfcmp = new JanusFaceComparer (key);  			}  		}  		else {  			jfcmp = new JanusFaceComparer (key);  		}  	}  	var hashCode = jfcmp.GetHashCode ();  	var tripple = new Tripple (jfcmp);  	//  	var tripples = this._Tripples;  	List<Tripple> oldTripples = null;  	int pos;  	if (tripples.Count > 4) {  		var cmp = TrippleHashCodeComparer.GetInstance ();  		pos = tripples.BinarySearch (tripple' cmp);  		if (pos > 0) {  			while (pos > 0) {  				if (tripples [pos - 1].HashCode == hashCode) {  					pos--;  				}  				else {  					break;  				}  			}  		}  	}  	else {  		pos = 0;  		// var cmp = TrippleHashCodeComparer.GetIntComparer();  		while (pos < tripples.Count) {  			var t = tripples [pos];  			if (t.HashCode > hashCode) {  				pos = ~pos;  				break;  			}  			if (t.HashCode == hashCode) {  				break;  			}  			pos++;  		}  		if (pos == tripples.Count) {  			pos = ~pos;  		}  	}  	if (pos < 0) {  		return new object[0];  	}  	else {  		// firstpos found  		List<object> result = new List<object> ();  		while (pos < tripples.Count) {  			var t = tripples [pos];  			if (t.HashCode == hashCode) {  				var value = t.Value;  				if (value == null) {  					if (oldTripples == null) {  						oldTripples = tripples;  						tripples = new List<Tripple> (tripples);  					}  					tripples.RemoveAt (pos);  					continue;  				}  				if (t.Key.Equals (jfcmp)) {  					result.Add (value);  					pos++;  				}  				else {  					pos++;  				}  			}  			else {  				break;  			}  		}  		if (oldTripples != null) {  			#pragma  			System.Threading.Interlocked.CompareExchange (ref _Tripples' tripples' oldTripples);  			#pragma  		}  		return result.ToArray ();  	}  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,GetJanusFaces,The following statement contains a magic number: if (key == null) {  	return new object[] {  		this  	};  }  else {  	JanusFaceComparer jfcmp = key as JanusFaceComparer;  	if (jfcmp == null) {  		if (key is Array) {  			Array a = (Array)key;  			int len = a.GetLength (0);  			if (len == 0) {  				jfcmp = new JanusFaceComparer (key);  			}  			else if (len == 1) {  				jfcmp = new JanusFaceComparer (a.GetValue (0));  			}  			else if (len == 2) {  				jfcmp = new JanusFaceKey (a.GetValue (0)' a.GetValue (1));  			}  			else {  				jfcmp = new JanusFaceComparer (key);  			}  		}  		else {  			jfcmp = new JanusFaceComparer (key);  		}  	}  	var hashCode = jfcmp.GetHashCode ();  	var tripple = new Tripple (jfcmp);  	//  	var tripples = this._Tripples;  	List<Tripple> oldTripples = null;  	int pos;  	if (tripples.Count > 4) {  		var cmp = TrippleHashCodeComparer.GetInstance ();  		pos = tripples.BinarySearch (tripple' cmp);  		if (pos > 0) {  			while (pos > 0) {  				if (tripples [pos - 1].HashCode == hashCode) {  					pos--;  				}  				else {  					break;  				}  			}  		}  	}  	else {  		pos = 0;  		// var cmp = TrippleHashCodeComparer.GetIntComparer();  		while (pos < tripples.Count) {  			var t = tripples [pos];  			if (t.HashCode > hashCode) {  				pos = ~pos;  				break;  			}  			if (t.HashCode == hashCode) {  				break;  			}  			pos++;  		}  		if (pos == tripples.Count) {  			pos = ~pos;  		}  	}  	if (pos < 0) {  		return new object[0];  	}  	else {  		// firstpos found  		List<object> result = new List<object> ();  		while (pos < tripples.Count) {  			var t = tripples [pos];  			if (t.HashCode == hashCode) {  				var value = t.Value;  				if (value == null) {  					if (oldTripples == null) {  						oldTripples = tripples;  						tripples = new List<Tripple> (tripples);  					}  					tripples.RemoveAt (pos);  					continue;  				}  				if (t.Key.Equals (jfcmp)) {  					result.Add (value);  					pos++;  				}  				else {  					pos++;  				}  			}  			else {  				break;  			}  		}  		if (oldTripples != null) {  			#pragma  			System.Threading.Interlocked.CompareExchange (ref _Tripples' tripples' oldTripples);  			#pragma  		}  		return result.ToArray ();  	}  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,GetJanusFaces,The following statement contains a magic number: if (jfcmp == null) {  	if (key is Array) {  		Array a = (Array)key;  		int len = a.GetLength (0);  		if (len == 0) {  			jfcmp = new JanusFaceComparer (key);  		}  		else if (len == 1) {  			jfcmp = new JanusFaceComparer (a.GetValue (0));  		}  		else if (len == 2) {  			jfcmp = new JanusFaceKey (a.GetValue (0)' a.GetValue (1));  		}  		else {  			jfcmp = new JanusFaceComparer (key);  		}  	}  	else {  		jfcmp = new JanusFaceComparer (key);  	}  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,GetJanusFaces,The following statement contains a magic number: if (key is Array) {  	Array a = (Array)key;  	int len = a.GetLength (0);  	if (len == 0) {  		jfcmp = new JanusFaceComparer (key);  	}  	else if (len == 1) {  		jfcmp = new JanusFaceComparer (a.GetValue (0));  	}  	else if (len == 2) {  		jfcmp = new JanusFaceKey (a.GetValue (0)' a.GetValue (1));  	}  	else {  		jfcmp = new JanusFaceComparer (key);  	}  }  else {  	jfcmp = new JanusFaceComparer (key);  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,GetJanusFaces,The following statement contains a magic number: if (len == 0) {  	jfcmp = new JanusFaceComparer (key);  }  else if (len == 1) {  	jfcmp = new JanusFaceComparer (a.GetValue (0));  }  else if (len == 2) {  	jfcmp = new JanusFaceKey (a.GetValue (0)' a.GetValue (1));  }  else {  	jfcmp = new JanusFaceComparer (key);  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,GetJanusFaces,The following statement contains a magic number: if (len == 1) {  	jfcmp = new JanusFaceComparer (a.GetValue (0));  }  else if (len == 2) {  	jfcmp = new JanusFaceKey (a.GetValue (0)' a.GetValue (1));  }  else {  	jfcmp = new JanusFaceComparer (key);  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,GetJanusFaces,The following statement contains a magic number: if (len == 2) {  	jfcmp = new JanusFaceKey (a.GetValue (0)' a.GetValue (1));  }  else {  	jfcmp = new JanusFaceComparer (key);  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,GetJanusFaces,The following statement contains a magic number: if (tripples.Count > 4) {  	var cmp = TrippleHashCodeComparer.GetInstance ();  	pos = tripples.BinarySearch (tripple' cmp);  	if (pos > 0) {  		while (pos > 0) {  			if (tripples [pos - 1].HashCode == hashCode) {  				pos--;  			}  			else {  				break;  			}  		}  	}  }  else {  	pos = 0;  	// var cmp = TrippleHashCodeComparer.GetIntComparer();  	while (pos < tripples.Count) {  		var t = tripples [pos];  		if (t.HashCode > hashCode) {  			pos = ~pos;  			break;  		}  		if (t.HashCode == hashCode) {  			break;  		}  		pos++;  	}  	if (pos == tripples.Count) {  		pos = ~pos;  	}  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,GetJanusFaces,The following statement contains a magic number: if (pos < 0) {  	return new object[0];  }  else {  	// firstpos found  	List<object> result = new List<object> ();  	while (pos < tripples.Count) {  		var t = tripples [pos];  		if (t.HashCode == hashCode) {  			var value = t.Value;  			if (value == null) {  				if (oldTripples == null) {  					oldTripples = tripples;  					tripples = new List<Tripple> (tripples);  				}  				tripples.RemoveAt (pos);  				continue;  			}  			if (t.Key.Equals (jfcmp)) {  				result.Add (value);  				pos++;  			}  			else {  				pos++;  			}  		}  		else {  			break;  		}  	}  	if (oldTripples != null) {  		#pragma  		System.Threading.Interlocked.CompareExchange (ref _Tripples' tripples' oldTripples);  		#pragma  	}  	return result.ToArray ();  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,GetJanusFaces,The following statement contains a magic number: if (pos < 0) {  	return new object[0];  }  else {  	// firstpos found  	List<object> result = new List<object> ();  	while (pos < tripples.Count) {  		var t = tripples [pos];  		if (t.HashCode == hashCode) {  			var value = t.Value;  			if (value == null) {  				if (oldTripples == null) {  					oldTripples = tripples;  					tripples = new List<Tripple> (tripples);  				}  				tripples.RemoveAt (pos);  				continue;  			}  			if (t.Key.Equals (jfcmp)) {  				result.Add (value);  				pos++;  			}  			else {  				pos++;  			}  		}  		else {  			break;  		}  	}  	if (oldTripples != null) {  		#pragma  		System.Threading.Interlocked.CompareExchange (ref _Tripples' tripples' oldTripples);  		#pragma  	}  	return result.ToArray ();  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,GetJanusFaces,The following statement contains a magic number: if (oldTripples != null) {  	#pragma  	System.Threading.Interlocked.CompareExchange (ref _Tripples' tripples' oldTripples);  	#pragma  }  
Magic Number,System.ComponentModel,JanusFacesContainer,C:\repos\FlorianGrimm_whid\src\whid\WhidReactive\System\ComponentModel\JanusObject.cs,GetJanusFaces,The following statement contains a magic number: if (oldTripples != null) {  	#pragma  	System.Threading.Interlocked.CompareExchange (ref _Tripples' tripples' oldTripples);  	#pragma  }  
