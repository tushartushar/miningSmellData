Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,HistoricalScheduling,Program,C:\repos\FlorianGrimm_whid\other\rx\Rx\NET\Samples\HistoricalScheduling\HistoricalScheduling\Program.cs,Main,The method has 10 parameters.
Long Statement,HistoricalScheduling,Program,C:\repos\FlorianGrimm_whid\other\rx\Rx\NET\Samples\HistoricalScheduling\HistoricalScheduling\Program.cs,Main,The length of the statement  "		var res3 = Observable.Interval (TimeSpan.FromDays (1)' s).TakeUntil (new DateTimeOffset (2013' 1' 1' 12' 0' 0' TimeSpan.Zero)' s).Select (_ => s.Clock); " is 152.
Magic Number,HistoricalScheduling,Program,C:\repos\FlorianGrimm_whid\other\rx\Rx\NET\Samples\HistoricalScheduling\HistoricalScheduling\Program.cs,Main,The following statement contains a magic number: log.Process ((xs' s) =>  {  	var res0 = xs.Timestamp (s);  	res0.Subscribe (t => Console.WriteLine ("0> " + t));  	var res1 = xs.Where (x => x % 2 != 0).Timestamp (s);  	res1.Subscribe (t => Console.WriteLine ("1> " + t));  	var res2 = xs.Buffer (TimeSpan.FromDays (63)' s).Select (b => b.Count).Timestamp (s);  	res2.Subscribe (t => Console.WriteLine ("2> " + t));  	var res3 = Observable.Interval (TimeSpan.FromDays (1)' s).TakeUntil (new DateTimeOffset (2013' 1' 1' 12' 0' 0' TimeSpan.Zero)' s).Select (_ => s.Clock);  	res3.Subscribe (t =>  {  		Console.ForegroundColor = ConsoleColor.Green;  		Console.WriteLine ("It's now " + t);  		Console.ResetColor ();  	});  	//  	// If the end of the log should cause the scheduler to stop' add the following line:  	//  	// xs.Subscribe(_ => { }' s.Stop);  });  
Magic Number,HistoricalScheduling,Program,C:\repos\FlorianGrimm_whid\other\rx\Rx\NET\Samples\HistoricalScheduling\HistoricalScheduling\Program.cs,Main,The following statement contains a magic number: log.Process ((xs' s) =>  {  	var res0 = xs.Timestamp (s);  	res0.Subscribe (t => Console.WriteLine ("0> " + t));  	var res1 = xs.Where (x => x % 2 != 0).Timestamp (s);  	res1.Subscribe (t => Console.WriteLine ("1> " + t));  	var res2 = xs.Buffer (TimeSpan.FromDays (63)' s).Select (b => b.Count).Timestamp (s);  	res2.Subscribe (t => Console.WriteLine ("2> " + t));  	var res3 = Observable.Interval (TimeSpan.FromDays (1)' s).TakeUntil (new DateTimeOffset (2013' 1' 1' 12' 0' 0' TimeSpan.Zero)' s).Select (_ => s.Clock);  	res3.Subscribe (t =>  {  		Console.ForegroundColor = ConsoleColor.Green;  		Console.WriteLine ("It's now " + t);  		Console.ResetColor ();  	});  	//  	// If the end of the log should cause the scheduler to stop' add the following line:  	//  	// xs.Subscribe(_ => { }' s.Stop);  });  
Magic Number,HistoricalScheduling,Program,C:\repos\FlorianGrimm_whid\other\rx\Rx\NET\Samples\HistoricalScheduling\HistoricalScheduling\Program.cs,Main,The following statement contains a magic number: log.Process ((xs' s) =>  {  	var res0 = xs.Timestamp (s);  	res0.Subscribe (t => Console.WriteLine ("0> " + t));  	var res1 = xs.Where (x => x % 2 != 0).Timestamp (s);  	res1.Subscribe (t => Console.WriteLine ("1> " + t));  	var res2 = xs.Buffer (TimeSpan.FromDays (63)' s).Select (b => b.Count).Timestamp (s);  	res2.Subscribe (t => Console.WriteLine ("2> " + t));  	var res3 = Observable.Interval (TimeSpan.FromDays (1)' s).TakeUntil (new DateTimeOffset (2013' 1' 1' 12' 0' 0' TimeSpan.Zero)' s).Select (_ => s.Clock);  	res3.Subscribe (t =>  {  		Console.ForegroundColor = ConsoleColor.Green;  		Console.WriteLine ("It's now " + t);  		Console.ResetColor ();  	});  	//  	// If the end of the log should cause the scheduler to stop' add the following line:  	//  	// xs.Subscribe(_ => { }' s.Stop);  });  
Magic Number,HistoricalScheduling,Program,C:\repos\FlorianGrimm_whid\other\rx\Rx\NET\Samples\HistoricalScheduling\HistoricalScheduling\Program.cs,Main,The following statement contains a magic number: log.Process ((xs' s) =>  {  	var res0 = xs.Timestamp (s);  	res0.Subscribe (t => Console.WriteLine ("0> " + t));  	var res1 = xs.Where (x => x % 2 != 0).Timestamp (s);  	res1.Subscribe (t => Console.WriteLine ("1> " + t));  	var res2 = xs.Buffer (TimeSpan.FromDays (63)' s).Select (b => b.Count).Timestamp (s);  	res2.Subscribe (t => Console.WriteLine ("2> " + t));  	var res3 = Observable.Interval (TimeSpan.FromDays (1)' s).TakeUntil (new DateTimeOffset (2013' 1' 1' 12' 0' 0' TimeSpan.Zero)' s).Select (_ => s.Clock);  	res3.Subscribe (t =>  {  		Console.ForegroundColor = ConsoleColor.Green;  		Console.WriteLine ("It's now " + t);  		Console.ResetColor ();  	});  	//  	// If the end of the log should cause the scheduler to stop' add the following line:  	//  	// xs.Subscribe(_ => { }' s.Stop);  });  
Magic Number,HistoricalScheduling,Program,C:\repos\FlorianGrimm_whid\other\rx\Rx\NET\Samples\HistoricalScheduling\HistoricalScheduling\Program.cs,GetLog,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	var date = new DateTimeOffset (2012' i' 1' 12' 0' 0' TimeSpan.Zero);  	var value = i * i;  	Console.ForegroundColor = ConsoleColor.Yellow;  	Console.WriteLine ("Log read for {0} - Value = {1}"' date' value);  	Console.ResetColor ();  	yield return new Timestamped<int> (i * i' date);  }  
Magic Number,HistoricalScheduling,Program,C:\repos\FlorianGrimm_whid\other\rx\Rx\NET\Samples\HistoricalScheduling\HistoricalScheduling\Program.cs,GetLog,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	var date = new DateTimeOffset (2012' i' 1' 12' 0' 0' TimeSpan.Zero);  	var value = i * i;  	Console.ForegroundColor = ConsoleColor.Yellow;  	Console.WriteLine ("Log read for {0} - Value = {1}"' date' value);  	Console.ResetColor ();  	yield return new Timestamped<int> (i * i' date);  }  
Magic Number,HistoricalScheduling,Program,C:\repos\FlorianGrimm_whid\other\rx\Rx\NET\Samples\HistoricalScheduling\HistoricalScheduling\Program.cs,GetLog,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	var date = new DateTimeOffset (2012' i' 1' 12' 0' 0' TimeSpan.Zero);  	var value = i * i;  	Console.ForegroundColor = ConsoleColor.Yellow;  	Console.WriteLine ("Log read for {0} - Value = {1}"' date' value);  	Console.ResetColor ();  	yield return new Timestamped<int> (i * i' date);  }  
