Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Performance,TestUtils,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\TestUtils.cs,NormalizeText,Cyclomatic complexity of the method is 15
Long Parameter List,Performance,ScriptEngineManager,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ScriptEngineManager.cs,InitializeScriptEngine,The method has 6 parameters.
Long Parameter List,Performance,TestUtils,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\TestUtils.cs,Benchmark,The method has 6 parameters.
Long Statement,Performance,CodeGenTests,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\CodeGenTests.cs,GetGlobalVariable,The length of the statement  "                      callvirt   System.Object InlineGetPropertyValue(System.String' Int32 ByRef' System.Object ByRef)/Jurassic.Library.ObjectInstance" is 128.
Long Statement,Performance,ScriptEngineManager,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ScriptEngineManager.cs,RunTest,The length of the statement  "	string infoString = string.Format ("{0:n1}ms (parse: {1:n1}ms' compile: {2:n1}ms' optimize: {3:n1}ms' runtime: {4:n1}ms)"' parseTime + optimizationTime + codeGenerationTime + runTime' parseTime' codeGenerationTime' optimizationTime' runTime); " is 242.
Long Statement,Performance,ScriptEngineManager,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ScriptEngineManager.cs,RunTest,The length of the statement  "	Console.WriteLine ("{0}\t{1:n1}\t{2:n1}\t{3:n1}\t{4:n1}\t{5:n1}"' Path.GetFileNameWithoutExtension (scriptPath)' parseTime' codeGenerationTime' optimizationTime' runTime' parseTime + optimizationTime + codeGenerationTime + runTime); " is 232.
Long Statement,Performance,TestUtils,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\TestUtils.cs,Benchmark,The length of the statement  "		throw new AssertInconclusiveException (string.Format ("{0:g3} operations/sec (Â± {1:g2})' was {2}"' 1000.0 / average' (1000.0 / (average - min) - 1000.0 / (average + max)) / 2' previousResult)); " is 193.
Long Statement,Performance,TestUtils,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\TestUtils.cs,Benchmark,The length of the statement  "		//    string outputDir = System.IO.Path.Combine(System.IO.Path.GetDirectoryName(typeof(AssertUtils).Assembly.Location)' @"..\..\..\Performance Tests\"); " is 152.
Long Statement,Performance,TestUtils,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\TestUtils.cs,Benchmark,The length of the statement  "		//    System.IO.File.AppendAllText(outputPath' string.Format("\r\n{0:yyyy'-'MM'-'dd HH':'mm':'ss}'{1:f1}'{2:f1}"' DateTime.Now' average' deviation)); " is 149.
Magic Number,Performance,ArrayBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ArrayBenchmarks.cs,unshift,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	// 2'080'000 inner loops/s  	var engine = new Jurassic.ScriptEngine ();  	var array = engine.Array.New ();  	for (int i = 0; i < 1000; i++)  		Jurassic.Library.ArrayInstance.Unshift (array' i);  });  
Magic Number,Performance,ArrayBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ArrayBenchmarks.cs,unshift,The following statement contains a magic number: for (int i = 0; i < 1000; i++)  	Jurassic.Library.ArrayInstance.Unshift (array' i);  
Magic Number,Performance,ArrayBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ArrayBenchmarks.cs,pop,The following statement contains a magic number: for (int i = 0; i < 1024 * 100; i++)  	Jurassic.Library.ArrayInstance.Push (array' i);  
Magic Number,Performance,ArrayBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ArrayBenchmarks.cs,pop,The following statement contains a magic number: for (int i = 0; i < 1024 * 100; i++)  	Jurassic.Library.ArrayInstance.Push (array' i);  
Magic Number,Performance,ArrayBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ArrayBenchmarks.cs,pop,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	for (int i = 0; i < 1024 * 100; i++)  		array.Pop ();  });  
Magic Number,Performance,ArrayBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ArrayBenchmarks.cs,pop,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	for (int i = 0; i < 1024 * 100; i++)  		array.Pop ();  });  
Magic Number,Performance,ArrayBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ArrayBenchmarks.cs,pop,The following statement contains a magic number: for (int i = 0; i < 1024 * 100; i++)  	array.Pop ();  
Magic Number,Performance,ArrayBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ArrayBenchmarks.cs,pop,The following statement contains a magic number: for (int i = 0; i < 1024 * 100; i++)  	array.Pop ();  
Magic Number,Performance,ArrayBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ArrayBenchmarks.cs,sum,The following statement contains a magic number: for (int i = 0; i < 1024 * 100; i++)  	Jurassic.Library.ArrayInstance.Push (array' i);  
Magic Number,Performance,ArrayBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ArrayBenchmarks.cs,sum,The following statement contains a magic number: for (int i = 0; i < 1024 * 100; i++)  	Jurassic.Library.ArrayInstance.Push (array' i);  
Magic Number,Performance,ArrayBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ArrayBenchmarks.cs,sum,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	int sum = 0;  	for (uint i = 0; i < 1024 * 100; i++)  		sum += (int)array [i];  });  
Magic Number,Performance,ArrayBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ArrayBenchmarks.cs,sum,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	int sum = 0;  	for (uint i = 0; i < 1024 * 100; i++)  		sum += (int)array [i];  });  
Magic Number,Performance,ArrayBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ArrayBenchmarks.cs,sum,The following statement contains a magic number: for (uint i = 0; i < 1024 * 100; i++)  	sum += (int)array [i];  
Magic Number,Performance,ArrayBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ArrayBenchmarks.cs,sum,The following statement contains a magic number: for (uint i = 0; i < 1024 * 100; i++)  	sum += (int)array [i];  
Magic Number,Performance,ArrayBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ArrayBenchmarks.cs,push,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	for (int i = 0; i < 1024 * 100; i++)  		Jurassic.Library.ArrayInstance.Push (array' i);  });  
Magic Number,Performance,ArrayBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ArrayBenchmarks.cs,push,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	for (int i = 0; i < 1024 * 100; i++)  		Jurassic.Library.ArrayInstance.Push (array' i);  });  
Magic Number,Performance,ArrayBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ArrayBenchmarks.cs,push,The following statement contains a magic number: for (int i = 0; i < 1024 * 100; i++)  	Jurassic.Library.ArrayInstance.Push (array' i);  
Magic Number,Performance,ArrayBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ArrayBenchmarks.cs,push,The following statement contains a magic number: for (int i = 0; i < 1024 * 100; i++)  	Jurassic.Library.ArrayInstance.Push (array' i);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumber,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual (1.0' TypeConverter.ToNumber ("1"));  	Assert.AreEqual (16.0' TypeConverter.ToNumber ("16"));  	Assert.AreEqual (32.0' TypeConverter.ToNumber ("32"));  	Assert.AreEqual (100.0' TypeConverter.ToNumber ("100"));  	Assert.AreEqual (1.5' TypeConverter.ToNumber ("1.5"));  	Assert.AreEqual (9.01' TypeConverter.ToNumber ("9.01"));  	Assert.AreEqual (3.141592654' TypeConverter.ToNumber ("3.141592654"));  	Assert.AreEqual (1.2e-15' TypeConverter.ToNumber ("1.2e-15"));  	Assert.AreEqual (0.0000000001234' TypeConverter.ToNumber ("0.0000000001234"));  	Assert.AreEqual (18014398509481990.0' TypeConverter.ToNumber ("18014398509481990"));  }' 30705);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumber,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual (1.0' TypeConverter.ToNumber ("1"));  	Assert.AreEqual (16.0' TypeConverter.ToNumber ("16"));  	Assert.AreEqual (32.0' TypeConverter.ToNumber ("32"));  	Assert.AreEqual (100.0' TypeConverter.ToNumber ("100"));  	Assert.AreEqual (1.5' TypeConverter.ToNumber ("1.5"));  	Assert.AreEqual (9.01' TypeConverter.ToNumber ("9.01"));  	Assert.AreEqual (3.141592654' TypeConverter.ToNumber ("3.141592654"));  	Assert.AreEqual (1.2e-15' TypeConverter.ToNumber ("1.2e-15"));  	Assert.AreEqual (0.0000000001234' TypeConverter.ToNumber ("0.0000000001234"));  	Assert.AreEqual (18014398509481990.0' TypeConverter.ToNumber ("18014398509481990"));  }' 30705);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumber,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual (1.0' TypeConverter.ToNumber ("1"));  	Assert.AreEqual (16.0' TypeConverter.ToNumber ("16"));  	Assert.AreEqual (32.0' TypeConverter.ToNumber ("32"));  	Assert.AreEqual (100.0' TypeConverter.ToNumber ("100"));  	Assert.AreEqual (1.5' TypeConverter.ToNumber ("1.5"));  	Assert.AreEqual (9.01' TypeConverter.ToNumber ("9.01"));  	Assert.AreEqual (3.141592654' TypeConverter.ToNumber ("3.141592654"));  	Assert.AreEqual (1.2e-15' TypeConverter.ToNumber ("1.2e-15"));  	Assert.AreEqual (0.0000000001234' TypeConverter.ToNumber ("0.0000000001234"));  	Assert.AreEqual (18014398509481990.0' TypeConverter.ToNumber ("18014398509481990"));  }' 30705);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumber,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual (1.0' TypeConverter.ToNumber ("1"));  	Assert.AreEqual (16.0' TypeConverter.ToNumber ("16"));  	Assert.AreEqual (32.0' TypeConverter.ToNumber ("32"));  	Assert.AreEqual (100.0' TypeConverter.ToNumber ("100"));  	Assert.AreEqual (1.5' TypeConverter.ToNumber ("1.5"));  	Assert.AreEqual (9.01' TypeConverter.ToNumber ("9.01"));  	Assert.AreEqual (3.141592654' TypeConverter.ToNumber ("3.141592654"));  	Assert.AreEqual (1.2e-15' TypeConverter.ToNumber ("1.2e-15"));  	Assert.AreEqual (0.0000000001234' TypeConverter.ToNumber ("0.0000000001234"));  	Assert.AreEqual (18014398509481990.0' TypeConverter.ToNumber ("18014398509481990"));  }' 30705);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumber,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual (1.0' TypeConverter.ToNumber ("1"));  	Assert.AreEqual (16.0' TypeConverter.ToNumber ("16"));  	Assert.AreEqual (32.0' TypeConverter.ToNumber ("32"));  	Assert.AreEqual (100.0' TypeConverter.ToNumber ("100"));  	Assert.AreEqual (1.5' TypeConverter.ToNumber ("1.5"));  	Assert.AreEqual (9.01' TypeConverter.ToNumber ("9.01"));  	Assert.AreEqual (3.141592654' TypeConverter.ToNumber ("3.141592654"));  	Assert.AreEqual (1.2e-15' TypeConverter.ToNumber ("1.2e-15"));  	Assert.AreEqual (0.0000000001234' TypeConverter.ToNumber ("0.0000000001234"));  	Assert.AreEqual (18014398509481990.0' TypeConverter.ToNumber ("18014398509481990"));  }' 30705);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumber,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual (1.0' TypeConverter.ToNumber ("1"));  	Assert.AreEqual (16.0' TypeConverter.ToNumber ("16"));  	Assert.AreEqual (32.0' TypeConverter.ToNumber ("32"));  	Assert.AreEqual (100.0' TypeConverter.ToNumber ("100"));  	Assert.AreEqual (1.5' TypeConverter.ToNumber ("1.5"));  	Assert.AreEqual (9.01' TypeConverter.ToNumber ("9.01"));  	Assert.AreEqual (3.141592654' TypeConverter.ToNumber ("3.141592654"));  	Assert.AreEqual (1.2e-15' TypeConverter.ToNumber ("1.2e-15"));  	Assert.AreEqual (0.0000000001234' TypeConverter.ToNumber ("0.0000000001234"));  	Assert.AreEqual (18014398509481990.0' TypeConverter.ToNumber ("18014398509481990"));  }' 30705);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumber,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual (1.0' TypeConverter.ToNumber ("1"));  	Assert.AreEqual (16.0' TypeConverter.ToNumber ("16"));  	Assert.AreEqual (32.0' TypeConverter.ToNumber ("32"));  	Assert.AreEqual (100.0' TypeConverter.ToNumber ("100"));  	Assert.AreEqual (1.5' TypeConverter.ToNumber ("1.5"));  	Assert.AreEqual (9.01' TypeConverter.ToNumber ("9.01"));  	Assert.AreEqual (3.141592654' TypeConverter.ToNumber ("3.141592654"));  	Assert.AreEqual (1.2e-15' TypeConverter.ToNumber ("1.2e-15"));  	Assert.AreEqual (0.0000000001234' TypeConverter.ToNumber ("0.0000000001234"));  	Assert.AreEqual (18014398509481990.0' TypeConverter.ToNumber ("18014398509481990"));  }' 30705);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumber,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual (1.0' TypeConverter.ToNumber ("1"));  	Assert.AreEqual (16.0' TypeConverter.ToNumber ("16"));  	Assert.AreEqual (32.0' TypeConverter.ToNumber ("32"));  	Assert.AreEqual (100.0' TypeConverter.ToNumber ("100"));  	Assert.AreEqual (1.5' TypeConverter.ToNumber ("1.5"));  	Assert.AreEqual (9.01' TypeConverter.ToNumber ("9.01"));  	Assert.AreEqual (3.141592654' TypeConverter.ToNumber ("3.141592654"));  	Assert.AreEqual (1.2e-15' TypeConverter.ToNumber ("1.2e-15"));  	Assert.AreEqual (0.0000000001234' TypeConverter.ToNumber ("0.0000000001234"));  	Assert.AreEqual (18014398509481990.0' TypeConverter.ToNumber ("18014398509481990"));  }' 30705);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumber,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual (1.0' TypeConverter.ToNumber ("1"));  	Assert.AreEqual (16.0' TypeConverter.ToNumber ("16"));  	Assert.AreEqual (32.0' TypeConverter.ToNumber ("32"));  	Assert.AreEqual (100.0' TypeConverter.ToNumber ("100"));  	Assert.AreEqual (1.5' TypeConverter.ToNumber ("1.5"));  	Assert.AreEqual (9.01' TypeConverter.ToNumber ("9.01"));  	Assert.AreEqual (3.141592654' TypeConverter.ToNumber ("3.141592654"));  	Assert.AreEqual (1.2e-15' TypeConverter.ToNumber ("1.2e-15"));  	Assert.AreEqual (0.0000000001234' TypeConverter.ToNumber ("0.0000000001234"));  	Assert.AreEqual (18014398509481990.0' TypeConverter.ToNumber ("18014398509481990"));  }' 30705);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumber,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual (1.0' TypeConverter.ToNumber ("1"));  	Assert.AreEqual (16.0' TypeConverter.ToNumber ("16"));  	Assert.AreEqual (32.0' TypeConverter.ToNumber ("32"));  	Assert.AreEqual (100.0' TypeConverter.ToNumber ("100"));  	Assert.AreEqual (1.5' TypeConverter.ToNumber ("1.5"));  	Assert.AreEqual (9.01' TypeConverter.ToNumber ("9.01"));  	Assert.AreEqual (3.141592654' TypeConverter.ToNumber ("3.141592654"));  	Assert.AreEqual (1.2e-15' TypeConverter.ToNumber ("1.2e-15"));  	Assert.AreEqual (0.0000000001234' TypeConverter.ToNumber ("0.0000000001234"));  	Assert.AreEqual (18014398509481990.0' TypeConverter.ToNumber ("18014398509481990"));  }' 30705);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumber,The following statement contains a magic number: Assert.AreEqual (16.0' TypeConverter.ToNumber ("16"));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumber,The following statement contains a magic number: Assert.AreEqual (32.0' TypeConverter.ToNumber ("32"));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumber,The following statement contains a magic number: Assert.AreEqual (100.0' TypeConverter.ToNumber ("100"));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumber,The following statement contains a magic number: Assert.AreEqual (1.5' TypeConverter.ToNumber ("1.5"));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumber,The following statement contains a magic number: Assert.AreEqual (9.01' TypeConverter.ToNumber ("9.01"));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumber,The following statement contains a magic number: Assert.AreEqual (3.141592654' TypeConverter.ToNumber ("3.141592654"));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumber,The following statement contains a magic number: Assert.AreEqual (1.2e-15' TypeConverter.ToNumber ("1.2e-15"));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumber,The following statement contains a magic number: Assert.AreEqual (0.0000000001234' TypeConverter.ToNumber ("0.0000000001234"));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumber,The following statement contains a magic number: Assert.AreEqual (18014398509481990.0' TypeConverter.ToNumber ("18014398509481990"));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumberYardstick,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual (1.0' double.Parse ("1"));  	Assert.AreEqual (16.0' double.Parse ("16"));  	Assert.AreEqual (32.0' double.Parse ("32"));  	Assert.AreEqual (100.0' double.Parse ("100"));  	Assert.AreEqual (1.5' double.Parse ("1.5"));  	Assert.AreEqual (9.01' double.Parse ("9.01"));  	Assert.AreEqual (3.141592654' double.Parse ("3.141592654"));  	Assert.AreEqual (1.2e-15' double.Parse ("1.2e-15"));  	Assert.AreEqual (0.0000000001234' double.Parse ("0.0000000001234"));  	Assert.AreEqual (18014398509481990.0' double.Parse ("18014398509481990"));  }' 96365);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumberYardstick,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual (1.0' double.Parse ("1"));  	Assert.AreEqual (16.0' double.Parse ("16"));  	Assert.AreEqual (32.0' double.Parse ("32"));  	Assert.AreEqual (100.0' double.Parse ("100"));  	Assert.AreEqual (1.5' double.Parse ("1.5"));  	Assert.AreEqual (9.01' double.Parse ("9.01"));  	Assert.AreEqual (3.141592654' double.Parse ("3.141592654"));  	Assert.AreEqual (1.2e-15' double.Parse ("1.2e-15"));  	Assert.AreEqual (0.0000000001234' double.Parse ("0.0000000001234"));  	Assert.AreEqual (18014398509481990.0' double.Parse ("18014398509481990"));  }' 96365);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumberYardstick,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual (1.0' double.Parse ("1"));  	Assert.AreEqual (16.0' double.Parse ("16"));  	Assert.AreEqual (32.0' double.Parse ("32"));  	Assert.AreEqual (100.0' double.Parse ("100"));  	Assert.AreEqual (1.5' double.Parse ("1.5"));  	Assert.AreEqual (9.01' double.Parse ("9.01"));  	Assert.AreEqual (3.141592654' double.Parse ("3.141592654"));  	Assert.AreEqual (1.2e-15' double.Parse ("1.2e-15"));  	Assert.AreEqual (0.0000000001234' double.Parse ("0.0000000001234"));  	Assert.AreEqual (18014398509481990.0' double.Parse ("18014398509481990"));  }' 96365);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumberYardstick,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual (1.0' double.Parse ("1"));  	Assert.AreEqual (16.0' double.Parse ("16"));  	Assert.AreEqual (32.0' double.Parse ("32"));  	Assert.AreEqual (100.0' double.Parse ("100"));  	Assert.AreEqual (1.5' double.Parse ("1.5"));  	Assert.AreEqual (9.01' double.Parse ("9.01"));  	Assert.AreEqual (3.141592654' double.Parse ("3.141592654"));  	Assert.AreEqual (1.2e-15' double.Parse ("1.2e-15"));  	Assert.AreEqual (0.0000000001234' double.Parse ("0.0000000001234"));  	Assert.AreEqual (18014398509481990.0' double.Parse ("18014398509481990"));  }' 96365);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumberYardstick,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual (1.0' double.Parse ("1"));  	Assert.AreEqual (16.0' double.Parse ("16"));  	Assert.AreEqual (32.0' double.Parse ("32"));  	Assert.AreEqual (100.0' double.Parse ("100"));  	Assert.AreEqual (1.5' double.Parse ("1.5"));  	Assert.AreEqual (9.01' double.Parse ("9.01"));  	Assert.AreEqual (3.141592654' double.Parse ("3.141592654"));  	Assert.AreEqual (1.2e-15' double.Parse ("1.2e-15"));  	Assert.AreEqual (0.0000000001234' double.Parse ("0.0000000001234"));  	Assert.AreEqual (18014398509481990.0' double.Parse ("18014398509481990"));  }' 96365);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumberYardstick,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual (1.0' double.Parse ("1"));  	Assert.AreEqual (16.0' double.Parse ("16"));  	Assert.AreEqual (32.0' double.Parse ("32"));  	Assert.AreEqual (100.0' double.Parse ("100"));  	Assert.AreEqual (1.5' double.Parse ("1.5"));  	Assert.AreEqual (9.01' double.Parse ("9.01"));  	Assert.AreEqual (3.141592654' double.Parse ("3.141592654"));  	Assert.AreEqual (1.2e-15' double.Parse ("1.2e-15"));  	Assert.AreEqual (0.0000000001234' double.Parse ("0.0000000001234"));  	Assert.AreEqual (18014398509481990.0' double.Parse ("18014398509481990"));  }' 96365);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumberYardstick,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual (1.0' double.Parse ("1"));  	Assert.AreEqual (16.0' double.Parse ("16"));  	Assert.AreEqual (32.0' double.Parse ("32"));  	Assert.AreEqual (100.0' double.Parse ("100"));  	Assert.AreEqual (1.5' double.Parse ("1.5"));  	Assert.AreEqual (9.01' double.Parse ("9.01"));  	Assert.AreEqual (3.141592654' double.Parse ("3.141592654"));  	Assert.AreEqual (1.2e-15' double.Parse ("1.2e-15"));  	Assert.AreEqual (0.0000000001234' double.Parse ("0.0000000001234"));  	Assert.AreEqual (18014398509481990.0' double.Parse ("18014398509481990"));  }' 96365);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumberYardstick,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual (1.0' double.Parse ("1"));  	Assert.AreEqual (16.0' double.Parse ("16"));  	Assert.AreEqual (32.0' double.Parse ("32"));  	Assert.AreEqual (100.0' double.Parse ("100"));  	Assert.AreEqual (1.5' double.Parse ("1.5"));  	Assert.AreEqual (9.01' double.Parse ("9.01"));  	Assert.AreEqual (3.141592654' double.Parse ("3.141592654"));  	Assert.AreEqual (1.2e-15' double.Parse ("1.2e-15"));  	Assert.AreEqual (0.0000000001234' double.Parse ("0.0000000001234"));  	Assert.AreEqual (18014398509481990.0' double.Parse ("18014398509481990"));  }' 96365);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumberYardstick,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual (1.0' double.Parse ("1"));  	Assert.AreEqual (16.0' double.Parse ("16"));  	Assert.AreEqual (32.0' double.Parse ("32"));  	Assert.AreEqual (100.0' double.Parse ("100"));  	Assert.AreEqual (1.5' double.Parse ("1.5"));  	Assert.AreEqual (9.01' double.Parse ("9.01"));  	Assert.AreEqual (3.141592654' double.Parse ("3.141592654"));  	Assert.AreEqual (1.2e-15' double.Parse ("1.2e-15"));  	Assert.AreEqual (0.0000000001234' double.Parse ("0.0000000001234"));  	Assert.AreEqual (18014398509481990.0' double.Parse ("18014398509481990"));  }' 96365);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumberYardstick,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual (1.0' double.Parse ("1"));  	Assert.AreEqual (16.0' double.Parse ("16"));  	Assert.AreEqual (32.0' double.Parse ("32"));  	Assert.AreEqual (100.0' double.Parse ("100"));  	Assert.AreEqual (1.5' double.Parse ("1.5"));  	Assert.AreEqual (9.01' double.Parse ("9.01"));  	Assert.AreEqual (3.141592654' double.Parse ("3.141592654"));  	Assert.AreEqual (1.2e-15' double.Parse ("1.2e-15"));  	Assert.AreEqual (0.0000000001234' double.Parse ("0.0000000001234"));  	Assert.AreEqual (18014398509481990.0' double.Parse ("18014398509481990"));  }' 96365);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumberYardstick,The following statement contains a magic number: Assert.AreEqual (16.0' double.Parse ("16"));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumberYardstick,The following statement contains a magic number: Assert.AreEqual (32.0' double.Parse ("32"));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumberYardstick,The following statement contains a magic number: Assert.AreEqual (100.0' double.Parse ("100"));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumberYardstick,The following statement contains a magic number: Assert.AreEqual (1.5' double.Parse ("1.5"));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumberYardstick,The following statement contains a magic number: Assert.AreEqual (9.01' double.Parse ("9.01"));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumberYardstick,The following statement contains a magic number: Assert.AreEqual (3.141592654' double.Parse ("3.141592654"));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumberYardstick,The following statement contains a magic number: Assert.AreEqual (1.2e-15' double.Parse ("1.2e-15"));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumberYardstick,The following statement contains a magic number: Assert.AreEqual (0.0000000001234' double.Parse ("0.0000000001234"));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToNumberYardstick,The following statement contains a magic number: Assert.AreEqual (18014398509481990.0' double.Parse ("18014398509481990"));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1"' TypeConverter.ToString (1.0));  	Assert.AreEqual ("16"' TypeConverter.ToString (16.0));  	Assert.AreEqual ("32"' TypeConverter.ToString (32.0));  	Assert.AreEqual ("100"' TypeConverter.ToString (100.0));  	Assert.AreEqual ("65535"' TypeConverter.ToString (65535.0));  	Assert.AreEqual ("65536"' TypeConverter.ToString (65536.0));  	Assert.AreEqual ("123456789"' TypeConverter.ToString (123456789.0));  	Assert.AreEqual ("987654321"' TypeConverter.ToString (987654321.0));  	Assert.AreEqual ("1234567890"' TypeConverter.ToString (1234567890.0));  	Assert.AreEqual ("9876543210"' TypeConverter.ToString (9876543210.0));  }' 99503.7);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1"' TypeConverter.ToString (1.0));  	Assert.AreEqual ("16"' TypeConverter.ToString (16.0));  	Assert.AreEqual ("32"' TypeConverter.ToString (32.0));  	Assert.AreEqual ("100"' TypeConverter.ToString (100.0));  	Assert.AreEqual ("65535"' TypeConverter.ToString (65535.0));  	Assert.AreEqual ("65536"' TypeConverter.ToString (65536.0));  	Assert.AreEqual ("123456789"' TypeConverter.ToString (123456789.0));  	Assert.AreEqual ("987654321"' TypeConverter.ToString (987654321.0));  	Assert.AreEqual ("1234567890"' TypeConverter.ToString (1234567890.0));  	Assert.AreEqual ("9876543210"' TypeConverter.ToString (9876543210.0));  }' 99503.7);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1"' TypeConverter.ToString (1.0));  	Assert.AreEqual ("16"' TypeConverter.ToString (16.0));  	Assert.AreEqual ("32"' TypeConverter.ToString (32.0));  	Assert.AreEqual ("100"' TypeConverter.ToString (100.0));  	Assert.AreEqual ("65535"' TypeConverter.ToString (65535.0));  	Assert.AreEqual ("65536"' TypeConverter.ToString (65536.0));  	Assert.AreEqual ("123456789"' TypeConverter.ToString (123456789.0));  	Assert.AreEqual ("987654321"' TypeConverter.ToString (987654321.0));  	Assert.AreEqual ("1234567890"' TypeConverter.ToString (1234567890.0));  	Assert.AreEqual ("9876543210"' TypeConverter.ToString (9876543210.0));  }' 99503.7);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1"' TypeConverter.ToString (1.0));  	Assert.AreEqual ("16"' TypeConverter.ToString (16.0));  	Assert.AreEqual ("32"' TypeConverter.ToString (32.0));  	Assert.AreEqual ("100"' TypeConverter.ToString (100.0));  	Assert.AreEqual ("65535"' TypeConverter.ToString (65535.0));  	Assert.AreEqual ("65536"' TypeConverter.ToString (65536.0));  	Assert.AreEqual ("123456789"' TypeConverter.ToString (123456789.0));  	Assert.AreEqual ("987654321"' TypeConverter.ToString (987654321.0));  	Assert.AreEqual ("1234567890"' TypeConverter.ToString (1234567890.0));  	Assert.AreEqual ("9876543210"' TypeConverter.ToString (9876543210.0));  }' 99503.7);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1"' TypeConverter.ToString (1.0));  	Assert.AreEqual ("16"' TypeConverter.ToString (16.0));  	Assert.AreEqual ("32"' TypeConverter.ToString (32.0));  	Assert.AreEqual ("100"' TypeConverter.ToString (100.0));  	Assert.AreEqual ("65535"' TypeConverter.ToString (65535.0));  	Assert.AreEqual ("65536"' TypeConverter.ToString (65536.0));  	Assert.AreEqual ("123456789"' TypeConverter.ToString (123456789.0));  	Assert.AreEqual ("987654321"' TypeConverter.ToString (987654321.0));  	Assert.AreEqual ("1234567890"' TypeConverter.ToString (1234567890.0));  	Assert.AreEqual ("9876543210"' TypeConverter.ToString (9876543210.0));  }' 99503.7);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1"' TypeConverter.ToString (1.0));  	Assert.AreEqual ("16"' TypeConverter.ToString (16.0));  	Assert.AreEqual ("32"' TypeConverter.ToString (32.0));  	Assert.AreEqual ("100"' TypeConverter.ToString (100.0));  	Assert.AreEqual ("65535"' TypeConverter.ToString (65535.0));  	Assert.AreEqual ("65536"' TypeConverter.ToString (65536.0));  	Assert.AreEqual ("123456789"' TypeConverter.ToString (123456789.0));  	Assert.AreEqual ("987654321"' TypeConverter.ToString (987654321.0));  	Assert.AreEqual ("1234567890"' TypeConverter.ToString (1234567890.0));  	Assert.AreEqual ("9876543210"' TypeConverter.ToString (9876543210.0));  }' 99503.7);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1"' TypeConverter.ToString (1.0));  	Assert.AreEqual ("16"' TypeConverter.ToString (16.0));  	Assert.AreEqual ("32"' TypeConverter.ToString (32.0));  	Assert.AreEqual ("100"' TypeConverter.ToString (100.0));  	Assert.AreEqual ("65535"' TypeConverter.ToString (65535.0));  	Assert.AreEqual ("65536"' TypeConverter.ToString (65536.0));  	Assert.AreEqual ("123456789"' TypeConverter.ToString (123456789.0));  	Assert.AreEqual ("987654321"' TypeConverter.ToString (987654321.0));  	Assert.AreEqual ("1234567890"' TypeConverter.ToString (1234567890.0));  	Assert.AreEqual ("9876543210"' TypeConverter.ToString (9876543210.0));  }' 99503.7);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1"' TypeConverter.ToString (1.0));  	Assert.AreEqual ("16"' TypeConverter.ToString (16.0));  	Assert.AreEqual ("32"' TypeConverter.ToString (32.0));  	Assert.AreEqual ("100"' TypeConverter.ToString (100.0));  	Assert.AreEqual ("65535"' TypeConverter.ToString (65535.0));  	Assert.AreEqual ("65536"' TypeConverter.ToString (65536.0));  	Assert.AreEqual ("123456789"' TypeConverter.ToString (123456789.0));  	Assert.AreEqual ("987654321"' TypeConverter.ToString (987654321.0));  	Assert.AreEqual ("1234567890"' TypeConverter.ToString (1234567890.0));  	Assert.AreEqual ("9876543210"' TypeConverter.ToString (9876543210.0));  }' 99503.7);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1"' TypeConverter.ToString (1.0));  	Assert.AreEqual ("16"' TypeConverter.ToString (16.0));  	Assert.AreEqual ("32"' TypeConverter.ToString (32.0));  	Assert.AreEqual ("100"' TypeConverter.ToString (100.0));  	Assert.AreEqual ("65535"' TypeConverter.ToString (65535.0));  	Assert.AreEqual ("65536"' TypeConverter.ToString (65536.0));  	Assert.AreEqual ("123456789"' TypeConverter.ToString (123456789.0));  	Assert.AreEqual ("987654321"' TypeConverter.ToString (987654321.0));  	Assert.AreEqual ("1234567890"' TypeConverter.ToString (1234567890.0));  	Assert.AreEqual ("9876543210"' TypeConverter.ToString (9876543210.0));  }' 99503.7);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1"' TypeConverter.ToString (1.0));  	Assert.AreEqual ("16"' TypeConverter.ToString (16.0));  	Assert.AreEqual ("32"' TypeConverter.ToString (32.0));  	Assert.AreEqual ("100"' TypeConverter.ToString (100.0));  	Assert.AreEqual ("65535"' TypeConverter.ToString (65535.0));  	Assert.AreEqual ("65536"' TypeConverter.ToString (65536.0));  	Assert.AreEqual ("123456789"' TypeConverter.ToString (123456789.0));  	Assert.AreEqual ("987654321"' TypeConverter.ToString (987654321.0));  	Assert.AreEqual ("1234567890"' TypeConverter.ToString (1234567890.0));  	Assert.AreEqual ("9876543210"' TypeConverter.ToString (9876543210.0));  }' 99503.7);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1,The following statement contains a magic number: Assert.AreEqual ("16"' TypeConverter.ToString (16.0));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1,The following statement contains a magic number: Assert.AreEqual ("32"' TypeConverter.ToString (32.0));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1,The following statement contains a magic number: Assert.AreEqual ("100"' TypeConverter.ToString (100.0));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1,The following statement contains a magic number: Assert.AreEqual ("65535"' TypeConverter.ToString (65535.0));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1,The following statement contains a magic number: Assert.AreEqual ("65536"' TypeConverter.ToString (65536.0));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1,The following statement contains a magic number: Assert.AreEqual ("123456789"' TypeConverter.ToString (123456789.0));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1,The following statement contains a magic number: Assert.AreEqual ("987654321"' TypeConverter.ToString (987654321.0));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1,The following statement contains a magic number: Assert.AreEqual ("1234567890"' TypeConverter.ToString (1234567890.0));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1,The following statement contains a magic number: Assert.AreEqual ("9876543210"' TypeConverter.ToString (9876543210.0));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1Yardstick,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1"' Convert.ToString (1.0));  	Assert.AreEqual ("16"' Convert.ToString (16.0));  	Assert.AreEqual ("32"' Convert.ToString (32.0));  	Assert.AreEqual ("100"' Convert.ToString (100.0));  	Assert.AreEqual ("65535"' Convert.ToString (65535.0));  	Assert.AreEqual ("65536"' Convert.ToString (65536.0));  	Assert.AreEqual ("123456789"' Convert.ToString (123456789.0));  	Assert.AreEqual ("987654321"' Convert.ToString (987654321.0));  	Assert.AreEqual ("1234567890"' Convert.ToString (1234567890.0));  	Assert.AreEqual ("9876543210"' Convert.ToString (9876543210.0));  }' 45074);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1Yardstick,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1"' Convert.ToString (1.0));  	Assert.AreEqual ("16"' Convert.ToString (16.0));  	Assert.AreEqual ("32"' Convert.ToString (32.0));  	Assert.AreEqual ("100"' Convert.ToString (100.0));  	Assert.AreEqual ("65535"' Convert.ToString (65535.0));  	Assert.AreEqual ("65536"' Convert.ToString (65536.0));  	Assert.AreEqual ("123456789"' Convert.ToString (123456789.0));  	Assert.AreEqual ("987654321"' Convert.ToString (987654321.0));  	Assert.AreEqual ("1234567890"' Convert.ToString (1234567890.0));  	Assert.AreEqual ("9876543210"' Convert.ToString (9876543210.0));  }' 45074);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1Yardstick,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1"' Convert.ToString (1.0));  	Assert.AreEqual ("16"' Convert.ToString (16.0));  	Assert.AreEqual ("32"' Convert.ToString (32.0));  	Assert.AreEqual ("100"' Convert.ToString (100.0));  	Assert.AreEqual ("65535"' Convert.ToString (65535.0));  	Assert.AreEqual ("65536"' Convert.ToString (65536.0));  	Assert.AreEqual ("123456789"' Convert.ToString (123456789.0));  	Assert.AreEqual ("987654321"' Convert.ToString (987654321.0));  	Assert.AreEqual ("1234567890"' Convert.ToString (1234567890.0));  	Assert.AreEqual ("9876543210"' Convert.ToString (9876543210.0));  }' 45074);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1Yardstick,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1"' Convert.ToString (1.0));  	Assert.AreEqual ("16"' Convert.ToString (16.0));  	Assert.AreEqual ("32"' Convert.ToString (32.0));  	Assert.AreEqual ("100"' Convert.ToString (100.0));  	Assert.AreEqual ("65535"' Convert.ToString (65535.0));  	Assert.AreEqual ("65536"' Convert.ToString (65536.0));  	Assert.AreEqual ("123456789"' Convert.ToString (123456789.0));  	Assert.AreEqual ("987654321"' Convert.ToString (987654321.0));  	Assert.AreEqual ("1234567890"' Convert.ToString (1234567890.0));  	Assert.AreEqual ("9876543210"' Convert.ToString (9876543210.0));  }' 45074);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1Yardstick,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1"' Convert.ToString (1.0));  	Assert.AreEqual ("16"' Convert.ToString (16.0));  	Assert.AreEqual ("32"' Convert.ToString (32.0));  	Assert.AreEqual ("100"' Convert.ToString (100.0));  	Assert.AreEqual ("65535"' Convert.ToString (65535.0));  	Assert.AreEqual ("65536"' Convert.ToString (65536.0));  	Assert.AreEqual ("123456789"' Convert.ToString (123456789.0));  	Assert.AreEqual ("987654321"' Convert.ToString (987654321.0));  	Assert.AreEqual ("1234567890"' Convert.ToString (1234567890.0));  	Assert.AreEqual ("9876543210"' Convert.ToString (9876543210.0));  }' 45074);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1Yardstick,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1"' Convert.ToString (1.0));  	Assert.AreEqual ("16"' Convert.ToString (16.0));  	Assert.AreEqual ("32"' Convert.ToString (32.0));  	Assert.AreEqual ("100"' Convert.ToString (100.0));  	Assert.AreEqual ("65535"' Convert.ToString (65535.0));  	Assert.AreEqual ("65536"' Convert.ToString (65536.0));  	Assert.AreEqual ("123456789"' Convert.ToString (123456789.0));  	Assert.AreEqual ("987654321"' Convert.ToString (987654321.0));  	Assert.AreEqual ("1234567890"' Convert.ToString (1234567890.0));  	Assert.AreEqual ("9876543210"' Convert.ToString (9876543210.0));  }' 45074);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1Yardstick,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1"' Convert.ToString (1.0));  	Assert.AreEqual ("16"' Convert.ToString (16.0));  	Assert.AreEqual ("32"' Convert.ToString (32.0));  	Assert.AreEqual ("100"' Convert.ToString (100.0));  	Assert.AreEqual ("65535"' Convert.ToString (65535.0));  	Assert.AreEqual ("65536"' Convert.ToString (65536.0));  	Assert.AreEqual ("123456789"' Convert.ToString (123456789.0));  	Assert.AreEqual ("987654321"' Convert.ToString (987654321.0));  	Assert.AreEqual ("1234567890"' Convert.ToString (1234567890.0));  	Assert.AreEqual ("9876543210"' Convert.ToString (9876543210.0));  }' 45074);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1Yardstick,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1"' Convert.ToString (1.0));  	Assert.AreEqual ("16"' Convert.ToString (16.0));  	Assert.AreEqual ("32"' Convert.ToString (32.0));  	Assert.AreEqual ("100"' Convert.ToString (100.0));  	Assert.AreEqual ("65535"' Convert.ToString (65535.0));  	Assert.AreEqual ("65536"' Convert.ToString (65536.0));  	Assert.AreEqual ("123456789"' Convert.ToString (123456789.0));  	Assert.AreEqual ("987654321"' Convert.ToString (987654321.0));  	Assert.AreEqual ("1234567890"' Convert.ToString (1234567890.0));  	Assert.AreEqual ("9876543210"' Convert.ToString (9876543210.0));  }' 45074);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1Yardstick,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1"' Convert.ToString (1.0));  	Assert.AreEqual ("16"' Convert.ToString (16.0));  	Assert.AreEqual ("32"' Convert.ToString (32.0));  	Assert.AreEqual ("100"' Convert.ToString (100.0));  	Assert.AreEqual ("65535"' Convert.ToString (65535.0));  	Assert.AreEqual ("65536"' Convert.ToString (65536.0));  	Assert.AreEqual ("123456789"' Convert.ToString (123456789.0));  	Assert.AreEqual ("987654321"' Convert.ToString (987654321.0));  	Assert.AreEqual ("1234567890"' Convert.ToString (1234567890.0));  	Assert.AreEqual ("9876543210"' Convert.ToString (9876543210.0));  }' 45074);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1Yardstick,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1"' Convert.ToString (1.0));  	Assert.AreEqual ("16"' Convert.ToString (16.0));  	Assert.AreEqual ("32"' Convert.ToString (32.0));  	Assert.AreEqual ("100"' Convert.ToString (100.0));  	Assert.AreEqual ("65535"' Convert.ToString (65535.0));  	Assert.AreEqual ("65536"' Convert.ToString (65536.0));  	Assert.AreEqual ("123456789"' Convert.ToString (123456789.0));  	Assert.AreEqual ("987654321"' Convert.ToString (987654321.0));  	Assert.AreEqual ("1234567890"' Convert.ToString (1234567890.0));  	Assert.AreEqual ("9876543210"' Convert.ToString (9876543210.0));  }' 45074);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1Yardstick,The following statement contains a magic number: Assert.AreEqual ("16"' Convert.ToString (16.0));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1Yardstick,The following statement contains a magic number: Assert.AreEqual ("32"' Convert.ToString (32.0));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1Yardstick,The following statement contains a magic number: Assert.AreEqual ("100"' Convert.ToString (100.0));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1Yardstick,The following statement contains a magic number: Assert.AreEqual ("65535"' Convert.ToString (65535.0));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1Yardstick,The following statement contains a magic number: Assert.AreEqual ("65536"' Convert.ToString (65536.0));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1Yardstick,The following statement contains a magic number: Assert.AreEqual ("123456789"' Convert.ToString (123456789.0));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1Yardstick,The following statement contains a magic number: Assert.AreEqual ("987654321"' Convert.ToString (987654321.0));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1Yardstick,The following statement contains a magic number: Assert.AreEqual ("1234567890"' Convert.ToString (1234567890.0));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString1Yardstick,The following statement contains a magic number: Assert.AreEqual ("9876543210"' Convert.ToString (9876543210.0));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1.5"' TypeConverter.ToString (1.5));  	Assert.AreEqual ("0.000123"' TypeConverter.ToString (0.000123));  	Assert.AreEqual ("9.01"' TypeConverter.ToString (9.01));  	Assert.AreEqual ("3.141592654"' TypeConverter.ToString (3.141592654));  	Assert.AreEqual ("1.2e-15"' TypeConverter.ToString (1.2e-15));  	Assert.AreEqual ("1.234e-10"' TypeConverter.ToString (0.0000000001234));  	Assert.AreEqual ("18014398509481990"' TypeConverter.ToString (18014398509481990.0));  	Assert.AreEqual ("8.1234e+99"' TypeConverter.ToString (8.1234e99));  	Assert.AreEqual ("5.01e-320"' TypeConverter.ToString (5.01e-320));  	Assert.AreEqual ("1.23456789e+308"' TypeConverter.ToString (1.23456789e308));  }' 19933);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1.5"' TypeConverter.ToString (1.5));  	Assert.AreEqual ("0.000123"' TypeConverter.ToString (0.000123));  	Assert.AreEqual ("9.01"' TypeConverter.ToString (9.01));  	Assert.AreEqual ("3.141592654"' TypeConverter.ToString (3.141592654));  	Assert.AreEqual ("1.2e-15"' TypeConverter.ToString (1.2e-15));  	Assert.AreEqual ("1.234e-10"' TypeConverter.ToString (0.0000000001234));  	Assert.AreEqual ("18014398509481990"' TypeConverter.ToString (18014398509481990.0));  	Assert.AreEqual ("8.1234e+99"' TypeConverter.ToString (8.1234e99));  	Assert.AreEqual ("5.01e-320"' TypeConverter.ToString (5.01e-320));  	Assert.AreEqual ("1.23456789e+308"' TypeConverter.ToString (1.23456789e308));  }' 19933);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1.5"' TypeConverter.ToString (1.5));  	Assert.AreEqual ("0.000123"' TypeConverter.ToString (0.000123));  	Assert.AreEqual ("9.01"' TypeConverter.ToString (9.01));  	Assert.AreEqual ("3.141592654"' TypeConverter.ToString (3.141592654));  	Assert.AreEqual ("1.2e-15"' TypeConverter.ToString (1.2e-15));  	Assert.AreEqual ("1.234e-10"' TypeConverter.ToString (0.0000000001234));  	Assert.AreEqual ("18014398509481990"' TypeConverter.ToString (18014398509481990.0));  	Assert.AreEqual ("8.1234e+99"' TypeConverter.ToString (8.1234e99));  	Assert.AreEqual ("5.01e-320"' TypeConverter.ToString (5.01e-320));  	Assert.AreEqual ("1.23456789e+308"' TypeConverter.ToString (1.23456789e308));  }' 19933);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1.5"' TypeConverter.ToString (1.5));  	Assert.AreEqual ("0.000123"' TypeConverter.ToString (0.000123));  	Assert.AreEqual ("9.01"' TypeConverter.ToString (9.01));  	Assert.AreEqual ("3.141592654"' TypeConverter.ToString (3.141592654));  	Assert.AreEqual ("1.2e-15"' TypeConverter.ToString (1.2e-15));  	Assert.AreEqual ("1.234e-10"' TypeConverter.ToString (0.0000000001234));  	Assert.AreEqual ("18014398509481990"' TypeConverter.ToString (18014398509481990.0));  	Assert.AreEqual ("8.1234e+99"' TypeConverter.ToString (8.1234e99));  	Assert.AreEqual ("5.01e-320"' TypeConverter.ToString (5.01e-320));  	Assert.AreEqual ("1.23456789e+308"' TypeConverter.ToString (1.23456789e308));  }' 19933);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1.5"' TypeConverter.ToString (1.5));  	Assert.AreEqual ("0.000123"' TypeConverter.ToString (0.000123));  	Assert.AreEqual ("9.01"' TypeConverter.ToString (9.01));  	Assert.AreEqual ("3.141592654"' TypeConverter.ToString (3.141592654));  	Assert.AreEqual ("1.2e-15"' TypeConverter.ToString (1.2e-15));  	Assert.AreEqual ("1.234e-10"' TypeConverter.ToString (0.0000000001234));  	Assert.AreEqual ("18014398509481990"' TypeConverter.ToString (18014398509481990.0));  	Assert.AreEqual ("8.1234e+99"' TypeConverter.ToString (8.1234e99));  	Assert.AreEqual ("5.01e-320"' TypeConverter.ToString (5.01e-320));  	Assert.AreEqual ("1.23456789e+308"' TypeConverter.ToString (1.23456789e308));  }' 19933);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1.5"' TypeConverter.ToString (1.5));  	Assert.AreEqual ("0.000123"' TypeConverter.ToString (0.000123));  	Assert.AreEqual ("9.01"' TypeConverter.ToString (9.01));  	Assert.AreEqual ("3.141592654"' TypeConverter.ToString (3.141592654));  	Assert.AreEqual ("1.2e-15"' TypeConverter.ToString (1.2e-15));  	Assert.AreEqual ("1.234e-10"' TypeConverter.ToString (0.0000000001234));  	Assert.AreEqual ("18014398509481990"' TypeConverter.ToString (18014398509481990.0));  	Assert.AreEqual ("8.1234e+99"' TypeConverter.ToString (8.1234e99));  	Assert.AreEqual ("5.01e-320"' TypeConverter.ToString (5.01e-320));  	Assert.AreEqual ("1.23456789e+308"' TypeConverter.ToString (1.23456789e308));  }' 19933);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1.5"' TypeConverter.ToString (1.5));  	Assert.AreEqual ("0.000123"' TypeConverter.ToString (0.000123));  	Assert.AreEqual ("9.01"' TypeConverter.ToString (9.01));  	Assert.AreEqual ("3.141592654"' TypeConverter.ToString (3.141592654));  	Assert.AreEqual ("1.2e-15"' TypeConverter.ToString (1.2e-15));  	Assert.AreEqual ("1.234e-10"' TypeConverter.ToString (0.0000000001234));  	Assert.AreEqual ("18014398509481990"' TypeConverter.ToString (18014398509481990.0));  	Assert.AreEqual ("8.1234e+99"' TypeConverter.ToString (8.1234e99));  	Assert.AreEqual ("5.01e-320"' TypeConverter.ToString (5.01e-320));  	Assert.AreEqual ("1.23456789e+308"' TypeConverter.ToString (1.23456789e308));  }' 19933);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1.5"' TypeConverter.ToString (1.5));  	Assert.AreEqual ("0.000123"' TypeConverter.ToString (0.000123));  	Assert.AreEqual ("9.01"' TypeConverter.ToString (9.01));  	Assert.AreEqual ("3.141592654"' TypeConverter.ToString (3.141592654));  	Assert.AreEqual ("1.2e-15"' TypeConverter.ToString (1.2e-15));  	Assert.AreEqual ("1.234e-10"' TypeConverter.ToString (0.0000000001234));  	Assert.AreEqual ("18014398509481990"' TypeConverter.ToString (18014398509481990.0));  	Assert.AreEqual ("8.1234e+99"' TypeConverter.ToString (8.1234e99));  	Assert.AreEqual ("5.01e-320"' TypeConverter.ToString (5.01e-320));  	Assert.AreEqual ("1.23456789e+308"' TypeConverter.ToString (1.23456789e308));  }' 19933);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1.5"' TypeConverter.ToString (1.5));  	Assert.AreEqual ("0.000123"' TypeConverter.ToString (0.000123));  	Assert.AreEqual ("9.01"' TypeConverter.ToString (9.01));  	Assert.AreEqual ("3.141592654"' TypeConverter.ToString (3.141592654));  	Assert.AreEqual ("1.2e-15"' TypeConverter.ToString (1.2e-15));  	Assert.AreEqual ("1.234e-10"' TypeConverter.ToString (0.0000000001234));  	Assert.AreEqual ("18014398509481990"' TypeConverter.ToString (18014398509481990.0));  	Assert.AreEqual ("8.1234e+99"' TypeConverter.ToString (8.1234e99));  	Assert.AreEqual ("5.01e-320"' TypeConverter.ToString (5.01e-320));  	Assert.AreEqual ("1.23456789e+308"' TypeConverter.ToString (1.23456789e308));  }' 19933);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1.5"' TypeConverter.ToString (1.5));  	Assert.AreEqual ("0.000123"' TypeConverter.ToString (0.000123));  	Assert.AreEqual ("9.01"' TypeConverter.ToString (9.01));  	Assert.AreEqual ("3.141592654"' TypeConverter.ToString (3.141592654));  	Assert.AreEqual ("1.2e-15"' TypeConverter.ToString (1.2e-15));  	Assert.AreEqual ("1.234e-10"' TypeConverter.ToString (0.0000000001234));  	Assert.AreEqual ("18014398509481990"' TypeConverter.ToString (18014398509481990.0));  	Assert.AreEqual ("8.1234e+99"' TypeConverter.ToString (8.1234e99));  	Assert.AreEqual ("5.01e-320"' TypeConverter.ToString (5.01e-320));  	Assert.AreEqual ("1.23456789e+308"' TypeConverter.ToString (1.23456789e308));  }' 19933);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1.5"' TypeConverter.ToString (1.5));  	Assert.AreEqual ("0.000123"' TypeConverter.ToString (0.000123));  	Assert.AreEqual ("9.01"' TypeConverter.ToString (9.01));  	Assert.AreEqual ("3.141592654"' TypeConverter.ToString (3.141592654));  	Assert.AreEqual ("1.2e-15"' TypeConverter.ToString (1.2e-15));  	Assert.AreEqual ("1.234e-10"' TypeConverter.ToString (0.0000000001234));  	Assert.AreEqual ("18014398509481990"' TypeConverter.ToString (18014398509481990.0));  	Assert.AreEqual ("8.1234e+99"' TypeConverter.ToString (8.1234e99));  	Assert.AreEqual ("5.01e-320"' TypeConverter.ToString (5.01e-320));  	Assert.AreEqual ("1.23456789e+308"' TypeConverter.ToString (1.23456789e308));  }' 19933);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2,The following statement contains a magic number: Assert.AreEqual ("1.5"' TypeConverter.ToString (1.5));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2,The following statement contains a magic number: Assert.AreEqual ("0.000123"' TypeConverter.ToString (0.000123));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2,The following statement contains a magic number: Assert.AreEqual ("9.01"' TypeConverter.ToString (9.01));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2,The following statement contains a magic number: Assert.AreEqual ("3.141592654"' TypeConverter.ToString (3.141592654));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2,The following statement contains a magic number: Assert.AreEqual ("1.2e-15"' TypeConverter.ToString (1.2e-15));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2,The following statement contains a magic number: Assert.AreEqual ("1.234e-10"' TypeConverter.ToString (0.0000000001234));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2,The following statement contains a magic number: Assert.AreEqual ("18014398509481990"' TypeConverter.ToString (18014398509481990.0));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2,The following statement contains a magic number: Assert.AreEqual ("8.1234e+99"' TypeConverter.ToString (8.1234e99));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2,The following statement contains a magic number: Assert.AreEqual ("5.01e-320"' TypeConverter.ToString (5.01e-320));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2,The following statement contains a magic number: Assert.AreEqual ("1.23456789e+308"' TypeConverter.ToString (1.23456789e308));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2Yardstick,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1.5"' Convert.ToString (1.5));  	Assert.AreEqual ("0.000123"' Convert.ToString (0.000123));  	Assert.AreEqual ("9.01"' Convert.ToString (9.01));  	Assert.AreEqual ("3.141592654"' Convert.ToString (3.141592654));  	Assert.AreEqual ("1.2E-15"' Convert.ToString (1.2e-15));  	Assert.AreEqual ("1.234E-10"' Convert.ToString (0.0000000001234));  	Assert.AreEqual ("1.8014398509482E+16"' Convert.ToString (18014398509481990.0));  	Assert.AreEqual ("8.1234E+99"' Convert.ToString (8.1234e99));  	Assert.AreEqual ("5.00982564883024E-320"' Convert.ToString (5.01e-320));  	Assert.AreEqual ("1.23456789E+308"' Convert.ToString (1.23456789e308));  }' 40278);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2Yardstick,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1.5"' Convert.ToString (1.5));  	Assert.AreEqual ("0.000123"' Convert.ToString (0.000123));  	Assert.AreEqual ("9.01"' Convert.ToString (9.01));  	Assert.AreEqual ("3.141592654"' Convert.ToString (3.141592654));  	Assert.AreEqual ("1.2E-15"' Convert.ToString (1.2e-15));  	Assert.AreEqual ("1.234E-10"' Convert.ToString (0.0000000001234));  	Assert.AreEqual ("1.8014398509482E+16"' Convert.ToString (18014398509481990.0));  	Assert.AreEqual ("8.1234E+99"' Convert.ToString (8.1234e99));  	Assert.AreEqual ("5.00982564883024E-320"' Convert.ToString (5.01e-320));  	Assert.AreEqual ("1.23456789E+308"' Convert.ToString (1.23456789e308));  }' 40278);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2Yardstick,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1.5"' Convert.ToString (1.5));  	Assert.AreEqual ("0.000123"' Convert.ToString (0.000123));  	Assert.AreEqual ("9.01"' Convert.ToString (9.01));  	Assert.AreEqual ("3.141592654"' Convert.ToString (3.141592654));  	Assert.AreEqual ("1.2E-15"' Convert.ToString (1.2e-15));  	Assert.AreEqual ("1.234E-10"' Convert.ToString (0.0000000001234));  	Assert.AreEqual ("1.8014398509482E+16"' Convert.ToString (18014398509481990.0));  	Assert.AreEqual ("8.1234E+99"' Convert.ToString (8.1234e99));  	Assert.AreEqual ("5.00982564883024E-320"' Convert.ToString (5.01e-320));  	Assert.AreEqual ("1.23456789E+308"' Convert.ToString (1.23456789e308));  }' 40278);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2Yardstick,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1.5"' Convert.ToString (1.5));  	Assert.AreEqual ("0.000123"' Convert.ToString (0.000123));  	Assert.AreEqual ("9.01"' Convert.ToString (9.01));  	Assert.AreEqual ("3.141592654"' Convert.ToString (3.141592654));  	Assert.AreEqual ("1.2E-15"' Convert.ToString (1.2e-15));  	Assert.AreEqual ("1.234E-10"' Convert.ToString (0.0000000001234));  	Assert.AreEqual ("1.8014398509482E+16"' Convert.ToString (18014398509481990.0));  	Assert.AreEqual ("8.1234E+99"' Convert.ToString (8.1234e99));  	Assert.AreEqual ("5.00982564883024E-320"' Convert.ToString (5.01e-320));  	Assert.AreEqual ("1.23456789E+308"' Convert.ToString (1.23456789e308));  }' 40278);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2Yardstick,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1.5"' Convert.ToString (1.5));  	Assert.AreEqual ("0.000123"' Convert.ToString (0.000123));  	Assert.AreEqual ("9.01"' Convert.ToString (9.01));  	Assert.AreEqual ("3.141592654"' Convert.ToString (3.141592654));  	Assert.AreEqual ("1.2E-15"' Convert.ToString (1.2e-15));  	Assert.AreEqual ("1.234E-10"' Convert.ToString (0.0000000001234));  	Assert.AreEqual ("1.8014398509482E+16"' Convert.ToString (18014398509481990.0));  	Assert.AreEqual ("8.1234E+99"' Convert.ToString (8.1234e99));  	Assert.AreEqual ("5.00982564883024E-320"' Convert.ToString (5.01e-320));  	Assert.AreEqual ("1.23456789E+308"' Convert.ToString (1.23456789e308));  }' 40278);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2Yardstick,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1.5"' Convert.ToString (1.5));  	Assert.AreEqual ("0.000123"' Convert.ToString (0.000123));  	Assert.AreEqual ("9.01"' Convert.ToString (9.01));  	Assert.AreEqual ("3.141592654"' Convert.ToString (3.141592654));  	Assert.AreEqual ("1.2E-15"' Convert.ToString (1.2e-15));  	Assert.AreEqual ("1.234E-10"' Convert.ToString (0.0000000001234));  	Assert.AreEqual ("1.8014398509482E+16"' Convert.ToString (18014398509481990.0));  	Assert.AreEqual ("8.1234E+99"' Convert.ToString (8.1234e99));  	Assert.AreEqual ("5.00982564883024E-320"' Convert.ToString (5.01e-320));  	Assert.AreEqual ("1.23456789E+308"' Convert.ToString (1.23456789e308));  }' 40278);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2Yardstick,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1.5"' Convert.ToString (1.5));  	Assert.AreEqual ("0.000123"' Convert.ToString (0.000123));  	Assert.AreEqual ("9.01"' Convert.ToString (9.01));  	Assert.AreEqual ("3.141592654"' Convert.ToString (3.141592654));  	Assert.AreEqual ("1.2E-15"' Convert.ToString (1.2e-15));  	Assert.AreEqual ("1.234E-10"' Convert.ToString (0.0000000001234));  	Assert.AreEqual ("1.8014398509482E+16"' Convert.ToString (18014398509481990.0));  	Assert.AreEqual ("8.1234E+99"' Convert.ToString (8.1234e99));  	Assert.AreEqual ("5.00982564883024E-320"' Convert.ToString (5.01e-320));  	Assert.AreEqual ("1.23456789E+308"' Convert.ToString (1.23456789e308));  }' 40278);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2Yardstick,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1.5"' Convert.ToString (1.5));  	Assert.AreEqual ("0.000123"' Convert.ToString (0.000123));  	Assert.AreEqual ("9.01"' Convert.ToString (9.01));  	Assert.AreEqual ("3.141592654"' Convert.ToString (3.141592654));  	Assert.AreEqual ("1.2E-15"' Convert.ToString (1.2e-15));  	Assert.AreEqual ("1.234E-10"' Convert.ToString (0.0000000001234));  	Assert.AreEqual ("1.8014398509482E+16"' Convert.ToString (18014398509481990.0));  	Assert.AreEqual ("8.1234E+99"' Convert.ToString (8.1234e99));  	Assert.AreEqual ("5.00982564883024E-320"' Convert.ToString (5.01e-320));  	Assert.AreEqual ("1.23456789E+308"' Convert.ToString (1.23456789e308));  }' 40278);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2Yardstick,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1.5"' Convert.ToString (1.5));  	Assert.AreEqual ("0.000123"' Convert.ToString (0.000123));  	Assert.AreEqual ("9.01"' Convert.ToString (9.01));  	Assert.AreEqual ("3.141592654"' Convert.ToString (3.141592654));  	Assert.AreEqual ("1.2E-15"' Convert.ToString (1.2e-15));  	Assert.AreEqual ("1.234E-10"' Convert.ToString (0.0000000001234));  	Assert.AreEqual ("1.8014398509482E+16"' Convert.ToString (18014398509481990.0));  	Assert.AreEqual ("8.1234E+99"' Convert.ToString (8.1234e99));  	Assert.AreEqual ("5.00982564883024E-320"' Convert.ToString (5.01e-320));  	Assert.AreEqual ("1.23456789E+308"' Convert.ToString (1.23456789e308));  }' 40278);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2Yardstick,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1.5"' Convert.ToString (1.5));  	Assert.AreEqual ("0.000123"' Convert.ToString (0.000123));  	Assert.AreEqual ("9.01"' Convert.ToString (9.01));  	Assert.AreEqual ("3.141592654"' Convert.ToString (3.141592654));  	Assert.AreEqual ("1.2E-15"' Convert.ToString (1.2e-15));  	Assert.AreEqual ("1.234E-10"' Convert.ToString (0.0000000001234));  	Assert.AreEqual ("1.8014398509482E+16"' Convert.ToString (18014398509481990.0));  	Assert.AreEqual ("8.1234E+99"' Convert.ToString (8.1234e99));  	Assert.AreEqual ("5.00982564883024E-320"' Convert.ToString (5.01e-320));  	Assert.AreEqual ("1.23456789E+308"' Convert.ToString (1.23456789e308));  }' 40278);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2Yardstick,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	Assert.AreEqual ("1.5"' Convert.ToString (1.5));  	Assert.AreEqual ("0.000123"' Convert.ToString (0.000123));  	Assert.AreEqual ("9.01"' Convert.ToString (9.01));  	Assert.AreEqual ("3.141592654"' Convert.ToString (3.141592654));  	Assert.AreEqual ("1.2E-15"' Convert.ToString (1.2e-15));  	Assert.AreEqual ("1.234E-10"' Convert.ToString (0.0000000001234));  	Assert.AreEqual ("1.8014398509482E+16"' Convert.ToString (18014398509481990.0));  	Assert.AreEqual ("8.1234E+99"' Convert.ToString (8.1234e99));  	Assert.AreEqual ("5.00982564883024E-320"' Convert.ToString (5.01e-320));  	Assert.AreEqual ("1.23456789E+308"' Convert.ToString (1.23456789e308));  }' 40278);  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2Yardstick,The following statement contains a magic number: Assert.AreEqual ("1.5"' Convert.ToString (1.5));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2Yardstick,The following statement contains a magic number: Assert.AreEqual ("0.000123"' Convert.ToString (0.000123));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2Yardstick,The following statement contains a magic number: Assert.AreEqual ("9.01"' Convert.ToString (9.01));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2Yardstick,The following statement contains a magic number: Assert.AreEqual ("3.141592654"' Convert.ToString (3.141592654));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2Yardstick,The following statement contains a magic number: Assert.AreEqual ("1.2E-15"' Convert.ToString (1.2e-15));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2Yardstick,The following statement contains a magic number: Assert.AreEqual ("1.234E-10"' Convert.ToString (0.0000000001234));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2Yardstick,The following statement contains a magic number: Assert.AreEqual ("1.8014398509482E+16"' Convert.ToString (18014398509481990.0));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2Yardstick,The following statement contains a magic number: Assert.AreEqual ("8.1234E+99"' Convert.ToString (8.1234e99));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2Yardstick,The following statement contains a magic number: Assert.AreEqual ("5.00982564883024E-320"' Convert.ToString (5.01e-320));  
Magic Number,Performance,ConversionBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ConversionBenchmarks.cs,ToString2Yardstick,The following statement contains a magic number: Assert.AreEqual ("1.23456789E+308"' Convert.ToString (1.23456789e308));  
Magic Number,Performance,ParserBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\ParserBenchmarks.cs,CoffeeScript,The following statement contains a magic number: TestUtils.Benchmark (script' 0.929);  
Magic Number,Performance,v8,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\v8.cs,crypto,The following statement contains a magic number: manager.RunTest ("crypto.js"' 27308.3);  
Magic Number,Performance,v8,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\v8.cs,deltablue,The following statement contains a magic number: manager.RunTest ("deltablue.js"' 352.3);  
Magic Number,Performance,v8,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\v8.cs,earley_boyer,The following statement contains a magic number: try {  	manager.RunTest ("earley-boyer.js"' 27067);  }  finally {  	manager.ScriptEngine.CompatibilityMode = Jurassic.CompatibilityMode.Latest;  }  
Magic Number,Performance,v8,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\v8.cs,earley_boyer,The following statement contains a magic number: manager.RunTest ("earley-boyer.js"' 27067);  
Magic Number,Performance,v8,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\v8.cs,raytrace,The following statement contains a magic number: manager.RunTest ("raytrace.js"' 2345);  
Magic Number,Performance,v8,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\v8.cs,regexp,The following statement contains a magic number: manager.RunTest ("regexp.js"' 3294);  
Magic Number,Performance,v8,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\v8.cs,richards,The following statement contains a magic number: manager.RunTest ("richards.js"' 298.7);  
Magic Number,Performance,v8,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\v8.cs,splay,The following statement contains a magic number: manager.RunTest (@"splay.js"' 6873);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,BitwiseAnd,The following statement contains a magic number: TestUtils.Benchmark (@"                 function f() {                     var x = 0;                     for (var i = 0; i < 100000; i++)                         x = x & i                 }                 f()                 "' 470);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,BitwiseOr,The following statement contains a magic number: TestUtils.Benchmark (@"                 function f() {                     var x = 0;                     for (var i = 0; i < 100000; i++)                         x = x | i                 }                 f();                 "' 440);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,BitwiseXor,The following statement contains a magic number: TestUtils.Benchmark (@"                 function f() {                     var x = 0;                     for (var i = 0; i < 100000; i++)                         x = x ^ i                 }                 f();                 "' 474);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,AddNumber,The following statement contains a magic number: TestUtils.Benchmark (@"                 function f() {                     var x = 0;                     for (var i = 0; i < 100000; i++)                         x = x + i                 }                 f();                 "' 155);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,AddString1,The following statement contains a magic number: TestUtils.Benchmark (@"                 function f() {                     var x = '';                     for (var i = 0; i < 100000; i++)                         x = x + i                 }                 f();                 "' 42.4);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,AddString2,The following statement contains a magic number: TestUtils.Benchmark (@"                 function f() {                     var x = '';                     for (var i = 0; i < 100000; i++)                         x += i                 }                 f();                 "' 42.4);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,AddString3,The following statement contains a magic number: TestUtils.Benchmark (@"                 function f() {                     var x = '';                     for (var i = 0; i < 100000; i++)                         x = x + '<' + i + '>'                 }                 f();                 "' 34.4);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,Subtract,The following statement contains a magic number: TestUtils.Benchmark (@"                 function f() {                     var x = 0;                     for (var i = 0; i < 100000; i++)                         x = x - i                 }                 f();                 "' 407);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,Multiply,The following statement contains a magic number: TestUtils.Benchmark (@"                 function f() {                     var x = 0;                     for (var i = 0; i < 100000; i++)                         x = x * i                 }                 f();                 "' 409);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,Divide,The following statement contains a magic number: TestUtils.Benchmark (@"                 function f() {                     var x = 0;                     for (var i = 1; i < 100000; i++)                         x = x / i                 }                 f();                 "' 360);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,Modulo,The following statement contains a magic number: TestUtils.Benchmark (@"                 function f() {                     var x = 0;                     for (var i = 1; i < 100000; i++)                         x = x % i                 }                 f();                 "' 212);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,LeftShift,The following statement contains a magic number: TestUtils.Benchmark (@"                 function f() {                     var x = 0;                     for (var i = 0; i < 100000; i++)                         x = x << i                 }                 f();                 "' 430);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,SignedRightShift,The following statement contains a magic number: TestUtils.Benchmark (@"                 function f() {                     var x = 0;                     for (var i = 0; i < 100000; i++)                         x = x >> i                 }                 f();                 "' 423);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,UnsignedRightShift,The following statement contains a magic number: TestUtils.Benchmark (@"                 function f() {                     var x = 0;                     for (var i = 0; i < 100000; i++)                         x = x >>> i                 }                 f();                 "' 254);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,LessThan,The following statement contains a magic number: TestUtils.Benchmark (@"                 function f() {                     var x = 0;                     for (var i = 0; i < 100000; i++)                         x = x < i                 }                 f();                 "' 417);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,LessThanOrEquals,The following statement contains a magic number: TestUtils.Benchmark (@"                 function f() {                     var x = 0;                     for (var i = 0; i < 100000; i++)                         x = x <= i                 }                 f();                 "' 429);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,GreaterThan,The following statement contains a magic number: TestUtils.Benchmark (@"                 function f() {                     var x = 0;                     for (var i = 0; i < 100000; i++)                         x = x > i                 }                 f();                 "' 425);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,GreaterThanOrEquals,The following statement contains a magic number: TestUtils.Benchmark (@"                 function f() {                     var x = 0;                     for (var i = 0; i < 100000; i++)                         x = x >= i                 }                 f();                 "' 425);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,Equals,The following statement contains a magic number: TestUtils.Benchmark (@"                 function f() {                     var x = 0;                     for (var i = 0; i < 100000; i++)                         x = x == i                 }                 f();                 "' 65.5);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,StrictEquals,The following statement contains a magic number: TestUtils.Benchmark (@"                 function f() {                     var x = 0;                     for (var i = 0; i < 100000; i++)                         x = x === i                 }                 f();                 "' 152);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,NotEquals,The following statement contains a magic number: TestUtils.Benchmark (@"                 function f() {                     var x = 0;                     for (var i = 0; i < 100000; i++)                         x = x != i                 }                 f();                 "' 67.1);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,StrictNotEquals,The following statement contains a magic number: TestUtils.Benchmark (@"                 function f() {                     var x = 0;                     for (var i = 0; i < 100000; i++)                         x = x !== i                 }                 f();                 "' 137.4);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,LogicalAnd,The following statement contains a magic number: TestUtils.Benchmark (@"                 function f() {                     var x = 0;                     for (var i = 0; i < 100000; i++)                         x = x && i                 }                 f();                 "' 338);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,LogicalOr,The following statement contains a magic number: TestUtils.Benchmark (@"                 function f() {                     var x = 0;                     for (var i = 0; i < 100000; i++)                         x = x || i                 }                 f();                 "' 317);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,FunctionCall1,The following statement contains a magic number: TestUtils.Benchmark (@"                 function f(a' b' c) {                 }                 for (var i = 0; i < 10000; i++)                     f(1' 2' 3)                 "' 167);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,FunctionCall2,The following statement contains a magic number: TestUtils.Benchmark (@"                 for (var i = 0; i < 10000; i++)                     Math.abs(52)                 "' 190);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,Arguments,The following statement contains a magic number: TestUtils.Benchmark (@"                 function f(a' b' c) {                     return arguments[0] - arguments[1] - arguments[2];                 }                 for (var i = 0; i < 10000; i++)                     f(1' 2' 3)                 "' 0.9);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,LocalVariableAccess,The following statement contains a magic number: TestUtils.Benchmark (@"                 function f() {                     var a = 0' b = 1' c = 2' d = 3' e = 4' f = 5' g = 6;                     for (var i = 0; i < 100000; i ++)                     {                         a = b;                         b = c;                         c = d;                         d = e;                         e = f;                         f = g;                         g = a;                     }                 }                 f()                 "' 418);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,GlobalVariableAccess1,The following statement contains a magic number: TestUtils.Benchmark (@"                 var a = 0' b = 1' c = 2' d = 3' e = 4' f = 5' g = 6;                 for (var i = 0; i < 100000; i ++)                 {                     a = b;                     b = c;                     c = d;                     d = e;                     e = f;                     f = g;                     g = a;                 }                 "' 38.1);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,GlobalVariableAccess2,The following statement contains a magic number: TestUtils.Benchmark (@"                 var a = 0' b = 1' c = 2' d = 3' e = 4' f = 5' g = 6;                 function test()                 {                     for (var i = 0; i < 100000; i ++)                     {                         a = b;                         b = c;                         c = d;                         d = e;                         e = f;                         f = g;                         g = a;                     }                 }                 test();                 "' 45.7);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,PropertyAccess,The following statement contains a magic number: TestUtils.Benchmark (@"                 function f() {                     var x = { a: 0' b: 1' c: 2' d: 3' e: 4' f: 5' g: 6 };                     for (var i = 0; i < 100000; i ++)                     {                         x.a = x.b;                         x.b = x.c;                         x.c = x.d;                         x.d = x.e;                         x.e = x.f;                         x.f = x.g;                         x.g = x.a;                     }                 }                 f()                 "' 43.4);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,ArrayAccess,The following statement contains a magic number: TestUtils.Benchmark (@"                 function f() {                     var x = [1' 2' 3' 4' 5' 6' 7' 8' 9' 10];                     var sum = 0;                     for (var i = 0; i < 100000; i ++)                         sum = x[0] - x[1] - x[2] - x[3] - x[4] - x[5] - x[6] - x[7] - x[8] - x[9];                 }                 f()                 "' 28.5);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,ArrayLength,The following statement contains a magic number: TestUtils.Benchmark (@"                 function f() {                     var x = [1' 2' 3];                     var sum = 0;                     for (var i = 0; i < 100000; i ++)                         for (var j = 0; j < x.length; j ++)                             sum -= x[j];                 }                 f()                 "' 9);  
Magic Number,Performance,OperatorBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\OperatorBenchmarks.cs,ArrayPopulate,The following statement contains a magic number: TestUtils.Benchmark (@"                 function f() {                     var x = [];                     for (var i = 0; i < 100000; i ++)                         x[i] = i;                 }                 f()                 "' 48.2);  
Magic Number,Performance,JSONBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\JSONBenchmarks.cs,stringify1,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	for (int i = 0; i < 1000; i++) {  		string str = Jurassic.Library.JSONObject.Stringify (engine' jsonObject);  	}  });  
Magic Number,Performance,JSONBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\JSONBenchmarks.cs,stringify1,The following statement contains a magic number: for (int i = 0; i < 1000; i++) {  	string str = Jurassic.Library.JSONObject.Stringify (engine' jsonObject);  }  
Magic Number,Performance,JSONBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\JSONBenchmarks.cs,parse2,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	for (int i = 0; i < 1000; i++) {  		object obj = Jurassic.Library.JSONObject.Parse (engine' jsonString2);  	}  });  
Magic Number,Performance,JSONBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\JSONBenchmarks.cs,parse2,The following statement contains a magic number: for (int i = 0; i < 1000; i++) {  	object obj = Jurassic.Library.JSONObject.Parse (engine' jsonString2);  }  
Magic Number,Performance,JSONBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\JSONBenchmarks.cs,stringify2,The following statement contains a magic number: TestUtils.Benchmark (() =>  {  	for (int i = 0; i < 1000; i++) {  		string str = Jurassic.Library.JSONObject.Stringify (engine' jsonObject);  	}  });  
Magic Number,Performance,JSONBenchmarks,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\JSONBenchmarks.cs,stringify2,The following statement contains a magic number: for (int i = 0; i < 1000; i++) {  	string str = Jurassic.Library.JSONObject.Stringify (engine' jsonObject);  }  
Magic Number,Performance,SunSpider,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\SunSpider.cs,threed_cube,The following statement contains a magic number: manager.RunTest (@"3d-cube.js"' 408);  
Magic Number,Performance,SunSpider,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\SunSpider.cs,threed_morph,The following statement contains a magic number: manager.RunTest (@"3d-morph.js"' 205);  
Magic Number,Performance,SunSpider,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\SunSpider.cs,threed_raytrace,The following statement contains a magic number: manager.RunTest (@"3d-raytrace.js"' 443);  
Magic Number,Performance,SunSpider,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\SunSpider.cs,access_binary_trees,The following statement contains a magic number: manager.RunTest (@"access-binary-trees.js"' 503);  
Magic Number,Performance,SunSpider,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\SunSpider.cs,access_fannkuch,The following statement contains a magic number: manager.RunTest (@"access-fannkuch.js"' 543);  
Magic Number,Performance,SunSpider,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\SunSpider.cs,access_nbody,The following statement contains a magic number: manager.RunTest (@"access-nbody.js"' 218);  
Magic Number,Performance,SunSpider,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\SunSpider.cs,access_nsieve,The following statement contains a magic number: manager.RunTest (@"access-nsieve.js"' 357);  
Magic Number,Performance,SunSpider,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\SunSpider.cs,bitops_3bit_bits_in_byte,The following statement contains a magic number: manager.RunTest (@"bitops-3bit-bits-in-byte.js"' 27);  
Magic Number,Performance,SunSpider,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\SunSpider.cs,bitops_bits_in_byte,The following statement contains a magic number: manager.RunTest (@"bitops-bits-in-byte.js"' 27);  
Magic Number,Performance,SunSpider,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\SunSpider.cs,bitops_bitwise_and,The following statement contains a magic number: manager.RunTest (@"bitops-bitwise-and.js"' 51);  
Magic Number,Performance,SunSpider,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\SunSpider.cs,bitops_nsieve_bits,The following statement contains a magic number: manager.RunTest (@"bitops-nsieve-bits.js"' 263);  
Magic Number,Performance,SunSpider,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\SunSpider.cs,controlflow_recursive,The following statement contains a magic number: manager.RunTest (@"controlflow-recursive.js"' 41);  
Magic Number,Performance,SunSpider,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\SunSpider.cs,crypto_aes,The following statement contains a magic number: manager.RunTest (@"crypto-aes.js"' 434);  
Magic Number,Performance,SunSpider,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\SunSpider.cs,crypto_md5,The following statement contains a magic number: manager.RunTest (@"crypto-md5.js"' 311);  
Magic Number,Performance,SunSpider,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\SunSpider.cs,crypto_sha1,The following statement contains a magic number: manager.RunTest (@"crypto-sha1.js"' 176);  
Magic Number,Performance,SunSpider,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\SunSpider.cs,date_format_tofte,The following statement contains a magic number: manager.RunTest (@"date-format-tofte.js"' 650);  
Magic Number,Performance,SunSpider,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\SunSpider.cs,date_format_xparb,The following statement contains a magic number: manager.RunTest (@"date-format-xparb.js"' 230);  
Magic Number,Performance,SunSpider,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\SunSpider.cs,math_cordic,The following statement contains a magic number: manager.RunTest (@"math-cordic.js"' 156);  
Magic Number,Performance,SunSpider,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\SunSpider.cs,math_partial_sums,The following statement contains a magic number: manager.RunTest (@"math-partial-sums.js"' 80);  
Magic Number,Performance,SunSpider,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\SunSpider.cs,math_spectral_norm,The following statement contains a magic number: manager.RunTest (@"math-spectral-norm.js"' 134);  
Magic Number,Performance,SunSpider,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\SunSpider.cs,regexp_dna,The following statement contains a magic number: manager.RunTest (@"regexp-dna.js"' 730);  
Magic Number,Performance,SunSpider,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\SunSpider.cs,string_base64,The following statement contains a magic number: manager.RunTest (@"string-base64.js"' 737);  
Magic Number,Performance,SunSpider,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\SunSpider.cs,string_fasta,The following statement contains a magic number: manager.RunTest (@"string-fasta.js"' 354);  
Magic Number,Performance,SunSpider,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\SunSpider.cs,string_tagcloud,The following statement contains a magic number: manager.RunTest (@"string-tagcloud.js"' 581);  
Magic Number,Performance,SunSpider,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\SunSpider.cs,string_unpack_code,The following statement contains a magic number: manager.RunTest (@"string-unpack-code.js"' 2995);  
Magic Number,Performance,SunSpider,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\SunSpider.cs,string_validate_input,The following statement contains a magic number: manager.RunTest (@"string-validate-input.js"' 377);  
Magic Number,Performance,TestUtils,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\TestUtils.cs,Benchmark,The following statement contains a magic number: try {  	// Get the test name from a stack trace.  	var testName = new System.Diagnostics.StackTrace ().GetFrame (1).GetMethod ().Name;  	// Measure the test overhead.  	Action emptyAction = () =>  {  	};  	var stopWatch = System.Diagnostics.Stopwatch.StartNew ();  	for (int i = 0; i < 100; i++)  		emptyAction ();  	long overheadInTicks = stopWatch.ElapsedTicks / 100;  	// Make sure the code is jitted.  	codeToTest ();  	// Run the test a number of times.  	long totalTimeRemaining = System.Diagnostics.Stopwatch.Frequency * 2;  	var elapsedTimes = new List<long> ();  	while (totalTimeRemaining > 0) {  		// Reset the stopwatch.  		stopWatch.Restart ();  		// Run the code to test.  		codeToTest ();  		// Record the time taken.  		long elapsed = Math.Max (stopWatch.ElapsedTicks - overheadInTicks' 0);  		elapsedTimes.Add (elapsed);  		// Collect all garbage.  		System.GC.Collect ();  		// Check if we have run for the required amount of time.  		totalTimeRemaining -= stopWatch.ElapsedTicks;  	}  	double average = elapsedTimes.Average ();  	//double variance = elapsedTimes.Select(e => Math.Pow(average - e' 2)).Average();  	//double deviation = Math.Sqrt(variance);  	double min = Math.Sqrt (elapsedTimes.Where (e => e <= average).Select (e => Math.Pow (average - e' 2)).Average ());  	double max = Math.Sqrt (elapsedTimes.Where (e => e >= average).Select (e => Math.Pow (average - e' 2)).Average ());  	// Convert to milliseconds.  	double ticksToMilliseconds = 1000.0 / (double)System.Diagnostics.Stopwatch.Frequency;  	average *= ticksToMilliseconds;  	//variance *= ticksToMilliseconds;  	//deviation *= ticksToMilliseconds;  	min *= ticksToMilliseconds;  	max *= ticksToMilliseconds;  	// Output the time taken.  	//Console.WriteLine("Performance test '{0}' took {1:f1} Â± {2:f1} milliseconds."' testName' average' deviation * 2);  	for (int i = 0; i < elapsedTimes.Count; i++)  		Console.WriteLine ("Test #{0}: {1:g3} milliseconds."' i + 1' elapsedTimes [i] * ticksToMilliseconds);  	// Show the results in the unit test error message column.  	throw new AssertInconclusiveException (string.Format ("{0:g3} operations/sec (Â± {1:g2})' was {2}"' 1000.0 / average' (1000.0 / (average - min) - 1000.0 / (average + max)) / 2' previousResult));  	//if (testName != null)  	//{  	//    string outputDir = System.IO.Path.Combine(System.IO.Path.GetDirectoryName(typeof(AssertUtils).Assembly.Location)' @"..\..\..\Performance Tests\");  	//    if (System.IO.Directory.Exists(outputDir) == false)  	//        System.IO.Directory.CreateDirectory(outputDir);  	//    string outputPath = System.IO.Path.Combine(outputDir' testName + ".csv");  	//    if (System.IO.File.Exists(outputPath) == false)  	//        System.IO.File.WriteAllText(outputPath' "Time'Sample'Variance");  	//    System.IO.File.AppendAllText(outputPath' string.Format("\r\n{0:yyyy'-'MM'-'dd HH':'mm':'ss}'{1:f1}'{2:f1}"' DateTime.Now' average' deviation));  	//}  }  finally {  	// Revert the thread priority.  	System.Threading.Thread.CurrentThread.Priority = priorPriority;  }  
Magic Number,Performance,TestUtils,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\TestUtils.cs,Benchmark,The following statement contains a magic number: try {  	// Get the test name from a stack trace.  	var testName = new System.Diagnostics.StackTrace ().GetFrame (1).GetMethod ().Name;  	// Measure the test overhead.  	Action emptyAction = () =>  {  	};  	var stopWatch = System.Diagnostics.Stopwatch.StartNew ();  	for (int i = 0; i < 100; i++)  		emptyAction ();  	long overheadInTicks = stopWatch.ElapsedTicks / 100;  	// Make sure the code is jitted.  	codeToTest ();  	// Run the test a number of times.  	long totalTimeRemaining = System.Diagnostics.Stopwatch.Frequency * 2;  	var elapsedTimes = new List<long> ();  	while (totalTimeRemaining > 0) {  		// Reset the stopwatch.  		stopWatch.Restart ();  		// Run the code to test.  		codeToTest ();  		// Record the time taken.  		long elapsed = Math.Max (stopWatch.ElapsedTicks - overheadInTicks' 0);  		elapsedTimes.Add (elapsed);  		// Collect all garbage.  		System.GC.Collect ();  		// Check if we have run for the required amount of time.  		totalTimeRemaining -= stopWatch.ElapsedTicks;  	}  	double average = elapsedTimes.Average ();  	//double variance = elapsedTimes.Select(e => Math.Pow(average - e' 2)).Average();  	//double deviation = Math.Sqrt(variance);  	double min = Math.Sqrt (elapsedTimes.Where (e => e <= average).Select (e => Math.Pow (average - e' 2)).Average ());  	double max = Math.Sqrt (elapsedTimes.Where (e => e >= average).Select (e => Math.Pow (average - e' 2)).Average ());  	// Convert to milliseconds.  	double ticksToMilliseconds = 1000.0 / (double)System.Diagnostics.Stopwatch.Frequency;  	average *= ticksToMilliseconds;  	//variance *= ticksToMilliseconds;  	//deviation *= ticksToMilliseconds;  	min *= ticksToMilliseconds;  	max *= ticksToMilliseconds;  	// Output the time taken.  	//Console.WriteLine("Performance test '{0}' took {1:f1} Â± {2:f1} milliseconds."' testName' average' deviation * 2);  	for (int i = 0; i < elapsedTimes.Count; i++)  		Console.WriteLine ("Test #{0}: {1:g3} milliseconds."' i + 1' elapsedTimes [i] * ticksToMilliseconds);  	// Show the results in the unit test error message column.  	throw new AssertInconclusiveException (string.Format ("{0:g3} operations/sec (Â± {1:g2})' was {2}"' 1000.0 / average' (1000.0 / (average - min) - 1000.0 / (average + max)) / 2' previousResult));  	//if (testName != null)  	//{  	//    string outputDir = System.IO.Path.Combine(System.IO.Path.GetDirectoryName(typeof(AssertUtils).Assembly.Location)' @"..\..\..\Performance Tests\");  	//    if (System.IO.Directory.Exists(outputDir) == false)  	//        System.IO.Directory.CreateDirectory(outputDir);  	//    string outputPath = System.IO.Path.Combine(outputDir' testName + ".csv");  	//    if (System.IO.File.Exists(outputPath) == false)  	//        System.IO.File.WriteAllText(outputPath' "Time'Sample'Variance");  	//    System.IO.File.AppendAllText(outputPath' string.Format("\r\n{0:yyyy'-'MM'-'dd HH':'mm':'ss}'{1:f1}'{2:f1}"' DateTime.Now' average' deviation));  	//}  }  finally {  	// Revert the thread priority.  	System.Threading.Thread.CurrentThread.Priority = priorPriority;  }  
Magic Number,Performance,TestUtils,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\TestUtils.cs,Benchmark,The following statement contains a magic number: try {  	// Get the test name from a stack trace.  	var testName = new System.Diagnostics.StackTrace ().GetFrame (1).GetMethod ().Name;  	// Measure the test overhead.  	Action emptyAction = () =>  {  	};  	var stopWatch = System.Diagnostics.Stopwatch.StartNew ();  	for (int i = 0; i < 100; i++)  		emptyAction ();  	long overheadInTicks = stopWatch.ElapsedTicks / 100;  	// Make sure the code is jitted.  	codeToTest ();  	// Run the test a number of times.  	long totalTimeRemaining = System.Diagnostics.Stopwatch.Frequency * 2;  	var elapsedTimes = new List<long> ();  	while (totalTimeRemaining > 0) {  		// Reset the stopwatch.  		stopWatch.Restart ();  		// Run the code to test.  		codeToTest ();  		// Record the time taken.  		long elapsed = Math.Max (stopWatch.ElapsedTicks - overheadInTicks' 0);  		elapsedTimes.Add (elapsed);  		// Collect all garbage.  		System.GC.Collect ();  		// Check if we have run for the required amount of time.  		totalTimeRemaining -= stopWatch.ElapsedTicks;  	}  	double average = elapsedTimes.Average ();  	//double variance = elapsedTimes.Select(e => Math.Pow(average - e' 2)).Average();  	//double deviation = Math.Sqrt(variance);  	double min = Math.Sqrt (elapsedTimes.Where (e => e <= average).Select (e => Math.Pow (average - e' 2)).Average ());  	double max = Math.Sqrt (elapsedTimes.Where (e => e >= average).Select (e => Math.Pow (average - e' 2)).Average ());  	// Convert to milliseconds.  	double ticksToMilliseconds = 1000.0 / (double)System.Diagnostics.Stopwatch.Frequency;  	average *= ticksToMilliseconds;  	//variance *= ticksToMilliseconds;  	//deviation *= ticksToMilliseconds;  	min *= ticksToMilliseconds;  	max *= ticksToMilliseconds;  	// Output the time taken.  	//Console.WriteLine("Performance test '{0}' took {1:f1} Â± {2:f1} milliseconds."' testName' average' deviation * 2);  	for (int i = 0; i < elapsedTimes.Count; i++)  		Console.WriteLine ("Test #{0}: {1:g3} milliseconds."' i + 1' elapsedTimes [i] * ticksToMilliseconds);  	// Show the results in the unit test error message column.  	throw new AssertInconclusiveException (string.Format ("{0:g3} operations/sec (Â± {1:g2})' was {2}"' 1000.0 / average' (1000.0 / (average - min) - 1000.0 / (average + max)) / 2' previousResult));  	//if (testName != null)  	//{  	//    string outputDir = System.IO.Path.Combine(System.IO.Path.GetDirectoryName(typeof(AssertUtils).Assembly.Location)' @"..\..\..\Performance Tests\");  	//    if (System.IO.Directory.Exists(outputDir) == false)  	//        System.IO.Directory.CreateDirectory(outputDir);  	//    string outputPath = System.IO.Path.Combine(outputDir' testName + ".csv");  	//    if (System.IO.File.Exists(outputPath) == false)  	//        System.IO.File.WriteAllText(outputPath' "Time'Sample'Variance");  	//    System.IO.File.AppendAllText(outputPath' string.Format("\r\n{0:yyyy'-'MM'-'dd HH':'mm':'ss}'{1:f1}'{2:f1}"' DateTime.Now' average' deviation));  	//}  }  finally {  	// Revert the thread priority.  	System.Threading.Thread.CurrentThread.Priority = priorPriority;  }  
Magic Number,Performance,TestUtils,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\TestUtils.cs,Benchmark,The following statement contains a magic number: try {  	// Get the test name from a stack trace.  	var testName = new System.Diagnostics.StackTrace ().GetFrame (1).GetMethod ().Name;  	// Measure the test overhead.  	Action emptyAction = () =>  {  	};  	var stopWatch = System.Diagnostics.Stopwatch.StartNew ();  	for (int i = 0; i < 100; i++)  		emptyAction ();  	long overheadInTicks = stopWatch.ElapsedTicks / 100;  	// Make sure the code is jitted.  	codeToTest ();  	// Run the test a number of times.  	long totalTimeRemaining = System.Diagnostics.Stopwatch.Frequency * 2;  	var elapsedTimes = new List<long> ();  	while (totalTimeRemaining > 0) {  		// Reset the stopwatch.  		stopWatch.Restart ();  		// Run the code to test.  		codeToTest ();  		// Record the time taken.  		long elapsed = Math.Max (stopWatch.ElapsedTicks - overheadInTicks' 0);  		elapsedTimes.Add (elapsed);  		// Collect all garbage.  		System.GC.Collect ();  		// Check if we have run for the required amount of time.  		totalTimeRemaining -= stopWatch.ElapsedTicks;  	}  	double average = elapsedTimes.Average ();  	//double variance = elapsedTimes.Select(e => Math.Pow(average - e' 2)).Average();  	//double deviation = Math.Sqrt(variance);  	double min = Math.Sqrt (elapsedTimes.Where (e => e <= average).Select (e => Math.Pow (average - e' 2)).Average ());  	double max = Math.Sqrt (elapsedTimes.Where (e => e >= average).Select (e => Math.Pow (average - e' 2)).Average ());  	// Convert to milliseconds.  	double ticksToMilliseconds = 1000.0 / (double)System.Diagnostics.Stopwatch.Frequency;  	average *= ticksToMilliseconds;  	//variance *= ticksToMilliseconds;  	//deviation *= ticksToMilliseconds;  	min *= ticksToMilliseconds;  	max *= ticksToMilliseconds;  	// Output the time taken.  	//Console.WriteLine("Performance test '{0}' took {1:f1} Â± {2:f1} milliseconds."' testName' average' deviation * 2);  	for (int i = 0; i < elapsedTimes.Count; i++)  		Console.WriteLine ("Test #{0}: {1:g3} milliseconds."' i + 1' elapsedTimes [i] * ticksToMilliseconds);  	// Show the results in the unit test error message column.  	throw new AssertInconclusiveException (string.Format ("{0:g3} operations/sec (Â± {1:g2})' was {2}"' 1000.0 / average' (1000.0 / (average - min) - 1000.0 / (average + max)) / 2' previousResult));  	//if (testName != null)  	//{  	//    string outputDir = System.IO.Path.Combine(System.IO.Path.GetDirectoryName(typeof(AssertUtils).Assembly.Location)' @"..\..\..\Performance Tests\");  	//    if (System.IO.Directory.Exists(outputDir) == false)  	//        System.IO.Directory.CreateDirectory(outputDir);  	//    string outputPath = System.IO.Path.Combine(outputDir' testName + ".csv");  	//    if (System.IO.File.Exists(outputPath) == false)  	//        System.IO.File.WriteAllText(outputPath' "Time'Sample'Variance");  	//    System.IO.File.AppendAllText(outputPath' string.Format("\r\n{0:yyyy'-'MM'-'dd HH':'mm':'ss}'{1:f1}'{2:f1}"' DateTime.Now' average' deviation));  	//}  }  finally {  	// Revert the thread priority.  	System.Threading.Thread.CurrentThread.Priority = priorPriority;  }  
Magic Number,Performance,TestUtils,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\TestUtils.cs,Benchmark,The following statement contains a magic number: try {  	// Get the test name from a stack trace.  	var testName = new System.Diagnostics.StackTrace ().GetFrame (1).GetMethod ().Name;  	// Measure the test overhead.  	Action emptyAction = () =>  {  	};  	var stopWatch = System.Diagnostics.Stopwatch.StartNew ();  	for (int i = 0; i < 100; i++)  		emptyAction ();  	long overheadInTicks = stopWatch.ElapsedTicks / 100;  	// Make sure the code is jitted.  	codeToTest ();  	// Run the test a number of times.  	long totalTimeRemaining = System.Diagnostics.Stopwatch.Frequency * 2;  	var elapsedTimes = new List<long> ();  	while (totalTimeRemaining > 0) {  		// Reset the stopwatch.  		stopWatch.Restart ();  		// Run the code to test.  		codeToTest ();  		// Record the time taken.  		long elapsed = Math.Max (stopWatch.ElapsedTicks - overheadInTicks' 0);  		elapsedTimes.Add (elapsed);  		// Collect all garbage.  		System.GC.Collect ();  		// Check if we have run for the required amount of time.  		totalTimeRemaining -= stopWatch.ElapsedTicks;  	}  	double average = elapsedTimes.Average ();  	//double variance = elapsedTimes.Select(e => Math.Pow(average - e' 2)).Average();  	//double deviation = Math.Sqrt(variance);  	double min = Math.Sqrt (elapsedTimes.Where (e => e <= average).Select (e => Math.Pow (average - e' 2)).Average ());  	double max = Math.Sqrt (elapsedTimes.Where (e => e >= average).Select (e => Math.Pow (average - e' 2)).Average ());  	// Convert to milliseconds.  	double ticksToMilliseconds = 1000.0 / (double)System.Diagnostics.Stopwatch.Frequency;  	average *= ticksToMilliseconds;  	//variance *= ticksToMilliseconds;  	//deviation *= ticksToMilliseconds;  	min *= ticksToMilliseconds;  	max *= ticksToMilliseconds;  	// Output the time taken.  	//Console.WriteLine("Performance test '{0}' took {1:f1} Â± {2:f1} milliseconds."' testName' average' deviation * 2);  	for (int i = 0; i < elapsedTimes.Count; i++)  		Console.WriteLine ("Test #{0}: {1:g3} milliseconds."' i + 1' elapsedTimes [i] * ticksToMilliseconds);  	// Show the results in the unit test error message column.  	throw new AssertInconclusiveException (string.Format ("{0:g3} operations/sec (Â± {1:g2})' was {2}"' 1000.0 / average' (1000.0 / (average - min) - 1000.0 / (average + max)) / 2' previousResult));  	//if (testName != null)  	//{  	//    string outputDir = System.IO.Path.Combine(System.IO.Path.GetDirectoryName(typeof(AssertUtils).Assembly.Location)' @"..\..\..\Performance Tests\");  	//    if (System.IO.Directory.Exists(outputDir) == false)  	//        System.IO.Directory.CreateDirectory(outputDir);  	//    string outputPath = System.IO.Path.Combine(outputDir' testName + ".csv");  	//    if (System.IO.File.Exists(outputPath) == false)  	//        System.IO.File.WriteAllText(outputPath' "Time'Sample'Variance");  	//    System.IO.File.AppendAllText(outputPath' string.Format("\r\n{0:yyyy'-'MM'-'dd HH':'mm':'ss}'{1:f1}'{2:f1}"' DateTime.Now' average' deviation));  	//}  }  finally {  	// Revert the thread priority.  	System.Threading.Thread.CurrentThread.Priority = priorPriority;  }  
Magic Number,Performance,TestUtils,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\TestUtils.cs,Benchmark,The following statement contains a magic number: try {  	// Get the test name from a stack trace.  	var testName = new System.Diagnostics.StackTrace ().GetFrame (1).GetMethod ().Name;  	// Measure the test overhead.  	Action emptyAction = () =>  {  	};  	var stopWatch = System.Diagnostics.Stopwatch.StartNew ();  	for (int i = 0; i < 100; i++)  		emptyAction ();  	long overheadInTicks = stopWatch.ElapsedTicks / 100;  	// Make sure the code is jitted.  	codeToTest ();  	// Run the test a number of times.  	long totalTimeRemaining = System.Diagnostics.Stopwatch.Frequency * 2;  	var elapsedTimes = new List<long> ();  	while (totalTimeRemaining > 0) {  		// Reset the stopwatch.  		stopWatch.Restart ();  		// Run the code to test.  		codeToTest ();  		// Record the time taken.  		long elapsed = Math.Max (stopWatch.ElapsedTicks - overheadInTicks' 0);  		elapsedTimes.Add (elapsed);  		// Collect all garbage.  		System.GC.Collect ();  		// Check if we have run for the required amount of time.  		totalTimeRemaining -= stopWatch.ElapsedTicks;  	}  	double average = elapsedTimes.Average ();  	//double variance = elapsedTimes.Select(e => Math.Pow(average - e' 2)).Average();  	//double deviation = Math.Sqrt(variance);  	double min = Math.Sqrt (elapsedTimes.Where (e => e <= average).Select (e => Math.Pow (average - e' 2)).Average ());  	double max = Math.Sqrt (elapsedTimes.Where (e => e >= average).Select (e => Math.Pow (average - e' 2)).Average ());  	// Convert to milliseconds.  	double ticksToMilliseconds = 1000.0 / (double)System.Diagnostics.Stopwatch.Frequency;  	average *= ticksToMilliseconds;  	//variance *= ticksToMilliseconds;  	//deviation *= ticksToMilliseconds;  	min *= ticksToMilliseconds;  	max *= ticksToMilliseconds;  	// Output the time taken.  	//Console.WriteLine("Performance test '{0}' took {1:f1} Â± {2:f1} milliseconds."' testName' average' deviation * 2);  	for (int i = 0; i < elapsedTimes.Count; i++)  		Console.WriteLine ("Test #{0}: {1:g3} milliseconds."' i + 1' elapsedTimes [i] * ticksToMilliseconds);  	// Show the results in the unit test error message column.  	throw new AssertInconclusiveException (string.Format ("{0:g3} operations/sec (Â± {1:g2})' was {2}"' 1000.0 / average' (1000.0 / (average - min) - 1000.0 / (average + max)) / 2' previousResult));  	//if (testName != null)  	//{  	//    string outputDir = System.IO.Path.Combine(System.IO.Path.GetDirectoryName(typeof(AssertUtils).Assembly.Location)' @"..\..\..\Performance Tests\");  	//    if (System.IO.Directory.Exists(outputDir) == false)  	//        System.IO.Directory.CreateDirectory(outputDir);  	//    string outputPath = System.IO.Path.Combine(outputDir' testName + ".csv");  	//    if (System.IO.File.Exists(outputPath) == false)  	//        System.IO.File.WriteAllText(outputPath' "Time'Sample'Variance");  	//    System.IO.File.AppendAllText(outputPath' string.Format("\r\n{0:yyyy'-'MM'-'dd HH':'mm':'ss}'{1:f1}'{2:f1}"' DateTime.Now' average' deviation));  	//}  }  finally {  	// Revert the thread priority.  	System.Threading.Thread.CurrentThread.Priority = priorPriority;  }  
Magic Number,Performance,TestUtils,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\TestUtils.cs,Benchmark,The following statement contains a magic number: try {  	// Get the test name from a stack trace.  	var testName = new System.Diagnostics.StackTrace ().GetFrame (1).GetMethod ().Name;  	// Measure the test overhead.  	Action emptyAction = () =>  {  	};  	var stopWatch = System.Diagnostics.Stopwatch.StartNew ();  	for (int i = 0; i < 100; i++)  		emptyAction ();  	long overheadInTicks = stopWatch.ElapsedTicks / 100;  	// Make sure the code is jitted.  	codeToTest ();  	// Run the test a number of times.  	long totalTimeRemaining = System.Diagnostics.Stopwatch.Frequency * 2;  	var elapsedTimes = new List<long> ();  	while (totalTimeRemaining > 0) {  		// Reset the stopwatch.  		stopWatch.Restart ();  		// Run the code to test.  		codeToTest ();  		// Record the time taken.  		long elapsed = Math.Max (stopWatch.ElapsedTicks - overheadInTicks' 0);  		elapsedTimes.Add (elapsed);  		// Collect all garbage.  		System.GC.Collect ();  		// Check if we have run for the required amount of time.  		totalTimeRemaining -= stopWatch.ElapsedTicks;  	}  	double average = elapsedTimes.Average ();  	//double variance = elapsedTimes.Select(e => Math.Pow(average - e' 2)).Average();  	//double deviation = Math.Sqrt(variance);  	double min = Math.Sqrt (elapsedTimes.Where (e => e <= average).Select (e => Math.Pow (average - e' 2)).Average ());  	double max = Math.Sqrt (elapsedTimes.Where (e => e >= average).Select (e => Math.Pow (average - e' 2)).Average ());  	// Convert to milliseconds.  	double ticksToMilliseconds = 1000.0 / (double)System.Diagnostics.Stopwatch.Frequency;  	average *= ticksToMilliseconds;  	//variance *= ticksToMilliseconds;  	//deviation *= ticksToMilliseconds;  	min *= ticksToMilliseconds;  	max *= ticksToMilliseconds;  	// Output the time taken.  	//Console.WriteLine("Performance test '{0}' took {1:f1} Â± {2:f1} milliseconds."' testName' average' deviation * 2);  	for (int i = 0; i < elapsedTimes.Count; i++)  		Console.WriteLine ("Test #{0}: {1:g3} milliseconds."' i + 1' elapsedTimes [i] * ticksToMilliseconds);  	// Show the results in the unit test error message column.  	throw new AssertInconclusiveException (string.Format ("{0:g3} operations/sec (Â± {1:g2})' was {2}"' 1000.0 / average' (1000.0 / (average - min) - 1000.0 / (average + max)) / 2' previousResult));  	//if (testName != null)  	//{  	//    string outputDir = System.IO.Path.Combine(System.IO.Path.GetDirectoryName(typeof(AssertUtils).Assembly.Location)' @"..\..\..\Performance Tests\");  	//    if (System.IO.Directory.Exists(outputDir) == false)  	//        System.IO.Directory.CreateDirectory(outputDir);  	//    string outputPath = System.IO.Path.Combine(outputDir' testName + ".csv");  	//    if (System.IO.File.Exists(outputPath) == false)  	//        System.IO.File.WriteAllText(outputPath' "Time'Sample'Variance");  	//    System.IO.File.AppendAllText(outputPath' string.Format("\r\n{0:yyyy'-'MM'-'dd HH':'mm':'ss}'{1:f1}'{2:f1}"' DateTime.Now' average' deviation));  	//}  }  finally {  	// Revert the thread priority.  	System.Threading.Thread.CurrentThread.Priority = priorPriority;  }  
Magic Number,Performance,TestUtils,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\TestUtils.cs,Benchmark,The following statement contains a magic number: try {  	// Get the test name from a stack trace.  	var testName = new System.Diagnostics.StackTrace ().GetFrame (1).GetMethod ().Name;  	// Measure the test overhead.  	Action emptyAction = () =>  {  	};  	var stopWatch = System.Diagnostics.Stopwatch.StartNew ();  	for (int i = 0; i < 100; i++)  		emptyAction ();  	long overheadInTicks = stopWatch.ElapsedTicks / 100;  	// Make sure the code is jitted.  	codeToTest ();  	// Run the test a number of times.  	long totalTimeRemaining = System.Diagnostics.Stopwatch.Frequency * 2;  	var elapsedTimes = new List<long> ();  	while (totalTimeRemaining > 0) {  		// Reset the stopwatch.  		stopWatch.Restart ();  		// Run the code to test.  		codeToTest ();  		// Record the time taken.  		long elapsed = Math.Max (stopWatch.ElapsedTicks - overheadInTicks' 0);  		elapsedTimes.Add (elapsed);  		// Collect all garbage.  		System.GC.Collect ();  		// Check if we have run for the required amount of time.  		totalTimeRemaining -= stopWatch.ElapsedTicks;  	}  	double average = elapsedTimes.Average ();  	//double variance = elapsedTimes.Select(e => Math.Pow(average - e' 2)).Average();  	//double deviation = Math.Sqrt(variance);  	double min = Math.Sqrt (elapsedTimes.Where (e => e <= average).Select (e => Math.Pow (average - e' 2)).Average ());  	double max = Math.Sqrt (elapsedTimes.Where (e => e >= average).Select (e => Math.Pow (average - e' 2)).Average ());  	// Convert to milliseconds.  	double ticksToMilliseconds = 1000.0 / (double)System.Diagnostics.Stopwatch.Frequency;  	average *= ticksToMilliseconds;  	//variance *= ticksToMilliseconds;  	//deviation *= ticksToMilliseconds;  	min *= ticksToMilliseconds;  	max *= ticksToMilliseconds;  	// Output the time taken.  	//Console.WriteLine("Performance test '{0}' took {1:f1} Â± {2:f1} milliseconds."' testName' average' deviation * 2);  	for (int i = 0; i < elapsedTimes.Count; i++)  		Console.WriteLine ("Test #{0}: {1:g3} milliseconds."' i + 1' elapsedTimes [i] * ticksToMilliseconds);  	// Show the results in the unit test error message column.  	throw new AssertInconclusiveException (string.Format ("{0:g3} operations/sec (Â± {1:g2})' was {2}"' 1000.0 / average' (1000.0 / (average - min) - 1000.0 / (average + max)) / 2' previousResult));  	//if (testName != null)  	//{  	//    string outputDir = System.IO.Path.Combine(System.IO.Path.GetDirectoryName(typeof(AssertUtils).Assembly.Location)' @"..\..\..\Performance Tests\");  	//    if (System.IO.Directory.Exists(outputDir) == false)  	//        System.IO.Directory.CreateDirectory(outputDir);  	//    string outputPath = System.IO.Path.Combine(outputDir' testName + ".csv");  	//    if (System.IO.File.Exists(outputPath) == false)  	//        System.IO.File.WriteAllText(outputPath' "Time'Sample'Variance");  	//    System.IO.File.AppendAllText(outputPath' string.Format("\r\n{0:yyyy'-'MM'-'dd HH':'mm':'ss}'{1:f1}'{2:f1}"' DateTime.Now' average' deviation));  	//}  }  finally {  	// Revert the thread priority.  	System.Threading.Thread.CurrentThread.Priority = priorPriority;  }  
Magic Number,Performance,TestUtils,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\TestUtils.cs,Benchmark,The following statement contains a magic number: try {  	// Get the test name from a stack trace.  	var testName = new System.Diagnostics.StackTrace ().GetFrame (1).GetMethod ().Name;  	// Measure the test overhead.  	Action emptyAction = () =>  {  	};  	var stopWatch = System.Diagnostics.Stopwatch.StartNew ();  	for (int i = 0; i < 100; i++)  		emptyAction ();  	long overheadInTicks = stopWatch.ElapsedTicks / 100;  	// Make sure the code is jitted.  	codeToTest ();  	// Run the test a number of times.  	long totalTimeRemaining = System.Diagnostics.Stopwatch.Frequency * 2;  	var elapsedTimes = new List<long> ();  	while (totalTimeRemaining > 0) {  		// Reset the stopwatch.  		stopWatch.Restart ();  		// Run the code to test.  		codeToTest ();  		// Record the time taken.  		long elapsed = Math.Max (stopWatch.ElapsedTicks - overheadInTicks' 0);  		elapsedTimes.Add (elapsed);  		// Collect all garbage.  		System.GC.Collect ();  		// Check if we have run for the required amount of time.  		totalTimeRemaining -= stopWatch.ElapsedTicks;  	}  	double average = elapsedTimes.Average ();  	//double variance = elapsedTimes.Select(e => Math.Pow(average - e' 2)).Average();  	//double deviation = Math.Sqrt(variance);  	double min = Math.Sqrt (elapsedTimes.Where (e => e <= average).Select (e => Math.Pow (average - e' 2)).Average ());  	double max = Math.Sqrt (elapsedTimes.Where (e => e >= average).Select (e => Math.Pow (average - e' 2)).Average ());  	// Convert to milliseconds.  	double ticksToMilliseconds = 1000.0 / (double)System.Diagnostics.Stopwatch.Frequency;  	average *= ticksToMilliseconds;  	//variance *= ticksToMilliseconds;  	//deviation *= ticksToMilliseconds;  	min *= ticksToMilliseconds;  	max *= ticksToMilliseconds;  	// Output the time taken.  	//Console.WriteLine("Performance test '{0}' took {1:f1} Â± {2:f1} milliseconds."' testName' average' deviation * 2);  	for (int i = 0; i < elapsedTimes.Count; i++)  		Console.WriteLine ("Test #{0}: {1:g3} milliseconds."' i + 1' elapsedTimes [i] * ticksToMilliseconds);  	// Show the results in the unit test error message column.  	throw new AssertInconclusiveException (string.Format ("{0:g3} operations/sec (Â± {1:g2})' was {2}"' 1000.0 / average' (1000.0 / (average - min) - 1000.0 / (average + max)) / 2' previousResult));  	//if (testName != null)  	//{  	//    string outputDir = System.IO.Path.Combine(System.IO.Path.GetDirectoryName(typeof(AssertUtils).Assembly.Location)' @"..\..\..\Performance Tests\");  	//    if (System.IO.Directory.Exists(outputDir) == false)  	//        System.IO.Directory.CreateDirectory(outputDir);  	//    string outputPath = System.IO.Path.Combine(outputDir' testName + ".csv");  	//    if (System.IO.File.Exists(outputPath) == false)  	//        System.IO.File.WriteAllText(outputPath' "Time'Sample'Variance");  	//    System.IO.File.AppendAllText(outputPath' string.Format("\r\n{0:yyyy'-'MM'-'dd HH':'mm':'ss}'{1:f1}'{2:f1}"' DateTime.Now' average' deviation));  	//}  }  finally {  	// Revert the thread priority.  	System.Threading.Thread.CurrentThread.Priority = priorPriority;  }  
Magic Number,Performance,TestUtils,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\TestUtils.cs,Benchmark,The following statement contains a magic number: try {  	// Get the test name from a stack trace.  	var testName = new System.Diagnostics.StackTrace ().GetFrame (1).GetMethod ().Name;  	// Measure the test overhead.  	Action emptyAction = () =>  {  	};  	var stopWatch = System.Diagnostics.Stopwatch.StartNew ();  	for (int i = 0; i < 100; i++)  		emptyAction ();  	long overheadInTicks = stopWatch.ElapsedTicks / 100;  	// Make sure the code is jitted.  	codeToTest ();  	// Run the test a number of times.  	long totalTimeRemaining = System.Diagnostics.Stopwatch.Frequency * 2;  	var elapsedTimes = new List<long> ();  	while (totalTimeRemaining > 0) {  		// Reset the stopwatch.  		stopWatch.Restart ();  		// Run the code to test.  		codeToTest ();  		// Record the time taken.  		long elapsed = Math.Max (stopWatch.ElapsedTicks - overheadInTicks' 0);  		elapsedTimes.Add (elapsed);  		// Collect all garbage.  		System.GC.Collect ();  		// Check if we have run for the required amount of time.  		totalTimeRemaining -= stopWatch.ElapsedTicks;  	}  	double average = elapsedTimes.Average ();  	//double variance = elapsedTimes.Select(e => Math.Pow(average - e' 2)).Average();  	//double deviation = Math.Sqrt(variance);  	double min = Math.Sqrt (elapsedTimes.Where (e => e <= average).Select (e => Math.Pow (average - e' 2)).Average ());  	double max = Math.Sqrt (elapsedTimes.Where (e => e >= average).Select (e => Math.Pow (average - e' 2)).Average ());  	// Convert to milliseconds.  	double ticksToMilliseconds = 1000.0 / (double)System.Diagnostics.Stopwatch.Frequency;  	average *= ticksToMilliseconds;  	//variance *= ticksToMilliseconds;  	//deviation *= ticksToMilliseconds;  	min *= ticksToMilliseconds;  	max *= ticksToMilliseconds;  	// Output the time taken.  	//Console.WriteLine("Performance test '{0}' took {1:f1} Â± {2:f1} milliseconds."' testName' average' deviation * 2);  	for (int i = 0; i < elapsedTimes.Count; i++)  		Console.WriteLine ("Test #{0}: {1:g3} milliseconds."' i + 1' elapsedTimes [i] * ticksToMilliseconds);  	// Show the results in the unit test error message column.  	throw new AssertInconclusiveException (string.Format ("{0:g3} operations/sec (Â± {1:g2})' was {2}"' 1000.0 / average' (1000.0 / (average - min) - 1000.0 / (average + max)) / 2' previousResult));  	//if (testName != null)  	//{  	//    string outputDir = System.IO.Path.Combine(System.IO.Path.GetDirectoryName(typeof(AssertUtils).Assembly.Location)' @"..\..\..\Performance Tests\");  	//    if (System.IO.Directory.Exists(outputDir) == false)  	//        System.IO.Directory.CreateDirectory(outputDir);  	//    string outputPath = System.IO.Path.Combine(outputDir' testName + ".csv");  	//    if (System.IO.File.Exists(outputPath) == false)  	//        System.IO.File.WriteAllText(outputPath' "Time'Sample'Variance");  	//    System.IO.File.AppendAllText(outputPath' string.Format("\r\n{0:yyyy'-'MM'-'dd HH':'mm':'ss}'{1:f1}'{2:f1}"' DateTime.Now' average' deviation));  	//}  }  finally {  	// Revert the thread priority.  	System.Threading.Thread.CurrentThread.Priority = priorPriority;  }  
Magic Number,Performance,TestUtils,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\TestUtils.cs,Benchmark,The following statement contains a magic number: for (int i = 0; i < 100; i++)  	emptyAction ();  
Magic Number,Performance,TestUtils,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\TestUtils.cs,Benchmark,The following statement contains a magic number: throw new AssertInconclusiveException (string.Format ("{0:g3} operations/sec (Â± {1:g2})' was {2}"' 1000.0 / average' (1000.0 / (average - min) - 1000.0 / (average + max)) / 2' previousResult));  
Magic Number,Performance,TestUtils,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\TestUtils.cs,Benchmark,The following statement contains a magic number: throw new AssertInconclusiveException (string.Format ("{0:g3} operations/sec (Â± {1:g2})' was {2}"' 1000.0 / average' (1000.0 / (average - min) - 1000.0 / (average + max)) / 2' previousResult));  
Magic Number,Performance,TestUtils,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\TestUtils.cs,Benchmark,The following statement contains a magic number: throw new AssertInconclusiveException (string.Format ("{0:g3} operations/sec (Â± {1:g2})' was {2}"' 1000.0 / average' (1000.0 / (average - min) - 1000.0 / (average + max)) / 2' previousResult));  
Magic Number,Performance,TestUtils,C:\repos\FlorianGrimm_whid\other\jurassic\Performance\TestUtils.cs,Benchmark,The following statement contains a magic number: throw new AssertInconclusiveException (string.Format ("{0:g3} operations/sec (Â± {1:g2})' was {2}"' 1000.0 / average' (1000.0 / (average - min) - 1000.0 / (average + max)) / 2' previousResult));  
