Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ILMutator,Program,C:\repos\FlorianGrimm_whid\other\ccimetadata\Samples\ILMutator\ILMutator.cs,Main,Cyclomatic complexity of the method is 15
Magic Number,ILMutator,Program,C:\repos\FlorianGrimm_whid\other\ccimetadata\Samples\ILMutator\ILMutator.cs,Main,The following statement contains a magic number: using (var host = new PeReader.DefaultHost ()) {  	IModule /*?*/module = host.LoadUnitFrom (args [0]) as IModule;  	if (module == null || module is Dummy) {  		Console.WriteLine (args [0] + " is not a PE file containing a CLR assembly' or an error occurred when loading it.");  		return 1;  	}  	module = new MetadataDeepCopier (host).Copy (module);  	PdbReader /*?*/pdbReader = null;  	string pdbFile = Path.ChangeExtension (module.Location' "pdb");  	if (File.Exists (pdbFile)) {  		using (var pdbStream = File.OpenRead (pdbFile)) {  			pdbReader = new PdbReader (pdbStream' host);  		}  	}  	else {  		Console.WriteLine ("Could not load the PDB file for '" + module.Name.Value + "' . Proceeding anyway.");  	}  	using (pdbReader) {  		var localScopeProvider = pdbReader == null ? null : new ILGenerator.LocalScopeProvider (pdbReader);  		module = RewriteStoreLocal.RewriteModule (host' localScopeProvider' pdbReader' module);  		string newName;  		if (args.Length == 2) {  			newName = args [1];  		}  		else {  			var loc = module.Location;  			var path = Path.GetDirectoryName (loc) ?? "";  			var fileName = Path.GetFileNameWithoutExtension (loc);  			var ext = Path.GetExtension (loc);  			newName = Path.Combine (path' fileName + "1" + ext);  		}  		using (var peStream = File.Create (newName)) {  			using (var pdbWriter = new PdbWriter (Path.ChangeExtension (newName' ".pdb")' pdbReader)) {  				PeWriter.WritePeToStream (module' host' peStream' pdbReader' localScopeProvider' pdbWriter);  			}  		}  	}  	return 0;  	// success  }  
Magic Number,ILMutator,Program,C:\repos\FlorianGrimm_whid\other\ccimetadata\Samples\ILMutator\ILMutator.cs,Main,The following statement contains a magic number: using (pdbReader) {  	var localScopeProvider = pdbReader == null ? null : new ILGenerator.LocalScopeProvider (pdbReader);  	module = RewriteStoreLocal.RewriteModule (host' localScopeProvider' pdbReader' module);  	string newName;  	if (args.Length == 2) {  		newName = args [1];  	}  	else {  		var loc = module.Location;  		var path = Path.GetDirectoryName (loc) ?? "";  		var fileName = Path.GetFileNameWithoutExtension (loc);  		var ext = Path.GetExtension (loc);  		newName = Path.Combine (path' fileName + "1" + ext);  	}  	using (var peStream = File.Create (newName)) {  		using (var pdbWriter = new PdbWriter (Path.ChangeExtension (newName' ".pdb")' pdbReader)) {  			PeWriter.WritePeToStream (module' host' peStream' pdbReader' localScopeProvider' pdbWriter);  		}  	}  }  
Magic Number,ILMutator,Program,C:\repos\FlorianGrimm_whid\other\ccimetadata\Samples\ILMutator\ILMutator.cs,Main,The following statement contains a magic number: if (args.Length == 2) {  	newName = args [1];  }  else {  	var loc = module.Location;  	var path = Path.GetDirectoryName (loc) ?? "";  	var fileName = Path.GetFileNameWithoutExtension (loc);  	var ext = Path.GetExtension (loc);  	newName = Path.Combine (path' fileName + "1" + ext);  }  
