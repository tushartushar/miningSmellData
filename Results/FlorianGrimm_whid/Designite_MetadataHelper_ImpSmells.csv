Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,VisibilityIntersection,The method has 153 lines of code.
Long Method,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,Resolve,The method has 139 lines of code.
Long Method,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,SizeOfType,The method has 103 lines of code.
Long Method,Microsoft.Cci,TypeNameFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,EscapeKeyword,The method has 157 lines of code.
Complex Method,Microsoft.Cci,OptionParsing,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\CommandLineOptions.cs,Parse,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.Cci,OptionParsing,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\CommandLineOptions.cs,SplitLineWithQuotes,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.Cci,OptionParsing,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\CommandLineOptions.cs,ParseValue,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.Cci,OptionParsing,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\CommandLineOptions.cs,FindOptionByReflection,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Cci,OptionParsing,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\CommandLineOptions.cs,ProcessOptionWithMatchingField,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Cci,OptionParsing,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\CommandLineOptions.cs,PrintOptions,Cyclomatic complexity of the method is 20
Complex Method,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,ProbeAssemblyReference,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,TryNextPermutation,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetTypeReferenceInterendIdIgnoringCustomModifiers,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ComputeFieldOffset,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,GetFieldBitOffset,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,GetImplicitlyImplementedInterfaceMethods,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ResolveMethod,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ResolveField,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ResolveMethod,Cyclomatic complexity of the method is 17
Complex Method,Microsoft.Cci,SignatureFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,GetEventSignature,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Cci,SignatureFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,GetFieldSignature,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.Cci,SignatureFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,GetMethodSignature,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.Cci,SignatureFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,AppendMethodParameters,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.Cci,SignatureFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,AppendMethodName,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Cci,SignatureFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,AppendParameter,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Cci,SignatureFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,AppendPropertyName,Cyclomatic complexity of the method is 17
Complex Method,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,DispatchAsReference,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Cci,ClrHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,ClrOperandStackTypeFor,Cyclomatic complexity of the method is 18
Complex Method,Microsoft.Cci,ClrHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,ConversionPossible,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,EffectiveBaseClass,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,IsCompileTimeConstantType,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,IsPrimitiveInteger,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,IsSignedPrimitive,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,VisibilityIntersection,Cyclomatic complexity of the method is 21
Complex Method,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,GetField,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,GetSytemTypeCodeFor,Cyclomatic complexity of the method is 22
Complex Method,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,Resolve,Cyclomatic complexity of the method is 21
Complex Method,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,SizeOfType,Cyclomatic complexity of the method is 40
Complex Method,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,StackType,Cyclomatic complexity of the method is 17
Complex Method,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,TypeAlignment,Cyclomatic complexity of the method is 28
Complex Method,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,TypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Cci,TypeNameFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,AddGenericParametersIfNeeded,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.Cci,TypeNameFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,AppendArrayDimensions,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Cci,TypeNameFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,EscapeKeyword,Cyclomatic complexity of the method is 76
Complex Method,Microsoft.Cci,TypeNameFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,GetTypeName,Cyclomatic complexity of the method is 19
Complex Method,Microsoft.Cci,TypeNameFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,GetGenericTypeInstanceName,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Cci,UnitHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UnitHelper.cs,AssemblyOneAllowsAssemblyTwoToAccessItsInternals,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Cci,UnitHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UnitHelper.cs,GetType,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Cci.Immutable,DummyArrayMethodReference,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,DummyArrayMethodReference,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.Cci.Immutable,NestedTypeReference,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\PlatformTypes.cs,GetResolvedType,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Cci.Immutable,PlatformType,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\PlatformTypes.cs,GetTypeFor,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.Cci.Immutable,GenericTypeInstance,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeMember,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Cci.Immutable,SpecializedNestedTypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeMember,Cyclomatic complexity of the method is 10
Long Parameter List,Microsoft.Cci,OptionParsing,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\CommandLineOptions.cs,FinishArgument,The method has 6 parameters.
Long Parameter List,Microsoft.Cci,OptionParsing,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\CommandLineOptions.cs,ParseValue,The method has 5 parameters.
Long Parameter List,Microsoft.Cci,OptionParsing,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\CommandLineOptions.cs,ProcessOptionWithMatchingField,The method has 5 parameters.
Long Parameter List,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,MetadataHostEnvironment,The method has 5 parameters.
Long Parameter List,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,MetadataReaderHost,The method has 5 parameters.
Long Parameter List,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetSignatureInternId,The method has 6 parameters.
Long Parameter List,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetFunctionPointerTypeReferenceInternId,The method has 6 parameters.
Long Parameter List,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetFunctionPointerTypeReferenceInternedKey,The method has 6 parameters.
Long Parameter List,Microsoft.Cci,IAssemblyName,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\GlobalAssemblyCache.cs,BindToObject,The method has 8 parameters.
Long Parameter List,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ResolveField,The method has 5 parameters.
Long Parameter List,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ResolveField,The method has 5 parameters.
Long Parameter List,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ResolveMethod,The method has 5 parameters.
Long Parameter List,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ResolveMethod,The method has 5 parameters.
Long Parameter List,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,SignaturesAreEqual,The method has 6 parameters.
Long Parameter List,Microsoft.Cci,MethodReference,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,MethodReference,The method has 7 parameters.
Long Parameter List,Microsoft.Cci,MethodReference,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,MethodReference,The method has 8 parameters.
Long Parameter List,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,ParameterListsAreEquivalent,The method has 5 parameters.
Long Parameter List,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,ParameterListsAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch,The method has 5 parameters.
Long Parameter List,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,ParameterListsAreEquivalent,The method has 5 parameters.
Long Parameter List,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,Resolve,The method has 6 parameters.
Long Parameter List,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,SizeOfType,The method has 5 parameters.
Long Parameter List,Microsoft.Cci,UnitHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UnitHelper.cs,GetType,The method has 5 parameters.
Long Parameter List,Microsoft.Cci,UnitHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UnitHelper.cs,GetNestedType,The method has 5 parameters.
Long Parameter List,Microsoft.Cci.Immutable,NamespaceTypeReference,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\PlatformTypes.cs,NamespaceTypeReference,The method has 8 parameters.
Long Parameter List,Microsoft.Cci.Immutable,NestedTypeReference,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\PlatformTypes.cs,NestedTypeReference,The method has 7 parameters.
Long Parameter List,Microsoft.Cci.Immutable,PlatformType,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\PlatformTypes.cs,CreateReference,The method has 5 parameters.
Long Parameter List,Microsoft.Cci.Immutable,FunctionPointerType,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,FunctionPointerType,The method has 7 parameters.
Long Parameter List,Microsoft.Cci.Immutable,Matrix,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,Matrix,The method has 5 parameters.
Long Parameter List,Microsoft.Cci.Immutable,Matrix,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,GetMatrix,The method has 5 parameters.
Long Parameter List,Microsoft.Cci.Immutable,SpecializedNestedTypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializedNestedTypeDefinition,The method has 5 parameters.
Long Identifier,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetNamespaceTypeReferenceInternId,The length of the parameter containingUnitNamespaceInteredId is 32.
Long Identifier,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetNestedTypeReferenceInternId,The length of the parameter containingTypeReferenceInteredId is 32.
Long Identifier,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetGenericMethodParameterReferenceInternId,The length of the parameter definingMethodReferenceInternId is 31.
Long Identifier,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetSignatureInternId,The length of the parameter requiredParameterTypesInternedId is 32.
Long Identifier,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetSignatureInternId,The length of the parameter returnValueCustomModifiersInternedId is 36.
Long Identifier,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetMethodReferenceInternedId,The length of the parameter containingTypeReferenceInternedId is 33.
Long Identifier,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetMethodReferenceInternedId,The length of the parameter requiredParameterTypesInternedId is 32.
Long Identifier,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetMethodReferenceInternedId,The length of the parameter returnValueCustomModifiersInternedId is 36.
Long Identifier,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetGenericMethodInstanceReferenceInternedKey,The length of the parameter genericMethodInstanceReference is 30.
Long Identifier,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetFieldReferenceInternedId,The length of the parameter containingTypeReferenceInternedId is 33.
Long Identifier,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetCustomModifierListInternId,The length of the parameter currentCustomModifierInternedId is 31.
Long Identifier,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetTypeReferenceInterendIdIgnoringCustomModifiers,The length of the parameter genericMethodParameterReference is 31.
Long Identifier,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ResolveMethod,The length of the parameter genericMethodInstanceReference is 30.
Long Identifier,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,Unspecialize,The length of the parameter potentiallySpecializedEventDefinition is 37.
Long Identifier,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,Unspecialize,The length of the parameter potentiallySpecializedFieldReference is 36.
Long Identifier,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,Unspecialize,The length of the parameter potentiallySpecializedFieldDefinition is 37.
Long Identifier,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,UninstantiateAndUnspecialize,The length of the parameter potentiallySpecializedMethodReference is 37.
Long Identifier,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,UninstantiateAndUnspecialize,The length of the parameter genericMethodInstanceReference is 30.
Long Identifier,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,Unspecialize,The length of the parameter potentiallySpecializedPropertyDefinition is 40.
Long Identifier,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the parameter genericMethodInstanceReference is 30.
Long Identifier,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the parameter genericMethodParameterReference is 31.
Long Identifier,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the parameter genericMethodInstanceReference is 30.
Long Identifier,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the parameter operationExceptionInformations is 30.
Long Identifier,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the parameter specializedNestedTypeDefinition is 31.
Long Identifier,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the parameter specializedNestedTypeReference is 30.
Long Identifier,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,DispatchAsReference,The length of the parameter genericMethodParameterReference is 31.
Long Identifier,Microsoft.Cci,BaseMetadataVisitor,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the parameter genericMethodInstanceReference is 30.
Long Identifier,Microsoft.Cci,BaseMetadataVisitor,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the parameter genericMethodParameterReference is 31.
Long Identifier,Microsoft.Cci,BaseMetadataVisitor,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the parameter specializedNestedTypeDefinition is 31.
Long Identifier,Microsoft.Cci,BaseMetadataVisitor,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the parameter specializedNestedTypeReference is 30.
Long Identifier,Microsoft.Cci,MetadataVisitor,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the parameter genericMethodInstanceReference is 30.
Long Identifier,Microsoft.Cci,MetadataVisitor,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the parameter genericMethodParameterReference is 31.
Long Identifier,Microsoft.Cci,MetadataVisitor,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the parameter specializedNestedTypeDefinition is 31.
Long Identifier,Microsoft.Cci,MetadataVisitor,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the parameter specializedNestedTypeReference is 30.
Long Identifier,Microsoft.Cci,MetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Traverse,The length of the parameter genericMethodInstanceReference is 30.
Long Identifier,Microsoft.Cci,MetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Traverse,The length of the parameter genericMethodParameterReference is 31.
Long Identifier,Microsoft.Cci,MetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Traverse,The length of the parameter specializedNestedTypeReference is 30.
Long Identifier,Microsoft.Cci,MetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Traverse,The length of the parameter operationExceptionInformations is 30.
Long Identifier,Microsoft.Cci,MetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,TraverseChildren,The length of the parameter genericMethodInstanceReference is 30.
Long Identifier,Microsoft.Cci,MetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,TraverseChildren,The length of the parameter genericMethodParameterReference is 31.
Long Identifier,Microsoft.Cci,MetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,TraverseChildren,The length of the parameter specializedNestedTypeReference is 30.
Long Identifier,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,GetDefiningUnitReference,The length of the parameter genericMethodParameterReference is 31.
Long Identifier,Microsoft.Cci.Immutable,SpecializedEventDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,SpecializeIfConstructed,The length of the parameter partiallySpecializedTypeReference is 33.
Long Identifier,Microsoft.Cci.Immutable,SpecializedFieldDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the parameter partiallySpecializedTypeReference is 33.
Long Identifier,Microsoft.Cci.Immutable,SpecializedGenericMethodParameter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the parameter partiallySpecializedTypeReference is 33.
Long Identifier,Microsoft.Cci.Immutable,SpecializedMethodBody,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,MapBody,The length of the parameter specializedOperationExceptionInformation is 40.
Long Identifier,Microsoft.Cci.Immutable,SpecializedMethodBody,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,MapBody,The length of the parameter unspecializedOperationException is 31.
Long Identifier,Microsoft.Cci.Immutable,SpecializedMethodDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the parameter partiallySpecializedTypeReference is 33.
Long Identifier,Microsoft.Cci.Immutable,SpecializedPropertyDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the parameter partiallySpecializedTypeReference is 33.
Long Identifier,Microsoft.Cci.Immutable,SpecializedNestedTypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,CopyAndSpecialize,The length of the parameter partiallySpecializedTypeReference is 33.
Long Identifier,Microsoft.Cci.Immutable,TypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,DeepCopyTypeReference,The length of the parameter partiallySpecializedTypeReference is 33.
Long Identifier,Microsoft.Cci.Immutable,TypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the parameter partiallySpecializedTypeReference is 33.
Long Identifier,Microsoft.Cci.Immutable,TypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the parameter partiallySpecializedTypeReference is 33.
Long Identifier,Microsoft.Cci.Immutable,TypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the parameter partiallySpecializedTypeReference is 33.
Long Statement,Microsoft.Cci,OptionParsing,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\CommandLineOptions.cs,SplitLineWithQuotes,The length of the statement  "					AddError ("Response file '{0}' line {1}' char {2} contains '\"' not starting or ending an argument"' responseFileName' lineNo' index); " is 134.
Long Statement,Microsoft.Cci,OptionParsing,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\CommandLineOptions.cs,GatherRequiredOptions,The length of the statement  "	foreach (var field in this.GetType ().GetFields (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public)) { " is 132.
Long Statement,Microsoft.Cci,OptionParsing,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\CommandLineOptions.cs,ParseValue,The length of the statement  "			foreach (System.Reflection.FieldInfo enumConstant in type.GetFields (System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public)) { " is 150.
Long Statement,Microsoft.Cci,OptionParsing,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\CommandLineOptions.cs,FindOptionByReflection,The length of the statement  "	System.Reflection.FieldInfo fi = this.GetType ().GetField (arg' System.Reflection.BindingFlags.IgnoreCase | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public); " is 189.
Long Statement,Microsoft.Cci,OptionParsing,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\CommandLineOptions.cs,FindOptionByReflection,The length of the statement  "		fi = this.GetType ().GetField (arg' System.Reflection.BindingFlags.IgnoreCase | System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public); " is 159.
Long Statement,Microsoft.Cci,OptionParsing,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\CommandLineOptions.cs,TryGetOptions,The length of the statement  "	var fi = this.GetType ().GetField (fieldWithOptions' System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.FlattenHierarchy | System.Reflection.BindingFlags.Public); " is 182.
Long Statement,Microsoft.Cci,OptionParsing,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\CommandLineOptions.cs,PrintOptions,The length of the statement  "	foreach (System.Reflection.FieldInfo f in this.GetType ().GetFields (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance)) { " is 152.
Long Statement,Microsoft.Cci,OptionParsing,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\CommandLineOptions.cs,PrintOptions,The length of the statement  "			foreach (System.Reflection.FieldInfo enumConstant in opttype.GetFields (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static)) { " is 153.
Long Statement,Microsoft.Cci,OptionParsing,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\CommandLineOptions.cs,PrintDerivedOptions,The length of the statement  "	foreach (System.Reflection.FieldInfo f in this.GetType ().GetFields (System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public)) { " is 150.
Long Statement,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetCoreAssemblySymbolicIdentity,The length of the statement  "				if (result == null || result.Version == dummyVersion || (result.Version < coreId.Version && coreId.Version != dummyVersion) || result.Version == coreId.Version && unit.UnitIdentity.Equals (coreId)) { " is 199.
Long Statement,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetCoreAssemblySymbolicIdentity,The length of the statement  "		//In this case' we have little option but to choose the identity of the core assembly of the platform we are running on. " is 120.
Long Statement,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetCoreAssemblySymbolicIdentity,The length of the statement  "		//We either found a plausible identity by polling the assemblies in the unit cache' or we used the identity of our own core assembly. " is 133.
Long Statement,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetCoreAssemblySymbolicIdentity,The length of the statement  "		//(Note that if result.Location.Length > 0' then the core assembly has already been loaded and we thus know the location and don't have to probe.) " is 146.
Long Statement,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,LoadAssembly,The length of the statement  "		if (string.IsNullOrEmpty (assemblyIdentity.Location) || string.Equals (assemblyIdentity.Location' "unknown://location"' StringComparison.OrdinalIgnoreCase)) { " is 158.
Long Statement,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,ReportError,The length of the statement  "		Microsoft.Cci.ErrorEventArgs errorEventArguments = new Microsoft.Cci.ErrorEventArgs (error.ErrorReporter' error.Location' errors.AsReadOnly ()); " is 144.
Long Statement,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,UnifyAssembly,The length of the statement  "	if (assemblyIdentity.Name.UniqueKeyIgnoringCase == this.CoreAssemblySymbolicIdentity.Name.UniqueKeyIgnoringCase && assemblyIdentity.Culture == this.CoreAssemblySymbolicIdentity.Culture && IteratorHelper.EnumerablesAreEqual (assemblyIdentity.PublicKeyToken' this.CoreAssemblySymbolicIdentity.PublicKeyToken)) " is 307.
Long Statement,Microsoft.Cci,IMetadataReaderHostContract,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GuessUnderlyingTypeSizeOfUnresolvableReferenceToEnum,The length of the statement  "	Contract.Ensures (Contract.Result<byte> () == 1 || Contract.Result<byte> () == 2 || Contract.Result<byte> () == 4 || Contract.Result<byte> () == 8); " is 148.
Long Statement,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,OpenBinaryDocument,The length of the statement  "		        IBinaryDocumentMemoryBlock binDocMemoryBlock = MemoryMappedFile.CreateMemoryMappedFile(sourceDocument.Location' sourceDocument);" is 128.
Long Statement,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,OpenBinaryDocument,The length of the statement  "		IBinaryDocumentMemoryBlock binDocMemoryBlock = UnmanagedBinaryMemoryBlock.CreateUnmanagedBinaryMemoryBlock (sourceDocument.Location' sourceDocument); " is 149.
Long Statement,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,OpenBinaryDocument,The length of the statement  "		        IBinaryDocumentMemoryBlock binDocMemoryBlock = MemoryMappedFile.CreateMemoryMappedFile(newBinaryDocument.Location' newBinaryDocument);" is 134.
Long Statement,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,OpenBinaryDocument,The length of the statement  "		IBinaryDocumentMemoryBlock binDocMemoryBlock = UnmanagedBinaryMemoryBlock.CreateUnmanagedBinaryMemoryBlock (newBinaryDocument.Location' newBinaryDocument); " is 155.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetNestedNamespaceInternId,The length of the statement  "	uint value = this.NestedNamespaceHashtable.Find (parentNamespaceInternedId' (uint)nestedUnitNamespaceReference.Name.UniqueKey); " is 127.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetNestedNamespaceInternId,The length of the statement  "		this.NestedNamespaceHashtable.Add (parentNamespaceInternedId' (uint)nestedUnitNamespaceReference.Name.UniqueKey' value); " is 120.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetUnitNamespaceInternId,The length of the statement  "	INestedUnitNamespaceReference /*?*/nestedUnitNamespaceReference = unitNamespaceReference as INestedUnitNamespaceReference; " is 122.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetNamespaceTypeReferenceInternId,The length of the statement  "		if (nsTypeStore.ContainingNamespaceInternedId == containingUnitNamespaceInteredId && nsTypeStore.GenericParameterCount == genericParameterCount) { " is 146.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetNamespaceTypeReferenceInternId,The length of the statement  "	NamespaceTypeStore nsTypeStore1 = new NamespaceTypeStore (containingUnitNamespaceInteredId' genericParameterCount' this.CurrentTypeInternValue++); " is 146.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetNestedTypeReferenceInternId,The length of the statement  "		if (nstTypeStore.ContainingTypeInternedId == containingTypeReferenceInteredId && nstTypeStore.GenericParameterCount == genericParameterCount) { " is 143.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetNestedTypeReferenceInternId,The length of the statement  "	NestedTypeStore nstTypeStore1 = new NestedTypeStore (containingTypeReferenceInteredId' genericParameterCount' this.CurrentTypeInternValue++); " is 141.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetMatrixTypeReferenceInternId,The length of the statement  "		if (matrixTypeStore.Rank == rank && IteratorHelper.EnumerablesAreEqual<ulong> (matrixTypeStore.Sizes' sizes) && IteratorHelper.EnumerablesAreEqual<int> (matrixTypeStore.LowerBounds' lowerBounds)) " is 195.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetMatrixTypeReferenceInternId,The length of the statement  "	MatrixTypeStore matrixTypeStore1 = new MatrixTypeStore (rank' new List<int> (lowerBounds).ToArray ()' new List<ulong> (sizes).ToArray ()' this.CurrentTypeInternValue++); " is 169.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetGenericTypeParameterReferenceInternId,The length of the statement  "	uint definingTypeReferenceInternId = this.GetTypeReferenceInternId (GetUninstantiatedGenericType (definingTypeReference)); " is 122.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetParameterTypeInternId,The length of the statement  "		customModifiersInternId = this.GetCustomModifierListInternId (parameterTypeInformation.CustomModifiers.GetEnumerator ()); " is 121.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetParameterTypeInternId,The length of the statement  "		if (parameterTypeStore.IsByReference == parameterTypeInformation.IsByReference && parameterTypeStore.CustomModifiersInternId == customModifiersInternId) { " is 154.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetParameterTypeInternId,The length of the statement  "	ParameterTypeStore parameterTypeStore1 = new ParameterTypeStore (parameterTypeInformation.IsByReference' customModifiersInternId' this.CurrentParameterTypeInternValue++); " is 170.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetSignatureInternId,The length of the statement  "	uint returnValueCustomModifiersInternedId = this.GetCustomModifierListInternId (returnValueCustomModifiers.GetEnumerator ()); " is 125.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetSignatureInternId,The length of the statement  "		if (signatureStore.CallingConvention == callingConvention && signatureStore.RequiredParameterListInternedId == requiredParameterTypesInternedId && signatureStore.ExtraParameterListInternedId == extraArgumentTypesInteredId && signatureStore.ReturnValueCustomModifiersListInteredId == returnValueCustomModifiersInternedId && signatureStore.ReturnValueIsByRef == returnValueIsByRef && signatureStore.ReturnTypeReferenceInternedId == returnTypeReferenceInternedId) { " is 462.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetSignatureInternId,The length of the statement  "	SignatureStore signatureStore1 = new SignatureStore (callingConvention' requiredParameterTypesInternedId' extraArgumentTypesInteredId' returnValueIsByRef' returnValueCustomModifiersInternedId' returnTypeReferenceInternedId' 0' this.CurrentSignatureInternValue++); " is 263.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetMethodReferenceInternedId,The length of the statement  "	uint requiredParameterTypesInternedId = this.GetParameterTypeListInternId (methodReference.Parameters.GetEnumerator ()); " is 120.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetMethodReferenceInternedId,The length of the statement  "		returnValueCustomModifiersInternedId = this.GetCustomModifierListInternId (methodReference.ReturnValueCustomModifiers.GetEnumerator ()); " is 136.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetMethodReferenceInternedId,The length of the statement  "		if (signatureStore.CallingConvention == methodReference.CallingConvention && signatureStore.RequiredParameterListInternedId == requiredParameterTypesInternedId && signatureStore.ReturnValueCustomModifiersListInteredId == returnValueCustomModifiersInternedId && signatureStore.ReturnValueIsByRef == methodReference.ReturnValueIsByRef && signatureStore.ReturnTypeReferenceInternedId == returnTypeReferenceInternedId && signatureStore.GenericParameterCount == genericParameterCount) { " is 481.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetMethodReferenceInternedId,The length of the statement  "	SignatureStore signatureStore1 = new SignatureStore (methodReference.CallingConvention' requiredParameterTypesInternedId' 0' methodReference.ReturnValueIsByRef' returnValueCustomModifiersInternedId' returnTypeReferenceInternedId' genericParameterCount' this.CurrentMethodReferenceInternValue++); " is 295.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetGenericMethodInstanceReferenceInternedKey,The length of the statement  "	uint genericArgumentsInternedId = this.GetTypeReferenceListInternedId (genericMethodInstanceReference.GenericArguments.GetEnumerator ()); " is 137.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetFunctionPointerTypeReferenceInternId,The length of the statement  "	uint signatureInternedId = this.GetSignatureInternId (callingConvention' parameters' extraArgumentTypes' returnValueCustomModifiers' returnValueIsByRef' returnType); " is 165.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetTypeReferenceInterendIdIgnoringCustomModifiers,The length of the statement  "		return this.GetNamespaceTypeReferenceInternId (namespaceTypeReference.ContainingUnitNamespace' namespaceTypeReference.Name' namespaceTypeReference.GenericParameterCount); " is 170.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetTypeReferenceInterendIdIgnoringCustomModifiers,The length of the statement  "		return this.GetNestedTypeReferenceInternId (nestedTypeReference.ContainingType' nestedTypeReference.Name' nestedTypeReference.GenericParameterCount); " is 149.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetTypeReferenceInterendIdIgnoringCustomModifiers,The length of the statement  "			return this.GetMatrixTypeReferenceInternId (arrayTypeReference.ElementType' (int)arrayTypeReference.Rank' arrayTypeReference.Sizes' arrayTypeReference.LowerBounds); " is 164.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetTypeReferenceInterendIdIgnoringCustomModifiers,The length of the statement  "		return this.GetGenericTypeInstanceReferenceInternId (genericTypeInstanceReference.GenericType' genericTypeInstanceReference.GenericArguments); " is 142.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetTypeReferenceInterendIdIgnoringCustomModifiers,The length of the statement  "		return this.GetGenericTypeParameterReferenceInternId (genericTypeParameterReference.DefiningType' (int)genericTypeParameterReference.Index); " is 140.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetTypeReferenceInterendIdIgnoringCustomModifiers,The length of the statement  "	IGenericMethodParameterReference /*?*/genericMethodParameterReference = typeReference as IGenericMethodParameterReference; " is 122.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetTypeReferenceInterendIdIgnoringCustomModifiers,The length of the statement  "		return this.GetGenericMethodParameterReferenceInternId (genericMethodParameterReference.DefiningMethod' genericMethodParameterReference.Index); " is 143.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetTypeReferenceInterendIdIgnoringCustomModifiers,The length of the statement  "		return this.GetFunctionPointerTypeReferenceInternId (functionPointerTypeReference.CallingConvention' functionPointerTypeReference.Parameters' functionPointerTypeReference.ExtraArgumentTypes' returnValueCustomModifiers' functionPointerTypeReference.ReturnValueIsByRef' functionPointerTypeReference.Type); " is 303.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetTypeReferenceInterendIdIgnoringCustomModifiers,The length of the statement  "	//^ assume false; //It is an informal requirement that all classes implementing ITypeReference should produce a non null result for one of the calls above. " is 155.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetTypeReferenceInternId,The length of the statement  "		return this.GetModifiedTypeReferenceInternId (modifiedTypeReference.UnmodifiedType' modifiedTypeReference.CustomModifiers); " is 123.
Long Statement,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetFunctionPointerTypeReferenceInternedKey,The length of the statement  "		return this.GetFunctionPointerTypeReferenceInternId (callingConvention' parameters' extraArgumentTypes' returnValueCustomModifiers' returnValueIsByRef' returnType); " is 164.
Long Statement,Microsoft.Cci,NameTable,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetNameFor,The length of the statement  "			//^ assume result.Value == name; //Only this routine ever adds entries to the table and it only ever adds entries for which this is true. TODO: it would be nice to be able express this as an invariant. " is 201.
Long Statement,Microsoft.Cci,NameTable,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetNameFor,The length of the statement  "		//string lowerCaseName = name.ToLower(CultureInfo.InvariantCulture); //REVIEW: is it safer to use ToUpperInvariant' or does it make no difference? " is 146.
Long Statement,Microsoft.Cci,GlobalAssemblyCache,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\GlobalAssemblyCache.cs,Contains,The length of the statement  "		        var gacKey = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(@"\Software\Microsoft\.NETCompactFramework\Installer\Assemblies\Global");" is 135.
Long Statement,Microsoft.Cci,GlobalAssemblyCache,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\GlobalAssemblyCache.cs,GetLocation,The length of the statement  "		        var gacKey = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(@"\Software\Microsoft\.NETCompactFramework\Installer\Assemblies\Global");" is 135.
Long Statement,Microsoft.Cci,GlobalAssemblyCache,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\GlobalAssemblyCache.cs,GetLocation,The length of the statement  "			if (assemblyIdentity.Equals (new AssemblyIdentity (metadataHost.NameTable.GetNameFor (cn.Name)' cn.Culture' cn.Version' cn.PublicKeyToken' ""))) { " is 146.
Long Statement,Microsoft.Cci,AssemblyName,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\GlobalAssemblyCache.cs,GetLocation,The length of the statement  "	assemblyCache.QueryAssemblyInfo (ASSEMBLYINFO_FLAG.VALIDATE | ASSEMBLYINFO_FLAG.GETSIZE' this.StrongName' ref assemblyInfo); " is 124.
Long Statement,Microsoft.Cci,AssemblyName,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\GlobalAssemblyCache.cs,GetLocation,The length of the statement  "	assemblyCache.QueryAssemblyInfo (ASSEMBLYINFO_FLAG.VALIDATE | ASSEMBLYINFO_FLAG.GETSIZE' this.StrongName' ref assemblyInfo); " is 124.
Long Statement,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ComputeFieldOffset,The length of the statement  "		List<IFieldDefinition> fields = new List<IFieldDefinition> (IteratorHelper.GetFilterEnumerable<ITypeDefinitionMember' IFieldDefinition> (members)); " is 147.
Long Statement,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,GetExplicitlyOverriddenMethods,The length of the statement  "	foreach (IMethodImplementation methodImplementation in overridingMethod.ContainingTypeDefinition.ExplicitImplementationOverrides) { " is 131.
Long Statement,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,GetFieldBitOffset,The length of the statement  "		List<IFieldDefinition> fields = new List<IFieldDefinition> (IteratorHelper.GetFilterEnumerable<ITypeDefinitionMember' IFieldDefinition> (members)); " is 147.
Long Statement,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,GetImplicitlyImplementedInterfaceMethods,The length of the statement  "	foreach (IMethodImplementation methodImplementation in implementingMethod.ContainingTypeDefinition.ExplicitImplementationOverrides) { " is 133.
Long Statement,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,GetImplicitlyImplementedInterfaceMethods,The length of the statement  "		foreach (ITypeDefinitionMember interfaceMember in interfaceReference.ResolvedType.GetMembersNamed (implementingMethod.Name' false)) { " is 133.
Long Statement,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,GetImplicitlyOverriddenBaseClassMethod,The length of the statement  "		IMethodDefinition overriddenMethod = GetImplicitlyOverriddenBaseClassMethod (derivedClassMethod' baseClassReference.ResolvedType); " is 130.
Long Statement,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,GetImplicitlyOverriddenBaseClassMethod,The length of the statement  "		IMethodDefinition overriddenMethod = GetImplicitlyOverriddenBaseClassMethod (derivedClassMethod' baseClassReference.ResolvedType); " is 130.
Long Statement,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,IsVisibleOutsideAssembly,The length of the statement  "		return IsExplicitImplementationVisible (propertyDefinition.Getter' containingTypeDefinition) || IsExplicitImplementationVisible (propertyDefinition.Setter' containingTypeDefinition); " is 182.
Long Statement,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,IsVisibleOutsideAssembly,The length of the statement  "		return IsExplicitImplementationVisible (eventDefinition.Adder' containingTypeDefinition) || IsExplicitImplementationVisible (eventDefinition.Remover' containingTypeDefinition); " is 176.
Long Statement,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,IsExplicitImplementationVisible,The length of the statement  "			//If the method being implemented did not resolve it can only be because it is actually defined in another assembly' which implies that it is visible outside its assembly' " is 171.
Long Statement,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,IsExplicitImplementationVisible,The length of the statement  "			//at least in the case where the implemented method is public or internal. Since we can't know that without resolving the method' we'll err on the "safe" side. " is 159.
Long Statement,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ResolveMethod,The length of the statement  "	IMethodDefinition result = TypeHelper.GetMethod (declaringType.GetMembersNamed (methodReference.Name' false)' methodReference' resolveTypes: true); " is 147.
Long Statement,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,SignaturesAreEqual,The length of the statement  "	return IteratorHelper.EnumerablesAreEqual (signature1.Parameters' signature2.Parameters' resolveTypes ? ResolvingParameterInformationComparer : ParameterInformationComparer); " is 174.
Long Statement,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,GenericMethodSignaturesAreEqual,The length of the statement  "	if (!TypeHelper.TypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch (method1.Type' method2.Type' resolveTypes)) " is 141.
Long Statement,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,GenericMethodSignaturesAreEqual,The length of the statement  "	return IteratorHelper.EnumerablesAreEqual (method1.Parameters' method2.Parameters' resolveTypes ? ResolvingGenericMethodParameterEqualityComparer : GenericMethodParameterEqualityComparer); " is 188.
Long Statement,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ResolveMethod,The length of the statement  "		var genericMethDef = MemberHelper.ResolveMethod (genericMethodInstanceReference.GenericMethod' host' unit' unitNamespace' type); " is 128.
Long Statement,Microsoft.Cci,MethodReference,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ToString,The length of the statement  "	return MemberHelper.GetMethodSignature (this' NameFormattingOptions.ReturnType | NameFormattingOptions.TypeParameters | NameFormattingOptions.Signature); " is 153.
Long Statement,Microsoft.Cci,GenericMethodParameterInformationComparer,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,Equals,The length of the statement  "	return TypeHelper.TypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch (x.Type' y.Type' this.resolveTypes); " is 136.
Long Statement,Microsoft.Cci,SignatureFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,GetEventSignature,The length of the statement  "		sb.Append (this.typeNameFormatter.GetTypeName (eventDef.ContainingType' formattingOptions & ~(NameFormattingOptions.MemberKind | NameFormattingOptions.DocumentationIdMemberKind))); " is 180.
Long Statement,Microsoft.Cci,SignatureFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,GetFieldSignature,The length of the statement  "	if ((formattingOptions & NameFormattingOptions.Signature) != 0 && (formattingOptions & NameFormattingOptions.DocumentationIdMemberKind) == 0) { " is 143.
Long Statement,Microsoft.Cci,SignatureFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,GetFieldSignature,The length of the statement  "		sb.Append (this.typeNameFormatter.GetTypeName (field.ContainingType' formattingOptions & ~(NameFormattingOptions.MemberKind | NameFormattingOptions.DocumentationIdMemberKind))); " is 177.
Long Statement,Microsoft.Cci,SignatureFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,GetMethodSignature,The length of the statement  "	if ((formattingOptions & NameFormattingOptions.FormattingForDocumentationId) != 0 && method.ResolvedMethod.IsSpecialName && (method.Name.Value.Contains ("op_Explicit") || method.Name.Value.Contains ("op_Implicit"))) { " is 217.
Long Statement,Microsoft.Cci,SignatureFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,GetMethodSignature,The length of the statement  "		sb.Append (this.typeNameFormatter.GetTypeName (method.Type' formattingOptions & ~(NameFormattingOptions.MemberKind | NameFormattingOptions.DocumentationIdMemberKind))); " is 168.
Long Statement,Microsoft.Cci,SignatureFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,AppendMethodParameters,The length of the statement  "	if ((formattingOptions & NameFormattingOptions.Signature) == 0 || ((formattingOptions & NameFormattingOptions.FormattingForDocumentationId) != 0 && !IteratorHelper.EnumerableIsNotEmpty<IParameterTypeInformation> (parameters))) " is 226.
Long Statement,Microsoft.Cci,SignatureFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,AppendMethodParameters,The length of the statement  "			if (!parameter.MustBeReferenceType && !parameter.MustBeValueType && !parameter.MustHaveDefaultConstructor && IteratorHelper.EnumerableIsEmpty (parameter.Constraints)) " is 166.
Long Statement,Microsoft.Cci,SignatureFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,AppendMethodName,The length of the statement  "		sb.Append (this.typeNameFormatter.GetTypeName (method.ContainingType' formattingOptions & ~(NameFormattingOptions.MemberKind | NameFormattingOptions.DocumentationIdMemberKind | NameFormattingOptions.TypeConstraints))); " is 218.
Long Statement,Microsoft.Cci,SignatureFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,AppendParameter,The length of the statement  "	sb.Append (this.typeNameFormatter.GetTypeName (param.Type' formattingOptions & ~(NameFormattingOptions.MemberKind | NameFormattingOptions.DocumentationIdMemberKind))); " is 167.
Long Statement,Microsoft.Cci,SignatureFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,AppendPropertyName,The length of the statement  "		sb.Append (this.typeNameFormatter.GetTypeName (property.ContainingType' formattingOptions & ~(NameFormattingOptions.MemberKind | NameFormattingOptions.DocumentationIdMemberKind))); " is 180.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not to decrease this.path.Count. " is 136.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not to decrease this.path.Count. " is 136.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not to decrease this.path.Count. " is 138.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	if (marshallingInformation.UnmanagedType == System.Runtime.InteropServices.UnmanagedType.SafeArray && (marshallingInformation.SafeArrayElementSubtype == System.Runtime.InteropServices.VarEnum.VT_DISPATCH || marshallingInformation.SafeArrayElementSubtype == System.Runtime.InteropServices.VarEnum.VT_UNKNOWN || marshallingInformation.SafeArrayElementSubtype == System.Runtime.InteropServices.VarEnum.VT_RECORD)) " is 410.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not to decrease this.path.Count. " is 138.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not to decrease this.path.Count.      this.path.Pop(); " is 160.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not to decrease this.path.Count. " is 138.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not to decrease this.path.Count. " is 138.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not to decrease this.path.Count. " is 138.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	IGenericMethodInstanceReference /*?*/genericMethodInstanceReference = methodReference as IGenericMethodInstanceReference; " is 121.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "		//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,DispatchAsReference,The length of the statement  "	IGenericMethodParameterReference /*?*/genericMethodParameterReference = typeReference as IGenericMethodParameterReference; " is 122.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The length of the statement  "	//^ assume this.path.Count == oldCount+1; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 135.
Long Statement,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,VisitMethodReturnAttributes,The length of the statement  "	//^ assume this.path.Count == oldCount; //True because all of the virtual methods of this class promise not decrease this.path.Count. " is 133.
Long Statement,Microsoft.Cci,MetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,TraverseChildren,The length of the statement  "	//field reference attributes are distinct from field definition attributes. When a definition serves as a reference' the reference is assumed to be unattributed. " is 161.
Long Statement,Microsoft.Cci,MetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,TraverseChildren,The length of the statement  "	if (marshallingInformation.UnmanagedType == System.Runtime.InteropServices.UnmanagedType.SafeArray && (marshallingInformation.SafeArrayElementSubtype == System.Runtime.InteropServices.VarEnum.VT_DISPATCH || marshallingInformation.SafeArrayElementSubtype == System.Runtime.InteropServices.VarEnum.VT_UNKNOWN || marshallingInformation.SafeArrayElementSubtype == System.Runtime.InteropServices.VarEnum.VT_RECORD)) " is 410.
Long Statement,Microsoft.Cci,MetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,TraverseChildren,The length of the statement  "	//method reference attributes are distinct from method definition attributes. When a definition serves as a reference' the reference is assumed to be unattributed. " is 163.
Long Statement,Microsoft.Cci,MetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,TraverseChildren,The length of the statement  "	if (operationExceptionInformation.HandlerKind == HandlerKind.Catch || operationExceptionInformation.HandlerKind == HandlerKind.Filter) " is 134.
Long Statement,Microsoft.Cci,MetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,TraverseChildren,The length of the statement  "	//type reference attributes are distinct from type definition attributes. When a definition serves as a reference' the reference is assumed to be unattributed. " is 159.
Long Statement,Microsoft.Cci,MetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,TraverseChildren,The length of the statement  "	//unit reference attributes are distinct from unit definition attributes. When a definition serves as a reference' the reference is assumed to be unattributed. " is 159.
Long Statement,Microsoft.Cci,ClrHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,ClrOperandStackTypeFor,The length of the statement  "	Contract.Ensures (Contract.Result<ClrOperandStackType> () >= ClrOperandStackType.Int32 && Contract.Result<ClrOperandStackType> () <= ClrOperandStackType.Invalid); " is 162.
Long Statement,Microsoft.Cci,ClrHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,ClrOperandStackTypeFor,The length of the statement  "	Contract.Ensures (Contract.Result<ClrOperandStackType> () >= ClrOperandStackType.Int32 && Contract.Result<ClrOperandStackType> () < ClrOperandStackType.Invalid); " is 161.
Long Statement,Microsoft.Cci,ClrHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,ConversionPossible,The length of the statement  "		return toType == PrimitiveTypeCode.Int64 || toType == PrimitiveTypeCode.UInt64 || toType == PrimitiveTypeCode.IntPtr || toType == PrimitiveTypeCode.UIntPtr; " is 156.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,CanAccess,The length of the statement  "	if (typeDefinition.IsGeneric && TypeHelper.TypesAreEquivalent (typeDefinition.InstanceType' member.ContainingTypeDefinition)) " is 125.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,CanAccess,The length of the statement  "		return TypeHelper.GetDefiningUnit (typeDefinition).UnitIdentity.Equals (TypeHelper.GetDefiningUnit (member.ContainingTypeDefinition).UnitIdentity); " is 147.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,CanAccess,The length of the statement  "		return TypeHelper.GetDefiningUnit (typeDefinition).UnitIdentity.Equals (TypeHelper.GetDefiningUnit (member.ContainingTypeDefinition).UnitIdentity) && TypeHelper.Type1DerivesFromOrIsTheSameAsType2 (typeDefinition' member.ContainingTypeDefinition); " is 246.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,CanAccess,The length of the statement  "		return TypeHelper.GetDefiningUnit (typeDefinition).UnitIdentity.Equals (TypeHelper.GetDefiningUnit (member.ContainingTypeDefinition)) || TypeHelper.Type1DerivesFromOrIsTheSameAsType2 (typeDefinition' member.ContainingTypeDefinition); " is 233.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,EffectiveBaseClass,The length of the statement  "	Contract.Ensures (Contract.Result<ITypeDefinition> () == Dummy.TypeDefinition || Contract.Result<ITypeDefinition> ().IsClass); " is 126.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,IsCompilerGenerated,The length of the statement  "		if (AttributeHelper.Contains (type.Attributes' type.PlatformType.SystemRuntimeCompilerServicesCompilerGeneratedAttribute)) " is 122.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,TypeVisibilityAsTypeMemberVisibility,The length of the statement  "	// supposedly the only thing that doesn't meet any of the below tests are type parameters and their "default" is public. " is 120.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,TypeVisibilityAsTypeMemberVisibility,The length of the statement  "				result = TypeHelper.GenericInstanceVisibilityAsTypeMemberVisibility (TypeVisibilityAsTypeMemberVisibility (genType.GenericType.ResolvedType)' genType.GenericArguments); " is 168.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,GetDefiningUnitReference,The length of the statement  "	IGenericMethodParameterReference /*?*/genericMethodParameterReference = typeReference as IGenericMethodParameterReference; " is 122.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,GetMethod,The length of the statement  "	IMethodDefinition result = TypeHelper.GetMethod (declaringType.GetMembersNamed (methodReference.Name' false)' methodReference' resolveTypes); " is 141.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,TryGetFullyInstantiatedSpecializedTypeReference,The length of the statement  "		if (TryGetFullyInstantiatedSpecializedTypeReference (nestedType.ContainingTypeDefinition' out containingTypeReference)) { " is 121.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,MostDerivedCommonBaseClass,The length of the statement  "		//If type1 and type2 at method entry were both structs' depth1 == depth2 == 1 and neither type1 nor type2 is a class during the first iteration of the loop " is 155.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,ParametersAreEquivalent,The length of the statement  "	if (param1.IsByReference != param2.IsByReference || param1.IsModified != param1.IsModified || !TypeHelper.TypesAreEquivalent (param1.Type' param2.Type' resolveTypes)) " is 166.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,ParametersAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch,The length of the statement  "	if (param1.IsByReference != param2.IsByReference || param1.IsModified != param1.IsModified || !TypeHelper.TypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch (param1.Type' param2.Type' resolveTypes)) " is 229.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,ParametersAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch,The length of the statement  "			if (!TypeHelper.TypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch (customModifier1.Modifier' customModifier2.Modifier' resolveTypes)) " is 165.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,ParameterListsAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch,The length of the statement  "		if (!TypeHelper.ParametersAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch (parameter1' parameter2' resolveTypes)) " is 142.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,Resolve,The length of the statement  "			if (nsTypeDef != null && nsTypeRef.GenericParameterCount == nsTypeDef.GenericParameterCount && (!nsTypeRef.IsEnum || nsTypeDef.IsEnum) && (!nsTypeRef.IsValueType || nsTypeDef.IsValueType) && nsTypeRef.TypeCode == nsTypeDef.TypeCode) " is 232.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,Resolve,The length of the statement  "				if (neTypeDef != null && nestedTypeRef.GenericParameterCount == neTypeDef.GenericParameterCount && (!nestedTypeRef.IsEnum || neTypeDef.IsEnum) && (!nestedTypeRef.IsValueType || neTypeDef.IsValueType) && nestedTypeRef.TypeCode == neTypeDef.TypeCode) " is 248.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,Resolve,The length of the statement  "		var definingMethod = MemberHelper.ResolveMethod (genericMethodTypeParameterRef.DefiningMethod' host' unit' unitNamespace' type); " is 128.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,Resolve,The length of the statement  "		var genericTypeDef = TypeHelper.Resolve (genericTypeInstanceRef.GenericType' host' unit' unitNamespace' type' method) as INamedTypeDefinition; " is 142.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,Resolve,The length of the statement  "		return GenericTypeInstance.GetGenericTypeInstance (genericTypeDef' IteratorHelper.GetReadonly (genericArguments)' host.InternFactory); " is 134.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,Resolve,The length of the statement  "		return ModifiedPointerType.GetModifiedPointerType (targetTypeDef' IteratorHelper.GetReadonly (customModifiers)' host.InternFactory); " is 132.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,SizeOfType,The length of the statement  "			List<IFieldDefinition> fields = new List<IFieldDefinition> (IteratorHelper.GetFilterEnumerable<ITypeDefinitionMember' IFieldDefinition> (members)); " is 147.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,ArrayTypesAreEquivalent,The length of the statement  "	if (!IteratorHelper.EnumerablesAreEqual<ulong> (arrayTypeRef1.Sizes' arrayTypeRef2.Sizes) || !IteratorHelper.EnumerablesAreEqual<int> (arrayTypeRef1.LowerBounds' arrayTypeRef2.LowerBounds)) { " is 191.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,FunctionPointerTypesAreEquivalent,The length of the statement  "	return TypeHelper.ParameterListsAreEquivalent (functionPointer1.ExtraArgumentTypes' functionPointer2.ExtraArgumentTypes' resolveTypes); " is 135.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,FunctionPointerTypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch,The length of the statement  "	if (!TypeHelper.TypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch (functionPointer1.Type' functionPointer2.Type' resolveTypes)) " is 159.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,FunctionPointerTypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch,The length of the statement  "	return TypeHelper.ParameterListsAreEquivalent (functionPointer1.ExtraArgumentTypes' functionPointer2.ExtraArgumentTypes' resolveTypes); " is 135.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,TypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch,The length of the statement  "		if (!TypeHelper.TypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch (inst1.GenericType' inst2.GenericType' resolveTypes)) " is 151.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,TypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch,The length of the statement  "		return IteratorHelper.EnumerablesAreEqual<ITypeReference> (inst1.GenericArguments' inst2.GenericArguments' resolveTypes ? RelaxedTypeEquivalenceComparer.resolvingInstance : RelaxedTypeEquivalenceComparer.instance); " is 214.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,TypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch,The length of the statement  "		return TypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch (array1.ElementType' array2.ElementType' resolveTypes); " is 144.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,TypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch,The length of the statement  "		return TypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch (pointer1.TargetType' pointer2.TargetType' resolveTypes); " is 146.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,TypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch,The length of the statement  "		return TypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch (mpointer1.TargetType' mpointer2.TargetType' resolveTypes); " is 148.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,TypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch,The length of the statement  "		return TypeHelper.FunctionPointerTypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch (fpointer1' fpointer2' resolveTypes); " is 152.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,Type1IsCovariantWithType2,The length of the statement  "	return TypeHelper.TypesAreAssignmentCompatible (arrType1.ElementType.ResolvedType' arrType2.ElementType.ResolvedType' resolveTypes); " is 132.
Long Statement,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,TypesAreAssignmentCompatible,The length of the statement  "	if (sourceType.IsInterface && TypeHelper.TypesAreEquivalent (targetType' targetType.PlatformType.SystemObject' resolveTypes)) " is 125.
Long Statement,Microsoft.Cci,TypeNameFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,AddGenericParametersIfNeeded,The length of the statement  "	if ((formattingOptions & NameFormattingOptions.TypeParameters) != 0 && (formattingOptions & NameFormattingOptions.FormattingForDocumentationId) == 0 && genericParameterCount > 0 && !(type.ResolvedType is Dummy)) { " is 213.
Long Statement,Microsoft.Cci,TypeNameFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,AddGenericParametersIfNeeded,The length of the statement  "				if (!parameter.MustBeReferenceType && !parameter.MustBeValueType && !parameter.MustHaveDefaultConstructor && IteratorHelper.EnumerableIsEmpty (parameter.Constraints)) " is 166.
Long Statement,Microsoft.Cci,TypeNameFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,GetNamespaceTypeName,The length of the statement  "	if ((formattingOptions & NameFormattingOptions.SupressAttributeSuffix) != 0 && AttributeHelper.IsAttributeType (nsType.ResolvedType) & tname.EndsWith ("Attribute"' StringComparison.Ordinal)) " is 190.
Long Statement,Microsoft.Cci,TypeNameFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,GetNamespaceTypeName,The length of the statement  "	if ((formattingOptions & NameFormattingOptions.OmitContainingNamespace) == 0 && !(nsType.ContainingUnitNamespace is IRootUnitNamespaceReference)) " is 145.
Long Statement,Microsoft.Cci,TypeNameFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,GetNamespaceName,The length of the statement  "		if (nestedUnitSetNamespace.ContainingNamespace.Name.Value.Length == 0 || (formattingOptions & NameFormattingOptions.OmitContainingNamespace) != 0) { " is 148.
Long Statement,Microsoft.Cci,TypeNameFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,GetNamespaceName,The length of the statement  "			return this.GetNamespaceName (nestedUnitSetNamespace.ContainingUnitSetNamespace' formattingOptions) + "." + nestedUnitSetNamespace.Name.Value; " is 142.
Long Statement,Microsoft.Cci,TypeNameFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,GetNamespaceName,The length of the statement  "		if (nestedUnitNamespace.ContainingUnitNamespace is IRootUnitNamespaceReference || (formattingOptions & NameFormattingOptions.OmitContainingNamespace) != 0) { " is 157.
Long Statement,Microsoft.Cci,TypeNameFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,GetNamespaceName,The length of the statement  "			return this.GetNamespaceName (nestedUnitNamespace.ContainingUnitNamespace' formattingOptions) + "." + nestedUnitNamespace.Name.Value; " is 133.
Long Statement,Microsoft.Cci,TypeNameFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,GetNestedTypeName,The length of the statement  "	if ((formattingOptions & NameFormattingOptions.SupressAttributeSuffix) != 0 && AttributeHelper.IsAttributeType (nestedType.ResolvedType) & tname.EndsWith ("Attribute"' StringComparison.Ordinal)) " is 194.
Long Statement,Microsoft.Cci,TypeNameFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,GetNestedTypeName,The length of the statement  "		tname = this.GetTypeName (nestedType.ContainingType' formattingOptions & ~(NameFormattingOptions.MemberKind | NameFormattingOptions.Visibility | NameFormattingOptions.TypeConstraints)) + delim + tname; " is 201.
Long Statement,Microsoft.Cci,TypeNameFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,GetGenericTypeInstanceName,The length of the statement  "		StringBuilder sb = new StringBuilder (this.GetTypeName (genericType' formattingOptions & ~(NameFormattingOptions.TypeParameters | ((formattingOptions & NameFormattingOptions.FormattingForDocumentationId) != 0 ? NameFormattingOptions.UseGenericTypeNameSuffix : NameFormattingOptions.None)))); " is 291.
Long Statement,Microsoft.Cci,TypeNameFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,GetGenericTypeInstanceName,The length of the statement  "			sb.Append (this.GetTypeName (argument' formattingOptions & ~(NameFormattingOptions.MemberKind | NameFormattingOptions.DocumentationIdMemberKind))); " is 147.
Long Statement,Microsoft.Cci,UnitHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UnitHelper.cs,AssemblyOneAllowsAssemblyTwoToAccessItsInternals,The length of the statement  "		if (!TypeHelper.TypesAreEquivalent (attribute.Type' assembly1.PlatformType.SystemRuntimeCompilerServicesInternalsVisibleToAttribute)) " is 133.
Long Statement,Microsoft.Cci,UnitHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UnitHelper.cs,GetAssemblyIdentity,The length of the statement  "	string culture = assemblyName.CultureInfo == null || assemblyName.CultureInfo == System.Globalization.CultureInfo.InvariantCulture ? "neutral" : assemblyName.CultureInfo.ToString (); " is 182.
Long Statement,Microsoft.Cci,UnitHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UnitHelper.cs,GetAssemblyIdentity,The length of the statement  "		return new AssemblyIdentity (assembly.Name' assembly.Culture' assembly.Version' UnitHelper.ComputePublicKeyToken (pKey)' assembly.Location); " is 140.
Long Statement,Microsoft.Cci,UnitHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UnitHelper.cs,StrongName,The length of the statement  "	sb.AppendFormat (CultureInfo.InvariantCulture' "' Version={0}.{1}.{2}.{3}"' assemblyReference.Version.Major' assemblyReference.Version.Minor' assemblyReference.Version.Build' assemblyReference.Version.Revision); " is 211.
Long Statement,Microsoft.Cci,UnitHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UnitHelper.cs,StrongName,The length of the statement  "	sb.AppendFormat (CultureInfo.InvariantCulture' "' Version={0}.{1}.{2}.{3}"' assemblyIdentity.Version.Major' assemblyIdentity.Version.Minor' assemblyIdentity.Version.Build' assemblyIdentity.Version.Revision); " is 207.
Long Statement,Microsoft.Cci,UnitHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UnitHelper.cs,FindType,The length of the statement  "	INamedTypeDefinition /*?*/result = GetType (nameTable' unit.UnitNamespaceRoot' typeName' genericParameterCount' ref offset); " is 124.
Long Statement,Microsoft.Cci,UnitHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UnitHelper.cs,GetType,The length of the statement  "			var nt = GetNestedType (nameTable' namespaceType' typeName' genericParameterCount - namespaceType.GenericParameterCount' ref offset); " is 133.
Long Statement,Microsoft.Cci,UnitHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UnitHelper.cs,GetNestedType,The length of the statement  "		var nt = GetNestedType (nameTable' nestedType' typeName' genericParameterCount - nestedType.GenericParameterCount' ref offset); " is 127.
Long Statement,Microsoft.Cci,UnitHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UnitHelper.cs,UnitNamespacesAreEquivalent,The length of the statement  "		return nstUnitNamespace1.Name.UniqueKey == nstUnitNamespace2.Name.UniqueKey && UnitHelper.UnitNamespacesAreEquivalent (nstUnitNamespace1.ContainingUnitNamespace' nstUnitNamespace2.ContainingUnitNamespace); " is 205.
Long Statement,Microsoft.Cci,ILLocation,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UnmanagedFileIO.cs,ToString,The length of the statement  "	sb.AppendFormat (CultureInfo.InvariantCulture' "ILLocation({0}'0x{1})"' this.methodDefinition.ToString ()' this.offset.ToString ("X8"' CultureInfo.InvariantCulture)); " is 166.
Long Statement,Microsoft.Cci.Immutable,GenericMethodInstance,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,ToString,The length of the statement  "	return MemberHelper.GetMethodSignature (this' NameFormattingOptions.ReturnType | NameFormattingOptions.Signature | NameFormattingOptions.ParameterModifiers | NameFormattingOptions.ParameterName); " is 195.
Long Statement,Microsoft.Cci.Immutable,GenericMethodInstanceReference,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,ToString,The length of the statement  "	return MemberHelper.GetMethodSignature (this' NameFormattingOptions.ReturnType | NameFormattingOptions.Signature | NameFormattingOptions.ParameterModifiers | NameFormattingOptions.ParameterName); " is 195.
Long Statement,Microsoft.Cci.Immutable,SpecializedEventDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,SpecializeIfConstructed,The length of the statement  "		partiallySpecializedTypeReference = TypeDefinition.DeepCopyTypeReference (partiallySpecializedTypeReference' specializedParent' this.ContainingGenericTypeInstance.InternFactory); " is 178.
Long Statement,Microsoft.Cci.Immutable,SpecializedEventDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,SpecializeIfConstructed,The length of the statement  "	return TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter (partiallySpecializedTypeReference' this.ContainingGenericTypeInstance' this.ContainingGenericTypeInstance.InternFactory); " is 195.
Long Statement,Microsoft.Cci.Immutable,SpecializedFieldDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "		partiallySpecializedTypeReference = TypeDefinition.DeepCopyTypeReference (partiallySpecializedTypeReference' specializedParent' this.ContainingGenericTypeInstance.InternFactory); " is 178.
Long Statement,Microsoft.Cci.Immutable,SpecializedFieldDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "	return TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter (partiallySpecializedTypeReference' this.ContainingGenericTypeInstance' this.ContainingGenericTypeInstance.InternFactory); " is 195.
Long Statement,Microsoft.Cci.Immutable,SpecializedGenericMethodParameter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "	partiallySpecializedTypeReference = TypeDefinition.DeepCopyTypeReferenceWRTSpecializedMethod (partiallySpecializedTypeReference' this.DefiningMethod' this.DefiningMethod.ContainingGenericTypeInstance.InternFactory); " is 215.
Long Statement,Microsoft.Cci.Immutable,SpecializedGenericMethodParameter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "	return TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter (partiallySpecializedTypeReference' this.DefiningMethod.ContainingGenericTypeInstance' this.DefiningMethod.ContainingGenericTypeInstance.InternFactory); " is 225.
Long Statement,Microsoft.Cci.Immutable,SpecializedMethodBody,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,MapBody,The length of the statement  "		var specializedOperationExceptionInformation = new List<IOperationExceptionInformation> (this.unspecializedBody.OperationExceptionInformation); " is 143.
Long Statement,Microsoft.Cci.Immutable,SpecializedMethodBody,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,MapBody,The length of the statement  "				var specializedOperationException = new SpecializedOperationExceptionInformation (unspecializedOperationException' specializedType); " is 132.
Long Statement,Microsoft.Cci.Immutable,SpecializedMethodBody,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,Specialize,The length of the statement  "	ITypeReference specializedType = TypeHelper.SpecializeTypeReference (unspecializedType' this.containingMethod' this.internFactory); " is 131.
Long Statement,Microsoft.Cci.Immutable,SpecializedMethodBody,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,Specialize,The length of the statement  "				var specializedContainingType = TypeHelper.SpecializeTypeReference (fieldReference.ContainingType' this.containingMethod' this.internFactory); " is 142.
Long Statement,Microsoft.Cci.Immutable,SpecializedMethodBody,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,Specialize,The length of the statement  "				specialized = new SpecializedFieldReference (specializedContainingType' specializedFieldReference.UnspecializedVersion' this.internFactory); " is 140.
Long Statement,Microsoft.Cci.Immutable,SpecializedMethodBody,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,Specialize,The length of the statement  "					var specializedContainingType = TypeHelper.SpecializeTypeReference (methodReference.ContainingType' this.containingMethod' this.internFactory); " is 143.
Long Statement,Microsoft.Cci.Immutable,SpecializedMethodBody,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,Specialize,The length of the statement  "					specialized = new SpecializedMethodReference (specializedContainingType' specializedMethodReference.UnspecializedVersion' this.internFactory); " is 142.
Long Statement,Microsoft.Cci.Immutable,SpecializedMethodBody,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,Specialize,The length of the statement  "	var specialized = new GenericMethodInstanceReference (specializedMethod' IteratorHelper.GetReadonly (args.ToArray ())' this.internFactory); " is 139.
Long Statement,Microsoft.Cci.Immutable,SpecializedMethodDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,ToString,The length of the statement  "	return MemberHelper.GetMethodSignature (this' NameFormattingOptions.ReturnType | NameFormattingOptions.Signature | NameFormattingOptions.TypeParameters); " is 153.
Long Statement,Microsoft.Cci.Immutable,SpecializedMethodDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "	partiallySpecializedTypeReference = TypeDefinition.DeepCopyTypeReferenceWRTSpecializedMethod (partiallySpecializedTypeReference' this' this.ContainingGenericTypeInstance.InternFactory); " is 185.
Long Statement,Microsoft.Cci.Immutable,SpecializedMethodDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "	return TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter (partiallySpecializedTypeReference' this.ContainingGenericTypeInstance' this.ContainingGenericTypeInstance.InternFactory); " is 195.
Long Statement,Microsoft.Cci.Immutable,SpecializedMethodReference,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,ToString,The length of the statement  "	return MemberHelper.GetMethodSignature (this' NameFormattingOptions.ReturnType | NameFormattingOptions.Signature | NameFormattingOptions.TypeParameters | NameFormattingOptions.TypeConstraints); " is 193.
Long Statement,Microsoft.Cci.Immutable,SpecializedParameterDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "		//Note that partiallySpecializedType is obtained from genericMethodInstance.GenericMethod which will have been specialized with respect " is 135.
Long Statement,Microsoft.Cci.Immutable,SpecializedParameterDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "		//to everything but the generic method parameters. Hence only the following call is necessary to specialize partiallySpecializedType. " is 133.
Long Statement,Microsoft.Cci.Immutable,SpecializedParameterDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "		return TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter (partiallySpecializedType' genericMethodInstance' this.InternFactory); " is 143.
Long Statement,Microsoft.Cci.Immutable,SpecializedParameterDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "	//Since the containing signature is not a generic method instance' it must be a member of a type that has been specialized. " is 123.
Long Statement,Microsoft.Cci.Immutable,SpecializedParameterDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "	//The things that need to be specialized in partiallySpecializedType are defined by this containing type and/or its containing types. " is 133.
Long Statement,Microsoft.Cci.Immutable,SpecializedParameterDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "		partiallySpecializedType = TypeDefinition.DeepCopyTypeReferenceWRTSpecializedMethod (partiallySpecializedType' specializedMethodDefinition' this.internFactory); " is 160.
Long Statement,Microsoft.Cci.Immutable,SpecializedParameterDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "		return TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter (partiallySpecializedType' specializedMethodDefinition.ContainingGenericTypeInstance' this.InternFactory); " is 179.
Long Statement,Microsoft.Cci.Immutable,SpecializedParameterDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "	SpecializedNestedTypeDefinition snt = specializedPropertyDefinition.ContainingTypeDefinition as SpecializedNestedTypeDefinition; " is 128.
Long Statement,Microsoft.Cci.Immutable,SpecializedParameterDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "	return TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter (partiallySpecializedType' specializedPropertyDefinition.ContainingGenericTypeInstance' this.InternFactory); " is 181.
Long Statement,Microsoft.Cci.Immutable,SpecializedParameterTypeInformation,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,SpecializeIfConstructed,The length of the statement  "	return TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter (partiallySpecializedType' this.containingSignature' this.InternFactory); " is 146.
Long Statement,Microsoft.Cci.Immutable,SpecializedPropertyDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "	SpecializedNestedTypeDefinition specializedNestedParent = this.ContainingTypeDefinition as SpecializedNestedTypeDefinition; " is 123.
Long Statement,Microsoft.Cci.Immutable,SpecializedPropertyDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "		partiallySpecializedTypeReference = TypeDefinition.DeepCopyTypeReference (partiallySpecializedTypeReference' specializedNestedParent' this.ContainingGenericTypeInstance.InternFactory); " is 184.
Long Statement,Microsoft.Cci.Immutable,SpecializedPropertyDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,CopyAndSpecialize,The length of the statement  "	return TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter (partiallySpecializedTypeReference' this.ContainingGenericTypeInstance' this.ContainingGenericTypeInstance.InternFactory); " is 195.
Long Statement,Microsoft.Cci.Immutable,PlatformType,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\PlatformTypes.cs,CreateReference,The length of the statement  "	return new NamespaceTypeReference (this.host' ns' this.host.NameTable.GetNameFor (names [names.Length - 1])' genericParameterCount' false' isValueType' typeCode: typeCode); " is 172.
Long Statement,Microsoft.Cci.Immutable,ArrayType,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,GetMatchingMembersNamed,The length of the statement  "		if (name.UniqueKey != member.Name.UniqueKey || (ignoreCase && name.UniqueKeyIgnoringCase == member.Name.UniqueKeyIgnoringCase)) { " is 129.
Long Statement,Microsoft.Cci.Immutable,ArrayType,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,GetMembersNamed,The length of the statement  "		if (name.UniqueKey != member.Name.UniqueKey || (ignoreCase && name.UniqueKeyIgnoringCase == member.Name.UniqueKeyIgnoringCase)) { " is 129.
Long Statement,Microsoft.Cci.Immutable,CustomModifier,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,CopyModifierToNewContainer,The length of the statement  "	ITypeReference copiedModifier = TypeDefinition.DeepCopyTypeReference (customModifier.Modifier' targetContainer' internFactory); " is 127.
Long Statement,Microsoft.Cci.Immutable,CustomModifier,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,Specialize,The length of the statement  "	ITypeReference copiedModifier = TypeHelper.SpecializeTypeReference (customModifier.Modifier' targetContainer' internFactory); " is 125.
Long Statement,Microsoft.Cci.Immutable,CustomModifier,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,Specialize,The length of the statement  "	ITypeReference copiedModifier = TypeHelper.SpecializeTypeReference (customModifier.Modifier' targetContainer' internFactory); " is 125.
Long Statement,Microsoft.Cci.Immutable,CustomModifier,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "	ITypeReference copiedModifier = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter (customModifier.Modifier' containingMethodInstance' internFactory); " is 165.
Long Statement,Microsoft.Cci.Immutable,CustomModifier,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "	ITypeReference copiedModifier = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter (customModifier.Modifier' containingTypeInstance' internFactory); " is 163.
Long Statement,Microsoft.Cci.Immutable,CustomModifier,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableMethodTypeParameter,The length of the statement  "	ITypeReference copiedModifier = TypeDefinition.DeepCopyTypeReferenceWRTSpecializedMethod (customModifier.Modifier' specializedMethodReference' internFactory); " is 158.
Long Statement,Microsoft.Cci.Immutable,GenericTypeInstance,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,DeepCopyTypeReference,The length of the statement  "	var copiedGenericType = (INamedTypeReference)TypeDefinition.DeepCopyTypeReference (genericTypeInstance.GenericType' targetContainer' internFactory); " is 148.
Long Statement,Microsoft.Cci.Immutable,GenericTypeInstance,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeTypeReference,The length of the statement  "	var copiedGenericType = (INamedTypeReference)TypeHelper.SpecializeTypeReference (genericTypeInstance.GenericType' targetContainer' internFactory); " is 146.
Long Statement,Microsoft.Cci.Immutable,GenericTypeInstance,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeTypeReference,The length of the statement  "	var copiedGenericType = (INamedTypeReference)TypeHelper.SpecializeTypeReference (genericTypeInstance.GenericType' targetContainer' internFactory); " is 146.
Long Statement,Microsoft.Cci.Immutable,GenericTypeInstance,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "	var specializedGenericType = (INamedTypeReference)TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter (genericTypeInstance.GenericType' containingMethodInstance' internFactory); " is 191.
Long Statement,Microsoft.Cci.Immutable,GenericTypeInstance,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "		ITypeReference specializedArgType = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter (argType' containingMethodInstance' internFactory); " is 153.
Long Statement,Microsoft.Cci.Immutable,GenericTypeInstance,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "	var specializedGenericType = (INamedTypeReference)TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter (genericTypeInstance.GenericType' containingTypeInstance' internFactory); " is 189.
Long Statement,Microsoft.Cci.Immutable,GenericTypeInstance,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "		ITypeReference specializedArgType = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter (argType' containingTypeInstance' internFactory); " is 151.
Long Statement,Microsoft.Cci.Immutable,GenericTypeInstance,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "	var specializedGenericType = (INamedTypeReference)TypeDefinition.DeepCopyTypeReferenceWRTSpecializedMethod (genericTypeInstance.GenericType' specializedMethodReference' internFactory); " is 184.
Long Statement,Microsoft.Cci.Immutable,GenericTypeInstance,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "		ITypeReference specializedArgType = TypeDefinition.DeepCopyTypeReferenceWRTSpecializedMethod (argType' specializedMethodReference' internFactory); " is 146.
Long Statement,Microsoft.Cci.Immutable,GenericParameter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "	if (genericMethodParameter.DefiningMethod.InternedKey == methodReference.InternedKey || (specializedMethod != null && genericMethodParameter.DefiningMethod.InternedKey == specializedMethod.UnspecializedVersion.InternedKey)) { " is 225.
Long Statement,Microsoft.Cci.Immutable,GenericParameter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "	if (specializedMethodDefinition != null && genericMethodParameter.DefiningMethod.InternedKey == specializedMethodDefinition.PartiallySpecializedVersion.InternedKey) { " is 166.
Long Statement,Microsoft.Cci.Immutable,GenericParameter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "		IEnumerator<IGenericMethodParameter> genericParameters = specializedMethodDefinition.GenericParameters.GetEnumerator (); " is 120.
Long Statement,Microsoft.Cci.Immutable,ManagedPointerType,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,DeepCopyTypeReference,The length of the statement  "	ITypeReference specializedtargetType = TypeDefinition.DeepCopyTypeReference (targetType' targetContainer' internFactory); " is 121.
Long Statement,Microsoft.Cci.Immutable,ManagedPointerType,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "	ITypeReference specializedtargetType = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter (targetType' containingMethodInstance' internFactory); " is 159.
Long Statement,Microsoft.Cci.Immutable,ManagedPointerType,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "	ITypeReference specializedtargetType = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter (targetType' containingTypeInstance' internFactory); " is 157.
Long Statement,Microsoft.Cci.Immutable,ManagedPointerType,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "	ITypeReference specializedtargetType = TypeDefinition.DeepCopyTypeReferenceWRTSpecializedMethod (targetType' specializedMethodReference' internFactory); " is 152.
Long Statement,Microsoft.Cci.Immutable,Matrix,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,DeepCopyTypeReference,The length of the statement  "	ITypeReference specializedElementType = TypeDefinition.DeepCopyTypeReference (elementType' targetContainer' internFactory); " is 123.
Long Statement,Microsoft.Cci.Immutable,Matrix,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeTypeReference,The length of the statement  "	ITypeReference specializedElementType = TypeHelper.SpecializeTypeReference (elementType' targetContainer' internFactory); " is 121.
Long Statement,Microsoft.Cci.Immutable,Matrix,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeTypeReference,The length of the statement  "	ITypeReference specializedElementType = TypeHelper.SpecializeTypeReference (elementType' targetContainer' internFactory); " is 121.
Long Statement,Microsoft.Cci.Immutable,Matrix,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "	ITypeReference specializedElementType = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter (elementType' containingMethodInstance' internFactory); " is 161.
Long Statement,Microsoft.Cci.Immutable,Matrix,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "	ITypeReference specializedElementType = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter (elementType' containingTypeInstance' internFactory); " is 159.
Long Statement,Microsoft.Cci.Immutable,Matrix,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "	ITypeReference specializedElementType = TypeDefinition.DeepCopyTypeReferenceWRTSpecializedMethod (elementType' specializedMethodReference' internFactory); " is 154.
Long Statement,Microsoft.Cci.Immutable,PointerType,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,DeepCopyTypeReference,The length of the statement  "	ITypeReference specializedtargetType = TypeDefinition.DeepCopyTypeReference (targetType' targetContainer' internFactory); " is 121.
Long Statement,Microsoft.Cci.Immutable,PointerType,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "	ITypeReference specializedtargetType = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter (targetType' containingMethodInstance' internFactory); " is 159.
Long Statement,Microsoft.Cci.Immutable,PointerType,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "	ITypeReference specializedtargetType = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter (targetType' containingTypeInstance' internFactory); " is 157.
Long Statement,Microsoft.Cci.Immutable,PointerType,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,DeepCopyTypeReferenceReplacingGenericMethodParameter,The length of the statement  "	ITypeReference specializedtargetType = TypeDefinition.DeepCopyTypeReferenceWRTSpecializedMethod (targetType' specializedMethodReference' internFactory); " is 152.
Long Statement,Microsoft.Cci.Immutable,ModifiedPointerType,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,DeepCopyTypeReference,The length of the statement  "	var copiedTargetType = TypeDefinition.DeepCopyTypeReference (modifiedPointer.TargetType' targetContainer' internFactory); " is 121.
Long Statement,Microsoft.Cci.Immutable,ModifiedPointerType,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "	var copiedTargetType = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter (modifiedPointer.TargetType' containingMethodInstance' internFactory); " is 159.
Long Statement,Microsoft.Cci.Immutable,ModifiedPointerType,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "		var copiedModifier = CustomModifier.SpecializeIfConstructedFromApplicableTypeParameter (modifier' containingMethodInstance' internFactory); " is 139.
Long Statement,Microsoft.Cci.Immutable,ModifiedPointerType,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "	var copiedTargetType = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter (modifiedPointer.TargetType' containingTypeInstance' internFactory); " is 157.
Long Statement,Microsoft.Cci.Immutable,ModifiedPointerType,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "		var copiedModifier = CustomModifier.SpecializeIfConstructedFromApplicableTypeParameter (modifier' containingTypeInstance' internFactory); " is 137.
Long Statement,Microsoft.Cci.Immutable,ModifiedPointerType,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "	var copiedTargetType = TypeDefinition.DeepCopyTypeReferenceWRTSpecializedMethod (modifiedPointer.TargetType' specializedMethodReference' internFactory); " is 152.
Long Statement,Microsoft.Cci.Immutable,ModifiedPointerType,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "		var copiedModifier = CustomModifier.SpecializeIfConstructedFromApplicableMethodTypeParameter (modifier' specializedMethodReference' internFactory); " is 147.
Long Statement,Microsoft.Cci.Immutable,ModifiedTypeReference,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,DeepCopyTypeReference,The length of the statement  "	ITypeReference copiedUnmodifiedType = TypeDefinition.DeepCopyTypeReference (modifiedTypeReference.UnmodifiedType' targetContainer' internFactory); " is 146.
Long Statement,Microsoft.Cci.Immutable,ModifiedTypeReference,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeTypeReference,The length of the statement  "	ITypeReference copiedUnmodifiedType = TypeHelper.SpecializeTypeReference (modifiedTypeReference.UnmodifiedType' targetContainer' internFactory); " is 144.
Long Statement,Microsoft.Cci.Immutable,ModifiedTypeReference,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeTypeReference,The length of the statement  "	ITypeReference copiedUnmodifiedType = TypeHelper.SpecializeTypeReference (modifiedTypeReference.UnmodifiedType' targetContainer' internFactory); " is 144.
Long Statement,Microsoft.Cci.Immutable,ModifiedTypeReference,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "	ITypeReference copiedUnmodifiedType = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter (modifiedTypeReference.UnmodifiedType' containingMethodInstance' internFactory); " is 184.
Long Statement,Microsoft.Cci.Immutable,ModifiedTypeReference,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "		var copiedModifier = CustomModifier.SpecializeIfConstructedFromApplicableTypeParameter (modifier' containingMethodInstance' internFactory); " is 139.
Long Statement,Microsoft.Cci.Immutable,ModifiedTypeReference,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "	ITypeReference copiedUnmodifiedType = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter (modifiedTypeReference.UnmodifiedType' containingTypeInstance' internFactory); " is 182.
Long Statement,Microsoft.Cci.Immutable,ModifiedTypeReference,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "		var copiedModifier = CustomModifier.SpecializeIfConstructedFromApplicableTypeParameter (modifier' containingTypeInstance' internFactory); " is 137.
Long Statement,Microsoft.Cci.Immutable,ModifiedTypeReference,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "	ITypeReference copiedUnmodifiedType = TypeDefinition.DeepCopyTypeReferenceWRTSpecializedMethod (modifiedTypeReference.UnmodifiedType' specializedMethodReference' internFactory); " is 177.
Long Statement,Microsoft.Cci.Immutable,ModifiedTypeReference,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "		var copiedModifier = CustomModifier.SpecializeIfConstructedFromApplicableMethodTypeParameter (modifier' specializedMethodReference' internFactory); " is 147.
Long Statement,Microsoft.Cci.Immutable,Scope,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,GetMembersNamed,The length of the statement  "	Dictionary<int' List<MemberType>> nameToMemberListMap = ignoreCase ? this.caseInsensitiveMemberNameToMemberListMap : this.caseSensitiveMemberNameToMemberListMap; " is 161.
Long Statement,Microsoft.Cci.Immutable,SpecializedNestedTypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "	var specializedParent = TypeDefinition.DeepCopyTypeReferenceWRTSpecializedMethod (nestedType.ContainingType' specializedMethodReference' internFactory); " is 152.
Long Statement,Microsoft.Cci.Immutable,SpecializedNestedTypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "	var specializedParent = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter (nestedType.ContainingType' genericMethodInstance' internFactory); " is 156.
Long Statement,Microsoft.Cci.Immutable,SpecializedNestedTypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "	var specializedParent = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter (nestedType.ContainingType' containingTypeInstance' internFactory); " is 157.
Long Statement,Microsoft.Cci.Immutable,SpecializedNestedTypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,InitializeIfNecessary,The length of the statement  "			//^ assume unspecializedMember is IEventDefinition || unspecializedMember is IFieldDefinition || unspecializedMember is IMethodDefinition || " is 140.
Long Statement,Microsoft.Cci.Immutable,SpecializedNestedTypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,InitializeIfNecessary,The length of the statement  "			//^   unspecializedMember is IPropertyDefinition || unspecializedMember is INestedTypeDefinition; //follows from informal post condition on Members property. " is 157.
Long Statement,Microsoft.Cci.Immutable,SpecializedNestedTypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,CopyAndSpecialize,The length of the statement  "	partiallySpecializedTypeReference = TypeDefinition.DeepCopyTypeReference (partiallySpecializedTypeReference' this' this.InternFactory); " is 135.
Long Statement,Microsoft.Cci.Immutable,SpecializedNestedTypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,CopyAndSpecialize,The length of the statement  "	return TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter (partiallySpecializedTypeReference' this.ContainingGenericTypeInstance' this.InternFactory); " is 165.
Long Statement,Microsoft.Cci.Immutable,SpecializedNestedTypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeMember,The length of the statement  "		return new SpecializedPropertyDefinition (unspecializedPropertyDef' propertyDef' this' this.ContainingGenericTypeInstance); " is 123.
Long Statement,Microsoft.Cci.Immutable,SpecializedNestedTypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeMember,The length of the statement  "	return new SpecializedNestedTypeDefinition (unspecializedTypeDef' nestedTypeDef' this' this.ContainingGenericTypeInstance' internFactory); " is 138.
Long Statement,Microsoft.Cci.Immutable,TypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "		return GenericParameter.SpecializeIfConstructedFromApplicableTypeParameter (genericMethodParameter' containingMethodInstance); " is 126.
Long Statement,Microsoft.Cci.Immutable,TypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "		return GenericTypeInstance.SpecializeIfConstructedFromApplicableTypeParameter (genericTypeInstance' containingMethodInstance' internFactory); " is 141.
Long Statement,Microsoft.Cci.Immutable,TypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "		return ManagedPointerType.SpecializeIfConstructedFromApplicableTypeParameter (managedPointerType' containingMethodInstance' internFactory); " is 139.
Long Statement,Microsoft.Cci.Immutable,TypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "		return ModifiedPointerType.SpecializeIfConstructedFromApplicableTypeParameter (modifiedPointer' containingMethodInstance' internFactory); " is 137.
Long Statement,Microsoft.Cci.Immutable,TypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "		return ModifiedTypeReference.SpecializeIfConstructedFromApplicableTypeParameter (modifiedType' containingMethodInstance' internFactory); " is 136.
Long Statement,Microsoft.Cci.Immutable,TypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "		return SpecializedNestedTypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter (nestedType' containingMethodInstance' internFactory); " is 144.
Long Statement,Microsoft.Cci.Immutable,TypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "		return PointerType.SpecializeIfConstructedFromApplicableTypeParameter (pointerType' containingMethodInstance' internFactory); " is 125.
Long Statement,Microsoft.Cci.Immutable,TypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "		return GenericParameter.SpecializeIfConstructedFromApplicableTypeParameter (genericTypeParameter' containingTypeInstance); " is 122.
Long Statement,Microsoft.Cci.Immutable,TypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "		return GenericTypeInstance.SpecializeIfConstructedFromApplicableTypeParameter (genericTypeInstance' containingTypeInstance' internFactory); " is 139.
Long Statement,Microsoft.Cci.Immutable,TypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "		return ManagedPointerType.SpecializeIfConstructedFromApplicableTypeParameter (managedPointerType' containingTypeInstance' internFactory); " is 137.
Long Statement,Microsoft.Cci.Immutable,TypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "		return ModifiedPointerType.SpecializeIfConstructedFromApplicableTypeParameter (modifiedPointer' containingTypeInstance' internFactory); " is 135.
Long Statement,Microsoft.Cci.Immutable,TypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "		return ModifiedTypeReference.SpecializeIfConstructedFromApplicableTypeParameter (modifiedType' containingTypeInstance' internFactory); " is 134.
Long Statement,Microsoft.Cci.Immutable,TypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "		return SpecializedNestedTypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter (nestedType' containingTypeInstance' internFactory); " is 142.
Long Statement,Microsoft.Cci.Immutable,TypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "		return PointerType.SpecializeIfConstructedFromApplicableTypeParameter (pointerType' containingTypeInstance' internFactory); " is 123.
Long Statement,Microsoft.Cci.Immutable,TypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "		return GenericTypeInstance.DeepCopyTypeReferenceWRTSpecializedMethod (genericTypeInstance' specializedMethodReference' internFactory); " is 134.
Long Statement,Microsoft.Cci.Immutable,TypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "		return ManagedPointerType.DeepCopyTypeReferenceWRTSpecializedMethod (managedPointerType' specializedMethodReference' internFactory); " is 132.
Long Statement,Microsoft.Cci.Immutable,TypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "		return ModifiedPointerType.DeepCopyTypeReferenceWRTSpecializedMethod (modifiedPointer' specializedMethodReference' internFactory); " is 130.
Long Statement,Microsoft.Cci.Immutable,TypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "		return ModifiedTypeReference.DeepCopyTypeReferenceWRTSpecializedMethod (modifiedType' specializedMethodReference' internFactory); " is 129.
Long Statement,Microsoft.Cci.Immutable,TypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "		return PointerType.DeepCopyTypeReferenceReplacingGenericMethodParameter (pointerType' specializedMethodReference' internFactory); " is 129.
Long Statement,Microsoft.Cci.Immutable,TypeDefinition,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "		return SpecializedNestedTypeDefinition.DeepCopyTypeReferenceWRTSpecializedMethod (nestedType' specializedMethodReference' internFactory); " is 137.
Long Statement,Microsoft.Cci.Immutable,Vector,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,GetInterfaceList,The length of the statement  "		interfaces.Add (new GenericTypeInstanceReference (this.PlatformType.SystemCollectionsGenericIList' argTypes' this.InternFactory)); " is 130.
Long Statement,Microsoft.Cci.Immutable,Vector,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,GetInterfaceList,The length of the statement  "		interfaces.Add (new GenericTypeInstanceReference (this.PlatformType.SystemCollectionsGenericICollection' argTypes' this.InternFactory)); " is 136.
Long Statement,Microsoft.Cci.Immutable,Vector,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,GetInterfaceList,The length of the statement  "		interfaces.Add (new GenericTypeInstanceReference (this.PlatformType.SystemCollectionsGenericIEnumerable' argTypes' this.InternFactory)); " is 136.
Long Statement,Microsoft.Cci.Immutable,Vector,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,DeepCopyTypeReference,The length of the statement  "	ITypeReference specializedElementType = TypeDefinition.DeepCopyTypeReference (elementType' targetContainer' internFactory); " is 123.
Long Statement,Microsoft.Cci.Immutable,Vector,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeTypeReference,The length of the statement  "	ITypeReference specializedElementType = TypeHelper.SpecializeTypeReference (elementType' targetContainer' internFactory); " is 121.
Long Statement,Microsoft.Cci.Immutable,Vector,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeTypeReference,The length of the statement  "	ITypeReference specializedElementType = TypeHelper.SpecializeTypeReference (elementType' targetContainer' internFactory); " is 121.
Long Statement,Microsoft.Cci.Immutable,Vector,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "	ITypeReference specializedElementType = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter (elementType' method' internFactory); " is 143.
Long Statement,Microsoft.Cci.Immutable,Vector,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,SpecializeIfConstructedFromApplicableTypeParameter,The length of the statement  "	ITypeReference specializedElementType = TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter (elementType' type' internFactory); " is 141.
Long Statement,Microsoft.Cci.Immutable,Vector,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,DeepCopyTypeReferenceWRTSpecializedMethod,The length of the statement  "	ITypeReference specializedElementType = TypeDefinition.DeepCopyTypeReferenceWRTSpecializedMethod (elementType' specializedMethodReference' internFactory); " is 154.
Long Statement,Microsoft.Cci.Immutable,UnitSet,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UnitHelper.cs,Contains,The length of the statement  "	//^ assume result == exists{IUnit u in this.Units; u == unit}; //TODO: Boogie: need a working postcodition on EnumerableContains " is 128.
Long Statement,Microsoft.Cci.Immutable,UnitSetNamespace,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UnitHelper.cs,GetAggregatedMember,The length of the statement  "	if (!this.nestedUnitNamespaceToNestedUnitSetNamespaceMap.TryGetValue (nestedUnitNamespace.Name.UniqueKey' out result)) { " is 120.
Complex Conditional,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetCoreAssemblySymbolicIdentity,The conditional expression  "result == null || result.Version == dummyVersion || (result.Version < coreId.Version && coreId.Version != dummyVersion) || result.Version == coreId.Version && unit.UnitIdentity.Equals (coreId)"  is complex.
Complex Conditional,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetSignatureInternId,The conditional expression  "signatureStore.CallingConvention == callingConvention && signatureStore.RequiredParameterListInternedId == requiredParameterTypesInternedId && signatureStore.ExtraParameterListInternedId == extraArgumentTypesInteredId && signatureStore.ReturnValueCustomModifiersListInteredId == returnValueCustomModifiersInternedId && signatureStore.ReturnValueIsByRef == returnValueIsByRef && signatureStore.ReturnTypeReferenceInternedId == returnTypeReferenceInternedId"  is complex.
Complex Conditional,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetMethodReferenceInternedId,The conditional expression  "signatureStore.CallingConvention == methodReference.CallingConvention && signatureStore.RequiredParameterListInternedId == requiredParameterTypesInternedId && signatureStore.ReturnValueCustomModifiersListInteredId == returnValueCustomModifiersInternedId && signatureStore.ReturnValueIsByRef == methodReference.ReturnValueIsByRef && signatureStore.ReturnTypeReferenceInternedId == returnTypeReferenceInternedId && signatureStore.GenericParameterCount == genericParameterCount"  is complex.
Complex Conditional,Microsoft.Cci,SignatureFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,GetMethodSignature,The conditional expression  "(formattingOptions & NameFormattingOptions.FormattingForDocumentationId) != 0 && method.ResolvedMethod.IsSpecialName && (method.Name.Value.Contains ("op_Explicit") || method.Name.Value.Contains ("op_Implicit"))"  is complex.
Complex Conditional,Microsoft.Cci,SignatureFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,AppendMethodParameters,The conditional expression  "!parameter.MustBeReferenceType && !parameter.MustBeValueType && !parameter.MustHaveDefaultConstructor && IteratorHelper.EnumerableIsEmpty (parameter.Constraints)"  is complex.
Complex Conditional,Microsoft.Cci,BaseMetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,Visit,The conditional expression  "marshallingInformation.UnmanagedType == System.Runtime.InteropServices.UnmanagedType.SafeArray && (marshallingInformation.SafeArrayElementSubtype == System.Runtime.InteropServices.VarEnum.VT_DISPATCH || marshallingInformation.SafeArrayElementSubtype == System.Runtime.InteropServices.VarEnum.VT_UNKNOWN || marshallingInformation.SafeArrayElementSubtype == System.Runtime.InteropServices.VarEnum.VT_RECORD)"  is complex.
Complex Conditional,Microsoft.Cci,MetadataTraverser,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Visitors.cs,TraverseChildren,The conditional expression  "marshallingInformation.UnmanagedType == System.Runtime.InteropServices.UnmanagedType.SafeArray && (marshallingInformation.SafeArrayElementSubtype == System.Runtime.InteropServices.VarEnum.VT_DISPATCH || marshallingInformation.SafeArrayElementSubtype == System.Runtime.InteropServices.VarEnum.VT_UNKNOWN || marshallingInformation.SafeArrayElementSubtype == System.Runtime.InteropServices.VarEnum.VT_RECORD)"  is complex.
Complex Conditional,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,Resolve,The conditional expression  "nsTypeDef != null && nsTypeRef.GenericParameterCount == nsTypeDef.GenericParameterCount && (!nsTypeRef.IsEnum || nsTypeDef.IsEnum) && (!nsTypeRef.IsValueType || nsTypeDef.IsValueType) && nsTypeRef.TypeCode == nsTypeDef.TypeCode"  is complex.
Complex Conditional,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,Resolve,The conditional expression  "neTypeDef != null && nestedTypeRef.GenericParameterCount == neTypeDef.GenericParameterCount && (!nestedTypeRef.IsEnum || neTypeDef.IsEnum) && (!nestedTypeRef.IsValueType || neTypeDef.IsValueType) && nestedTypeRef.TypeCode == neTypeDef.TypeCode"  is complex.
Complex Conditional,Microsoft.Cci,TypeNameFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,AddGenericParametersIfNeeded,The conditional expression  "(formattingOptions & NameFormattingOptions.TypeParameters) != 0 && (formattingOptions & NameFormattingOptions.FormattingForDocumentationId) == 0 && genericParameterCount > 0 && !(type.ResolvedType is Dummy)"  is complex.
Complex Conditional,Microsoft.Cci,TypeNameFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,AddGenericParametersIfNeeded,The conditional expression  "!parameter.MustBeReferenceType && !parameter.MustBeValueType && !parameter.MustHaveDefaultConstructor && IteratorHelper.EnumerableIsEmpty (parameter.Constraints)"  is complex.
Empty Catch Block,Microsoft.Cci,OptionParsing,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\CommandLineOptions.cs,ParseValue,The method has an empty catch block.
Empty Catch Block,Microsoft.Cci,OptionParsing,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\CommandLineOptions.cs,ParseValue,The method has an empty catch block.
Empty Catch Block,Microsoft.Cci,GlobalAssemblyCache,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\GlobalAssemblyCache.cs,Contains,The method has an empty catch block.
Empty Catch Block,Microsoft.Cci,GlobalAssemblyCache,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\GlobalAssemblyCache.cs,Contains,The method has an empty catch block.
Magic Number,Microsoft.Cci,OptionParsing,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\CommandLineOptions.cs,SplitLineWithQuotes,The following statement contains a magic number: for (var index = 0; index < line.Length; index++) {  	var current = line [index];  	if (current == '\\') {  		// escape character  		escaping++;  		// swallow the escape character for now  		// grab everything prior to prior escape character  		if (index > start) {  			currentArg.Append (line.Substring (start' index - start));  		}  		start = index + 1;  		continue;  	}  	if (escaping > 0) {  		if (current == '"') {  			var backslashes = escaping / 2;  			for (int i = 0; i < backslashes; i++) {  				currentArg.Append ('\\');  			}  			if (escaping % 2 == 1) {  				// escapes the "  				currentArg.Append ('"');  				escaping = 0;  				start = index + 1;  				continue;  			}  		}  		else {  			var backslashes = escaping;  			for (int i = 0; i < backslashes; i++) {  				currentArg.Append ('\\');  			}  		}  		escaping = 0;  	}  	if (inDoubleQuotes) {  		if (current == '"') {  			// ending argument  			FinishArgument (line' start' args' currentArg' index' true);  			start = index + 1;  			inDoubleQuotes = false;  			continue;  		}  	}  	else// not in quotes  	 {  		if (Char.IsWhiteSpace (current)) {  			// end previous' start new  			FinishArgument (line' start' args' currentArg' index' false);  			start = index + 1;  			continue;  		}  		if (current == '"') {  			// starting double quote  			if (index != start) {  				AddError ("Response file '{0}' line {1}' char {2} contains '\"' not starting or ending an argument"' responseFileName' lineNo' index);  			}  			start = index + 1;  			inDoubleQuotes = true;  			continue;  		}  	}  }  
Magic Number,Microsoft.Cci,OptionParsing,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\CommandLineOptions.cs,SplitLineWithQuotes,The following statement contains a magic number: for (var index = 0; index < line.Length; index++) {  	var current = line [index];  	if (current == '\\') {  		// escape character  		escaping++;  		// swallow the escape character for now  		// grab everything prior to prior escape character  		if (index > start) {  			currentArg.Append (line.Substring (start' index - start));  		}  		start = index + 1;  		continue;  	}  	if (escaping > 0) {  		if (current == '"') {  			var backslashes = escaping / 2;  			for (int i = 0; i < backslashes; i++) {  				currentArg.Append ('\\');  			}  			if (escaping % 2 == 1) {  				// escapes the "  				currentArg.Append ('"');  				escaping = 0;  				start = index + 1;  				continue;  			}  		}  		else {  			var backslashes = escaping;  			for (int i = 0; i < backslashes; i++) {  				currentArg.Append ('\\');  			}  		}  		escaping = 0;  	}  	if (inDoubleQuotes) {  		if (current == '"') {  			// ending argument  			FinishArgument (line' start' args' currentArg' index' true);  			start = index + 1;  			inDoubleQuotes = false;  			continue;  		}  	}  	else// not in quotes  	 {  		if (Char.IsWhiteSpace (current)) {  			// end previous' start new  			FinishArgument (line' start' args' currentArg' index' false);  			start = index + 1;  			continue;  		}  		if (current == '"') {  			// starting double quote  			if (index != start) {  				AddError ("Response file '{0}' line {1}' char {2} contains '\"' not starting or ending an argument"' responseFileName' lineNo' index);  			}  			start = index + 1;  			inDoubleQuotes = true;  			continue;  		}  	}  }  
Magic Number,Microsoft.Cci,OptionParsing,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\CommandLineOptions.cs,SplitLineWithQuotes,The following statement contains a magic number: if (escaping > 0) {  	if (current == '"') {  		var backslashes = escaping / 2;  		for (int i = 0; i < backslashes; i++) {  			currentArg.Append ('\\');  		}  		if (escaping % 2 == 1) {  			// escapes the "  			currentArg.Append ('"');  			escaping = 0;  			start = index + 1;  			continue;  		}  	}  	else {  		var backslashes = escaping;  		for (int i = 0; i < backslashes; i++) {  			currentArg.Append ('\\');  		}  	}  	escaping = 0;  }  
Magic Number,Microsoft.Cci,OptionParsing,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\CommandLineOptions.cs,SplitLineWithQuotes,The following statement contains a magic number: if (escaping > 0) {  	if (current == '"') {  		var backslashes = escaping / 2;  		for (int i = 0; i < backslashes; i++) {  			currentArg.Append ('\\');  		}  		if (escaping % 2 == 1) {  			// escapes the "  			currentArg.Append ('"');  			escaping = 0;  			start = index + 1;  			continue;  		}  	}  	else {  		var backslashes = escaping;  		for (int i = 0; i < backslashes; i++) {  			currentArg.Append ('\\');  		}  	}  	escaping = 0;  }  
Magic Number,Microsoft.Cci,OptionParsing,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\CommandLineOptions.cs,SplitLineWithQuotes,The following statement contains a magic number: if (current == '"') {  	var backslashes = escaping / 2;  	for (int i = 0; i < backslashes; i++) {  		currentArg.Append ('\\');  	}  	if (escaping % 2 == 1) {  		// escapes the "  		currentArg.Append ('"');  		escaping = 0;  		start = index + 1;  		continue;  	}  }  else {  	var backslashes = escaping;  	for (int i = 0; i < backslashes; i++) {  		currentArg.Append ('\\');  	}  }  
Magic Number,Microsoft.Cci,OptionParsing,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\CommandLineOptions.cs,SplitLineWithQuotes,The following statement contains a magic number: if (current == '"') {  	var backslashes = escaping / 2;  	for (int i = 0; i < backslashes; i++) {  		currentArg.Append ('\\');  	}  	if (escaping % 2 == 1) {  		// escapes the "  		currentArg.Append ('"');  		escaping = 0;  		start = index + 1;  		continue;  	}  }  else {  	var backslashes = escaping;  	for (int i = 0; i < backslashes; i++) {  		currentArg.Append ('\\');  	}  }  
Magic Number,Microsoft.Cci,OptionParsing,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\CommandLineOptions.cs,SplitLineWithQuotes,The following statement contains a magic number: if (escaping % 2 == 1) {  	// escapes the "  	currentArg.Append ('"');  	escaping = 0;  	start = index + 1;  	continue;  }  
Magic Number,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,MetadataHostEnvironment,The following statement contains a magic number: Contract.Requires (pointerSize == 0 || pointerSize == 4 || pointerSize == 8);  
Magic Number,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,MetadataHostEnvironment,The following statement contains a magic number: Contract.Requires (pointerSize == 0 || pointerSize == 4 || pointerSize == 8);  
Magic Number,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetCoreAssemblySymbolicIdentity,The following statement contains a magic number: if (this.unitCache.Count > 0) {  	var dummyVersion = new Version (255' 255' 255' 255);  	lock (GlobalLock.LockingObject) {  		foreach (IUnit unit in this.unitCache.Values) {  			Contract.Assume (unit != null);  			AssemblyIdentity coreId = unit.CoreAssemblySymbolicIdentity;  			if (coreId.Name.Value.Length == 0)  				continue;  			this.coreIdentities.Add (coreId);  			if (result == null || result.Version == dummyVersion || (result.Version < coreId.Version && coreId.Version != dummyVersion) || result.Version == coreId.Version && unit.UnitIdentity.Equals (coreId)) {  				result = coreId;  				referringUnit = unit;  			}  		}  	}  }  
Magic Number,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetCoreAssemblySymbolicIdentity,The following statement contains a magic number: if (this.unitCache.Count > 0) {  	var dummyVersion = new Version (255' 255' 255' 255);  	lock (GlobalLock.LockingObject) {  		foreach (IUnit unit in this.unitCache.Values) {  			Contract.Assume (unit != null);  			AssemblyIdentity coreId = unit.CoreAssemblySymbolicIdentity;  			if (coreId.Name.Value.Length == 0)  				continue;  			this.coreIdentities.Add (coreId);  			if (result == null || result.Version == dummyVersion || (result.Version < coreId.Version && coreId.Version != dummyVersion) || result.Version == coreId.Version && unit.UnitIdentity.Equals (coreId)) {  				result = coreId;  				referringUnit = unit;  			}  		}  	}  }  
Magic Number,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetCoreAssemblySymbolicIdentity,The following statement contains a magic number: if (this.unitCache.Count > 0) {  	var dummyVersion = new Version (255' 255' 255' 255);  	lock (GlobalLock.LockingObject) {  		foreach (IUnit unit in this.unitCache.Values) {  			Contract.Assume (unit != null);  			AssemblyIdentity coreId = unit.CoreAssemblySymbolicIdentity;  			if (coreId.Name.Value.Length == 0)  				continue;  			this.coreIdentities.Add (coreId);  			if (result == null || result.Version == dummyVersion || (result.Version < coreId.Version && coreId.Version != dummyVersion) || result.Version == coreId.Version && unit.UnitIdentity.Equals (coreId)) {  				result = coreId;  				referringUnit = unit;  			}  		}  	}  }  
Magic Number,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetCoreAssemblySymbolicIdentity,The following statement contains a magic number: if (this.unitCache.Count > 0) {  	var dummyVersion = new Version (255' 255' 255' 255);  	lock (GlobalLock.LockingObject) {  		foreach (IUnit unit in this.unitCache.Values) {  			Contract.Assume (unit != null);  			AssemblyIdentity coreId = unit.CoreAssemblySymbolicIdentity;  			if (coreId.Name.Value.Length == 0)  				continue;  			this.coreIdentities.Add (coreId);  			if (result == null || result.Version == dummyVersion || (result.Version < coreId.Version && coreId.Version != dummyVersion) || result.Version == coreId.Version && unit.UnitIdentity.Equals (coreId)) {  				result = coreId;  				referringUnit = unit;  			}  		}  	}  }  
Magic Number,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetTargetPlatformPointerSize,The following statement contains a magic number: Contract.Ensures (Contract.Result<byte> () == 4 || Contract.Result<byte> () == 8);  
Magic Number,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetTargetPlatformPointerSize,The following statement contains a magic number: Contract.Ensures (Contract.Result<byte> () == 4 || Contract.Result<byte> () == 8);  
Magic Number,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetTargetPlatformPointerSize,The following statement contains a magic number: lock (GlobalLock.LockingObject) {  	if (this.unitCache.Count > 0) {  		foreach (IUnit unit in this.unitCache.Values) {  			IModule /*?*/module = unit as IModule;  			if (module == null)  				continue;  			if (module.Requires32bits)  				return 4;  			if (module.Requires64bits)  				return 8;  		}  	}  }  
Magic Number,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetTargetPlatformPointerSize,The following statement contains a magic number: lock (GlobalLock.LockingObject) {  	if (this.unitCache.Count > 0) {  		foreach (IUnit unit in this.unitCache.Values) {  			IModule /*?*/module = unit as IModule;  			if (module == null)  				continue;  			if (module.Requires32bits)  				return 4;  			if (module.Requires64bits)  				return 8;  		}  	}  }  
Magic Number,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetTargetPlatformPointerSize,The following statement contains a magic number: if (this.unitCache.Count > 0) {  	foreach (IUnit unit in this.unitCache.Values) {  		IModule /*?*/module = unit as IModule;  		if (module == null)  			continue;  		if (module.Requires32bits)  			return 4;  		if (module.Requires64bits)  			return 8;  	}  }  
Magic Number,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetTargetPlatformPointerSize,The following statement contains a magic number: if (this.unitCache.Count > 0) {  	foreach (IUnit unit in this.unitCache.Values) {  		IModule /*?*/module = unit as IModule;  		if (module == null)  			continue;  		if (module.Requires32bits)  			return 4;  		if (module.Requires64bits)  			return 8;  	}  }  
Magic Number,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetTargetPlatformPointerSize,The following statement contains a magic number: foreach (IUnit unit in this.unitCache.Values) {  	IModule /*?*/module = unit as IModule;  	if (module == null)  		continue;  	if (module.Requires32bits)  		return 4;  	if (module.Requires64bits)  		return 8;  }  
Magic Number,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetTargetPlatformPointerSize,The following statement contains a magic number: foreach (IUnit unit in this.unitCache.Values) {  	IModule /*?*/module = unit as IModule;  	if (module == null)  		continue;  	if (module.Requires32bits)  		return 4;  	if (module.Requires64bits)  		return 8;  }  
Magic Number,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetTargetPlatformPointerSize,The following statement contains a magic number: if (module.Requires32bits)  	return 4;  
Magic Number,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetTargetPlatformPointerSize,The following statement contains a magic number: return 4;  
Magic Number,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetTargetPlatformPointerSize,The following statement contains a magic number: if (module.Requires64bits)  	return 8;  
Magic Number,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetTargetPlatformPointerSize,The following statement contains a magic number: return 8;  
Magic Number,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetTargetPlatformPointerSize,The following statement contains a magic number: return 4;  
Magic Number,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,ProbeAssemblyReference,The following statement contains a magic number: if (coreVersion.Major == 1) {  	if (coreVersion.Minor == 0)  		platformDir = Path.Combine (Path.GetDirectoryName (platformDir) ?? ""' "v1.0.3705");  	else if (coreVersion.Minor == 1)  		platformDir = Path.Combine (Path.GetDirectoryName (platformDir) ?? ""' "v1.1.4322");  }  else if (coreVersion.Major == 2) {  	platformDir = Path.Combine (Path.GetDirectoryName (platformDir) ?? ""' "v3.5");  	result = this.Probe (platformDir' referencedAssembly);  	if (result != null)  		return result;  	platformDir = Path.Combine (Path.GetDirectoryName (platformDir) ?? ""' "v3.0");  	result = this.Probe (platformDir' referencedAssembly);  	if (result != null)  		return result;  	platformDir = Path.Combine (Path.GetDirectoryName (platformDir) ?? ""' "v2.0.50727");  }  else if (coreVersion.Major == 4) {  	platformDir = Path.Combine (Path.GetDirectoryName (platformDir) ?? ""' "v4.0.30319");  }  
Magic Number,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,ProbeAssemblyReference,The following statement contains a magic number: if (coreVersion.Major == 1) {  	if (coreVersion.Minor == 0)  		platformDir = Path.Combine (Path.GetDirectoryName (platformDir) ?? ""' "v1.0.3705");  	else if (coreVersion.Minor == 1)  		platformDir = Path.Combine (Path.GetDirectoryName (platformDir) ?? ""' "v1.1.4322");  }  else if (coreVersion.Major == 2) {  	platformDir = Path.Combine (Path.GetDirectoryName (platformDir) ?? ""' "v3.5");  	result = this.Probe (platformDir' referencedAssembly);  	if (result != null)  		return result;  	platformDir = Path.Combine (Path.GetDirectoryName (platformDir) ?? ""' "v3.0");  	result = this.Probe (platformDir' referencedAssembly);  	if (result != null)  		return result;  	platformDir = Path.Combine (Path.GetDirectoryName (platformDir) ?? ""' "v2.0.50727");  }  else if (coreVersion.Major == 4) {  	platformDir = Path.Combine (Path.GetDirectoryName (platformDir) ?? ""' "v4.0.30319");  }  
Magic Number,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,ProbeAssemblyReference,The following statement contains a magic number: if (coreVersion.Major == 2) {  	platformDir = Path.Combine (Path.GetDirectoryName (platformDir) ?? ""' "v3.5");  	result = this.Probe (platformDir' referencedAssembly);  	if (result != null)  		return result;  	platformDir = Path.Combine (Path.GetDirectoryName (platformDir) ?? ""' "v3.0");  	result = this.Probe (platformDir' referencedAssembly);  	if (result != null)  		return result;  	platformDir = Path.Combine (Path.GetDirectoryName (platformDir) ?? ""' "v2.0.50727");  }  else if (coreVersion.Major == 4) {  	platformDir = Path.Combine (Path.GetDirectoryName (platformDir) ?? ""' "v4.0.30319");  }  
Magic Number,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,ProbeAssemblyReference,The following statement contains a magic number: if (coreVersion.Major == 2) {  	platformDir = Path.Combine (Path.GetDirectoryName (platformDir) ?? ""' "v3.5");  	result = this.Probe (platformDir' referencedAssembly);  	if (result != null)  		return result;  	platformDir = Path.Combine (Path.GetDirectoryName (platformDir) ?? ""' "v3.0");  	result = this.Probe (platformDir' referencedAssembly);  	if (result != null)  		return result;  	platformDir = Path.Combine (Path.GetDirectoryName (platformDir) ?? ""' "v2.0.50727");  }  else if (coreVersion.Major == 4) {  	platformDir = Path.Combine (Path.GetDirectoryName (platformDir) ?? ""' "v4.0.30319");  }  
Magic Number,Microsoft.Cci,MetadataHostEnvironment,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,ProbeAssemblyReference,The following statement contains a magic number: if (coreVersion.Major == 4) {  	platformDir = Path.Combine (Path.GetDirectoryName (platformDir) ?? ""' "v4.0.30319");  }  
Magic Number,Microsoft.Cci,IMetadataReaderHostContract,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GuessUnderlyingTypeSizeOfUnresolvableReferenceToEnum,The following statement contains a magic number: Contract.Ensures (Contract.Result<byte> () == 1 || Contract.Result<byte> () == 2 || Contract.Result<byte> () == 4 || Contract.Result<byte> () == 8);  
Magic Number,Microsoft.Cci,IMetadataReaderHostContract,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GuessUnderlyingTypeSizeOfUnresolvableReferenceToEnum,The following statement contains a magic number: Contract.Ensures (Contract.Result<byte> () == 1 || Contract.Result<byte> () == 2 || Contract.Result<byte> () == 4 || Contract.Result<byte> () == 8);  
Magic Number,Microsoft.Cci,IMetadataReaderHostContract,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GuessUnderlyingTypeSizeOfUnresolvableReferenceToEnum,The following statement contains a magic number: Contract.Ensures (Contract.Result<byte> () == 1 || Contract.Result<byte> () == 2 || Contract.Result<byte> () == 4 || Contract.Result<byte> () == 8);  
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,MetadataReaderHost,The following statement contains a magic number: Contract.Requires (pointerSize == 0 || pointerSize == 4 || pointerSize == 8);  
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,MetadataReaderHost,The following statement contains a magic number: Contract.Requires (pointerSize == 0 || pointerSize == 4 || pointerSize == 8);  
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,TryNextPermutation,The following statement contains a magic number: if (this.currentWildGuesses != null) {  	var keys = new List<uint> (this.currentWildGuesses.Keys);  	foreach (var key in keys) {  		var oldValue = this.currentWildGuesses [key];  		if (oldValue == 4)  			this.currentWildGuesses [key] = 1;  		else if (oldValue == 1)  			this.currentWildGuesses [key] = 2;  		else if (oldValue == 2)  			this.currentWildGuesses [key] = 8;  		else {  			this.currentWildGuesses [key] = 4;  			continue;  		}  		allPermutationsHaveBeenTried = false;  		break;  	}  }  
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,TryNextPermutation,The following statement contains a magic number: if (this.currentWildGuesses != null) {  	var keys = new List<uint> (this.currentWildGuesses.Keys);  	foreach (var key in keys) {  		var oldValue = this.currentWildGuesses [key];  		if (oldValue == 4)  			this.currentWildGuesses [key] = 1;  		else if (oldValue == 1)  			this.currentWildGuesses [key] = 2;  		else if (oldValue == 2)  			this.currentWildGuesses [key] = 8;  		else {  			this.currentWildGuesses [key] = 4;  			continue;  		}  		allPermutationsHaveBeenTried = false;  		break;  	}  }  
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,TryNextPermutation,The following statement contains a magic number: if (this.currentWildGuesses != null) {  	var keys = new List<uint> (this.currentWildGuesses.Keys);  	foreach (var key in keys) {  		var oldValue = this.currentWildGuesses [key];  		if (oldValue == 4)  			this.currentWildGuesses [key] = 1;  		else if (oldValue == 1)  			this.currentWildGuesses [key] = 2;  		else if (oldValue == 2)  			this.currentWildGuesses [key] = 8;  		else {  			this.currentWildGuesses [key] = 4;  			continue;  		}  		allPermutationsHaveBeenTried = false;  		break;  	}  }  
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,TryNextPermutation,The following statement contains a magic number: if (this.currentWildGuesses != null) {  	var keys = new List<uint> (this.currentWildGuesses.Keys);  	foreach (var key in keys) {  		var oldValue = this.currentWildGuesses [key];  		if (oldValue == 4)  			this.currentWildGuesses [key] = 1;  		else if (oldValue == 1)  			this.currentWildGuesses [key] = 2;  		else if (oldValue == 2)  			this.currentWildGuesses [key] = 8;  		else {  			this.currentWildGuesses [key] = 4;  			continue;  		}  		allPermutationsHaveBeenTried = false;  		break;  	}  }  
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,TryNextPermutation,The following statement contains a magic number: if (this.currentWildGuesses != null) {  	var keys = new List<uint> (this.currentWildGuesses.Keys);  	foreach (var key in keys) {  		var oldValue = this.currentWildGuesses [key];  		if (oldValue == 4)  			this.currentWildGuesses [key] = 1;  		else if (oldValue == 1)  			this.currentWildGuesses [key] = 2;  		else if (oldValue == 2)  			this.currentWildGuesses [key] = 8;  		else {  			this.currentWildGuesses [key] = 4;  			continue;  		}  		allPermutationsHaveBeenTried = false;  		break;  	}  }  
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,TryNextPermutation,The following statement contains a magic number: foreach (var key in keys) {  	var oldValue = this.currentWildGuesses [key];  	if (oldValue == 4)  		this.currentWildGuesses [key] = 1;  	else if (oldValue == 1)  		this.currentWildGuesses [key] = 2;  	else if (oldValue == 2)  		this.currentWildGuesses [key] = 8;  	else {  		this.currentWildGuesses [key] = 4;  		continue;  	}  	allPermutationsHaveBeenTried = false;  	break;  }  
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,TryNextPermutation,The following statement contains a magic number: foreach (var key in keys) {  	var oldValue = this.currentWildGuesses [key];  	if (oldValue == 4)  		this.currentWildGuesses [key] = 1;  	else if (oldValue == 1)  		this.currentWildGuesses [key] = 2;  	else if (oldValue == 2)  		this.currentWildGuesses [key] = 8;  	else {  		this.currentWildGuesses [key] = 4;  		continue;  	}  	allPermutationsHaveBeenTried = false;  	break;  }  
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,TryNextPermutation,The following statement contains a magic number: foreach (var key in keys) {  	var oldValue = this.currentWildGuesses [key];  	if (oldValue == 4)  		this.currentWildGuesses [key] = 1;  	else if (oldValue == 1)  		this.currentWildGuesses [key] = 2;  	else if (oldValue == 2)  		this.currentWildGuesses [key] = 8;  	else {  		this.currentWildGuesses [key] = 4;  		continue;  	}  	allPermutationsHaveBeenTried = false;  	break;  }  
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,TryNextPermutation,The following statement contains a magic number: foreach (var key in keys) {  	var oldValue = this.currentWildGuesses [key];  	if (oldValue == 4)  		this.currentWildGuesses [key] = 1;  	else if (oldValue == 1)  		this.currentWildGuesses [key] = 2;  	else if (oldValue == 2)  		this.currentWildGuesses [key] = 8;  	else {  		this.currentWildGuesses [key] = 4;  		continue;  	}  	allPermutationsHaveBeenTried = false;  	break;  }  
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,TryNextPermutation,The following statement contains a magic number: foreach (var key in keys) {  	var oldValue = this.currentWildGuesses [key];  	if (oldValue == 4)  		this.currentWildGuesses [key] = 1;  	else if (oldValue == 1)  		this.currentWildGuesses [key] = 2;  	else if (oldValue == 2)  		this.currentWildGuesses [key] = 8;  	else {  		this.currentWildGuesses [key] = 4;  		continue;  	}  	allPermutationsHaveBeenTried = false;  	break;  }  
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,TryNextPermutation,The following statement contains a magic number: if (oldValue == 4)  	this.currentWildGuesses [key] = 1;  else if (oldValue == 1)  	this.currentWildGuesses [key] = 2;  else if (oldValue == 2)  	this.currentWildGuesses [key] = 8;  else {  	this.currentWildGuesses [key] = 4;  	continue;  }  
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,TryNextPermutation,The following statement contains a magic number: if (oldValue == 4)  	this.currentWildGuesses [key] = 1;  else if (oldValue == 1)  	this.currentWildGuesses [key] = 2;  else if (oldValue == 2)  	this.currentWildGuesses [key] = 8;  else {  	this.currentWildGuesses [key] = 4;  	continue;  }  
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,TryNextPermutation,The following statement contains a magic number: if (oldValue == 4)  	this.currentWildGuesses [key] = 1;  else if (oldValue == 1)  	this.currentWildGuesses [key] = 2;  else if (oldValue == 2)  	this.currentWildGuesses [key] = 8;  else {  	this.currentWildGuesses [key] = 4;  	continue;  }  
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,TryNextPermutation,The following statement contains a magic number: if (oldValue == 4)  	this.currentWildGuesses [key] = 1;  else if (oldValue == 1)  	this.currentWildGuesses [key] = 2;  else if (oldValue == 2)  	this.currentWildGuesses [key] = 8;  else {  	this.currentWildGuesses [key] = 4;  	continue;  }  
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,TryNextPermutation,The following statement contains a magic number: if (oldValue == 4)  	this.currentWildGuesses [key] = 1;  else if (oldValue == 1)  	this.currentWildGuesses [key] = 2;  else if (oldValue == 2)  	this.currentWildGuesses [key] = 8;  else {  	this.currentWildGuesses [key] = 4;  	continue;  }  
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,TryNextPermutation,The following statement contains a magic number: if (oldValue == 1)  	this.currentWildGuesses [key] = 2;  else if (oldValue == 2)  	this.currentWildGuesses [key] = 8;  else {  	this.currentWildGuesses [key] = 4;  	continue;  }  
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,TryNextPermutation,The following statement contains a magic number: if (oldValue == 1)  	this.currentWildGuesses [key] = 2;  else if (oldValue == 2)  	this.currentWildGuesses [key] = 8;  else {  	this.currentWildGuesses [key] = 4;  	continue;  }  
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,TryNextPermutation,The following statement contains a magic number: if (oldValue == 1)  	this.currentWildGuesses [key] = 2;  else if (oldValue == 2)  	this.currentWildGuesses [key] = 8;  else {  	this.currentWildGuesses [key] = 4;  	continue;  }  
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,TryNextPermutation,The following statement contains a magic number: if (oldValue == 1)  	this.currentWildGuesses [key] = 2;  else if (oldValue == 2)  	this.currentWildGuesses [key] = 8;  else {  	this.currentWildGuesses [key] = 4;  	continue;  }  
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,TryNextPermutation,The following statement contains a magic number: this.currentWildGuesses [key] = 2;  
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,TryNextPermutation,The following statement contains a magic number: if (oldValue == 2)  	this.currentWildGuesses [key] = 8;  else {  	this.currentWildGuesses [key] = 4;  	continue;  }  
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,TryNextPermutation,The following statement contains a magic number: if (oldValue == 2)  	this.currentWildGuesses [key] = 8;  else {  	this.currentWildGuesses [key] = 4;  	continue;  }  
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,TryNextPermutation,The following statement contains a magic number: if (oldValue == 2)  	this.currentWildGuesses [key] = 8;  else {  	this.currentWildGuesses [key] = 4;  	continue;  }  
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,TryNextPermutation,The following statement contains a magic number: this.currentWildGuesses [key] = 8;  
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,TryNextPermutation,The following statement contains a magic number: this.currentWildGuesses [key] = 4;  
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,TryNextPermutation,The following statement contains a magic number: if (allPermutationsHaveBeenTried && this.currentGoodGuesses != null) {  	if (this.currentWildGuesses == null)  		this.currentWildGuesses = new Dictionary<uint' byte> ();  	foreach (var key in this.currentGoodGuesses.Keys) {  		allPermutationsHaveBeenTried = false;  		this.currentWildGuesses [key] = 4;  	}  	this.currentGoodGuesses = null;  }  
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,TryNextPermutation,The following statement contains a magic number: foreach (var key in this.currentGoodGuesses.Keys) {  	allPermutationsHaveBeenTried = false;  	this.currentWildGuesses [key] = 4;  }  
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,TryNextPermutation,The following statement contains a magic number: this.currentWildGuesses [key] = 4;  
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GuessUnderlyingTypeSizeOfUnresolvableReferenceToEnum,The following statement contains a magic number: this.currentWildGuesses [rkey] = 4;  
Magic Number,Microsoft.Cci,MetadataReaderHost,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GuessUnderlyingTypeSizeOfUnresolvableReferenceToEnum,The following statement contains a magic number: return 4;  
Magic Number,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetGenericMethodParameterReferenceInternId,The following statement contains a magic number: if (!(this.CurrentMethodReference is Dummy)) {  	//this happens when the defining method reference contains a type in its signature which either is' or contains'  	//a reference to this generic method type parameter. In that case we break the cycle by just using the index of   	//the generic parameter. Only method references that refer to their own type parameters will ever  	//get this version of the interned id.  	return index + 1000000;  	//provide a big offset to minimize the chances of a structural type in the   	//signature of the method interning onto some other type that is parameterized by a type whose intern key is index.  }  
Magic Number,Microsoft.Cci,InternFactory,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetGenericMethodParameterReferenceInternId,The following statement contains a magic number: return index + 1000000;  
Magic Number,Microsoft.Cci,NameTable,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetNameFor,The following statement contains a magic number: lock (this.caseInsensitiveTable) {  	IName /*?*/result;  	if (this.caseSensitiveTable.TryGetValue (name' out result)) {  		//^ assume result != null; //Follows from the way Dictionary is instantiated' but the verifier is ignorant of this.  		//^ assume result.Value == name; //Only this routine ever adds entries to the table and it only ever adds entries for which this is true. TODO: it would be nice to be able express this as an invariant.  		return result;  	}  	//string lowerCaseName = name.ToLower(CultureInfo.InvariantCulture); //REVIEW: is it safer to use ToUpperInvariant' or does it make no difference?  	int caseInsensitiveCounter;  	if (!this.caseInsensitiveTable.TryGetValue (name' out caseInsensitiveCounter)) {  		caseInsensitiveCounter = this.caseInsensitiveCounter;  		caseInsensitiveCounter += 17;  		if (caseInsensitiveCounter <= 0) {  			caseInsensitiveCounter = (caseInsensitiveCounter - int.MinValue) + 1000000;  		}  		this.caseInsensitiveCounter = caseInsensitiveCounter;  		this.caseInsensitiveTable.Add (name' caseInsensitiveCounter);  	}  	//^ assume caseInsensitiveCounter > 0; //Follows from the invariant' but this is beyond the verifier right now.  	int caseSensitiveCounter = this.caseSensitiveCounter;  	caseSensitiveCounter += 17;  	if (caseSensitiveCounter <= 0) {  		caseSensitiveCounter = (caseSensitiveCounter - int.MinValue) + 1000000;  		//^ assume caseSensitiveCounter > 0;  	}  	result = new Name (caseInsensitiveCounter' caseSensitiveCounter' name);  	//^ assume result.Value == name;  	this.caseSensitiveCounter = caseSensitiveCounter;  	this.caseSensitiveTable.Add (name' result);  	return result;  }  
Magic Number,Microsoft.Cci,NameTable,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetNameFor,The following statement contains a magic number: lock (this.caseInsensitiveTable) {  	IName /*?*/result;  	if (this.caseSensitiveTable.TryGetValue (name' out result)) {  		//^ assume result != null; //Follows from the way Dictionary is instantiated' but the verifier is ignorant of this.  		//^ assume result.Value == name; //Only this routine ever adds entries to the table and it only ever adds entries for which this is true. TODO: it would be nice to be able express this as an invariant.  		return result;  	}  	//string lowerCaseName = name.ToLower(CultureInfo.InvariantCulture); //REVIEW: is it safer to use ToUpperInvariant' or does it make no difference?  	int caseInsensitiveCounter;  	if (!this.caseInsensitiveTable.TryGetValue (name' out caseInsensitiveCounter)) {  		caseInsensitiveCounter = this.caseInsensitiveCounter;  		caseInsensitiveCounter += 17;  		if (caseInsensitiveCounter <= 0) {  			caseInsensitiveCounter = (caseInsensitiveCounter - int.MinValue) + 1000000;  		}  		this.caseInsensitiveCounter = caseInsensitiveCounter;  		this.caseInsensitiveTable.Add (name' caseInsensitiveCounter);  	}  	//^ assume caseInsensitiveCounter > 0; //Follows from the invariant' but this is beyond the verifier right now.  	int caseSensitiveCounter = this.caseSensitiveCounter;  	caseSensitiveCounter += 17;  	if (caseSensitiveCounter <= 0) {  		caseSensitiveCounter = (caseSensitiveCounter - int.MinValue) + 1000000;  		//^ assume caseSensitiveCounter > 0;  	}  	result = new Name (caseInsensitiveCounter' caseSensitiveCounter' name);  	//^ assume result.Value == name;  	this.caseSensitiveCounter = caseSensitiveCounter;  	this.caseSensitiveTable.Add (name' result);  	return result;  }  
Magic Number,Microsoft.Cci,NameTable,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetNameFor,The following statement contains a magic number: lock (this.caseInsensitiveTable) {  	IName /*?*/result;  	if (this.caseSensitiveTable.TryGetValue (name' out result)) {  		//^ assume result != null; //Follows from the way Dictionary is instantiated' but the verifier is ignorant of this.  		//^ assume result.Value == name; //Only this routine ever adds entries to the table and it only ever adds entries for which this is true. TODO: it would be nice to be able express this as an invariant.  		return result;  	}  	//string lowerCaseName = name.ToLower(CultureInfo.InvariantCulture); //REVIEW: is it safer to use ToUpperInvariant' or does it make no difference?  	int caseInsensitiveCounter;  	if (!this.caseInsensitiveTable.TryGetValue (name' out caseInsensitiveCounter)) {  		caseInsensitiveCounter = this.caseInsensitiveCounter;  		caseInsensitiveCounter += 17;  		if (caseInsensitiveCounter <= 0) {  			caseInsensitiveCounter = (caseInsensitiveCounter - int.MinValue) + 1000000;  		}  		this.caseInsensitiveCounter = caseInsensitiveCounter;  		this.caseInsensitiveTable.Add (name' caseInsensitiveCounter);  	}  	//^ assume caseInsensitiveCounter > 0; //Follows from the invariant' but this is beyond the verifier right now.  	int caseSensitiveCounter = this.caseSensitiveCounter;  	caseSensitiveCounter += 17;  	if (caseSensitiveCounter <= 0) {  		caseSensitiveCounter = (caseSensitiveCounter - int.MinValue) + 1000000;  		//^ assume caseSensitiveCounter > 0;  	}  	result = new Name (caseInsensitiveCounter' caseSensitiveCounter' name);  	//^ assume result.Value == name;  	this.caseSensitiveCounter = caseSensitiveCounter;  	this.caseSensitiveTable.Add (name' result);  	return result;  }  
Magic Number,Microsoft.Cci,NameTable,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetNameFor,The following statement contains a magic number: lock (this.caseInsensitiveTable) {  	IName /*?*/result;  	if (this.caseSensitiveTable.TryGetValue (name' out result)) {  		//^ assume result != null; //Follows from the way Dictionary is instantiated' but the verifier is ignorant of this.  		//^ assume result.Value == name; //Only this routine ever adds entries to the table and it only ever adds entries for which this is true. TODO: it would be nice to be able express this as an invariant.  		return result;  	}  	//string lowerCaseName = name.ToLower(CultureInfo.InvariantCulture); //REVIEW: is it safer to use ToUpperInvariant' or does it make no difference?  	int caseInsensitiveCounter;  	if (!this.caseInsensitiveTable.TryGetValue (name' out caseInsensitiveCounter)) {  		caseInsensitiveCounter = this.caseInsensitiveCounter;  		caseInsensitiveCounter += 17;  		if (caseInsensitiveCounter <= 0) {  			caseInsensitiveCounter = (caseInsensitiveCounter - int.MinValue) + 1000000;  		}  		this.caseInsensitiveCounter = caseInsensitiveCounter;  		this.caseInsensitiveTable.Add (name' caseInsensitiveCounter);  	}  	//^ assume caseInsensitiveCounter > 0; //Follows from the invariant' but this is beyond the verifier right now.  	int caseSensitiveCounter = this.caseSensitiveCounter;  	caseSensitiveCounter += 17;  	if (caseSensitiveCounter <= 0) {  		caseSensitiveCounter = (caseSensitiveCounter - int.MinValue) + 1000000;  		//^ assume caseSensitiveCounter > 0;  	}  	result = new Name (caseInsensitiveCounter' caseSensitiveCounter' name);  	//^ assume result.Value == name;  	this.caseSensitiveCounter = caseSensitiveCounter;  	this.caseSensitiveTable.Add (name' result);  	return result;  }  
Magic Number,Microsoft.Cci,NameTable,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetNameFor,The following statement contains a magic number: if (!this.caseInsensitiveTable.TryGetValue (name' out caseInsensitiveCounter)) {  	caseInsensitiveCounter = this.caseInsensitiveCounter;  	caseInsensitiveCounter += 17;  	if (caseInsensitiveCounter <= 0) {  		caseInsensitiveCounter = (caseInsensitiveCounter - int.MinValue) + 1000000;  	}  	this.caseInsensitiveCounter = caseInsensitiveCounter;  	this.caseInsensitiveTable.Add (name' caseInsensitiveCounter);  }  
Magic Number,Microsoft.Cci,NameTable,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetNameFor,The following statement contains a magic number: if (!this.caseInsensitiveTable.TryGetValue (name' out caseInsensitiveCounter)) {  	caseInsensitiveCounter = this.caseInsensitiveCounter;  	caseInsensitiveCounter += 17;  	if (caseInsensitiveCounter <= 0) {  		caseInsensitiveCounter = (caseInsensitiveCounter - int.MinValue) + 1000000;  	}  	this.caseInsensitiveCounter = caseInsensitiveCounter;  	this.caseInsensitiveTable.Add (name' caseInsensitiveCounter);  }  
Magic Number,Microsoft.Cci,NameTable,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetNameFor,The following statement contains a magic number: caseInsensitiveCounter += 17;  
Magic Number,Microsoft.Cci,NameTable,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetNameFor,The following statement contains a magic number: if (caseInsensitiveCounter <= 0) {  	caseInsensitiveCounter = (caseInsensitiveCounter - int.MinValue) + 1000000;  }  
Magic Number,Microsoft.Cci,NameTable,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetNameFor,The following statement contains a magic number: caseInsensitiveCounter = (caseInsensitiveCounter - int.MinValue) + 1000000;  
Magic Number,Microsoft.Cci,NameTable,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetNameFor,The following statement contains a magic number: caseSensitiveCounter += 17;  
Magic Number,Microsoft.Cci,NameTable,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetNameFor,The following statement contains a magic number: if (caseSensitiveCounter <= 0) {  	caseSensitiveCounter = (caseSensitiveCounter - int.MinValue) + 1000000;  	//^ assume caseSensitiveCounter > 0;  }  
Magic Number,Microsoft.Cci,NameTable,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Core.cs,GetNameFor,The following statement contains a magic number: caseSensitiveCounter = (caseSensitiveCounter - int.MinValue) + 1000000;  
Magic Number,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ComputeFieldOffset,The following statement contains a magic number: foreach (ITypeDefinitionMember member in members) {  	INestedTypeDefinition fieldAsTypeDef = member as INestedTypeDefinition;  	if (fieldAsTypeDef != null && fieldAsTypeDef == item) {  		ushort typeAlignment = (ushort)(TypeHelper.TypeAlignment (fieldAsTypeDef.ResolvedType) * 8);  		return (((result + typeAlignment - 1) / typeAlignment) * typeAlignment) / 8;  	}  	else {  		IFieldDefinition /*?*/f = member as IFieldDefinition;  		if (f == null || f.IsStatic)  			continue;  		if (f.Type.ResolvedType == item)  			continue;  		// in case we are calculating the offset of an anonymous type' skip the implicit field of that type  		ushort fieldAlignment = (ushort)(TypeHelper.TypeAlignment (f.Type.ResolvedType) * 8);  		if (f == item) {  			if (f.IsBitField && bitOffset > 0 && bitOffset + f.BitLength <= bitFieldAlignment)  				return (result - bitOffset) / 8;  			if (bitFieldAlignment > fieldAlignment)  				fieldAlignment = bitFieldAlignment;  			return (((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment) / 8;  		}  		uint fieldSize;  		if (f.IsBitField) {  			bitFieldAlignment = fieldAlignment;  			fieldSize = f.BitLength;  			if (bitOffset > 0 && bitOffset + fieldSize > fieldAlignment)  				bitOffset = 0;  			if (bitOffset == 0 || fieldSize == 0) {  				result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  				bitOffset = 0;  			}  			bitOffset += fieldSize;  		}  		else {  			if (bitFieldAlignment > fieldAlignment)  				fieldAlignment = bitFieldAlignment;  			bitFieldAlignment = 0;  			bitOffset = 0;  			result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  			fieldSize = TypeHelper.SizeOfType (f.Type.ResolvedType) * 8;  		}  		result += fieldSize;  	}  }  
Magic Number,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ComputeFieldOffset,The following statement contains a magic number: foreach (ITypeDefinitionMember member in members) {  	INestedTypeDefinition fieldAsTypeDef = member as INestedTypeDefinition;  	if (fieldAsTypeDef != null && fieldAsTypeDef == item) {  		ushort typeAlignment = (ushort)(TypeHelper.TypeAlignment (fieldAsTypeDef.ResolvedType) * 8);  		return (((result + typeAlignment - 1) / typeAlignment) * typeAlignment) / 8;  	}  	else {  		IFieldDefinition /*?*/f = member as IFieldDefinition;  		if (f == null || f.IsStatic)  			continue;  		if (f.Type.ResolvedType == item)  			continue;  		// in case we are calculating the offset of an anonymous type' skip the implicit field of that type  		ushort fieldAlignment = (ushort)(TypeHelper.TypeAlignment (f.Type.ResolvedType) * 8);  		if (f == item) {  			if (f.IsBitField && bitOffset > 0 && bitOffset + f.BitLength <= bitFieldAlignment)  				return (result - bitOffset) / 8;  			if (bitFieldAlignment > fieldAlignment)  				fieldAlignment = bitFieldAlignment;  			return (((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment) / 8;  		}  		uint fieldSize;  		if (f.IsBitField) {  			bitFieldAlignment = fieldAlignment;  			fieldSize = f.BitLength;  			if (bitOffset > 0 && bitOffset + fieldSize > fieldAlignment)  				bitOffset = 0;  			if (bitOffset == 0 || fieldSize == 0) {  				result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  				bitOffset = 0;  			}  			bitOffset += fieldSize;  		}  		else {  			if (bitFieldAlignment > fieldAlignment)  				fieldAlignment = bitFieldAlignment;  			bitFieldAlignment = 0;  			bitOffset = 0;  			result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  			fieldSize = TypeHelper.SizeOfType (f.Type.ResolvedType) * 8;  		}  		result += fieldSize;  	}  }  
Magic Number,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ComputeFieldOffset,The following statement contains a magic number: foreach (ITypeDefinitionMember member in members) {  	INestedTypeDefinition fieldAsTypeDef = member as INestedTypeDefinition;  	if (fieldAsTypeDef != null && fieldAsTypeDef == item) {  		ushort typeAlignment = (ushort)(TypeHelper.TypeAlignment (fieldAsTypeDef.ResolvedType) * 8);  		return (((result + typeAlignment - 1) / typeAlignment) * typeAlignment) / 8;  	}  	else {  		IFieldDefinition /*?*/f = member as IFieldDefinition;  		if (f == null || f.IsStatic)  			continue;  		if (f.Type.ResolvedType == item)  			continue;  		// in case we are calculating the offset of an anonymous type' skip the implicit field of that type  		ushort fieldAlignment = (ushort)(TypeHelper.TypeAlignment (f.Type.ResolvedType) * 8);  		if (f == item) {  			if (f.IsBitField && bitOffset > 0 && bitOffset + f.BitLength <= bitFieldAlignment)  				return (result - bitOffset) / 8;  			if (bitFieldAlignment > fieldAlignment)  				fieldAlignment = bitFieldAlignment;  			return (((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment) / 8;  		}  		uint fieldSize;  		if (f.IsBitField) {  			bitFieldAlignment = fieldAlignment;  			fieldSize = f.BitLength;  			if (bitOffset > 0 && bitOffset + fieldSize > fieldAlignment)  				bitOffset = 0;  			if (bitOffset == 0 || fieldSize == 0) {  				result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  				bitOffset = 0;  			}  			bitOffset += fieldSize;  		}  		else {  			if (bitFieldAlignment > fieldAlignment)  				fieldAlignment = bitFieldAlignment;  			bitFieldAlignment = 0;  			bitOffset = 0;  			result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  			fieldSize = TypeHelper.SizeOfType (f.Type.ResolvedType) * 8;  		}  		result += fieldSize;  	}  }  
Magic Number,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ComputeFieldOffset,The following statement contains a magic number: foreach (ITypeDefinitionMember member in members) {  	INestedTypeDefinition fieldAsTypeDef = member as INestedTypeDefinition;  	if (fieldAsTypeDef != null && fieldAsTypeDef == item) {  		ushort typeAlignment = (ushort)(TypeHelper.TypeAlignment (fieldAsTypeDef.ResolvedType) * 8);  		return (((result + typeAlignment - 1) / typeAlignment) * typeAlignment) / 8;  	}  	else {  		IFieldDefinition /*?*/f = member as IFieldDefinition;  		if (f == null || f.IsStatic)  			continue;  		if (f.Type.ResolvedType == item)  			continue;  		// in case we are calculating the offset of an anonymous type' skip the implicit field of that type  		ushort fieldAlignment = (ushort)(TypeHelper.TypeAlignment (f.Type.ResolvedType) * 8);  		if (f == item) {  			if (f.IsBitField && bitOffset > 0 && bitOffset + f.BitLength <= bitFieldAlignment)  				return (result - bitOffset) / 8;  			if (bitFieldAlignment > fieldAlignment)  				fieldAlignment = bitFieldAlignment;  			return (((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment) / 8;  		}  		uint fieldSize;  		if (f.IsBitField) {  			bitFieldAlignment = fieldAlignment;  			fieldSize = f.BitLength;  			if (bitOffset > 0 && bitOffset + fieldSize > fieldAlignment)  				bitOffset = 0;  			if (bitOffset == 0 || fieldSize == 0) {  				result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  				bitOffset = 0;  			}  			bitOffset += fieldSize;  		}  		else {  			if (bitFieldAlignment > fieldAlignment)  				fieldAlignment = bitFieldAlignment;  			bitFieldAlignment = 0;  			bitOffset = 0;  			result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  			fieldSize = TypeHelper.SizeOfType (f.Type.ResolvedType) * 8;  		}  		result += fieldSize;  	}  }  
Magic Number,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ComputeFieldOffset,The following statement contains a magic number: foreach (ITypeDefinitionMember member in members) {  	INestedTypeDefinition fieldAsTypeDef = member as INestedTypeDefinition;  	if (fieldAsTypeDef != null && fieldAsTypeDef == item) {  		ushort typeAlignment = (ushort)(TypeHelper.TypeAlignment (fieldAsTypeDef.ResolvedType) * 8);  		return (((result + typeAlignment - 1) / typeAlignment) * typeAlignment) / 8;  	}  	else {  		IFieldDefinition /*?*/f = member as IFieldDefinition;  		if (f == null || f.IsStatic)  			continue;  		if (f.Type.ResolvedType == item)  			continue;  		// in case we are calculating the offset of an anonymous type' skip the implicit field of that type  		ushort fieldAlignment = (ushort)(TypeHelper.TypeAlignment (f.Type.ResolvedType) * 8);  		if (f == item) {  			if (f.IsBitField && bitOffset > 0 && bitOffset + f.BitLength <= bitFieldAlignment)  				return (result - bitOffset) / 8;  			if (bitFieldAlignment > fieldAlignment)  				fieldAlignment = bitFieldAlignment;  			return (((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment) / 8;  		}  		uint fieldSize;  		if (f.IsBitField) {  			bitFieldAlignment = fieldAlignment;  			fieldSize = f.BitLength;  			if (bitOffset > 0 && bitOffset + fieldSize > fieldAlignment)  				bitOffset = 0;  			if (bitOffset == 0 || fieldSize == 0) {  				result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  				bitOffset = 0;  			}  			bitOffset += fieldSize;  		}  		else {  			if (bitFieldAlignment > fieldAlignment)  				fieldAlignment = bitFieldAlignment;  			bitFieldAlignment = 0;  			bitOffset = 0;  			result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  			fieldSize = TypeHelper.SizeOfType (f.Type.ResolvedType) * 8;  		}  		result += fieldSize;  	}  }  
Magic Number,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ComputeFieldOffset,The following statement contains a magic number: foreach (ITypeDefinitionMember member in members) {  	INestedTypeDefinition fieldAsTypeDef = member as INestedTypeDefinition;  	if (fieldAsTypeDef != null && fieldAsTypeDef == item) {  		ushort typeAlignment = (ushort)(TypeHelper.TypeAlignment (fieldAsTypeDef.ResolvedType) * 8);  		return (((result + typeAlignment - 1) / typeAlignment) * typeAlignment) / 8;  	}  	else {  		IFieldDefinition /*?*/f = member as IFieldDefinition;  		if (f == null || f.IsStatic)  			continue;  		if (f.Type.ResolvedType == item)  			continue;  		// in case we are calculating the offset of an anonymous type' skip the implicit field of that type  		ushort fieldAlignment = (ushort)(TypeHelper.TypeAlignment (f.Type.ResolvedType) * 8);  		if (f == item) {  			if (f.IsBitField && bitOffset > 0 && bitOffset + f.BitLength <= bitFieldAlignment)  				return (result - bitOffset) / 8;  			if (bitFieldAlignment > fieldAlignment)  				fieldAlignment = bitFieldAlignment;  			return (((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment) / 8;  		}  		uint fieldSize;  		if (f.IsBitField) {  			bitFieldAlignment = fieldAlignment;  			fieldSize = f.BitLength;  			if (bitOffset > 0 && bitOffset + fieldSize > fieldAlignment)  				bitOffset = 0;  			if (bitOffset == 0 || fieldSize == 0) {  				result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  				bitOffset = 0;  			}  			bitOffset += fieldSize;  		}  		else {  			if (bitFieldAlignment > fieldAlignment)  				fieldAlignment = bitFieldAlignment;  			bitFieldAlignment = 0;  			bitOffset = 0;  			result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  			fieldSize = TypeHelper.SizeOfType (f.Type.ResolvedType) * 8;  		}  		result += fieldSize;  	}  }  
Magic Number,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ComputeFieldOffset,The following statement contains a magic number: if (fieldAsTypeDef != null && fieldAsTypeDef == item) {  	ushort typeAlignment = (ushort)(TypeHelper.TypeAlignment (fieldAsTypeDef.ResolvedType) * 8);  	return (((result + typeAlignment - 1) / typeAlignment) * typeAlignment) / 8;  }  else {  	IFieldDefinition /*?*/f = member as IFieldDefinition;  	if (f == null || f.IsStatic)  		continue;  	if (f.Type.ResolvedType == item)  		continue;  	// in case we are calculating the offset of an anonymous type' skip the implicit field of that type  	ushort fieldAlignment = (ushort)(TypeHelper.TypeAlignment (f.Type.ResolvedType) * 8);  	if (f == item) {  		if (f.IsBitField && bitOffset > 0 && bitOffset + f.BitLength <= bitFieldAlignment)  			return (result - bitOffset) / 8;  		if (bitFieldAlignment > fieldAlignment)  			fieldAlignment = bitFieldAlignment;  		return (((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment) / 8;  	}  	uint fieldSize;  	if (f.IsBitField) {  		bitFieldAlignment = fieldAlignment;  		fieldSize = f.BitLength;  		if (bitOffset > 0 && bitOffset + fieldSize > fieldAlignment)  			bitOffset = 0;  		if (bitOffset == 0 || fieldSize == 0) {  			result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  			bitOffset = 0;  		}  		bitOffset += fieldSize;  	}  	else {  		if (bitFieldAlignment > fieldAlignment)  			fieldAlignment = bitFieldAlignment;  		bitFieldAlignment = 0;  		bitOffset = 0;  		result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  		fieldSize = TypeHelper.SizeOfType (f.Type.ResolvedType) * 8;  	}  	result += fieldSize;  }  
Magic Number,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ComputeFieldOffset,The following statement contains a magic number: if (fieldAsTypeDef != null && fieldAsTypeDef == item) {  	ushort typeAlignment = (ushort)(TypeHelper.TypeAlignment (fieldAsTypeDef.ResolvedType) * 8);  	return (((result + typeAlignment - 1) / typeAlignment) * typeAlignment) / 8;  }  else {  	IFieldDefinition /*?*/f = member as IFieldDefinition;  	if (f == null || f.IsStatic)  		continue;  	if (f.Type.ResolvedType == item)  		continue;  	// in case we are calculating the offset of an anonymous type' skip the implicit field of that type  	ushort fieldAlignment = (ushort)(TypeHelper.TypeAlignment (f.Type.ResolvedType) * 8);  	if (f == item) {  		if (f.IsBitField && bitOffset > 0 && bitOffset + f.BitLength <= bitFieldAlignment)  			return (result - bitOffset) / 8;  		if (bitFieldAlignment > fieldAlignment)  			fieldAlignment = bitFieldAlignment;  		return (((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment) / 8;  	}  	uint fieldSize;  	if (f.IsBitField) {  		bitFieldAlignment = fieldAlignment;  		fieldSize = f.BitLength;  		if (bitOffset > 0 && bitOffset + fieldSize > fieldAlignment)  			bitOffset = 0;  		if (bitOffset == 0 || fieldSize == 0) {  			result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  			bitOffset = 0;  		}  		bitOffset += fieldSize;  	}  	else {  		if (bitFieldAlignment > fieldAlignment)  			fieldAlignment = bitFieldAlignment;  		bitFieldAlignment = 0;  		bitOffset = 0;  		result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  		fieldSize = TypeHelper.SizeOfType (f.Type.ResolvedType) * 8;  	}  	result += fieldSize;  }  
Magic Number,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ComputeFieldOffset,The following statement contains a magic number: if (fieldAsTypeDef != null && fieldAsTypeDef == item) {  	ushort typeAlignment = (ushort)(TypeHelper.TypeAlignment (fieldAsTypeDef.ResolvedType) * 8);  	return (((result + typeAlignment - 1) / typeAlignment) * typeAlignment) / 8;  }  else {  	IFieldDefinition /*?*/f = member as IFieldDefinition;  	if (f == null || f.IsStatic)  		continue;  	if (f.Type.ResolvedType == item)  		continue;  	// in case we are calculating the offset of an anonymous type' skip the implicit field of that type  	ushort fieldAlignment = (ushort)(TypeHelper.TypeAlignment (f.Type.ResolvedType) * 8);  	if (f == item) {  		if (f.IsBitField && bitOffset > 0 && bitOffset + f.BitLength <= bitFieldAlignment)  			return (result - bitOffset) / 8;  		if (bitFieldAlignment > fieldAlignment)  			fieldAlignment = bitFieldAlignment;  		return (((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment) / 8;  	}  	uint fieldSize;  	if (f.IsBitField) {  		bitFieldAlignment = fieldAlignment;  		fieldSize = f.BitLength;  		if (bitOffset > 0 && bitOffset + fieldSize > fieldAlignment)  			bitOffset = 0;  		if (bitOffset == 0 || fieldSize == 0) {  			result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  			bitOffset = 0;  		}  		bitOffset += fieldSize;  	}  	else {  		if (bitFieldAlignment > fieldAlignment)  			fieldAlignment = bitFieldAlignment;  		bitFieldAlignment = 0;  		bitOffset = 0;  		result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  		fieldSize = TypeHelper.SizeOfType (f.Type.ResolvedType) * 8;  	}  	result += fieldSize;  }  
Magic Number,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ComputeFieldOffset,The following statement contains a magic number: if (fieldAsTypeDef != null && fieldAsTypeDef == item) {  	ushort typeAlignment = (ushort)(TypeHelper.TypeAlignment (fieldAsTypeDef.ResolvedType) * 8);  	return (((result + typeAlignment - 1) / typeAlignment) * typeAlignment) / 8;  }  else {  	IFieldDefinition /*?*/f = member as IFieldDefinition;  	if (f == null || f.IsStatic)  		continue;  	if (f.Type.ResolvedType == item)  		continue;  	// in case we are calculating the offset of an anonymous type' skip the implicit field of that type  	ushort fieldAlignment = (ushort)(TypeHelper.TypeAlignment (f.Type.ResolvedType) * 8);  	if (f == item) {  		if (f.IsBitField && bitOffset > 0 && bitOffset + f.BitLength <= bitFieldAlignment)  			return (result - bitOffset) / 8;  		if (bitFieldAlignment > fieldAlignment)  			fieldAlignment = bitFieldAlignment;  		return (((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment) / 8;  	}  	uint fieldSize;  	if (f.IsBitField) {  		bitFieldAlignment = fieldAlignment;  		fieldSize = f.BitLength;  		if (bitOffset > 0 && bitOffset + fieldSize > fieldAlignment)  			bitOffset = 0;  		if (bitOffset == 0 || fieldSize == 0) {  			result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  			bitOffset = 0;  		}  		bitOffset += fieldSize;  	}  	else {  		if (bitFieldAlignment > fieldAlignment)  			fieldAlignment = bitFieldAlignment;  		bitFieldAlignment = 0;  		bitOffset = 0;  		result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  		fieldSize = TypeHelper.SizeOfType (f.Type.ResolvedType) * 8;  	}  	result += fieldSize;  }  
Magic Number,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ComputeFieldOffset,The following statement contains a magic number: if (fieldAsTypeDef != null && fieldAsTypeDef == item) {  	ushort typeAlignment = (ushort)(TypeHelper.TypeAlignment (fieldAsTypeDef.ResolvedType) * 8);  	return (((result + typeAlignment - 1) / typeAlignment) * typeAlignment) / 8;  }  else {  	IFieldDefinition /*?*/f = member as IFieldDefinition;  	if (f == null || f.IsStatic)  		continue;  	if (f.Type.ResolvedType == item)  		continue;  	// in case we are calculating the offset of an anonymous type' skip the implicit field of that type  	ushort fieldAlignment = (ushort)(TypeHelper.TypeAlignment (f.Type.ResolvedType) * 8);  	if (f == item) {  		if (f.IsBitField && bitOffset > 0 && bitOffset + f.BitLength <= bitFieldAlignment)  			return (result - bitOffset) / 8;  		if (bitFieldAlignment > fieldAlignment)  			fieldAlignment = bitFieldAlignment;  		return (((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment) / 8;  	}  	uint fieldSize;  	if (f.IsBitField) {  		bitFieldAlignment = fieldAlignment;  		fieldSize = f.BitLength;  		if (bitOffset > 0 && bitOffset + fieldSize > fieldAlignment)  			bitOffset = 0;  		if (bitOffset == 0 || fieldSize == 0) {  			result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  			bitOffset = 0;  		}  		bitOffset += fieldSize;  	}  	else {  		if (bitFieldAlignment > fieldAlignment)  			fieldAlignment = bitFieldAlignment;  		bitFieldAlignment = 0;  		bitOffset = 0;  		result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  		fieldSize = TypeHelper.SizeOfType (f.Type.ResolvedType) * 8;  	}  	result += fieldSize;  }  
Magic Number,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ComputeFieldOffset,The following statement contains a magic number: if (fieldAsTypeDef != null && fieldAsTypeDef == item) {  	ushort typeAlignment = (ushort)(TypeHelper.TypeAlignment (fieldAsTypeDef.ResolvedType) * 8);  	return (((result + typeAlignment - 1) / typeAlignment) * typeAlignment) / 8;  }  else {  	IFieldDefinition /*?*/f = member as IFieldDefinition;  	if (f == null || f.IsStatic)  		continue;  	if (f.Type.ResolvedType == item)  		continue;  	// in case we are calculating the offset of an anonymous type' skip the implicit field of that type  	ushort fieldAlignment = (ushort)(TypeHelper.TypeAlignment (f.Type.ResolvedType) * 8);  	if (f == item) {  		if (f.IsBitField && bitOffset > 0 && bitOffset + f.BitLength <= bitFieldAlignment)  			return (result - bitOffset) / 8;  		if (bitFieldAlignment > fieldAlignment)  			fieldAlignment = bitFieldAlignment;  		return (((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment) / 8;  	}  	uint fieldSize;  	if (f.IsBitField) {  		bitFieldAlignment = fieldAlignment;  		fieldSize = f.BitLength;  		if (bitOffset > 0 && bitOffset + fieldSize > fieldAlignment)  			bitOffset = 0;  		if (bitOffset == 0 || fieldSize == 0) {  			result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  			bitOffset = 0;  		}  		bitOffset += fieldSize;  	}  	else {  		if (bitFieldAlignment > fieldAlignment)  			fieldAlignment = bitFieldAlignment;  		bitFieldAlignment = 0;  		bitOffset = 0;  		result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  		fieldSize = TypeHelper.SizeOfType (f.Type.ResolvedType) * 8;  	}  	result += fieldSize;  }  
Magic Number,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ComputeFieldOffset,The following statement contains a magic number: return (((result + typeAlignment - 1) / typeAlignment) * typeAlignment) / 8;  
Magic Number,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ComputeFieldOffset,The following statement contains a magic number: if (f == item) {  	if (f.IsBitField && bitOffset > 0 && bitOffset + f.BitLength <= bitFieldAlignment)  		return (result - bitOffset) / 8;  	if (bitFieldAlignment > fieldAlignment)  		fieldAlignment = bitFieldAlignment;  	return (((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment) / 8;  }  
Magic Number,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ComputeFieldOffset,The following statement contains a magic number: if (f == item) {  	if (f.IsBitField && bitOffset > 0 && bitOffset + f.BitLength <= bitFieldAlignment)  		return (result - bitOffset) / 8;  	if (bitFieldAlignment > fieldAlignment)  		fieldAlignment = bitFieldAlignment;  	return (((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment) / 8;  }  
Magic Number,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ComputeFieldOffset,The following statement contains a magic number: if (f.IsBitField && bitOffset > 0 && bitOffset + f.BitLength <= bitFieldAlignment)  	return (result - bitOffset) / 8;  
Magic Number,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ComputeFieldOffset,The following statement contains a magic number: return (result - bitOffset) / 8;  
Magic Number,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ComputeFieldOffset,The following statement contains a magic number: return (((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment) / 8;  
Magic Number,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ComputeFieldOffset,The following statement contains a magic number: if (f.IsBitField) {  	bitFieldAlignment = fieldAlignment;  	fieldSize = f.BitLength;  	if (bitOffset > 0 && bitOffset + fieldSize > fieldAlignment)  		bitOffset = 0;  	if (bitOffset == 0 || fieldSize == 0) {  		result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  		bitOffset = 0;  	}  	bitOffset += fieldSize;  }  else {  	if (bitFieldAlignment > fieldAlignment)  		fieldAlignment = bitFieldAlignment;  	bitFieldAlignment = 0;  	bitOffset = 0;  	result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  	fieldSize = TypeHelper.SizeOfType (f.Type.ResolvedType) * 8;  }  
Magic Number,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,ComputeFieldOffset,The following statement contains a magic number: fieldSize = TypeHelper.SizeOfType (f.Type.ResolvedType) * 8;  
Magic Number,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,GetFieldBitOffset,The following statement contains a magic number: foreach (ITypeDefinitionMember member in members) {  	IFieldDefinition /*?*/f = member as IFieldDefinition;  	if (f == null || f.IsStatic)  		continue;  	ushort fieldAlignment = (ushort)(TypeHelper.TypeAlignment (f.Type.ResolvedType) * 8);  	if (f == field) {  		if (f.IsBitField) {  			if (bitOffset > 0 && bitOffset + f.BitLength > bitFieldAlignment)  				bitOffset = 0;  			return bitOffset;  		}  		return 0;  	}  	uint fieldSize;  	if (f.IsBitField) {  		bitFieldAlignment = fieldAlignment;  		fieldSize = f.BitLength;  		if (bitOffset > 0 && bitOffset + fieldSize > fieldAlignment)  			bitOffset = 0;  		if (bitOffset == 0 || fieldSize == 0) {  			result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  			bitOffset = 0;  		}  		bitOffset += fieldSize;  	}  	else {  		if (bitFieldAlignment > fieldAlignment)  			fieldAlignment = bitFieldAlignment;  		bitFieldAlignment = 0;  		bitOffset = 0;  		result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  		fieldSize = TypeHelper.SizeOfType (f.Type.ResolvedType) * 8;  	}  	result += fieldSize;  }  
Magic Number,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,GetFieldBitOffset,The following statement contains a magic number: foreach (ITypeDefinitionMember member in members) {  	IFieldDefinition /*?*/f = member as IFieldDefinition;  	if (f == null || f.IsStatic)  		continue;  	ushort fieldAlignment = (ushort)(TypeHelper.TypeAlignment (f.Type.ResolvedType) * 8);  	if (f == field) {  		if (f.IsBitField) {  			if (bitOffset > 0 && bitOffset + f.BitLength > bitFieldAlignment)  				bitOffset = 0;  			return bitOffset;  		}  		return 0;  	}  	uint fieldSize;  	if (f.IsBitField) {  		bitFieldAlignment = fieldAlignment;  		fieldSize = f.BitLength;  		if (bitOffset > 0 && bitOffset + fieldSize > fieldAlignment)  			bitOffset = 0;  		if (bitOffset == 0 || fieldSize == 0) {  			result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  			bitOffset = 0;  		}  		bitOffset += fieldSize;  	}  	else {  		if (bitFieldAlignment > fieldAlignment)  			fieldAlignment = bitFieldAlignment;  		bitFieldAlignment = 0;  		bitOffset = 0;  		result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  		fieldSize = TypeHelper.SizeOfType (f.Type.ResolvedType) * 8;  	}  	result += fieldSize;  }  
Magic Number,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,GetFieldBitOffset,The following statement contains a magic number: if (f.IsBitField) {  	bitFieldAlignment = fieldAlignment;  	fieldSize = f.BitLength;  	if (bitOffset > 0 && bitOffset + fieldSize > fieldAlignment)  		bitOffset = 0;  	if (bitOffset == 0 || fieldSize == 0) {  		result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  		bitOffset = 0;  	}  	bitOffset += fieldSize;  }  else {  	if (bitFieldAlignment > fieldAlignment)  		fieldAlignment = bitFieldAlignment;  	bitFieldAlignment = 0;  	bitOffset = 0;  	result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  	fieldSize = TypeHelper.SizeOfType (f.Type.ResolvedType) * 8;  }  
Magic Number,Microsoft.Cci,MemberHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,GetFieldBitOffset,The following statement contains a magic number: fieldSize = TypeHelper.SizeOfType (f.Type.ResolvedType) * 8;  
Magic Number,Microsoft.Cci,SignatureFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,AppendMethodName,The following statement contains a magic number: if (method.ResolvedMethod.IsSpecialName && (formattingOptions & NameFormattingOptions.PreserveSpecialNames) == 0) {  	if (methodName.StartsWith ("get_"' StringComparison.Ordinal)) {  		//^ assume methodName.Length >= 4;  		sb.Append (methodName.Substring (4));  		sb.Append (".get");  	}  	else if (methodName.StartsWith ("set_"' StringComparison.Ordinal)) {  		//^ assume methodName.Length >= 4;  		sb.Append (methodName.Substring (4));  		sb.Append (".set");  	}  	else {  		sb.Append (methodName);  	}  }  else  	sb.Append (methodName);  
Magic Number,Microsoft.Cci,SignatureFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,AppendMethodName,The following statement contains a magic number: if (method.ResolvedMethod.IsSpecialName && (formattingOptions & NameFormattingOptions.PreserveSpecialNames) == 0) {  	if (methodName.StartsWith ("get_"' StringComparison.Ordinal)) {  		//^ assume methodName.Length >= 4;  		sb.Append (methodName.Substring (4));  		sb.Append (".get");  	}  	else if (methodName.StartsWith ("set_"' StringComparison.Ordinal)) {  		//^ assume methodName.Length >= 4;  		sb.Append (methodName.Substring (4));  		sb.Append (".set");  	}  	else {  		sb.Append (methodName);  	}  }  else  	sb.Append (methodName);  
Magic Number,Microsoft.Cci,SignatureFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,AppendMethodName,The following statement contains a magic number: if (methodName.StartsWith ("get_"' StringComparison.Ordinal)) {  	//^ assume methodName.Length >= 4;  	sb.Append (methodName.Substring (4));  	sb.Append (".get");  }  else if (methodName.StartsWith ("set_"' StringComparison.Ordinal)) {  	//^ assume methodName.Length >= 4;  	sb.Append (methodName.Substring (4));  	sb.Append (".set");  }  else {  	sb.Append (methodName);  }  
Magic Number,Microsoft.Cci,SignatureFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,AppendMethodName,The following statement contains a magic number: if (methodName.StartsWith ("get_"' StringComparison.Ordinal)) {  	//^ assume methodName.Length >= 4;  	sb.Append (methodName.Substring (4));  	sb.Append (".get");  }  else if (methodName.StartsWith ("set_"' StringComparison.Ordinal)) {  	//^ assume methodName.Length >= 4;  	sb.Append (methodName.Substring (4));  	sb.Append (".set");  }  else {  	sb.Append (methodName);  }  
Magic Number,Microsoft.Cci,SignatureFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,AppendMethodName,The following statement contains a magic number: sb.Append (methodName.Substring (4));  
Magic Number,Microsoft.Cci,SignatureFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,AppendMethodName,The following statement contains a magic number: if (methodName.StartsWith ("set_"' StringComparison.Ordinal)) {  	//^ assume methodName.Length >= 4;  	sb.Append (methodName.Substring (4));  	sb.Append (".set");  }  else {  	sb.Append (methodName);  }  
Magic Number,Microsoft.Cci,SignatureFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\MemberHelper.cs,AppendMethodName,The following statement contains a magic number: sb.Append (methodName.Substring (4));  
Magic Number,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,SizeOfType,The following statement contains a magic number: switch (type.TypeCode) {  case PrimitiveTypeCode.Boolean:  	return sizeof(Boolean);  case PrimitiveTypeCode.Char:  	return sizeof(Char);  case PrimitiveTypeCode.Int16:  	return sizeof(Int16);  case PrimitiveTypeCode.Int32:  	return sizeof(Int32);  case PrimitiveTypeCode.Int8:  	return sizeof(SByte);  case PrimitiveTypeCode.UInt16:  	return sizeof(UInt16);  case PrimitiveTypeCode.UInt32:  	return sizeof(UInt32);  case PrimitiveTypeCode.UInt8:  	return sizeof(Byte);  case PrimitiveTypeCode.Int64:  	return sizeof(Int64);  case PrimitiveTypeCode.UInt64:  	return sizeof(UInt64);  case PrimitiveTypeCode.IntPtr:  	return type.PlatformType.PointerSize;  case PrimitiveTypeCode.UIntPtr:  	return type.PlatformType.PointerSize;  case PrimitiveTypeCode.Float32:  	return sizeof(Single);  case PrimitiveTypeCode.Float64:  	return sizeof(Double);  case PrimitiveTypeCode.Pointer:  	return type.PlatformType.PointerSize;  case PrimitiveTypeCode.Invalid:  	return 1;  default:  	if (type.IsEnum && type.ResolvedType.IsEnum) {  		if (TypeHelper.TypesAreEquivalent (rootType' type.ResolvedType.UnderlyingType' true))  			return 0;  		return TypeHelper.SizeOfType (type.ResolvedType.UnderlyingType);  	}  	if (type is IGenericParameter)  		return 1;  	// don't know the exact size' but it must be greater than zero  	uint result = mayUseSizeOfProperty ? type.ResolvedType.SizeOf : 0;  	if (result > 0)  		return result;  	IEnumerable<ITypeDefinitionMember> members = type.ResolvedType.Members;  	if (type.ResolvedType.Layout == LayoutKind.Sequential) {  		List<IFieldDefinition> fields = new List<IFieldDefinition> (IteratorHelper.GetFilterEnumerable<ITypeDefinitionMember' IFieldDefinition> (members));  		fields.Sort (delegate (IFieldDefinition f1' IFieldDefinition f2) {  			return f1.SequenceNumber - f2.SequenceNumber;  		});  		members = IteratorHelper.GetConversionEnumerable<IFieldDefinition' ITypeDefinitionMember> (fields);  		Contract.Assume (members != null);  	}  	//Sum up the bit sizes  	result = 0;  	uint bitOffset = 0;  	ushort bitFieldAlignment = 0;  	Contract.Assume (members != null);  	foreach (ITypeDefinitionMember member in members) {  		IFieldDefinition /*?*/field = member as IFieldDefinition;  		if (field == null || field.IsStatic)  			continue;  		ITypeDefinition fieldType = field.Type.ResolvedType;  		ushort fieldAlignment;  		if (rootType == fieldType || fieldType.IsReferenceType)  			fieldAlignment = type.PlatformType.PointerSize;  		else  			fieldAlignment = (ushort)(TypeHelper.TypeAlignment (fieldType) * 8);  		uint fieldSize;  		if (field.IsBitField) {  			bitFieldAlignment = fieldAlignment;  			fieldSize = field.BitLength;  			if (bitOffset > 0 && bitOffset + fieldSize > fieldAlignment)  				bitOffset = 0;  			if (bitOffset == 0 || fieldSize == 0) {  				result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  				bitOffset = 0;  			}  			bitOffset += fieldSize;  		}  		else {  			if (bitFieldAlignment > fieldAlignment)  				fieldAlignment = bitFieldAlignment;  			bitFieldAlignment = 0;  			bitOffset = 0;  			result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  			if (rootType == fieldType || fieldType.IsReferenceType)  				fieldSize = type.PlatformType.PointerSize * 8u;  			else  				fieldSize = TypeHelper.SizeOfType (fieldType' rootType' mayUseSizeOfProperty: true) * 8;  		}  		result += fieldSize;  	}  	//Convert bit size to bytes and pad to be a multiple of the type alignment.  	result = (result + 7) / 8;  	uint typeAlignment = TypeHelper.TypeAlignment (type);  	return ((result + typeAlignment - 1) / typeAlignment) * typeAlignment;  }  
Magic Number,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,SizeOfType,The following statement contains a magic number: switch (type.TypeCode) {  case PrimitiveTypeCode.Boolean:  	return sizeof(Boolean);  case PrimitiveTypeCode.Char:  	return sizeof(Char);  case PrimitiveTypeCode.Int16:  	return sizeof(Int16);  case PrimitiveTypeCode.Int32:  	return sizeof(Int32);  case PrimitiveTypeCode.Int8:  	return sizeof(SByte);  case PrimitiveTypeCode.UInt16:  	return sizeof(UInt16);  case PrimitiveTypeCode.UInt32:  	return sizeof(UInt32);  case PrimitiveTypeCode.UInt8:  	return sizeof(Byte);  case PrimitiveTypeCode.Int64:  	return sizeof(Int64);  case PrimitiveTypeCode.UInt64:  	return sizeof(UInt64);  case PrimitiveTypeCode.IntPtr:  	return type.PlatformType.PointerSize;  case PrimitiveTypeCode.UIntPtr:  	return type.PlatformType.PointerSize;  case PrimitiveTypeCode.Float32:  	return sizeof(Single);  case PrimitiveTypeCode.Float64:  	return sizeof(Double);  case PrimitiveTypeCode.Pointer:  	return type.PlatformType.PointerSize;  case PrimitiveTypeCode.Invalid:  	return 1;  default:  	if (type.IsEnum && type.ResolvedType.IsEnum) {  		if (TypeHelper.TypesAreEquivalent (rootType' type.ResolvedType.UnderlyingType' true))  			return 0;  		return TypeHelper.SizeOfType (type.ResolvedType.UnderlyingType);  	}  	if (type is IGenericParameter)  		return 1;  	// don't know the exact size' but it must be greater than zero  	uint result = mayUseSizeOfProperty ? type.ResolvedType.SizeOf : 0;  	if (result > 0)  		return result;  	IEnumerable<ITypeDefinitionMember> members = type.ResolvedType.Members;  	if (type.ResolvedType.Layout == LayoutKind.Sequential) {  		List<IFieldDefinition> fields = new List<IFieldDefinition> (IteratorHelper.GetFilterEnumerable<ITypeDefinitionMember' IFieldDefinition> (members));  		fields.Sort (delegate (IFieldDefinition f1' IFieldDefinition f2) {  			return f1.SequenceNumber - f2.SequenceNumber;  		});  		members = IteratorHelper.GetConversionEnumerable<IFieldDefinition' ITypeDefinitionMember> (fields);  		Contract.Assume (members != null);  	}  	//Sum up the bit sizes  	result = 0;  	uint bitOffset = 0;  	ushort bitFieldAlignment = 0;  	Contract.Assume (members != null);  	foreach (ITypeDefinitionMember member in members) {  		IFieldDefinition /*?*/field = member as IFieldDefinition;  		if (field == null || field.IsStatic)  			continue;  		ITypeDefinition fieldType = field.Type.ResolvedType;  		ushort fieldAlignment;  		if (rootType == fieldType || fieldType.IsReferenceType)  			fieldAlignment = type.PlatformType.PointerSize;  		else  			fieldAlignment = (ushort)(TypeHelper.TypeAlignment (fieldType) * 8);  		uint fieldSize;  		if (field.IsBitField) {  			bitFieldAlignment = fieldAlignment;  			fieldSize = field.BitLength;  			if (bitOffset > 0 && bitOffset + fieldSize > fieldAlignment)  				bitOffset = 0;  			if (bitOffset == 0 || fieldSize == 0) {  				result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  				bitOffset = 0;  			}  			bitOffset += fieldSize;  		}  		else {  			if (bitFieldAlignment > fieldAlignment)  				fieldAlignment = bitFieldAlignment;  			bitFieldAlignment = 0;  			bitOffset = 0;  			result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  			if (rootType == fieldType || fieldType.IsReferenceType)  				fieldSize = type.PlatformType.PointerSize * 8u;  			else  				fieldSize = TypeHelper.SizeOfType (fieldType' rootType' mayUseSizeOfProperty: true) * 8;  		}  		result += fieldSize;  	}  	//Convert bit size to bytes and pad to be a multiple of the type alignment.  	result = (result + 7) / 8;  	uint typeAlignment = TypeHelper.TypeAlignment (type);  	return ((result + typeAlignment - 1) / typeAlignment) * typeAlignment;  }  
Magic Number,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,SizeOfType,The following statement contains a magic number: switch (type.TypeCode) {  case PrimitiveTypeCode.Boolean:  	return sizeof(Boolean);  case PrimitiveTypeCode.Char:  	return sizeof(Char);  case PrimitiveTypeCode.Int16:  	return sizeof(Int16);  case PrimitiveTypeCode.Int32:  	return sizeof(Int32);  case PrimitiveTypeCode.Int8:  	return sizeof(SByte);  case PrimitiveTypeCode.UInt16:  	return sizeof(UInt16);  case PrimitiveTypeCode.UInt32:  	return sizeof(UInt32);  case PrimitiveTypeCode.UInt8:  	return sizeof(Byte);  case PrimitiveTypeCode.Int64:  	return sizeof(Int64);  case PrimitiveTypeCode.UInt64:  	return sizeof(UInt64);  case PrimitiveTypeCode.IntPtr:  	return type.PlatformType.PointerSize;  case PrimitiveTypeCode.UIntPtr:  	return type.PlatformType.PointerSize;  case PrimitiveTypeCode.Float32:  	return sizeof(Single);  case PrimitiveTypeCode.Float64:  	return sizeof(Double);  case PrimitiveTypeCode.Pointer:  	return type.PlatformType.PointerSize;  case PrimitiveTypeCode.Invalid:  	return 1;  default:  	if (type.IsEnum && type.ResolvedType.IsEnum) {  		if (TypeHelper.TypesAreEquivalent (rootType' type.ResolvedType.UnderlyingType' true))  			return 0;  		return TypeHelper.SizeOfType (type.ResolvedType.UnderlyingType);  	}  	if (type is IGenericParameter)  		return 1;  	// don't know the exact size' but it must be greater than zero  	uint result = mayUseSizeOfProperty ? type.ResolvedType.SizeOf : 0;  	if (result > 0)  		return result;  	IEnumerable<ITypeDefinitionMember> members = type.ResolvedType.Members;  	if (type.ResolvedType.Layout == LayoutKind.Sequential) {  		List<IFieldDefinition> fields = new List<IFieldDefinition> (IteratorHelper.GetFilterEnumerable<ITypeDefinitionMember' IFieldDefinition> (members));  		fields.Sort (delegate (IFieldDefinition f1' IFieldDefinition f2) {  			return f1.SequenceNumber - f2.SequenceNumber;  		});  		members = IteratorHelper.GetConversionEnumerable<IFieldDefinition' ITypeDefinitionMember> (fields);  		Contract.Assume (members != null);  	}  	//Sum up the bit sizes  	result = 0;  	uint bitOffset = 0;  	ushort bitFieldAlignment = 0;  	Contract.Assume (members != null);  	foreach (ITypeDefinitionMember member in members) {  		IFieldDefinition /*?*/field = member as IFieldDefinition;  		if (field == null || field.IsStatic)  			continue;  		ITypeDefinition fieldType = field.Type.ResolvedType;  		ushort fieldAlignment;  		if (rootType == fieldType || fieldType.IsReferenceType)  			fieldAlignment = type.PlatformType.PointerSize;  		else  			fieldAlignment = (ushort)(TypeHelper.TypeAlignment (fieldType) * 8);  		uint fieldSize;  		if (field.IsBitField) {  			bitFieldAlignment = fieldAlignment;  			fieldSize = field.BitLength;  			if (bitOffset > 0 && bitOffset + fieldSize > fieldAlignment)  				bitOffset = 0;  			if (bitOffset == 0 || fieldSize == 0) {  				result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  				bitOffset = 0;  			}  			bitOffset += fieldSize;  		}  		else {  			if (bitFieldAlignment > fieldAlignment)  				fieldAlignment = bitFieldAlignment;  			bitFieldAlignment = 0;  			bitOffset = 0;  			result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  			if (rootType == fieldType || fieldType.IsReferenceType)  				fieldSize = type.PlatformType.PointerSize * 8u;  			else  				fieldSize = TypeHelper.SizeOfType (fieldType' rootType' mayUseSizeOfProperty: true) * 8;  		}  		result += fieldSize;  	}  	//Convert bit size to bytes and pad to be a multiple of the type alignment.  	result = (result + 7) / 8;  	uint typeAlignment = TypeHelper.TypeAlignment (type);  	return ((result + typeAlignment - 1) / typeAlignment) * typeAlignment;  }  
Magic Number,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,SizeOfType,The following statement contains a magic number: switch (type.TypeCode) {  case PrimitiveTypeCode.Boolean:  	return sizeof(Boolean);  case PrimitiveTypeCode.Char:  	return sizeof(Char);  case PrimitiveTypeCode.Int16:  	return sizeof(Int16);  case PrimitiveTypeCode.Int32:  	return sizeof(Int32);  case PrimitiveTypeCode.Int8:  	return sizeof(SByte);  case PrimitiveTypeCode.UInt16:  	return sizeof(UInt16);  case PrimitiveTypeCode.UInt32:  	return sizeof(UInt32);  case PrimitiveTypeCode.UInt8:  	return sizeof(Byte);  case PrimitiveTypeCode.Int64:  	return sizeof(Int64);  case PrimitiveTypeCode.UInt64:  	return sizeof(UInt64);  case PrimitiveTypeCode.IntPtr:  	return type.PlatformType.PointerSize;  case PrimitiveTypeCode.UIntPtr:  	return type.PlatformType.PointerSize;  case PrimitiveTypeCode.Float32:  	return sizeof(Single);  case PrimitiveTypeCode.Float64:  	return sizeof(Double);  case PrimitiveTypeCode.Pointer:  	return type.PlatformType.PointerSize;  case PrimitiveTypeCode.Invalid:  	return 1;  default:  	if (type.IsEnum && type.ResolvedType.IsEnum) {  		if (TypeHelper.TypesAreEquivalent (rootType' type.ResolvedType.UnderlyingType' true))  			return 0;  		return TypeHelper.SizeOfType (type.ResolvedType.UnderlyingType);  	}  	if (type is IGenericParameter)  		return 1;  	// don't know the exact size' but it must be greater than zero  	uint result = mayUseSizeOfProperty ? type.ResolvedType.SizeOf : 0;  	if (result > 0)  		return result;  	IEnumerable<ITypeDefinitionMember> members = type.ResolvedType.Members;  	if (type.ResolvedType.Layout == LayoutKind.Sequential) {  		List<IFieldDefinition> fields = new List<IFieldDefinition> (IteratorHelper.GetFilterEnumerable<ITypeDefinitionMember' IFieldDefinition> (members));  		fields.Sort (delegate (IFieldDefinition f1' IFieldDefinition f2) {  			return f1.SequenceNumber - f2.SequenceNumber;  		});  		members = IteratorHelper.GetConversionEnumerable<IFieldDefinition' ITypeDefinitionMember> (fields);  		Contract.Assume (members != null);  	}  	//Sum up the bit sizes  	result = 0;  	uint bitOffset = 0;  	ushort bitFieldAlignment = 0;  	Contract.Assume (members != null);  	foreach (ITypeDefinitionMember member in members) {  		IFieldDefinition /*?*/field = member as IFieldDefinition;  		if (field == null || field.IsStatic)  			continue;  		ITypeDefinition fieldType = field.Type.ResolvedType;  		ushort fieldAlignment;  		if (rootType == fieldType || fieldType.IsReferenceType)  			fieldAlignment = type.PlatformType.PointerSize;  		else  			fieldAlignment = (ushort)(TypeHelper.TypeAlignment (fieldType) * 8);  		uint fieldSize;  		if (field.IsBitField) {  			bitFieldAlignment = fieldAlignment;  			fieldSize = field.BitLength;  			if (bitOffset > 0 && bitOffset + fieldSize > fieldAlignment)  				bitOffset = 0;  			if (bitOffset == 0 || fieldSize == 0) {  				result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  				bitOffset = 0;  			}  			bitOffset += fieldSize;  		}  		else {  			if (bitFieldAlignment > fieldAlignment)  				fieldAlignment = bitFieldAlignment;  			bitFieldAlignment = 0;  			bitOffset = 0;  			result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  			if (rootType == fieldType || fieldType.IsReferenceType)  				fieldSize = type.PlatformType.PointerSize * 8u;  			else  				fieldSize = TypeHelper.SizeOfType (fieldType' rootType' mayUseSizeOfProperty: true) * 8;  		}  		result += fieldSize;  	}  	//Convert bit size to bytes and pad to be a multiple of the type alignment.  	result = (result + 7) / 8;  	uint typeAlignment = TypeHelper.TypeAlignment (type);  	return ((result + typeAlignment - 1) / typeAlignment) * typeAlignment;  }  
Magic Number,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,SizeOfType,The following statement contains a magic number: foreach (ITypeDefinitionMember member in members) {  	IFieldDefinition /*?*/field = member as IFieldDefinition;  	if (field == null || field.IsStatic)  		continue;  	ITypeDefinition fieldType = field.Type.ResolvedType;  	ushort fieldAlignment;  	if (rootType == fieldType || fieldType.IsReferenceType)  		fieldAlignment = type.PlatformType.PointerSize;  	else  		fieldAlignment = (ushort)(TypeHelper.TypeAlignment (fieldType) * 8);  	uint fieldSize;  	if (field.IsBitField) {  		bitFieldAlignment = fieldAlignment;  		fieldSize = field.BitLength;  		if (bitOffset > 0 && bitOffset + fieldSize > fieldAlignment)  			bitOffset = 0;  		if (bitOffset == 0 || fieldSize == 0) {  			result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  			bitOffset = 0;  		}  		bitOffset += fieldSize;  	}  	else {  		if (bitFieldAlignment > fieldAlignment)  			fieldAlignment = bitFieldAlignment;  		bitFieldAlignment = 0;  		bitOffset = 0;  		result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  		if (rootType == fieldType || fieldType.IsReferenceType)  			fieldSize = type.PlatformType.PointerSize * 8u;  		else  			fieldSize = TypeHelper.SizeOfType (fieldType' rootType' mayUseSizeOfProperty: true) * 8;  	}  	result += fieldSize;  }  
Magic Number,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,SizeOfType,The following statement contains a magic number: foreach (ITypeDefinitionMember member in members) {  	IFieldDefinition /*?*/field = member as IFieldDefinition;  	if (field == null || field.IsStatic)  		continue;  	ITypeDefinition fieldType = field.Type.ResolvedType;  	ushort fieldAlignment;  	if (rootType == fieldType || fieldType.IsReferenceType)  		fieldAlignment = type.PlatformType.PointerSize;  	else  		fieldAlignment = (ushort)(TypeHelper.TypeAlignment (fieldType) * 8);  	uint fieldSize;  	if (field.IsBitField) {  		bitFieldAlignment = fieldAlignment;  		fieldSize = field.BitLength;  		if (bitOffset > 0 && bitOffset + fieldSize > fieldAlignment)  			bitOffset = 0;  		if (bitOffset == 0 || fieldSize == 0) {  			result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  			bitOffset = 0;  		}  		bitOffset += fieldSize;  	}  	else {  		if (bitFieldAlignment > fieldAlignment)  			fieldAlignment = bitFieldAlignment;  		bitFieldAlignment = 0;  		bitOffset = 0;  		result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  		if (rootType == fieldType || fieldType.IsReferenceType)  			fieldSize = type.PlatformType.PointerSize * 8u;  		else  			fieldSize = TypeHelper.SizeOfType (fieldType' rootType' mayUseSizeOfProperty: true) * 8;  	}  	result += fieldSize;  }  
Magic Number,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,SizeOfType,The following statement contains a magic number: if (rootType == fieldType || fieldType.IsReferenceType)  	fieldAlignment = type.PlatformType.PointerSize;  else  	fieldAlignment = (ushort)(TypeHelper.TypeAlignment (fieldType) * 8);  
Magic Number,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,SizeOfType,The following statement contains a magic number: fieldAlignment = (ushort)(TypeHelper.TypeAlignment (fieldType) * 8);  
Magic Number,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,SizeOfType,The following statement contains a magic number: if (field.IsBitField) {  	bitFieldAlignment = fieldAlignment;  	fieldSize = field.BitLength;  	if (bitOffset > 0 && bitOffset + fieldSize > fieldAlignment)  		bitOffset = 0;  	if (bitOffset == 0 || fieldSize == 0) {  		result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  		bitOffset = 0;  	}  	bitOffset += fieldSize;  }  else {  	if (bitFieldAlignment > fieldAlignment)  		fieldAlignment = bitFieldAlignment;  	bitFieldAlignment = 0;  	bitOffset = 0;  	result = ((result + fieldAlignment - 1) / fieldAlignment) * fieldAlignment;  	if (rootType == fieldType || fieldType.IsReferenceType)  		fieldSize = type.PlatformType.PointerSize * 8u;  	else  		fieldSize = TypeHelper.SizeOfType (fieldType' rootType' mayUseSizeOfProperty: true) * 8;  }  
Magic Number,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,SizeOfType,The following statement contains a magic number: if (rootType == fieldType || fieldType.IsReferenceType)  	fieldSize = type.PlatformType.PointerSize * 8u;  else  	fieldSize = TypeHelper.SizeOfType (fieldType' rootType' mayUseSizeOfProperty: true) * 8;  
Magic Number,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,SizeOfType,The following statement contains a magic number: fieldSize = TypeHelper.SizeOfType (fieldType' rootType' mayUseSizeOfProperty: true) * 8;  
Magic Number,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,SizeOfType,The following statement contains a magic number: result = (result + 7) / 8;  
Magic Number,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,SizeOfType,The following statement contains a magic number: result = (result + 7) / 8;  
Magic Number,Microsoft.Cci,TypeNameFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,GetNamespaceTypeName,The following statement contains a magic number: if ((formattingOptions & NameFormattingOptions.SupressAttributeSuffix) != 0 && AttributeHelper.IsAttributeType (nsType.ResolvedType) & tname.EndsWith ("Attribute"' StringComparison.Ordinal))  	tname = tname.Substring (0' tname.Length - 9);  
Magic Number,Microsoft.Cci,TypeNameFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,GetNamespaceTypeName,The following statement contains a magic number: tname = tname.Substring (0' tname.Length - 9);  
Magic Number,Microsoft.Cci,TypeNameFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,GetNestedTypeName,The following statement contains a magic number: if ((formattingOptions & NameFormattingOptions.SupressAttributeSuffix) != 0 && AttributeHelper.IsAttributeType (nestedType.ResolvedType) & tname.EndsWith ("Attribute"' StringComparison.Ordinal))  	tname = tname.Substring (0' tname.Length - 9);  
Magic Number,Microsoft.Cci,TypeNameFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,GetNestedTypeName,The following statement contains a magic number: tname = tname.Substring (0' tname.Length - 9);  
Magic Number,Microsoft.Cci,UnitHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UnitHelper.cs,ComputePublicKeyToken,The following statement contains a magic number: Contract.Assert (startIndex + 8 <= hash.GetLowerBound (0) + hash.Length);  
Magic Number,Microsoft.Cci,UnitHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UnitHelper.cs,ComputePublicKeyToken,The following statement contains a magic number: Array.Copy (hash' startIndex' publicKeyToken' 0' 8);  
Magic Number,Microsoft.Cci,UnitHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UnitHelper.cs,ComputePublicKeyToken,The following statement contains a magic number: Array.Reverse (publicKeyToken' 0' 8);  
Magic Number,Microsoft.Cci.Immutable,ArrayType,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,GetInterfaceList,The following statement contains a magic number: if (version.Major >= 2) {  	interfaces.Add (this.PlatformType.SystemCollectionsIStructuralComparable);  	interfaces.Add (this.PlatformType.SystemCollectionsIStructuralEquatable);  }  
Magic Number,Microsoft.Cci.Immutable,Vector,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,GetInterfaceList,The following statement contains a magic number: if (version.Major >= 4) {  	interfaces.Add (this.PlatformType.SystemCollectionsIStructuralComparable);  	interfaces.Add (this.PlatformType.SystemCollectionsIStructuralEquatable);  }  
Magic Number,Microsoft.Cci.Immutable,Vector,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Types.cs,GetInterfaceList,The following statement contains a magic number: if (version.Major >= 2) {  	var argTypes = IteratorHelper.GetSingletonEnumerable<ITypeReference> (this.ElementType);  	interfaces.Add (new GenericTypeInstanceReference (this.PlatformType.SystemCollectionsGenericIList' argTypes' this.InternFactory));  	interfaces.Add (new GenericTypeInstanceReference (this.PlatformType.SystemCollectionsGenericICollection' argTypes' this.InternFactory));  	interfaces.Add (new GenericTypeInstanceReference (this.PlatformType.SystemCollectionsGenericIEnumerable' argTypes' this.InternFactory));  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashInt1,The following statement contains a magic number: unchecked {  	uint a = 0x9e3779b9 + key;  	uint b = 0x9e3779b9;  	uint c = 16777619;  	a -= b;  	a -= c;  	a ^= (c >> 13);  	b -= c;  	b -= a;  	b ^= (a << 8);  	c -= a;  	c -= b;  	c ^= (b >> 13);  	a -= b;  	a -= c;  	a ^= (c >> 12);  	b -= c;  	b -= a;  	b ^= (a << 16);  	c -= a;  	c -= b;  	c ^= (b >> 5);  	a -= b;  	a -= c;  	a ^= (c >> 3);  	b -= c;  	b -= a;  	b ^= (a << 10);  	c -= a;  	c -= b;  	c ^= (b >> 15);  	return c;  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashInt1,The following statement contains a magic number: unchecked {  	uint a = 0x9e3779b9 + key;  	uint b = 0x9e3779b9;  	uint c = 16777619;  	a -= b;  	a -= c;  	a ^= (c >> 13);  	b -= c;  	b -= a;  	b ^= (a << 8);  	c -= a;  	c -= b;  	c ^= (b >> 13);  	a -= b;  	a -= c;  	a ^= (c >> 12);  	b -= c;  	b -= a;  	b ^= (a << 16);  	c -= a;  	c -= b;  	c ^= (b >> 5);  	a -= b;  	a -= c;  	a ^= (c >> 3);  	b -= c;  	b -= a;  	b ^= (a << 10);  	c -= a;  	c -= b;  	c ^= (b >> 15);  	return c;  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashInt1,The following statement contains a magic number: unchecked {  	uint a = 0x9e3779b9 + key;  	uint b = 0x9e3779b9;  	uint c = 16777619;  	a -= b;  	a -= c;  	a ^= (c >> 13);  	b -= c;  	b -= a;  	b ^= (a << 8);  	c -= a;  	c -= b;  	c ^= (b >> 13);  	a -= b;  	a -= c;  	a ^= (c >> 12);  	b -= c;  	b -= a;  	b ^= (a << 16);  	c -= a;  	c -= b;  	c ^= (b >> 5);  	a -= b;  	a -= c;  	a ^= (c >> 3);  	b -= c;  	b -= a;  	b ^= (a << 10);  	c -= a;  	c -= b;  	c ^= (b >> 15);  	return c;  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashInt1,The following statement contains a magic number: unchecked {  	uint a = 0x9e3779b9 + key;  	uint b = 0x9e3779b9;  	uint c = 16777619;  	a -= b;  	a -= c;  	a ^= (c >> 13);  	b -= c;  	b -= a;  	b ^= (a << 8);  	c -= a;  	c -= b;  	c ^= (b >> 13);  	a -= b;  	a -= c;  	a ^= (c >> 12);  	b -= c;  	b -= a;  	b ^= (a << 16);  	c -= a;  	c -= b;  	c ^= (b >> 5);  	a -= b;  	a -= c;  	a ^= (c >> 3);  	b -= c;  	b -= a;  	b ^= (a << 10);  	c -= a;  	c -= b;  	c ^= (b >> 15);  	return c;  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashInt1,The following statement contains a magic number: unchecked {  	uint a = 0x9e3779b9 + key;  	uint b = 0x9e3779b9;  	uint c = 16777619;  	a -= b;  	a -= c;  	a ^= (c >> 13);  	b -= c;  	b -= a;  	b ^= (a << 8);  	c -= a;  	c -= b;  	c ^= (b >> 13);  	a -= b;  	a -= c;  	a ^= (c >> 12);  	b -= c;  	b -= a;  	b ^= (a << 16);  	c -= a;  	c -= b;  	c ^= (b >> 5);  	a -= b;  	a -= c;  	a ^= (c >> 3);  	b -= c;  	b -= a;  	b ^= (a << 10);  	c -= a;  	c -= b;  	c ^= (b >> 15);  	return c;  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashInt1,The following statement contains a magic number: unchecked {  	uint a = 0x9e3779b9 + key;  	uint b = 0x9e3779b9;  	uint c = 16777619;  	a -= b;  	a -= c;  	a ^= (c >> 13);  	b -= c;  	b -= a;  	b ^= (a << 8);  	c -= a;  	c -= b;  	c ^= (b >> 13);  	a -= b;  	a -= c;  	a ^= (c >> 12);  	b -= c;  	b -= a;  	b ^= (a << 16);  	c -= a;  	c -= b;  	c ^= (b >> 5);  	a -= b;  	a -= c;  	a ^= (c >> 3);  	b -= c;  	b -= a;  	b ^= (a << 10);  	c -= a;  	c -= b;  	c ^= (b >> 15);  	return c;  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashInt1,The following statement contains a magic number: unchecked {  	uint a = 0x9e3779b9 + key;  	uint b = 0x9e3779b9;  	uint c = 16777619;  	a -= b;  	a -= c;  	a ^= (c >> 13);  	b -= c;  	b -= a;  	b ^= (a << 8);  	c -= a;  	c -= b;  	c ^= (b >> 13);  	a -= b;  	a -= c;  	a ^= (c >> 12);  	b -= c;  	b -= a;  	b ^= (a << 16);  	c -= a;  	c -= b;  	c ^= (b >> 5);  	a -= b;  	a -= c;  	a ^= (c >> 3);  	b -= c;  	b -= a;  	b ^= (a << 10);  	c -= a;  	c -= b;  	c ^= (b >> 15);  	return c;  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashInt1,The following statement contains a magic number: unchecked {  	uint a = 0x9e3779b9 + key;  	uint b = 0x9e3779b9;  	uint c = 16777619;  	a -= b;  	a -= c;  	a ^= (c >> 13);  	b -= c;  	b -= a;  	b ^= (a << 8);  	c -= a;  	c -= b;  	c ^= (b >> 13);  	a -= b;  	a -= c;  	a ^= (c >> 12);  	b -= c;  	b -= a;  	b ^= (a << 16);  	c -= a;  	c -= b;  	c ^= (b >> 5);  	a -= b;  	a -= c;  	a ^= (c >> 3);  	b -= c;  	b -= a;  	b ^= (a << 10);  	c -= a;  	c -= b;  	c ^= (b >> 15);  	return c;  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashInt1,The following statement contains a magic number: unchecked {  	uint a = 0x9e3779b9 + key;  	uint b = 0x9e3779b9;  	uint c = 16777619;  	a -= b;  	a -= c;  	a ^= (c >> 13);  	b -= c;  	b -= a;  	b ^= (a << 8);  	c -= a;  	c -= b;  	c ^= (b >> 13);  	a -= b;  	a -= c;  	a ^= (c >> 12);  	b -= c;  	b -= a;  	b ^= (a << 16);  	c -= a;  	c -= b;  	c ^= (b >> 5);  	a -= b;  	a -= c;  	a ^= (c >> 3);  	b -= c;  	b -= a;  	b ^= (a << 10);  	c -= a;  	c -= b;  	c ^= (b >> 15);  	return c;  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashInt1,The following statement contains a magic number: unchecked {  	uint a = 0x9e3779b9 + key;  	uint b = 0x9e3779b9;  	uint c = 16777619;  	a -= b;  	a -= c;  	a ^= (c >> 13);  	b -= c;  	b -= a;  	b ^= (a << 8);  	c -= a;  	c -= b;  	c ^= (b >> 13);  	a -= b;  	a -= c;  	a ^= (c >> 12);  	b -= c;  	b -= a;  	b ^= (a << 16);  	c -= a;  	c -= b;  	c ^= (b >> 5);  	a -= b;  	a -= c;  	a ^= (c >> 3);  	b -= c;  	b -= a;  	b ^= (a << 10);  	c -= a;  	c -= b;  	c ^= (b >> 15);  	return c;  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashInt1,The following statement contains a magic number: a ^= (c >> 13);  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashInt1,The following statement contains a magic number: b ^= (a << 8);  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashInt1,The following statement contains a magic number: c ^= (b >> 13);  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashInt1,The following statement contains a magic number: a ^= (c >> 12);  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashInt1,The following statement contains a magic number: b ^= (a << 16);  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashInt1,The following statement contains a magic number: c ^= (b >> 5);  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashInt1,The following statement contains a magic number: a ^= (c >> 3);  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashInt1,The following statement contains a magic number: b ^= (a << 10);  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashInt1,The following statement contains a magic number: c ^= (b >> 15);  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashInt2,The following statement contains a magic number: unchecked {  	uint hash = 0xB1635D64 + key;  	hash += (hash << 3);  	hash ^= (hash >> 11);  	hash += (hash << 15);  	hash |= 0x00000001;  	//  To make sure that this is relatively prime with power of 2  	return hash;  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashInt2,The following statement contains a magic number: unchecked {  	uint hash = 0xB1635D64 + key;  	hash += (hash << 3);  	hash ^= (hash >> 11);  	hash += (hash << 15);  	hash |= 0x00000001;  	//  To make sure that this is relatively prime with power of 2  	return hash;  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashInt2,The following statement contains a magic number: unchecked {  	uint hash = 0xB1635D64 + key;  	hash += (hash << 3);  	hash ^= (hash >> 11);  	hash += (hash << 15);  	hash |= 0x00000001;  	//  To make sure that this is relatively prime with power of 2  	return hash;  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashInt2,The following statement contains a magic number: hash += (hash << 3);  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashInt2,The following statement contains a magic number: hash ^= (hash >> 11);  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashInt2,The following statement contains a magic number: hash += (hash << 15);  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt1,The following statement contains a magic number: unchecked {  	uint a = 0x9e3779b9 + key1;  	uint b = 0x9e3779b9 + key2;  	uint c = 16777619;  	a -= b;  	a -= c;  	a ^= (c >> 13);  	b -= c;  	b -= a;  	b ^= (a << 8);  	c -= a;  	c -= b;  	c ^= (b >> 13);  	a -= b;  	a -= c;  	a ^= (c >> 12);  	b -= c;  	b -= a;  	b ^= (a << 16);  	c -= a;  	c -= b;  	c ^= (b >> 5);  	a -= b;  	a -= c;  	a ^= (c >> 3);  	b -= c;  	b -= a;  	b ^= (a << 10);  	c -= a;  	c -= b;  	c ^= (b >> 15);  	return c;  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt1,The following statement contains a magic number: unchecked {  	uint a = 0x9e3779b9 + key1;  	uint b = 0x9e3779b9 + key2;  	uint c = 16777619;  	a -= b;  	a -= c;  	a ^= (c >> 13);  	b -= c;  	b -= a;  	b ^= (a << 8);  	c -= a;  	c -= b;  	c ^= (b >> 13);  	a -= b;  	a -= c;  	a ^= (c >> 12);  	b -= c;  	b -= a;  	b ^= (a << 16);  	c -= a;  	c -= b;  	c ^= (b >> 5);  	a -= b;  	a -= c;  	a ^= (c >> 3);  	b -= c;  	b -= a;  	b ^= (a << 10);  	c -= a;  	c -= b;  	c ^= (b >> 15);  	return c;  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt1,The following statement contains a magic number: unchecked {  	uint a = 0x9e3779b9 + key1;  	uint b = 0x9e3779b9 + key2;  	uint c = 16777619;  	a -= b;  	a -= c;  	a ^= (c >> 13);  	b -= c;  	b -= a;  	b ^= (a << 8);  	c -= a;  	c -= b;  	c ^= (b >> 13);  	a -= b;  	a -= c;  	a ^= (c >> 12);  	b -= c;  	b -= a;  	b ^= (a << 16);  	c -= a;  	c -= b;  	c ^= (b >> 5);  	a -= b;  	a -= c;  	a ^= (c >> 3);  	b -= c;  	b -= a;  	b ^= (a << 10);  	c -= a;  	c -= b;  	c ^= (b >> 15);  	return c;  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt1,The following statement contains a magic number: unchecked {  	uint a = 0x9e3779b9 + key1;  	uint b = 0x9e3779b9 + key2;  	uint c = 16777619;  	a -= b;  	a -= c;  	a ^= (c >> 13);  	b -= c;  	b -= a;  	b ^= (a << 8);  	c -= a;  	c -= b;  	c ^= (b >> 13);  	a -= b;  	a -= c;  	a ^= (c >> 12);  	b -= c;  	b -= a;  	b ^= (a << 16);  	c -= a;  	c -= b;  	c ^= (b >> 5);  	a -= b;  	a -= c;  	a ^= (c >> 3);  	b -= c;  	b -= a;  	b ^= (a << 10);  	c -= a;  	c -= b;  	c ^= (b >> 15);  	return c;  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt1,The following statement contains a magic number: unchecked {  	uint a = 0x9e3779b9 + key1;  	uint b = 0x9e3779b9 + key2;  	uint c = 16777619;  	a -= b;  	a -= c;  	a ^= (c >> 13);  	b -= c;  	b -= a;  	b ^= (a << 8);  	c -= a;  	c -= b;  	c ^= (b >> 13);  	a -= b;  	a -= c;  	a ^= (c >> 12);  	b -= c;  	b -= a;  	b ^= (a << 16);  	c -= a;  	c -= b;  	c ^= (b >> 5);  	a -= b;  	a -= c;  	a ^= (c >> 3);  	b -= c;  	b -= a;  	b ^= (a << 10);  	c -= a;  	c -= b;  	c ^= (b >> 15);  	return c;  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt1,The following statement contains a magic number: unchecked {  	uint a = 0x9e3779b9 + key1;  	uint b = 0x9e3779b9 + key2;  	uint c = 16777619;  	a -= b;  	a -= c;  	a ^= (c >> 13);  	b -= c;  	b -= a;  	b ^= (a << 8);  	c -= a;  	c -= b;  	c ^= (b >> 13);  	a -= b;  	a -= c;  	a ^= (c >> 12);  	b -= c;  	b -= a;  	b ^= (a << 16);  	c -= a;  	c -= b;  	c ^= (b >> 5);  	a -= b;  	a -= c;  	a ^= (c >> 3);  	b -= c;  	b -= a;  	b ^= (a << 10);  	c -= a;  	c -= b;  	c ^= (b >> 15);  	return c;  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt1,The following statement contains a magic number: unchecked {  	uint a = 0x9e3779b9 + key1;  	uint b = 0x9e3779b9 + key2;  	uint c = 16777619;  	a -= b;  	a -= c;  	a ^= (c >> 13);  	b -= c;  	b -= a;  	b ^= (a << 8);  	c -= a;  	c -= b;  	c ^= (b >> 13);  	a -= b;  	a -= c;  	a ^= (c >> 12);  	b -= c;  	b -= a;  	b ^= (a << 16);  	c -= a;  	c -= b;  	c ^= (b >> 5);  	a -= b;  	a -= c;  	a ^= (c >> 3);  	b -= c;  	b -= a;  	b ^= (a << 10);  	c -= a;  	c -= b;  	c ^= (b >> 15);  	return c;  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt1,The following statement contains a magic number: unchecked {  	uint a = 0x9e3779b9 + key1;  	uint b = 0x9e3779b9 + key2;  	uint c = 16777619;  	a -= b;  	a -= c;  	a ^= (c >> 13);  	b -= c;  	b -= a;  	b ^= (a << 8);  	c -= a;  	c -= b;  	c ^= (b >> 13);  	a -= b;  	a -= c;  	a ^= (c >> 12);  	b -= c;  	b -= a;  	b ^= (a << 16);  	c -= a;  	c -= b;  	c ^= (b >> 5);  	a -= b;  	a -= c;  	a ^= (c >> 3);  	b -= c;  	b -= a;  	b ^= (a << 10);  	c -= a;  	c -= b;  	c ^= (b >> 15);  	return c;  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt1,The following statement contains a magic number: unchecked {  	uint a = 0x9e3779b9 + key1;  	uint b = 0x9e3779b9 + key2;  	uint c = 16777619;  	a -= b;  	a -= c;  	a ^= (c >> 13);  	b -= c;  	b -= a;  	b ^= (a << 8);  	c -= a;  	c -= b;  	c ^= (b >> 13);  	a -= b;  	a -= c;  	a ^= (c >> 12);  	b -= c;  	b -= a;  	b ^= (a << 16);  	c -= a;  	c -= b;  	c ^= (b >> 5);  	a -= b;  	a -= c;  	a ^= (c >> 3);  	b -= c;  	b -= a;  	b ^= (a << 10);  	c -= a;  	c -= b;  	c ^= (b >> 15);  	return c;  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt1,The following statement contains a magic number: unchecked {  	uint a = 0x9e3779b9 + key1;  	uint b = 0x9e3779b9 + key2;  	uint c = 16777619;  	a -= b;  	a -= c;  	a ^= (c >> 13);  	b -= c;  	b -= a;  	b ^= (a << 8);  	c -= a;  	c -= b;  	c ^= (b >> 13);  	a -= b;  	a -= c;  	a ^= (c >> 12);  	b -= c;  	b -= a;  	b ^= (a << 16);  	c -= a;  	c -= b;  	c ^= (b >> 5);  	a -= b;  	a -= c;  	a ^= (c >> 3);  	b -= c;  	b -= a;  	b ^= (a << 10);  	c -= a;  	c -= b;  	c ^= (b >> 15);  	return c;  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt1,The following statement contains a magic number: a ^= (c >> 13);  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt1,The following statement contains a magic number: b ^= (a << 8);  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt1,The following statement contains a magic number: c ^= (b >> 13);  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt1,The following statement contains a magic number: a ^= (c >> 12);  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt1,The following statement contains a magic number: b ^= (a << 16);  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt1,The following statement contains a magic number: c ^= (b >> 5);  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt1,The following statement contains a magic number: a ^= (c >> 3);  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt1,The following statement contains a magic number: b ^= (a << 10);  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt1,The following statement contains a magic number: c ^= (b >> 15);  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt2,The following statement contains a magic number: unchecked {  	uint hash = 0xB1635D64 + key1;  	hash += (hash << 10);  	hash ^= (hash >> 6);  	hash += key2;  	hash += (hash << 3);  	hash ^= (hash >> 11);  	hash += (hash << 15);  	hash |= 0x00000001;  	//  To make sure that this is relatively prime with power of 2  	return hash;  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt2,The following statement contains a magic number: unchecked {  	uint hash = 0xB1635D64 + key1;  	hash += (hash << 10);  	hash ^= (hash >> 6);  	hash += key2;  	hash += (hash << 3);  	hash ^= (hash >> 11);  	hash += (hash << 15);  	hash |= 0x00000001;  	//  To make sure that this is relatively prime with power of 2  	return hash;  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt2,The following statement contains a magic number: unchecked {  	uint hash = 0xB1635D64 + key1;  	hash += (hash << 10);  	hash ^= (hash >> 6);  	hash += key2;  	hash += (hash << 3);  	hash ^= (hash >> 11);  	hash += (hash << 15);  	hash |= 0x00000001;  	//  To make sure that this is relatively prime with power of 2  	return hash;  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt2,The following statement contains a magic number: unchecked {  	uint hash = 0xB1635D64 + key1;  	hash += (hash << 10);  	hash ^= (hash >> 6);  	hash += key2;  	hash += (hash << 3);  	hash ^= (hash >> 11);  	hash += (hash << 15);  	hash |= 0x00000001;  	//  To make sure that this is relatively prime with power of 2  	return hash;  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt2,The following statement contains a magic number: unchecked {  	uint hash = 0xB1635D64 + key1;  	hash += (hash << 10);  	hash ^= (hash >> 6);  	hash += key2;  	hash += (hash << 3);  	hash ^= (hash >> 11);  	hash += (hash << 15);  	hash |= 0x00000001;  	//  To make sure that this is relatively prime with power of 2  	return hash;  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt2,The following statement contains a magic number: hash += (hash << 10);  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt2,The following statement contains a magic number: hash ^= (hash >> 6);  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt2,The following statement contains a magic number: hash += (hash << 3);  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt2,The following statement contains a magic number: hash ^= (hash >> 11);  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashDoubleInt2,The following statement contains a magic number: hash += (hash << 15);  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,StartHash,The following statement contains a magic number: hash += (hash << 3);  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,StartHash,The following statement contains a magic number: hash ^= (hash >> 11);  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,StartHash,The following statement contains a magic number: hash += (hash << 15);  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,ContinueHash,The following statement contains a magic number: unchecked {  	uint hash = prevHash + key;  	hash += (hash << 10);  	hash ^= (hash >> 6);  	return hash;  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,ContinueHash,The following statement contains a magic number: unchecked {  	uint hash = prevHash + key;  	hash += (hash << 10);  	hash ^= (hash >> 6);  	return hash;  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,ContinueHash,The following statement contains a magic number: hash += (hash << 10);  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,ContinueHash,The following statement contains a magic number: hash ^= (hash >> 6);  
Magic Number,Microsoft.Cci.UtilityDataStructures,MultiHashtable,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,MultiHashtable,The following statement contains a magic number: this.resizeCount = this.size * 6 / 10;  
Magic Number,Microsoft.Cci.UtilityDataStructures,MultiHashtable,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,MultiHashtable,The following statement contains a magic number: this.resizeCount = this.size * 6 / 10;  
Magic Number,Microsoft.Cci.UtilityDataStructures,MultiHashtable,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,Expand,The following statement contains a magic number: this.keyValueTable = new KeyValuePair[this.size * 2];  
Magic Number,Microsoft.Cci.UtilityDataStructures,MultiHashtable,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,Expand,The following statement contains a magic number: this.resizeCount = this.size * 6 / 10;  
Magic Number,Microsoft.Cci.UtilityDataStructures,MultiHashtable,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,Expand,The following statement contains a magic number: this.resizeCount = this.size * 6 / 10;  
Magic Number,Microsoft.Cci.UtilityDataStructures,Hashtable,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,Hashtable,The following statement contains a magic number: this.resizeCount = this.size * 6 / 10;  
Magic Number,Microsoft.Cci.UtilityDataStructures,Hashtable,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,Hashtable,The following statement contains a magic number: this.resizeCount = this.size * 6 / 10;  
Magic Number,Microsoft.Cci.UtilityDataStructures,Hashtable,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,Expand,The following statement contains a magic number: this.keyValueTable = new KeyValuePair[this.size * 2];  
Magic Number,Microsoft.Cci.UtilityDataStructures,Hashtable,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,Expand,The following statement contains a magic number: this.resizeCount = this.size * 6 / 10;  
Magic Number,Microsoft.Cci.UtilityDataStructures,Hashtable,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,Expand,The following statement contains a magic number: this.resizeCount = this.size * 6 / 10;  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashtableForUintValues,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashtableForUintValues,The following statement contains a magic number: this.resizeCount = this.size * 6 / 10;  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashtableForUintValues,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashtableForUintValues,The following statement contains a magic number: this.resizeCount = this.size * 6 / 10;  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashtableForUintValues,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,Expand,The following statement contains a magic number: this.keyValueTable = new KeyValuePair[this.size * 2];  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashtableForUintValues,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,Expand,The following statement contains a magic number: this.resizeCount = this.size * 6 / 10;  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashtableForUintValues,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,Expand,The following statement contains a magic number: this.resizeCount = this.size * 6 / 10;  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashtableUlong,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashtableUlong,The following statement contains a magic number: this.resizeCount = this.size * 6 / 10;  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashtableUlong,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,HashtableUlong,The following statement contains a magic number: this.resizeCount = this.size * 6 / 10;  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashtableUlong,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,Expand,The following statement contains a magic number: this.keyValueTable = new KeyValuePair[this.size * 2];  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashtableUlong,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,Expand,The following statement contains a magic number: this.resizeCount = this.size * 6 / 10;  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashtableUlong,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,Expand,The following statement contains a magic number: this.resizeCount = this.size * 6 / 10;  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashtableUlong,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,AddInternal,The following statement contains a magic number: unchecked {  	uint mask = this.size - 1;  	var keyValueTable = this.keyValueTable;  	uint key1 = (uint)(key >> 32);  	uint key2 = (uint)key;  	uint hash1 = HashHelper.HashDoubleInt1 (key1' key2);  	uint hash2 = HashHelper.HashDoubleInt2 (key1' key2);  	uint tableIndex = hash1 & mask;  	while (keyValueTable [tableIndex].Value != null) {  		if (keyValueTable [tableIndex].Key == key) {  			keyValueTable [tableIndex].Value = value;  			return;  		}  		tableIndex = (tableIndex + hash2) & mask;  	}  	keyValueTable [tableIndex].Key = key;  	keyValueTable [tableIndex].Value = value;  	this.count++;  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,HashtableUlong,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,Find,The following statement contains a magic number: unchecked {  	uint mask = this.size - 1;  	var keyValueTable = this.keyValueTable;  	uint key1 = (uint)(key >> 32);  	uint key2 = (uint)key;  	uint hash1 = HashHelper.HashDoubleInt1 (key1' key2);  	uint tableIndex = hash1 & mask;  	if (keyValueTable [tableIndex].Key == key)  		return keyValueTable [tableIndex].Value;  	uint hash2 = HashHelper.HashDoubleInt2 (key1' key2);  	tableIndex = (tableIndex + hash2) & mask;  	InternalT result = null;  	while ((result = keyValueTable [tableIndex].Value) != null) {  		if (keyValueTable [tableIndex].Key == key)  			return result;  		tableIndex = (tableIndex + hash2) & mask;  	}  	return null;  }  
Magic Number,Microsoft.Cci.UtilityDataStructures,DoubleHashtable,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,DoubleHashtable,The following statement contains a magic number: this.resizeCount = this.size * 6 / 10;  
Magic Number,Microsoft.Cci.UtilityDataStructures,DoubleHashtable,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,DoubleHashtable,The following statement contains a magic number: this.resizeCount = this.size * 6 / 10;  
Magic Number,Microsoft.Cci.UtilityDataStructures,DoubleHashtable,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,Expand,The following statement contains a magic number: this.keysValueTable = new Key1Key2ValueTriple[this.size * 2];  
Magic Number,Microsoft.Cci.UtilityDataStructures,DoubleHashtable,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,Expand,The following statement contains a magic number: this.resizeCount = this.size * 6 / 10;  
Magic Number,Microsoft.Cci.UtilityDataStructures,DoubleHashtable,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,Expand,The following statement contains a magic number: this.resizeCount = this.size * 6 / 10;  
Magic Number,Microsoft.Cci.UtilityDataStructures,SetOfObjects,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,SetOfObjects,The following statement contains a magic number: this.resizeCount = this.size * 6 / 10;  
Magic Number,Microsoft.Cci.UtilityDataStructures,SetOfObjects,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,SetOfObjects,The following statement contains a magic number: this.resizeCount = this.size * 6 / 10;  
Magic Number,Microsoft.Cci.UtilityDataStructures,SetOfObjects,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,Expand,The following statement contains a magic number: this.elements = new object[this.size * 2];  
Magic Number,Microsoft.Cci.UtilityDataStructures,SetOfObjects,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,Expand,The following statement contains a magic number: this.resizeCount = this.size * 6 / 10;  
Magic Number,Microsoft.Cci.UtilityDataStructures,SetOfObjects,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,Expand,The following statement contains a magic number: this.resizeCount = this.size * 6 / 10;  
Magic Number,Microsoft.Cci.UtilityDataStructures,SetOfUints,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,SetOfUints,The following statement contains a magic number: this.resizeCount = this.size * 6 / 10;  
Magic Number,Microsoft.Cci.UtilityDataStructures,SetOfUints,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,SetOfUints,The following statement contains a magic number: this.resizeCount = this.size * 6 / 10;  
Magic Number,Microsoft.Cci.UtilityDataStructures,SetOfUints,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,Expand,The following statement contains a magic number: this.elements = new uint[this.size * 2];  
Magic Number,Microsoft.Cci.UtilityDataStructures,SetOfUints,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,Expand,The following statement contains a magic number: this.resizeCount = this.size * 6 / 10;  
Magic Number,Microsoft.Cci.UtilityDataStructures,SetOfUints,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\UtilityDataStructures.cs,Expand,The following statement contains a magic number: this.resizeCount = this.size * 6 / 10;  
Missing Default,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,IsVisibleOutsideAssembly,The following switch statement is missing a default case: switch (TypeHelper.TypeVisibilityAsTypeMemberVisibility (typeDefinition)) {  case TypeMemberVisibility.Public:  case TypeMemberVisibility.Family:  case TypeMemberVisibility.FamilyOrAssembly:  	return true;  }  
Missing Default,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,IsVisibleToFriendAssemblies,The following switch statement is missing a default case: switch (TypeHelper.TypeVisibilityAsTypeMemberVisibility (typeDefinition)) {  case TypeMemberVisibility.Public:  case TypeMemberVisibility.Family:  case TypeMemberVisibility.FamilyOrAssembly:  case TypeMemberVisibility.FamilyAndAssembly:  case TypeMemberVisibility.Assembly:  	return true;  }  
Missing Default,Microsoft.Cci,TypeHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,StackType,The following switch statement is missing a default case: switch (type.TypeCode) {  case PrimitiveTypeCode.Boolean:  case PrimitiveTypeCode.Char:  case PrimitiveTypeCode.Int16:  case PrimitiveTypeCode.Int32:  case PrimitiveTypeCode.Int8:  case PrimitiveTypeCode.UInt16:  case PrimitiveTypeCode.UInt32:  case PrimitiveTypeCode.UInt8:  	return type.PlatformType.SystemInt32;  case PrimitiveTypeCode.Int64:  case PrimitiveTypeCode.UInt64:  	return type.PlatformType.SystemInt64;  case PrimitiveTypeCode.Float32:  case PrimitiveTypeCode.Float64:  	return type.PlatformType.SystemFloat64;  case PrimitiveTypeCode.IntPtr:  case PrimitiveTypeCode.UIntPtr:  	return type.PlatformType.SystemIntPtr;  case PrimitiveTypeCode.NotPrimitive:  	if (type.IsEnum)  		return StackType (type.ResolvedType.UnderlyingType);  	break;  }  
Missing Default,Microsoft.Cci,TypeNameFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,GetTypeName,The following switch statement is missing a default case: switch (type.TypeCode) {  case PrimitiveTypeCode.Boolean:  	return "bool";  case PrimitiveTypeCode.Char:  	return "char";  case PrimitiveTypeCode.Float32:  	return "float";  case PrimitiveTypeCode.Float64:  	return "double";  case PrimitiveTypeCode.Int16:  	return "short";  case PrimitiveTypeCode.Int32:  	return "int";  case PrimitiveTypeCode.Int64:  	return "long";  case PrimitiveTypeCode.Int8:  	return "sbyte";  case PrimitiveTypeCode.String:  	return "string";  case PrimitiveTypeCode.UInt16:  	return "ushort";  case PrimitiveTypeCode.UInt32:  	return "uint";  case PrimitiveTypeCode.UInt64:  	return "ulong";  case PrimitiveTypeCode.UInt8:  	return "byte";  case PrimitiveTypeCode.Void:  	return "void";  case PrimitiveTypeCode.NotPrimitive:  	if (TypeHelper.TypesAreEquivalent (type' type.PlatformType.SystemDecimal))  		return "decimal";  	if (TypeHelper.TypesAreEquivalent (type' type.PlatformType.SystemObject))  		return "object";  	break;  }  
Missing Default,Microsoft.Cci,TypeNameFormatter,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\TypeHelper.cs,GetUnsignedEquivalent,The following switch statement is missing a default case: switch (type.TypeCode) {  case PrimitiveTypeCode.Int16:  	return type.PlatformType.SystemUInt16;  case PrimitiveTypeCode.Int32:  	return type.PlatformType.SystemUInt32;  case PrimitiveTypeCode.Int64:  	return type.PlatformType.SystemUInt64;  case PrimitiveTypeCode.Int8:  	return type.PlatformType.SystemUInt8;  case PrimitiveTypeCode.IntPtr:  	return type.PlatformType.SystemUIntPtr;  }  
Missing Default,Microsoft.Cci.Immutable,DummyArrayMethodReference,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\MetadataHelper\Members.cs,DummyArrayMethodReference,The following switch statement is missing a default case: switch (this.arrayOperation) {  case OperationCode.Array_Addr:  	name = host.NameTable.Address;  	break;  case OperationCode.Array_Create:  case OperationCode.Array_Create_WithLowerBound:  	name = host.NameTable.Ctor;  	break;  case OperationCode.Array_Get:  	name = host.NameTable.Get;  	break;  case OperationCode.Array_Set:  	name = host.NameTable.Set;  	break;  }  
