Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.Cci.Contrib.Mutators,ForEachStatementMutator,C:\repos\FlorianGrimm_whid\other\ccicontrib\Source\Mutators\ForEachStatementMutator.cs,Visit,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.Cci.Contrib.Mutators,ForStatementMutator,C:\repos\FlorianGrimm_whid\other\ccicontrib\Source\Mutators\ForStatementMutator.cs,Visit,Cyclomatic complexity of the method is 17
Long Identifier,Microsoft.Cci.Contrib.Mutators,ForStatementMutator,C:\repos\FlorianGrimm_whid\other\ccicontrib\Source\Mutators\ForStatementMutator.cs,Visit,The length of the parameter xGotoStatement1TargetStatement is 30.
Long Statement,Microsoft.Cci.Contrib.Mutators,ForEachStatementMutator,C:\repos\FlorianGrimm_whid\other\ccicontrib\Source\Mutators\ForEachStatementMutator.cs,Visit,The length of the statement  "		if (!xAssignment.Type.ToString ().StartsWith ("System.Collections.IEnumerator") && !xAssignment.Type.ToString ().StartsWith ("System.Collections.Generic.IEnumerator<")) { " is 170.
Long Statement,Microsoft.Cci.Contrib.Mutators,ForEachStatementMutator,C:\repos\FlorianGrimm_whid\other\ccicontrib\Source\Mutators\ForEachStatementMutator.cs,Visit,The length of the statement  "		if (xSpecializedMethodRef.UnspecializedVersion.ToString () != "System.Collections.Generic.IEnumerator<!0> System.Collections.Generic.IEnumerable.GetEnumerator()") { " is 164.
Long Statement,Microsoft.Cci.Contrib.Mutators,ForEachStatementMutator,C:\repos\FlorianGrimm_whid\other\ccicontrib\Source\Mutators\ForEachStatementMutator.cs,Visit,The length of the statement  "		if (xSpecializedMethodRef2.Name.Value != "get_Current" || xSpecializedMethodRef2.UnspecializedVersion.ContainingType.ToString () != "System.Collections.Generic.IEnumerator") { " is 175.
Magic Number,Microsoft.Cci.Contrib.Mutators,ForEachStatementMutator,C:\repos\FlorianGrimm_whid\other\ccicontrib\Source\Mutators\ForEachStatementMutator.cs,Visit,The following statement contains a magic number: if (xBlock.Statements.Count () < 2) {  	return xBlock;  }  
Magic Number,Microsoft.Cci.Contrib.Mutators,ForEachStatementMutator,C:\repos\FlorianGrimm_whid\other\ccicontrib\Source\Mutators\ForEachStatementMutator.cs,Visit,The following statement contains a magic number: for (int i = 0; i < (xStatements.Count - 2); i++) {  	var xExpression = xStatements [i] as IExpressionStatement;  	if (xExpression == null) {  		continue;  	}  	var xAssignment = xExpression.Expression as IAssignment;  	if (xAssignment == null) {  		continue;  	}  	if (!xAssignment.Type.ToString ().StartsWith ("System.Collections.IEnumerator") && !xAssignment.Type.ToString ().StartsWith ("System.Collections.Generic.IEnumerator<")) {  		continue;  	}  	var xMethodCall = xAssignment.Source as IMethodCall;  	if (xMethodCall == null) {  		continue;  	}  	var xSpecializedMethodRef = xMethodCall.MethodToCall as SpecializedMethodReference;  	if (xSpecializedMethodRef == null) {  		continue;  	}  	if (xSpecializedMethodRef.UnspecializedVersion.ToString () != "System.Collections.Generic.IEnumerator<!0> System.Collections.Generic.IEnumerable.GetEnumerator()") {  		continue;  	}  	var xTryFinally = xStatements [i + 1] as ITryCatchFinallyStatement;  	if (xTryFinally == null) {  		continue;  	}  	var xTryBodyStatements = xTryFinally.TryBody.Statements.ToList ();  	var xExpression2 = xTryBodyStatements [2] as IExpressionStatement;  	if (xExpression2 == null) {  		continue;  	}  	var xAssignment2 = xExpression2.Expression as IAssignment;  	if (xAssignment2 == null) {  		continue;  	}  	var xMethodCall2 = xAssignment2.Source as IMethodCall;  	if (xMethodCall2 == null) {  		continue;  	}  	var xSpecializedMethodRef2 = xMethodCall2.MethodToCall as SpecializedMethodReference;  	if (xSpecializedMethodRef2 == null) {  		continue;  	}  	if (xSpecializedMethodRef2.Name.Value != "get_Current" || xSpecializedMethodRef2.UnspecializedVersion.ContainingType.ToString () != "System.Collections.Generic.IEnumerator") {  		continue;  	}  	var xForEach = new ForEachStatement ();  	xForEach.Collection = xMethodCall.ThisArgument;  	xForEach.Variable = (ILocalDefinition)xAssignment2.Target.Definition;  	xTryBodyStatements.RemoveRange (0' 3);  	xTryBodyStatements.RemoveRange (xTryBodyStatements.Count - 3' 3);  	var xNewBlock = new BlockStatement ();  	xNewBlock.Statements.AddRange (xTryBodyStatements);  	xNewBlock.Locations.AddRange (xTryFinally.TryBody.Locations);  	xForEach.Body = xNewBlock;  	var xReturnBlock = new BlockStatement ();  	xReturnBlock.Statements.AddRange (xBlock.Statements.Skip (i));  	xReturnBlock.Locations.AddRange (xBlock.Locations);  	xReturnBlock.Statements.RemoveRange (0' 2);  	xReturnBlock.Statements.Insert (0' xForEach);  	return Visit (xReturnBlock);  }  
Magic Number,Microsoft.Cci.Contrib.Mutators,ForEachStatementMutator,C:\repos\FlorianGrimm_whid\other\ccicontrib\Source\Mutators\ForEachStatementMutator.cs,Visit,The following statement contains a magic number: for (int i = 0; i < (xStatements.Count - 2); i++) {  	var xExpression = xStatements [i] as IExpressionStatement;  	if (xExpression == null) {  		continue;  	}  	var xAssignment = xExpression.Expression as IAssignment;  	if (xAssignment == null) {  		continue;  	}  	if (!xAssignment.Type.ToString ().StartsWith ("System.Collections.IEnumerator") && !xAssignment.Type.ToString ().StartsWith ("System.Collections.Generic.IEnumerator<")) {  		continue;  	}  	var xMethodCall = xAssignment.Source as IMethodCall;  	if (xMethodCall == null) {  		continue;  	}  	var xSpecializedMethodRef = xMethodCall.MethodToCall as SpecializedMethodReference;  	if (xSpecializedMethodRef == null) {  		continue;  	}  	if (xSpecializedMethodRef.UnspecializedVersion.ToString () != "System.Collections.Generic.IEnumerator<!0> System.Collections.Generic.IEnumerable.GetEnumerator()") {  		continue;  	}  	var xTryFinally = xStatements [i + 1] as ITryCatchFinallyStatement;  	if (xTryFinally == null) {  		continue;  	}  	var xTryBodyStatements = xTryFinally.TryBody.Statements.ToList ();  	var xExpression2 = xTryBodyStatements [2] as IExpressionStatement;  	if (xExpression2 == null) {  		continue;  	}  	var xAssignment2 = xExpression2.Expression as IAssignment;  	if (xAssignment2 == null) {  		continue;  	}  	var xMethodCall2 = xAssignment2.Source as IMethodCall;  	if (xMethodCall2 == null) {  		continue;  	}  	var xSpecializedMethodRef2 = xMethodCall2.MethodToCall as SpecializedMethodReference;  	if (xSpecializedMethodRef2 == null) {  		continue;  	}  	if (xSpecializedMethodRef2.Name.Value != "get_Current" || xSpecializedMethodRef2.UnspecializedVersion.ContainingType.ToString () != "System.Collections.Generic.IEnumerator") {  		continue;  	}  	var xForEach = new ForEachStatement ();  	xForEach.Collection = xMethodCall.ThisArgument;  	xForEach.Variable = (ILocalDefinition)xAssignment2.Target.Definition;  	xTryBodyStatements.RemoveRange (0' 3);  	xTryBodyStatements.RemoveRange (xTryBodyStatements.Count - 3' 3);  	var xNewBlock = new BlockStatement ();  	xNewBlock.Statements.AddRange (xTryBodyStatements);  	xNewBlock.Locations.AddRange (xTryFinally.TryBody.Locations);  	xForEach.Body = xNewBlock;  	var xReturnBlock = new BlockStatement ();  	xReturnBlock.Statements.AddRange (xBlock.Statements.Skip (i));  	xReturnBlock.Locations.AddRange (xBlock.Locations);  	xReturnBlock.Statements.RemoveRange (0' 2);  	xReturnBlock.Statements.Insert (0' xForEach);  	return Visit (xReturnBlock);  }  
Magic Number,Microsoft.Cci.Contrib.Mutators,ForEachStatementMutator,C:\repos\FlorianGrimm_whid\other\ccicontrib\Source\Mutators\ForEachStatementMutator.cs,Visit,The following statement contains a magic number: for (int i = 0; i < (xStatements.Count - 2); i++) {  	var xExpression = xStatements [i] as IExpressionStatement;  	if (xExpression == null) {  		continue;  	}  	var xAssignment = xExpression.Expression as IAssignment;  	if (xAssignment == null) {  		continue;  	}  	if (!xAssignment.Type.ToString ().StartsWith ("System.Collections.IEnumerator") && !xAssignment.Type.ToString ().StartsWith ("System.Collections.Generic.IEnumerator<")) {  		continue;  	}  	var xMethodCall = xAssignment.Source as IMethodCall;  	if (xMethodCall == null) {  		continue;  	}  	var xSpecializedMethodRef = xMethodCall.MethodToCall as SpecializedMethodReference;  	if (xSpecializedMethodRef == null) {  		continue;  	}  	if (xSpecializedMethodRef.UnspecializedVersion.ToString () != "System.Collections.Generic.IEnumerator<!0> System.Collections.Generic.IEnumerable.GetEnumerator()") {  		continue;  	}  	var xTryFinally = xStatements [i + 1] as ITryCatchFinallyStatement;  	if (xTryFinally == null) {  		continue;  	}  	var xTryBodyStatements = xTryFinally.TryBody.Statements.ToList ();  	var xExpression2 = xTryBodyStatements [2] as IExpressionStatement;  	if (xExpression2 == null) {  		continue;  	}  	var xAssignment2 = xExpression2.Expression as IAssignment;  	if (xAssignment2 == null) {  		continue;  	}  	var xMethodCall2 = xAssignment2.Source as IMethodCall;  	if (xMethodCall2 == null) {  		continue;  	}  	var xSpecializedMethodRef2 = xMethodCall2.MethodToCall as SpecializedMethodReference;  	if (xSpecializedMethodRef2 == null) {  		continue;  	}  	if (xSpecializedMethodRef2.Name.Value != "get_Current" || xSpecializedMethodRef2.UnspecializedVersion.ContainingType.ToString () != "System.Collections.Generic.IEnumerator") {  		continue;  	}  	var xForEach = new ForEachStatement ();  	xForEach.Collection = xMethodCall.ThisArgument;  	xForEach.Variable = (ILocalDefinition)xAssignment2.Target.Definition;  	xTryBodyStatements.RemoveRange (0' 3);  	xTryBodyStatements.RemoveRange (xTryBodyStatements.Count - 3' 3);  	var xNewBlock = new BlockStatement ();  	xNewBlock.Statements.AddRange (xTryBodyStatements);  	xNewBlock.Locations.AddRange (xTryFinally.TryBody.Locations);  	xForEach.Body = xNewBlock;  	var xReturnBlock = new BlockStatement ();  	xReturnBlock.Statements.AddRange (xBlock.Statements.Skip (i));  	xReturnBlock.Locations.AddRange (xBlock.Locations);  	xReturnBlock.Statements.RemoveRange (0' 2);  	xReturnBlock.Statements.Insert (0' xForEach);  	return Visit (xReturnBlock);  }  
Magic Number,Microsoft.Cci.Contrib.Mutators,ForEachStatementMutator,C:\repos\FlorianGrimm_whid\other\ccicontrib\Source\Mutators\ForEachStatementMutator.cs,Visit,The following statement contains a magic number: for (int i = 0; i < (xStatements.Count - 2); i++) {  	var xExpression = xStatements [i] as IExpressionStatement;  	if (xExpression == null) {  		continue;  	}  	var xAssignment = xExpression.Expression as IAssignment;  	if (xAssignment == null) {  		continue;  	}  	if (!xAssignment.Type.ToString ().StartsWith ("System.Collections.IEnumerator") && !xAssignment.Type.ToString ().StartsWith ("System.Collections.Generic.IEnumerator<")) {  		continue;  	}  	var xMethodCall = xAssignment.Source as IMethodCall;  	if (xMethodCall == null) {  		continue;  	}  	var xSpecializedMethodRef = xMethodCall.MethodToCall as SpecializedMethodReference;  	if (xSpecializedMethodRef == null) {  		continue;  	}  	if (xSpecializedMethodRef.UnspecializedVersion.ToString () != "System.Collections.Generic.IEnumerator<!0> System.Collections.Generic.IEnumerable.GetEnumerator()") {  		continue;  	}  	var xTryFinally = xStatements [i + 1] as ITryCatchFinallyStatement;  	if (xTryFinally == null) {  		continue;  	}  	var xTryBodyStatements = xTryFinally.TryBody.Statements.ToList ();  	var xExpression2 = xTryBodyStatements [2] as IExpressionStatement;  	if (xExpression2 == null) {  		continue;  	}  	var xAssignment2 = xExpression2.Expression as IAssignment;  	if (xAssignment2 == null) {  		continue;  	}  	var xMethodCall2 = xAssignment2.Source as IMethodCall;  	if (xMethodCall2 == null) {  		continue;  	}  	var xSpecializedMethodRef2 = xMethodCall2.MethodToCall as SpecializedMethodReference;  	if (xSpecializedMethodRef2 == null) {  		continue;  	}  	if (xSpecializedMethodRef2.Name.Value != "get_Current" || xSpecializedMethodRef2.UnspecializedVersion.ContainingType.ToString () != "System.Collections.Generic.IEnumerator") {  		continue;  	}  	var xForEach = new ForEachStatement ();  	xForEach.Collection = xMethodCall.ThisArgument;  	xForEach.Variable = (ILocalDefinition)xAssignment2.Target.Definition;  	xTryBodyStatements.RemoveRange (0' 3);  	xTryBodyStatements.RemoveRange (xTryBodyStatements.Count - 3' 3);  	var xNewBlock = new BlockStatement ();  	xNewBlock.Statements.AddRange (xTryBodyStatements);  	xNewBlock.Locations.AddRange (xTryFinally.TryBody.Locations);  	xForEach.Body = xNewBlock;  	var xReturnBlock = new BlockStatement ();  	xReturnBlock.Statements.AddRange (xBlock.Statements.Skip (i));  	xReturnBlock.Locations.AddRange (xBlock.Locations);  	xReturnBlock.Statements.RemoveRange (0' 2);  	xReturnBlock.Statements.Insert (0' xForEach);  	return Visit (xReturnBlock);  }  
Magic Number,Microsoft.Cci.Contrib.Mutators,ForEachStatementMutator,C:\repos\FlorianGrimm_whid\other\ccicontrib\Source\Mutators\ForEachStatementMutator.cs,Visit,The following statement contains a magic number: for (int i = 0; i < (xStatements.Count - 2); i++) {  	var xExpression = xStatements [i] as IExpressionStatement;  	if (xExpression == null) {  		continue;  	}  	var xAssignment = xExpression.Expression as IAssignment;  	if (xAssignment == null) {  		continue;  	}  	if (!xAssignment.Type.ToString ().StartsWith ("System.Collections.IEnumerator") && !xAssignment.Type.ToString ().StartsWith ("System.Collections.Generic.IEnumerator<")) {  		continue;  	}  	var xMethodCall = xAssignment.Source as IMethodCall;  	if (xMethodCall == null) {  		continue;  	}  	var xSpecializedMethodRef = xMethodCall.MethodToCall as SpecializedMethodReference;  	if (xSpecializedMethodRef == null) {  		continue;  	}  	if (xSpecializedMethodRef.UnspecializedVersion.ToString () != "System.Collections.Generic.IEnumerator<!0> System.Collections.Generic.IEnumerable.GetEnumerator()") {  		continue;  	}  	var xTryFinally = xStatements [i + 1] as ITryCatchFinallyStatement;  	if (xTryFinally == null) {  		continue;  	}  	var xTryBodyStatements = xTryFinally.TryBody.Statements.ToList ();  	var xExpression2 = xTryBodyStatements [2] as IExpressionStatement;  	if (xExpression2 == null) {  		continue;  	}  	var xAssignment2 = xExpression2.Expression as IAssignment;  	if (xAssignment2 == null) {  		continue;  	}  	var xMethodCall2 = xAssignment2.Source as IMethodCall;  	if (xMethodCall2 == null) {  		continue;  	}  	var xSpecializedMethodRef2 = xMethodCall2.MethodToCall as SpecializedMethodReference;  	if (xSpecializedMethodRef2 == null) {  		continue;  	}  	if (xSpecializedMethodRef2.Name.Value != "get_Current" || xSpecializedMethodRef2.UnspecializedVersion.ContainingType.ToString () != "System.Collections.Generic.IEnumerator") {  		continue;  	}  	var xForEach = new ForEachStatement ();  	xForEach.Collection = xMethodCall.ThisArgument;  	xForEach.Variable = (ILocalDefinition)xAssignment2.Target.Definition;  	xTryBodyStatements.RemoveRange (0' 3);  	xTryBodyStatements.RemoveRange (xTryBodyStatements.Count - 3' 3);  	var xNewBlock = new BlockStatement ();  	xNewBlock.Statements.AddRange (xTryBodyStatements);  	xNewBlock.Locations.AddRange (xTryFinally.TryBody.Locations);  	xForEach.Body = xNewBlock;  	var xReturnBlock = new BlockStatement ();  	xReturnBlock.Statements.AddRange (xBlock.Statements.Skip (i));  	xReturnBlock.Locations.AddRange (xBlock.Locations);  	xReturnBlock.Statements.RemoveRange (0' 2);  	xReturnBlock.Statements.Insert (0' xForEach);  	return Visit (xReturnBlock);  }  
Magic Number,Microsoft.Cci.Contrib.Mutators,ForEachStatementMutator,C:\repos\FlorianGrimm_whid\other\ccicontrib\Source\Mutators\ForEachStatementMutator.cs,Visit,The following statement contains a magic number: for (int i = 0; i < (xStatements.Count - 2); i++) {  	var xExpression = xStatements [i] as IExpressionStatement;  	if (xExpression == null) {  		continue;  	}  	var xAssignment = xExpression.Expression as IAssignment;  	if (xAssignment == null) {  		continue;  	}  	if (!xAssignment.Type.ToString ().StartsWith ("System.Collections.IEnumerator") && !xAssignment.Type.ToString ().StartsWith ("System.Collections.Generic.IEnumerator<")) {  		continue;  	}  	var xMethodCall = xAssignment.Source as IMethodCall;  	if (xMethodCall == null) {  		continue;  	}  	var xSpecializedMethodRef = xMethodCall.MethodToCall as SpecializedMethodReference;  	if (xSpecializedMethodRef == null) {  		continue;  	}  	if (xSpecializedMethodRef.UnspecializedVersion.ToString () != "System.Collections.Generic.IEnumerator<!0> System.Collections.Generic.IEnumerable.GetEnumerator()") {  		continue;  	}  	var xTryFinally = xStatements [i + 1] as ITryCatchFinallyStatement;  	if (xTryFinally == null) {  		continue;  	}  	var xTryBodyStatements = xTryFinally.TryBody.Statements.ToList ();  	var xExpression2 = xTryBodyStatements [2] as IExpressionStatement;  	if (xExpression2 == null) {  		continue;  	}  	var xAssignment2 = xExpression2.Expression as IAssignment;  	if (xAssignment2 == null) {  		continue;  	}  	var xMethodCall2 = xAssignment2.Source as IMethodCall;  	if (xMethodCall2 == null) {  		continue;  	}  	var xSpecializedMethodRef2 = xMethodCall2.MethodToCall as SpecializedMethodReference;  	if (xSpecializedMethodRef2 == null) {  		continue;  	}  	if (xSpecializedMethodRef2.Name.Value != "get_Current" || xSpecializedMethodRef2.UnspecializedVersion.ContainingType.ToString () != "System.Collections.Generic.IEnumerator") {  		continue;  	}  	var xForEach = new ForEachStatement ();  	xForEach.Collection = xMethodCall.ThisArgument;  	xForEach.Variable = (ILocalDefinition)xAssignment2.Target.Definition;  	xTryBodyStatements.RemoveRange (0' 3);  	xTryBodyStatements.RemoveRange (xTryBodyStatements.Count - 3' 3);  	var xNewBlock = new BlockStatement ();  	xNewBlock.Statements.AddRange (xTryBodyStatements);  	xNewBlock.Locations.AddRange (xTryFinally.TryBody.Locations);  	xForEach.Body = xNewBlock;  	var xReturnBlock = new BlockStatement ();  	xReturnBlock.Statements.AddRange (xBlock.Statements.Skip (i));  	xReturnBlock.Locations.AddRange (xBlock.Locations);  	xReturnBlock.Statements.RemoveRange (0' 2);  	xReturnBlock.Statements.Insert (0' xForEach);  	return Visit (xReturnBlock);  }  
Magic Number,Microsoft.Cci.Contrib.Mutators,ForEachStatementMutator,C:\repos\FlorianGrimm_whid\other\ccicontrib\Source\Mutators\ForEachStatementMutator.cs,Visit,The following statement contains a magic number: xTryBodyStatements.RemoveRange (0' 3);  
Magic Number,Microsoft.Cci.Contrib.Mutators,ForEachStatementMutator,C:\repos\FlorianGrimm_whid\other\ccicontrib\Source\Mutators\ForEachStatementMutator.cs,Visit,The following statement contains a magic number: xTryBodyStatements.RemoveRange (xTryBodyStatements.Count - 3' 3);  
Magic Number,Microsoft.Cci.Contrib.Mutators,ForEachStatementMutator,C:\repos\FlorianGrimm_whid\other\ccicontrib\Source\Mutators\ForEachStatementMutator.cs,Visit,The following statement contains a magic number: xTryBodyStatements.RemoveRange (xTryBodyStatements.Count - 3' 3);  
Magic Number,Microsoft.Cci.Contrib.Mutators,ForEachStatementMutator,C:\repos\FlorianGrimm_whid\other\ccicontrib\Source\Mutators\ForEachStatementMutator.cs,Visit,The following statement contains a magic number: xReturnBlock.Statements.RemoveRange (0' 2);  
Magic Number,Microsoft.Cci.Contrib.Mutators,ForStatementMutator,C:\repos\FlorianGrimm_whid\other\ccicontrib\Source\Mutators\ForStatementMutator.cs,Visit,The following statement contains a magic number: if (xBlock.Statements.Count () < 4) {  	return xBlock;  }  
Magic Number,Microsoft.Cci.Contrib.Mutators,ForStatementMutator,C:\repos\FlorianGrimm_whid\other\ccicontrib\Source\Mutators\ForStatementMutator.cs,Visit,The following statement contains a magic number: for (int i = 2; i < (xStatements.Count - 1); i++) {  	var xLabeledStatement = xStatements [i] as ILabeledStatement;  	if (xLabeledStatement == null) {  		continue;  	}  	if (xLabeledStatement.Label.Value == xGotoStatement1.TargetStatement.Label.Value) {  		xGotoStatement1TargetStatement = xStatements [i + 1];  		xEndForBlock = i - 2;  		break;  	}  }  
Magic Number,Microsoft.Cci.Contrib.Mutators,ForStatementMutator,C:\repos\FlorianGrimm_whid\other\ccicontrib\Source\Mutators\ForStatementMutator.cs,Visit,The following statement contains a magic number: for (int i = 2; i < (xStatements.Count - 1); i++) {  	var xLabeledStatement = xStatements [i] as ILabeledStatement;  	if (xLabeledStatement == null) {  		continue;  	}  	if (xLabeledStatement.Label.Value == xGotoStatement1.TargetStatement.Label.Value) {  		xGotoStatement1TargetStatement = xStatements [i + 1];  		xEndForBlock = i - 2;  		break;  	}  }  
Magic Number,Microsoft.Cci.Contrib.Mutators,ForStatementMutator,C:\repos\FlorianGrimm_whid\other\ccicontrib\Source\Mutators\ForStatementMutator.cs,Visit,The following statement contains a magic number: if (xLabeledStatement.Label.Value == xGotoStatement1.TargetStatement.Label.Value) {  	xGotoStatement1TargetStatement = xStatements [i + 1];  	xEndForBlock = i - 2;  	break;  }  
Magic Number,Microsoft.Cci.Contrib.Mutators,ForStatementMutator,C:\repos\FlorianGrimm_whid\other\ccicontrib\Source\Mutators\ForStatementMutator.cs,Visit,The following statement contains a magic number: xEndForBlock = i - 2;  
Magic Number,Microsoft.Cci.Contrib.Mutators,ForStatementMutator,C:\repos\FlorianGrimm_whid\other\ccicontrib\Source\Mutators\ForStatementMutator.cs,Visit,The following statement contains a magic number: xStatements.RemoveRange (xStartForBlock' 2);  
Magic Number,Microsoft.Cci.Contrib.Mutators,ForStatementMutator,C:\repos\FlorianGrimm_whid\other\ccicontrib\Source\Mutators\ForStatementMutator.cs,Visit,The following statement contains a magic number: xStatements.RemoveRange (0' 2);  
Magic Number,Microsoft.Cci.Contrib.Mutators,ForStatementMutator,C:\repos\FlorianGrimm_whid\other\ccicontrib\Source\Mutators\ForStatementMutator.cs,Visit,The following statement contains a magic number: xStatements.RemoveRange (0' 3);  
