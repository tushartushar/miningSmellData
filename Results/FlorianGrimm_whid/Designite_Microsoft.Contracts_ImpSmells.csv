Implementation smell,Namespace,Class,File,Method,Description
Complex Method,System.Diagnostics.Contracts,RuntimeContracts,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\Microsoft.Contracts\RuntimeContracts.cs,KindToString,Cyclomatic complexity of the method is 18
Complex Method,System.Diagnostics.Contracts,RuntimeContracts,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\Microsoft.Contracts\RuntimeContracts.cs,CountFailure,Cyclomatic complexity of the method is 18
Complex Method,System.Diagnostics.Contracts,RuntimeContracts,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\Microsoft.Contracts\RuntimeContracts.cs,CountCheck,Cyclomatic complexity of the method is 18
Complex Method,System.Diagnostics.Contracts.Internal,ContractHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\Microsoft.Contracts\Contracts.cs,GetDisplayMessage,Cyclomatic complexity of the method is 26
Long Parameter List,System.Diagnostics.Contracts,ContractException,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\Microsoft.Contracts\Contracts.cs,ContractException,The method has 5 parameters.
Long Parameter List,System.Diagnostics.Contracts,RuntimeContracts,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\Microsoft.Contracts\RuntimeContracts.cs,TriggerFailure,The method has 5 parameters.
Long Parameter List,System.Diagnostics.Contracts.Internal,ContractHelper,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\Microsoft.Contracts\Contracts.cs,TriggerFailure,The method has 5 parameters.
Long Statement,System.Diagnostics.Contracts,Contract,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\Microsoft.Contracts\Contracts.cs,AssertMustUseRewriter,The length of the statement  "	Internal.ContractHelper.TriggerFailure (kind' "Must use the rewriter when using Contract." + contractKind' null' null' null); " is 125.
Missing Default,System.Diagnostics.Contracts,RuntimeContracts,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\Microsoft.Contracts\RuntimeContracts.cs,KindToString,The following switch statement is missing a default case: switch (kind) {  case ContractFailureKind.Assert:  	kindString = "Contract.Assert";  	break;  case ContractFailureKind.Assume:  	kindString = "Contract.Assume";  	break;  case ContractFailureKind.Invariant:  	kindString = "Contract.Invariant";  	break;  case ContractFailureKind.Postcondition:  	kindString = "Contract.Postcondition";  	break;  case ContractFailureKind.PostconditionOnException:  	kindString = "Contract.PostconditionOnException";  	break;  case ContractFailureKind.Precondition:  	kindString = "Contract.Precondition";  	break;  }  
Missing Default,System.Diagnostics.Contracts,RuntimeContracts,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\Microsoft.Contracts\RuntimeContracts.cs,CountFailure,The following switch statement is missing a default case: switch (kind) {  case ContractFailureKind.Precondition:  	RequiresCount.IncrementFail ();  	break;  case ContractFailureKind.Assert:  	AssertCount.IncrementFail ();  	break;  case ContractFailureKind.Assume:  	AssumeCount.IncrementFail ();  	break;  case ContractFailureKind.Postcondition:  	EnsuresCount.IncrementFail ();  	break;  case ContractFailureKind.Invariant:  	InvariantCount.IncrementFail ();  	break;  case ContractFailureKind.PostconditionOnException:  	EnsuresOnThrowCount.IncrementFail ();  	break;  }  
Missing Default,System.Diagnostics.Contracts,RuntimeContracts,C:\repos\FlorianGrimm_whid\other\ccimetadata\Sources\Microsoft.Contracts\RuntimeContracts.cs,CountCheck,The following switch statement is missing a default case: switch (kind) {  case ContractFailureKind.Precondition:  	RequiresCount.IncrementCheck ();  	break;  case ContractFailureKind.Assert:  	AssertCount.IncrementCheck ();  	break;  case ContractFailureKind.Assume:  	AssumeCount.IncrementCheck ();  	break;  case ContractFailureKind.Postcondition:  	EnsuresCount.IncrementCheck ();  	break;  case ContractFailureKind.Invariant:  	InvariantCount.IncrementCheck ();  	break;  case ContractFailureKind.PostconditionOnException:  	EnsuresOnThrowCount.IncrementCheck ();  	break;  }  
