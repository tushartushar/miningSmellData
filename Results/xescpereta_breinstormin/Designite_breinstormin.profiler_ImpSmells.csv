Implementation smell,Namespace,Class,File,Method,Description
Long Method,breinstormin.profiler,CLRProfiler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\CLRProfiler.cs,WaitForProcessToConnect,The method has 134 lines of code.
Long Method,breinstormin.profiler,Graph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Graph.cs,AssignLevelsToVertices,The method has 134 lines of code.
Long Method,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,BuildTypeGraph,The method has 119 lines of code.
Long Method,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The method has 643 lines of code.
Complex Method,breinstormin.profiler,CLRProfiler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\CLRProfiler.cs,ProfileProcess,Cyclomatic complexity of the method is 17
Complex Method,breinstormin.profiler,CLRProfiler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\CLRProfiler.cs,WaitForProcessToConnect,Cyclomatic complexity of the method is 24
Complex Method,breinstormin.profiler,Graph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Graph.cs,AssignLevelsToVertices,Cyclomatic complexity of the method is 37
Complex Method,breinstormin.profiler,GraphBase,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\GraphBase.cs,PlaceVertices,Cyclomatic complexity of the method is 24
Complex Method,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,Cyclomatic complexity of the method is 18
Complex Method,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,Cyclomatic complexity of the method is 17
Complex Method,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,SignatureOfObject,Cyclomatic complexity of the method is 24
Complex Method,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,BuildTypeGraph,Cyclomatic complexity of the method is 33
Complex Method,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,WriteVertexPaths,Cyclomatic complexity of the method is 24
Complex Method,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,BuildReferenceGraph,Cyclomatic complexity of the method is 21
Complex Method,breinstormin.profiler,LiveObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,Write3WordsAt,Cyclomatic complexity of the method is 8
Complex Method,breinstormin.profiler,LiveObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,Zero,Cyclomatic complexity of the method is 9
Complex Method,breinstormin.profiler,StacktraceTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,Add,Cyclomatic complexity of the method is 16
Complex Method,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadInt,Cyclomatic complexity of the method is 9
Complex Method,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadLong,Cyclomatic complexity of the method is 9
Complex Method,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadString,Cyclomatic complexity of the method is 8
Complex Method,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,FilterVertices,Cyclomatic complexity of the method is 23
Complex Method,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,Cyclomatic complexity of the method is 235
Complex Method,breinstormin.profiler,Vertex,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Vertex.cs,SqueezeOutRepetitions,Cyclomatic complexity of the method is 8
Long Parameter List,breinstormin.profiler,Histogram,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,BuildAllocationTrace,The method has 7 parameters.
Long Parameter List,breinstormin.profiler,Histogram,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,BuildAssemblyTrace,The method has 6 parameters.
Long Parameter List,breinstormin.profiler,Histogram,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,BuildCallTrace,The method has 5 parameters.
Long Parameter List,breinstormin.profiler,Histogram,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,BuildHandleAllocationTrace,The method has 5 parameters.
Long Parameter List,breinstormin.profiler,SampleObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,RecordChange,The method has 5 parameters.
Long Parameter List,breinstormin.profiler,SampleObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,Insert,The method has 5 parameters.
Long Parameter List,breinstormin.profiler,LiveObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,InsertObject,The method has 6 parameters.
Long Parameter List,breinstormin.profiler,LiveObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,UpdateObjects,The method has 6 parameters.
Long Parameter List,breinstormin.profiler,LiveObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,RecordGc,The method has 5 parameters.
Long Parameter List,breinstormin.profiler,StacktraceTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,Add,The method has 5 parameters.
Long Parameter List,breinstormin.profiler,FunctionList,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,BuildFunctionTrace,The method has 6 parameters.
Long Parameter List,breinstormin.profiler,FunctionList,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,BuildModuleTrace,The method has 7 parameters.
Long Parameter List,breinstormin.profiler,FunctionList,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,BuildClassTrace,The method has 6 parameters.
Long Parameter List,breinstormin.profiler,HandleInfo,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,HandleInfo,The method has 5 parameters.
Long Parameter List,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,AddFunctionVertex,The method has 5 parameters.
Long Statement,breinstormin.profiler,CLRProfiler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\CLRProfiler.cs,profileASP_NET,The length of the statement  "		int pid = WaitForProcessToConnect (logDir' "Waiting for ASP.NET to start common language runtime - this is the time to load your test page"); " is 141.
Long Statement,breinstormin.profiler,CLRProfiler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\CLRProfiler.cs,ProfileService,The length of the statement  "	breinstormin.tools.log.LogEngine.WriteLog ("breinstormin.profile"' string.Format ("Waiting for {0} to start up"' serviceName)); " is 127.
Long Statement,breinstormin.profiler,CLRProfiler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\CLRProfiler.cs,WaitForProcessToConnect,The length of the statement  "		if ((fProfiledProcessInitialized && profiledProcess == null) || (profiledProcess != null && ProfiledProcessHasExited ())) { " is 123.
Long Statement,breinstormin.profiler,Graph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Graph.cs,AssignLevelsToVertices,The length of the statement  "			if (unAssignedInputCount < minInputCount || unAssignedInputCount == minInputCount && unAssignedOutputCount > maxOutputCount) { " is 126.
Long Statement,breinstormin.profiler,GraphBase,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\GraphBase.cs,PlaceVertices,The length of the statement  "						v.weightString = string.Format ("{0}  ({1} objects' {2})"' formatWeight (v.weight)' v.count' formatWeight (v.basicWeight)); " is 123.
Long Statement,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,BuildTypeGraph,The length of the statement  "		if (gcObject.parent == null || (gcObject.InterestLevel & (InterestLevel.Interesting | InterestLevel.Display)) == InterestLevel.Ignore) { " is 136.
Long Statement,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,BuildTypeGraph,The length of the statement  "		if (gcObject.parent == null || (gcObject.InterestLevel & (InterestLevel.Interesting | InterestLevel.Display)) == InterestLevel.Ignore || gcObject.AllocTickIndex <= allocatedAfterTickIndex || gcObject.AllocTickIndex >= allocatedBeforeTickIndex) { " is 245.
Long Statement,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,BuildReferenceGraph,The length of the statement  "				if (refObject.vertex != null && refObject.vertex.selected && (refObject.InterestLevel & (InterestLevel.Interesting | InterestLevel.Display)) != InterestLevel.Ignore && refObject.AllocTickIndex > orgGraph.allocatedAfterTickIndex && refObject.AllocTickIndex < orgGraph.allocatedBeforeTickIndex) { " is 294.
Long Statement,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,BuildReferenceGraph,The length of the statement  "					pathFromRoot [levels + 1] = graph.FindOrCreateVertex (refObject.vertex.name' refObject.vertex.signature' refObject.vertex.moduleName); " is 134.
Long Statement,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,BuildReferenceGraph,The length of the statement  "						if ((pathObject.InterestLevel & (InterestLevel.Interesting | InterestLevel.Display)) == InterestLevel.Ignore || pathObject.vertex == null) " is 138.
Long Statement,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,BuildReferenceGraph,The length of the statement  "							pathFromRoot [level] = graph.FindOrCreateVertex (pathObject.vertex.name' pathObject.vertex.signature' pathObject.vertex.moduleName); " is 132.
Long Statement,breinstormin.profiler,Histogram,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,BuildAllocationTrace,The length of the statement  "	if ((typeVertex [typeIndex].interestLevel & InterestLevel.Interesting) == InterestLevel.Interesting && ReadNewLog.InterestingCallStack (vertexStack' stackPtr)) { " is 161.
Long Statement,breinstormin.profiler,FunctionList,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,BuildFunctionTrace,The length of the statement  "	if ((funcVertex [funcIndex].interestLevel & InterestLevel.Interesting) == InterestLevel.Interesting && ReadNewLog.InterestingCallStack (vertexStack' stackPtr)) { " is 161.
Long Statement,breinstormin.profiler,FunctionList,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReportCallCountSizes,The length of the statement  "		Console.WriteLine ("{0}'{1}'{2} {3}"' callCount [fd.functionId]' fd.funcSize' readNewLog.funcName [fd.functionId]' readNewLog.funcSignature [fd.functionId]); " is 157.
Long Statement,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The length of the statement  "		System.IO.Stream s = new System.IO.FileStream (fileName' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.ReadWrite); " is 140.
Long Statement,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The length of the statement  "		if (timePosIndex <= 1 || readLogResult.relocatedHistogram != null || readLogResult.finalizerHistogram != null || readLogResult.criticalFinalizerHistogram != null || readLogResult.liveObjectTable != null) { " is 205.
Long Statement,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The length of the statement  "						readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable); " is 142.
Long Statement,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The length of the statement  "						readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable); " is 142.
Long Statement,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The length of the statement  "					ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack); " is 120.
Long Statement,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The length of the statement  "					readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable); " is 125.
Long Statement,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The length of the statement  "					readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable); " is 129.
Long Statement,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The length of the statement  "						readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable); " is 127.
Long Statement,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The length of the statement  "						readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId); " is 120.
Complex Conditional,breinstormin.profiler,CLRProfiler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\CLRProfiler.cs,WaitForProcessToConnect,The conditional expression  "(fProfiledProcessInitialized && profiledProcess == null) || (profiledProcess != null && ProfiledProcessHasExited ())"  is complex.
Complex Conditional,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,BuildTypeGraph,The conditional expression  "gcObject.parent == null || (gcObject.InterestLevel & (InterestLevel.Interesting | InterestLevel.Display)) == InterestLevel.Ignore || gcObject.AllocTickIndex <= allocatedAfterTickIndex || gcObject.AllocTickIndex >= allocatedBeforeTickIndex"  is complex.
Complex Conditional,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,BuildReferenceGraph,The conditional expression  "refObject.vertex != null && refObject.vertex.selected && (refObject.InterestLevel & (InterestLevel.Interesting | InterestLevel.Display)) != InterestLevel.Ignore && refObject.AllocTickIndex > orgGraph.allocatedAfterTickIndex && refObject.AllocTickIndex < orgGraph.allocatedBeforeTickIndex"  is complex.
Complex Conditional,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The conditional expression  "timePosIndex <= 1 || readLogResult.relocatedHistogram != null || readLogResult.finalizerHistogram != null || readLogResult.criticalFinalizerHistogram != null || readLogResult.liveObjectTable != null"  is complex.
Complex Conditional,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The conditional expression  "c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0"  is complex.
Empty Catch Block,breinstormin.profiler,CLRProfiler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\CLRProfiler.cs,WaitForProcessToConnect,The method has an empty catch block.
Magic Number,breinstormin.profiler,BitReader,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\BitReader.cs,ReadBits,The following statement contains a magic number: if (haveBits >= numBits) {  	incurr += numBits;  	r = (current >> (-remains)) & ((1ul << numBits) - 1);  }  else {  	r = (current & ((1ul << haveBits) - 1)) << remains;  	current = (ulong)fp.ReadInt64 ();  	r |= (current >> (64 - remains)) & ((1ul << remains) - 1);  	incurr = remains;  }  
Magic Number,breinstormin.profiler,BitReader,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\BitReader.cs,ReadBits,The following statement contains a magic number: r |= (current >> (64 - remains)) & ((1ul << remains) - 1);  
Magic Number,breinstormin.profiler,BitWriter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\BitWriter.cs,BitWriter,The following statement contains a magic number: buffer = new ulong[4096];  
Magic Number,breinstormin.profiler,BitWriter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\BitWriter.cs,WriteBits,The following statement contains a magic number: if (space >= numBits) {  	buffer [position] <<= numBits;  	buffer [position] |= (bits & ((1ul << numBits) - 1));  	incurr += numBits;  }  else {  	buffer [position] <<= space;  	buffer [position] |= (bits & ((1ul << numBits) - 1)) >> (numBits - space);  	if (++position >= 4096) {  		incurr = 0;  		Flush ();  	}  	incurr = numBits - space;  	buffer [position] = bits & ((1ul << incurr) - 1);  }  
Magic Number,breinstormin.profiler,BitWriter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\BitWriter.cs,WriteBits,The following statement contains a magic number: if (++position >= 4096) {  	incurr = 0;  	Flush ();  }  
Magic Number,breinstormin.profiler,BitWriter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\BitWriter.cs,Flush,The following statement contains a magic number: if (incurr != 0) {  	buffer [position++] <<= 64 - incurr;  }  
Magic Number,breinstormin.profiler,BitWriter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\BitWriter.cs,Flush,The following statement contains a magic number: buffer [position++] <<= 64 - incurr;  
Magic Number,breinstormin.profiler,CLRProfiler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\CLRProfiler.cs,CLRProfiler,The following statement contains a magic number: _ck_check.Interval = 100;  
Magic Number,breinstormin.profiler,CLRProfiler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\CLRProfiler.cs,profileASP_NET,The following statement contains a magic number: if (StartIIS ()) {  	// wait for worker process to start up and connect  	breinstormin.tools.log.LogEngine.WriteLog ("breinstormin.profile"' "Waiting for ASP.NET worker process to start up");  	Thread.Sleep (1000);  	int pid = WaitForProcessToConnect (logDir' "Waiting for ASP.NET to start common language runtime - this is the time to load your test page");  	if (pid > 0) {  		profiledProcess = System.Diagnostics.Process.GetProcessById (pid);  		breinstormin.tools.log.LogEngine.WriteLog ("breinstormin.profile"' "Profiling: ASP.NET");  		breinstormin.tools.log.LogEngine.WriteLog ("breinstormin.profile"' "Start ASP.NET");  		processFileName = "ASP.NET";  	}  }  
Magic Number,breinstormin.profiler,CLRProfiler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\CLRProfiler.cs,profileASP_NET,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,breinstormin.profiler,CLRProfiler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\CLRProfiler.cs,ProfileService,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,breinstormin.profiler,CLRProfiler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\CLRProfiler.cs,WaitForProcessToConnect,The following statement contains a magic number: while (true) {  	#region handshaking  	//(1)succeeded  	try {  		handshakingReadBytes += handshakingPipe.Read (handshakingBuffer' handshakingReadBytes' 9 - handshakingReadBytes);  	}  	catch (System.IO.IOException) {  	}  	//Read 9 bytes from handshaking pipe  	//means the profielr was initialized successfully  	if (handshakingReadBytes == 9)  		break;  	#endregion handshaking  	#region logging  	//  (3)attach failed  	//  (3.1) read logging message  	//  (3.2) break if attach failed.  	//  (3.1) read logging message  	try {  		loggingReadBytes += loggingPipe.Read (loggingBuffer' loggingReadBytes' maxloggingBufferSize - loggingReadBytes);  	}  	catch (System.IO.IOException ex) {  		breinstormin.tools.log.LogEngine.WriteLog ("breinstormin.profiler"' ex.ToString ());  	}  	if (loggingReadBytes == maxloggingBufferSize) {  		char[] charBuffer = new char[loggingReadBytes];  		for (int i = 0; i < loggingReadBytes; i++)  			charBuffer [i] = Convert.ToChar (loggingBuffer [i]);  		string message = new String (charBuffer' 0' loggingReadBytes);  		if (attachMode == false && noUI == false) {  			//waitingForConnectionForm.addMessage(message);  		}  		else {  			breinstormin.tools.log.LogEngine.WriteLog ("breinstormin.profiler"' message);  		}  		loggingReadBytes = 0;  		while (true) {  			try {  				if (loggingPipe.Read (loggingBuffer' 0' 1) == 0) {  					DisconnectNamedPipe (loggingPipeHandle);  					ConnectNamedPipe (loggingPipeHandle' IntPtr.Zero);  					break;  				}  			}  			catch (System.IO.IOException) {  				DisconnectNamedPipe (loggingPipeHandle);  				ConnectNamedPipe (loggingPipeHandle' IntPtr.Zero);  				break;  			}  		}  	}  	//  (3.2) break if attach failed.  	if (attachMode == true && result != 0) {  		pid = -1;  		break;  	}  	#endregion logging  	//  (4)target process exited  	if ((fProfiledProcessInitialized && profiledProcess == null) || (profiledProcess != null && ProfiledProcessHasExited ())) {  		pid = -1;  		break;  	}  	Thread.Sleep (100);  }  
Magic Number,breinstormin.profiler,CLRProfiler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\CLRProfiler.cs,WaitForProcessToConnect,The following statement contains a magic number: while (true) {  	#region handshaking  	//(1)succeeded  	try {  		handshakingReadBytes += handshakingPipe.Read (handshakingBuffer' handshakingReadBytes' 9 - handshakingReadBytes);  	}  	catch (System.IO.IOException) {  	}  	//Read 9 bytes from handshaking pipe  	//means the profielr was initialized successfully  	if (handshakingReadBytes == 9)  		break;  	#endregion handshaking  	#region logging  	//  (3)attach failed  	//  (3.1) read logging message  	//  (3.2) break if attach failed.  	//  (3.1) read logging message  	try {  		loggingReadBytes += loggingPipe.Read (loggingBuffer' loggingReadBytes' maxloggingBufferSize - loggingReadBytes);  	}  	catch (System.IO.IOException ex) {  		breinstormin.tools.log.LogEngine.WriteLog ("breinstormin.profiler"' ex.ToString ());  	}  	if (loggingReadBytes == maxloggingBufferSize) {  		char[] charBuffer = new char[loggingReadBytes];  		for (int i = 0; i < loggingReadBytes; i++)  			charBuffer [i] = Convert.ToChar (loggingBuffer [i]);  		string message = new String (charBuffer' 0' loggingReadBytes);  		if (attachMode == false && noUI == false) {  			//waitingForConnectionForm.addMessage(message);  		}  		else {  			breinstormin.tools.log.LogEngine.WriteLog ("breinstormin.profiler"' message);  		}  		loggingReadBytes = 0;  		while (true) {  			try {  				if (loggingPipe.Read (loggingBuffer' 0' 1) == 0) {  					DisconnectNamedPipe (loggingPipeHandle);  					ConnectNamedPipe (loggingPipeHandle' IntPtr.Zero);  					break;  				}  			}  			catch (System.IO.IOException) {  				DisconnectNamedPipe (loggingPipeHandle);  				ConnectNamedPipe (loggingPipeHandle' IntPtr.Zero);  				break;  			}  		}  	}  	//  (3.2) break if attach failed.  	if (attachMode == true && result != 0) {  		pid = -1;  		break;  	}  	#endregion logging  	//  (4)target process exited  	if ((fProfiledProcessInitialized && profiledProcess == null) || (profiledProcess != null && ProfiledProcessHasExited ())) {  		pid = -1;  		break;  	}  	Thread.Sleep (100);  }  
Magic Number,breinstormin.profiler,CLRProfiler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\CLRProfiler.cs,WaitForProcessToConnect,The following statement contains a magic number: while (true) {  	#region handshaking  	//(1)succeeded  	try {  		handshakingReadBytes += handshakingPipe.Read (handshakingBuffer' handshakingReadBytes' 9 - handshakingReadBytes);  	}  	catch (System.IO.IOException) {  	}  	//Read 9 bytes from handshaking pipe  	//means the profielr was initialized successfully  	if (handshakingReadBytes == 9)  		break;  	#endregion handshaking  	#region logging  	//  (3)attach failed  	//  (3.1) read logging message  	//  (3.2) break if attach failed.  	//  (3.1) read logging message  	try {  		loggingReadBytes += loggingPipe.Read (loggingBuffer' loggingReadBytes' maxloggingBufferSize - loggingReadBytes);  	}  	catch (System.IO.IOException ex) {  		breinstormin.tools.log.LogEngine.WriteLog ("breinstormin.profiler"' ex.ToString ());  	}  	if (loggingReadBytes == maxloggingBufferSize) {  		char[] charBuffer = new char[loggingReadBytes];  		for (int i = 0; i < loggingReadBytes; i++)  			charBuffer [i] = Convert.ToChar (loggingBuffer [i]);  		string message = new String (charBuffer' 0' loggingReadBytes);  		if (attachMode == false && noUI == false) {  			//waitingForConnectionForm.addMessage(message);  		}  		else {  			breinstormin.tools.log.LogEngine.WriteLog ("breinstormin.profiler"' message);  		}  		loggingReadBytes = 0;  		while (true) {  			try {  				if (loggingPipe.Read (loggingBuffer' 0' 1) == 0) {  					DisconnectNamedPipe (loggingPipeHandle);  					ConnectNamedPipe (loggingPipeHandle' IntPtr.Zero);  					break;  				}  			}  			catch (System.IO.IOException) {  				DisconnectNamedPipe (loggingPipeHandle);  				ConnectNamedPipe (loggingPipeHandle' IntPtr.Zero);  				break;  			}  		}  	}  	//  (3.2) break if attach failed.  	if (attachMode == true && result != 0) {  		pid = -1;  		break;  	}  	#endregion logging  	//  (4)target process exited  	if ((fProfiledProcessInitialized && profiledProcess == null) || (profiledProcess != null && ProfiledProcessHasExited ())) {  		pid = -1;  		break;  	}  	Thread.Sleep (100);  }  
Magic Number,breinstormin.profiler,CLRProfiler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\CLRProfiler.cs,WaitForProcessToConnect,The following statement contains a magic number: try {  	handshakingReadBytes += handshakingPipe.Read (handshakingBuffer' handshakingReadBytes' 9 - handshakingReadBytes);  }  catch (System.IO.IOException) {  }  
Magic Number,breinstormin.profiler,CLRProfiler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\CLRProfiler.cs,WaitForProcessToConnect,The following statement contains a magic number: handshakingReadBytes += handshakingPipe.Read (handshakingBuffer' handshakingReadBytes' 9 - handshakingReadBytes);  
Magic Number,breinstormin.profiler,CLRProfiler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\CLRProfiler.cs,WaitForProcessToConnect,The following statement contains a magic number: if (handshakingReadBytes == 9)  	break;  
Magic Number,breinstormin.profiler,CLRProfiler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\CLRProfiler.cs,WaitForProcessToConnect,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,breinstormin.profiler,CLRProfiler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\CLRProfiler.cs,WaitForProcessToConnect,The following statement contains a magic number: if (handshakingReadBytes == 9) {  	char[] charBuffer = new char[9];  	for (int i = 0; i < handshakingBuffer.Length; i++)  		charBuffer [i] = Convert.ToChar (handshakingBuffer [i]);  	pid = Int32.Parse (new String (charBuffer' 0' 8)' System.Globalization.NumberStyles.HexNumber);  	CreateEvents (pid);  	string fileName = getLogFileName (pid);  	byte[] fileNameBuffer = new Byte[fileName.Length + 1];  	for (int i = 0; i < fileName.Length; i++)  		fileNameBuffer [i] = (byte)fileName [i];  	fileNameBuffer [fileName.Length] = 0;  	handshakingPipe.Write (fileNameBuffer' 0' fileNameBuffer.Length);  	handshakingPipe.Flush ();  	logFileName = tempDir + "\\" + fileName;  	log = new ReadNewLog (logFileName);  	lastLogResult = null;  	ObjectGraph.cachedGraph = null;  	while (true) {  		try {  			if (handshakingPipe.Read (handshakingBuffer' 0' 1) == 0)// && GetLastError() == 109/*ERROR_BROKEN_PIPE*/)  			 {  				DisconnectNamedPipe (handshakingPipeHandle);  				ConnectNamedPipe (handshakingPipeHandle' IntPtr.Zero);  				break;  			}  		}  		catch (System.IO.IOException) {  			DisconnectNamedPipe (handshakingPipeHandle);  			ConnectNamedPipe (handshakingPipeHandle' IntPtr.Zero);  			break;  		}  	}  }  else {  	string error = string.Format ("Error {0} occurred"' GetLastError ());  }  
Magic Number,breinstormin.profiler,CLRProfiler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\CLRProfiler.cs,WaitForProcessToConnect,The following statement contains a magic number: if (handshakingReadBytes == 9) {  	char[] charBuffer = new char[9];  	for (int i = 0; i < handshakingBuffer.Length; i++)  		charBuffer [i] = Convert.ToChar (handshakingBuffer [i]);  	pid = Int32.Parse (new String (charBuffer' 0' 8)' System.Globalization.NumberStyles.HexNumber);  	CreateEvents (pid);  	string fileName = getLogFileName (pid);  	byte[] fileNameBuffer = new Byte[fileName.Length + 1];  	for (int i = 0; i < fileName.Length; i++)  		fileNameBuffer [i] = (byte)fileName [i];  	fileNameBuffer [fileName.Length] = 0;  	handshakingPipe.Write (fileNameBuffer' 0' fileNameBuffer.Length);  	handshakingPipe.Flush ();  	logFileName = tempDir + "\\" + fileName;  	log = new ReadNewLog (logFileName);  	lastLogResult = null;  	ObjectGraph.cachedGraph = null;  	while (true) {  		try {  			if (handshakingPipe.Read (handshakingBuffer' 0' 1) == 0)// && GetLastError() == 109/*ERROR_BROKEN_PIPE*/)  			 {  				DisconnectNamedPipe (handshakingPipeHandle);  				ConnectNamedPipe (handshakingPipeHandle' IntPtr.Zero);  				break;  			}  		}  		catch (System.IO.IOException) {  			DisconnectNamedPipe (handshakingPipeHandle);  			ConnectNamedPipe (handshakingPipeHandle' IntPtr.Zero);  			break;  		}  	}  }  else {  	string error = string.Format ("Error {0} occurred"' GetLastError ());  }  
Magic Number,breinstormin.profiler,CLRProfiler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\CLRProfiler.cs,WaitForProcessToConnect,The following statement contains a magic number: if (handshakingReadBytes == 9) {  	char[] charBuffer = new char[9];  	for (int i = 0; i < handshakingBuffer.Length; i++)  		charBuffer [i] = Convert.ToChar (handshakingBuffer [i]);  	pid = Int32.Parse (new String (charBuffer' 0' 8)' System.Globalization.NumberStyles.HexNumber);  	CreateEvents (pid);  	string fileName = getLogFileName (pid);  	byte[] fileNameBuffer = new Byte[fileName.Length + 1];  	for (int i = 0; i < fileName.Length; i++)  		fileNameBuffer [i] = (byte)fileName [i];  	fileNameBuffer [fileName.Length] = 0;  	handshakingPipe.Write (fileNameBuffer' 0' fileNameBuffer.Length);  	handshakingPipe.Flush ();  	logFileName = tempDir + "\\" + fileName;  	log = new ReadNewLog (logFileName);  	lastLogResult = null;  	ObjectGraph.cachedGraph = null;  	while (true) {  		try {  			if (handshakingPipe.Read (handshakingBuffer' 0' 1) == 0)// && GetLastError() == 109/*ERROR_BROKEN_PIPE*/)  			 {  				DisconnectNamedPipe (handshakingPipeHandle);  				ConnectNamedPipe (handshakingPipeHandle' IntPtr.Zero);  				break;  			}  		}  		catch (System.IO.IOException) {  			DisconnectNamedPipe (handshakingPipeHandle);  			ConnectNamedPipe (handshakingPipeHandle' IntPtr.Zero);  			break;  		}  	}  }  else {  	string error = string.Format ("Error {0} occurred"' GetLastError ());  }  
Magic Number,breinstormin.profiler,CLRProfiler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\CLRProfiler.cs,WaitForProcessToConnect,The following statement contains a magic number: pid = Int32.Parse (new String (charBuffer' 0' 8)' System.Globalization.NumberStyles.HexNumber);  
Magic Number,breinstormin.profiler,CLRProfiler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\CLRProfiler.cs,DumpResults,The following statement contains a magic number: for (int iter = 0; iter < maxIter; iter++) {  	long lastOffset = logFileOffset ();  	if (forceGcCompletedEvent.Wait (60 * 1000)) {  		forceGcCompletedEvent.Reset ();  		long saveLogFileStartOffset = logFileStartOffset;  		logFileStartOffset = startOffset;  		logFileEndOffset = logFileOffset ();  		ReadLogResult logResult = GetLogResult ();  		readLogFile (log' logResult' processFileName' Graph.GraphType.HeapGraph);  		lastLogResult = logResult;  		logFileStartOffset = saveLogFileStartOffset;  		break;  	}  	else {  		// Hmm' the app didn't get back to us in 60 seconds  		// If the log file is growing' assume the app is still dumping  		// the heap' otherwise something is obviously wrong.  		if (logFileOffset () == lastOffset) {  			throw new Exception ("There was no response from the application");  		}  	}  }  
Magic Number,breinstormin.profiler,CLRProfiler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\CLRProfiler.cs,DumpResults,The following statement contains a magic number: for (int iter = 0; iter < maxIter; iter++) {  	long lastOffset = logFileOffset ();  	if (forceGcCompletedEvent.Wait (60 * 1000)) {  		forceGcCompletedEvent.Reset ();  		long saveLogFileStartOffset = logFileStartOffset;  		logFileStartOffset = startOffset;  		logFileEndOffset = logFileOffset ();  		ReadLogResult logResult = GetLogResult ();  		readLogFile (log' logResult' processFileName' Graph.GraphType.HeapGraph);  		lastLogResult = logResult;  		logFileStartOffset = saveLogFileStartOffset;  		break;  	}  	else {  		// Hmm' the app didn't get back to us in 60 seconds  		// If the log file is growing' assume the app is still dumping  		// the heap' otherwise something is obviously wrong.  		if (logFileOffset () == lastOffset) {  			throw new Exception ("There was no response from the application");  		}  	}  }  
Magic Number,breinstormin.profiler,CLRProfiler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\CLRProfiler.cs,DumpResults,The following statement contains a magic number: if (forceGcCompletedEvent.Wait (60 * 1000)) {  	forceGcCompletedEvent.Reset ();  	long saveLogFileStartOffset = logFileStartOffset;  	logFileStartOffset = startOffset;  	logFileEndOffset = logFileOffset ();  	ReadLogResult logResult = GetLogResult ();  	readLogFile (log' logResult' processFileName' Graph.GraphType.HeapGraph);  	lastLogResult = logResult;  	logFileStartOffset = saveLogFileStartOffset;  	break;  }  else {  	// Hmm' the app didn't get back to us in 60 seconds  	// If the log file is growing' assume the app is still dumping  	// the heap' otherwise something is obviously wrong.  	if (logFileOffset () == lastOffset) {  		throw new Exception ("There was no response from the application");  	}  }  
Magic Number,breinstormin.profiler,CLRProfiler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\CLRProfiler.cs,DumpResults,The following statement contains a magic number: if (forceGcCompletedEvent.Wait (60 * 1000)) {  	forceGcCompletedEvent.Reset ();  	long saveLogFileStartOffset = logFileStartOffset;  	logFileStartOffset = startOffset;  	logFileEndOffset = logFileOffset ();  	ReadLogResult logResult = GetLogResult ();  	readLogFile (log' logResult' processFileName' Graph.GraphType.HeapGraph);  	lastLogResult = logResult;  	logFileStartOffset = saveLogFileStartOffset;  	break;  }  else {  	// Hmm' the app didn't get back to us in 60 seconds  	// If the log file is growing' assume the app is still dumping  	// the heap' otherwise something is obviously wrong.  	if (logFileOffset () == lastOffset) {  		throw new Exception ("There was no response from the application");  	}  }  
Magic Number,breinstormin.profiler,GraphBase,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\GraphBase.cs,formatWeight,The following statement contains a magic number: if (graph.graphType == Graph.GraphType.AssemblyGraph) {  	if (weight == 1) {  		return "1 assembly";  	}  	else {  		return weight + " assemblies";  	}  }  else {  	double w = weight;  	string byteString = "bytes";  	if (w >= 1024) {  		w /= 1024;  		byteString = "kB   ";  	}  	if (w >= 1024) {  		w /= 1024;  		byteString = "MB   ";  	}  	if (w >= 1024) {  		w /= 1024;  		byteString = "GB   ";  	}  	string format = "{0'4:f0} {1} ({2:f2}%)";  	if (w < 10)  		format = "{0'4:f1} {1} ({2:f2}%)";  	return string.Format (format' w' byteString' weight * 100.0 / totalWeight);  }  
Magic Number,breinstormin.profiler,GraphBase,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\GraphBase.cs,formatWeight,The following statement contains a magic number: if (graph.graphType == Graph.GraphType.AssemblyGraph) {  	if (weight == 1) {  		return "1 assembly";  	}  	else {  		return weight + " assemblies";  	}  }  else {  	double w = weight;  	string byteString = "bytes";  	if (w >= 1024) {  		w /= 1024;  		byteString = "kB   ";  	}  	if (w >= 1024) {  		w /= 1024;  		byteString = "MB   ";  	}  	if (w >= 1024) {  		w /= 1024;  		byteString = "GB   ";  	}  	string format = "{0'4:f0} {1} ({2:f2}%)";  	if (w < 10)  		format = "{0'4:f1} {1} ({2:f2}%)";  	return string.Format (format' w' byteString' weight * 100.0 / totalWeight);  }  
Magic Number,breinstormin.profiler,GraphBase,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\GraphBase.cs,formatWeight,The following statement contains a magic number: if (graph.graphType == Graph.GraphType.AssemblyGraph) {  	if (weight == 1) {  		return "1 assembly";  	}  	else {  		return weight + " assemblies";  	}  }  else {  	double w = weight;  	string byteString = "bytes";  	if (w >= 1024) {  		w /= 1024;  		byteString = "kB   ";  	}  	if (w >= 1024) {  		w /= 1024;  		byteString = "MB   ";  	}  	if (w >= 1024) {  		w /= 1024;  		byteString = "GB   ";  	}  	string format = "{0'4:f0} {1} ({2:f2}%)";  	if (w < 10)  		format = "{0'4:f1} {1} ({2:f2}%)";  	return string.Format (format' w' byteString' weight * 100.0 / totalWeight);  }  
Magic Number,breinstormin.profiler,GraphBase,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\GraphBase.cs,formatWeight,The following statement contains a magic number: if (graph.graphType == Graph.GraphType.AssemblyGraph) {  	if (weight == 1) {  		return "1 assembly";  	}  	else {  		return weight + " assemblies";  	}  }  else {  	double w = weight;  	string byteString = "bytes";  	if (w >= 1024) {  		w /= 1024;  		byteString = "kB   ";  	}  	if (w >= 1024) {  		w /= 1024;  		byteString = "MB   ";  	}  	if (w >= 1024) {  		w /= 1024;  		byteString = "GB   ";  	}  	string format = "{0'4:f0} {1} ({2:f2}%)";  	if (w < 10)  		format = "{0'4:f1} {1} ({2:f2}%)";  	return string.Format (format' w' byteString' weight * 100.0 / totalWeight);  }  
Magic Number,breinstormin.profiler,GraphBase,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\GraphBase.cs,formatWeight,The following statement contains a magic number: if (graph.graphType == Graph.GraphType.AssemblyGraph) {  	if (weight == 1) {  		return "1 assembly";  	}  	else {  		return weight + " assemblies";  	}  }  else {  	double w = weight;  	string byteString = "bytes";  	if (w >= 1024) {  		w /= 1024;  		byteString = "kB   ";  	}  	if (w >= 1024) {  		w /= 1024;  		byteString = "MB   ";  	}  	if (w >= 1024) {  		w /= 1024;  		byteString = "GB   ";  	}  	string format = "{0'4:f0} {1} ({2:f2}%)";  	if (w < 10)  		format = "{0'4:f1} {1} ({2:f2}%)";  	return string.Format (format' w' byteString' weight * 100.0 / totalWeight);  }  
Magic Number,breinstormin.profiler,GraphBase,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\GraphBase.cs,formatWeight,The following statement contains a magic number: if (graph.graphType == Graph.GraphType.AssemblyGraph) {  	if (weight == 1) {  		return "1 assembly";  	}  	else {  		return weight + " assemblies";  	}  }  else {  	double w = weight;  	string byteString = "bytes";  	if (w >= 1024) {  		w /= 1024;  		byteString = "kB   ";  	}  	if (w >= 1024) {  		w /= 1024;  		byteString = "MB   ";  	}  	if (w >= 1024) {  		w /= 1024;  		byteString = "GB   ";  	}  	string format = "{0'4:f0} {1} ({2:f2}%)";  	if (w < 10)  		format = "{0'4:f1} {1} ({2:f2}%)";  	return string.Format (format' w' byteString' weight * 100.0 / totalWeight);  }  
Magic Number,breinstormin.profiler,GraphBase,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\GraphBase.cs,formatWeight,The following statement contains a magic number: if (graph.graphType == Graph.GraphType.AssemblyGraph) {  	if (weight == 1) {  		return "1 assembly";  	}  	else {  		return weight + " assemblies";  	}  }  else {  	double w = weight;  	string byteString = "bytes";  	if (w >= 1024) {  		w /= 1024;  		byteString = "kB   ";  	}  	if (w >= 1024) {  		w /= 1024;  		byteString = "MB   ";  	}  	if (w >= 1024) {  		w /= 1024;  		byteString = "GB   ";  	}  	string format = "{0'4:f0} {1} ({2:f2}%)";  	if (w < 10)  		format = "{0'4:f1} {1} ({2:f2}%)";  	return string.Format (format' w' byteString' weight * 100.0 / totalWeight);  }  
Magic Number,breinstormin.profiler,GraphBase,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\GraphBase.cs,formatWeight,The following statement contains a magic number: if (graph.graphType == Graph.GraphType.AssemblyGraph) {  	if (weight == 1) {  		return "1 assembly";  	}  	else {  		return weight + " assemblies";  	}  }  else {  	double w = weight;  	string byteString = "bytes";  	if (w >= 1024) {  		w /= 1024;  		byteString = "kB   ";  	}  	if (w >= 1024) {  		w /= 1024;  		byteString = "MB   ";  	}  	if (w >= 1024) {  		w /= 1024;  		byteString = "GB   ";  	}  	string format = "{0'4:f0} {1} ({2:f2}%)";  	if (w < 10)  		format = "{0'4:f1} {1} ({2:f2}%)";  	return string.Format (format' w' byteString' weight * 100.0 / totalWeight);  }  
Magic Number,breinstormin.profiler,GraphBase,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\GraphBase.cs,formatWeight,The following statement contains a magic number: if (w >= 1024) {  	w /= 1024;  	byteString = "kB   ";  }  
Magic Number,breinstormin.profiler,GraphBase,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\GraphBase.cs,formatWeight,The following statement contains a magic number: if (w >= 1024) {  	w /= 1024;  	byteString = "kB   ";  }  
Magic Number,breinstormin.profiler,GraphBase,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\GraphBase.cs,formatWeight,The following statement contains a magic number: w /= 1024;  
Magic Number,breinstormin.profiler,GraphBase,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\GraphBase.cs,formatWeight,The following statement contains a magic number: if (w >= 1024) {  	w /= 1024;  	byteString = "MB   ";  }  
Magic Number,breinstormin.profiler,GraphBase,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\GraphBase.cs,formatWeight,The following statement contains a magic number: if (w >= 1024) {  	w /= 1024;  	byteString = "MB   ";  }  
Magic Number,breinstormin.profiler,GraphBase,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\GraphBase.cs,formatWeight,The following statement contains a magic number: w /= 1024;  
Magic Number,breinstormin.profiler,GraphBase,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\GraphBase.cs,formatWeight,The following statement contains a magic number: if (w >= 1024) {  	w /= 1024;  	byteString = "GB   ";  }  
Magic Number,breinstormin.profiler,GraphBase,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\GraphBase.cs,formatWeight,The following statement contains a magic number: if (w >= 1024) {  	w /= 1024;  	byteString = "GB   ";  }  
Magic Number,breinstormin.profiler,GraphBase,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\GraphBase.cs,formatWeight,The following statement contains a magic number: w /= 1024;  
Magic Number,breinstormin.profiler,GraphBase,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\GraphBase.cs,formatWeight,The following statement contains a magic number: if (w < 10)  	format = "{0'4:f1} {1} ({2:f2}%)";  
Magic Number,breinstormin.profiler,GraphBase,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\GraphBase.cs,formatWeight,The following statement contains a magic number: return string.Format (format' w' byteString' weight * 100.0 / totalWeight);  
Magic Number,breinstormin.profiler,GraphBase,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\GraphBase.cs,PlaceVertices,The following statement contains a magic number: if (placeVertices) {  	for (int level = graph.TopVertex.level; level <= graph.BottomVertex.level; level++) {  		ArrayList all = (ArrayList)al [level];  		foreach (Vertex v in all) {  			if (graph.graphType == Graph.GraphType.CallGraph) {  				v.basicWeight = v.incomingWeight - v.outgoingWeight;  				if (v.basicWeight < 0)  					v.basicWeight = 0;  				v.weightString = string.Format ("Gets {0}' causes {1}"' formatWeight (v.basicWeight)' formatWeight (v.outgoingWeight));  			}  			else {  				if (v.count == 0)  					v.weightString = formatWeight (v.weight);  				else if (v.count == 1)  					v.weightString = string.Format ("{0}  (1 object' {1})"' formatWeight (v.weight)' formatWeight (v.basicWeight));  				else  					v.weightString = string.Format ("{0}  ({1} objects' {2})"' formatWeight (v.weight)' v.count' formatWeight (v.basicWeight));  			}  		}  		int y = 10;  		ulong levelWeight = 0;  		foreach (Vertex v in all)  			levelWeight += v.weight;  		float levelHeight = levelWeight * scale;  		if (levelHeight < totalHeight * 0.5)  			y += (int)((totalHeight - levelHeight) * 2);  		foreach (Vertex v in all) {  			// For the in-between vertices' sometimes it's good  			// to shift them down a little to line them up with  			// whatever is going into them. Unless of course  			// we would need to shift too much...  			if (v.level < graph.BottomVertex.level - 1) {  				ulong highestWeight = 0;  				foreach (Edge e in v.incomingEdges.Values) {  					if (e.weight > highestWeight && e.FromVertex.level < level) {  						highestWeight = e.weight;  					}  				}  			}  			float fHeight = v.weight * scale;  			int iHeight = (int)fHeight;  			if (iHeight < 1)  				iHeight = 1;  			if (placeEdges)  				PlaceEdges (v.outgoingEdges.Values' false' scale);  		}  	}  }  
Magic Number,breinstormin.profiler,GraphBase,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\GraphBase.cs,PlaceVertices,The following statement contains a magic number: if (placeVertices) {  	for (int level = graph.TopVertex.level; level <= graph.BottomVertex.level; level++) {  		ArrayList all = (ArrayList)al [level];  		foreach (Vertex v in all) {  			if (graph.graphType == Graph.GraphType.CallGraph) {  				v.basicWeight = v.incomingWeight - v.outgoingWeight;  				if (v.basicWeight < 0)  					v.basicWeight = 0;  				v.weightString = string.Format ("Gets {0}' causes {1}"' formatWeight (v.basicWeight)' formatWeight (v.outgoingWeight));  			}  			else {  				if (v.count == 0)  					v.weightString = formatWeight (v.weight);  				else if (v.count == 1)  					v.weightString = string.Format ("{0}  (1 object' {1})"' formatWeight (v.weight)' formatWeight (v.basicWeight));  				else  					v.weightString = string.Format ("{0}  ({1} objects' {2})"' formatWeight (v.weight)' v.count' formatWeight (v.basicWeight));  			}  		}  		int y = 10;  		ulong levelWeight = 0;  		foreach (Vertex v in all)  			levelWeight += v.weight;  		float levelHeight = levelWeight * scale;  		if (levelHeight < totalHeight * 0.5)  			y += (int)((totalHeight - levelHeight) * 2);  		foreach (Vertex v in all) {  			// For the in-between vertices' sometimes it's good  			// to shift them down a little to line them up with  			// whatever is going into them. Unless of course  			// we would need to shift too much...  			if (v.level < graph.BottomVertex.level - 1) {  				ulong highestWeight = 0;  				foreach (Edge e in v.incomingEdges.Values) {  					if (e.weight > highestWeight && e.FromVertex.level < level) {  						highestWeight = e.weight;  					}  				}  			}  			float fHeight = v.weight * scale;  			int iHeight = (int)fHeight;  			if (iHeight < 1)  				iHeight = 1;  			if (placeEdges)  				PlaceEdges (v.outgoingEdges.Values' false' scale);  		}  	}  }  
Magic Number,breinstormin.profiler,GraphBase,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\GraphBase.cs,PlaceVertices,The following statement contains a magic number: if (placeVertices) {  	for (int level = graph.TopVertex.level; level <= graph.BottomVertex.level; level++) {  		ArrayList all = (ArrayList)al [level];  		foreach (Vertex v in all) {  			if (graph.graphType == Graph.GraphType.CallGraph) {  				v.basicWeight = v.incomingWeight - v.outgoingWeight;  				if (v.basicWeight < 0)  					v.basicWeight = 0;  				v.weightString = string.Format ("Gets {0}' causes {1}"' formatWeight (v.basicWeight)' formatWeight (v.outgoingWeight));  			}  			else {  				if (v.count == 0)  					v.weightString = formatWeight (v.weight);  				else if (v.count == 1)  					v.weightString = string.Format ("{0}  (1 object' {1})"' formatWeight (v.weight)' formatWeight (v.basicWeight));  				else  					v.weightString = string.Format ("{0}  ({1} objects' {2})"' formatWeight (v.weight)' v.count' formatWeight (v.basicWeight));  			}  		}  		int y = 10;  		ulong levelWeight = 0;  		foreach (Vertex v in all)  			levelWeight += v.weight;  		float levelHeight = levelWeight * scale;  		if (levelHeight < totalHeight * 0.5)  			y += (int)((totalHeight - levelHeight) * 2);  		foreach (Vertex v in all) {  			// For the in-between vertices' sometimes it's good  			// to shift them down a little to line them up with  			// whatever is going into them. Unless of course  			// we would need to shift too much...  			if (v.level < graph.BottomVertex.level - 1) {  				ulong highestWeight = 0;  				foreach (Edge e in v.incomingEdges.Values) {  					if (e.weight > highestWeight && e.FromVertex.level < level) {  						highestWeight = e.weight;  					}  				}  			}  			float fHeight = v.weight * scale;  			int iHeight = (int)fHeight;  			if (iHeight < 1)  				iHeight = 1;  			if (placeEdges)  				PlaceEdges (v.outgoingEdges.Values' false' scale);  		}  	}  }  
Magic Number,breinstormin.profiler,GraphBase,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\GraphBase.cs,PlaceVertices,The following statement contains a magic number: for (int level = graph.TopVertex.level; level <= graph.BottomVertex.level; level++) {  	ArrayList all = (ArrayList)al [level];  	foreach (Vertex v in all) {  		if (graph.graphType == Graph.GraphType.CallGraph) {  			v.basicWeight = v.incomingWeight - v.outgoingWeight;  			if (v.basicWeight < 0)  				v.basicWeight = 0;  			v.weightString = string.Format ("Gets {0}' causes {1}"' formatWeight (v.basicWeight)' formatWeight (v.outgoingWeight));  		}  		else {  			if (v.count == 0)  				v.weightString = formatWeight (v.weight);  			else if (v.count == 1)  				v.weightString = string.Format ("{0}  (1 object' {1})"' formatWeight (v.weight)' formatWeight (v.basicWeight));  			else  				v.weightString = string.Format ("{0}  ({1} objects' {2})"' formatWeight (v.weight)' v.count' formatWeight (v.basicWeight));  		}  	}  	int y = 10;  	ulong levelWeight = 0;  	foreach (Vertex v in all)  		levelWeight += v.weight;  	float levelHeight = levelWeight * scale;  	if (levelHeight < totalHeight * 0.5)  		y += (int)((totalHeight - levelHeight) * 2);  	foreach (Vertex v in all) {  		// For the in-between vertices' sometimes it's good  		// to shift them down a little to line them up with  		// whatever is going into them. Unless of course  		// we would need to shift too much...  		if (v.level < graph.BottomVertex.level - 1) {  			ulong highestWeight = 0;  			foreach (Edge e in v.incomingEdges.Values) {  				if (e.weight > highestWeight && e.FromVertex.level < level) {  					highestWeight = e.weight;  				}  			}  		}  		float fHeight = v.weight * scale;  		int iHeight = (int)fHeight;  		if (iHeight < 1)  			iHeight = 1;  		if (placeEdges)  			PlaceEdges (v.outgoingEdges.Values' false' scale);  	}  }  
Magic Number,breinstormin.profiler,GraphBase,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\GraphBase.cs,PlaceVertices,The following statement contains a magic number: for (int level = graph.TopVertex.level; level <= graph.BottomVertex.level; level++) {  	ArrayList all = (ArrayList)al [level];  	foreach (Vertex v in all) {  		if (graph.graphType == Graph.GraphType.CallGraph) {  			v.basicWeight = v.incomingWeight - v.outgoingWeight;  			if (v.basicWeight < 0)  				v.basicWeight = 0;  			v.weightString = string.Format ("Gets {0}' causes {1}"' formatWeight (v.basicWeight)' formatWeight (v.outgoingWeight));  		}  		else {  			if (v.count == 0)  				v.weightString = formatWeight (v.weight);  			else if (v.count == 1)  				v.weightString = string.Format ("{0}  (1 object' {1})"' formatWeight (v.weight)' formatWeight (v.basicWeight));  			else  				v.weightString = string.Format ("{0}  ({1} objects' {2})"' formatWeight (v.weight)' v.count' formatWeight (v.basicWeight));  		}  	}  	int y = 10;  	ulong levelWeight = 0;  	foreach (Vertex v in all)  		levelWeight += v.weight;  	float levelHeight = levelWeight * scale;  	if (levelHeight < totalHeight * 0.5)  		y += (int)((totalHeight - levelHeight) * 2);  	foreach (Vertex v in all) {  		// For the in-between vertices' sometimes it's good  		// to shift them down a little to line them up with  		// whatever is going into them. Unless of course  		// we would need to shift too much...  		if (v.level < graph.BottomVertex.level - 1) {  			ulong highestWeight = 0;  			foreach (Edge e in v.incomingEdges.Values) {  				if (e.weight > highestWeight && e.FromVertex.level < level) {  					highestWeight = e.weight;  				}  			}  		}  		float fHeight = v.weight * scale;  		int iHeight = (int)fHeight;  		if (iHeight < 1)  			iHeight = 1;  		if (placeEdges)  			PlaceEdges (v.outgoingEdges.Values' false' scale);  	}  }  
Magic Number,breinstormin.profiler,GraphBase,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\GraphBase.cs,PlaceVertices,The following statement contains a magic number: for (int level = graph.TopVertex.level; level <= graph.BottomVertex.level; level++) {  	ArrayList all = (ArrayList)al [level];  	foreach (Vertex v in all) {  		if (graph.graphType == Graph.GraphType.CallGraph) {  			v.basicWeight = v.incomingWeight - v.outgoingWeight;  			if (v.basicWeight < 0)  				v.basicWeight = 0;  			v.weightString = string.Format ("Gets {0}' causes {1}"' formatWeight (v.basicWeight)' formatWeight (v.outgoingWeight));  		}  		else {  			if (v.count == 0)  				v.weightString = formatWeight (v.weight);  			else if (v.count == 1)  				v.weightString = string.Format ("{0}  (1 object' {1})"' formatWeight (v.weight)' formatWeight (v.basicWeight));  			else  				v.weightString = string.Format ("{0}  ({1} objects' {2})"' formatWeight (v.weight)' v.count' formatWeight (v.basicWeight));  		}  	}  	int y = 10;  	ulong levelWeight = 0;  	foreach (Vertex v in all)  		levelWeight += v.weight;  	float levelHeight = levelWeight * scale;  	if (levelHeight < totalHeight * 0.5)  		y += (int)((totalHeight - levelHeight) * 2);  	foreach (Vertex v in all) {  		// For the in-between vertices' sometimes it's good  		// to shift them down a little to line them up with  		// whatever is going into them. Unless of course  		// we would need to shift too much...  		if (v.level < graph.BottomVertex.level - 1) {  			ulong highestWeight = 0;  			foreach (Edge e in v.incomingEdges.Values) {  				if (e.weight > highestWeight && e.FromVertex.level < level) {  					highestWeight = e.weight;  				}  			}  		}  		float fHeight = v.weight * scale;  		int iHeight = (int)fHeight;  		if (iHeight < 1)  			iHeight = 1;  		if (placeEdges)  			PlaceEdges (v.outgoingEdges.Values' false' scale);  	}  }  
Magic Number,breinstormin.profiler,GraphBase,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\GraphBase.cs,PlaceVertices,The following statement contains a magic number: if (levelHeight < totalHeight * 0.5)  	y += (int)((totalHeight - levelHeight) * 2);  
Magic Number,breinstormin.profiler,GraphBase,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\GraphBase.cs,PlaceVertices,The following statement contains a magic number: if (levelHeight < totalHeight * 0.5)  	y += (int)((totalHeight - levelHeight) * 2);  
Magic Number,breinstormin.profiler,GraphBase,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\GraphBase.cs,PlaceVertices,The following statement contains a magic number: y += (int)((totalHeight - levelHeight) * 2);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 0;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 1;  		}  		else {  			quadsToRead = 9;  		}  	}  	else if (tmp == 1) {  		quadsToRead = 8;  	}  	else if (tmp == 2) {  		quadsToRead = 5;  	}  	else {  		tmp = br.ReadBits (2);  		if (tmp == 0) {  			quadsToRead = 2;  		}  		else if (tmp == 1) {  			quadsToRead = 4;  		}  		else if (tmp == 2) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 7;  			}  			else if (tmp == 1) {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 3;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 11;  					}  					else {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 6;  						}  						else {  							tmp = br.ReadBits (2);  							if (tmp == 0) {  								tmp = br.ReadBits (1);  								if (tmp == 0) {  									quadsToRead = 16;  								}  								else {  									quadsToRead = 15;  								}  							}  							else if (tmp == 1) {  								quadsToRead = 14;  							}  							else if (tmp == 2) {  								quadsToRead = 13;  							}  							else {  								quadsToRead = 12;  							}  						}  					}  				}  			}  		}  		else {  			quadsToRead = 10;  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 0;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 1;  		}  		else {  			quadsToRead = 9;  		}  	}  	else if (tmp == 1) {  		quadsToRead = 8;  	}  	else if (tmp == 2) {  		quadsToRead = 5;  	}  	else {  		tmp = br.ReadBits (2);  		if (tmp == 0) {  			quadsToRead = 2;  		}  		else if (tmp == 1) {  			quadsToRead = 4;  		}  		else if (tmp == 2) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 7;  			}  			else if (tmp == 1) {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 3;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 11;  					}  					else {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 6;  						}  						else {  							tmp = br.ReadBits (2);  							if (tmp == 0) {  								tmp = br.ReadBits (1);  								if (tmp == 0) {  									quadsToRead = 16;  								}  								else {  									quadsToRead = 15;  								}  							}  							else if (tmp == 1) {  								quadsToRead = 14;  							}  							else if (tmp == 2) {  								quadsToRead = 13;  							}  							else {  								quadsToRead = 12;  							}  						}  					}  				}  			}  		}  		else {  			quadsToRead = 10;  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 0;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 1;  		}  		else {  			quadsToRead = 9;  		}  	}  	else if (tmp == 1) {  		quadsToRead = 8;  	}  	else if (tmp == 2) {  		quadsToRead = 5;  	}  	else {  		tmp = br.ReadBits (2);  		if (tmp == 0) {  			quadsToRead = 2;  		}  		else if (tmp == 1) {  			quadsToRead = 4;  		}  		else if (tmp == 2) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 7;  			}  			else if (tmp == 1) {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 3;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 11;  					}  					else {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 6;  						}  						else {  							tmp = br.ReadBits (2);  							if (tmp == 0) {  								tmp = br.ReadBits (1);  								if (tmp == 0) {  									quadsToRead = 16;  								}  								else {  									quadsToRead = 15;  								}  							}  							else if (tmp == 1) {  								quadsToRead = 14;  							}  							else if (tmp == 2) {  								quadsToRead = 13;  							}  							else {  								quadsToRead = 12;  							}  						}  					}  				}  			}  		}  		else {  			quadsToRead = 10;  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 0;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 1;  		}  		else {  			quadsToRead = 9;  		}  	}  	else if (tmp == 1) {  		quadsToRead = 8;  	}  	else if (tmp == 2) {  		quadsToRead = 5;  	}  	else {  		tmp = br.ReadBits (2);  		if (tmp == 0) {  			quadsToRead = 2;  		}  		else if (tmp == 1) {  			quadsToRead = 4;  		}  		else if (tmp == 2) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 7;  			}  			else if (tmp == 1) {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 3;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 11;  					}  					else {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 6;  						}  						else {  							tmp = br.ReadBits (2);  							if (tmp == 0) {  								tmp = br.ReadBits (1);  								if (tmp == 0) {  									quadsToRead = 16;  								}  								else {  									quadsToRead = 15;  								}  							}  							else if (tmp == 1) {  								quadsToRead = 14;  							}  							else if (tmp == 2) {  								quadsToRead = 13;  							}  							else {  								quadsToRead = 12;  							}  						}  					}  				}  			}  		}  		else {  			quadsToRead = 10;  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 0;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 1;  		}  		else {  			quadsToRead = 9;  		}  	}  	else if (tmp == 1) {  		quadsToRead = 8;  	}  	else if (tmp == 2) {  		quadsToRead = 5;  	}  	else {  		tmp = br.ReadBits (2);  		if (tmp == 0) {  			quadsToRead = 2;  		}  		else if (tmp == 1) {  			quadsToRead = 4;  		}  		else if (tmp == 2) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 7;  			}  			else if (tmp == 1) {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 3;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 11;  					}  					else {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 6;  						}  						else {  							tmp = br.ReadBits (2);  							if (tmp == 0) {  								tmp = br.ReadBits (1);  								if (tmp == 0) {  									quadsToRead = 16;  								}  								else {  									quadsToRead = 15;  								}  							}  							else if (tmp == 1) {  								quadsToRead = 14;  							}  							else if (tmp == 2) {  								quadsToRead = 13;  							}  							else {  								quadsToRead = 12;  							}  						}  					}  				}  			}  		}  		else {  			quadsToRead = 10;  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 0;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 1;  		}  		else {  			quadsToRead = 9;  		}  	}  	else if (tmp == 1) {  		quadsToRead = 8;  	}  	else if (tmp == 2) {  		quadsToRead = 5;  	}  	else {  		tmp = br.ReadBits (2);  		if (tmp == 0) {  			quadsToRead = 2;  		}  		else if (tmp == 1) {  			quadsToRead = 4;  		}  		else if (tmp == 2) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 7;  			}  			else if (tmp == 1) {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 3;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 11;  					}  					else {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 6;  						}  						else {  							tmp = br.ReadBits (2);  							if (tmp == 0) {  								tmp = br.ReadBits (1);  								if (tmp == 0) {  									quadsToRead = 16;  								}  								else {  									quadsToRead = 15;  								}  							}  							else if (tmp == 1) {  								quadsToRead = 14;  							}  							else if (tmp == 2) {  								quadsToRead = 13;  							}  							else {  								quadsToRead = 12;  							}  						}  					}  				}  			}  		}  		else {  			quadsToRead = 10;  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 0;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 1;  		}  		else {  			quadsToRead = 9;  		}  	}  	else if (tmp == 1) {  		quadsToRead = 8;  	}  	else if (tmp == 2) {  		quadsToRead = 5;  	}  	else {  		tmp = br.ReadBits (2);  		if (tmp == 0) {  			quadsToRead = 2;  		}  		else if (tmp == 1) {  			quadsToRead = 4;  		}  		else if (tmp == 2) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 7;  			}  			else if (tmp == 1) {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 3;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 11;  					}  					else {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 6;  						}  						else {  							tmp = br.ReadBits (2);  							if (tmp == 0) {  								tmp = br.ReadBits (1);  								if (tmp == 0) {  									quadsToRead = 16;  								}  								else {  									quadsToRead = 15;  								}  							}  							else if (tmp == 1) {  								quadsToRead = 14;  							}  							else if (tmp == 2) {  								quadsToRead = 13;  							}  							else {  								quadsToRead = 12;  							}  						}  					}  				}  			}  		}  		else {  			quadsToRead = 10;  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 0;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 1;  		}  		else {  			quadsToRead = 9;  		}  	}  	else if (tmp == 1) {  		quadsToRead = 8;  	}  	else if (tmp == 2) {  		quadsToRead = 5;  	}  	else {  		tmp = br.ReadBits (2);  		if (tmp == 0) {  			quadsToRead = 2;  		}  		else if (tmp == 1) {  			quadsToRead = 4;  		}  		else if (tmp == 2) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 7;  			}  			else if (tmp == 1) {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 3;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 11;  					}  					else {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 6;  						}  						else {  							tmp = br.ReadBits (2);  							if (tmp == 0) {  								tmp = br.ReadBits (1);  								if (tmp == 0) {  									quadsToRead = 16;  								}  								else {  									quadsToRead = 15;  								}  							}  							else if (tmp == 1) {  								quadsToRead = 14;  							}  							else if (tmp == 2) {  								quadsToRead = 13;  							}  							else {  								quadsToRead = 12;  							}  						}  					}  				}  			}  		}  		else {  			quadsToRead = 10;  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 0;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 1;  		}  		else {  			quadsToRead = 9;  		}  	}  	else if (tmp == 1) {  		quadsToRead = 8;  	}  	else if (tmp == 2) {  		quadsToRead = 5;  	}  	else {  		tmp = br.ReadBits (2);  		if (tmp == 0) {  			quadsToRead = 2;  		}  		else if (tmp == 1) {  			quadsToRead = 4;  		}  		else if (tmp == 2) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 7;  			}  			else if (tmp == 1) {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 3;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 11;  					}  					else {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 6;  						}  						else {  							tmp = br.ReadBits (2);  							if (tmp == 0) {  								tmp = br.ReadBits (1);  								if (tmp == 0) {  									quadsToRead = 16;  								}  								else {  									quadsToRead = 15;  								}  							}  							else if (tmp == 1) {  								quadsToRead = 14;  							}  							else if (tmp == 2) {  								quadsToRead = 13;  							}  							else {  								quadsToRead = 12;  							}  						}  					}  				}  			}  		}  		else {  			quadsToRead = 10;  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 0;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 1;  		}  		else {  			quadsToRead = 9;  		}  	}  	else if (tmp == 1) {  		quadsToRead = 8;  	}  	else if (tmp == 2) {  		quadsToRead = 5;  	}  	else {  		tmp = br.ReadBits (2);  		if (tmp == 0) {  			quadsToRead = 2;  		}  		else if (tmp == 1) {  			quadsToRead = 4;  		}  		else if (tmp == 2) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 7;  			}  			else if (tmp == 1) {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 3;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 11;  					}  					else {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 6;  						}  						else {  							tmp = br.ReadBits (2);  							if (tmp == 0) {  								tmp = br.ReadBits (1);  								if (tmp == 0) {  									quadsToRead = 16;  								}  								else {  									quadsToRead = 15;  								}  							}  							else if (tmp == 1) {  								quadsToRead = 14;  							}  							else if (tmp == 2) {  								quadsToRead = 13;  							}  							else {  								quadsToRead = 12;  							}  						}  					}  				}  			}  		}  		else {  			quadsToRead = 10;  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 0;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 1;  		}  		else {  			quadsToRead = 9;  		}  	}  	else if (tmp == 1) {  		quadsToRead = 8;  	}  	else if (tmp == 2) {  		quadsToRead = 5;  	}  	else {  		tmp = br.ReadBits (2);  		if (tmp == 0) {  			quadsToRead = 2;  		}  		else if (tmp == 1) {  			quadsToRead = 4;  		}  		else if (tmp == 2) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 7;  			}  			else if (tmp == 1) {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 3;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 11;  					}  					else {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 6;  						}  						else {  							tmp = br.ReadBits (2);  							if (tmp == 0) {  								tmp = br.ReadBits (1);  								if (tmp == 0) {  									quadsToRead = 16;  								}  								else {  									quadsToRead = 15;  								}  							}  							else if (tmp == 1) {  								quadsToRead = 14;  							}  							else if (tmp == 2) {  								quadsToRead = 13;  							}  							else {  								quadsToRead = 12;  							}  						}  					}  				}  			}  		}  		else {  			quadsToRead = 10;  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 0;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 1;  		}  		else {  			quadsToRead = 9;  		}  	}  	else if (tmp == 1) {  		quadsToRead = 8;  	}  	else if (tmp == 2) {  		quadsToRead = 5;  	}  	else {  		tmp = br.ReadBits (2);  		if (tmp == 0) {  			quadsToRead = 2;  		}  		else if (tmp == 1) {  			quadsToRead = 4;  		}  		else if (tmp == 2) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 7;  			}  			else if (tmp == 1) {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 3;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 11;  					}  					else {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 6;  						}  						else {  							tmp = br.ReadBits (2);  							if (tmp == 0) {  								tmp = br.ReadBits (1);  								if (tmp == 0) {  									quadsToRead = 16;  								}  								else {  									quadsToRead = 15;  								}  							}  							else if (tmp == 1) {  								quadsToRead = 14;  							}  							else if (tmp == 2) {  								quadsToRead = 13;  							}  							else {  								quadsToRead = 12;  							}  						}  					}  				}  			}  		}  		else {  			quadsToRead = 10;  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 0;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 1;  		}  		else {  			quadsToRead = 9;  		}  	}  	else if (tmp == 1) {  		quadsToRead = 8;  	}  	else if (tmp == 2) {  		quadsToRead = 5;  	}  	else {  		tmp = br.ReadBits (2);  		if (tmp == 0) {  			quadsToRead = 2;  		}  		else if (tmp == 1) {  			quadsToRead = 4;  		}  		else if (tmp == 2) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 7;  			}  			else if (tmp == 1) {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 3;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 11;  					}  					else {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 6;  						}  						else {  							tmp = br.ReadBits (2);  							if (tmp == 0) {  								tmp = br.ReadBits (1);  								if (tmp == 0) {  									quadsToRead = 16;  								}  								else {  									quadsToRead = 15;  								}  							}  							else if (tmp == 1) {  								quadsToRead = 14;  							}  							else if (tmp == 2) {  								quadsToRead = 13;  							}  							else {  								quadsToRead = 12;  							}  						}  					}  				}  			}  		}  		else {  			quadsToRead = 10;  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 0;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 1;  		}  		else {  			quadsToRead = 9;  		}  	}  	else if (tmp == 1) {  		quadsToRead = 8;  	}  	else if (tmp == 2) {  		quadsToRead = 5;  	}  	else {  		tmp = br.ReadBits (2);  		if (tmp == 0) {  			quadsToRead = 2;  		}  		else if (tmp == 1) {  			quadsToRead = 4;  		}  		else if (tmp == 2) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 7;  			}  			else if (tmp == 1) {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 3;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 11;  					}  					else {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 6;  						}  						else {  							tmp = br.ReadBits (2);  							if (tmp == 0) {  								tmp = br.ReadBits (1);  								if (tmp == 0) {  									quadsToRead = 16;  								}  								else {  									quadsToRead = 15;  								}  							}  							else if (tmp == 1) {  								quadsToRead = 14;  							}  							else if (tmp == 2) {  								quadsToRead = 13;  							}  							else {  								quadsToRead = 12;  							}  						}  					}  				}  			}  		}  		else {  			quadsToRead = 10;  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 0;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 1;  		}  		else {  			quadsToRead = 9;  		}  	}  	else if (tmp == 1) {  		quadsToRead = 8;  	}  	else if (tmp == 2) {  		quadsToRead = 5;  	}  	else {  		tmp = br.ReadBits (2);  		if (tmp == 0) {  			quadsToRead = 2;  		}  		else if (tmp == 1) {  			quadsToRead = 4;  		}  		else if (tmp == 2) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 7;  			}  			else if (tmp == 1) {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 3;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 11;  					}  					else {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 6;  						}  						else {  							tmp = br.ReadBits (2);  							if (tmp == 0) {  								tmp = br.ReadBits (1);  								if (tmp == 0) {  									quadsToRead = 16;  								}  								else {  									quadsToRead = 15;  								}  							}  							else if (tmp == 1) {  								quadsToRead = 14;  							}  							else if (tmp == 2) {  								quadsToRead = 13;  							}  							else {  								quadsToRead = 12;  							}  						}  					}  				}  			}  		}  		else {  			quadsToRead = 10;  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 0;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 1;  		}  		else {  			quadsToRead = 9;  		}  	}  	else if (tmp == 1) {  		quadsToRead = 8;  	}  	else if (tmp == 2) {  		quadsToRead = 5;  	}  	else {  		tmp = br.ReadBits (2);  		if (tmp == 0) {  			quadsToRead = 2;  		}  		else if (tmp == 1) {  			quadsToRead = 4;  		}  		else if (tmp == 2) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 7;  			}  			else if (tmp == 1) {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 3;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 11;  					}  					else {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 6;  						}  						else {  							tmp = br.ReadBits (2);  							if (tmp == 0) {  								tmp = br.ReadBits (1);  								if (tmp == 0) {  									quadsToRead = 16;  								}  								else {  									quadsToRead = 15;  								}  							}  							else if (tmp == 1) {  								quadsToRead = 14;  							}  							else if (tmp == 2) {  								quadsToRead = 13;  							}  							else {  								quadsToRead = 12;  							}  						}  					}  				}  			}  		}  		else {  			quadsToRead = 10;  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 0;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 1;  		}  		else {  			quadsToRead = 9;  		}  	}  	else if (tmp == 1) {  		quadsToRead = 8;  	}  	else if (tmp == 2) {  		quadsToRead = 5;  	}  	else {  		tmp = br.ReadBits (2);  		if (tmp == 0) {  			quadsToRead = 2;  		}  		else if (tmp == 1) {  			quadsToRead = 4;  		}  		else if (tmp == 2) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 7;  			}  			else if (tmp == 1) {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 3;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 11;  					}  					else {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 6;  						}  						else {  							tmp = br.ReadBits (2);  							if (tmp == 0) {  								tmp = br.ReadBits (1);  								if (tmp == 0) {  									quadsToRead = 16;  								}  								else {  									quadsToRead = 15;  								}  							}  							else if (tmp == 1) {  								quadsToRead = 14;  							}  							else if (tmp == 2) {  								quadsToRead = 13;  							}  							else {  								quadsToRead = 12;  							}  						}  					}  				}  			}  		}  		else {  			quadsToRead = 10;  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 0;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 1;  		}  		else {  			quadsToRead = 9;  		}  	}  	else if (tmp == 1) {  		quadsToRead = 8;  	}  	else if (tmp == 2) {  		quadsToRead = 5;  	}  	else {  		tmp = br.ReadBits (2);  		if (tmp == 0) {  			quadsToRead = 2;  		}  		else if (tmp == 1) {  			quadsToRead = 4;  		}  		else if (tmp == 2) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 7;  			}  			else if (tmp == 1) {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 3;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 11;  					}  					else {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 6;  						}  						else {  							tmp = br.ReadBits (2);  							if (tmp == 0) {  								tmp = br.ReadBits (1);  								if (tmp == 0) {  									quadsToRead = 16;  								}  								else {  									quadsToRead = 15;  								}  							}  							else if (tmp == 1) {  								quadsToRead = 14;  							}  							else if (tmp == 2) {  								quadsToRead = 13;  							}  							else {  								quadsToRead = 12;  							}  						}  					}  				}  			}  		}  		else {  			quadsToRead = 10;  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 0;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 1;  		}  		else {  			quadsToRead = 9;  		}  	}  	else if (tmp == 1) {  		quadsToRead = 8;  	}  	else if (tmp == 2) {  		quadsToRead = 5;  	}  	else {  		tmp = br.ReadBits (2);  		if (tmp == 0) {  			quadsToRead = 2;  		}  		else if (tmp == 1) {  			quadsToRead = 4;  		}  		else if (tmp == 2) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 7;  			}  			else if (tmp == 1) {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 3;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 11;  					}  					else {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 6;  						}  						else {  							tmp = br.ReadBits (2);  							if (tmp == 0) {  								tmp = br.ReadBits (1);  								if (tmp == 0) {  									quadsToRead = 16;  								}  								else {  									quadsToRead = 15;  								}  							}  							else if (tmp == 1) {  								quadsToRead = 14;  							}  							else if (tmp == 2) {  								quadsToRead = 13;  							}  							else {  								quadsToRead = 12;  							}  						}  					}  				}  			}  		}  		else {  			quadsToRead = 10;  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 0;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 1;  		}  		else {  			quadsToRead = 9;  		}  	}  	else if (tmp == 1) {  		quadsToRead = 8;  	}  	else if (tmp == 2) {  		quadsToRead = 5;  	}  	else {  		tmp = br.ReadBits (2);  		if (tmp == 0) {  			quadsToRead = 2;  		}  		else if (tmp == 1) {  			quadsToRead = 4;  		}  		else if (tmp == 2) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 7;  			}  			else if (tmp == 1) {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 3;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 11;  					}  					else {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 6;  						}  						else {  							tmp = br.ReadBits (2);  							if (tmp == 0) {  								tmp = br.ReadBits (1);  								if (tmp == 0) {  									quadsToRead = 16;  								}  								else {  									quadsToRead = 15;  								}  							}  							else if (tmp == 1) {  								quadsToRead = 14;  							}  							else if (tmp == 2) {  								quadsToRead = 13;  							}  							else {  								quadsToRead = 12;  							}  						}  					}  				}  			}  		}  		else {  			quadsToRead = 10;  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 0;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 1;  		}  		else {  			quadsToRead = 9;  		}  	}  	else if (tmp == 1) {  		quadsToRead = 8;  	}  	else if (tmp == 2) {  		quadsToRead = 5;  	}  	else {  		tmp = br.ReadBits (2);  		if (tmp == 0) {  			quadsToRead = 2;  		}  		else if (tmp == 1) {  			quadsToRead = 4;  		}  		else if (tmp == 2) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 7;  			}  			else if (tmp == 1) {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 3;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 11;  					}  					else {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 6;  						}  						else {  							tmp = br.ReadBits (2);  							if (tmp == 0) {  								tmp = br.ReadBits (1);  								if (tmp == 0) {  									quadsToRead = 16;  								}  								else {  									quadsToRead = 15;  								}  							}  							else if (tmp == 1) {  								quadsToRead = 14;  							}  							else if (tmp == 2) {  								quadsToRead = 13;  							}  							else {  								quadsToRead = 12;  							}  						}  					}  				}  			}  		}  		else {  			quadsToRead = 10;  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: tmp = br.ReadBits (2);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 1;  	}  	else {  		quadsToRead = 9;  	}  }  else if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 1;  	}  	else {  		quadsToRead = 9;  	}  }  else if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 1;  	}  	else {  		quadsToRead = 9;  	}  }  else if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 1;  	}  	else {  		quadsToRead = 9;  	}  }  else if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 1;  	}  	else {  		quadsToRead = 9;  	}  }  else if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 1;  	}  	else {  		quadsToRead = 9;  	}  }  else if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 1;  	}  	else {  		quadsToRead = 9;  	}  }  else if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 1;  	}  	else {  		quadsToRead = 9;  	}  }  else if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 1;  	}  	else {  		quadsToRead = 9;  	}  }  else if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 1;  	}  	else {  		quadsToRead = 9;  	}  }  else if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 1;  	}  	else {  		quadsToRead = 9;  	}  }  else if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 1;  	}  	else {  		quadsToRead = 9;  	}  }  else if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 1;  	}  	else {  		quadsToRead = 9;  	}  }  else if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 1;  	}  	else {  		quadsToRead = 9;  	}  }  else if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 1;  	}  	else {  		quadsToRead = 9;  	}  }  else if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 1;  	}  	else {  		quadsToRead = 9;  	}  }  else if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 1;  	}  	else {  		quadsToRead = 9;  	}  }  else if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 1;  	}  	else {  		quadsToRead = 9;  	}  }  else if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 1;  	}  	else {  		quadsToRead = 9;  	}  }  else if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 1;  	}  	else {  		quadsToRead = 9;  	}  }  else if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 1;  }  else {  	quadsToRead = 9;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: quadsToRead = 9;  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 8;  }  else if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: quadsToRead = 8;  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	quadsToRead = 5;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		quadsToRead = 2;  	}  	else if (tmp == 1) {  		quadsToRead = 4;  	}  	else if (tmp == 2) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 7;  		}  		else if (tmp == 1) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 3;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 11;  				}  				else {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 6;  					}  					else {  						tmp = br.ReadBits (2);  						if (tmp == 0) {  							tmp = br.ReadBits (1);  							if (tmp == 0) {  								quadsToRead = 16;  							}  							else {  								quadsToRead = 15;  							}  						}  						else if (tmp == 1) {  							quadsToRead = 14;  						}  						else if (tmp == 2) {  							quadsToRead = 13;  						}  						else {  							quadsToRead = 12;  						}  					}  				}  			}  		}  	}  	else {  		quadsToRead = 10;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: quadsToRead = 5;  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: tmp = br.ReadBits (2);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 2;  }  else if (tmp == 1) {  	quadsToRead = 4;  }  else if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 2;  }  else if (tmp == 1) {  	quadsToRead = 4;  }  else if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 2;  }  else if (tmp == 1) {  	quadsToRead = 4;  }  else if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 2;  }  else if (tmp == 1) {  	quadsToRead = 4;  }  else if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 2;  }  else if (tmp == 1) {  	quadsToRead = 4;  }  else if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 2;  }  else if (tmp == 1) {  	quadsToRead = 4;  }  else if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 2;  }  else if (tmp == 1) {  	quadsToRead = 4;  }  else if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 2;  }  else if (tmp == 1) {  	quadsToRead = 4;  }  else if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 2;  }  else if (tmp == 1) {  	quadsToRead = 4;  }  else if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 2;  }  else if (tmp == 1) {  	quadsToRead = 4;  }  else if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 2;  }  else if (tmp == 1) {  	quadsToRead = 4;  }  else if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 2;  }  else if (tmp == 1) {  	quadsToRead = 4;  }  else if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 2;  }  else if (tmp == 1) {  	quadsToRead = 4;  }  else if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 2;  }  else if (tmp == 1) {  	quadsToRead = 4;  }  else if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 2;  }  else if (tmp == 1) {  	quadsToRead = 4;  }  else if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: quadsToRead = 2;  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 4;  }  else if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 4;  }  else if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 4;  }  else if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 4;  }  else if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 4;  }  else if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 4;  }  else if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 4;  }  else if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 4;  }  else if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 4;  }  else if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 4;  }  else if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 4;  }  else if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 4;  }  else if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 4;  }  else if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 4;  }  else if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: quadsToRead = 4;  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 7;  	}  	else if (tmp == 1) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 3;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 11;  			}  			else {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 6;  				}  				else {  					tmp = br.ReadBits (2);  					if (tmp == 0) {  						tmp = br.ReadBits (1);  						if (tmp == 0) {  							quadsToRead = 16;  						}  						else {  							quadsToRead = 15;  						}  					}  					else if (tmp == 1) {  						quadsToRead = 14;  					}  					else if (tmp == 2) {  						quadsToRead = 13;  					}  					else {  						quadsToRead = 12;  					}  				}  			}  		}  	}  }  else {  	quadsToRead = 10;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 7;  }  else if (tmp == 1) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 3;  	}  	else {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 11;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 6;  			}  			else {  				tmp = br.ReadBits (2);  				if (tmp == 0) {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 16;  					}  					else {  						quadsToRead = 15;  					}  				}  				else if (tmp == 1) {  					quadsToRead = 14;  				}  				else if (tmp == 2) {  					quadsToRead = 13;  				}  				else {  					quadsToRead = 12;  				}  			}  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 7;  }  else if (tmp == 1) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 3;  	}  	else {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 11;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 6;  			}  			else {  				tmp = br.ReadBits (2);  				if (tmp == 0) {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 16;  					}  					else {  						quadsToRead = 15;  					}  				}  				else if (tmp == 1) {  					quadsToRead = 14;  				}  				else if (tmp == 2) {  					quadsToRead = 13;  				}  				else {  					quadsToRead = 12;  				}  			}  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 7;  }  else if (tmp == 1) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 3;  	}  	else {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 11;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 6;  			}  			else {  				tmp = br.ReadBits (2);  				if (tmp == 0) {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 16;  					}  					else {  						quadsToRead = 15;  					}  				}  				else if (tmp == 1) {  					quadsToRead = 14;  				}  				else if (tmp == 2) {  					quadsToRead = 13;  				}  				else {  					quadsToRead = 12;  				}  			}  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 7;  }  else if (tmp == 1) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 3;  	}  	else {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 11;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 6;  			}  			else {  				tmp = br.ReadBits (2);  				if (tmp == 0) {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 16;  					}  					else {  						quadsToRead = 15;  					}  				}  				else if (tmp == 1) {  					quadsToRead = 14;  				}  				else if (tmp == 2) {  					quadsToRead = 13;  				}  				else {  					quadsToRead = 12;  				}  			}  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 7;  }  else if (tmp == 1) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 3;  	}  	else {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 11;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 6;  			}  			else {  				tmp = br.ReadBits (2);  				if (tmp == 0) {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 16;  					}  					else {  						quadsToRead = 15;  					}  				}  				else if (tmp == 1) {  					quadsToRead = 14;  				}  				else if (tmp == 2) {  					quadsToRead = 13;  				}  				else {  					quadsToRead = 12;  				}  			}  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 7;  }  else if (tmp == 1) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 3;  	}  	else {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 11;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 6;  			}  			else {  				tmp = br.ReadBits (2);  				if (tmp == 0) {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 16;  					}  					else {  						quadsToRead = 15;  					}  				}  				else if (tmp == 1) {  					quadsToRead = 14;  				}  				else if (tmp == 2) {  					quadsToRead = 13;  				}  				else {  					quadsToRead = 12;  				}  			}  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 7;  }  else if (tmp == 1) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 3;  	}  	else {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 11;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 6;  			}  			else {  				tmp = br.ReadBits (2);  				if (tmp == 0) {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 16;  					}  					else {  						quadsToRead = 15;  					}  				}  				else if (tmp == 1) {  					quadsToRead = 14;  				}  				else if (tmp == 2) {  					quadsToRead = 13;  				}  				else {  					quadsToRead = 12;  				}  			}  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 7;  }  else if (tmp == 1) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 3;  	}  	else {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 11;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 6;  			}  			else {  				tmp = br.ReadBits (2);  				if (tmp == 0) {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 16;  					}  					else {  						quadsToRead = 15;  					}  				}  				else if (tmp == 1) {  					quadsToRead = 14;  				}  				else if (tmp == 2) {  					quadsToRead = 13;  				}  				else {  					quadsToRead = 12;  				}  			}  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 7;  }  else if (tmp == 1) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 3;  	}  	else {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 11;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 6;  			}  			else {  				tmp = br.ReadBits (2);  				if (tmp == 0) {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 16;  					}  					else {  						quadsToRead = 15;  					}  				}  				else if (tmp == 1) {  					quadsToRead = 14;  				}  				else if (tmp == 2) {  					quadsToRead = 13;  				}  				else {  					quadsToRead = 12;  				}  			}  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 7;  }  else if (tmp == 1) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 3;  	}  	else {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 11;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 6;  			}  			else {  				tmp = br.ReadBits (2);  				if (tmp == 0) {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 16;  					}  					else {  						quadsToRead = 15;  					}  				}  				else if (tmp == 1) {  					quadsToRead = 14;  				}  				else if (tmp == 2) {  					quadsToRead = 13;  				}  				else {  					quadsToRead = 12;  				}  			}  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 7;  }  else if (tmp == 1) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 3;  	}  	else {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 11;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 6;  			}  			else {  				tmp = br.ReadBits (2);  				if (tmp == 0) {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 16;  					}  					else {  						quadsToRead = 15;  					}  				}  				else if (tmp == 1) {  					quadsToRead = 14;  				}  				else if (tmp == 2) {  					quadsToRead = 13;  				}  				else {  					quadsToRead = 12;  				}  			}  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: quadsToRead = 7;  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 3;  	}  	else {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 11;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 6;  			}  			else {  				tmp = br.ReadBits (2);  				if (tmp == 0) {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 16;  					}  					else {  						quadsToRead = 15;  					}  				}  				else if (tmp == 1) {  					quadsToRead = 14;  				}  				else if (tmp == 2) {  					quadsToRead = 13;  				}  				else {  					quadsToRead = 12;  				}  			}  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 3;  	}  	else {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 11;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 6;  			}  			else {  				tmp = br.ReadBits (2);  				if (tmp == 0) {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 16;  					}  					else {  						quadsToRead = 15;  					}  				}  				else if (tmp == 1) {  					quadsToRead = 14;  				}  				else if (tmp == 2) {  					quadsToRead = 13;  				}  				else {  					quadsToRead = 12;  				}  			}  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 3;  	}  	else {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 11;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 6;  			}  			else {  				tmp = br.ReadBits (2);  				if (tmp == 0) {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 16;  					}  					else {  						quadsToRead = 15;  					}  				}  				else if (tmp == 1) {  					quadsToRead = 14;  				}  				else if (tmp == 2) {  					quadsToRead = 13;  				}  				else {  					quadsToRead = 12;  				}  			}  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 3;  	}  	else {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 11;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 6;  			}  			else {  				tmp = br.ReadBits (2);  				if (tmp == 0) {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 16;  					}  					else {  						quadsToRead = 15;  					}  				}  				else if (tmp == 1) {  					quadsToRead = 14;  				}  				else if (tmp == 2) {  					quadsToRead = 13;  				}  				else {  					quadsToRead = 12;  				}  			}  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 3;  	}  	else {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 11;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 6;  			}  			else {  				tmp = br.ReadBits (2);  				if (tmp == 0) {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 16;  					}  					else {  						quadsToRead = 15;  					}  				}  				else if (tmp == 1) {  					quadsToRead = 14;  				}  				else if (tmp == 2) {  					quadsToRead = 13;  				}  				else {  					quadsToRead = 12;  				}  			}  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 3;  	}  	else {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 11;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 6;  			}  			else {  				tmp = br.ReadBits (2);  				if (tmp == 0) {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 16;  					}  					else {  						quadsToRead = 15;  					}  				}  				else if (tmp == 1) {  					quadsToRead = 14;  				}  				else if (tmp == 2) {  					quadsToRead = 13;  				}  				else {  					quadsToRead = 12;  				}  			}  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 3;  	}  	else {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 11;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 6;  			}  			else {  				tmp = br.ReadBits (2);  				if (tmp == 0) {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 16;  					}  					else {  						quadsToRead = 15;  					}  				}  				else if (tmp == 1) {  					quadsToRead = 14;  				}  				else if (tmp == 2) {  					quadsToRead = 13;  				}  				else {  					quadsToRead = 12;  				}  			}  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 3;  	}  	else {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 11;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 6;  			}  			else {  				tmp = br.ReadBits (2);  				if (tmp == 0) {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 16;  					}  					else {  						quadsToRead = 15;  					}  				}  				else if (tmp == 1) {  					quadsToRead = 14;  				}  				else if (tmp == 2) {  					quadsToRead = 13;  				}  				else {  					quadsToRead = 12;  				}  			}  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 3;  	}  	else {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 11;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 6;  			}  			else {  				tmp = br.ReadBits (2);  				if (tmp == 0) {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 16;  					}  					else {  						quadsToRead = 15;  					}  				}  				else if (tmp == 1) {  					quadsToRead = 14;  				}  				else if (tmp == 2) {  					quadsToRead = 13;  				}  				else {  					quadsToRead = 12;  				}  			}  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 3;  	}  	else {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 11;  		}  		else {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 6;  			}  			else {  				tmp = br.ReadBits (2);  				if (tmp == 0) {  					tmp = br.ReadBits (1);  					if (tmp == 0) {  						quadsToRead = 16;  					}  					else {  						quadsToRead = 15;  					}  				}  				else if (tmp == 1) {  					quadsToRead = 14;  				}  				else if (tmp == 2) {  					quadsToRead = 13;  				}  				else {  					quadsToRead = 12;  				}  			}  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 3;  }  else {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 11;  	}  	else {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 6;  		}  		else {  			tmp = br.ReadBits (2);  			if (tmp == 0) {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 16;  				}  				else {  					quadsToRead = 15;  				}  			}  			else if (tmp == 1) {  				quadsToRead = 14;  			}  			else if (tmp == 2) {  				quadsToRead = 13;  			}  			else {  				quadsToRead = 12;  			}  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 3;  }  else {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 11;  	}  	else {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 6;  		}  		else {  			tmp = br.ReadBits (2);  			if (tmp == 0) {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 16;  				}  				else {  					quadsToRead = 15;  				}  			}  			else if (tmp == 1) {  				quadsToRead = 14;  			}  			else if (tmp == 2) {  				quadsToRead = 13;  			}  			else {  				quadsToRead = 12;  			}  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 3;  }  else {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 11;  	}  	else {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 6;  		}  		else {  			tmp = br.ReadBits (2);  			if (tmp == 0) {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 16;  				}  				else {  					quadsToRead = 15;  				}  			}  			else if (tmp == 1) {  				quadsToRead = 14;  			}  			else if (tmp == 2) {  				quadsToRead = 13;  			}  			else {  				quadsToRead = 12;  			}  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 3;  }  else {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 11;  	}  	else {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 6;  		}  		else {  			tmp = br.ReadBits (2);  			if (tmp == 0) {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 16;  				}  				else {  					quadsToRead = 15;  				}  			}  			else if (tmp == 1) {  				quadsToRead = 14;  			}  			else if (tmp == 2) {  				quadsToRead = 13;  			}  			else {  				quadsToRead = 12;  			}  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 3;  }  else {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 11;  	}  	else {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 6;  		}  		else {  			tmp = br.ReadBits (2);  			if (tmp == 0) {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 16;  				}  				else {  					quadsToRead = 15;  				}  			}  			else if (tmp == 1) {  				quadsToRead = 14;  			}  			else if (tmp == 2) {  				quadsToRead = 13;  			}  			else {  				quadsToRead = 12;  			}  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 3;  }  else {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 11;  	}  	else {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 6;  		}  		else {  			tmp = br.ReadBits (2);  			if (tmp == 0) {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 16;  				}  				else {  					quadsToRead = 15;  				}  			}  			else if (tmp == 1) {  				quadsToRead = 14;  			}  			else if (tmp == 2) {  				quadsToRead = 13;  			}  			else {  				quadsToRead = 12;  			}  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 3;  }  else {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 11;  	}  	else {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 6;  		}  		else {  			tmp = br.ReadBits (2);  			if (tmp == 0) {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 16;  				}  				else {  					quadsToRead = 15;  				}  			}  			else if (tmp == 1) {  				quadsToRead = 14;  			}  			else if (tmp == 2) {  				quadsToRead = 13;  			}  			else {  				quadsToRead = 12;  			}  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 3;  }  else {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 11;  	}  	else {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 6;  		}  		else {  			tmp = br.ReadBits (2);  			if (tmp == 0) {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 16;  				}  				else {  					quadsToRead = 15;  				}  			}  			else if (tmp == 1) {  				quadsToRead = 14;  			}  			else if (tmp == 2) {  				quadsToRead = 13;  			}  			else {  				quadsToRead = 12;  			}  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 3;  }  else {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 11;  	}  	else {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 6;  		}  		else {  			tmp = br.ReadBits (2);  			if (tmp == 0) {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 16;  				}  				else {  					quadsToRead = 15;  				}  			}  			else if (tmp == 1) {  				quadsToRead = 14;  			}  			else if (tmp == 2) {  				quadsToRead = 13;  			}  			else {  				quadsToRead = 12;  			}  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 3;  }  else {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 11;  	}  	else {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 6;  		}  		else {  			tmp = br.ReadBits (2);  			if (tmp == 0) {  				tmp = br.ReadBits (1);  				if (tmp == 0) {  					quadsToRead = 16;  				}  				else {  					quadsToRead = 15;  				}  			}  			else if (tmp == 1) {  				quadsToRead = 14;  			}  			else if (tmp == 2) {  				quadsToRead = 13;  			}  			else {  				quadsToRead = 12;  			}  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: quadsToRead = 3;  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 11;  }  else {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 6;  	}  	else {  		tmp = br.ReadBits (2);  		if (tmp == 0) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 16;  			}  			else {  				quadsToRead = 15;  			}  		}  		else if (tmp == 1) {  			quadsToRead = 14;  		}  		else if (tmp == 2) {  			quadsToRead = 13;  		}  		else {  			quadsToRead = 12;  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 11;  }  else {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 6;  	}  	else {  		tmp = br.ReadBits (2);  		if (tmp == 0) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 16;  			}  			else {  				quadsToRead = 15;  			}  		}  		else if (tmp == 1) {  			quadsToRead = 14;  		}  		else if (tmp == 2) {  			quadsToRead = 13;  		}  		else {  			quadsToRead = 12;  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 11;  }  else {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 6;  	}  	else {  		tmp = br.ReadBits (2);  		if (tmp == 0) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 16;  			}  			else {  				quadsToRead = 15;  			}  		}  		else if (tmp == 1) {  			quadsToRead = 14;  		}  		else if (tmp == 2) {  			quadsToRead = 13;  		}  		else {  			quadsToRead = 12;  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 11;  }  else {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 6;  	}  	else {  		tmp = br.ReadBits (2);  		if (tmp == 0) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 16;  			}  			else {  				quadsToRead = 15;  			}  		}  		else if (tmp == 1) {  			quadsToRead = 14;  		}  		else if (tmp == 2) {  			quadsToRead = 13;  		}  		else {  			quadsToRead = 12;  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 11;  }  else {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 6;  	}  	else {  		tmp = br.ReadBits (2);  		if (tmp == 0) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 16;  			}  			else {  				quadsToRead = 15;  			}  		}  		else if (tmp == 1) {  			quadsToRead = 14;  		}  		else if (tmp == 2) {  			quadsToRead = 13;  		}  		else {  			quadsToRead = 12;  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 11;  }  else {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 6;  	}  	else {  		tmp = br.ReadBits (2);  		if (tmp == 0) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 16;  			}  			else {  				quadsToRead = 15;  			}  		}  		else if (tmp == 1) {  			quadsToRead = 14;  		}  		else if (tmp == 2) {  			quadsToRead = 13;  		}  		else {  			quadsToRead = 12;  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 11;  }  else {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 6;  	}  	else {  		tmp = br.ReadBits (2);  		if (tmp == 0) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 16;  			}  			else {  				quadsToRead = 15;  			}  		}  		else if (tmp == 1) {  			quadsToRead = 14;  		}  		else if (tmp == 2) {  			quadsToRead = 13;  		}  		else {  			quadsToRead = 12;  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 11;  }  else {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 6;  	}  	else {  		tmp = br.ReadBits (2);  		if (tmp == 0) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 16;  			}  			else {  				quadsToRead = 15;  			}  		}  		else if (tmp == 1) {  			quadsToRead = 14;  		}  		else if (tmp == 2) {  			quadsToRead = 13;  		}  		else {  			quadsToRead = 12;  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 11;  }  else {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 6;  	}  	else {  		tmp = br.ReadBits (2);  		if (tmp == 0) {  			tmp = br.ReadBits (1);  			if (tmp == 0) {  				quadsToRead = 16;  			}  			else {  				quadsToRead = 15;  			}  		}  		else if (tmp == 1) {  			quadsToRead = 14;  		}  		else if (tmp == 2) {  			quadsToRead = 13;  		}  		else {  			quadsToRead = 12;  		}  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: quadsToRead = 11;  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 6;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 16;  		}  		else {  			quadsToRead = 15;  		}  	}  	else if (tmp == 1) {  		quadsToRead = 14;  	}  	else if (tmp == 2) {  		quadsToRead = 13;  	}  	else {  		quadsToRead = 12;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 6;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 16;  		}  		else {  			quadsToRead = 15;  		}  	}  	else if (tmp == 1) {  		quadsToRead = 14;  	}  	else if (tmp == 2) {  		quadsToRead = 13;  	}  	else {  		quadsToRead = 12;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 6;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 16;  		}  		else {  			quadsToRead = 15;  		}  	}  	else if (tmp == 1) {  		quadsToRead = 14;  	}  	else if (tmp == 2) {  		quadsToRead = 13;  	}  	else {  		quadsToRead = 12;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 6;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 16;  		}  		else {  			quadsToRead = 15;  		}  	}  	else if (tmp == 1) {  		quadsToRead = 14;  	}  	else if (tmp == 2) {  		quadsToRead = 13;  	}  	else {  		quadsToRead = 12;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 6;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 16;  		}  		else {  			quadsToRead = 15;  		}  	}  	else if (tmp == 1) {  		quadsToRead = 14;  	}  	else if (tmp == 2) {  		quadsToRead = 13;  	}  	else {  		quadsToRead = 12;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 6;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 16;  		}  		else {  			quadsToRead = 15;  		}  	}  	else if (tmp == 1) {  		quadsToRead = 14;  	}  	else if (tmp == 2) {  		quadsToRead = 13;  	}  	else {  		quadsToRead = 12;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 6;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 16;  		}  		else {  			quadsToRead = 15;  		}  	}  	else if (tmp == 1) {  		quadsToRead = 14;  	}  	else if (tmp == 2) {  		quadsToRead = 13;  	}  	else {  		quadsToRead = 12;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 6;  }  else {  	tmp = br.ReadBits (2);  	if (tmp == 0) {  		tmp = br.ReadBits (1);  		if (tmp == 0) {  			quadsToRead = 16;  		}  		else {  			quadsToRead = 15;  		}  	}  	else if (tmp == 1) {  		quadsToRead = 14;  	}  	else if (tmp == 2) {  		quadsToRead = 13;  	}  	else {  		quadsToRead = 12;  	}  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: quadsToRead = 6;  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: tmp = br.ReadBits (2);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 16;  	}  	else {  		quadsToRead = 15;  	}  }  else if (tmp == 1) {  	quadsToRead = 14;  }  else if (tmp == 2) {  	quadsToRead = 13;  }  else {  	quadsToRead = 12;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 16;  	}  	else {  		quadsToRead = 15;  	}  }  else if (tmp == 1) {  	quadsToRead = 14;  }  else if (tmp == 2) {  	quadsToRead = 13;  }  else {  	quadsToRead = 12;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 16;  	}  	else {  		quadsToRead = 15;  	}  }  else if (tmp == 1) {  	quadsToRead = 14;  }  else if (tmp == 2) {  	quadsToRead = 13;  }  else {  	quadsToRead = 12;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 16;  	}  	else {  		quadsToRead = 15;  	}  }  else if (tmp == 1) {  	quadsToRead = 14;  }  else if (tmp == 2) {  	quadsToRead = 13;  }  else {  	quadsToRead = 12;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 16;  	}  	else {  		quadsToRead = 15;  	}  }  else if (tmp == 1) {  	quadsToRead = 14;  }  else if (tmp == 2) {  	quadsToRead = 13;  }  else {  	quadsToRead = 12;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	tmp = br.ReadBits (1);  	if (tmp == 0) {  		quadsToRead = 16;  	}  	else {  		quadsToRead = 15;  	}  }  else if (tmp == 1) {  	quadsToRead = 14;  }  else if (tmp == 2) {  	quadsToRead = 13;  }  else {  	quadsToRead = 12;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 16;  }  else {  	quadsToRead = 15;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 0) {  	quadsToRead = 16;  }  else {  	quadsToRead = 15;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: quadsToRead = 16;  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: quadsToRead = 15;  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 14;  }  else if (tmp == 2) {  	quadsToRead = 13;  }  else {  	quadsToRead = 12;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 14;  }  else if (tmp == 2) {  	quadsToRead = 13;  }  else {  	quadsToRead = 12;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 14;  }  else if (tmp == 2) {  	quadsToRead = 13;  }  else {  	quadsToRead = 12;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 1) {  	quadsToRead = 14;  }  else if (tmp == 2) {  	quadsToRead = 13;  }  else {  	quadsToRead = 12;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: quadsToRead = 14;  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	quadsToRead = 13;  }  else {  	quadsToRead = 12;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	quadsToRead = 13;  }  else {  	quadsToRead = 12;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: if (tmp == 2) {  	quadsToRead = 13;  }  else {  	quadsToRead = 12;  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: quadsToRead = 13;  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: quadsToRead = 12;  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: quadsToRead = 10;  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,ReadNumber,The following statement contains a magic number: return (long)br.ReadBits (4 * quadsToRead);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1) {  	bw.WriteBits (0' 1);  }  else if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16) {  	bw.WriteBits (128 + number' 8);  }  else if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (128 + number' 8);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (128 + number' 8);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 256) {  	bw.WriteBits (7168 + number' 13);  }  else if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (7168 + number' 13);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (7168 + number' 13);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4096) {  	bw.WriteBits (499712 + number' 19);  }  else if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (499712 + number' 19);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (499712 + number' 19);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 65536) {  	bw.WriteBits (1900544 + number' 21);  }  else if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (1900544 + number' 21);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (1900544 + number' 21);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1048576) {  	bw.WriteBits (6291456 + number' 23);  }  else if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (6291456 + number' 23);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (6291456 + number' 23);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 16777216) {  	bw.WriteBits (8287944704 + number' 33);  }  else if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (8287944704 + number' 33);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (8287944704 + number' 33);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 268435456) {  	bw.WriteBits (16106127360 + number' 34);  }  else if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (16106127360 + number' 34);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (16106127360 + number' 34);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4294967296) {  	bw.WriteBits (21474836480 + number' 35);  }  else if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (21474836480 + number' 35);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (21474836480 + number' 35);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 68719476736) {  	bw.WriteBits (618475290624 + number' 40);  }  else if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (618475290624 + number' 40);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (618475290624 + number' 40);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1099511627776) {  	bw.WriteBits (34084860461056 + number' 45);  }  else if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (34084860461056 + number' 45);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (34084860461056 + number' 45);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 17592186044416) {  	bw.WriteBits (4327677766926336 + number' 52);  }  else if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (4327677766926336 + number' 52);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (4327677766926336 + number' 52);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 281474976710656) {  	bw.WriteBits (558164878817230848 + number' 59);  }  else if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (558164878817230848 + number' 59);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (558164878817230848 + number' 59);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 4503599627370496) {  	bw.WriteBits (8926134461448323072 + number' 63);  }  else if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (8926134461448323072 + number' 63);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (8926134461448323072 + number' 63);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 72057594037927936) {  	bw.WriteBits (1981' 11);  	bw.WriteBits (number' 56);  }  else if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (1981' 11);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (1981' 11);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (number' 56);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: if (number < 1152921504606846976) {  	bw.WriteBits (3961' 12);  	bw.WriteBits (number' 60);  }  else {  	bw.WriteBits (3960' 12);  	bw.WriteBits (number' 64);  }  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (3961' 12);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (3961' 12);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (number' 60);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (3960' 12);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (3960' 12);  
Magic Number,breinstormin.profiler,Helpers,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Helpers.cs,WriteNumber,The following statement contains a magic number: bw.WriteBits (number' 64);  
Magic Number,breinstormin.profiler,NamedManualResetEvent,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\NamedManualResetEvent.cs,NamedManualResetEvent,The following statement contains a magic number: sa.nLength = 12;  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,FormatAddress,The following statement contains a magic number: if (addr > uint.MaxValue)  	return string.Format ("{0:X2}.{1:X4}.{2:X4}"' addr >> 32' (addr >> 16) & 0xffff' addr & 0xffff);  else  	return string.Format ("{0:X4}.{1:X4}"' (addr >> 16) & 0xffff' addr & 0xffff);  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,FormatAddress,The following statement contains a magic number: if (addr > uint.MaxValue)  	return string.Format ("{0:X2}.{1:X4}.{2:X4}"' addr >> 32' (addr >> 16) & 0xffff' addr & 0xffff);  else  	return string.Format ("{0:X4}.{1:X4}"' (addr >> 16) & 0xffff' addr & 0xffff);  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,FormatAddress,The following statement contains a magic number: if (addr > uint.MaxValue)  	return string.Format ("{0:X2}.{1:X4}.{2:X4}"' addr >> 32' (addr >> 16) & 0xffff' addr & 0xffff);  else  	return string.Format ("{0:X4}.{1:X4}"' (addr >> 16) & 0xffff' addr & 0xffff);  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,FormatAddress,The following statement contains a magic number: return string.Format ("{0:X2}.{1:X4}.{2:X4}"' addr >> 32' (addr >> 16) & 0xffff' addr & 0xffff);  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,FormatAddress,The following statement contains a magic number: return string.Format ("{0:X2}.{1:X4}.{2:X4}"' addr >> 32' (addr >> 16) & 0xffff' addr & 0xffff);  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,FormatAddress,The following statement contains a magic number: return string.Format ("{0:X4}.{1:X4}"' (addr >> 16) & 0xffff' addr & 0xffff);  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,SignatureOfObject,The following statement contains a magic number: if (gcObject.parent != null) {  	switch (options) {  	case BuildTypeGraphOptions.IndividualObjects:  		if (gcObject.Type (this).name == "Stack" || gcObject.Type (this).name.StartsWith ("Stack' ")) {  			if (id < (ulong)readNewLog.funcName.Length)  				sb.AppendFormat (readNewLog.funcName [id] + "  " + readNewLog.funcSignature [id]);  			else  				sb.AppendFormat ("Function id = {0}"' id);  		}  		else  			sb.AppendFormat ("Address = {0}' size = {1:n0} bytes"' FormatAddress (id)' gcObject.Size (this));  		break;  	case BuildTypeGraphOptions.LumpBySignature:  		sb.Append (gcObject.parent.Type (this).name);  		sb.Append ("->");  		sb.Append (gcObject.Type (this).name);  		List<GcObject> references = new List<GcObject> ();  		foreach (GcObject refObject in gcObject.References) {  			references.Add (refObject);  		}  		if (references.Count > 0) {  			sb.Append ("->(");  			const int MAXREFTYPECOUNT = 3;  			List<string> typeNameList = new List<string> (MAXREFTYPECOUNT);  			string separator = "";  			int refTypeCount = 0;  			for (int i = 0; i < references.Count; i++) {  				GcObject refObject = references [i];  				GcType refType = refObject.Type (this);  				if (typeHintTable [refType.index] < i && references [typeHintTable [refType.index]].Type (this) == refType) {  					;  					// we already found this type - ignore further occurrences  				}  				else {  					typeHintTable [refType.index] = i;  					refTypeCount++;  					if (refTypeCount <= MAXREFTYPECOUNT) {  						typeNameList.Add (refType.name);  					}  					else {  						break;  					}  				}  				i++;  			}  			typeNameList.Sort ();  			foreach (string typeName in typeNameList) {  				sb.Append (separator);  				separator = "'";  				sb.Append (typeName);  			}  			if (refTypeCount > MAXREFTYPECOUNT)  				sb.Append ("'...");  			sb.Append (")");  		}  		break;  	default:  		Debug.Assert (false);  		break;  	}  }  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,SignatureOfObject,The following statement contains a magic number: switch (options) {  case BuildTypeGraphOptions.IndividualObjects:  	if (gcObject.Type (this).name == "Stack" || gcObject.Type (this).name.StartsWith ("Stack' ")) {  		if (id < (ulong)readNewLog.funcName.Length)  			sb.AppendFormat (readNewLog.funcName [id] + "  " + readNewLog.funcSignature [id]);  		else  			sb.AppendFormat ("Function id = {0}"' id);  	}  	else  		sb.AppendFormat ("Address = {0}' size = {1:n0} bytes"' FormatAddress (id)' gcObject.Size (this));  	break;  case BuildTypeGraphOptions.LumpBySignature:  	sb.Append (gcObject.parent.Type (this).name);  	sb.Append ("->");  	sb.Append (gcObject.Type (this).name);  	List<GcObject> references = new List<GcObject> ();  	foreach (GcObject refObject in gcObject.References) {  		references.Add (refObject);  	}  	if (references.Count > 0) {  		sb.Append ("->(");  		const int MAXREFTYPECOUNT = 3;  		List<string> typeNameList = new List<string> (MAXREFTYPECOUNT);  		string separator = "";  		int refTypeCount = 0;  		for (int i = 0; i < references.Count; i++) {  			GcObject refObject = references [i];  			GcType refType = refObject.Type (this);  			if (typeHintTable [refType.index] < i && references [typeHintTable [refType.index]].Type (this) == refType) {  				;  				// we already found this type - ignore further occurrences  			}  			else {  				typeHintTable [refType.index] = i;  				refTypeCount++;  				if (refTypeCount <= MAXREFTYPECOUNT) {  					typeNameList.Add (refType.name);  				}  				else {  					break;  				}  			}  			i++;  		}  		typeNameList.Sort ();  		foreach (string typeName in typeNameList) {  			sb.Append (separator);  			separator = "'";  			sb.Append (typeName);  		}  		if (refTypeCount > MAXREFTYPECOUNT)  			sb.Append ("'...");  		sb.Append (")");  	}  	break;  default:  	Debug.Assert (false);  	break;  }  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,SignatureOfObject,The following statement contains a magic number: if (references.Count > 0) {  	sb.Append ("->(");  	const int MAXREFTYPECOUNT = 3;  	List<string> typeNameList = new List<string> (MAXREFTYPECOUNT);  	string separator = "";  	int refTypeCount = 0;  	for (int i = 0; i < references.Count; i++) {  		GcObject refObject = references [i];  		GcType refType = refObject.Type (this);  		if (typeHintTable [refType.index] < i && references [typeHintTable [refType.index]].Type (this) == refType) {  			;  			// we already found this type - ignore further occurrences  		}  		else {  			typeHintTable [refType.index] = i;  			refTypeCount++;  			if (refTypeCount <= MAXREFTYPECOUNT) {  				typeNameList.Add (refType.name);  			}  			else {  				break;  			}  		}  		i++;  	}  	typeNameList.Sort ();  	foreach (string typeName in typeNameList) {  		sb.Append (separator);  		separator = "'";  		sb.Append (typeName);  	}  	if (refTypeCount > MAXREFTYPECOUNT)  		sb.Append ("'...");  	sb.Append (")");  }  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,BuildTypeGraph,The following statement contains a magic number: foreach (GcObject gcObject in idToObject.Values) {  	if (gcObject.parent == null || (gcObject.InterestLevel & (InterestLevel.Interesting | InterestLevel.Display)) == InterestLevel.Ignore || gcObject.AllocTickIndex <= allocatedAfterTickIndex || gcObject.AllocTickIndex >= allocatedBeforeTickIndex) {  		continue;  	}  	int levels = 0;  	for (GcObject pathObject = gcObject; pathObject != null; pathObject = pathObject.parent) {  		if (pathObject.vertex != null)  			levels++;  	}  	while (pathFromRoot.Length < levels + 1) {  		pathFromRoot = new Vertex[pathFromRoot.Length * 2];  	}  	int level = levels;  	for (GcObject pathObject = gcObject; pathObject != null; pathObject = pathObject.parent) {  		if (pathObject.vertex != null) {  			level--;  			pathFromRoot [level] = pathObject.vertex;  		}  	}  	levels = Vertex.SqueezeOutRepetitions (pathFromRoot' levels);  	for (int j = 0; j < levels - 1; j++) {  		Vertex fromVertex = pathFromRoot [j];  		Vertex toVertex = pathFromRoot [j + 1];  		Edge edge = graph.FindOrCreateEdge (fromVertex' toVertex);  		edge.AddWeight (gcObject.Size (this));  	}  	Vertex thisVertex = pathFromRoot [levels - 1];  	thisVertex.basicWeight += gcObject.Size (this);  	thisVertex.count += 1;  }  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,BuildTypeGraph,The following statement contains a magic number: while (pathFromRoot.Length < levels + 1) {  	pathFromRoot = new Vertex[pathFromRoot.Length * 2];  }  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,BuildTypeGraph,The following statement contains a magic number: pathFromRoot = new Vertex[pathFromRoot.Length * 2];  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,PrintStackTrace,The following statement contains a magic number: if ((path != null) && (path.Length > 0)) {  	GcObject tempGcObject = idToObject [path [path.Length - 1]];  	Console.WriteLine ("<!-- ");  	int[] stacktrace = readNewLog.stacktraceTable.IndexToStacktrace (tempGcObject.TypeSizeStackTraceId);  	for (int i = stacktrace.Length - 1; i >= 2; i--)  		System.Console.WriteLine ("{0} <-"' readNewLog.funcName [stacktrace [i]]);  	Console.WriteLine ("-->");  }  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,PrintStackTrace,The following statement contains a magic number: for (int i = stacktrace.Length - 1; i >= 2; i--)  	System.Console.WriteLine ("{0} <-"' readNewLog.funcName [stacktrace [i]]);  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,WriteVertexPaths,The following statement contains a magic number: foreach (GcObject gcObject in idToObject.Values) {  	if (gcObject.Type (this).name.CompareTo (typeName) != 0) {  		continue;  	}  	if (gcObject.AllocTickIndex <= allocatedAfterTickIndex || gcObject.AllocTickIndex >= allocatedBeforeTickIndex) {  		continue;  	}  	ulong[][] _idsFromRoot = idsFromRoot;  	if (_idsFromRoot.Length <= counter) {  		idsFromRoot = new ulong[counter + 1][];  		for (int i = 0; i < _idsFromRoot.Length; i++)  			idsFromRoot [i] = _idsFromRoot [i];  	}  	int levels = 0;  	for (GcObject pathObject = gcObject; pathObject != null; pathObject = pathObject.parent) {  		if (pathObject.vertex != null)  			levels++;  	}  	while (pathFromRoot.Length < levels + 1) {  		pathFromRoot = new Vertex[pathFromRoot.Length * 2];  	}  	int level = levels;  	//System.Console.WriteLine("{0} -- {1}:"' counter' gcObject.id);  	for (GcObject pathObject = gcObject; pathObject != null; pathObject = pathObject.parent) {  		if (pathObject.vertex != null) {  			level--;  			pathFromRoot [level] = pathObject.vertex;  			pathObject.vertex.id = 0;  			objectToId.TryGetValue (pathObject' out pathObject.vertex.id);  		}  	}  	levels = Vertex.SqueezeOutRepetitions (pathFromRoot' levels);  	idsFromRoot [counter] = new ulong[levels];  	for (int i = 0; i < levels; i++) {  		//System.Console.Write("{0}' {1} ->"' pathFromRoot[i].name' pathFromRoot[i].id);  		idsFromRoot [counter] [i] = pathFromRoot [i].id;  	}  	//System.Console.WriteLine("---------------------------------------");  	counter++;  }  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,WriteVertexPaths,The following statement contains a magic number: while (pathFromRoot.Length < levels + 1) {  	pathFromRoot = new Vertex[pathFromRoot.Length * 2];  }  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,WriteVertexPaths,The following statement contains a magic number: pathFromRoot = new Vertex[pathFromRoot.Length * 2];  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,WriteVertexPaths,The following statement contains a magic number: for (int j = 1; j < idsFromRoot.Length; j++) {  	for (int i = 0; i < idsFromRoot [0].Length; i++) {  		if ((i > idsFromRoot [j].Length) || ((i < idsFromRoot [j].Length) && (idsFromRoot [0] [i] != idsFromRoot [j] [i]))) {  			if (i < idsFromRoot [0].Length - 1) {  				mismatchedObjects.Add (j);  			}  			GcObject temp = idToObject [idsFromRoot [0] [i - 1]];  			if (temp != null) {  				if (!differentCulprits.Contains (temp.Type (this).name)) {  					differentCulprits.Add (temp.Type (this).name);  					if (differentCulprits.Count <= 5)  						System.Console.WriteLine ("<CulPrit><!--{0}--></CulPrit>"' temp.Type (this).name);  				}  			}  			break;  		}  	}  }  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,WriteVertexPaths,The following statement contains a magic number: for (int i = 0; i < idsFromRoot [0].Length; i++) {  	if ((i > idsFromRoot [j].Length) || ((i < idsFromRoot [j].Length) && (idsFromRoot [0] [i] != idsFromRoot [j] [i]))) {  		if (i < idsFromRoot [0].Length - 1) {  			mismatchedObjects.Add (j);  		}  		GcObject temp = idToObject [idsFromRoot [0] [i - 1]];  		if (temp != null) {  			if (!differentCulprits.Contains (temp.Type (this).name)) {  				differentCulprits.Add (temp.Type (this).name);  				if (differentCulprits.Count <= 5)  					System.Console.WriteLine ("<CulPrit><!--{0}--></CulPrit>"' temp.Type (this).name);  			}  		}  		break;  	}  }  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,WriteVertexPaths,The following statement contains a magic number: if ((i > idsFromRoot [j].Length) || ((i < idsFromRoot [j].Length) && (idsFromRoot [0] [i] != idsFromRoot [j] [i]))) {  	if (i < idsFromRoot [0].Length - 1) {  		mismatchedObjects.Add (j);  	}  	GcObject temp = idToObject [idsFromRoot [0] [i - 1]];  	if (temp != null) {  		if (!differentCulprits.Contains (temp.Type (this).name)) {  			differentCulprits.Add (temp.Type (this).name);  			if (differentCulprits.Count <= 5)  				System.Console.WriteLine ("<CulPrit><!--{0}--></CulPrit>"' temp.Type (this).name);  		}  	}  	break;  }  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,WriteVertexPaths,The following statement contains a magic number: if (temp != null) {  	if (!differentCulprits.Contains (temp.Type (this).name)) {  		differentCulprits.Add (temp.Type (this).name);  		if (differentCulprits.Count <= 5)  			System.Console.WriteLine ("<CulPrit><!--{0}--></CulPrit>"' temp.Type (this).name);  	}  }  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,WriteVertexPaths,The following statement contains a magic number: if (!differentCulprits.Contains (temp.Type (this).name)) {  	differentCulprits.Add (temp.Type (this).name);  	if (differentCulprits.Count <= 5)  		System.Console.WriteLine ("<CulPrit><!--{0}--></CulPrit>"' temp.Type (this).name);  }  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,WriteVertexPaths,The following statement contains a magic number: if (differentCulprits.Count <= 5)  	System.Console.WriteLine ("<CulPrit><!--{0}--></CulPrit>"' temp.Type (this).name);  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,WriteVertexPaths,The following statement contains a magic number: if (mismatchedObjects.Count > 0) {  	Console.WriteLine ();  	int limit = (mismatchedObjects.Count > 5) ? 5 : mismatchedObjects.Count;  	for (int i = 0; i < limit; i++) {  		Console.WriteLine ("<Object>");  		PrintGCRoot (idsFromRoot [(int)mismatchedObjects [i]]);  		PrintStackTrace (idsFromRoot [(int)mismatchedObjects [i]]);  		Console.WriteLine ("</Object>");  	}  }  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,WriteVertexPaths,The following statement contains a magic number: if (mismatchedObjects.Count > 0) {  	Console.WriteLine ();  	int limit = (mismatchedObjects.Count > 5) ? 5 : mismatchedObjects.Count;  	for (int i = 0; i < limit; i++) {  		Console.WriteLine ("<Object>");  		PrintGCRoot (idsFromRoot [(int)mismatchedObjects [i]]);  		PrintStackTrace (idsFromRoot [(int)mismatchedObjects [i]]);  		Console.WriteLine ("</Object>");  	}  }  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,BuildReferenceGraph,The following statement contains a magic number: while (queue.Count != 0) {  	GcObject head = queue.Dequeue ();  	foreach (GcObject refObject in head.References) {  		if (refObject.parent == null || refObject.parent == foundBeforeMarker) {  			// this is a reference to either one of the "selected" objects  			// or just to a new object  			if (refObject.vertex != null && refObject.vertex.selected && (refObject.InterestLevel & (InterestLevel.Interesting | InterestLevel.Display)) != InterestLevel.Ignore && refObject.AllocTickIndex > orgGraph.allocatedAfterTickIndex && refObject.AllocTickIndex < orgGraph.allocatedBeforeTickIndex) {  				// add <root> -> ... -> head -> refObject to the reference graph  				int levels = 0;  				for (GcObject pathObject = head; pathObject != null; pathObject = pathObject.parent)  					levels++;  				while (pathFromRoot.Length < levels + 2) {  					pathFromRoot = new Vertex[pathFromRoot.Length * 2];  				}  				pathFromRoot [levels + 1] = graph.FindOrCreateVertex (refObject.vertex.name' refObject.vertex.signature' refObject.vertex.moduleName);  				int level = levels;  				for (GcObject pathObject = head; pathObject != null; pathObject = pathObject.parent) {  					if ((pathObject.InterestLevel & (InterestLevel.Interesting | InterestLevel.Display)) == InterestLevel.Ignore || pathObject.vertex == null)  						pathFromRoot [level] = null;  					else  						pathFromRoot [level] = graph.FindOrCreateVertex (pathObject.vertex.name' pathObject.vertex.signature' pathObject.vertex.moduleName);  					level--;  				}  				int nonZeroLevels = 0;  				for (int j = 0; j <= levels + 1; j++) {  					if (pathFromRoot [j] != null)  						pathFromRoot [nonZeroLevels++] = pathFromRoot [j];  				}  				levels = Vertex.SqueezeOutRepetitions (pathFromRoot' nonZeroLevels);  				for (int j = 0; j < levels - 1; j++) {  					Vertex fromVertex = pathFromRoot [j];  					Vertex toVertex = pathFromRoot [j + 1];  					Edge edge = graph.FindOrCreateEdge (fromVertex' toVertex);  					edge.AddWeight (1);  				}  				Vertex thisVertex = pathFromRoot [levels - 1];  				thisVertex.basicWeight += 1;  				if (refObject.parent == null) {  					thisVertex.count += 1;  					refObject.parent = foundBeforeMarker;  				}  			}  			else {  				refObject.parent = head;  				queue.Enqueue (refObject);  			}  		}  	}  }  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,BuildReferenceGraph,The following statement contains a magic number: while (queue.Count != 0) {  	GcObject head = queue.Dequeue ();  	foreach (GcObject refObject in head.References) {  		if (refObject.parent == null || refObject.parent == foundBeforeMarker) {  			// this is a reference to either one of the "selected" objects  			// or just to a new object  			if (refObject.vertex != null && refObject.vertex.selected && (refObject.InterestLevel & (InterestLevel.Interesting | InterestLevel.Display)) != InterestLevel.Ignore && refObject.AllocTickIndex > orgGraph.allocatedAfterTickIndex && refObject.AllocTickIndex < orgGraph.allocatedBeforeTickIndex) {  				// add <root> -> ... -> head -> refObject to the reference graph  				int levels = 0;  				for (GcObject pathObject = head; pathObject != null; pathObject = pathObject.parent)  					levels++;  				while (pathFromRoot.Length < levels + 2) {  					pathFromRoot = new Vertex[pathFromRoot.Length * 2];  				}  				pathFromRoot [levels + 1] = graph.FindOrCreateVertex (refObject.vertex.name' refObject.vertex.signature' refObject.vertex.moduleName);  				int level = levels;  				for (GcObject pathObject = head; pathObject != null; pathObject = pathObject.parent) {  					if ((pathObject.InterestLevel & (InterestLevel.Interesting | InterestLevel.Display)) == InterestLevel.Ignore || pathObject.vertex == null)  						pathFromRoot [level] = null;  					else  						pathFromRoot [level] = graph.FindOrCreateVertex (pathObject.vertex.name' pathObject.vertex.signature' pathObject.vertex.moduleName);  					level--;  				}  				int nonZeroLevels = 0;  				for (int j = 0; j <= levels + 1; j++) {  					if (pathFromRoot [j] != null)  						pathFromRoot [nonZeroLevels++] = pathFromRoot [j];  				}  				levels = Vertex.SqueezeOutRepetitions (pathFromRoot' nonZeroLevels);  				for (int j = 0; j < levels - 1; j++) {  					Vertex fromVertex = pathFromRoot [j];  					Vertex toVertex = pathFromRoot [j + 1];  					Edge edge = graph.FindOrCreateEdge (fromVertex' toVertex);  					edge.AddWeight (1);  				}  				Vertex thisVertex = pathFromRoot [levels - 1];  				thisVertex.basicWeight += 1;  				if (refObject.parent == null) {  					thisVertex.count += 1;  					refObject.parent = foundBeforeMarker;  				}  			}  			else {  				refObject.parent = head;  				queue.Enqueue (refObject);  			}  		}  	}  }  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,BuildReferenceGraph,The following statement contains a magic number: foreach (GcObject refObject in head.References) {  	if (refObject.parent == null || refObject.parent == foundBeforeMarker) {  		// this is a reference to either one of the "selected" objects  		// or just to a new object  		if (refObject.vertex != null && refObject.vertex.selected && (refObject.InterestLevel & (InterestLevel.Interesting | InterestLevel.Display)) != InterestLevel.Ignore && refObject.AllocTickIndex > orgGraph.allocatedAfterTickIndex && refObject.AllocTickIndex < orgGraph.allocatedBeforeTickIndex) {  			// add <root> -> ... -> head -> refObject to the reference graph  			int levels = 0;  			for (GcObject pathObject = head; pathObject != null; pathObject = pathObject.parent)  				levels++;  			while (pathFromRoot.Length < levels + 2) {  				pathFromRoot = new Vertex[pathFromRoot.Length * 2];  			}  			pathFromRoot [levels + 1] = graph.FindOrCreateVertex (refObject.vertex.name' refObject.vertex.signature' refObject.vertex.moduleName);  			int level = levels;  			for (GcObject pathObject = head; pathObject != null; pathObject = pathObject.parent) {  				if ((pathObject.InterestLevel & (InterestLevel.Interesting | InterestLevel.Display)) == InterestLevel.Ignore || pathObject.vertex == null)  					pathFromRoot [level] = null;  				else  					pathFromRoot [level] = graph.FindOrCreateVertex (pathObject.vertex.name' pathObject.vertex.signature' pathObject.vertex.moduleName);  				level--;  			}  			int nonZeroLevels = 0;  			for (int j = 0; j <= levels + 1; j++) {  				if (pathFromRoot [j] != null)  					pathFromRoot [nonZeroLevels++] = pathFromRoot [j];  			}  			levels = Vertex.SqueezeOutRepetitions (pathFromRoot' nonZeroLevels);  			for (int j = 0; j < levels - 1; j++) {  				Vertex fromVertex = pathFromRoot [j];  				Vertex toVertex = pathFromRoot [j + 1];  				Edge edge = graph.FindOrCreateEdge (fromVertex' toVertex);  				edge.AddWeight (1);  			}  			Vertex thisVertex = pathFromRoot [levels - 1];  			thisVertex.basicWeight += 1;  			if (refObject.parent == null) {  				thisVertex.count += 1;  				refObject.parent = foundBeforeMarker;  			}  		}  		else {  			refObject.parent = head;  			queue.Enqueue (refObject);  		}  	}  }  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,BuildReferenceGraph,The following statement contains a magic number: foreach (GcObject refObject in head.References) {  	if (refObject.parent == null || refObject.parent == foundBeforeMarker) {  		// this is a reference to either one of the "selected" objects  		// or just to a new object  		if (refObject.vertex != null && refObject.vertex.selected && (refObject.InterestLevel & (InterestLevel.Interesting | InterestLevel.Display)) != InterestLevel.Ignore && refObject.AllocTickIndex > orgGraph.allocatedAfterTickIndex && refObject.AllocTickIndex < orgGraph.allocatedBeforeTickIndex) {  			// add <root> -> ... -> head -> refObject to the reference graph  			int levels = 0;  			for (GcObject pathObject = head; pathObject != null; pathObject = pathObject.parent)  				levels++;  			while (pathFromRoot.Length < levels + 2) {  				pathFromRoot = new Vertex[pathFromRoot.Length * 2];  			}  			pathFromRoot [levels + 1] = graph.FindOrCreateVertex (refObject.vertex.name' refObject.vertex.signature' refObject.vertex.moduleName);  			int level = levels;  			for (GcObject pathObject = head; pathObject != null; pathObject = pathObject.parent) {  				if ((pathObject.InterestLevel & (InterestLevel.Interesting | InterestLevel.Display)) == InterestLevel.Ignore || pathObject.vertex == null)  					pathFromRoot [level] = null;  				else  					pathFromRoot [level] = graph.FindOrCreateVertex (pathObject.vertex.name' pathObject.vertex.signature' pathObject.vertex.moduleName);  				level--;  			}  			int nonZeroLevels = 0;  			for (int j = 0; j <= levels + 1; j++) {  				if (pathFromRoot [j] != null)  					pathFromRoot [nonZeroLevels++] = pathFromRoot [j];  			}  			levels = Vertex.SqueezeOutRepetitions (pathFromRoot' nonZeroLevels);  			for (int j = 0; j < levels - 1; j++) {  				Vertex fromVertex = pathFromRoot [j];  				Vertex toVertex = pathFromRoot [j + 1];  				Edge edge = graph.FindOrCreateEdge (fromVertex' toVertex);  				edge.AddWeight (1);  			}  			Vertex thisVertex = pathFromRoot [levels - 1];  			thisVertex.basicWeight += 1;  			if (refObject.parent == null) {  				thisVertex.count += 1;  				refObject.parent = foundBeforeMarker;  			}  		}  		else {  			refObject.parent = head;  			queue.Enqueue (refObject);  		}  	}  }  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,BuildReferenceGraph,The following statement contains a magic number: if (refObject.parent == null || refObject.parent == foundBeforeMarker) {  	// this is a reference to either one of the "selected" objects  	// or just to a new object  	if (refObject.vertex != null && refObject.vertex.selected && (refObject.InterestLevel & (InterestLevel.Interesting | InterestLevel.Display)) != InterestLevel.Ignore && refObject.AllocTickIndex > orgGraph.allocatedAfterTickIndex && refObject.AllocTickIndex < orgGraph.allocatedBeforeTickIndex) {  		// add <root> -> ... -> head -> refObject to the reference graph  		int levels = 0;  		for (GcObject pathObject = head; pathObject != null; pathObject = pathObject.parent)  			levels++;  		while (pathFromRoot.Length < levels + 2) {  			pathFromRoot = new Vertex[pathFromRoot.Length * 2];  		}  		pathFromRoot [levels + 1] = graph.FindOrCreateVertex (refObject.vertex.name' refObject.vertex.signature' refObject.vertex.moduleName);  		int level = levels;  		for (GcObject pathObject = head; pathObject != null; pathObject = pathObject.parent) {  			if ((pathObject.InterestLevel & (InterestLevel.Interesting | InterestLevel.Display)) == InterestLevel.Ignore || pathObject.vertex == null)  				pathFromRoot [level] = null;  			else  				pathFromRoot [level] = graph.FindOrCreateVertex (pathObject.vertex.name' pathObject.vertex.signature' pathObject.vertex.moduleName);  			level--;  		}  		int nonZeroLevels = 0;  		for (int j = 0; j <= levels + 1; j++) {  			if (pathFromRoot [j] != null)  				pathFromRoot [nonZeroLevels++] = pathFromRoot [j];  		}  		levels = Vertex.SqueezeOutRepetitions (pathFromRoot' nonZeroLevels);  		for (int j = 0; j < levels - 1; j++) {  			Vertex fromVertex = pathFromRoot [j];  			Vertex toVertex = pathFromRoot [j + 1];  			Edge edge = graph.FindOrCreateEdge (fromVertex' toVertex);  			edge.AddWeight (1);  		}  		Vertex thisVertex = pathFromRoot [levels - 1];  		thisVertex.basicWeight += 1;  		if (refObject.parent == null) {  			thisVertex.count += 1;  			refObject.parent = foundBeforeMarker;  		}  	}  	else {  		refObject.parent = head;  		queue.Enqueue (refObject);  	}  }  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,BuildReferenceGraph,The following statement contains a magic number: if (refObject.parent == null || refObject.parent == foundBeforeMarker) {  	// this is a reference to either one of the "selected" objects  	// or just to a new object  	if (refObject.vertex != null && refObject.vertex.selected && (refObject.InterestLevel & (InterestLevel.Interesting | InterestLevel.Display)) != InterestLevel.Ignore && refObject.AllocTickIndex > orgGraph.allocatedAfterTickIndex && refObject.AllocTickIndex < orgGraph.allocatedBeforeTickIndex) {  		// add <root> -> ... -> head -> refObject to the reference graph  		int levels = 0;  		for (GcObject pathObject = head; pathObject != null; pathObject = pathObject.parent)  			levels++;  		while (pathFromRoot.Length < levels + 2) {  			pathFromRoot = new Vertex[pathFromRoot.Length * 2];  		}  		pathFromRoot [levels + 1] = graph.FindOrCreateVertex (refObject.vertex.name' refObject.vertex.signature' refObject.vertex.moduleName);  		int level = levels;  		for (GcObject pathObject = head; pathObject != null; pathObject = pathObject.parent) {  			if ((pathObject.InterestLevel & (InterestLevel.Interesting | InterestLevel.Display)) == InterestLevel.Ignore || pathObject.vertex == null)  				pathFromRoot [level] = null;  			else  				pathFromRoot [level] = graph.FindOrCreateVertex (pathObject.vertex.name' pathObject.vertex.signature' pathObject.vertex.moduleName);  			level--;  		}  		int nonZeroLevels = 0;  		for (int j = 0; j <= levels + 1; j++) {  			if (pathFromRoot [j] != null)  				pathFromRoot [nonZeroLevels++] = pathFromRoot [j];  		}  		levels = Vertex.SqueezeOutRepetitions (pathFromRoot' nonZeroLevels);  		for (int j = 0; j < levels - 1; j++) {  			Vertex fromVertex = pathFromRoot [j];  			Vertex toVertex = pathFromRoot [j + 1];  			Edge edge = graph.FindOrCreateEdge (fromVertex' toVertex);  			edge.AddWeight (1);  		}  		Vertex thisVertex = pathFromRoot [levels - 1];  		thisVertex.basicWeight += 1;  		if (refObject.parent == null) {  			thisVertex.count += 1;  			refObject.parent = foundBeforeMarker;  		}  	}  	else {  		refObject.parent = head;  		queue.Enqueue (refObject);  	}  }  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,BuildReferenceGraph,The following statement contains a magic number: if (refObject.vertex != null && refObject.vertex.selected && (refObject.InterestLevel & (InterestLevel.Interesting | InterestLevel.Display)) != InterestLevel.Ignore && refObject.AllocTickIndex > orgGraph.allocatedAfterTickIndex && refObject.AllocTickIndex < orgGraph.allocatedBeforeTickIndex) {  	// add <root> -> ... -> head -> refObject to the reference graph  	int levels = 0;  	for (GcObject pathObject = head; pathObject != null; pathObject = pathObject.parent)  		levels++;  	while (pathFromRoot.Length < levels + 2) {  		pathFromRoot = new Vertex[pathFromRoot.Length * 2];  	}  	pathFromRoot [levels + 1] = graph.FindOrCreateVertex (refObject.vertex.name' refObject.vertex.signature' refObject.vertex.moduleName);  	int level = levels;  	for (GcObject pathObject = head; pathObject != null; pathObject = pathObject.parent) {  		if ((pathObject.InterestLevel & (InterestLevel.Interesting | InterestLevel.Display)) == InterestLevel.Ignore || pathObject.vertex == null)  			pathFromRoot [level] = null;  		else  			pathFromRoot [level] = graph.FindOrCreateVertex (pathObject.vertex.name' pathObject.vertex.signature' pathObject.vertex.moduleName);  		level--;  	}  	int nonZeroLevels = 0;  	for (int j = 0; j <= levels + 1; j++) {  		if (pathFromRoot [j] != null)  			pathFromRoot [nonZeroLevels++] = pathFromRoot [j];  	}  	levels = Vertex.SqueezeOutRepetitions (pathFromRoot' nonZeroLevels);  	for (int j = 0; j < levels - 1; j++) {  		Vertex fromVertex = pathFromRoot [j];  		Vertex toVertex = pathFromRoot [j + 1];  		Edge edge = graph.FindOrCreateEdge (fromVertex' toVertex);  		edge.AddWeight (1);  	}  	Vertex thisVertex = pathFromRoot [levels - 1];  	thisVertex.basicWeight += 1;  	if (refObject.parent == null) {  		thisVertex.count += 1;  		refObject.parent = foundBeforeMarker;  	}  }  else {  	refObject.parent = head;  	queue.Enqueue (refObject);  }  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,BuildReferenceGraph,The following statement contains a magic number: if (refObject.vertex != null && refObject.vertex.selected && (refObject.InterestLevel & (InterestLevel.Interesting | InterestLevel.Display)) != InterestLevel.Ignore && refObject.AllocTickIndex > orgGraph.allocatedAfterTickIndex && refObject.AllocTickIndex < orgGraph.allocatedBeforeTickIndex) {  	// add <root> -> ... -> head -> refObject to the reference graph  	int levels = 0;  	for (GcObject pathObject = head; pathObject != null; pathObject = pathObject.parent)  		levels++;  	while (pathFromRoot.Length < levels + 2) {  		pathFromRoot = new Vertex[pathFromRoot.Length * 2];  	}  	pathFromRoot [levels + 1] = graph.FindOrCreateVertex (refObject.vertex.name' refObject.vertex.signature' refObject.vertex.moduleName);  	int level = levels;  	for (GcObject pathObject = head; pathObject != null; pathObject = pathObject.parent) {  		if ((pathObject.InterestLevel & (InterestLevel.Interesting | InterestLevel.Display)) == InterestLevel.Ignore || pathObject.vertex == null)  			pathFromRoot [level] = null;  		else  			pathFromRoot [level] = graph.FindOrCreateVertex (pathObject.vertex.name' pathObject.vertex.signature' pathObject.vertex.moduleName);  		level--;  	}  	int nonZeroLevels = 0;  	for (int j = 0; j <= levels + 1; j++) {  		if (pathFromRoot [j] != null)  			pathFromRoot [nonZeroLevels++] = pathFromRoot [j];  	}  	levels = Vertex.SqueezeOutRepetitions (pathFromRoot' nonZeroLevels);  	for (int j = 0; j < levels - 1; j++) {  		Vertex fromVertex = pathFromRoot [j];  		Vertex toVertex = pathFromRoot [j + 1];  		Edge edge = graph.FindOrCreateEdge (fromVertex' toVertex);  		edge.AddWeight (1);  	}  	Vertex thisVertex = pathFromRoot [levels - 1];  	thisVertex.basicWeight += 1;  	if (refObject.parent == null) {  		thisVertex.count += 1;  		refObject.parent = foundBeforeMarker;  	}  }  else {  	refObject.parent = head;  	queue.Enqueue (refObject);  }  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,BuildReferenceGraph,The following statement contains a magic number: while (pathFromRoot.Length < levels + 2) {  	pathFromRoot = new Vertex[pathFromRoot.Length * 2];  }  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,BuildReferenceGraph,The following statement contains a magic number: while (pathFromRoot.Length < levels + 2) {  	pathFromRoot = new Vertex[pathFromRoot.Length * 2];  }  
Magic Number,breinstormin.profiler,ObjectGraph,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\ObjectGraph.cs,BuildReferenceGraph,The following statement contains a magic number: pathFromRoot = new Vertex[pathFromRoot.Length * 2];  
Magic Number,breinstormin.profiler,Histogram,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,Histogram,The following statement contains a magic number: typeSizeStacktraceToCount = new int[10];  
Magic Number,breinstormin.profiler,Histogram,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,Histogram,The following statement contains a magic number: typeSizeStacktraceToCount = new int[10];  
Magic Number,breinstormin.profiler,Histogram,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,BuildVertexStack,The following statement contains a magic number: while (vertexStack.Length < stackTrace.Length + 3) {  	vertexStack = new Vertex[vertexStack.Length * 2];  }  
Magic Number,breinstormin.profiler,Histogram,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,BuildVertexStack,The following statement contains a magic number: while (vertexStack.Length < stackTrace.Length + 3) {  	vertexStack = new Vertex[vertexStack.Length * 2];  }  
Magic Number,breinstormin.profiler,Histogram,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,BuildVertexStack,The following statement contains a magic number: vertexStack = new Vertex[vertexStack.Length * 2];  
Magic Number,breinstormin.profiler,LiveObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,GetNextObject,The following statement contains a magic number: if (secondLevelTable != null) {  	ushort u1 = secondLevelTable [j];  	if ((u1 & 0x8000) != 0) {  		j++;  		if (j >= secondLevelLength) {  			j = 0;  			i++;  			secondLevelTable = firstLevelTable [i];  		}  		ushort u2 = secondLevelTable [j];  		j++;  		if (j >= secondLevelLength) {  			j = 0;  			i++;  			secondLevelTable = firstLevelTable [i];  		}  		ushort u3 = secondLevelTable [j];  		o.allocTickIndex = (u2 >> 7) + (u3 << 8);  		o.typeSizeStacktraceIndex = (u1 & 0x7fff) + ((u2 & 0x7f) << 15);  		int[] stacktrace = readNewLog.stacktraceTable.IndexToStacktrace (o.typeSizeStacktraceIndex);  		o.typeIndex = stacktrace [0];  		o.size = (uint)stacktrace [1];  		return;  	}  }  
Magic Number,breinstormin.profiler,LiveObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,GetNextObject,The following statement contains a magic number: if (secondLevelTable != null) {  	ushort u1 = secondLevelTable [j];  	if ((u1 & 0x8000) != 0) {  		j++;  		if (j >= secondLevelLength) {  			j = 0;  			i++;  			secondLevelTable = firstLevelTable [i];  		}  		ushort u2 = secondLevelTable [j];  		j++;  		if (j >= secondLevelLength) {  			j = 0;  			i++;  			secondLevelTable = firstLevelTable [i];  		}  		ushort u3 = secondLevelTable [j];  		o.allocTickIndex = (u2 >> 7) + (u3 << 8);  		o.typeSizeStacktraceIndex = (u1 & 0x7fff) + ((u2 & 0x7f) << 15);  		int[] stacktrace = readNewLog.stacktraceTable.IndexToStacktrace (o.typeSizeStacktraceIndex);  		o.typeIndex = stacktrace [0];  		o.size = (uint)stacktrace [1];  		return;  	}  }  
Magic Number,breinstormin.profiler,LiveObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,GetNextObject,The following statement contains a magic number: if (secondLevelTable != null) {  	ushort u1 = secondLevelTable [j];  	if ((u1 & 0x8000) != 0) {  		j++;  		if (j >= secondLevelLength) {  			j = 0;  			i++;  			secondLevelTable = firstLevelTable [i];  		}  		ushort u2 = secondLevelTable [j];  		j++;  		if (j >= secondLevelLength) {  			j = 0;  			i++;  			secondLevelTable = firstLevelTable [i];  		}  		ushort u3 = secondLevelTable [j];  		o.allocTickIndex = (u2 >> 7) + (u3 << 8);  		o.typeSizeStacktraceIndex = (u1 & 0x7fff) + ((u2 & 0x7f) << 15);  		int[] stacktrace = readNewLog.stacktraceTable.IndexToStacktrace (o.typeSizeStacktraceIndex);  		o.typeIndex = stacktrace [0];  		o.size = (uint)stacktrace [1];  		return;  	}  }  
Magic Number,breinstormin.profiler,LiveObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,GetNextObject,The following statement contains a magic number: if ((u1 & 0x8000) != 0) {  	j++;  	if (j >= secondLevelLength) {  		j = 0;  		i++;  		secondLevelTable = firstLevelTable [i];  	}  	ushort u2 = secondLevelTable [j];  	j++;  	if (j >= secondLevelLength) {  		j = 0;  		i++;  		secondLevelTable = firstLevelTable [i];  	}  	ushort u3 = secondLevelTable [j];  	o.allocTickIndex = (u2 >> 7) + (u3 << 8);  	o.typeSizeStacktraceIndex = (u1 & 0x7fff) + ((u2 & 0x7f) << 15);  	int[] stacktrace = readNewLog.stacktraceTable.IndexToStacktrace (o.typeSizeStacktraceIndex);  	o.typeIndex = stacktrace [0];  	o.size = (uint)stacktrace [1];  	return;  }  
Magic Number,breinstormin.profiler,LiveObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,GetNextObject,The following statement contains a magic number: if ((u1 & 0x8000) != 0) {  	j++;  	if (j >= secondLevelLength) {  		j = 0;  		i++;  		secondLevelTable = firstLevelTable [i];  	}  	ushort u2 = secondLevelTable [j];  	j++;  	if (j >= secondLevelLength) {  		j = 0;  		i++;  		secondLevelTable = firstLevelTable [i];  	}  	ushort u3 = secondLevelTable [j];  	o.allocTickIndex = (u2 >> 7) + (u3 << 8);  	o.typeSizeStacktraceIndex = (u1 & 0x7fff) + ((u2 & 0x7f) << 15);  	int[] stacktrace = readNewLog.stacktraceTable.IndexToStacktrace (o.typeSizeStacktraceIndex);  	o.typeIndex = stacktrace [0];  	o.size = (uint)stacktrace [1];  	return;  }  
Magic Number,breinstormin.profiler,LiveObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,GetNextObject,The following statement contains a magic number: if ((u1 & 0x8000) != 0) {  	j++;  	if (j >= secondLevelLength) {  		j = 0;  		i++;  		secondLevelTable = firstLevelTable [i];  	}  	ushort u2 = secondLevelTable [j];  	j++;  	if (j >= secondLevelLength) {  		j = 0;  		i++;  		secondLevelTable = firstLevelTable [i];  	}  	ushort u3 = secondLevelTable [j];  	o.allocTickIndex = (u2 >> 7) + (u3 << 8);  	o.typeSizeStacktraceIndex = (u1 & 0x7fff) + ((u2 & 0x7f) << 15);  	int[] stacktrace = readNewLog.stacktraceTable.IndexToStacktrace (o.typeSizeStacktraceIndex);  	o.typeIndex = stacktrace [0];  	o.size = (uint)stacktrace [1];  	return;  }  
Magic Number,breinstormin.profiler,LiveObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,GetNextObject,The following statement contains a magic number: o.allocTickIndex = (u2 >> 7) + (u3 << 8);  
Magic Number,breinstormin.profiler,LiveObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,GetNextObject,The following statement contains a magic number: o.allocTickIndex = (u2 >> 7) + (u3 << 8);  
Magic Number,breinstormin.profiler,LiveObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,GetNextObject,The following statement contains a magic number: o.typeSizeStacktraceIndex = (u1 & 0x7fff) + ((u2 & 0x7f) << 15);  
Magic Number,breinstormin.profiler,LiveObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,InsertObject,The following statement contains a magic number: if (!emptySpace) {  	ulong prevId = FindObjectBackward (id - 4);  	LiveObject o;  	GetNextObject (prevId' id' out o);  	if (o.id < id && (o.id + o.size > id || o.id + 12 > id)) {  		Zero (o.id' id - o.id);  	}  }  
Magic Number,breinstormin.profiler,LiveObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,InsertObject,The following statement contains a magic number: if (!emptySpace) {  	ulong prevId = FindObjectBackward (id - 4);  	LiveObject o;  	GetNextObject (prevId' id' out o);  	if (o.id < id && (o.id + o.size > id || o.id + 12 > id)) {  		Zero (o.id' id - o.id);  	}  }  
Magic Number,breinstormin.profiler,LiveObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,InsertObject,The following statement contains a magic number: if (o.id < id && (o.id + o.size > id || o.id + 12 > id)) {  	Zero (o.id' id - o.id);  }  
Magic Number,breinstormin.profiler,LiveObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,InsertObject,The following statement contains a magic number: if (size >= 12) {  	ushort u1 = (ushort)(typeSizeStacktraceIndex | 0x8000);  	ushort u2 = (ushort)((typeSizeStacktraceIndex >> 15) | ((allocTickIndex & 0xff) << 7));  	ushort u3 = (ushort)(allocTickIndex >> 8);  	Write3WordsAt (id' u1' u2' u3);  	if (!emptySpace)  		Zero (id + 12' size - 12);  	//Debug.Assert(CanReadObjectBackCorrectly(id' size' typeSizeStacktraceIndex' allocTickIndex));  }  
Magic Number,breinstormin.profiler,LiveObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,InsertObject,The following statement contains a magic number: if (size >= 12) {  	ushort u1 = (ushort)(typeSizeStacktraceIndex | 0x8000);  	ushort u2 = (ushort)((typeSizeStacktraceIndex >> 15) | ((allocTickIndex & 0xff) << 7));  	ushort u3 = (ushort)(allocTickIndex >> 8);  	Write3WordsAt (id' u1' u2' u3);  	if (!emptySpace)  		Zero (id + 12' size - 12);  	//Debug.Assert(CanReadObjectBackCorrectly(id' size' typeSizeStacktraceIndex' allocTickIndex));  }  
Magic Number,breinstormin.profiler,LiveObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,InsertObject,The following statement contains a magic number: if (size >= 12) {  	ushort u1 = (ushort)(typeSizeStacktraceIndex | 0x8000);  	ushort u2 = (ushort)((typeSizeStacktraceIndex >> 15) | ((allocTickIndex & 0xff) << 7));  	ushort u3 = (ushort)(allocTickIndex >> 8);  	Write3WordsAt (id' u1' u2' u3);  	if (!emptySpace)  		Zero (id + 12' size - 12);  	//Debug.Assert(CanReadObjectBackCorrectly(id' size' typeSizeStacktraceIndex' allocTickIndex));  }  
Magic Number,breinstormin.profiler,LiveObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,InsertObject,The following statement contains a magic number: if (size >= 12) {  	ushort u1 = (ushort)(typeSizeStacktraceIndex | 0x8000);  	ushort u2 = (ushort)((typeSizeStacktraceIndex >> 15) | ((allocTickIndex & 0xff) << 7));  	ushort u3 = (ushort)(allocTickIndex >> 8);  	Write3WordsAt (id' u1' u2' u3);  	if (!emptySpace)  		Zero (id + 12' size - 12);  	//Debug.Assert(CanReadObjectBackCorrectly(id' size' typeSizeStacktraceIndex' allocTickIndex));  }  
Magic Number,breinstormin.profiler,LiveObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,InsertObject,The following statement contains a magic number: if (size >= 12) {  	ushort u1 = (ushort)(typeSizeStacktraceIndex | 0x8000);  	ushort u2 = (ushort)((typeSizeStacktraceIndex >> 15) | ((allocTickIndex & 0xff) << 7));  	ushort u3 = (ushort)(allocTickIndex >> 8);  	Write3WordsAt (id' u1' u2' u3);  	if (!emptySpace)  		Zero (id + 12' size - 12);  	//Debug.Assert(CanReadObjectBackCorrectly(id' size' typeSizeStacktraceIndex' allocTickIndex));  }  
Magic Number,breinstormin.profiler,LiveObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,InsertObject,The following statement contains a magic number: if (size >= 12) {  	ushort u1 = (ushort)(typeSizeStacktraceIndex | 0x8000);  	ushort u2 = (ushort)((typeSizeStacktraceIndex >> 15) | ((allocTickIndex & 0xff) << 7));  	ushort u3 = (ushort)(allocTickIndex >> 8);  	Write3WordsAt (id' u1' u2' u3);  	if (!emptySpace)  		Zero (id + 12' size - 12);  	//Debug.Assert(CanReadObjectBackCorrectly(id' size' typeSizeStacktraceIndex' allocTickIndex));  }  
Magic Number,breinstormin.profiler,LiveObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,InsertObject,The following statement contains a magic number: if (!emptySpace)  	Zero (id + 12' size - 12);  
Magic Number,breinstormin.profiler,LiveObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,InsertObject,The following statement contains a magic number: if (!emptySpace)  	Zero (id + 12' size - 12);  
Magic Number,breinstormin.profiler,LiveObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,InsertObject,The following statement contains a magic number: Zero (id + 12' size - 12);  
Magic Number,breinstormin.profiler,LiveObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,InsertObject,The following statement contains a magic number: Zero (id + 12' size - 12);  
Magic Number,breinstormin.profiler,LiveObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,GenerationOfObject,The following statement contains a magic number: if (generation < 0) {  	generation = 0;  	if (o.allocTickIndex <= gen2LimitTickIndex)  		generation = 2;  	else if (o.allocTickIndex <= gen1LimitTickIndex)  		generation = 1;  }  
Magic Number,breinstormin.profiler,LiveObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,GenerationOfObject,The following statement contains a magic number: if (o.allocTickIndex <= gen2LimitTickIndex)  	generation = 2;  else if (o.allocTickIndex <= gen1LimitTickIndex)  	generation = 1;  
Magic Number,breinstormin.profiler,LiveObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,GenerationOfObject,The following statement contains a magic number: generation = 2;  
Magic Number,breinstormin.profiler,LiveObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,RecordGc,The following statement contains a magic number: if (gcGen2Count != lastGcGen2Count)  	gen = 2;  else if (gcGen1Count != lastGcGen1Count)  	gen = 1;  
Magic Number,breinstormin.profiler,LiveObjectTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,RecordGc,The following statement contains a magic number: gen = 2;  
Magic Number,breinstormin.profiler,StacktraceTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,StacktraceTable,The following statement contains a magic number: stacktraceTable = new int[1000][];  
Magic Number,breinstormin.profiler,StacktraceTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,Add,The following statement contains a magic number: if (isAllocStack && length == 2)  	oldId = LookupAlloc (stack [start]' stack [start + 1]);  
Magic Number,breinstormin.profiler,StacktraceTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,Add,The following statement contains a magic number: if (oldId >= 0) {  	if (mappingTable == null)  		CreateMappingTable ();  	while (mappingTable.Length <= id)  		GrowMappingTable ();  	mappingTable [id] = oldId;  }  else {  	int[] stacktrace = new int[length];  	for (int i = 0; i < stacktrace.Length; i++)  		stacktrace [i] = stack [start++];  	if (mappingTable != null) {  		int newId = maxID + 1;  		while (mappingTable.Length <= id)  			GrowMappingTable ();  		mappingTable [id] = newId;  		id = newId;  	}  	if (isAllocStack && length == 2) {  		EnterAlloc (id' stacktrace [0]' stacktrace [1]);  	}  	while (stacktraceTable.Length <= id) {  		int[][] newStacktraceTable = new int[stacktraceTable.Length * 2][];  		for (int i = 0; i < stacktraceTable.Length; i++)  			newStacktraceTable [i] = stacktraceTable [i];  		stacktraceTable = newStacktraceTable;  	}  	stacktraceTable [id] = stacktrace;  	if (id > maxID) {  		maxID = id;  	}  }  
Magic Number,breinstormin.profiler,StacktraceTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,Add,The following statement contains a magic number: if (oldId >= 0) {  	if (mappingTable == null)  		CreateMappingTable ();  	while (mappingTable.Length <= id)  		GrowMappingTable ();  	mappingTable [id] = oldId;  }  else {  	int[] stacktrace = new int[length];  	for (int i = 0; i < stacktrace.Length; i++)  		stacktrace [i] = stack [start++];  	if (mappingTable != null) {  		int newId = maxID + 1;  		while (mappingTable.Length <= id)  			GrowMappingTable ();  		mappingTable [id] = newId;  		id = newId;  	}  	if (isAllocStack && length == 2) {  		EnterAlloc (id' stacktrace [0]' stacktrace [1]);  	}  	while (stacktraceTable.Length <= id) {  		int[][] newStacktraceTable = new int[stacktraceTable.Length * 2][];  		for (int i = 0; i < stacktraceTable.Length; i++)  			newStacktraceTable [i] = stacktraceTable [i];  		stacktraceTable = newStacktraceTable;  	}  	stacktraceTable [id] = stacktrace;  	if (id > maxID) {  		maxID = id;  	}  }  
Magic Number,breinstormin.profiler,StacktraceTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,Add,The following statement contains a magic number: if (isAllocStack && length == 2) {  	EnterAlloc (id' stacktrace [0]' stacktrace [1]);  }  
Magic Number,breinstormin.profiler,StacktraceTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,Add,The following statement contains a magic number: while (stacktraceTable.Length <= id) {  	int[][] newStacktraceTable = new int[stacktraceTable.Length * 2][];  	for (int i = 0; i < stacktraceTable.Length; i++)  		newStacktraceTable [i] = stacktraceTable [i];  	stacktraceTable = newStacktraceTable;  }  
Magic Number,breinstormin.profiler,StacktraceTable,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,GetOrCreateTypeSizeId,The following statement contains a magic number: while (stacktraceTable.Length <= id) {  	int[][] newStacktraceTable = new int[stacktraceTable.Length * 2][];  	for (int i = 0; i < stacktraceTable.Length; i++)  		newStacktraceTable [i] = stacktraceTable [i];  	stacktraceTable = newStacktraceTable;  }  
Magic Number,breinstormin.profiler,FunctionList,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,BuildVertexStack,The following statement contains a magic number: while (vertexStack.Length < stackTrace.Length + 1)  	vertexStack = new Vertex[vertexStack.Length * 2];  
Magic Number,breinstormin.profiler,FunctionList,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,BuildVertexStack,The following statement contains a magic number: vertexStack = new Vertex[vertexStack.Length * 2];  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadNewLog,The following statement contains a magic number: typeName = new string[1000];  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadNewLog,The following statement contains a magic number: funcName = new string[1000];  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadNewLog,The following statement contains a magic number: funcSignature = new string[1000];  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadNewLog,The following statement contains a magic number: funcModule = new int[1000];  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadNewLog,The following statement contains a magic number: modBasicName = new string[10];  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadNewLog,The following statement contains a magic number: modFullName = new string[10];  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadNewLog,The following statement contains a magic number: gcCount = new int[4];  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadNewLog,The following statement contains a magic number: inducedGcCount = new int[3];  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadNewLog,The following statement contains a magic number: generationSize = new ulong[4];  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadNewLog,The following statement contains a magic number: cumulativeGenerationSize = new ulong[4];  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadHex,The following statement contains a magic number: while (true) {  	c = ReadChar ();  	int digit = c;  	if (digit >= '0' && digit <= '9')  		digit -= '0';  	else if (digit >= 'a' && digit <= 'f')  		digit -= 'a' - 10;  	else if (digit >= 'A' && digit <= 'F')  		digit -= 'A' - 10;  	else  		return value;  	value = value * 16 + digit;  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadHex,The following statement contains a magic number: while (true) {  	c = ReadChar ();  	int digit = c;  	if (digit >= '0' && digit <= '9')  		digit -= '0';  	else if (digit >= 'a' && digit <= 'f')  		digit -= 'a' - 10;  	else if (digit >= 'A' && digit <= 'F')  		digit -= 'A' - 10;  	else  		return value;  	value = value * 16 + digit;  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadHex,The following statement contains a magic number: while (true) {  	c = ReadChar ();  	int digit = c;  	if (digit >= '0' && digit <= '9')  		digit -= '0';  	else if (digit >= 'a' && digit <= 'f')  		digit -= 'a' - 10;  	else if (digit >= 'A' && digit <= 'F')  		digit -= 'A' - 10;  	else  		return value;  	value = value * 16 + digit;  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadHex,The following statement contains a magic number: if (digit >= '0' && digit <= '9')  	digit -= '0';  else if (digit >= 'a' && digit <= 'f')  	digit -= 'a' - 10;  else if (digit >= 'A' && digit <= 'F')  	digit -= 'A' - 10;  else  	return value;  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadHex,The following statement contains a magic number: if (digit >= '0' && digit <= '9')  	digit -= '0';  else if (digit >= 'a' && digit <= 'f')  	digit -= 'a' - 10;  else if (digit >= 'A' && digit <= 'F')  	digit -= 'A' - 10;  else  	return value;  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadHex,The following statement contains a magic number: if (digit >= 'a' && digit <= 'f')  	digit -= 'a' - 10;  else if (digit >= 'A' && digit <= 'F')  	digit -= 'A' - 10;  else  	return value;  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadHex,The following statement contains a magic number: if (digit >= 'a' && digit <= 'f')  	digit -= 'a' - 10;  else if (digit >= 'A' && digit <= 'F')  	digit -= 'A' - 10;  else  	return value;  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadHex,The following statement contains a magic number: digit -= 'a' - 10;  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadHex,The following statement contains a magic number: if (digit >= 'A' && digit <= 'F')  	digit -= 'A' - 10;  else  	return value;  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadHex,The following statement contains a magic number: digit -= 'A' - 10;  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadHex,The following statement contains a magic number: value = value * 16 + digit;  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadInt,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	int value = 0;  	if (c == '0') {  		c = ReadChar ();  		if (c == 'x' || c == 'X')  			value = ReadHex ();  	}  	while (c >= '0' && c <= '9') {  		value = value * 10 + c - '0';  		c = ReadChar ();  	}  	if (negative)  		value = -value;  	return value;  }  else {  	return -1;  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadInt,The following statement contains a magic number: while (c >= '0' && c <= '9') {  	value = value * 10 + c - '0';  	c = ReadChar ();  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadInt,The following statement contains a magic number: value = value * 10 + c - '0';  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadLongHex,The following statement contains a magic number: while (true) {  	c = ReadChar ();  	int digit = c;  	if (digit >= '0' && digit <= '9')  		digit -= '0';  	else if (digit >= 'a' && digit <= 'f')  		digit -= 'a' - 10;  	else if (digit >= 'A' && digit <= 'F')  		digit -= 'A' - 10;  	else  		return value;  	value = value * 16 + digit;  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadLongHex,The following statement contains a magic number: while (true) {  	c = ReadChar ();  	int digit = c;  	if (digit >= '0' && digit <= '9')  		digit -= '0';  	else if (digit >= 'a' && digit <= 'f')  		digit -= 'a' - 10;  	else if (digit >= 'A' && digit <= 'F')  		digit -= 'A' - 10;  	else  		return value;  	value = value * 16 + digit;  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadLongHex,The following statement contains a magic number: while (true) {  	c = ReadChar ();  	int digit = c;  	if (digit >= '0' && digit <= '9')  		digit -= '0';  	else if (digit >= 'a' && digit <= 'f')  		digit -= 'a' - 10;  	else if (digit >= 'A' && digit <= 'F')  		digit -= 'A' - 10;  	else  		return value;  	value = value * 16 + digit;  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadLongHex,The following statement contains a magic number: if (digit >= '0' && digit <= '9')  	digit -= '0';  else if (digit >= 'a' && digit <= 'f')  	digit -= 'a' - 10;  else if (digit >= 'A' && digit <= 'F')  	digit -= 'A' - 10;  else  	return value;  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadLongHex,The following statement contains a magic number: if (digit >= '0' && digit <= '9')  	digit -= '0';  else if (digit >= 'a' && digit <= 'f')  	digit -= 'a' - 10;  else if (digit >= 'A' && digit <= 'F')  	digit -= 'A' - 10;  else  	return value;  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadLongHex,The following statement contains a magic number: if (digit >= 'a' && digit <= 'f')  	digit -= 'a' - 10;  else if (digit >= 'A' && digit <= 'F')  	digit -= 'A' - 10;  else  	return value;  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadLongHex,The following statement contains a magic number: if (digit >= 'a' && digit <= 'f')  	digit -= 'a' - 10;  else if (digit >= 'A' && digit <= 'F')  	digit -= 'A' - 10;  else  	return value;  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadLongHex,The following statement contains a magic number: digit -= 'a' - 10;  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadLongHex,The following statement contains a magic number: if (digit >= 'A' && digit <= 'F')  	digit -= 'A' - 10;  else  	return value;  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadLongHex,The following statement contains a magic number: digit -= 'A' - 10;  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadLongHex,The following statement contains a magic number: value = value * 16 + digit;  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadLong,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	long value = 0;  	if (c == '0') {  		c = ReadChar ();  		if (c == 'x' || c == 'X')  			value = ReadLongHex ();  	}  	while (c >= '0' && c <= '9') {  		value = value * 10 + c - '0';  		c = ReadChar ();  	}  	if (negative)  		value = -value;  	return value;  }  else {  	return -1;  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadLong,The following statement contains a magic number: while (c >= '0' && c <= '9') {  	value = value * 10 + c - '0';  	c = ReadChar ();  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadLong,The following statement contains a magic number: value = value * 10 + c - '0';  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadString,The following statement contains a magic number: while (c > delimiter || angleBracketsScope != 0 && sb.Length < maxLength) {  	if (c == '\\') {  		c = ReadChar ();  		if (c == 'u') {  			// handle unicode escape  			c = ReadChar ();  			int count = 0;  			int hexVal = 0;  			while (count < 4 && ('0' <= c && c <= '9' || 'a' <= c && c <= 'f')) {  				count++;  				hexVal = 16 * hexVal + ((c <= '9') ? (c - '0') : (c - 'a' + 10));  				c = ReadChar ();  			}  			sb.Append ((char)hexVal);  		}  		else {  			// handle other escaped character - append it without inspecting it'  			// it doesn't count as a delimiter or anything else  			sb.Append ((char)c);  			c = ReadChar ();  		}  		continue;  	}  	// non-escaped character - always append it  	sb.Append ((char)c);  	if (c == '<')  		angleBracketsScope++;  	else if (c == '>' && angleBracketsScope > 0)  		angleBracketsScope--;  	else if (stopAfterRightParen && c == ')') {  		// we have already appened it above - now read the character after it.  		c = ReadChar ();  		break;  	}  	c = ReadChar ();  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadString,The following statement contains a magic number: while (c > delimiter || angleBracketsScope != 0 && sb.Length < maxLength) {  	if (c == '\\') {  		c = ReadChar ();  		if (c == 'u') {  			// handle unicode escape  			c = ReadChar ();  			int count = 0;  			int hexVal = 0;  			while (count < 4 && ('0' <= c && c <= '9' || 'a' <= c && c <= 'f')) {  				count++;  				hexVal = 16 * hexVal + ((c <= '9') ? (c - '0') : (c - 'a' + 10));  				c = ReadChar ();  			}  			sb.Append ((char)hexVal);  		}  		else {  			// handle other escaped character - append it without inspecting it'  			// it doesn't count as a delimiter or anything else  			sb.Append ((char)c);  			c = ReadChar ();  		}  		continue;  	}  	// non-escaped character - always append it  	sb.Append ((char)c);  	if (c == '<')  		angleBracketsScope++;  	else if (c == '>' && angleBracketsScope > 0)  		angleBracketsScope--;  	else if (stopAfterRightParen && c == ')') {  		// we have already appened it above - now read the character after it.  		c = ReadChar ();  		break;  	}  	c = ReadChar ();  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadString,The following statement contains a magic number: while (c > delimiter || angleBracketsScope != 0 && sb.Length < maxLength) {  	if (c == '\\') {  		c = ReadChar ();  		if (c == 'u') {  			// handle unicode escape  			c = ReadChar ();  			int count = 0;  			int hexVal = 0;  			while (count < 4 && ('0' <= c && c <= '9' || 'a' <= c && c <= 'f')) {  				count++;  				hexVal = 16 * hexVal + ((c <= '9') ? (c - '0') : (c - 'a' + 10));  				c = ReadChar ();  			}  			sb.Append ((char)hexVal);  		}  		else {  			// handle other escaped character - append it without inspecting it'  			// it doesn't count as a delimiter or anything else  			sb.Append ((char)c);  			c = ReadChar ();  		}  		continue;  	}  	// non-escaped character - always append it  	sb.Append ((char)c);  	if (c == '<')  		angleBracketsScope++;  	else if (c == '>' && angleBracketsScope > 0)  		angleBracketsScope--;  	else if (stopAfterRightParen && c == ')') {  		// we have already appened it above - now read the character after it.  		c = ReadChar ();  		break;  	}  	c = ReadChar ();  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadString,The following statement contains a magic number: if (c == '\\') {  	c = ReadChar ();  	if (c == 'u') {  		// handle unicode escape  		c = ReadChar ();  		int count = 0;  		int hexVal = 0;  		while (count < 4 && ('0' <= c && c <= '9' || 'a' <= c && c <= 'f')) {  			count++;  			hexVal = 16 * hexVal + ((c <= '9') ? (c - '0') : (c - 'a' + 10));  			c = ReadChar ();  		}  		sb.Append ((char)hexVal);  	}  	else {  		// handle other escaped character - append it without inspecting it'  		// it doesn't count as a delimiter or anything else  		sb.Append ((char)c);  		c = ReadChar ();  	}  	continue;  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadString,The following statement contains a magic number: if (c == '\\') {  	c = ReadChar ();  	if (c == 'u') {  		// handle unicode escape  		c = ReadChar ();  		int count = 0;  		int hexVal = 0;  		while (count < 4 && ('0' <= c && c <= '9' || 'a' <= c && c <= 'f')) {  			count++;  			hexVal = 16 * hexVal + ((c <= '9') ? (c - '0') : (c - 'a' + 10));  			c = ReadChar ();  		}  		sb.Append ((char)hexVal);  	}  	else {  		// handle other escaped character - append it without inspecting it'  		// it doesn't count as a delimiter or anything else  		sb.Append ((char)c);  		c = ReadChar ();  	}  	continue;  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadString,The following statement contains a magic number: if (c == '\\') {  	c = ReadChar ();  	if (c == 'u') {  		// handle unicode escape  		c = ReadChar ();  		int count = 0;  		int hexVal = 0;  		while (count < 4 && ('0' <= c && c <= '9' || 'a' <= c && c <= 'f')) {  			count++;  			hexVal = 16 * hexVal + ((c <= '9') ? (c - '0') : (c - 'a' + 10));  			c = ReadChar ();  		}  		sb.Append ((char)hexVal);  	}  	else {  		// handle other escaped character - append it without inspecting it'  		// it doesn't count as a delimiter or anything else  		sb.Append ((char)c);  		c = ReadChar ();  	}  	continue;  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadString,The following statement contains a magic number: if (c == 'u') {  	// handle unicode escape  	c = ReadChar ();  	int count = 0;  	int hexVal = 0;  	while (count < 4 && ('0' <= c && c <= '9' || 'a' <= c && c <= 'f')) {  		count++;  		hexVal = 16 * hexVal + ((c <= '9') ? (c - '0') : (c - 'a' + 10));  		c = ReadChar ();  	}  	sb.Append ((char)hexVal);  }  else {  	// handle other escaped character - append it without inspecting it'  	// it doesn't count as a delimiter or anything else  	sb.Append ((char)c);  	c = ReadChar ();  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadString,The following statement contains a magic number: if (c == 'u') {  	// handle unicode escape  	c = ReadChar ();  	int count = 0;  	int hexVal = 0;  	while (count < 4 && ('0' <= c && c <= '9' || 'a' <= c && c <= 'f')) {  		count++;  		hexVal = 16 * hexVal + ((c <= '9') ? (c - '0') : (c - 'a' + 10));  		c = ReadChar ();  	}  	sb.Append ((char)hexVal);  }  else {  	// handle other escaped character - append it without inspecting it'  	// it doesn't count as a delimiter or anything else  	sb.Append ((char)c);  	c = ReadChar ();  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadString,The following statement contains a magic number: if (c == 'u') {  	// handle unicode escape  	c = ReadChar ();  	int count = 0;  	int hexVal = 0;  	while (count < 4 && ('0' <= c && c <= '9' || 'a' <= c && c <= 'f')) {  		count++;  		hexVal = 16 * hexVal + ((c <= '9') ? (c - '0') : (c - 'a' + 10));  		c = ReadChar ();  	}  	sb.Append ((char)hexVal);  }  else {  	// handle other escaped character - append it without inspecting it'  	// it doesn't count as a delimiter or anything else  	sb.Append ((char)c);  	c = ReadChar ();  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadString,The following statement contains a magic number: while (count < 4 && ('0' <= c && c <= '9' || 'a' <= c && c <= 'f')) {  	count++;  	hexVal = 16 * hexVal + ((c <= '9') ? (c - '0') : (c - 'a' + 10));  	c = ReadChar ();  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadString,The following statement contains a magic number: while (count < 4 && ('0' <= c && c <= '9' || 'a' <= c && c <= 'f')) {  	count++;  	hexVal = 16 * hexVal + ((c <= '9') ? (c - '0') : (c - 'a' + 10));  	c = ReadChar ();  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadString,The following statement contains a magic number: while (count < 4 && ('0' <= c && c <= '9' || 'a' <= c && c <= 'f')) {  	count++;  	hexVal = 16 * hexVal + ((c <= '9') ? (c - '0') : (c - 'a' + 10));  	c = ReadChar ();  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadString,The following statement contains a magic number: hexVal = 16 * hexVal + ((c <= '9') ? (c - '0') : (c - 'a' + 10));  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadString,The following statement contains a magic number: hexVal = 16 * hexVal + ((c <= '9') ? (c - '0') : (c - 'a' + 10));  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,InterestingCallStack,The following statement contains a magic number: for (int i = stackPtr - 2; i >= 0; i--) {  	switch (vertexStack [i].interestLevel & InterestLevel.InterestingChildren) {  	case InterestLevel.Ignore:  		break;  	case InterestLevel.InterestingChildren:  		return true;  	default:  		return false;  	}  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,AddTimePos,The following statement contains a magic number: while (time + (1L << 31) * 0.001 < lastTime)  	time += (1L << 32) * 0.001;  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,AddTimePos,The following statement contains a magic number: while (time + (1L << 31) * 0.001 < lastTime)  	time += (1L << 32) * 0.001;  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,AddTimePos,The following statement contains a magic number: while (time + (1L << 31) * 0.001 < lastTime)  	time += (1L << 32) * 0.001;  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,AddTimePos,The following statement contains a magic number: while (time + (1L << 31) * 0.001 < lastTime)  	time += (1L << 32) * 0.001;  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,AddTimePos,The following statement contains a magic number: time += (1L << 32) * 0.001;  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,AddTimePos,The following statement contains a magic number: time += (1L << 32) * 0.001;  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,AddTimePos,The following statement contains a magic number: if (timePosCount < maxTimePosCount / 2) {  	if (timePosIndex < timePosCount) {  		// This is the case where we read the file again for whatever reason  		//Debug.Assert(timePos[timePosIndex].time == lastTime && timePos[timePosIndex].pos == pos);  		return timePosIndex++;  	}  	else {  		timePos [timePosCount] = new TimePos (lastTime' pos);  		timePosIndex++;  		return timePosCount++;  	}  }  else  	return timePosIndex - 1;  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,TimeToTickIndex,The following statement contains a magic number: while (l + 1 < r) {  	int m = (l + r) / 2;  	if (time < timePos [m].time) {  		r = m;  	}  	else {  		l = m;  	}  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: if (timePos == null)  	timePos = new TimePos[1000];  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: timePos = new TimePos[1000];  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: try {  	System.IO.Stream s = new System.IO.FileStream (fileName' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.ReadWrite);  	r = new System.IO.StreamReader (s);  	for (timePosIndex = timePosCount; timePosIndex > 0; timePosIndex--)  		if (timePos [timePosIndex - 1].pos <= startFileOffset)  			break;  	// start at the beginning if no later start point available or asked for info that can only  	// be constructed by reading the whole file.  	if (timePosIndex <= 1 || readLogResult.relocatedHistogram != null || readLogResult.finalizerHistogram != null || readLogResult.criticalFinalizerHistogram != null || readLogResult.liveObjectTable != null) {  		pos = 0;  		timePosIndex = 1;  	}  	else {  		timePosIndex--;  		pos = timePos [timePosIndex].pos;  	}  	if (timePosCount == 0) {  		timePos [0] = new TimePos (0.0' 0);  		timePosCount = timePosIndex = 1;  	}  	s.Position = pos;  	buffer = new byte[4096];  	bufPos = 0;  	bufLevel = 0;  	int maxProgress = (int)(r.BaseStream.Length / 1024);  	line = 1;  	StringBuilder sb = new StringBuilder ();  	ulong[] ulongStack = new ulong[1000];  	int[] intStack = new int[1000];  	int stackPtr = 0;  	c = ReadChar ();  	bool thisIsR = false' previousWasR;  	bool extendedRootInfoSeen = false;  	int lastTickIndex = 0;  	bool newGcEvent = false;  	while (c != -1) {  		if (pos > endFileOffset)  			break;  		if ((line % 1024) == 0) {  			int currentProgress = (int)(pos / 1024);  			if (currentProgress <= maxProgress) {  			}  		}  		lastLineStartPos = pos - 1;  		previousWasR = thisIsR;  		thisIsR = false;  		switch (c) {  		case -1:  			break;  		case 'F':  		case 'f': {  			c = ReadChar ();  			int funcIndex = ReadInt ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string name = ReadString (sb' ' '' false' 255);  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string signature = ReadString (sb' '\r'' true' 1023);  			ulong addr = ReadULong ();  			uint size = ReadUInt ();  			int modIndex = ReadInt ();  			int stackIndex = ReadInt ();  			if (c != -1) {  				EnsureStringCapacity (funcIndex' ref funcName);  				funcName [funcIndex] = name;  				EnsureStringCapacity (funcIndex' ref funcSignature);  				funcSignature [funcIndex] = signature;  				EnsureIntCapacity (funcIndex' ref funcModule);  				funcModule [funcIndex] = modIndex;  				string nameAndSignature = name;  				if (signature != null)  					nameAndSignature = name + ' ' + signature;  				if (stackIndex >= 0 && readLogResult.functionList != null) {  					funcSignatureIdHash [nameAndSignature] = funcIndex;  					readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  				}  			}  			break;  		}  		case 'T':  		case 't': {  			c = ReadChar ();  			int typeIndex = ReadInt ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			if (c != -1 && Char.IsDigit ((char)c)) {  				if (ReadInt () != 0) {  					finalizableTypes [typeIndex] = true;  				}  			}  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string typeName = ReadString (sb' '\r'' false' 1023);  			if (c != -1) {  				AddTypeName (typeIndex' typeName);  			}  			break;  		}  		// 'A' with thread identifier  		case '!': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong id = ReadULong ();  			int typeSizeStackTraceIndex = ReadInt ();  			typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  			if (c != -1) {  				if (readLogResult.liveObjectTable != null)  					readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  				if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  					// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  					readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  				}  				List<string> prev;  				if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  					foreach (string assemblyName in prev) {  						assemblies [assemblyName] = -typeSizeStackTraceIndex;  					}  					prev.Clear ();  				}  			}  			readLogResult.hadAllocInfo = true;  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'A':  		case 'a': {  			c = ReadChar ();  			ulong id = ReadULong ();  			int typeSizeStackTraceIndex = ReadInt ();  			typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  			if (c != -1) {  				if (readLogResult.liveObjectTable != null)  					readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  				if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  					// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  					readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  				}  			}  			readLogResult.hadAllocInfo = true;  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'C':  		case 'c': {  			c = ReadChar ();  			if (pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			int threadIndex = ReadInt ();  			int stackTraceIndex = ReadInt ();  			stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  			if (c != -1) {  				if (readLogResult.callstackHistogram != null) {  					readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  				}  				List<string> prev;  				if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  					foreach (string assemblyName in prev) {  						assemblies [assemblyName] = stackTraceIndex;  					}  					prev.Clear ();  				}  			}  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'E':  		case 'e': {  			c = ReadChar ();  			extendedRootInfoSeen = true;  			thisIsR = true;  			if (pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			if (!previousWasR) {  				heapDumpEventList.AddEvent (lastTickIndex' null);  				if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  					readLogResult.objectGraph.BuildTypeGraph ();  					readLogResult.objectGraph.Neuter ();  				}  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  					readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  					for (int i = 0; i < h.Length; i++)  						readLogResult.heapDumpHistograms [i] = h [i];  					readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  				}  				readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  			}  			ulong objectID = ReadULong ();  			GcRootKind rootKind = (GcRootKind)ReadInt ();  			GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  			ulong rootID = ReadULong ();  			ObjectGraph objectGraph = readLogResult.objectGraph;  			if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  				string rootName;  				switch (rootKind) {  				case GcRootKind.Stack:  					rootName = "Stack";  					break;  				case GcRootKind.Finalizer:  					rootName = "Finalizer";  					break;  				case GcRootKind.Handle:  					rootName = "Handle";  					break;  				default:  					rootName = "Other";  					break;  				}  				if ((rootFlags & GcRootFlags.Pinning) != 0)  					rootName += "' Pinning";  				if ((rootFlags & GcRootFlags.WeakRef) != 0)  					rootName += "' WeakRef";  				if ((rootFlags & GcRootFlags.Interior) != 0)  					rootName += "' Interior";  				if ((rootFlags & GcRootFlags.Refcounted) != 0)  					rootName += "' RefCounted";  				int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  				ulongStack [0] = objectID;  				ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  				objectGraph.AddRootObject (rootObject' rootID);  			}  			break;  		}  		case 'R':  		case 'r': {  			c = ReadChar ();  			thisIsR = true;  			if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				}  				break;  			}  			if (!previousWasR) {  				heapDumpEventList.AddEvent (lastTickIndex' null);  				if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  					readLogResult.objectGraph.BuildTypeGraph ();  					readLogResult.objectGraph.Neuter ();  				}  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  					readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  					for (int i = 0; i < h.Length; i++)  						readLogResult.heapDumpHistograms [i] = h [i];  					readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  				}  				readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  			}  			stackPtr = 0;  			ulong objectID;  			while ((objectID = ReadULong ()) != ulong.MaxValue) {  				if (objectID > 0) {  					ulongStack [stackPtr] = objectID;  					stackPtr++;  					if (stackPtr >= ulongStack.Length)  						ulongStack = GrowULongVector (ulongStack);  				}  			}  			if (c != -1) {  				if (readLogResult.objectGraph != null)  					readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  			}  			break;  		}  		case 'O':  		case 'o': {  			c = ReadChar ();  			if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			ulong objectId = ReadULong ();  			int typeIndex = ReadInt ();  			uint size = ReadUInt ();  			stackPtr = 0;  			ulong objectID;  			while ((objectID = ReadULong ()) != ulong.MaxValue) {  				if (objectID > 0) {  					ulongStack [stackPtr] = objectID;  					stackPtr++;  					if (stackPtr >= ulongStack.Length)  						ulongStack = GrowULongVector (ulongStack);  				}  			}  			if (c != -1) {  				ObjectGraph objectGraph = readLogResult.objectGraph;  				objectGraph.GetOrCreateGcType (typeIndex);  				int typeSizeStackTraceId = -1;  				int allocTickIndex = 0;  				// try to find the allocation stack trace and allocation time  				// from the live object table  				if (readLogResult.liveObjectTable != null) {  					LiveObjectTable.LiveObject liveObject;  					readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  					if (liveObject.id == objectId) {  						int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  						int typeIndexFromLiveObject = stackTrace [0];  						if (typeIndexFromLiveObject == typeIndex) {  							typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  							allocTickIndex = liveObject.allocTickIndex;  							Histogram[] h = readLogResult.heapDumpHistograms;  							if (h != null)  								h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  						}  					}  				}  				if (typeSizeStackTraceId == -1)  					typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  				ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  				gcObject.AllocTickIndex = allocTickIndex;  			}  			break;  		}  		case 'M':  		case 'm': {  			c = ReadChar ();  			int modIndex = ReadInt ();  			sb.Length = 0;  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			if (c != -1) {  				string lineString = sb.ToString ();  				int addrPos = lineString.LastIndexOf (" 0x");  				if (addrPos <= 0)  					addrPos = lineString.Length;  				int backSlashPos = lineString.LastIndexOf (@"\");  				if (backSlashPos <= 0)  					backSlashPos = -1;  				string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  				string fullName = lineString.Substring (0' addrPos);  				EnsureStringCapacity (modIndex' ref modBasicName);  				modBasicName [modIndex] = basicName;  				EnsureStringCapacity (modIndex' ref modFullName);  				modFullName [modIndex] = fullName;  			}  			break;  		}  		case 'U':  		case 'u': {  			c = ReadChar ();  			ulong oldId = ReadULong ();  			ulong newId = ReadULong ();  			uint length = ReadUInt ();  			Histogram reloHist = null;  			if (pos >= startFileOffset && pos < endFileOffset)  				reloHist = readLogResult.relocatedHistogram;  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  			break;  		}  		case 'V':  		case 'v': {  			c = ReadChar ();  			ulong startId = ReadULong ();  			uint length = ReadUInt ();  			Histogram reloHist = null;  			if (pos >= startFileOffset && pos < endFileOffset)  				reloHist = readLogResult.relocatedHistogram;  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  			break;  		}  		case 'B':  		case 'b':  			c = ReadChar ();  			int startGC = ReadInt ();  			int induced = ReadInt ();  			int condemnedGeneration = ReadInt ();  			if (startGC != 0)  				newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  			if (newGcEvent) {  				if (startGC != 0) {  					if (induced != 0) {  						for (int gen = 0; gen <= condemnedGeneration; gen++)  							inducedGcCount [gen]++;  					}  				}  				else {  					int condemnedLimit = condemnedGeneration;  					if (condemnedLimit == 2)  						condemnedLimit = 3;  					for (int gen = 0; gen <= condemnedLimit; gen++) {  						cumulativeGenerationSize [gen] += generationSize [gen];  						gcCount [gen]++;  					}  				}  			}  			for (int gen = 0; gen <= 3; gen++)  				generationSize [gen] = 0;  			while (c >= ' ') {  				ulong rangeStart = ReadULong ();  				ulong rangeLength = ReadULong ();  				ulong rangeLengthReserved = ReadULong ();  				int rangeGeneration = ReadInt ();  				if (c == -1 || rangeGeneration < 0)  					break;  				if (readLogResult.liveObjectTable != null) {  					if (startGC != 0) {  						if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  							readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  					}  					else {  						readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  					}  				}  				generationSize [rangeGeneration] += rangeLength;  			}  			if (startGC == 0 && readLogResult.liveObjectTable != null) {  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  			}  			break;  		case 'L':  		case 'l': {  			c = ReadChar ();  			int isCritical = ReadInt ();  			ulong objectId = ReadULong ();  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  				// try to find the allocation stack trace and allocation time  				// from the live object table  				LiveObjectTable.LiveObject liveObject;  				readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  				if (liveObject.id == objectId) {  					if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  						readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  					if (readLogResult.finalizerHistogram != null)  						readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  				}  			}  			break;  		}  		case 'I':  		case 'i':  			c = ReadChar ();  			int tickCount = ReadInt ();  			if (c != -1) {  				lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  				if (maxTickIndex < lastTickIndex)  					maxTickIndex = lastTickIndex;  			}  			break;  		case 'G':  		case 'g':  			c = ReadChar ();  			int gcGen0Count = ReadInt ();  			int gcGen1Count = ReadInt ();  			int gcGen2Count = ReadInt ();  			// if the newer 'b' lines occur' disregard the 'g' lines.  			if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  				if (c == -1 || gcGen0Count < 0)  					readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  				else  					readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  			}  			break;  		case 'N':  		case 'n': {  			c = ReadChar ();  			int funcIndex;  			int stackTraceIndex = ReadInt ();  			stackPtr = 0;  			int flag = ReadInt ();  			int matched = flag / 4;  			int hadTypeId = (flag & 2);  			bool hasTypeId = (flag & 1) == 1;  			if (hasTypeId) {  				intStack [stackPtr++] = ReadInt ();  				intStack [stackPtr++] = ReadInt ();  			}  			if (matched > 0 && c != -1) {  				/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  				otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  				int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  				if (matched > stacktrace.Length - hadTypeId)  					matched = stacktrace.Length - hadTypeId;  				for (int i = 0; i < matched; i++) {  					int funcId = stacktrace [i + hadTypeId];  					//Debug.Assert(funcId < funcName.Length);  					if (funcName [funcId] == null)  						funcName [funcId] = String.Empty;  					intStack [stackPtr++] = funcId;  					if (stackPtr >= intStack.Length) {  						intStack = GrowIntVector (intStack);  					}  				}  			}  			while ((funcIndex = ReadInt ()) >= 0) {  				intStack [stackPtr] = funcIndex;  				stackPtr++;  				if (stackPtr >= intStack.Length)  					intStack = GrowIntVector (intStack);  			}  			if (c != -1) {  				stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  			}  			break;  		}  		case 'y':  		case 'Y': {  			c = ReadChar ();  			int threadid = ReadInt ();  			if (!assembliesJustLoaded.ContainsKey (threadid)) {  				assembliesJustLoaded [threadid] = new List<string> ();  			}  			/* int assemblyId = */ReadInt ();  			while (c == ' ' || c == '\t') {  				c = ReadChar ();  			}  			sb.Length = 0;  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			string assemblyName = sb.ToString ();  			assembliesJustLoaded [threadid].Add (assemblyName);  			break;  		}  		case 'S':  		case 's': {  			c = ReadChar ();  			int stackTraceIndex = ReadInt ();  			int funcIndex;  			stackPtr = 0;  			while ((funcIndex = ReadInt ()) >= 0) {  				intStack [stackPtr] = funcIndex;  				stackPtr++;  				if (stackPtr >= intStack.Length)  					intStack = GrowIntVector (intStack);  			}  			if (c != -1) {  				stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  			}  			break;  		}  		case 'Z':  		case 'z': {  			sb.Length = 0;  			c = ReadChar ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			if (c != -1) {  				lastTickIndex = AddTimePos (lastLineStartPos);  				if (maxTickIndex < lastTickIndex)  					maxTickIndex = lastTickIndex;  				commentEventList.AddEvent (lastTickIndex' sb.ToString ());  			}  			break;  		}  		case 'H':  		case 'h': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong handleId = ReadULong ();  			ulong initialObjectId = ReadULong ();  			int stacktraceId = ReadInt ();  			if (c != -1) {  				if (readLogResult.handleHash != null)  					readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  				if (readLogResult.createdHandlesHistogram != null)  					readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  			}  			break;  		}  		case 'J':  		case 'j': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong handleId = ReadULong ();  			int stacktraceId = ReadInt ();  			if (c != -1) {  				if (readLogResult.handleHash != null) {  					if (readLogResult.handleHash.ContainsKey (handleId))  						readLogResult.handleHash.Remove (handleId);  					else {  						//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  						//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  						//for (int i = stacktrace.Length; --i >= 0; )  						//{  						//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  						//}  					}  				}  				if (readLogResult.destroyedHandlesHistogram != null)  					readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  			}  			break;  		}  		default: {  			// just ignore the unknown  			while (c != '\n' && c != '\r') {  				c = ReadChar ();  			}  			break;  		}  		}  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		if (c == '\r')  			c = ReadChar ();  		if (c == '\n') {  			c = ReadChar ();  			line++;  		}  	}  	//                readLogResult.functionList.ReportCallCountSizes(readLogResult.callstackHistogram);  }  //            catch (Exception)  //            {  //                throw new Exception(string.Format("Bad format in log file {0} line {1}"' fileName' line));  //                throw;  //            }  finally {  	if (r != null)  		r.Close ();  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: try {  	System.IO.Stream s = new System.IO.FileStream (fileName' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.ReadWrite);  	r = new System.IO.StreamReader (s);  	for (timePosIndex = timePosCount; timePosIndex > 0; timePosIndex--)  		if (timePos [timePosIndex - 1].pos <= startFileOffset)  			break;  	// start at the beginning if no later start point available or asked for info that can only  	// be constructed by reading the whole file.  	if (timePosIndex <= 1 || readLogResult.relocatedHistogram != null || readLogResult.finalizerHistogram != null || readLogResult.criticalFinalizerHistogram != null || readLogResult.liveObjectTable != null) {  		pos = 0;  		timePosIndex = 1;  	}  	else {  		timePosIndex--;  		pos = timePos [timePosIndex].pos;  	}  	if (timePosCount == 0) {  		timePos [0] = new TimePos (0.0' 0);  		timePosCount = timePosIndex = 1;  	}  	s.Position = pos;  	buffer = new byte[4096];  	bufPos = 0;  	bufLevel = 0;  	int maxProgress = (int)(r.BaseStream.Length / 1024);  	line = 1;  	StringBuilder sb = new StringBuilder ();  	ulong[] ulongStack = new ulong[1000];  	int[] intStack = new int[1000];  	int stackPtr = 0;  	c = ReadChar ();  	bool thisIsR = false' previousWasR;  	bool extendedRootInfoSeen = false;  	int lastTickIndex = 0;  	bool newGcEvent = false;  	while (c != -1) {  		if (pos > endFileOffset)  			break;  		if ((line % 1024) == 0) {  			int currentProgress = (int)(pos / 1024);  			if (currentProgress <= maxProgress) {  			}  		}  		lastLineStartPos = pos - 1;  		previousWasR = thisIsR;  		thisIsR = false;  		switch (c) {  		case -1:  			break;  		case 'F':  		case 'f': {  			c = ReadChar ();  			int funcIndex = ReadInt ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string name = ReadString (sb' ' '' false' 255);  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string signature = ReadString (sb' '\r'' true' 1023);  			ulong addr = ReadULong ();  			uint size = ReadUInt ();  			int modIndex = ReadInt ();  			int stackIndex = ReadInt ();  			if (c != -1) {  				EnsureStringCapacity (funcIndex' ref funcName);  				funcName [funcIndex] = name;  				EnsureStringCapacity (funcIndex' ref funcSignature);  				funcSignature [funcIndex] = signature;  				EnsureIntCapacity (funcIndex' ref funcModule);  				funcModule [funcIndex] = modIndex;  				string nameAndSignature = name;  				if (signature != null)  					nameAndSignature = name + ' ' + signature;  				if (stackIndex >= 0 && readLogResult.functionList != null) {  					funcSignatureIdHash [nameAndSignature] = funcIndex;  					readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  				}  			}  			break;  		}  		case 'T':  		case 't': {  			c = ReadChar ();  			int typeIndex = ReadInt ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			if (c != -1 && Char.IsDigit ((char)c)) {  				if (ReadInt () != 0) {  					finalizableTypes [typeIndex] = true;  				}  			}  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string typeName = ReadString (sb' '\r'' false' 1023);  			if (c != -1) {  				AddTypeName (typeIndex' typeName);  			}  			break;  		}  		// 'A' with thread identifier  		case '!': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong id = ReadULong ();  			int typeSizeStackTraceIndex = ReadInt ();  			typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  			if (c != -1) {  				if (readLogResult.liveObjectTable != null)  					readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  				if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  					// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  					readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  				}  				List<string> prev;  				if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  					foreach (string assemblyName in prev) {  						assemblies [assemblyName] = -typeSizeStackTraceIndex;  					}  					prev.Clear ();  				}  			}  			readLogResult.hadAllocInfo = true;  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'A':  		case 'a': {  			c = ReadChar ();  			ulong id = ReadULong ();  			int typeSizeStackTraceIndex = ReadInt ();  			typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  			if (c != -1) {  				if (readLogResult.liveObjectTable != null)  					readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  				if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  					// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  					readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  				}  			}  			readLogResult.hadAllocInfo = true;  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'C':  		case 'c': {  			c = ReadChar ();  			if (pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			int threadIndex = ReadInt ();  			int stackTraceIndex = ReadInt ();  			stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  			if (c != -1) {  				if (readLogResult.callstackHistogram != null) {  					readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  				}  				List<string> prev;  				if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  					foreach (string assemblyName in prev) {  						assemblies [assemblyName] = stackTraceIndex;  					}  					prev.Clear ();  				}  			}  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'E':  		case 'e': {  			c = ReadChar ();  			extendedRootInfoSeen = true;  			thisIsR = true;  			if (pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			if (!previousWasR) {  				heapDumpEventList.AddEvent (lastTickIndex' null);  				if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  					readLogResult.objectGraph.BuildTypeGraph ();  					readLogResult.objectGraph.Neuter ();  				}  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  					readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  					for (int i = 0; i < h.Length; i++)  						readLogResult.heapDumpHistograms [i] = h [i];  					readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  				}  				readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  			}  			ulong objectID = ReadULong ();  			GcRootKind rootKind = (GcRootKind)ReadInt ();  			GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  			ulong rootID = ReadULong ();  			ObjectGraph objectGraph = readLogResult.objectGraph;  			if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  				string rootName;  				switch (rootKind) {  				case GcRootKind.Stack:  					rootName = "Stack";  					break;  				case GcRootKind.Finalizer:  					rootName = "Finalizer";  					break;  				case GcRootKind.Handle:  					rootName = "Handle";  					break;  				default:  					rootName = "Other";  					break;  				}  				if ((rootFlags & GcRootFlags.Pinning) != 0)  					rootName += "' Pinning";  				if ((rootFlags & GcRootFlags.WeakRef) != 0)  					rootName += "' WeakRef";  				if ((rootFlags & GcRootFlags.Interior) != 0)  					rootName += "' Interior";  				if ((rootFlags & GcRootFlags.Refcounted) != 0)  					rootName += "' RefCounted";  				int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  				ulongStack [0] = objectID;  				ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  				objectGraph.AddRootObject (rootObject' rootID);  			}  			break;  		}  		case 'R':  		case 'r': {  			c = ReadChar ();  			thisIsR = true;  			if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				}  				break;  			}  			if (!previousWasR) {  				heapDumpEventList.AddEvent (lastTickIndex' null);  				if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  					readLogResult.objectGraph.BuildTypeGraph ();  					readLogResult.objectGraph.Neuter ();  				}  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  					readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  					for (int i = 0; i < h.Length; i++)  						readLogResult.heapDumpHistograms [i] = h [i];  					readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  				}  				readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  			}  			stackPtr = 0;  			ulong objectID;  			while ((objectID = ReadULong ()) != ulong.MaxValue) {  				if (objectID > 0) {  					ulongStack [stackPtr] = objectID;  					stackPtr++;  					if (stackPtr >= ulongStack.Length)  						ulongStack = GrowULongVector (ulongStack);  				}  			}  			if (c != -1) {  				if (readLogResult.objectGraph != null)  					readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  			}  			break;  		}  		case 'O':  		case 'o': {  			c = ReadChar ();  			if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			ulong objectId = ReadULong ();  			int typeIndex = ReadInt ();  			uint size = ReadUInt ();  			stackPtr = 0;  			ulong objectID;  			while ((objectID = ReadULong ()) != ulong.MaxValue) {  				if (objectID > 0) {  					ulongStack [stackPtr] = objectID;  					stackPtr++;  					if (stackPtr >= ulongStack.Length)  						ulongStack = GrowULongVector (ulongStack);  				}  			}  			if (c != -1) {  				ObjectGraph objectGraph = readLogResult.objectGraph;  				objectGraph.GetOrCreateGcType (typeIndex);  				int typeSizeStackTraceId = -1;  				int allocTickIndex = 0;  				// try to find the allocation stack trace and allocation time  				// from the live object table  				if (readLogResult.liveObjectTable != null) {  					LiveObjectTable.LiveObject liveObject;  					readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  					if (liveObject.id == objectId) {  						int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  						int typeIndexFromLiveObject = stackTrace [0];  						if (typeIndexFromLiveObject == typeIndex) {  							typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  							allocTickIndex = liveObject.allocTickIndex;  							Histogram[] h = readLogResult.heapDumpHistograms;  							if (h != null)  								h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  						}  					}  				}  				if (typeSizeStackTraceId == -1)  					typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  				ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  				gcObject.AllocTickIndex = allocTickIndex;  			}  			break;  		}  		case 'M':  		case 'm': {  			c = ReadChar ();  			int modIndex = ReadInt ();  			sb.Length = 0;  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			if (c != -1) {  				string lineString = sb.ToString ();  				int addrPos = lineString.LastIndexOf (" 0x");  				if (addrPos <= 0)  					addrPos = lineString.Length;  				int backSlashPos = lineString.LastIndexOf (@"\");  				if (backSlashPos <= 0)  					backSlashPos = -1;  				string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  				string fullName = lineString.Substring (0' addrPos);  				EnsureStringCapacity (modIndex' ref modBasicName);  				modBasicName [modIndex] = basicName;  				EnsureStringCapacity (modIndex' ref modFullName);  				modFullName [modIndex] = fullName;  			}  			break;  		}  		case 'U':  		case 'u': {  			c = ReadChar ();  			ulong oldId = ReadULong ();  			ulong newId = ReadULong ();  			uint length = ReadUInt ();  			Histogram reloHist = null;  			if (pos >= startFileOffset && pos < endFileOffset)  				reloHist = readLogResult.relocatedHistogram;  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  			break;  		}  		case 'V':  		case 'v': {  			c = ReadChar ();  			ulong startId = ReadULong ();  			uint length = ReadUInt ();  			Histogram reloHist = null;  			if (pos >= startFileOffset && pos < endFileOffset)  				reloHist = readLogResult.relocatedHistogram;  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  			break;  		}  		case 'B':  		case 'b':  			c = ReadChar ();  			int startGC = ReadInt ();  			int induced = ReadInt ();  			int condemnedGeneration = ReadInt ();  			if (startGC != 0)  				newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  			if (newGcEvent) {  				if (startGC != 0) {  					if (induced != 0) {  						for (int gen = 0; gen <= condemnedGeneration; gen++)  							inducedGcCount [gen]++;  					}  				}  				else {  					int condemnedLimit = condemnedGeneration;  					if (condemnedLimit == 2)  						condemnedLimit = 3;  					for (int gen = 0; gen <= condemnedLimit; gen++) {  						cumulativeGenerationSize [gen] += generationSize [gen];  						gcCount [gen]++;  					}  				}  			}  			for (int gen = 0; gen <= 3; gen++)  				generationSize [gen] = 0;  			while (c >= ' ') {  				ulong rangeStart = ReadULong ();  				ulong rangeLength = ReadULong ();  				ulong rangeLengthReserved = ReadULong ();  				int rangeGeneration = ReadInt ();  				if (c == -1 || rangeGeneration < 0)  					break;  				if (readLogResult.liveObjectTable != null) {  					if (startGC != 0) {  						if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  							readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  					}  					else {  						readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  					}  				}  				generationSize [rangeGeneration] += rangeLength;  			}  			if (startGC == 0 && readLogResult.liveObjectTable != null) {  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  			}  			break;  		case 'L':  		case 'l': {  			c = ReadChar ();  			int isCritical = ReadInt ();  			ulong objectId = ReadULong ();  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  				// try to find the allocation stack trace and allocation time  				// from the live object table  				LiveObjectTable.LiveObject liveObject;  				readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  				if (liveObject.id == objectId) {  					if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  						readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  					if (readLogResult.finalizerHistogram != null)  						readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  				}  			}  			break;  		}  		case 'I':  		case 'i':  			c = ReadChar ();  			int tickCount = ReadInt ();  			if (c != -1) {  				lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  				if (maxTickIndex < lastTickIndex)  					maxTickIndex = lastTickIndex;  			}  			break;  		case 'G':  		case 'g':  			c = ReadChar ();  			int gcGen0Count = ReadInt ();  			int gcGen1Count = ReadInt ();  			int gcGen2Count = ReadInt ();  			// if the newer 'b' lines occur' disregard the 'g' lines.  			if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  				if (c == -1 || gcGen0Count < 0)  					readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  				else  					readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  			}  			break;  		case 'N':  		case 'n': {  			c = ReadChar ();  			int funcIndex;  			int stackTraceIndex = ReadInt ();  			stackPtr = 0;  			int flag = ReadInt ();  			int matched = flag / 4;  			int hadTypeId = (flag & 2);  			bool hasTypeId = (flag & 1) == 1;  			if (hasTypeId) {  				intStack [stackPtr++] = ReadInt ();  				intStack [stackPtr++] = ReadInt ();  			}  			if (matched > 0 && c != -1) {  				/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  				otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  				int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  				if (matched > stacktrace.Length - hadTypeId)  					matched = stacktrace.Length - hadTypeId;  				for (int i = 0; i < matched; i++) {  					int funcId = stacktrace [i + hadTypeId];  					//Debug.Assert(funcId < funcName.Length);  					if (funcName [funcId] == null)  						funcName [funcId] = String.Empty;  					intStack [stackPtr++] = funcId;  					if (stackPtr >= intStack.Length) {  						intStack = GrowIntVector (intStack);  					}  				}  			}  			while ((funcIndex = ReadInt ()) >= 0) {  				intStack [stackPtr] = funcIndex;  				stackPtr++;  				if (stackPtr >= intStack.Length)  					intStack = GrowIntVector (intStack);  			}  			if (c != -1) {  				stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  			}  			break;  		}  		case 'y':  		case 'Y': {  			c = ReadChar ();  			int threadid = ReadInt ();  			if (!assembliesJustLoaded.ContainsKey (threadid)) {  				assembliesJustLoaded [threadid] = new List<string> ();  			}  			/* int assemblyId = */ReadInt ();  			while (c == ' ' || c == '\t') {  				c = ReadChar ();  			}  			sb.Length = 0;  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			string assemblyName = sb.ToString ();  			assembliesJustLoaded [threadid].Add (assemblyName);  			break;  		}  		case 'S':  		case 's': {  			c = ReadChar ();  			int stackTraceIndex = ReadInt ();  			int funcIndex;  			stackPtr = 0;  			while ((funcIndex = ReadInt ()) >= 0) {  				intStack [stackPtr] = funcIndex;  				stackPtr++;  				if (stackPtr >= intStack.Length)  					intStack = GrowIntVector (intStack);  			}  			if (c != -1) {  				stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  			}  			break;  		}  		case 'Z':  		case 'z': {  			sb.Length = 0;  			c = ReadChar ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			if (c != -1) {  				lastTickIndex = AddTimePos (lastLineStartPos);  				if (maxTickIndex < lastTickIndex)  					maxTickIndex = lastTickIndex;  				commentEventList.AddEvent (lastTickIndex' sb.ToString ());  			}  			break;  		}  		case 'H':  		case 'h': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong handleId = ReadULong ();  			ulong initialObjectId = ReadULong ();  			int stacktraceId = ReadInt ();  			if (c != -1) {  				if (readLogResult.handleHash != null)  					readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  				if (readLogResult.createdHandlesHistogram != null)  					readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  			}  			break;  		}  		case 'J':  		case 'j': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong handleId = ReadULong ();  			int stacktraceId = ReadInt ();  			if (c != -1) {  				if (readLogResult.handleHash != null) {  					if (readLogResult.handleHash.ContainsKey (handleId))  						readLogResult.handleHash.Remove (handleId);  					else {  						//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  						//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  						//for (int i = stacktrace.Length; --i >= 0; )  						//{  						//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  						//}  					}  				}  				if (readLogResult.destroyedHandlesHistogram != null)  					readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  			}  			break;  		}  		default: {  			// just ignore the unknown  			while (c != '\n' && c != '\r') {  				c = ReadChar ();  			}  			break;  		}  		}  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		if (c == '\r')  			c = ReadChar ();  		if (c == '\n') {  			c = ReadChar ();  			line++;  		}  	}  	//                readLogResult.functionList.ReportCallCountSizes(readLogResult.callstackHistogram);  }  //            catch (Exception)  //            {  //                throw new Exception(string.Format("Bad format in log file {0} line {1}"' fileName' line));  //                throw;  //            }  finally {  	if (r != null)  		r.Close ();  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: try {  	System.IO.Stream s = new System.IO.FileStream (fileName' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.ReadWrite);  	r = new System.IO.StreamReader (s);  	for (timePosIndex = timePosCount; timePosIndex > 0; timePosIndex--)  		if (timePos [timePosIndex - 1].pos <= startFileOffset)  			break;  	// start at the beginning if no later start point available or asked for info that can only  	// be constructed by reading the whole file.  	if (timePosIndex <= 1 || readLogResult.relocatedHistogram != null || readLogResult.finalizerHistogram != null || readLogResult.criticalFinalizerHistogram != null || readLogResult.liveObjectTable != null) {  		pos = 0;  		timePosIndex = 1;  	}  	else {  		timePosIndex--;  		pos = timePos [timePosIndex].pos;  	}  	if (timePosCount == 0) {  		timePos [0] = new TimePos (0.0' 0);  		timePosCount = timePosIndex = 1;  	}  	s.Position = pos;  	buffer = new byte[4096];  	bufPos = 0;  	bufLevel = 0;  	int maxProgress = (int)(r.BaseStream.Length / 1024);  	line = 1;  	StringBuilder sb = new StringBuilder ();  	ulong[] ulongStack = new ulong[1000];  	int[] intStack = new int[1000];  	int stackPtr = 0;  	c = ReadChar ();  	bool thisIsR = false' previousWasR;  	bool extendedRootInfoSeen = false;  	int lastTickIndex = 0;  	bool newGcEvent = false;  	while (c != -1) {  		if (pos > endFileOffset)  			break;  		if ((line % 1024) == 0) {  			int currentProgress = (int)(pos / 1024);  			if (currentProgress <= maxProgress) {  			}  		}  		lastLineStartPos = pos - 1;  		previousWasR = thisIsR;  		thisIsR = false;  		switch (c) {  		case -1:  			break;  		case 'F':  		case 'f': {  			c = ReadChar ();  			int funcIndex = ReadInt ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string name = ReadString (sb' ' '' false' 255);  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string signature = ReadString (sb' '\r'' true' 1023);  			ulong addr = ReadULong ();  			uint size = ReadUInt ();  			int modIndex = ReadInt ();  			int stackIndex = ReadInt ();  			if (c != -1) {  				EnsureStringCapacity (funcIndex' ref funcName);  				funcName [funcIndex] = name;  				EnsureStringCapacity (funcIndex' ref funcSignature);  				funcSignature [funcIndex] = signature;  				EnsureIntCapacity (funcIndex' ref funcModule);  				funcModule [funcIndex] = modIndex;  				string nameAndSignature = name;  				if (signature != null)  					nameAndSignature = name + ' ' + signature;  				if (stackIndex >= 0 && readLogResult.functionList != null) {  					funcSignatureIdHash [nameAndSignature] = funcIndex;  					readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  				}  			}  			break;  		}  		case 'T':  		case 't': {  			c = ReadChar ();  			int typeIndex = ReadInt ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			if (c != -1 && Char.IsDigit ((char)c)) {  				if (ReadInt () != 0) {  					finalizableTypes [typeIndex] = true;  				}  			}  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string typeName = ReadString (sb' '\r'' false' 1023);  			if (c != -1) {  				AddTypeName (typeIndex' typeName);  			}  			break;  		}  		// 'A' with thread identifier  		case '!': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong id = ReadULong ();  			int typeSizeStackTraceIndex = ReadInt ();  			typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  			if (c != -1) {  				if (readLogResult.liveObjectTable != null)  					readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  				if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  					// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  					readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  				}  				List<string> prev;  				if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  					foreach (string assemblyName in prev) {  						assemblies [assemblyName] = -typeSizeStackTraceIndex;  					}  					prev.Clear ();  				}  			}  			readLogResult.hadAllocInfo = true;  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'A':  		case 'a': {  			c = ReadChar ();  			ulong id = ReadULong ();  			int typeSizeStackTraceIndex = ReadInt ();  			typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  			if (c != -1) {  				if (readLogResult.liveObjectTable != null)  					readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  				if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  					// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  					readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  				}  			}  			readLogResult.hadAllocInfo = true;  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'C':  		case 'c': {  			c = ReadChar ();  			if (pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			int threadIndex = ReadInt ();  			int stackTraceIndex = ReadInt ();  			stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  			if (c != -1) {  				if (readLogResult.callstackHistogram != null) {  					readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  				}  				List<string> prev;  				if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  					foreach (string assemblyName in prev) {  						assemblies [assemblyName] = stackTraceIndex;  					}  					prev.Clear ();  				}  			}  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'E':  		case 'e': {  			c = ReadChar ();  			extendedRootInfoSeen = true;  			thisIsR = true;  			if (pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			if (!previousWasR) {  				heapDumpEventList.AddEvent (lastTickIndex' null);  				if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  					readLogResult.objectGraph.BuildTypeGraph ();  					readLogResult.objectGraph.Neuter ();  				}  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  					readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  					for (int i = 0; i < h.Length; i++)  						readLogResult.heapDumpHistograms [i] = h [i];  					readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  				}  				readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  			}  			ulong objectID = ReadULong ();  			GcRootKind rootKind = (GcRootKind)ReadInt ();  			GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  			ulong rootID = ReadULong ();  			ObjectGraph objectGraph = readLogResult.objectGraph;  			if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  				string rootName;  				switch (rootKind) {  				case GcRootKind.Stack:  					rootName = "Stack";  					break;  				case GcRootKind.Finalizer:  					rootName = "Finalizer";  					break;  				case GcRootKind.Handle:  					rootName = "Handle";  					break;  				default:  					rootName = "Other";  					break;  				}  				if ((rootFlags & GcRootFlags.Pinning) != 0)  					rootName += "' Pinning";  				if ((rootFlags & GcRootFlags.WeakRef) != 0)  					rootName += "' WeakRef";  				if ((rootFlags & GcRootFlags.Interior) != 0)  					rootName += "' Interior";  				if ((rootFlags & GcRootFlags.Refcounted) != 0)  					rootName += "' RefCounted";  				int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  				ulongStack [0] = objectID;  				ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  				objectGraph.AddRootObject (rootObject' rootID);  			}  			break;  		}  		case 'R':  		case 'r': {  			c = ReadChar ();  			thisIsR = true;  			if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				}  				break;  			}  			if (!previousWasR) {  				heapDumpEventList.AddEvent (lastTickIndex' null);  				if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  					readLogResult.objectGraph.BuildTypeGraph ();  					readLogResult.objectGraph.Neuter ();  				}  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  					readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  					for (int i = 0; i < h.Length; i++)  						readLogResult.heapDumpHistograms [i] = h [i];  					readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  				}  				readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  			}  			stackPtr = 0;  			ulong objectID;  			while ((objectID = ReadULong ()) != ulong.MaxValue) {  				if (objectID > 0) {  					ulongStack [stackPtr] = objectID;  					stackPtr++;  					if (stackPtr >= ulongStack.Length)  						ulongStack = GrowULongVector (ulongStack);  				}  			}  			if (c != -1) {  				if (readLogResult.objectGraph != null)  					readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  			}  			break;  		}  		case 'O':  		case 'o': {  			c = ReadChar ();  			if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			ulong objectId = ReadULong ();  			int typeIndex = ReadInt ();  			uint size = ReadUInt ();  			stackPtr = 0;  			ulong objectID;  			while ((objectID = ReadULong ()) != ulong.MaxValue) {  				if (objectID > 0) {  					ulongStack [stackPtr] = objectID;  					stackPtr++;  					if (stackPtr >= ulongStack.Length)  						ulongStack = GrowULongVector (ulongStack);  				}  			}  			if (c != -1) {  				ObjectGraph objectGraph = readLogResult.objectGraph;  				objectGraph.GetOrCreateGcType (typeIndex);  				int typeSizeStackTraceId = -1;  				int allocTickIndex = 0;  				// try to find the allocation stack trace and allocation time  				// from the live object table  				if (readLogResult.liveObjectTable != null) {  					LiveObjectTable.LiveObject liveObject;  					readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  					if (liveObject.id == objectId) {  						int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  						int typeIndexFromLiveObject = stackTrace [0];  						if (typeIndexFromLiveObject == typeIndex) {  							typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  							allocTickIndex = liveObject.allocTickIndex;  							Histogram[] h = readLogResult.heapDumpHistograms;  							if (h != null)  								h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  						}  					}  				}  				if (typeSizeStackTraceId == -1)  					typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  				ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  				gcObject.AllocTickIndex = allocTickIndex;  			}  			break;  		}  		case 'M':  		case 'm': {  			c = ReadChar ();  			int modIndex = ReadInt ();  			sb.Length = 0;  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			if (c != -1) {  				string lineString = sb.ToString ();  				int addrPos = lineString.LastIndexOf (" 0x");  				if (addrPos <= 0)  					addrPos = lineString.Length;  				int backSlashPos = lineString.LastIndexOf (@"\");  				if (backSlashPos <= 0)  					backSlashPos = -1;  				string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  				string fullName = lineString.Substring (0' addrPos);  				EnsureStringCapacity (modIndex' ref modBasicName);  				modBasicName [modIndex] = basicName;  				EnsureStringCapacity (modIndex' ref modFullName);  				modFullName [modIndex] = fullName;  			}  			break;  		}  		case 'U':  		case 'u': {  			c = ReadChar ();  			ulong oldId = ReadULong ();  			ulong newId = ReadULong ();  			uint length = ReadUInt ();  			Histogram reloHist = null;  			if (pos >= startFileOffset && pos < endFileOffset)  				reloHist = readLogResult.relocatedHistogram;  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  			break;  		}  		case 'V':  		case 'v': {  			c = ReadChar ();  			ulong startId = ReadULong ();  			uint length = ReadUInt ();  			Histogram reloHist = null;  			if (pos >= startFileOffset && pos < endFileOffset)  				reloHist = readLogResult.relocatedHistogram;  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  			break;  		}  		case 'B':  		case 'b':  			c = ReadChar ();  			int startGC = ReadInt ();  			int induced = ReadInt ();  			int condemnedGeneration = ReadInt ();  			if (startGC != 0)  				newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  			if (newGcEvent) {  				if (startGC != 0) {  					if (induced != 0) {  						for (int gen = 0; gen <= condemnedGeneration; gen++)  							inducedGcCount [gen]++;  					}  				}  				else {  					int condemnedLimit = condemnedGeneration;  					if (condemnedLimit == 2)  						condemnedLimit = 3;  					for (int gen = 0; gen <= condemnedLimit; gen++) {  						cumulativeGenerationSize [gen] += generationSize [gen];  						gcCount [gen]++;  					}  				}  			}  			for (int gen = 0; gen <= 3; gen++)  				generationSize [gen] = 0;  			while (c >= ' ') {  				ulong rangeStart = ReadULong ();  				ulong rangeLength = ReadULong ();  				ulong rangeLengthReserved = ReadULong ();  				int rangeGeneration = ReadInt ();  				if (c == -1 || rangeGeneration < 0)  					break;  				if (readLogResult.liveObjectTable != null) {  					if (startGC != 0) {  						if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  							readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  					}  					else {  						readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  					}  				}  				generationSize [rangeGeneration] += rangeLength;  			}  			if (startGC == 0 && readLogResult.liveObjectTable != null) {  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  			}  			break;  		case 'L':  		case 'l': {  			c = ReadChar ();  			int isCritical = ReadInt ();  			ulong objectId = ReadULong ();  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  				// try to find the allocation stack trace and allocation time  				// from the live object table  				LiveObjectTable.LiveObject liveObject;  				readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  				if (liveObject.id == objectId) {  					if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  						readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  					if (readLogResult.finalizerHistogram != null)  						readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  				}  			}  			break;  		}  		case 'I':  		case 'i':  			c = ReadChar ();  			int tickCount = ReadInt ();  			if (c != -1) {  				lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  				if (maxTickIndex < lastTickIndex)  					maxTickIndex = lastTickIndex;  			}  			break;  		case 'G':  		case 'g':  			c = ReadChar ();  			int gcGen0Count = ReadInt ();  			int gcGen1Count = ReadInt ();  			int gcGen2Count = ReadInt ();  			// if the newer 'b' lines occur' disregard the 'g' lines.  			if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  				if (c == -1 || gcGen0Count < 0)  					readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  				else  					readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  			}  			break;  		case 'N':  		case 'n': {  			c = ReadChar ();  			int funcIndex;  			int stackTraceIndex = ReadInt ();  			stackPtr = 0;  			int flag = ReadInt ();  			int matched = flag / 4;  			int hadTypeId = (flag & 2);  			bool hasTypeId = (flag & 1) == 1;  			if (hasTypeId) {  				intStack [stackPtr++] = ReadInt ();  				intStack [stackPtr++] = ReadInt ();  			}  			if (matched > 0 && c != -1) {  				/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  				otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  				int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  				if (matched > stacktrace.Length - hadTypeId)  					matched = stacktrace.Length - hadTypeId;  				for (int i = 0; i < matched; i++) {  					int funcId = stacktrace [i + hadTypeId];  					//Debug.Assert(funcId < funcName.Length);  					if (funcName [funcId] == null)  						funcName [funcId] = String.Empty;  					intStack [stackPtr++] = funcId;  					if (stackPtr >= intStack.Length) {  						intStack = GrowIntVector (intStack);  					}  				}  			}  			while ((funcIndex = ReadInt ()) >= 0) {  				intStack [stackPtr] = funcIndex;  				stackPtr++;  				if (stackPtr >= intStack.Length)  					intStack = GrowIntVector (intStack);  			}  			if (c != -1) {  				stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  			}  			break;  		}  		case 'y':  		case 'Y': {  			c = ReadChar ();  			int threadid = ReadInt ();  			if (!assembliesJustLoaded.ContainsKey (threadid)) {  				assembliesJustLoaded [threadid] = new List<string> ();  			}  			/* int assemblyId = */ReadInt ();  			while (c == ' ' || c == '\t') {  				c = ReadChar ();  			}  			sb.Length = 0;  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			string assemblyName = sb.ToString ();  			assembliesJustLoaded [threadid].Add (assemblyName);  			break;  		}  		case 'S':  		case 's': {  			c = ReadChar ();  			int stackTraceIndex = ReadInt ();  			int funcIndex;  			stackPtr = 0;  			while ((funcIndex = ReadInt ()) >= 0) {  				intStack [stackPtr] = funcIndex;  				stackPtr++;  				if (stackPtr >= intStack.Length)  					intStack = GrowIntVector (intStack);  			}  			if (c != -1) {  				stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  			}  			break;  		}  		case 'Z':  		case 'z': {  			sb.Length = 0;  			c = ReadChar ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			if (c != -1) {  				lastTickIndex = AddTimePos (lastLineStartPos);  				if (maxTickIndex < lastTickIndex)  					maxTickIndex = lastTickIndex;  				commentEventList.AddEvent (lastTickIndex' sb.ToString ());  			}  			break;  		}  		case 'H':  		case 'h': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong handleId = ReadULong ();  			ulong initialObjectId = ReadULong ();  			int stacktraceId = ReadInt ();  			if (c != -1) {  				if (readLogResult.handleHash != null)  					readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  				if (readLogResult.createdHandlesHistogram != null)  					readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  			}  			break;  		}  		case 'J':  		case 'j': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong handleId = ReadULong ();  			int stacktraceId = ReadInt ();  			if (c != -1) {  				if (readLogResult.handleHash != null) {  					if (readLogResult.handleHash.ContainsKey (handleId))  						readLogResult.handleHash.Remove (handleId);  					else {  						//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  						//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  						//for (int i = stacktrace.Length; --i >= 0; )  						//{  						//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  						//}  					}  				}  				if (readLogResult.destroyedHandlesHistogram != null)  					readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  			}  			break;  		}  		default: {  			// just ignore the unknown  			while (c != '\n' && c != '\r') {  				c = ReadChar ();  			}  			break;  		}  		}  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		if (c == '\r')  			c = ReadChar ();  		if (c == '\n') {  			c = ReadChar ();  			line++;  		}  	}  	//                readLogResult.functionList.ReportCallCountSizes(readLogResult.callstackHistogram);  }  //            catch (Exception)  //            {  //                throw new Exception(string.Format("Bad format in log file {0} line {1}"' fileName' line));  //                throw;  //            }  finally {  	if (r != null)  		r.Close ();  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: try {  	System.IO.Stream s = new System.IO.FileStream (fileName' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.ReadWrite);  	r = new System.IO.StreamReader (s);  	for (timePosIndex = timePosCount; timePosIndex > 0; timePosIndex--)  		if (timePos [timePosIndex - 1].pos <= startFileOffset)  			break;  	// start at the beginning if no later start point available or asked for info that can only  	// be constructed by reading the whole file.  	if (timePosIndex <= 1 || readLogResult.relocatedHistogram != null || readLogResult.finalizerHistogram != null || readLogResult.criticalFinalizerHistogram != null || readLogResult.liveObjectTable != null) {  		pos = 0;  		timePosIndex = 1;  	}  	else {  		timePosIndex--;  		pos = timePos [timePosIndex].pos;  	}  	if (timePosCount == 0) {  		timePos [0] = new TimePos (0.0' 0);  		timePosCount = timePosIndex = 1;  	}  	s.Position = pos;  	buffer = new byte[4096];  	bufPos = 0;  	bufLevel = 0;  	int maxProgress = (int)(r.BaseStream.Length / 1024);  	line = 1;  	StringBuilder sb = new StringBuilder ();  	ulong[] ulongStack = new ulong[1000];  	int[] intStack = new int[1000];  	int stackPtr = 0;  	c = ReadChar ();  	bool thisIsR = false' previousWasR;  	bool extendedRootInfoSeen = false;  	int lastTickIndex = 0;  	bool newGcEvent = false;  	while (c != -1) {  		if (pos > endFileOffset)  			break;  		if ((line % 1024) == 0) {  			int currentProgress = (int)(pos / 1024);  			if (currentProgress <= maxProgress) {  			}  		}  		lastLineStartPos = pos - 1;  		previousWasR = thisIsR;  		thisIsR = false;  		switch (c) {  		case -1:  			break;  		case 'F':  		case 'f': {  			c = ReadChar ();  			int funcIndex = ReadInt ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string name = ReadString (sb' ' '' false' 255);  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string signature = ReadString (sb' '\r'' true' 1023);  			ulong addr = ReadULong ();  			uint size = ReadUInt ();  			int modIndex = ReadInt ();  			int stackIndex = ReadInt ();  			if (c != -1) {  				EnsureStringCapacity (funcIndex' ref funcName);  				funcName [funcIndex] = name;  				EnsureStringCapacity (funcIndex' ref funcSignature);  				funcSignature [funcIndex] = signature;  				EnsureIntCapacity (funcIndex' ref funcModule);  				funcModule [funcIndex] = modIndex;  				string nameAndSignature = name;  				if (signature != null)  					nameAndSignature = name + ' ' + signature;  				if (stackIndex >= 0 && readLogResult.functionList != null) {  					funcSignatureIdHash [nameAndSignature] = funcIndex;  					readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  				}  			}  			break;  		}  		case 'T':  		case 't': {  			c = ReadChar ();  			int typeIndex = ReadInt ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			if (c != -1 && Char.IsDigit ((char)c)) {  				if (ReadInt () != 0) {  					finalizableTypes [typeIndex] = true;  				}  			}  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string typeName = ReadString (sb' '\r'' false' 1023);  			if (c != -1) {  				AddTypeName (typeIndex' typeName);  			}  			break;  		}  		// 'A' with thread identifier  		case '!': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong id = ReadULong ();  			int typeSizeStackTraceIndex = ReadInt ();  			typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  			if (c != -1) {  				if (readLogResult.liveObjectTable != null)  					readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  				if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  					// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  					readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  				}  				List<string> prev;  				if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  					foreach (string assemblyName in prev) {  						assemblies [assemblyName] = -typeSizeStackTraceIndex;  					}  					prev.Clear ();  				}  			}  			readLogResult.hadAllocInfo = true;  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'A':  		case 'a': {  			c = ReadChar ();  			ulong id = ReadULong ();  			int typeSizeStackTraceIndex = ReadInt ();  			typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  			if (c != -1) {  				if (readLogResult.liveObjectTable != null)  					readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  				if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  					// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  					readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  				}  			}  			readLogResult.hadAllocInfo = true;  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'C':  		case 'c': {  			c = ReadChar ();  			if (pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			int threadIndex = ReadInt ();  			int stackTraceIndex = ReadInt ();  			stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  			if (c != -1) {  				if (readLogResult.callstackHistogram != null) {  					readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  				}  				List<string> prev;  				if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  					foreach (string assemblyName in prev) {  						assemblies [assemblyName] = stackTraceIndex;  					}  					prev.Clear ();  				}  			}  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'E':  		case 'e': {  			c = ReadChar ();  			extendedRootInfoSeen = true;  			thisIsR = true;  			if (pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			if (!previousWasR) {  				heapDumpEventList.AddEvent (lastTickIndex' null);  				if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  					readLogResult.objectGraph.BuildTypeGraph ();  					readLogResult.objectGraph.Neuter ();  				}  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  					readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  					for (int i = 0; i < h.Length; i++)  						readLogResult.heapDumpHistograms [i] = h [i];  					readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  				}  				readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  			}  			ulong objectID = ReadULong ();  			GcRootKind rootKind = (GcRootKind)ReadInt ();  			GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  			ulong rootID = ReadULong ();  			ObjectGraph objectGraph = readLogResult.objectGraph;  			if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  				string rootName;  				switch (rootKind) {  				case GcRootKind.Stack:  					rootName = "Stack";  					break;  				case GcRootKind.Finalizer:  					rootName = "Finalizer";  					break;  				case GcRootKind.Handle:  					rootName = "Handle";  					break;  				default:  					rootName = "Other";  					break;  				}  				if ((rootFlags & GcRootFlags.Pinning) != 0)  					rootName += "' Pinning";  				if ((rootFlags & GcRootFlags.WeakRef) != 0)  					rootName += "' WeakRef";  				if ((rootFlags & GcRootFlags.Interior) != 0)  					rootName += "' Interior";  				if ((rootFlags & GcRootFlags.Refcounted) != 0)  					rootName += "' RefCounted";  				int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  				ulongStack [0] = objectID;  				ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  				objectGraph.AddRootObject (rootObject' rootID);  			}  			break;  		}  		case 'R':  		case 'r': {  			c = ReadChar ();  			thisIsR = true;  			if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				}  				break;  			}  			if (!previousWasR) {  				heapDumpEventList.AddEvent (lastTickIndex' null);  				if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  					readLogResult.objectGraph.BuildTypeGraph ();  					readLogResult.objectGraph.Neuter ();  				}  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  					readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  					for (int i = 0; i < h.Length; i++)  						readLogResult.heapDumpHistograms [i] = h [i];  					readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  				}  				readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  			}  			stackPtr = 0;  			ulong objectID;  			while ((objectID = ReadULong ()) != ulong.MaxValue) {  				if (objectID > 0) {  					ulongStack [stackPtr] = objectID;  					stackPtr++;  					if (stackPtr >= ulongStack.Length)  						ulongStack = GrowULongVector (ulongStack);  				}  			}  			if (c != -1) {  				if (readLogResult.objectGraph != null)  					readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  			}  			break;  		}  		case 'O':  		case 'o': {  			c = ReadChar ();  			if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			ulong objectId = ReadULong ();  			int typeIndex = ReadInt ();  			uint size = ReadUInt ();  			stackPtr = 0;  			ulong objectID;  			while ((objectID = ReadULong ()) != ulong.MaxValue) {  				if (objectID > 0) {  					ulongStack [stackPtr] = objectID;  					stackPtr++;  					if (stackPtr >= ulongStack.Length)  						ulongStack = GrowULongVector (ulongStack);  				}  			}  			if (c != -1) {  				ObjectGraph objectGraph = readLogResult.objectGraph;  				objectGraph.GetOrCreateGcType (typeIndex);  				int typeSizeStackTraceId = -1;  				int allocTickIndex = 0;  				// try to find the allocation stack trace and allocation time  				// from the live object table  				if (readLogResult.liveObjectTable != null) {  					LiveObjectTable.LiveObject liveObject;  					readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  					if (liveObject.id == objectId) {  						int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  						int typeIndexFromLiveObject = stackTrace [0];  						if (typeIndexFromLiveObject == typeIndex) {  							typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  							allocTickIndex = liveObject.allocTickIndex;  							Histogram[] h = readLogResult.heapDumpHistograms;  							if (h != null)  								h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  						}  					}  				}  				if (typeSizeStackTraceId == -1)  					typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  				ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  				gcObject.AllocTickIndex = allocTickIndex;  			}  			break;  		}  		case 'M':  		case 'm': {  			c = ReadChar ();  			int modIndex = ReadInt ();  			sb.Length = 0;  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			if (c != -1) {  				string lineString = sb.ToString ();  				int addrPos = lineString.LastIndexOf (" 0x");  				if (addrPos <= 0)  					addrPos = lineString.Length;  				int backSlashPos = lineString.LastIndexOf (@"\");  				if (backSlashPos <= 0)  					backSlashPos = -1;  				string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  				string fullName = lineString.Substring (0' addrPos);  				EnsureStringCapacity (modIndex' ref modBasicName);  				modBasicName [modIndex] = basicName;  				EnsureStringCapacity (modIndex' ref modFullName);  				modFullName [modIndex] = fullName;  			}  			break;  		}  		case 'U':  		case 'u': {  			c = ReadChar ();  			ulong oldId = ReadULong ();  			ulong newId = ReadULong ();  			uint length = ReadUInt ();  			Histogram reloHist = null;  			if (pos >= startFileOffset && pos < endFileOffset)  				reloHist = readLogResult.relocatedHistogram;  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  			break;  		}  		case 'V':  		case 'v': {  			c = ReadChar ();  			ulong startId = ReadULong ();  			uint length = ReadUInt ();  			Histogram reloHist = null;  			if (pos >= startFileOffset && pos < endFileOffset)  				reloHist = readLogResult.relocatedHistogram;  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  			break;  		}  		case 'B':  		case 'b':  			c = ReadChar ();  			int startGC = ReadInt ();  			int induced = ReadInt ();  			int condemnedGeneration = ReadInt ();  			if (startGC != 0)  				newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  			if (newGcEvent) {  				if (startGC != 0) {  					if (induced != 0) {  						for (int gen = 0; gen <= condemnedGeneration; gen++)  							inducedGcCount [gen]++;  					}  				}  				else {  					int condemnedLimit = condemnedGeneration;  					if (condemnedLimit == 2)  						condemnedLimit = 3;  					for (int gen = 0; gen <= condemnedLimit; gen++) {  						cumulativeGenerationSize [gen] += generationSize [gen];  						gcCount [gen]++;  					}  				}  			}  			for (int gen = 0; gen <= 3; gen++)  				generationSize [gen] = 0;  			while (c >= ' ') {  				ulong rangeStart = ReadULong ();  				ulong rangeLength = ReadULong ();  				ulong rangeLengthReserved = ReadULong ();  				int rangeGeneration = ReadInt ();  				if (c == -1 || rangeGeneration < 0)  					break;  				if (readLogResult.liveObjectTable != null) {  					if (startGC != 0) {  						if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  							readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  					}  					else {  						readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  					}  				}  				generationSize [rangeGeneration] += rangeLength;  			}  			if (startGC == 0 && readLogResult.liveObjectTable != null) {  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  			}  			break;  		case 'L':  		case 'l': {  			c = ReadChar ();  			int isCritical = ReadInt ();  			ulong objectId = ReadULong ();  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  				// try to find the allocation stack trace and allocation time  				// from the live object table  				LiveObjectTable.LiveObject liveObject;  				readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  				if (liveObject.id == objectId) {  					if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  						readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  					if (readLogResult.finalizerHistogram != null)  						readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  				}  			}  			break;  		}  		case 'I':  		case 'i':  			c = ReadChar ();  			int tickCount = ReadInt ();  			if (c != -1) {  				lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  				if (maxTickIndex < lastTickIndex)  					maxTickIndex = lastTickIndex;  			}  			break;  		case 'G':  		case 'g':  			c = ReadChar ();  			int gcGen0Count = ReadInt ();  			int gcGen1Count = ReadInt ();  			int gcGen2Count = ReadInt ();  			// if the newer 'b' lines occur' disregard the 'g' lines.  			if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  				if (c == -1 || gcGen0Count < 0)  					readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  				else  					readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  			}  			break;  		case 'N':  		case 'n': {  			c = ReadChar ();  			int funcIndex;  			int stackTraceIndex = ReadInt ();  			stackPtr = 0;  			int flag = ReadInt ();  			int matched = flag / 4;  			int hadTypeId = (flag & 2);  			bool hasTypeId = (flag & 1) == 1;  			if (hasTypeId) {  				intStack [stackPtr++] = ReadInt ();  				intStack [stackPtr++] = ReadInt ();  			}  			if (matched > 0 && c != -1) {  				/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  				otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  				int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  				if (matched > stacktrace.Length - hadTypeId)  					matched = stacktrace.Length - hadTypeId;  				for (int i = 0; i < matched; i++) {  					int funcId = stacktrace [i + hadTypeId];  					//Debug.Assert(funcId < funcName.Length);  					if (funcName [funcId] == null)  						funcName [funcId] = String.Empty;  					intStack [stackPtr++] = funcId;  					if (stackPtr >= intStack.Length) {  						intStack = GrowIntVector (intStack);  					}  				}  			}  			while ((funcIndex = ReadInt ()) >= 0) {  				intStack [stackPtr] = funcIndex;  				stackPtr++;  				if (stackPtr >= intStack.Length)  					intStack = GrowIntVector (intStack);  			}  			if (c != -1) {  				stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  			}  			break;  		}  		case 'y':  		case 'Y': {  			c = ReadChar ();  			int threadid = ReadInt ();  			if (!assembliesJustLoaded.ContainsKey (threadid)) {  				assembliesJustLoaded [threadid] = new List<string> ();  			}  			/* int assemblyId = */ReadInt ();  			while (c == ' ' || c == '\t') {  				c = ReadChar ();  			}  			sb.Length = 0;  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			string assemblyName = sb.ToString ();  			assembliesJustLoaded [threadid].Add (assemblyName);  			break;  		}  		case 'S':  		case 's': {  			c = ReadChar ();  			int stackTraceIndex = ReadInt ();  			int funcIndex;  			stackPtr = 0;  			while ((funcIndex = ReadInt ()) >= 0) {  				intStack [stackPtr] = funcIndex;  				stackPtr++;  				if (stackPtr >= intStack.Length)  					intStack = GrowIntVector (intStack);  			}  			if (c != -1) {  				stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  			}  			break;  		}  		case 'Z':  		case 'z': {  			sb.Length = 0;  			c = ReadChar ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			if (c != -1) {  				lastTickIndex = AddTimePos (lastLineStartPos);  				if (maxTickIndex < lastTickIndex)  					maxTickIndex = lastTickIndex;  				commentEventList.AddEvent (lastTickIndex' sb.ToString ());  			}  			break;  		}  		case 'H':  		case 'h': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong handleId = ReadULong ();  			ulong initialObjectId = ReadULong ();  			int stacktraceId = ReadInt ();  			if (c != -1) {  				if (readLogResult.handleHash != null)  					readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  				if (readLogResult.createdHandlesHistogram != null)  					readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  			}  			break;  		}  		case 'J':  		case 'j': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong handleId = ReadULong ();  			int stacktraceId = ReadInt ();  			if (c != -1) {  				if (readLogResult.handleHash != null) {  					if (readLogResult.handleHash.ContainsKey (handleId))  						readLogResult.handleHash.Remove (handleId);  					else {  						//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  						//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  						//for (int i = stacktrace.Length; --i >= 0; )  						//{  						//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  						//}  					}  				}  				if (readLogResult.destroyedHandlesHistogram != null)  					readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  			}  			break;  		}  		default: {  			// just ignore the unknown  			while (c != '\n' && c != '\r') {  				c = ReadChar ();  			}  			break;  		}  		}  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		if (c == '\r')  			c = ReadChar ();  		if (c == '\n') {  			c = ReadChar ();  			line++;  		}  	}  	//                readLogResult.functionList.ReportCallCountSizes(readLogResult.callstackHistogram);  }  //            catch (Exception)  //            {  //                throw new Exception(string.Format("Bad format in log file {0} line {1}"' fileName' line));  //                throw;  //            }  finally {  	if (r != null)  		r.Close ();  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: try {  	System.IO.Stream s = new System.IO.FileStream (fileName' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.ReadWrite);  	r = new System.IO.StreamReader (s);  	for (timePosIndex = timePosCount; timePosIndex > 0; timePosIndex--)  		if (timePos [timePosIndex - 1].pos <= startFileOffset)  			break;  	// start at the beginning if no later start point available or asked for info that can only  	// be constructed by reading the whole file.  	if (timePosIndex <= 1 || readLogResult.relocatedHistogram != null || readLogResult.finalizerHistogram != null || readLogResult.criticalFinalizerHistogram != null || readLogResult.liveObjectTable != null) {  		pos = 0;  		timePosIndex = 1;  	}  	else {  		timePosIndex--;  		pos = timePos [timePosIndex].pos;  	}  	if (timePosCount == 0) {  		timePos [0] = new TimePos (0.0' 0);  		timePosCount = timePosIndex = 1;  	}  	s.Position = pos;  	buffer = new byte[4096];  	bufPos = 0;  	bufLevel = 0;  	int maxProgress = (int)(r.BaseStream.Length / 1024);  	line = 1;  	StringBuilder sb = new StringBuilder ();  	ulong[] ulongStack = new ulong[1000];  	int[] intStack = new int[1000];  	int stackPtr = 0;  	c = ReadChar ();  	bool thisIsR = false' previousWasR;  	bool extendedRootInfoSeen = false;  	int lastTickIndex = 0;  	bool newGcEvent = false;  	while (c != -1) {  		if (pos > endFileOffset)  			break;  		if ((line % 1024) == 0) {  			int currentProgress = (int)(pos / 1024);  			if (currentProgress <= maxProgress) {  			}  		}  		lastLineStartPos = pos - 1;  		previousWasR = thisIsR;  		thisIsR = false;  		switch (c) {  		case -1:  			break;  		case 'F':  		case 'f': {  			c = ReadChar ();  			int funcIndex = ReadInt ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string name = ReadString (sb' ' '' false' 255);  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string signature = ReadString (sb' '\r'' true' 1023);  			ulong addr = ReadULong ();  			uint size = ReadUInt ();  			int modIndex = ReadInt ();  			int stackIndex = ReadInt ();  			if (c != -1) {  				EnsureStringCapacity (funcIndex' ref funcName);  				funcName [funcIndex] = name;  				EnsureStringCapacity (funcIndex' ref funcSignature);  				funcSignature [funcIndex] = signature;  				EnsureIntCapacity (funcIndex' ref funcModule);  				funcModule [funcIndex] = modIndex;  				string nameAndSignature = name;  				if (signature != null)  					nameAndSignature = name + ' ' + signature;  				if (stackIndex >= 0 && readLogResult.functionList != null) {  					funcSignatureIdHash [nameAndSignature] = funcIndex;  					readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  				}  			}  			break;  		}  		case 'T':  		case 't': {  			c = ReadChar ();  			int typeIndex = ReadInt ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			if (c != -1 && Char.IsDigit ((char)c)) {  				if (ReadInt () != 0) {  					finalizableTypes [typeIndex] = true;  				}  			}  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string typeName = ReadString (sb' '\r'' false' 1023);  			if (c != -1) {  				AddTypeName (typeIndex' typeName);  			}  			break;  		}  		// 'A' with thread identifier  		case '!': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong id = ReadULong ();  			int typeSizeStackTraceIndex = ReadInt ();  			typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  			if (c != -1) {  				if (readLogResult.liveObjectTable != null)  					readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  				if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  					// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  					readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  				}  				List<string> prev;  				if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  					foreach (string assemblyName in prev) {  						assemblies [assemblyName] = -typeSizeStackTraceIndex;  					}  					prev.Clear ();  				}  			}  			readLogResult.hadAllocInfo = true;  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'A':  		case 'a': {  			c = ReadChar ();  			ulong id = ReadULong ();  			int typeSizeStackTraceIndex = ReadInt ();  			typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  			if (c != -1) {  				if (readLogResult.liveObjectTable != null)  					readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  				if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  					// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  					readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  				}  			}  			readLogResult.hadAllocInfo = true;  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'C':  		case 'c': {  			c = ReadChar ();  			if (pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			int threadIndex = ReadInt ();  			int stackTraceIndex = ReadInt ();  			stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  			if (c != -1) {  				if (readLogResult.callstackHistogram != null) {  					readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  				}  				List<string> prev;  				if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  					foreach (string assemblyName in prev) {  						assemblies [assemblyName] = stackTraceIndex;  					}  					prev.Clear ();  				}  			}  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'E':  		case 'e': {  			c = ReadChar ();  			extendedRootInfoSeen = true;  			thisIsR = true;  			if (pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			if (!previousWasR) {  				heapDumpEventList.AddEvent (lastTickIndex' null);  				if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  					readLogResult.objectGraph.BuildTypeGraph ();  					readLogResult.objectGraph.Neuter ();  				}  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  					readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  					for (int i = 0; i < h.Length; i++)  						readLogResult.heapDumpHistograms [i] = h [i];  					readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  				}  				readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  			}  			ulong objectID = ReadULong ();  			GcRootKind rootKind = (GcRootKind)ReadInt ();  			GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  			ulong rootID = ReadULong ();  			ObjectGraph objectGraph = readLogResult.objectGraph;  			if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  				string rootName;  				switch (rootKind) {  				case GcRootKind.Stack:  					rootName = "Stack";  					break;  				case GcRootKind.Finalizer:  					rootName = "Finalizer";  					break;  				case GcRootKind.Handle:  					rootName = "Handle";  					break;  				default:  					rootName = "Other";  					break;  				}  				if ((rootFlags & GcRootFlags.Pinning) != 0)  					rootName += "' Pinning";  				if ((rootFlags & GcRootFlags.WeakRef) != 0)  					rootName += "' WeakRef";  				if ((rootFlags & GcRootFlags.Interior) != 0)  					rootName += "' Interior";  				if ((rootFlags & GcRootFlags.Refcounted) != 0)  					rootName += "' RefCounted";  				int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  				ulongStack [0] = objectID;  				ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  				objectGraph.AddRootObject (rootObject' rootID);  			}  			break;  		}  		case 'R':  		case 'r': {  			c = ReadChar ();  			thisIsR = true;  			if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				}  				break;  			}  			if (!previousWasR) {  				heapDumpEventList.AddEvent (lastTickIndex' null);  				if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  					readLogResult.objectGraph.BuildTypeGraph ();  					readLogResult.objectGraph.Neuter ();  				}  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  					readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  					for (int i = 0; i < h.Length; i++)  						readLogResult.heapDumpHistograms [i] = h [i];  					readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  				}  				readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  			}  			stackPtr = 0;  			ulong objectID;  			while ((objectID = ReadULong ()) != ulong.MaxValue) {  				if (objectID > 0) {  					ulongStack [stackPtr] = objectID;  					stackPtr++;  					if (stackPtr >= ulongStack.Length)  						ulongStack = GrowULongVector (ulongStack);  				}  			}  			if (c != -1) {  				if (readLogResult.objectGraph != null)  					readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  			}  			break;  		}  		case 'O':  		case 'o': {  			c = ReadChar ();  			if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			ulong objectId = ReadULong ();  			int typeIndex = ReadInt ();  			uint size = ReadUInt ();  			stackPtr = 0;  			ulong objectID;  			while ((objectID = ReadULong ()) != ulong.MaxValue) {  				if (objectID > 0) {  					ulongStack [stackPtr] = objectID;  					stackPtr++;  					if (stackPtr >= ulongStack.Length)  						ulongStack = GrowULongVector (ulongStack);  				}  			}  			if (c != -1) {  				ObjectGraph objectGraph = readLogResult.objectGraph;  				objectGraph.GetOrCreateGcType (typeIndex);  				int typeSizeStackTraceId = -1;  				int allocTickIndex = 0;  				// try to find the allocation stack trace and allocation time  				// from the live object table  				if (readLogResult.liveObjectTable != null) {  					LiveObjectTable.LiveObject liveObject;  					readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  					if (liveObject.id == objectId) {  						int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  						int typeIndexFromLiveObject = stackTrace [0];  						if (typeIndexFromLiveObject == typeIndex) {  							typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  							allocTickIndex = liveObject.allocTickIndex;  							Histogram[] h = readLogResult.heapDumpHistograms;  							if (h != null)  								h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  						}  					}  				}  				if (typeSizeStackTraceId == -1)  					typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  				ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  				gcObject.AllocTickIndex = allocTickIndex;  			}  			break;  		}  		case 'M':  		case 'm': {  			c = ReadChar ();  			int modIndex = ReadInt ();  			sb.Length = 0;  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			if (c != -1) {  				string lineString = sb.ToString ();  				int addrPos = lineString.LastIndexOf (" 0x");  				if (addrPos <= 0)  					addrPos = lineString.Length;  				int backSlashPos = lineString.LastIndexOf (@"\");  				if (backSlashPos <= 0)  					backSlashPos = -1;  				string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  				string fullName = lineString.Substring (0' addrPos);  				EnsureStringCapacity (modIndex' ref modBasicName);  				modBasicName [modIndex] = basicName;  				EnsureStringCapacity (modIndex' ref modFullName);  				modFullName [modIndex] = fullName;  			}  			break;  		}  		case 'U':  		case 'u': {  			c = ReadChar ();  			ulong oldId = ReadULong ();  			ulong newId = ReadULong ();  			uint length = ReadUInt ();  			Histogram reloHist = null;  			if (pos >= startFileOffset && pos < endFileOffset)  				reloHist = readLogResult.relocatedHistogram;  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  			break;  		}  		case 'V':  		case 'v': {  			c = ReadChar ();  			ulong startId = ReadULong ();  			uint length = ReadUInt ();  			Histogram reloHist = null;  			if (pos >= startFileOffset && pos < endFileOffset)  				reloHist = readLogResult.relocatedHistogram;  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  			break;  		}  		case 'B':  		case 'b':  			c = ReadChar ();  			int startGC = ReadInt ();  			int induced = ReadInt ();  			int condemnedGeneration = ReadInt ();  			if (startGC != 0)  				newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  			if (newGcEvent) {  				if (startGC != 0) {  					if (induced != 0) {  						for (int gen = 0; gen <= condemnedGeneration; gen++)  							inducedGcCount [gen]++;  					}  				}  				else {  					int condemnedLimit = condemnedGeneration;  					if (condemnedLimit == 2)  						condemnedLimit = 3;  					for (int gen = 0; gen <= condemnedLimit; gen++) {  						cumulativeGenerationSize [gen] += generationSize [gen];  						gcCount [gen]++;  					}  				}  			}  			for (int gen = 0; gen <= 3; gen++)  				generationSize [gen] = 0;  			while (c >= ' ') {  				ulong rangeStart = ReadULong ();  				ulong rangeLength = ReadULong ();  				ulong rangeLengthReserved = ReadULong ();  				int rangeGeneration = ReadInt ();  				if (c == -1 || rangeGeneration < 0)  					break;  				if (readLogResult.liveObjectTable != null) {  					if (startGC != 0) {  						if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  							readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  					}  					else {  						readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  					}  				}  				generationSize [rangeGeneration] += rangeLength;  			}  			if (startGC == 0 && readLogResult.liveObjectTable != null) {  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  			}  			break;  		case 'L':  		case 'l': {  			c = ReadChar ();  			int isCritical = ReadInt ();  			ulong objectId = ReadULong ();  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  				// try to find the allocation stack trace and allocation time  				// from the live object table  				LiveObjectTable.LiveObject liveObject;  				readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  				if (liveObject.id == objectId) {  					if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  						readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  					if (readLogResult.finalizerHistogram != null)  						readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  				}  			}  			break;  		}  		case 'I':  		case 'i':  			c = ReadChar ();  			int tickCount = ReadInt ();  			if (c != -1) {  				lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  				if (maxTickIndex < lastTickIndex)  					maxTickIndex = lastTickIndex;  			}  			break;  		case 'G':  		case 'g':  			c = ReadChar ();  			int gcGen0Count = ReadInt ();  			int gcGen1Count = ReadInt ();  			int gcGen2Count = ReadInt ();  			// if the newer 'b' lines occur' disregard the 'g' lines.  			if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  				if (c == -1 || gcGen0Count < 0)  					readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  				else  					readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  			}  			break;  		case 'N':  		case 'n': {  			c = ReadChar ();  			int funcIndex;  			int stackTraceIndex = ReadInt ();  			stackPtr = 0;  			int flag = ReadInt ();  			int matched = flag / 4;  			int hadTypeId = (flag & 2);  			bool hasTypeId = (flag & 1) == 1;  			if (hasTypeId) {  				intStack [stackPtr++] = ReadInt ();  				intStack [stackPtr++] = ReadInt ();  			}  			if (matched > 0 && c != -1) {  				/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  				otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  				int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  				if (matched > stacktrace.Length - hadTypeId)  					matched = stacktrace.Length - hadTypeId;  				for (int i = 0; i < matched; i++) {  					int funcId = stacktrace [i + hadTypeId];  					//Debug.Assert(funcId < funcName.Length);  					if (funcName [funcId] == null)  						funcName [funcId] = String.Empty;  					intStack [stackPtr++] = funcId;  					if (stackPtr >= intStack.Length) {  						intStack = GrowIntVector (intStack);  					}  				}  			}  			while ((funcIndex = ReadInt ()) >= 0) {  				intStack [stackPtr] = funcIndex;  				stackPtr++;  				if (stackPtr >= intStack.Length)  					intStack = GrowIntVector (intStack);  			}  			if (c != -1) {  				stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  			}  			break;  		}  		case 'y':  		case 'Y': {  			c = ReadChar ();  			int threadid = ReadInt ();  			if (!assembliesJustLoaded.ContainsKey (threadid)) {  				assembliesJustLoaded [threadid] = new List<string> ();  			}  			/* int assemblyId = */ReadInt ();  			while (c == ' ' || c == '\t') {  				c = ReadChar ();  			}  			sb.Length = 0;  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			string assemblyName = sb.ToString ();  			assembliesJustLoaded [threadid].Add (assemblyName);  			break;  		}  		case 'S':  		case 's': {  			c = ReadChar ();  			int stackTraceIndex = ReadInt ();  			int funcIndex;  			stackPtr = 0;  			while ((funcIndex = ReadInt ()) >= 0) {  				intStack [stackPtr] = funcIndex;  				stackPtr++;  				if (stackPtr >= intStack.Length)  					intStack = GrowIntVector (intStack);  			}  			if (c != -1) {  				stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  			}  			break;  		}  		case 'Z':  		case 'z': {  			sb.Length = 0;  			c = ReadChar ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			if (c != -1) {  				lastTickIndex = AddTimePos (lastLineStartPos);  				if (maxTickIndex < lastTickIndex)  					maxTickIndex = lastTickIndex;  				commentEventList.AddEvent (lastTickIndex' sb.ToString ());  			}  			break;  		}  		case 'H':  		case 'h': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong handleId = ReadULong ();  			ulong initialObjectId = ReadULong ();  			int stacktraceId = ReadInt ();  			if (c != -1) {  				if (readLogResult.handleHash != null)  					readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  				if (readLogResult.createdHandlesHistogram != null)  					readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  			}  			break;  		}  		case 'J':  		case 'j': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong handleId = ReadULong ();  			int stacktraceId = ReadInt ();  			if (c != -1) {  				if (readLogResult.handleHash != null) {  					if (readLogResult.handleHash.ContainsKey (handleId))  						readLogResult.handleHash.Remove (handleId);  					else {  						//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  						//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  						//for (int i = stacktrace.Length; --i >= 0; )  						//{  						//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  						//}  					}  				}  				if (readLogResult.destroyedHandlesHistogram != null)  					readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  			}  			break;  		}  		default: {  			// just ignore the unknown  			while (c != '\n' && c != '\r') {  				c = ReadChar ();  			}  			break;  		}  		}  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		if (c == '\r')  			c = ReadChar ();  		if (c == '\n') {  			c = ReadChar ();  			line++;  		}  	}  	//                readLogResult.functionList.ReportCallCountSizes(readLogResult.callstackHistogram);  }  //            catch (Exception)  //            {  //                throw new Exception(string.Format("Bad format in log file {0} line {1}"' fileName' line));  //                throw;  //            }  finally {  	if (r != null)  		r.Close ();  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: try {  	System.IO.Stream s = new System.IO.FileStream (fileName' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.ReadWrite);  	r = new System.IO.StreamReader (s);  	for (timePosIndex = timePosCount; timePosIndex > 0; timePosIndex--)  		if (timePos [timePosIndex - 1].pos <= startFileOffset)  			break;  	// start at the beginning if no later start point available or asked for info that can only  	// be constructed by reading the whole file.  	if (timePosIndex <= 1 || readLogResult.relocatedHistogram != null || readLogResult.finalizerHistogram != null || readLogResult.criticalFinalizerHistogram != null || readLogResult.liveObjectTable != null) {  		pos = 0;  		timePosIndex = 1;  	}  	else {  		timePosIndex--;  		pos = timePos [timePosIndex].pos;  	}  	if (timePosCount == 0) {  		timePos [0] = new TimePos (0.0' 0);  		timePosCount = timePosIndex = 1;  	}  	s.Position = pos;  	buffer = new byte[4096];  	bufPos = 0;  	bufLevel = 0;  	int maxProgress = (int)(r.BaseStream.Length / 1024);  	line = 1;  	StringBuilder sb = new StringBuilder ();  	ulong[] ulongStack = new ulong[1000];  	int[] intStack = new int[1000];  	int stackPtr = 0;  	c = ReadChar ();  	bool thisIsR = false' previousWasR;  	bool extendedRootInfoSeen = false;  	int lastTickIndex = 0;  	bool newGcEvent = false;  	while (c != -1) {  		if (pos > endFileOffset)  			break;  		if ((line % 1024) == 0) {  			int currentProgress = (int)(pos / 1024);  			if (currentProgress <= maxProgress) {  			}  		}  		lastLineStartPos = pos - 1;  		previousWasR = thisIsR;  		thisIsR = false;  		switch (c) {  		case -1:  			break;  		case 'F':  		case 'f': {  			c = ReadChar ();  			int funcIndex = ReadInt ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string name = ReadString (sb' ' '' false' 255);  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string signature = ReadString (sb' '\r'' true' 1023);  			ulong addr = ReadULong ();  			uint size = ReadUInt ();  			int modIndex = ReadInt ();  			int stackIndex = ReadInt ();  			if (c != -1) {  				EnsureStringCapacity (funcIndex' ref funcName);  				funcName [funcIndex] = name;  				EnsureStringCapacity (funcIndex' ref funcSignature);  				funcSignature [funcIndex] = signature;  				EnsureIntCapacity (funcIndex' ref funcModule);  				funcModule [funcIndex] = modIndex;  				string nameAndSignature = name;  				if (signature != null)  					nameAndSignature = name + ' ' + signature;  				if (stackIndex >= 0 && readLogResult.functionList != null) {  					funcSignatureIdHash [nameAndSignature] = funcIndex;  					readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  				}  			}  			break;  		}  		case 'T':  		case 't': {  			c = ReadChar ();  			int typeIndex = ReadInt ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			if (c != -1 && Char.IsDigit ((char)c)) {  				if (ReadInt () != 0) {  					finalizableTypes [typeIndex] = true;  				}  			}  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string typeName = ReadString (sb' '\r'' false' 1023);  			if (c != -1) {  				AddTypeName (typeIndex' typeName);  			}  			break;  		}  		// 'A' with thread identifier  		case '!': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong id = ReadULong ();  			int typeSizeStackTraceIndex = ReadInt ();  			typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  			if (c != -1) {  				if (readLogResult.liveObjectTable != null)  					readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  				if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  					// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  					readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  				}  				List<string> prev;  				if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  					foreach (string assemblyName in prev) {  						assemblies [assemblyName] = -typeSizeStackTraceIndex;  					}  					prev.Clear ();  				}  			}  			readLogResult.hadAllocInfo = true;  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'A':  		case 'a': {  			c = ReadChar ();  			ulong id = ReadULong ();  			int typeSizeStackTraceIndex = ReadInt ();  			typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  			if (c != -1) {  				if (readLogResult.liveObjectTable != null)  					readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  				if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  					// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  					readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  				}  			}  			readLogResult.hadAllocInfo = true;  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'C':  		case 'c': {  			c = ReadChar ();  			if (pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			int threadIndex = ReadInt ();  			int stackTraceIndex = ReadInt ();  			stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  			if (c != -1) {  				if (readLogResult.callstackHistogram != null) {  					readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  				}  				List<string> prev;  				if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  					foreach (string assemblyName in prev) {  						assemblies [assemblyName] = stackTraceIndex;  					}  					prev.Clear ();  				}  			}  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'E':  		case 'e': {  			c = ReadChar ();  			extendedRootInfoSeen = true;  			thisIsR = true;  			if (pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			if (!previousWasR) {  				heapDumpEventList.AddEvent (lastTickIndex' null);  				if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  					readLogResult.objectGraph.BuildTypeGraph ();  					readLogResult.objectGraph.Neuter ();  				}  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  					readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  					for (int i = 0; i < h.Length; i++)  						readLogResult.heapDumpHistograms [i] = h [i];  					readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  				}  				readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  			}  			ulong objectID = ReadULong ();  			GcRootKind rootKind = (GcRootKind)ReadInt ();  			GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  			ulong rootID = ReadULong ();  			ObjectGraph objectGraph = readLogResult.objectGraph;  			if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  				string rootName;  				switch (rootKind) {  				case GcRootKind.Stack:  					rootName = "Stack";  					break;  				case GcRootKind.Finalizer:  					rootName = "Finalizer";  					break;  				case GcRootKind.Handle:  					rootName = "Handle";  					break;  				default:  					rootName = "Other";  					break;  				}  				if ((rootFlags & GcRootFlags.Pinning) != 0)  					rootName += "' Pinning";  				if ((rootFlags & GcRootFlags.WeakRef) != 0)  					rootName += "' WeakRef";  				if ((rootFlags & GcRootFlags.Interior) != 0)  					rootName += "' Interior";  				if ((rootFlags & GcRootFlags.Refcounted) != 0)  					rootName += "' RefCounted";  				int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  				ulongStack [0] = objectID;  				ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  				objectGraph.AddRootObject (rootObject' rootID);  			}  			break;  		}  		case 'R':  		case 'r': {  			c = ReadChar ();  			thisIsR = true;  			if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				}  				break;  			}  			if (!previousWasR) {  				heapDumpEventList.AddEvent (lastTickIndex' null);  				if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  					readLogResult.objectGraph.BuildTypeGraph ();  					readLogResult.objectGraph.Neuter ();  				}  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  					readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  					for (int i = 0; i < h.Length; i++)  						readLogResult.heapDumpHistograms [i] = h [i];  					readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  				}  				readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  			}  			stackPtr = 0;  			ulong objectID;  			while ((objectID = ReadULong ()) != ulong.MaxValue) {  				if (objectID > 0) {  					ulongStack [stackPtr] = objectID;  					stackPtr++;  					if (stackPtr >= ulongStack.Length)  						ulongStack = GrowULongVector (ulongStack);  				}  			}  			if (c != -1) {  				if (readLogResult.objectGraph != null)  					readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  			}  			break;  		}  		case 'O':  		case 'o': {  			c = ReadChar ();  			if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			ulong objectId = ReadULong ();  			int typeIndex = ReadInt ();  			uint size = ReadUInt ();  			stackPtr = 0;  			ulong objectID;  			while ((objectID = ReadULong ()) != ulong.MaxValue) {  				if (objectID > 0) {  					ulongStack [stackPtr] = objectID;  					stackPtr++;  					if (stackPtr >= ulongStack.Length)  						ulongStack = GrowULongVector (ulongStack);  				}  			}  			if (c != -1) {  				ObjectGraph objectGraph = readLogResult.objectGraph;  				objectGraph.GetOrCreateGcType (typeIndex);  				int typeSizeStackTraceId = -1;  				int allocTickIndex = 0;  				// try to find the allocation stack trace and allocation time  				// from the live object table  				if (readLogResult.liveObjectTable != null) {  					LiveObjectTable.LiveObject liveObject;  					readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  					if (liveObject.id == objectId) {  						int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  						int typeIndexFromLiveObject = stackTrace [0];  						if (typeIndexFromLiveObject == typeIndex) {  							typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  							allocTickIndex = liveObject.allocTickIndex;  							Histogram[] h = readLogResult.heapDumpHistograms;  							if (h != null)  								h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  						}  					}  				}  				if (typeSizeStackTraceId == -1)  					typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  				ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  				gcObject.AllocTickIndex = allocTickIndex;  			}  			break;  		}  		case 'M':  		case 'm': {  			c = ReadChar ();  			int modIndex = ReadInt ();  			sb.Length = 0;  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			if (c != -1) {  				string lineString = sb.ToString ();  				int addrPos = lineString.LastIndexOf (" 0x");  				if (addrPos <= 0)  					addrPos = lineString.Length;  				int backSlashPos = lineString.LastIndexOf (@"\");  				if (backSlashPos <= 0)  					backSlashPos = -1;  				string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  				string fullName = lineString.Substring (0' addrPos);  				EnsureStringCapacity (modIndex' ref modBasicName);  				modBasicName [modIndex] = basicName;  				EnsureStringCapacity (modIndex' ref modFullName);  				modFullName [modIndex] = fullName;  			}  			break;  		}  		case 'U':  		case 'u': {  			c = ReadChar ();  			ulong oldId = ReadULong ();  			ulong newId = ReadULong ();  			uint length = ReadUInt ();  			Histogram reloHist = null;  			if (pos >= startFileOffset && pos < endFileOffset)  				reloHist = readLogResult.relocatedHistogram;  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  			break;  		}  		case 'V':  		case 'v': {  			c = ReadChar ();  			ulong startId = ReadULong ();  			uint length = ReadUInt ();  			Histogram reloHist = null;  			if (pos >= startFileOffset && pos < endFileOffset)  				reloHist = readLogResult.relocatedHistogram;  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  			break;  		}  		case 'B':  		case 'b':  			c = ReadChar ();  			int startGC = ReadInt ();  			int induced = ReadInt ();  			int condemnedGeneration = ReadInt ();  			if (startGC != 0)  				newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  			if (newGcEvent) {  				if (startGC != 0) {  					if (induced != 0) {  						for (int gen = 0; gen <= condemnedGeneration; gen++)  							inducedGcCount [gen]++;  					}  				}  				else {  					int condemnedLimit = condemnedGeneration;  					if (condemnedLimit == 2)  						condemnedLimit = 3;  					for (int gen = 0; gen <= condemnedLimit; gen++) {  						cumulativeGenerationSize [gen] += generationSize [gen];  						gcCount [gen]++;  					}  				}  			}  			for (int gen = 0; gen <= 3; gen++)  				generationSize [gen] = 0;  			while (c >= ' ') {  				ulong rangeStart = ReadULong ();  				ulong rangeLength = ReadULong ();  				ulong rangeLengthReserved = ReadULong ();  				int rangeGeneration = ReadInt ();  				if (c == -1 || rangeGeneration < 0)  					break;  				if (readLogResult.liveObjectTable != null) {  					if (startGC != 0) {  						if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  							readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  					}  					else {  						readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  					}  				}  				generationSize [rangeGeneration] += rangeLength;  			}  			if (startGC == 0 && readLogResult.liveObjectTable != null) {  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  			}  			break;  		case 'L':  		case 'l': {  			c = ReadChar ();  			int isCritical = ReadInt ();  			ulong objectId = ReadULong ();  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  				// try to find the allocation stack trace and allocation time  				// from the live object table  				LiveObjectTable.LiveObject liveObject;  				readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  				if (liveObject.id == objectId) {  					if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  						readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  					if (readLogResult.finalizerHistogram != null)  						readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  				}  			}  			break;  		}  		case 'I':  		case 'i':  			c = ReadChar ();  			int tickCount = ReadInt ();  			if (c != -1) {  				lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  				if (maxTickIndex < lastTickIndex)  					maxTickIndex = lastTickIndex;  			}  			break;  		case 'G':  		case 'g':  			c = ReadChar ();  			int gcGen0Count = ReadInt ();  			int gcGen1Count = ReadInt ();  			int gcGen2Count = ReadInt ();  			// if the newer 'b' lines occur' disregard the 'g' lines.  			if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  				if (c == -1 || gcGen0Count < 0)  					readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  				else  					readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  			}  			break;  		case 'N':  		case 'n': {  			c = ReadChar ();  			int funcIndex;  			int stackTraceIndex = ReadInt ();  			stackPtr = 0;  			int flag = ReadInt ();  			int matched = flag / 4;  			int hadTypeId = (flag & 2);  			bool hasTypeId = (flag & 1) == 1;  			if (hasTypeId) {  				intStack [stackPtr++] = ReadInt ();  				intStack [stackPtr++] = ReadInt ();  			}  			if (matched > 0 && c != -1) {  				/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  				otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  				int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  				if (matched > stacktrace.Length - hadTypeId)  					matched = stacktrace.Length - hadTypeId;  				for (int i = 0; i < matched; i++) {  					int funcId = stacktrace [i + hadTypeId];  					//Debug.Assert(funcId < funcName.Length);  					if (funcName [funcId] == null)  						funcName [funcId] = String.Empty;  					intStack [stackPtr++] = funcId;  					if (stackPtr >= intStack.Length) {  						intStack = GrowIntVector (intStack);  					}  				}  			}  			while ((funcIndex = ReadInt ()) >= 0) {  				intStack [stackPtr] = funcIndex;  				stackPtr++;  				if (stackPtr >= intStack.Length)  					intStack = GrowIntVector (intStack);  			}  			if (c != -1) {  				stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  			}  			break;  		}  		case 'y':  		case 'Y': {  			c = ReadChar ();  			int threadid = ReadInt ();  			if (!assembliesJustLoaded.ContainsKey (threadid)) {  				assembliesJustLoaded [threadid] = new List<string> ();  			}  			/* int assemblyId = */ReadInt ();  			while (c == ' ' || c == '\t') {  				c = ReadChar ();  			}  			sb.Length = 0;  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			string assemblyName = sb.ToString ();  			assembliesJustLoaded [threadid].Add (assemblyName);  			break;  		}  		case 'S':  		case 's': {  			c = ReadChar ();  			int stackTraceIndex = ReadInt ();  			int funcIndex;  			stackPtr = 0;  			while ((funcIndex = ReadInt ()) >= 0) {  				intStack [stackPtr] = funcIndex;  				stackPtr++;  				if (stackPtr >= intStack.Length)  					intStack = GrowIntVector (intStack);  			}  			if (c != -1) {  				stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  			}  			break;  		}  		case 'Z':  		case 'z': {  			sb.Length = 0;  			c = ReadChar ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			if (c != -1) {  				lastTickIndex = AddTimePos (lastLineStartPos);  				if (maxTickIndex < lastTickIndex)  					maxTickIndex = lastTickIndex;  				commentEventList.AddEvent (lastTickIndex' sb.ToString ());  			}  			break;  		}  		case 'H':  		case 'h': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong handleId = ReadULong ();  			ulong initialObjectId = ReadULong ();  			int stacktraceId = ReadInt ();  			if (c != -1) {  				if (readLogResult.handleHash != null)  					readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  				if (readLogResult.createdHandlesHistogram != null)  					readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  			}  			break;  		}  		case 'J':  		case 'j': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong handleId = ReadULong ();  			int stacktraceId = ReadInt ();  			if (c != -1) {  				if (readLogResult.handleHash != null) {  					if (readLogResult.handleHash.ContainsKey (handleId))  						readLogResult.handleHash.Remove (handleId);  					else {  						//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  						//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  						//for (int i = stacktrace.Length; --i >= 0; )  						//{  						//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  						//}  					}  				}  				if (readLogResult.destroyedHandlesHistogram != null)  					readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  			}  			break;  		}  		default: {  			// just ignore the unknown  			while (c != '\n' && c != '\r') {  				c = ReadChar ();  			}  			break;  		}  		}  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		if (c == '\r')  			c = ReadChar ();  		if (c == '\n') {  			c = ReadChar ();  			line++;  		}  	}  	//                readLogResult.functionList.ReportCallCountSizes(readLogResult.callstackHistogram);  }  //            catch (Exception)  //            {  //                throw new Exception(string.Format("Bad format in log file {0} line {1}"' fileName' line));  //                throw;  //            }  finally {  	if (r != null)  		r.Close ();  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: try {  	System.IO.Stream s = new System.IO.FileStream (fileName' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.ReadWrite);  	r = new System.IO.StreamReader (s);  	for (timePosIndex = timePosCount; timePosIndex > 0; timePosIndex--)  		if (timePos [timePosIndex - 1].pos <= startFileOffset)  			break;  	// start at the beginning if no later start point available or asked for info that can only  	// be constructed by reading the whole file.  	if (timePosIndex <= 1 || readLogResult.relocatedHistogram != null || readLogResult.finalizerHistogram != null || readLogResult.criticalFinalizerHistogram != null || readLogResult.liveObjectTable != null) {  		pos = 0;  		timePosIndex = 1;  	}  	else {  		timePosIndex--;  		pos = timePos [timePosIndex].pos;  	}  	if (timePosCount == 0) {  		timePos [0] = new TimePos (0.0' 0);  		timePosCount = timePosIndex = 1;  	}  	s.Position = pos;  	buffer = new byte[4096];  	bufPos = 0;  	bufLevel = 0;  	int maxProgress = (int)(r.BaseStream.Length / 1024);  	line = 1;  	StringBuilder sb = new StringBuilder ();  	ulong[] ulongStack = new ulong[1000];  	int[] intStack = new int[1000];  	int stackPtr = 0;  	c = ReadChar ();  	bool thisIsR = false' previousWasR;  	bool extendedRootInfoSeen = false;  	int lastTickIndex = 0;  	bool newGcEvent = false;  	while (c != -1) {  		if (pos > endFileOffset)  			break;  		if ((line % 1024) == 0) {  			int currentProgress = (int)(pos / 1024);  			if (currentProgress <= maxProgress) {  			}  		}  		lastLineStartPos = pos - 1;  		previousWasR = thisIsR;  		thisIsR = false;  		switch (c) {  		case -1:  			break;  		case 'F':  		case 'f': {  			c = ReadChar ();  			int funcIndex = ReadInt ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string name = ReadString (sb' ' '' false' 255);  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string signature = ReadString (sb' '\r'' true' 1023);  			ulong addr = ReadULong ();  			uint size = ReadUInt ();  			int modIndex = ReadInt ();  			int stackIndex = ReadInt ();  			if (c != -1) {  				EnsureStringCapacity (funcIndex' ref funcName);  				funcName [funcIndex] = name;  				EnsureStringCapacity (funcIndex' ref funcSignature);  				funcSignature [funcIndex] = signature;  				EnsureIntCapacity (funcIndex' ref funcModule);  				funcModule [funcIndex] = modIndex;  				string nameAndSignature = name;  				if (signature != null)  					nameAndSignature = name + ' ' + signature;  				if (stackIndex >= 0 && readLogResult.functionList != null) {  					funcSignatureIdHash [nameAndSignature] = funcIndex;  					readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  				}  			}  			break;  		}  		case 'T':  		case 't': {  			c = ReadChar ();  			int typeIndex = ReadInt ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			if (c != -1 && Char.IsDigit ((char)c)) {  				if (ReadInt () != 0) {  					finalizableTypes [typeIndex] = true;  				}  			}  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string typeName = ReadString (sb' '\r'' false' 1023);  			if (c != -1) {  				AddTypeName (typeIndex' typeName);  			}  			break;  		}  		// 'A' with thread identifier  		case '!': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong id = ReadULong ();  			int typeSizeStackTraceIndex = ReadInt ();  			typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  			if (c != -1) {  				if (readLogResult.liveObjectTable != null)  					readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  				if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  					// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  					readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  				}  				List<string> prev;  				if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  					foreach (string assemblyName in prev) {  						assemblies [assemblyName] = -typeSizeStackTraceIndex;  					}  					prev.Clear ();  				}  			}  			readLogResult.hadAllocInfo = true;  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'A':  		case 'a': {  			c = ReadChar ();  			ulong id = ReadULong ();  			int typeSizeStackTraceIndex = ReadInt ();  			typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  			if (c != -1) {  				if (readLogResult.liveObjectTable != null)  					readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  				if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  					// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  					readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  				}  			}  			readLogResult.hadAllocInfo = true;  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'C':  		case 'c': {  			c = ReadChar ();  			if (pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			int threadIndex = ReadInt ();  			int stackTraceIndex = ReadInt ();  			stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  			if (c != -1) {  				if (readLogResult.callstackHistogram != null) {  					readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  				}  				List<string> prev;  				if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  					foreach (string assemblyName in prev) {  						assemblies [assemblyName] = stackTraceIndex;  					}  					prev.Clear ();  				}  			}  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'E':  		case 'e': {  			c = ReadChar ();  			extendedRootInfoSeen = true;  			thisIsR = true;  			if (pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			if (!previousWasR) {  				heapDumpEventList.AddEvent (lastTickIndex' null);  				if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  					readLogResult.objectGraph.BuildTypeGraph ();  					readLogResult.objectGraph.Neuter ();  				}  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  					readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  					for (int i = 0; i < h.Length; i++)  						readLogResult.heapDumpHistograms [i] = h [i];  					readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  				}  				readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  			}  			ulong objectID = ReadULong ();  			GcRootKind rootKind = (GcRootKind)ReadInt ();  			GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  			ulong rootID = ReadULong ();  			ObjectGraph objectGraph = readLogResult.objectGraph;  			if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  				string rootName;  				switch (rootKind) {  				case GcRootKind.Stack:  					rootName = "Stack";  					break;  				case GcRootKind.Finalizer:  					rootName = "Finalizer";  					break;  				case GcRootKind.Handle:  					rootName = "Handle";  					break;  				default:  					rootName = "Other";  					break;  				}  				if ((rootFlags & GcRootFlags.Pinning) != 0)  					rootName += "' Pinning";  				if ((rootFlags & GcRootFlags.WeakRef) != 0)  					rootName += "' WeakRef";  				if ((rootFlags & GcRootFlags.Interior) != 0)  					rootName += "' Interior";  				if ((rootFlags & GcRootFlags.Refcounted) != 0)  					rootName += "' RefCounted";  				int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  				ulongStack [0] = objectID;  				ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  				objectGraph.AddRootObject (rootObject' rootID);  			}  			break;  		}  		case 'R':  		case 'r': {  			c = ReadChar ();  			thisIsR = true;  			if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				}  				break;  			}  			if (!previousWasR) {  				heapDumpEventList.AddEvent (lastTickIndex' null);  				if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  					readLogResult.objectGraph.BuildTypeGraph ();  					readLogResult.objectGraph.Neuter ();  				}  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  					readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  					for (int i = 0; i < h.Length; i++)  						readLogResult.heapDumpHistograms [i] = h [i];  					readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  				}  				readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  			}  			stackPtr = 0;  			ulong objectID;  			while ((objectID = ReadULong ()) != ulong.MaxValue) {  				if (objectID > 0) {  					ulongStack [stackPtr] = objectID;  					stackPtr++;  					if (stackPtr >= ulongStack.Length)  						ulongStack = GrowULongVector (ulongStack);  				}  			}  			if (c != -1) {  				if (readLogResult.objectGraph != null)  					readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  			}  			break;  		}  		case 'O':  		case 'o': {  			c = ReadChar ();  			if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			ulong objectId = ReadULong ();  			int typeIndex = ReadInt ();  			uint size = ReadUInt ();  			stackPtr = 0;  			ulong objectID;  			while ((objectID = ReadULong ()) != ulong.MaxValue) {  				if (objectID > 0) {  					ulongStack [stackPtr] = objectID;  					stackPtr++;  					if (stackPtr >= ulongStack.Length)  						ulongStack = GrowULongVector (ulongStack);  				}  			}  			if (c != -1) {  				ObjectGraph objectGraph = readLogResult.objectGraph;  				objectGraph.GetOrCreateGcType (typeIndex);  				int typeSizeStackTraceId = -1;  				int allocTickIndex = 0;  				// try to find the allocation stack trace and allocation time  				// from the live object table  				if (readLogResult.liveObjectTable != null) {  					LiveObjectTable.LiveObject liveObject;  					readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  					if (liveObject.id == objectId) {  						int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  						int typeIndexFromLiveObject = stackTrace [0];  						if (typeIndexFromLiveObject == typeIndex) {  							typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  							allocTickIndex = liveObject.allocTickIndex;  							Histogram[] h = readLogResult.heapDumpHistograms;  							if (h != null)  								h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  						}  					}  				}  				if (typeSizeStackTraceId == -1)  					typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  				ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  				gcObject.AllocTickIndex = allocTickIndex;  			}  			break;  		}  		case 'M':  		case 'm': {  			c = ReadChar ();  			int modIndex = ReadInt ();  			sb.Length = 0;  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			if (c != -1) {  				string lineString = sb.ToString ();  				int addrPos = lineString.LastIndexOf (" 0x");  				if (addrPos <= 0)  					addrPos = lineString.Length;  				int backSlashPos = lineString.LastIndexOf (@"\");  				if (backSlashPos <= 0)  					backSlashPos = -1;  				string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  				string fullName = lineString.Substring (0' addrPos);  				EnsureStringCapacity (modIndex' ref modBasicName);  				modBasicName [modIndex] = basicName;  				EnsureStringCapacity (modIndex' ref modFullName);  				modFullName [modIndex] = fullName;  			}  			break;  		}  		case 'U':  		case 'u': {  			c = ReadChar ();  			ulong oldId = ReadULong ();  			ulong newId = ReadULong ();  			uint length = ReadUInt ();  			Histogram reloHist = null;  			if (pos >= startFileOffset && pos < endFileOffset)  				reloHist = readLogResult.relocatedHistogram;  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  			break;  		}  		case 'V':  		case 'v': {  			c = ReadChar ();  			ulong startId = ReadULong ();  			uint length = ReadUInt ();  			Histogram reloHist = null;  			if (pos >= startFileOffset && pos < endFileOffset)  				reloHist = readLogResult.relocatedHistogram;  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  			break;  		}  		case 'B':  		case 'b':  			c = ReadChar ();  			int startGC = ReadInt ();  			int induced = ReadInt ();  			int condemnedGeneration = ReadInt ();  			if (startGC != 0)  				newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  			if (newGcEvent) {  				if (startGC != 0) {  					if (induced != 0) {  						for (int gen = 0; gen <= condemnedGeneration; gen++)  							inducedGcCount [gen]++;  					}  				}  				else {  					int condemnedLimit = condemnedGeneration;  					if (condemnedLimit == 2)  						condemnedLimit = 3;  					for (int gen = 0; gen <= condemnedLimit; gen++) {  						cumulativeGenerationSize [gen] += generationSize [gen];  						gcCount [gen]++;  					}  				}  			}  			for (int gen = 0; gen <= 3; gen++)  				generationSize [gen] = 0;  			while (c >= ' ') {  				ulong rangeStart = ReadULong ();  				ulong rangeLength = ReadULong ();  				ulong rangeLengthReserved = ReadULong ();  				int rangeGeneration = ReadInt ();  				if (c == -1 || rangeGeneration < 0)  					break;  				if (readLogResult.liveObjectTable != null) {  					if (startGC != 0) {  						if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  							readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  					}  					else {  						readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  					}  				}  				generationSize [rangeGeneration] += rangeLength;  			}  			if (startGC == 0 && readLogResult.liveObjectTable != null) {  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  			}  			break;  		case 'L':  		case 'l': {  			c = ReadChar ();  			int isCritical = ReadInt ();  			ulong objectId = ReadULong ();  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  				// try to find the allocation stack trace and allocation time  				// from the live object table  				LiveObjectTable.LiveObject liveObject;  				readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  				if (liveObject.id == objectId) {  					if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  						readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  					if (readLogResult.finalizerHistogram != null)  						readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  				}  			}  			break;  		}  		case 'I':  		case 'i':  			c = ReadChar ();  			int tickCount = ReadInt ();  			if (c != -1) {  				lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  				if (maxTickIndex < lastTickIndex)  					maxTickIndex = lastTickIndex;  			}  			break;  		case 'G':  		case 'g':  			c = ReadChar ();  			int gcGen0Count = ReadInt ();  			int gcGen1Count = ReadInt ();  			int gcGen2Count = ReadInt ();  			// if the newer 'b' lines occur' disregard the 'g' lines.  			if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  				if (c == -1 || gcGen0Count < 0)  					readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  				else  					readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  			}  			break;  		case 'N':  		case 'n': {  			c = ReadChar ();  			int funcIndex;  			int stackTraceIndex = ReadInt ();  			stackPtr = 0;  			int flag = ReadInt ();  			int matched = flag / 4;  			int hadTypeId = (flag & 2);  			bool hasTypeId = (flag & 1) == 1;  			if (hasTypeId) {  				intStack [stackPtr++] = ReadInt ();  				intStack [stackPtr++] = ReadInt ();  			}  			if (matched > 0 && c != -1) {  				/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  				otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  				int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  				if (matched > stacktrace.Length - hadTypeId)  					matched = stacktrace.Length - hadTypeId;  				for (int i = 0; i < matched; i++) {  					int funcId = stacktrace [i + hadTypeId];  					//Debug.Assert(funcId < funcName.Length);  					if (funcName [funcId] == null)  						funcName [funcId] = String.Empty;  					intStack [stackPtr++] = funcId;  					if (stackPtr >= intStack.Length) {  						intStack = GrowIntVector (intStack);  					}  				}  			}  			while ((funcIndex = ReadInt ()) >= 0) {  				intStack [stackPtr] = funcIndex;  				stackPtr++;  				if (stackPtr >= intStack.Length)  					intStack = GrowIntVector (intStack);  			}  			if (c != -1) {  				stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  			}  			break;  		}  		case 'y':  		case 'Y': {  			c = ReadChar ();  			int threadid = ReadInt ();  			if (!assembliesJustLoaded.ContainsKey (threadid)) {  				assembliesJustLoaded [threadid] = new List<string> ();  			}  			/* int assemblyId = */ReadInt ();  			while (c == ' ' || c == '\t') {  				c = ReadChar ();  			}  			sb.Length = 0;  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			string assemblyName = sb.ToString ();  			assembliesJustLoaded [threadid].Add (assemblyName);  			break;  		}  		case 'S':  		case 's': {  			c = ReadChar ();  			int stackTraceIndex = ReadInt ();  			int funcIndex;  			stackPtr = 0;  			while ((funcIndex = ReadInt ()) >= 0) {  				intStack [stackPtr] = funcIndex;  				stackPtr++;  				if (stackPtr >= intStack.Length)  					intStack = GrowIntVector (intStack);  			}  			if (c != -1) {  				stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  			}  			break;  		}  		case 'Z':  		case 'z': {  			sb.Length = 0;  			c = ReadChar ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			if (c != -1) {  				lastTickIndex = AddTimePos (lastLineStartPos);  				if (maxTickIndex < lastTickIndex)  					maxTickIndex = lastTickIndex;  				commentEventList.AddEvent (lastTickIndex' sb.ToString ());  			}  			break;  		}  		case 'H':  		case 'h': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong handleId = ReadULong ();  			ulong initialObjectId = ReadULong ();  			int stacktraceId = ReadInt ();  			if (c != -1) {  				if (readLogResult.handleHash != null)  					readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  				if (readLogResult.createdHandlesHistogram != null)  					readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  			}  			break;  		}  		case 'J':  		case 'j': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong handleId = ReadULong ();  			int stacktraceId = ReadInt ();  			if (c != -1) {  				if (readLogResult.handleHash != null) {  					if (readLogResult.handleHash.ContainsKey (handleId))  						readLogResult.handleHash.Remove (handleId);  					else {  						//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  						//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  						//for (int i = stacktrace.Length; --i >= 0; )  						//{  						//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  						//}  					}  				}  				if (readLogResult.destroyedHandlesHistogram != null)  					readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  			}  			break;  		}  		default: {  			// just ignore the unknown  			while (c != '\n' && c != '\r') {  				c = ReadChar ();  			}  			break;  		}  		}  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		if (c == '\r')  			c = ReadChar ();  		if (c == '\n') {  			c = ReadChar ();  			line++;  		}  	}  	//                readLogResult.functionList.ReportCallCountSizes(readLogResult.callstackHistogram);  }  //            catch (Exception)  //            {  //                throw new Exception(string.Format("Bad format in log file {0} line {1}"' fileName' line));  //                throw;  //            }  finally {  	if (r != null)  		r.Close ();  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: try {  	System.IO.Stream s = new System.IO.FileStream (fileName' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.ReadWrite);  	r = new System.IO.StreamReader (s);  	for (timePosIndex = timePosCount; timePosIndex > 0; timePosIndex--)  		if (timePos [timePosIndex - 1].pos <= startFileOffset)  			break;  	// start at the beginning if no later start point available or asked for info that can only  	// be constructed by reading the whole file.  	if (timePosIndex <= 1 || readLogResult.relocatedHistogram != null || readLogResult.finalizerHistogram != null || readLogResult.criticalFinalizerHistogram != null || readLogResult.liveObjectTable != null) {  		pos = 0;  		timePosIndex = 1;  	}  	else {  		timePosIndex--;  		pos = timePos [timePosIndex].pos;  	}  	if (timePosCount == 0) {  		timePos [0] = new TimePos (0.0' 0);  		timePosCount = timePosIndex = 1;  	}  	s.Position = pos;  	buffer = new byte[4096];  	bufPos = 0;  	bufLevel = 0;  	int maxProgress = (int)(r.BaseStream.Length / 1024);  	line = 1;  	StringBuilder sb = new StringBuilder ();  	ulong[] ulongStack = new ulong[1000];  	int[] intStack = new int[1000];  	int stackPtr = 0;  	c = ReadChar ();  	bool thisIsR = false' previousWasR;  	bool extendedRootInfoSeen = false;  	int lastTickIndex = 0;  	bool newGcEvent = false;  	while (c != -1) {  		if (pos > endFileOffset)  			break;  		if ((line % 1024) == 0) {  			int currentProgress = (int)(pos / 1024);  			if (currentProgress <= maxProgress) {  			}  		}  		lastLineStartPos = pos - 1;  		previousWasR = thisIsR;  		thisIsR = false;  		switch (c) {  		case -1:  			break;  		case 'F':  		case 'f': {  			c = ReadChar ();  			int funcIndex = ReadInt ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string name = ReadString (sb' ' '' false' 255);  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string signature = ReadString (sb' '\r'' true' 1023);  			ulong addr = ReadULong ();  			uint size = ReadUInt ();  			int modIndex = ReadInt ();  			int stackIndex = ReadInt ();  			if (c != -1) {  				EnsureStringCapacity (funcIndex' ref funcName);  				funcName [funcIndex] = name;  				EnsureStringCapacity (funcIndex' ref funcSignature);  				funcSignature [funcIndex] = signature;  				EnsureIntCapacity (funcIndex' ref funcModule);  				funcModule [funcIndex] = modIndex;  				string nameAndSignature = name;  				if (signature != null)  					nameAndSignature = name + ' ' + signature;  				if (stackIndex >= 0 && readLogResult.functionList != null) {  					funcSignatureIdHash [nameAndSignature] = funcIndex;  					readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  				}  			}  			break;  		}  		case 'T':  		case 't': {  			c = ReadChar ();  			int typeIndex = ReadInt ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			if (c != -1 && Char.IsDigit ((char)c)) {  				if (ReadInt () != 0) {  					finalizableTypes [typeIndex] = true;  				}  			}  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string typeName = ReadString (sb' '\r'' false' 1023);  			if (c != -1) {  				AddTypeName (typeIndex' typeName);  			}  			break;  		}  		// 'A' with thread identifier  		case '!': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong id = ReadULong ();  			int typeSizeStackTraceIndex = ReadInt ();  			typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  			if (c != -1) {  				if (readLogResult.liveObjectTable != null)  					readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  				if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  					// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  					readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  				}  				List<string> prev;  				if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  					foreach (string assemblyName in prev) {  						assemblies [assemblyName] = -typeSizeStackTraceIndex;  					}  					prev.Clear ();  				}  			}  			readLogResult.hadAllocInfo = true;  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'A':  		case 'a': {  			c = ReadChar ();  			ulong id = ReadULong ();  			int typeSizeStackTraceIndex = ReadInt ();  			typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  			if (c != -1) {  				if (readLogResult.liveObjectTable != null)  					readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  				if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  					// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  					readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  				}  			}  			readLogResult.hadAllocInfo = true;  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'C':  		case 'c': {  			c = ReadChar ();  			if (pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			int threadIndex = ReadInt ();  			int stackTraceIndex = ReadInt ();  			stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  			if (c != -1) {  				if (readLogResult.callstackHistogram != null) {  					readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  				}  				List<string> prev;  				if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  					foreach (string assemblyName in prev) {  						assemblies [assemblyName] = stackTraceIndex;  					}  					prev.Clear ();  				}  			}  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'E':  		case 'e': {  			c = ReadChar ();  			extendedRootInfoSeen = true;  			thisIsR = true;  			if (pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			if (!previousWasR) {  				heapDumpEventList.AddEvent (lastTickIndex' null);  				if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  					readLogResult.objectGraph.BuildTypeGraph ();  					readLogResult.objectGraph.Neuter ();  				}  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  					readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  					for (int i = 0; i < h.Length; i++)  						readLogResult.heapDumpHistograms [i] = h [i];  					readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  				}  				readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  			}  			ulong objectID = ReadULong ();  			GcRootKind rootKind = (GcRootKind)ReadInt ();  			GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  			ulong rootID = ReadULong ();  			ObjectGraph objectGraph = readLogResult.objectGraph;  			if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  				string rootName;  				switch (rootKind) {  				case GcRootKind.Stack:  					rootName = "Stack";  					break;  				case GcRootKind.Finalizer:  					rootName = "Finalizer";  					break;  				case GcRootKind.Handle:  					rootName = "Handle";  					break;  				default:  					rootName = "Other";  					break;  				}  				if ((rootFlags & GcRootFlags.Pinning) != 0)  					rootName += "' Pinning";  				if ((rootFlags & GcRootFlags.WeakRef) != 0)  					rootName += "' WeakRef";  				if ((rootFlags & GcRootFlags.Interior) != 0)  					rootName += "' Interior";  				if ((rootFlags & GcRootFlags.Refcounted) != 0)  					rootName += "' RefCounted";  				int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  				ulongStack [0] = objectID;  				ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  				objectGraph.AddRootObject (rootObject' rootID);  			}  			break;  		}  		case 'R':  		case 'r': {  			c = ReadChar ();  			thisIsR = true;  			if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				}  				break;  			}  			if (!previousWasR) {  				heapDumpEventList.AddEvent (lastTickIndex' null);  				if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  					readLogResult.objectGraph.BuildTypeGraph ();  					readLogResult.objectGraph.Neuter ();  				}  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  					readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  					for (int i = 0; i < h.Length; i++)  						readLogResult.heapDumpHistograms [i] = h [i];  					readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  				}  				readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  			}  			stackPtr = 0;  			ulong objectID;  			while ((objectID = ReadULong ()) != ulong.MaxValue) {  				if (objectID > 0) {  					ulongStack [stackPtr] = objectID;  					stackPtr++;  					if (stackPtr >= ulongStack.Length)  						ulongStack = GrowULongVector (ulongStack);  				}  			}  			if (c != -1) {  				if (readLogResult.objectGraph != null)  					readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  			}  			break;  		}  		case 'O':  		case 'o': {  			c = ReadChar ();  			if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			ulong objectId = ReadULong ();  			int typeIndex = ReadInt ();  			uint size = ReadUInt ();  			stackPtr = 0;  			ulong objectID;  			while ((objectID = ReadULong ()) != ulong.MaxValue) {  				if (objectID > 0) {  					ulongStack [stackPtr] = objectID;  					stackPtr++;  					if (stackPtr >= ulongStack.Length)  						ulongStack = GrowULongVector (ulongStack);  				}  			}  			if (c != -1) {  				ObjectGraph objectGraph = readLogResult.objectGraph;  				objectGraph.GetOrCreateGcType (typeIndex);  				int typeSizeStackTraceId = -1;  				int allocTickIndex = 0;  				// try to find the allocation stack trace and allocation time  				// from the live object table  				if (readLogResult.liveObjectTable != null) {  					LiveObjectTable.LiveObject liveObject;  					readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  					if (liveObject.id == objectId) {  						int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  						int typeIndexFromLiveObject = stackTrace [0];  						if (typeIndexFromLiveObject == typeIndex) {  							typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  							allocTickIndex = liveObject.allocTickIndex;  							Histogram[] h = readLogResult.heapDumpHistograms;  							if (h != null)  								h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  						}  					}  				}  				if (typeSizeStackTraceId == -1)  					typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  				ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  				gcObject.AllocTickIndex = allocTickIndex;  			}  			break;  		}  		case 'M':  		case 'm': {  			c = ReadChar ();  			int modIndex = ReadInt ();  			sb.Length = 0;  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			if (c != -1) {  				string lineString = sb.ToString ();  				int addrPos = lineString.LastIndexOf (" 0x");  				if (addrPos <= 0)  					addrPos = lineString.Length;  				int backSlashPos = lineString.LastIndexOf (@"\");  				if (backSlashPos <= 0)  					backSlashPos = -1;  				string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  				string fullName = lineString.Substring (0' addrPos);  				EnsureStringCapacity (modIndex' ref modBasicName);  				modBasicName [modIndex] = basicName;  				EnsureStringCapacity (modIndex' ref modFullName);  				modFullName [modIndex] = fullName;  			}  			break;  		}  		case 'U':  		case 'u': {  			c = ReadChar ();  			ulong oldId = ReadULong ();  			ulong newId = ReadULong ();  			uint length = ReadUInt ();  			Histogram reloHist = null;  			if (pos >= startFileOffset && pos < endFileOffset)  				reloHist = readLogResult.relocatedHistogram;  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  			break;  		}  		case 'V':  		case 'v': {  			c = ReadChar ();  			ulong startId = ReadULong ();  			uint length = ReadUInt ();  			Histogram reloHist = null;  			if (pos >= startFileOffset && pos < endFileOffset)  				reloHist = readLogResult.relocatedHistogram;  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  			break;  		}  		case 'B':  		case 'b':  			c = ReadChar ();  			int startGC = ReadInt ();  			int induced = ReadInt ();  			int condemnedGeneration = ReadInt ();  			if (startGC != 0)  				newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  			if (newGcEvent) {  				if (startGC != 0) {  					if (induced != 0) {  						for (int gen = 0; gen <= condemnedGeneration; gen++)  							inducedGcCount [gen]++;  					}  				}  				else {  					int condemnedLimit = condemnedGeneration;  					if (condemnedLimit == 2)  						condemnedLimit = 3;  					for (int gen = 0; gen <= condemnedLimit; gen++) {  						cumulativeGenerationSize [gen] += generationSize [gen];  						gcCount [gen]++;  					}  				}  			}  			for (int gen = 0; gen <= 3; gen++)  				generationSize [gen] = 0;  			while (c >= ' ') {  				ulong rangeStart = ReadULong ();  				ulong rangeLength = ReadULong ();  				ulong rangeLengthReserved = ReadULong ();  				int rangeGeneration = ReadInt ();  				if (c == -1 || rangeGeneration < 0)  					break;  				if (readLogResult.liveObjectTable != null) {  					if (startGC != 0) {  						if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  							readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  					}  					else {  						readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  					}  				}  				generationSize [rangeGeneration] += rangeLength;  			}  			if (startGC == 0 && readLogResult.liveObjectTable != null) {  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  			}  			break;  		case 'L':  		case 'l': {  			c = ReadChar ();  			int isCritical = ReadInt ();  			ulong objectId = ReadULong ();  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  				// try to find the allocation stack trace and allocation time  				// from the live object table  				LiveObjectTable.LiveObject liveObject;  				readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  				if (liveObject.id == objectId) {  					if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  						readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  					if (readLogResult.finalizerHistogram != null)  						readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  				}  			}  			break;  		}  		case 'I':  		case 'i':  			c = ReadChar ();  			int tickCount = ReadInt ();  			if (c != -1) {  				lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  				if (maxTickIndex < lastTickIndex)  					maxTickIndex = lastTickIndex;  			}  			break;  		case 'G':  		case 'g':  			c = ReadChar ();  			int gcGen0Count = ReadInt ();  			int gcGen1Count = ReadInt ();  			int gcGen2Count = ReadInt ();  			// if the newer 'b' lines occur' disregard the 'g' lines.  			if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  				if (c == -1 || gcGen0Count < 0)  					readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  				else  					readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  			}  			break;  		case 'N':  		case 'n': {  			c = ReadChar ();  			int funcIndex;  			int stackTraceIndex = ReadInt ();  			stackPtr = 0;  			int flag = ReadInt ();  			int matched = flag / 4;  			int hadTypeId = (flag & 2);  			bool hasTypeId = (flag & 1) == 1;  			if (hasTypeId) {  				intStack [stackPtr++] = ReadInt ();  				intStack [stackPtr++] = ReadInt ();  			}  			if (matched > 0 && c != -1) {  				/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  				otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  				int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  				if (matched > stacktrace.Length - hadTypeId)  					matched = stacktrace.Length - hadTypeId;  				for (int i = 0; i < matched; i++) {  					int funcId = stacktrace [i + hadTypeId];  					//Debug.Assert(funcId < funcName.Length);  					if (funcName [funcId] == null)  						funcName [funcId] = String.Empty;  					intStack [stackPtr++] = funcId;  					if (stackPtr >= intStack.Length) {  						intStack = GrowIntVector (intStack);  					}  				}  			}  			while ((funcIndex = ReadInt ()) >= 0) {  				intStack [stackPtr] = funcIndex;  				stackPtr++;  				if (stackPtr >= intStack.Length)  					intStack = GrowIntVector (intStack);  			}  			if (c != -1) {  				stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  			}  			break;  		}  		case 'y':  		case 'Y': {  			c = ReadChar ();  			int threadid = ReadInt ();  			if (!assembliesJustLoaded.ContainsKey (threadid)) {  				assembliesJustLoaded [threadid] = new List<string> ();  			}  			/* int assemblyId = */ReadInt ();  			while (c == ' ' || c == '\t') {  				c = ReadChar ();  			}  			sb.Length = 0;  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			string assemblyName = sb.ToString ();  			assembliesJustLoaded [threadid].Add (assemblyName);  			break;  		}  		case 'S':  		case 's': {  			c = ReadChar ();  			int stackTraceIndex = ReadInt ();  			int funcIndex;  			stackPtr = 0;  			while ((funcIndex = ReadInt ()) >= 0) {  				intStack [stackPtr] = funcIndex;  				stackPtr++;  				if (stackPtr >= intStack.Length)  					intStack = GrowIntVector (intStack);  			}  			if (c != -1) {  				stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  			}  			break;  		}  		case 'Z':  		case 'z': {  			sb.Length = 0;  			c = ReadChar ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			if (c != -1) {  				lastTickIndex = AddTimePos (lastLineStartPos);  				if (maxTickIndex < lastTickIndex)  					maxTickIndex = lastTickIndex;  				commentEventList.AddEvent (lastTickIndex' sb.ToString ());  			}  			break;  		}  		case 'H':  		case 'h': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong handleId = ReadULong ();  			ulong initialObjectId = ReadULong ();  			int stacktraceId = ReadInt ();  			if (c != -1) {  				if (readLogResult.handleHash != null)  					readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  				if (readLogResult.createdHandlesHistogram != null)  					readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  			}  			break;  		}  		case 'J':  		case 'j': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong handleId = ReadULong ();  			int stacktraceId = ReadInt ();  			if (c != -1) {  				if (readLogResult.handleHash != null) {  					if (readLogResult.handleHash.ContainsKey (handleId))  						readLogResult.handleHash.Remove (handleId);  					else {  						//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  						//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  						//for (int i = stacktrace.Length; --i >= 0; )  						//{  						//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  						//}  					}  				}  				if (readLogResult.destroyedHandlesHistogram != null)  					readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  			}  			break;  		}  		default: {  			// just ignore the unknown  			while (c != '\n' && c != '\r') {  				c = ReadChar ();  			}  			break;  		}  		}  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		if (c == '\r')  			c = ReadChar ();  		if (c == '\n') {  			c = ReadChar ();  			line++;  		}  	}  	//                readLogResult.functionList.ReportCallCountSizes(readLogResult.callstackHistogram);  }  //            catch (Exception)  //            {  //                throw new Exception(string.Format("Bad format in log file {0} line {1}"' fileName' line));  //                throw;  //            }  finally {  	if (r != null)  		r.Close ();  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: try {  	System.IO.Stream s = new System.IO.FileStream (fileName' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.ReadWrite);  	r = new System.IO.StreamReader (s);  	for (timePosIndex = timePosCount; timePosIndex > 0; timePosIndex--)  		if (timePos [timePosIndex - 1].pos <= startFileOffset)  			break;  	// start at the beginning if no later start point available or asked for info that can only  	// be constructed by reading the whole file.  	if (timePosIndex <= 1 || readLogResult.relocatedHistogram != null || readLogResult.finalizerHistogram != null || readLogResult.criticalFinalizerHistogram != null || readLogResult.liveObjectTable != null) {  		pos = 0;  		timePosIndex = 1;  	}  	else {  		timePosIndex--;  		pos = timePos [timePosIndex].pos;  	}  	if (timePosCount == 0) {  		timePos [0] = new TimePos (0.0' 0);  		timePosCount = timePosIndex = 1;  	}  	s.Position = pos;  	buffer = new byte[4096];  	bufPos = 0;  	bufLevel = 0;  	int maxProgress = (int)(r.BaseStream.Length / 1024);  	line = 1;  	StringBuilder sb = new StringBuilder ();  	ulong[] ulongStack = new ulong[1000];  	int[] intStack = new int[1000];  	int stackPtr = 0;  	c = ReadChar ();  	bool thisIsR = false' previousWasR;  	bool extendedRootInfoSeen = false;  	int lastTickIndex = 0;  	bool newGcEvent = false;  	while (c != -1) {  		if (pos > endFileOffset)  			break;  		if ((line % 1024) == 0) {  			int currentProgress = (int)(pos / 1024);  			if (currentProgress <= maxProgress) {  			}  		}  		lastLineStartPos = pos - 1;  		previousWasR = thisIsR;  		thisIsR = false;  		switch (c) {  		case -1:  			break;  		case 'F':  		case 'f': {  			c = ReadChar ();  			int funcIndex = ReadInt ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string name = ReadString (sb' ' '' false' 255);  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string signature = ReadString (sb' '\r'' true' 1023);  			ulong addr = ReadULong ();  			uint size = ReadUInt ();  			int modIndex = ReadInt ();  			int stackIndex = ReadInt ();  			if (c != -1) {  				EnsureStringCapacity (funcIndex' ref funcName);  				funcName [funcIndex] = name;  				EnsureStringCapacity (funcIndex' ref funcSignature);  				funcSignature [funcIndex] = signature;  				EnsureIntCapacity (funcIndex' ref funcModule);  				funcModule [funcIndex] = modIndex;  				string nameAndSignature = name;  				if (signature != null)  					nameAndSignature = name + ' ' + signature;  				if (stackIndex >= 0 && readLogResult.functionList != null) {  					funcSignatureIdHash [nameAndSignature] = funcIndex;  					readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  				}  			}  			break;  		}  		case 'T':  		case 't': {  			c = ReadChar ();  			int typeIndex = ReadInt ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			if (c != -1 && Char.IsDigit ((char)c)) {  				if (ReadInt () != 0) {  					finalizableTypes [typeIndex] = true;  				}  			}  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string typeName = ReadString (sb' '\r'' false' 1023);  			if (c != -1) {  				AddTypeName (typeIndex' typeName);  			}  			break;  		}  		// 'A' with thread identifier  		case '!': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong id = ReadULong ();  			int typeSizeStackTraceIndex = ReadInt ();  			typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  			if (c != -1) {  				if (readLogResult.liveObjectTable != null)  					readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  				if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  					// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  					readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  				}  				List<string> prev;  				if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  					foreach (string assemblyName in prev) {  						assemblies [assemblyName] = -typeSizeStackTraceIndex;  					}  					prev.Clear ();  				}  			}  			readLogResult.hadAllocInfo = true;  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'A':  		case 'a': {  			c = ReadChar ();  			ulong id = ReadULong ();  			int typeSizeStackTraceIndex = ReadInt ();  			typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  			if (c != -1) {  				if (readLogResult.liveObjectTable != null)  					readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  				if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  					// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  					readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  				}  			}  			readLogResult.hadAllocInfo = true;  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'C':  		case 'c': {  			c = ReadChar ();  			if (pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			int threadIndex = ReadInt ();  			int stackTraceIndex = ReadInt ();  			stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  			if (c != -1) {  				if (readLogResult.callstackHistogram != null) {  					readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  				}  				List<string> prev;  				if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  					foreach (string assemblyName in prev) {  						assemblies [assemblyName] = stackTraceIndex;  					}  					prev.Clear ();  				}  			}  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'E':  		case 'e': {  			c = ReadChar ();  			extendedRootInfoSeen = true;  			thisIsR = true;  			if (pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			if (!previousWasR) {  				heapDumpEventList.AddEvent (lastTickIndex' null);  				if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  					readLogResult.objectGraph.BuildTypeGraph ();  					readLogResult.objectGraph.Neuter ();  				}  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  					readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  					for (int i = 0; i < h.Length; i++)  						readLogResult.heapDumpHistograms [i] = h [i];  					readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  				}  				readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  			}  			ulong objectID = ReadULong ();  			GcRootKind rootKind = (GcRootKind)ReadInt ();  			GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  			ulong rootID = ReadULong ();  			ObjectGraph objectGraph = readLogResult.objectGraph;  			if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  				string rootName;  				switch (rootKind) {  				case GcRootKind.Stack:  					rootName = "Stack";  					break;  				case GcRootKind.Finalizer:  					rootName = "Finalizer";  					break;  				case GcRootKind.Handle:  					rootName = "Handle";  					break;  				default:  					rootName = "Other";  					break;  				}  				if ((rootFlags & GcRootFlags.Pinning) != 0)  					rootName += "' Pinning";  				if ((rootFlags & GcRootFlags.WeakRef) != 0)  					rootName += "' WeakRef";  				if ((rootFlags & GcRootFlags.Interior) != 0)  					rootName += "' Interior";  				if ((rootFlags & GcRootFlags.Refcounted) != 0)  					rootName += "' RefCounted";  				int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  				ulongStack [0] = objectID;  				ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  				objectGraph.AddRootObject (rootObject' rootID);  			}  			break;  		}  		case 'R':  		case 'r': {  			c = ReadChar ();  			thisIsR = true;  			if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				}  				break;  			}  			if (!previousWasR) {  				heapDumpEventList.AddEvent (lastTickIndex' null);  				if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  					readLogResult.objectGraph.BuildTypeGraph ();  					readLogResult.objectGraph.Neuter ();  				}  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  					readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  					for (int i = 0; i < h.Length; i++)  						readLogResult.heapDumpHistograms [i] = h [i];  					readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  				}  				readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  			}  			stackPtr = 0;  			ulong objectID;  			while ((objectID = ReadULong ()) != ulong.MaxValue) {  				if (objectID > 0) {  					ulongStack [stackPtr] = objectID;  					stackPtr++;  					if (stackPtr >= ulongStack.Length)  						ulongStack = GrowULongVector (ulongStack);  				}  			}  			if (c != -1) {  				if (readLogResult.objectGraph != null)  					readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  			}  			break;  		}  		case 'O':  		case 'o': {  			c = ReadChar ();  			if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			ulong objectId = ReadULong ();  			int typeIndex = ReadInt ();  			uint size = ReadUInt ();  			stackPtr = 0;  			ulong objectID;  			while ((objectID = ReadULong ()) != ulong.MaxValue) {  				if (objectID > 0) {  					ulongStack [stackPtr] = objectID;  					stackPtr++;  					if (stackPtr >= ulongStack.Length)  						ulongStack = GrowULongVector (ulongStack);  				}  			}  			if (c != -1) {  				ObjectGraph objectGraph = readLogResult.objectGraph;  				objectGraph.GetOrCreateGcType (typeIndex);  				int typeSizeStackTraceId = -1;  				int allocTickIndex = 0;  				// try to find the allocation stack trace and allocation time  				// from the live object table  				if (readLogResult.liveObjectTable != null) {  					LiveObjectTable.LiveObject liveObject;  					readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  					if (liveObject.id == objectId) {  						int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  						int typeIndexFromLiveObject = stackTrace [0];  						if (typeIndexFromLiveObject == typeIndex) {  							typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  							allocTickIndex = liveObject.allocTickIndex;  							Histogram[] h = readLogResult.heapDumpHistograms;  							if (h != null)  								h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  						}  					}  				}  				if (typeSizeStackTraceId == -1)  					typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  				ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  				gcObject.AllocTickIndex = allocTickIndex;  			}  			break;  		}  		case 'M':  		case 'm': {  			c = ReadChar ();  			int modIndex = ReadInt ();  			sb.Length = 0;  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			if (c != -1) {  				string lineString = sb.ToString ();  				int addrPos = lineString.LastIndexOf (" 0x");  				if (addrPos <= 0)  					addrPos = lineString.Length;  				int backSlashPos = lineString.LastIndexOf (@"\");  				if (backSlashPos <= 0)  					backSlashPos = -1;  				string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  				string fullName = lineString.Substring (0' addrPos);  				EnsureStringCapacity (modIndex' ref modBasicName);  				modBasicName [modIndex] = basicName;  				EnsureStringCapacity (modIndex' ref modFullName);  				modFullName [modIndex] = fullName;  			}  			break;  		}  		case 'U':  		case 'u': {  			c = ReadChar ();  			ulong oldId = ReadULong ();  			ulong newId = ReadULong ();  			uint length = ReadUInt ();  			Histogram reloHist = null;  			if (pos >= startFileOffset && pos < endFileOffset)  				reloHist = readLogResult.relocatedHistogram;  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  			break;  		}  		case 'V':  		case 'v': {  			c = ReadChar ();  			ulong startId = ReadULong ();  			uint length = ReadUInt ();  			Histogram reloHist = null;  			if (pos >= startFileOffset && pos < endFileOffset)  				reloHist = readLogResult.relocatedHistogram;  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  			break;  		}  		case 'B':  		case 'b':  			c = ReadChar ();  			int startGC = ReadInt ();  			int induced = ReadInt ();  			int condemnedGeneration = ReadInt ();  			if (startGC != 0)  				newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  			if (newGcEvent) {  				if (startGC != 0) {  					if (induced != 0) {  						for (int gen = 0; gen <= condemnedGeneration; gen++)  							inducedGcCount [gen]++;  					}  				}  				else {  					int condemnedLimit = condemnedGeneration;  					if (condemnedLimit == 2)  						condemnedLimit = 3;  					for (int gen = 0; gen <= condemnedLimit; gen++) {  						cumulativeGenerationSize [gen] += generationSize [gen];  						gcCount [gen]++;  					}  				}  			}  			for (int gen = 0; gen <= 3; gen++)  				generationSize [gen] = 0;  			while (c >= ' ') {  				ulong rangeStart = ReadULong ();  				ulong rangeLength = ReadULong ();  				ulong rangeLengthReserved = ReadULong ();  				int rangeGeneration = ReadInt ();  				if (c == -1 || rangeGeneration < 0)  					break;  				if (readLogResult.liveObjectTable != null) {  					if (startGC != 0) {  						if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  							readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  					}  					else {  						readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  					}  				}  				generationSize [rangeGeneration] += rangeLength;  			}  			if (startGC == 0 && readLogResult.liveObjectTable != null) {  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  			}  			break;  		case 'L':  		case 'l': {  			c = ReadChar ();  			int isCritical = ReadInt ();  			ulong objectId = ReadULong ();  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  				// try to find the allocation stack trace and allocation time  				// from the live object table  				LiveObjectTable.LiveObject liveObject;  				readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  				if (liveObject.id == objectId) {  					if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  						readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  					if (readLogResult.finalizerHistogram != null)  						readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  				}  			}  			break;  		}  		case 'I':  		case 'i':  			c = ReadChar ();  			int tickCount = ReadInt ();  			if (c != -1) {  				lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  				if (maxTickIndex < lastTickIndex)  					maxTickIndex = lastTickIndex;  			}  			break;  		case 'G':  		case 'g':  			c = ReadChar ();  			int gcGen0Count = ReadInt ();  			int gcGen1Count = ReadInt ();  			int gcGen2Count = ReadInt ();  			// if the newer 'b' lines occur' disregard the 'g' lines.  			if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  				if (c == -1 || gcGen0Count < 0)  					readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  				else  					readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  			}  			break;  		case 'N':  		case 'n': {  			c = ReadChar ();  			int funcIndex;  			int stackTraceIndex = ReadInt ();  			stackPtr = 0;  			int flag = ReadInt ();  			int matched = flag / 4;  			int hadTypeId = (flag & 2);  			bool hasTypeId = (flag & 1) == 1;  			if (hasTypeId) {  				intStack [stackPtr++] = ReadInt ();  				intStack [stackPtr++] = ReadInt ();  			}  			if (matched > 0 && c != -1) {  				/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  				otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  				int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  				if (matched > stacktrace.Length - hadTypeId)  					matched = stacktrace.Length - hadTypeId;  				for (int i = 0; i < matched; i++) {  					int funcId = stacktrace [i + hadTypeId];  					//Debug.Assert(funcId < funcName.Length);  					if (funcName [funcId] == null)  						funcName [funcId] = String.Empty;  					intStack [stackPtr++] = funcId;  					if (stackPtr >= intStack.Length) {  						intStack = GrowIntVector (intStack);  					}  				}  			}  			while ((funcIndex = ReadInt ()) >= 0) {  				intStack [stackPtr] = funcIndex;  				stackPtr++;  				if (stackPtr >= intStack.Length)  					intStack = GrowIntVector (intStack);  			}  			if (c != -1) {  				stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  			}  			break;  		}  		case 'y':  		case 'Y': {  			c = ReadChar ();  			int threadid = ReadInt ();  			if (!assembliesJustLoaded.ContainsKey (threadid)) {  				assembliesJustLoaded [threadid] = new List<string> ();  			}  			/* int assemblyId = */ReadInt ();  			while (c == ' ' || c == '\t') {  				c = ReadChar ();  			}  			sb.Length = 0;  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			string assemblyName = sb.ToString ();  			assembliesJustLoaded [threadid].Add (assemblyName);  			break;  		}  		case 'S':  		case 's': {  			c = ReadChar ();  			int stackTraceIndex = ReadInt ();  			int funcIndex;  			stackPtr = 0;  			while ((funcIndex = ReadInt ()) >= 0) {  				intStack [stackPtr] = funcIndex;  				stackPtr++;  				if (stackPtr >= intStack.Length)  					intStack = GrowIntVector (intStack);  			}  			if (c != -1) {  				stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  			}  			break;  		}  		case 'Z':  		case 'z': {  			sb.Length = 0;  			c = ReadChar ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			if (c != -1) {  				lastTickIndex = AddTimePos (lastLineStartPos);  				if (maxTickIndex < lastTickIndex)  					maxTickIndex = lastTickIndex;  				commentEventList.AddEvent (lastTickIndex' sb.ToString ());  			}  			break;  		}  		case 'H':  		case 'h': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong handleId = ReadULong ();  			ulong initialObjectId = ReadULong ();  			int stacktraceId = ReadInt ();  			if (c != -1) {  				if (readLogResult.handleHash != null)  					readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  				if (readLogResult.createdHandlesHistogram != null)  					readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  			}  			break;  		}  		case 'J':  		case 'j': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong handleId = ReadULong ();  			int stacktraceId = ReadInt ();  			if (c != -1) {  				if (readLogResult.handleHash != null) {  					if (readLogResult.handleHash.ContainsKey (handleId))  						readLogResult.handleHash.Remove (handleId);  					else {  						//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  						//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  						//for (int i = stacktrace.Length; --i >= 0; )  						//{  						//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  						//}  					}  				}  				if (readLogResult.destroyedHandlesHistogram != null)  					readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  			}  			break;  		}  		default: {  			// just ignore the unknown  			while (c != '\n' && c != '\r') {  				c = ReadChar ();  			}  			break;  		}  		}  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		if (c == '\r')  			c = ReadChar ();  		if (c == '\n') {  			c = ReadChar ();  			line++;  		}  	}  	//                readLogResult.functionList.ReportCallCountSizes(readLogResult.callstackHistogram);  }  //            catch (Exception)  //            {  //                throw new Exception(string.Format("Bad format in log file {0} line {1}"' fileName' line));  //                throw;  //            }  finally {  	if (r != null)  		r.Close ();  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: try {  	System.IO.Stream s = new System.IO.FileStream (fileName' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.ReadWrite);  	r = new System.IO.StreamReader (s);  	for (timePosIndex = timePosCount; timePosIndex > 0; timePosIndex--)  		if (timePos [timePosIndex - 1].pos <= startFileOffset)  			break;  	// start at the beginning if no later start point available or asked for info that can only  	// be constructed by reading the whole file.  	if (timePosIndex <= 1 || readLogResult.relocatedHistogram != null || readLogResult.finalizerHistogram != null || readLogResult.criticalFinalizerHistogram != null || readLogResult.liveObjectTable != null) {  		pos = 0;  		timePosIndex = 1;  	}  	else {  		timePosIndex--;  		pos = timePos [timePosIndex].pos;  	}  	if (timePosCount == 0) {  		timePos [0] = new TimePos (0.0' 0);  		timePosCount = timePosIndex = 1;  	}  	s.Position = pos;  	buffer = new byte[4096];  	bufPos = 0;  	bufLevel = 0;  	int maxProgress = (int)(r.BaseStream.Length / 1024);  	line = 1;  	StringBuilder sb = new StringBuilder ();  	ulong[] ulongStack = new ulong[1000];  	int[] intStack = new int[1000];  	int stackPtr = 0;  	c = ReadChar ();  	bool thisIsR = false' previousWasR;  	bool extendedRootInfoSeen = false;  	int lastTickIndex = 0;  	bool newGcEvent = false;  	while (c != -1) {  		if (pos > endFileOffset)  			break;  		if ((line % 1024) == 0) {  			int currentProgress = (int)(pos / 1024);  			if (currentProgress <= maxProgress) {  			}  		}  		lastLineStartPos = pos - 1;  		previousWasR = thisIsR;  		thisIsR = false;  		switch (c) {  		case -1:  			break;  		case 'F':  		case 'f': {  			c = ReadChar ();  			int funcIndex = ReadInt ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string name = ReadString (sb' ' '' false' 255);  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string signature = ReadString (sb' '\r'' true' 1023);  			ulong addr = ReadULong ();  			uint size = ReadUInt ();  			int modIndex = ReadInt ();  			int stackIndex = ReadInt ();  			if (c != -1) {  				EnsureStringCapacity (funcIndex' ref funcName);  				funcName [funcIndex] = name;  				EnsureStringCapacity (funcIndex' ref funcSignature);  				funcSignature [funcIndex] = signature;  				EnsureIntCapacity (funcIndex' ref funcModule);  				funcModule [funcIndex] = modIndex;  				string nameAndSignature = name;  				if (signature != null)  					nameAndSignature = name + ' ' + signature;  				if (stackIndex >= 0 && readLogResult.functionList != null) {  					funcSignatureIdHash [nameAndSignature] = funcIndex;  					readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  				}  			}  			break;  		}  		case 'T':  		case 't': {  			c = ReadChar ();  			int typeIndex = ReadInt ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			if (c != -1 && Char.IsDigit ((char)c)) {  				if (ReadInt () != 0) {  					finalizableTypes [typeIndex] = true;  				}  			}  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string typeName = ReadString (sb' '\r'' false' 1023);  			if (c != -1) {  				AddTypeName (typeIndex' typeName);  			}  			break;  		}  		// 'A' with thread identifier  		case '!': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong id = ReadULong ();  			int typeSizeStackTraceIndex = ReadInt ();  			typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  			if (c != -1) {  				if (readLogResult.liveObjectTable != null)  					readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  				if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  					// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  					readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  				}  				List<string> prev;  				if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  					foreach (string assemblyName in prev) {  						assemblies [assemblyName] = -typeSizeStackTraceIndex;  					}  					prev.Clear ();  				}  			}  			readLogResult.hadAllocInfo = true;  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'A':  		case 'a': {  			c = ReadChar ();  			ulong id = ReadULong ();  			int typeSizeStackTraceIndex = ReadInt ();  			typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  			if (c != -1) {  				if (readLogResult.liveObjectTable != null)  					readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  				if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  					// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  					readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  				}  			}  			readLogResult.hadAllocInfo = true;  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'C':  		case 'c': {  			c = ReadChar ();  			if (pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			int threadIndex = ReadInt ();  			int stackTraceIndex = ReadInt ();  			stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  			if (c != -1) {  				if (readLogResult.callstackHistogram != null) {  					readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  				}  				List<string> prev;  				if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  					foreach (string assemblyName in prev) {  						assemblies [assemblyName] = stackTraceIndex;  					}  					prev.Clear ();  				}  			}  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'E':  		case 'e': {  			c = ReadChar ();  			extendedRootInfoSeen = true;  			thisIsR = true;  			if (pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			if (!previousWasR) {  				heapDumpEventList.AddEvent (lastTickIndex' null);  				if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  					readLogResult.objectGraph.BuildTypeGraph ();  					readLogResult.objectGraph.Neuter ();  				}  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  					readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  					for (int i = 0; i < h.Length; i++)  						readLogResult.heapDumpHistograms [i] = h [i];  					readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  				}  				readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  			}  			ulong objectID = ReadULong ();  			GcRootKind rootKind = (GcRootKind)ReadInt ();  			GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  			ulong rootID = ReadULong ();  			ObjectGraph objectGraph = readLogResult.objectGraph;  			if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  				string rootName;  				switch (rootKind) {  				case GcRootKind.Stack:  					rootName = "Stack";  					break;  				case GcRootKind.Finalizer:  					rootName = "Finalizer";  					break;  				case GcRootKind.Handle:  					rootName = "Handle";  					break;  				default:  					rootName = "Other";  					break;  				}  				if ((rootFlags & GcRootFlags.Pinning) != 0)  					rootName += "' Pinning";  				if ((rootFlags & GcRootFlags.WeakRef) != 0)  					rootName += "' WeakRef";  				if ((rootFlags & GcRootFlags.Interior) != 0)  					rootName += "' Interior";  				if ((rootFlags & GcRootFlags.Refcounted) != 0)  					rootName += "' RefCounted";  				int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  				ulongStack [0] = objectID;  				ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  				objectGraph.AddRootObject (rootObject' rootID);  			}  			break;  		}  		case 'R':  		case 'r': {  			c = ReadChar ();  			thisIsR = true;  			if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				}  				break;  			}  			if (!previousWasR) {  				heapDumpEventList.AddEvent (lastTickIndex' null);  				if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  					readLogResult.objectGraph.BuildTypeGraph ();  					readLogResult.objectGraph.Neuter ();  				}  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  					readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  					for (int i = 0; i < h.Length; i++)  						readLogResult.heapDumpHistograms [i] = h [i];  					readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  				}  				readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  			}  			stackPtr = 0;  			ulong objectID;  			while ((objectID = ReadULong ()) != ulong.MaxValue) {  				if (objectID > 0) {  					ulongStack [stackPtr] = objectID;  					stackPtr++;  					if (stackPtr >= ulongStack.Length)  						ulongStack = GrowULongVector (ulongStack);  				}  			}  			if (c != -1) {  				if (readLogResult.objectGraph != null)  					readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  			}  			break;  		}  		case 'O':  		case 'o': {  			c = ReadChar ();  			if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			ulong objectId = ReadULong ();  			int typeIndex = ReadInt ();  			uint size = ReadUInt ();  			stackPtr = 0;  			ulong objectID;  			while ((objectID = ReadULong ()) != ulong.MaxValue) {  				if (objectID > 0) {  					ulongStack [stackPtr] = objectID;  					stackPtr++;  					if (stackPtr >= ulongStack.Length)  						ulongStack = GrowULongVector (ulongStack);  				}  			}  			if (c != -1) {  				ObjectGraph objectGraph = readLogResult.objectGraph;  				objectGraph.GetOrCreateGcType (typeIndex);  				int typeSizeStackTraceId = -1;  				int allocTickIndex = 0;  				// try to find the allocation stack trace and allocation time  				// from the live object table  				if (readLogResult.liveObjectTable != null) {  					LiveObjectTable.LiveObject liveObject;  					readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  					if (liveObject.id == objectId) {  						int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  						int typeIndexFromLiveObject = stackTrace [0];  						if (typeIndexFromLiveObject == typeIndex) {  							typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  							allocTickIndex = liveObject.allocTickIndex;  							Histogram[] h = readLogResult.heapDumpHistograms;  							if (h != null)  								h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  						}  					}  				}  				if (typeSizeStackTraceId == -1)  					typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  				ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  				gcObject.AllocTickIndex = allocTickIndex;  			}  			break;  		}  		case 'M':  		case 'm': {  			c = ReadChar ();  			int modIndex = ReadInt ();  			sb.Length = 0;  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			if (c != -1) {  				string lineString = sb.ToString ();  				int addrPos = lineString.LastIndexOf (" 0x");  				if (addrPos <= 0)  					addrPos = lineString.Length;  				int backSlashPos = lineString.LastIndexOf (@"\");  				if (backSlashPos <= 0)  					backSlashPos = -1;  				string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  				string fullName = lineString.Substring (0' addrPos);  				EnsureStringCapacity (modIndex' ref modBasicName);  				modBasicName [modIndex] = basicName;  				EnsureStringCapacity (modIndex' ref modFullName);  				modFullName [modIndex] = fullName;  			}  			break;  		}  		case 'U':  		case 'u': {  			c = ReadChar ();  			ulong oldId = ReadULong ();  			ulong newId = ReadULong ();  			uint length = ReadUInt ();  			Histogram reloHist = null;  			if (pos >= startFileOffset && pos < endFileOffset)  				reloHist = readLogResult.relocatedHistogram;  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  			break;  		}  		case 'V':  		case 'v': {  			c = ReadChar ();  			ulong startId = ReadULong ();  			uint length = ReadUInt ();  			Histogram reloHist = null;  			if (pos >= startFileOffset && pos < endFileOffset)  				reloHist = readLogResult.relocatedHistogram;  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  			break;  		}  		case 'B':  		case 'b':  			c = ReadChar ();  			int startGC = ReadInt ();  			int induced = ReadInt ();  			int condemnedGeneration = ReadInt ();  			if (startGC != 0)  				newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  			if (newGcEvent) {  				if (startGC != 0) {  					if (induced != 0) {  						for (int gen = 0; gen <= condemnedGeneration; gen++)  							inducedGcCount [gen]++;  					}  				}  				else {  					int condemnedLimit = condemnedGeneration;  					if (condemnedLimit == 2)  						condemnedLimit = 3;  					for (int gen = 0; gen <= condemnedLimit; gen++) {  						cumulativeGenerationSize [gen] += generationSize [gen];  						gcCount [gen]++;  					}  				}  			}  			for (int gen = 0; gen <= 3; gen++)  				generationSize [gen] = 0;  			while (c >= ' ') {  				ulong rangeStart = ReadULong ();  				ulong rangeLength = ReadULong ();  				ulong rangeLengthReserved = ReadULong ();  				int rangeGeneration = ReadInt ();  				if (c == -1 || rangeGeneration < 0)  					break;  				if (readLogResult.liveObjectTable != null) {  					if (startGC != 0) {  						if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  							readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  					}  					else {  						readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  					}  				}  				generationSize [rangeGeneration] += rangeLength;  			}  			if (startGC == 0 && readLogResult.liveObjectTable != null) {  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  			}  			break;  		case 'L':  		case 'l': {  			c = ReadChar ();  			int isCritical = ReadInt ();  			ulong objectId = ReadULong ();  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  				// try to find the allocation stack trace and allocation time  				// from the live object table  				LiveObjectTable.LiveObject liveObject;  				readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  				if (liveObject.id == objectId) {  					if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  						readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  					if (readLogResult.finalizerHistogram != null)  						readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  				}  			}  			break;  		}  		case 'I':  		case 'i':  			c = ReadChar ();  			int tickCount = ReadInt ();  			if (c != -1) {  				lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  				if (maxTickIndex < lastTickIndex)  					maxTickIndex = lastTickIndex;  			}  			break;  		case 'G':  		case 'g':  			c = ReadChar ();  			int gcGen0Count = ReadInt ();  			int gcGen1Count = ReadInt ();  			int gcGen2Count = ReadInt ();  			// if the newer 'b' lines occur' disregard the 'g' lines.  			if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  				if (c == -1 || gcGen0Count < 0)  					readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  				else  					readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  			}  			break;  		case 'N':  		case 'n': {  			c = ReadChar ();  			int funcIndex;  			int stackTraceIndex = ReadInt ();  			stackPtr = 0;  			int flag = ReadInt ();  			int matched = flag / 4;  			int hadTypeId = (flag & 2);  			bool hasTypeId = (flag & 1) == 1;  			if (hasTypeId) {  				intStack [stackPtr++] = ReadInt ();  				intStack [stackPtr++] = ReadInt ();  			}  			if (matched > 0 && c != -1) {  				/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  				otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  				int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  				if (matched > stacktrace.Length - hadTypeId)  					matched = stacktrace.Length - hadTypeId;  				for (int i = 0; i < matched; i++) {  					int funcId = stacktrace [i + hadTypeId];  					//Debug.Assert(funcId < funcName.Length);  					if (funcName [funcId] == null)  						funcName [funcId] = String.Empty;  					intStack [stackPtr++] = funcId;  					if (stackPtr >= intStack.Length) {  						intStack = GrowIntVector (intStack);  					}  				}  			}  			while ((funcIndex = ReadInt ()) >= 0) {  				intStack [stackPtr] = funcIndex;  				stackPtr++;  				if (stackPtr >= intStack.Length)  					intStack = GrowIntVector (intStack);  			}  			if (c != -1) {  				stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  			}  			break;  		}  		case 'y':  		case 'Y': {  			c = ReadChar ();  			int threadid = ReadInt ();  			if (!assembliesJustLoaded.ContainsKey (threadid)) {  				assembliesJustLoaded [threadid] = new List<string> ();  			}  			/* int assemblyId = */ReadInt ();  			while (c == ' ' || c == '\t') {  				c = ReadChar ();  			}  			sb.Length = 0;  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			string assemblyName = sb.ToString ();  			assembliesJustLoaded [threadid].Add (assemblyName);  			break;  		}  		case 'S':  		case 's': {  			c = ReadChar ();  			int stackTraceIndex = ReadInt ();  			int funcIndex;  			stackPtr = 0;  			while ((funcIndex = ReadInt ()) >= 0) {  				intStack [stackPtr] = funcIndex;  				stackPtr++;  				if (stackPtr >= intStack.Length)  					intStack = GrowIntVector (intStack);  			}  			if (c != -1) {  				stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  			}  			break;  		}  		case 'Z':  		case 'z': {  			sb.Length = 0;  			c = ReadChar ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			if (c != -1) {  				lastTickIndex = AddTimePos (lastLineStartPos);  				if (maxTickIndex < lastTickIndex)  					maxTickIndex = lastTickIndex;  				commentEventList.AddEvent (lastTickIndex' sb.ToString ());  			}  			break;  		}  		case 'H':  		case 'h': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong handleId = ReadULong ();  			ulong initialObjectId = ReadULong ();  			int stacktraceId = ReadInt ();  			if (c != -1) {  				if (readLogResult.handleHash != null)  					readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  				if (readLogResult.createdHandlesHistogram != null)  					readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  			}  			break;  		}  		case 'J':  		case 'j': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong handleId = ReadULong ();  			int stacktraceId = ReadInt ();  			if (c != -1) {  				if (readLogResult.handleHash != null) {  					if (readLogResult.handleHash.ContainsKey (handleId))  						readLogResult.handleHash.Remove (handleId);  					else {  						//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  						//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  						//for (int i = stacktrace.Length; --i >= 0; )  						//{  						//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  						//}  					}  				}  				if (readLogResult.destroyedHandlesHistogram != null)  					readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  			}  			break;  		}  		default: {  			// just ignore the unknown  			while (c != '\n' && c != '\r') {  				c = ReadChar ();  			}  			break;  		}  		}  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		if (c == '\r')  			c = ReadChar ();  		if (c == '\n') {  			c = ReadChar ();  			line++;  		}  	}  	//                readLogResult.functionList.ReportCallCountSizes(readLogResult.callstackHistogram);  }  //            catch (Exception)  //            {  //                throw new Exception(string.Format("Bad format in log file {0} line {1}"' fileName' line));  //                throw;  //            }  finally {  	if (r != null)  		r.Close ();  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: try {  	System.IO.Stream s = new System.IO.FileStream (fileName' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.ReadWrite);  	r = new System.IO.StreamReader (s);  	for (timePosIndex = timePosCount; timePosIndex > 0; timePosIndex--)  		if (timePos [timePosIndex - 1].pos <= startFileOffset)  			break;  	// start at the beginning if no later start point available or asked for info that can only  	// be constructed by reading the whole file.  	if (timePosIndex <= 1 || readLogResult.relocatedHistogram != null || readLogResult.finalizerHistogram != null || readLogResult.criticalFinalizerHistogram != null || readLogResult.liveObjectTable != null) {  		pos = 0;  		timePosIndex = 1;  	}  	else {  		timePosIndex--;  		pos = timePos [timePosIndex].pos;  	}  	if (timePosCount == 0) {  		timePos [0] = new TimePos (0.0' 0);  		timePosCount = timePosIndex = 1;  	}  	s.Position = pos;  	buffer = new byte[4096];  	bufPos = 0;  	bufLevel = 0;  	int maxProgress = (int)(r.BaseStream.Length / 1024);  	line = 1;  	StringBuilder sb = new StringBuilder ();  	ulong[] ulongStack = new ulong[1000];  	int[] intStack = new int[1000];  	int stackPtr = 0;  	c = ReadChar ();  	bool thisIsR = false' previousWasR;  	bool extendedRootInfoSeen = false;  	int lastTickIndex = 0;  	bool newGcEvent = false;  	while (c != -1) {  		if (pos > endFileOffset)  			break;  		if ((line % 1024) == 0) {  			int currentProgress = (int)(pos / 1024);  			if (currentProgress <= maxProgress) {  			}  		}  		lastLineStartPos = pos - 1;  		previousWasR = thisIsR;  		thisIsR = false;  		switch (c) {  		case -1:  			break;  		case 'F':  		case 'f': {  			c = ReadChar ();  			int funcIndex = ReadInt ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string name = ReadString (sb' ' '' false' 255);  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string signature = ReadString (sb' '\r'' true' 1023);  			ulong addr = ReadULong ();  			uint size = ReadUInt ();  			int modIndex = ReadInt ();  			int stackIndex = ReadInt ();  			if (c != -1) {  				EnsureStringCapacity (funcIndex' ref funcName);  				funcName [funcIndex] = name;  				EnsureStringCapacity (funcIndex' ref funcSignature);  				funcSignature [funcIndex] = signature;  				EnsureIntCapacity (funcIndex' ref funcModule);  				funcModule [funcIndex] = modIndex;  				string nameAndSignature = name;  				if (signature != null)  					nameAndSignature = name + ' ' + signature;  				if (stackIndex >= 0 && readLogResult.functionList != null) {  					funcSignatureIdHash [nameAndSignature] = funcIndex;  					readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  				}  			}  			break;  		}  		case 'T':  		case 't': {  			c = ReadChar ();  			int typeIndex = ReadInt ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			if (c != -1 && Char.IsDigit ((char)c)) {  				if (ReadInt () != 0) {  					finalizableTypes [typeIndex] = true;  				}  			}  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string typeName = ReadString (sb' '\r'' false' 1023);  			if (c != -1) {  				AddTypeName (typeIndex' typeName);  			}  			break;  		}  		// 'A' with thread identifier  		case '!': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong id = ReadULong ();  			int typeSizeStackTraceIndex = ReadInt ();  			typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  			if (c != -1) {  				if (readLogResult.liveObjectTable != null)  					readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  				if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  					// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  					readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  				}  				List<string> prev;  				if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  					foreach (string assemblyName in prev) {  						assemblies [assemblyName] = -typeSizeStackTraceIndex;  					}  					prev.Clear ();  				}  			}  			readLogResult.hadAllocInfo = true;  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'A':  		case 'a': {  			c = ReadChar ();  			ulong id = ReadULong ();  			int typeSizeStackTraceIndex = ReadInt ();  			typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  			if (c != -1) {  				if (readLogResult.liveObjectTable != null)  					readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  				if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  					// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  					readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  				}  			}  			readLogResult.hadAllocInfo = true;  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'C':  		case 'c': {  			c = ReadChar ();  			if (pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			int threadIndex = ReadInt ();  			int stackTraceIndex = ReadInt ();  			stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  			if (c != -1) {  				if (readLogResult.callstackHistogram != null) {  					readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  				}  				List<string> prev;  				if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  					foreach (string assemblyName in prev) {  						assemblies [assemblyName] = stackTraceIndex;  					}  					prev.Clear ();  				}  			}  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'E':  		case 'e': {  			c = ReadChar ();  			extendedRootInfoSeen = true;  			thisIsR = true;  			if (pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			if (!previousWasR) {  				heapDumpEventList.AddEvent (lastTickIndex' null);  				if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  					readLogResult.objectGraph.BuildTypeGraph ();  					readLogResult.objectGraph.Neuter ();  				}  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  					readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  					for (int i = 0; i < h.Length; i++)  						readLogResult.heapDumpHistograms [i] = h [i];  					readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  				}  				readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  			}  			ulong objectID = ReadULong ();  			GcRootKind rootKind = (GcRootKind)ReadInt ();  			GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  			ulong rootID = ReadULong ();  			ObjectGraph objectGraph = readLogResult.objectGraph;  			if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  				string rootName;  				switch (rootKind) {  				case GcRootKind.Stack:  					rootName = "Stack";  					break;  				case GcRootKind.Finalizer:  					rootName = "Finalizer";  					break;  				case GcRootKind.Handle:  					rootName = "Handle";  					break;  				default:  					rootName = "Other";  					break;  				}  				if ((rootFlags & GcRootFlags.Pinning) != 0)  					rootName += "' Pinning";  				if ((rootFlags & GcRootFlags.WeakRef) != 0)  					rootName += "' WeakRef";  				if ((rootFlags & GcRootFlags.Interior) != 0)  					rootName += "' Interior";  				if ((rootFlags & GcRootFlags.Refcounted) != 0)  					rootName += "' RefCounted";  				int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  				ulongStack [0] = objectID;  				ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  				objectGraph.AddRootObject (rootObject' rootID);  			}  			break;  		}  		case 'R':  		case 'r': {  			c = ReadChar ();  			thisIsR = true;  			if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				}  				break;  			}  			if (!previousWasR) {  				heapDumpEventList.AddEvent (lastTickIndex' null);  				if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  					readLogResult.objectGraph.BuildTypeGraph ();  					readLogResult.objectGraph.Neuter ();  				}  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  					readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  					for (int i = 0; i < h.Length; i++)  						readLogResult.heapDumpHistograms [i] = h [i];  					readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  				}  				readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  			}  			stackPtr = 0;  			ulong objectID;  			while ((objectID = ReadULong ()) != ulong.MaxValue) {  				if (objectID > 0) {  					ulongStack [stackPtr] = objectID;  					stackPtr++;  					if (stackPtr >= ulongStack.Length)  						ulongStack = GrowULongVector (ulongStack);  				}  			}  			if (c != -1) {  				if (readLogResult.objectGraph != null)  					readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  			}  			break;  		}  		case 'O':  		case 'o': {  			c = ReadChar ();  			if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			ulong objectId = ReadULong ();  			int typeIndex = ReadInt ();  			uint size = ReadUInt ();  			stackPtr = 0;  			ulong objectID;  			while ((objectID = ReadULong ()) != ulong.MaxValue) {  				if (objectID > 0) {  					ulongStack [stackPtr] = objectID;  					stackPtr++;  					if (stackPtr >= ulongStack.Length)  						ulongStack = GrowULongVector (ulongStack);  				}  			}  			if (c != -1) {  				ObjectGraph objectGraph = readLogResult.objectGraph;  				objectGraph.GetOrCreateGcType (typeIndex);  				int typeSizeStackTraceId = -1;  				int allocTickIndex = 0;  				// try to find the allocation stack trace and allocation time  				// from the live object table  				if (readLogResult.liveObjectTable != null) {  					LiveObjectTable.LiveObject liveObject;  					readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  					if (liveObject.id == objectId) {  						int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  						int typeIndexFromLiveObject = stackTrace [0];  						if (typeIndexFromLiveObject == typeIndex) {  							typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  							allocTickIndex = liveObject.allocTickIndex;  							Histogram[] h = readLogResult.heapDumpHistograms;  							if (h != null)  								h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  						}  					}  				}  				if (typeSizeStackTraceId == -1)  					typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  				ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  				gcObject.AllocTickIndex = allocTickIndex;  			}  			break;  		}  		case 'M':  		case 'm': {  			c = ReadChar ();  			int modIndex = ReadInt ();  			sb.Length = 0;  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			if (c != -1) {  				string lineString = sb.ToString ();  				int addrPos = lineString.LastIndexOf (" 0x");  				if (addrPos <= 0)  					addrPos = lineString.Length;  				int backSlashPos = lineString.LastIndexOf (@"\");  				if (backSlashPos <= 0)  					backSlashPos = -1;  				string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  				string fullName = lineString.Substring (0' addrPos);  				EnsureStringCapacity (modIndex' ref modBasicName);  				modBasicName [modIndex] = basicName;  				EnsureStringCapacity (modIndex' ref modFullName);  				modFullName [modIndex] = fullName;  			}  			break;  		}  		case 'U':  		case 'u': {  			c = ReadChar ();  			ulong oldId = ReadULong ();  			ulong newId = ReadULong ();  			uint length = ReadUInt ();  			Histogram reloHist = null;  			if (pos >= startFileOffset && pos < endFileOffset)  				reloHist = readLogResult.relocatedHistogram;  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  			break;  		}  		case 'V':  		case 'v': {  			c = ReadChar ();  			ulong startId = ReadULong ();  			uint length = ReadUInt ();  			Histogram reloHist = null;  			if (pos >= startFileOffset && pos < endFileOffset)  				reloHist = readLogResult.relocatedHistogram;  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  			break;  		}  		case 'B':  		case 'b':  			c = ReadChar ();  			int startGC = ReadInt ();  			int induced = ReadInt ();  			int condemnedGeneration = ReadInt ();  			if (startGC != 0)  				newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  			if (newGcEvent) {  				if (startGC != 0) {  					if (induced != 0) {  						for (int gen = 0; gen <= condemnedGeneration; gen++)  							inducedGcCount [gen]++;  					}  				}  				else {  					int condemnedLimit = condemnedGeneration;  					if (condemnedLimit == 2)  						condemnedLimit = 3;  					for (int gen = 0; gen <= condemnedLimit; gen++) {  						cumulativeGenerationSize [gen] += generationSize [gen];  						gcCount [gen]++;  					}  				}  			}  			for (int gen = 0; gen <= 3; gen++)  				generationSize [gen] = 0;  			while (c >= ' ') {  				ulong rangeStart = ReadULong ();  				ulong rangeLength = ReadULong ();  				ulong rangeLengthReserved = ReadULong ();  				int rangeGeneration = ReadInt ();  				if (c == -1 || rangeGeneration < 0)  					break;  				if (readLogResult.liveObjectTable != null) {  					if (startGC != 0) {  						if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  							readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  					}  					else {  						readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  					}  				}  				generationSize [rangeGeneration] += rangeLength;  			}  			if (startGC == 0 && readLogResult.liveObjectTable != null) {  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  			}  			break;  		case 'L':  		case 'l': {  			c = ReadChar ();  			int isCritical = ReadInt ();  			ulong objectId = ReadULong ();  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  				// try to find the allocation stack trace and allocation time  				// from the live object table  				LiveObjectTable.LiveObject liveObject;  				readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  				if (liveObject.id == objectId) {  					if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  						readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  					if (readLogResult.finalizerHistogram != null)  						readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  				}  			}  			break;  		}  		case 'I':  		case 'i':  			c = ReadChar ();  			int tickCount = ReadInt ();  			if (c != -1) {  				lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  				if (maxTickIndex < lastTickIndex)  					maxTickIndex = lastTickIndex;  			}  			break;  		case 'G':  		case 'g':  			c = ReadChar ();  			int gcGen0Count = ReadInt ();  			int gcGen1Count = ReadInt ();  			int gcGen2Count = ReadInt ();  			// if the newer 'b' lines occur' disregard the 'g' lines.  			if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  				if (c == -1 || gcGen0Count < 0)  					readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  				else  					readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  			}  			break;  		case 'N':  		case 'n': {  			c = ReadChar ();  			int funcIndex;  			int stackTraceIndex = ReadInt ();  			stackPtr = 0;  			int flag = ReadInt ();  			int matched = flag / 4;  			int hadTypeId = (flag & 2);  			bool hasTypeId = (flag & 1) == 1;  			if (hasTypeId) {  				intStack [stackPtr++] = ReadInt ();  				intStack [stackPtr++] = ReadInt ();  			}  			if (matched > 0 && c != -1) {  				/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  				otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  				int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  				if (matched > stacktrace.Length - hadTypeId)  					matched = stacktrace.Length - hadTypeId;  				for (int i = 0; i < matched; i++) {  					int funcId = stacktrace [i + hadTypeId];  					//Debug.Assert(funcId < funcName.Length);  					if (funcName [funcId] == null)  						funcName [funcId] = String.Empty;  					intStack [stackPtr++] = funcId;  					if (stackPtr >= intStack.Length) {  						intStack = GrowIntVector (intStack);  					}  				}  			}  			while ((funcIndex = ReadInt ()) >= 0) {  				intStack [stackPtr] = funcIndex;  				stackPtr++;  				if (stackPtr >= intStack.Length)  					intStack = GrowIntVector (intStack);  			}  			if (c != -1) {  				stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  			}  			break;  		}  		case 'y':  		case 'Y': {  			c = ReadChar ();  			int threadid = ReadInt ();  			if (!assembliesJustLoaded.ContainsKey (threadid)) {  				assembliesJustLoaded [threadid] = new List<string> ();  			}  			/* int assemblyId = */ReadInt ();  			while (c == ' ' || c == '\t') {  				c = ReadChar ();  			}  			sb.Length = 0;  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			string assemblyName = sb.ToString ();  			assembliesJustLoaded [threadid].Add (assemblyName);  			break;  		}  		case 'S':  		case 's': {  			c = ReadChar ();  			int stackTraceIndex = ReadInt ();  			int funcIndex;  			stackPtr = 0;  			while ((funcIndex = ReadInt ()) >= 0) {  				intStack [stackPtr] = funcIndex;  				stackPtr++;  				if (stackPtr >= intStack.Length)  					intStack = GrowIntVector (intStack);  			}  			if (c != -1) {  				stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  			}  			break;  		}  		case 'Z':  		case 'z': {  			sb.Length = 0;  			c = ReadChar ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			if (c != -1) {  				lastTickIndex = AddTimePos (lastLineStartPos);  				if (maxTickIndex < lastTickIndex)  					maxTickIndex = lastTickIndex;  				commentEventList.AddEvent (lastTickIndex' sb.ToString ());  			}  			break;  		}  		case 'H':  		case 'h': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong handleId = ReadULong ();  			ulong initialObjectId = ReadULong ();  			int stacktraceId = ReadInt ();  			if (c != -1) {  				if (readLogResult.handleHash != null)  					readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  				if (readLogResult.createdHandlesHistogram != null)  					readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  			}  			break;  		}  		case 'J':  		case 'j': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong handleId = ReadULong ();  			int stacktraceId = ReadInt ();  			if (c != -1) {  				if (readLogResult.handleHash != null) {  					if (readLogResult.handleHash.ContainsKey (handleId))  						readLogResult.handleHash.Remove (handleId);  					else {  						//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  						//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  						//for (int i = stacktrace.Length; --i >= 0; )  						//{  						//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  						//}  					}  				}  				if (readLogResult.destroyedHandlesHistogram != null)  					readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  			}  			break;  		}  		default: {  			// just ignore the unknown  			while (c != '\n' && c != '\r') {  				c = ReadChar ();  			}  			break;  		}  		}  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		if (c == '\r')  			c = ReadChar ();  		if (c == '\n') {  			c = ReadChar ();  			line++;  		}  	}  	//                readLogResult.functionList.ReportCallCountSizes(readLogResult.callstackHistogram);  }  //            catch (Exception)  //            {  //                throw new Exception(string.Format("Bad format in log file {0} line {1}"' fileName' line));  //                throw;  //            }  finally {  	if (r != null)  		r.Close ();  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: try {  	System.IO.Stream s = new System.IO.FileStream (fileName' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.ReadWrite);  	r = new System.IO.StreamReader (s);  	for (timePosIndex = timePosCount; timePosIndex > 0; timePosIndex--)  		if (timePos [timePosIndex - 1].pos <= startFileOffset)  			break;  	// start at the beginning if no later start point available or asked for info that can only  	// be constructed by reading the whole file.  	if (timePosIndex <= 1 || readLogResult.relocatedHistogram != null || readLogResult.finalizerHistogram != null || readLogResult.criticalFinalizerHistogram != null || readLogResult.liveObjectTable != null) {  		pos = 0;  		timePosIndex = 1;  	}  	else {  		timePosIndex--;  		pos = timePos [timePosIndex].pos;  	}  	if (timePosCount == 0) {  		timePos [0] = new TimePos (0.0' 0);  		timePosCount = timePosIndex = 1;  	}  	s.Position = pos;  	buffer = new byte[4096];  	bufPos = 0;  	bufLevel = 0;  	int maxProgress = (int)(r.BaseStream.Length / 1024);  	line = 1;  	StringBuilder sb = new StringBuilder ();  	ulong[] ulongStack = new ulong[1000];  	int[] intStack = new int[1000];  	int stackPtr = 0;  	c = ReadChar ();  	bool thisIsR = false' previousWasR;  	bool extendedRootInfoSeen = false;  	int lastTickIndex = 0;  	bool newGcEvent = false;  	while (c != -1) {  		if (pos > endFileOffset)  			break;  		if ((line % 1024) == 0) {  			int currentProgress = (int)(pos / 1024);  			if (currentProgress <= maxProgress) {  			}  		}  		lastLineStartPos = pos - 1;  		previousWasR = thisIsR;  		thisIsR = false;  		switch (c) {  		case -1:  			break;  		case 'F':  		case 'f': {  			c = ReadChar ();  			int funcIndex = ReadInt ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string name = ReadString (sb' ' '' false' 255);  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string signature = ReadString (sb' '\r'' true' 1023);  			ulong addr = ReadULong ();  			uint size = ReadUInt ();  			int modIndex = ReadInt ();  			int stackIndex = ReadInt ();  			if (c != -1) {  				EnsureStringCapacity (funcIndex' ref funcName);  				funcName [funcIndex] = name;  				EnsureStringCapacity (funcIndex' ref funcSignature);  				funcSignature [funcIndex] = signature;  				EnsureIntCapacity (funcIndex' ref funcModule);  				funcModule [funcIndex] = modIndex;  				string nameAndSignature = name;  				if (signature != null)  					nameAndSignature = name + ' ' + signature;  				if (stackIndex >= 0 && readLogResult.functionList != null) {  					funcSignatureIdHash [nameAndSignature] = funcIndex;  					readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  				}  			}  			break;  		}  		case 'T':  		case 't': {  			c = ReadChar ();  			int typeIndex = ReadInt ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			if (c != -1 && Char.IsDigit ((char)c)) {  				if (ReadInt () != 0) {  					finalizableTypes [typeIndex] = true;  				}  			}  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string typeName = ReadString (sb' '\r'' false' 1023);  			if (c != -1) {  				AddTypeName (typeIndex' typeName);  			}  			break;  		}  		// 'A' with thread identifier  		case '!': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong id = ReadULong ();  			int typeSizeStackTraceIndex = ReadInt ();  			typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  			if (c != -1) {  				if (readLogResult.liveObjectTable != null)  					readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  				if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  					// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  					readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  				}  				List<string> prev;  				if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  					foreach (string assemblyName in prev) {  						assemblies [assemblyName] = -typeSizeStackTraceIndex;  					}  					prev.Clear ();  				}  			}  			readLogResult.hadAllocInfo = true;  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'A':  		case 'a': {  			c = ReadChar ();  			ulong id = ReadULong ();  			int typeSizeStackTraceIndex = ReadInt ();  			typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  			if (c != -1) {  				if (readLogResult.liveObjectTable != null)  					readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  				if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  					// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  					readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  				}  			}  			readLogResult.hadAllocInfo = true;  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'C':  		case 'c': {  			c = ReadChar ();  			if (pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			int threadIndex = ReadInt ();  			int stackTraceIndex = ReadInt ();  			stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  			if (c != -1) {  				if (readLogResult.callstackHistogram != null) {  					readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  				}  				List<string> prev;  				if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  					foreach (string assemblyName in prev) {  						assemblies [assemblyName] = stackTraceIndex;  					}  					prev.Clear ();  				}  			}  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'E':  		case 'e': {  			c = ReadChar ();  			extendedRootInfoSeen = true;  			thisIsR = true;  			if (pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			if (!previousWasR) {  				heapDumpEventList.AddEvent (lastTickIndex' null);  				if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  					readLogResult.objectGraph.BuildTypeGraph ();  					readLogResult.objectGraph.Neuter ();  				}  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  					readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  					for (int i = 0; i < h.Length; i++)  						readLogResult.heapDumpHistograms [i] = h [i];  					readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  				}  				readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  			}  			ulong objectID = ReadULong ();  			GcRootKind rootKind = (GcRootKind)ReadInt ();  			GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  			ulong rootID = ReadULong ();  			ObjectGraph objectGraph = readLogResult.objectGraph;  			if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  				string rootName;  				switch (rootKind) {  				case GcRootKind.Stack:  					rootName = "Stack";  					break;  				case GcRootKind.Finalizer:  					rootName = "Finalizer";  					break;  				case GcRootKind.Handle:  					rootName = "Handle";  					break;  				default:  					rootName = "Other";  					break;  				}  				if ((rootFlags & GcRootFlags.Pinning) != 0)  					rootName += "' Pinning";  				if ((rootFlags & GcRootFlags.WeakRef) != 0)  					rootName += "' WeakRef";  				if ((rootFlags & GcRootFlags.Interior) != 0)  					rootName += "' Interior";  				if ((rootFlags & GcRootFlags.Refcounted) != 0)  					rootName += "' RefCounted";  				int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  				ulongStack [0] = objectID;  				ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  				objectGraph.AddRootObject (rootObject' rootID);  			}  			break;  		}  		case 'R':  		case 'r': {  			c = ReadChar ();  			thisIsR = true;  			if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				}  				break;  			}  			if (!previousWasR) {  				heapDumpEventList.AddEvent (lastTickIndex' null);  				if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  					readLogResult.objectGraph.BuildTypeGraph ();  					readLogResult.objectGraph.Neuter ();  				}  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  					readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  					for (int i = 0; i < h.Length; i++)  						readLogResult.heapDumpHistograms [i] = h [i];  					readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  				}  				readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  			}  			stackPtr = 0;  			ulong objectID;  			while ((objectID = ReadULong ()) != ulong.MaxValue) {  				if (objectID > 0) {  					ulongStack [stackPtr] = objectID;  					stackPtr++;  					if (stackPtr >= ulongStack.Length)  						ulongStack = GrowULongVector (ulongStack);  				}  			}  			if (c != -1) {  				if (readLogResult.objectGraph != null)  					readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  			}  			break;  		}  		case 'O':  		case 'o': {  			c = ReadChar ();  			if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			ulong objectId = ReadULong ();  			int typeIndex = ReadInt ();  			uint size = ReadUInt ();  			stackPtr = 0;  			ulong objectID;  			while ((objectID = ReadULong ()) != ulong.MaxValue) {  				if (objectID > 0) {  					ulongStack [stackPtr] = objectID;  					stackPtr++;  					if (stackPtr >= ulongStack.Length)  						ulongStack = GrowULongVector (ulongStack);  				}  			}  			if (c != -1) {  				ObjectGraph objectGraph = readLogResult.objectGraph;  				objectGraph.GetOrCreateGcType (typeIndex);  				int typeSizeStackTraceId = -1;  				int allocTickIndex = 0;  				// try to find the allocation stack trace and allocation time  				// from the live object table  				if (readLogResult.liveObjectTable != null) {  					LiveObjectTable.LiveObject liveObject;  					readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  					if (liveObject.id == objectId) {  						int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  						int typeIndexFromLiveObject = stackTrace [0];  						if (typeIndexFromLiveObject == typeIndex) {  							typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  							allocTickIndex = liveObject.allocTickIndex;  							Histogram[] h = readLogResult.heapDumpHistograms;  							if (h != null)  								h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  						}  					}  				}  				if (typeSizeStackTraceId == -1)  					typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  				ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  				gcObject.AllocTickIndex = allocTickIndex;  			}  			break;  		}  		case 'M':  		case 'm': {  			c = ReadChar ();  			int modIndex = ReadInt ();  			sb.Length = 0;  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			if (c != -1) {  				string lineString = sb.ToString ();  				int addrPos = lineString.LastIndexOf (" 0x");  				if (addrPos <= 0)  					addrPos = lineString.Length;  				int backSlashPos = lineString.LastIndexOf (@"\");  				if (backSlashPos <= 0)  					backSlashPos = -1;  				string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  				string fullName = lineString.Substring (0' addrPos);  				EnsureStringCapacity (modIndex' ref modBasicName);  				modBasicName [modIndex] = basicName;  				EnsureStringCapacity (modIndex' ref modFullName);  				modFullName [modIndex] = fullName;  			}  			break;  		}  		case 'U':  		case 'u': {  			c = ReadChar ();  			ulong oldId = ReadULong ();  			ulong newId = ReadULong ();  			uint length = ReadUInt ();  			Histogram reloHist = null;  			if (pos >= startFileOffset && pos < endFileOffset)  				reloHist = readLogResult.relocatedHistogram;  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  			break;  		}  		case 'V':  		case 'v': {  			c = ReadChar ();  			ulong startId = ReadULong ();  			uint length = ReadUInt ();  			Histogram reloHist = null;  			if (pos >= startFileOffset && pos < endFileOffset)  				reloHist = readLogResult.relocatedHistogram;  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  			break;  		}  		case 'B':  		case 'b':  			c = ReadChar ();  			int startGC = ReadInt ();  			int induced = ReadInt ();  			int condemnedGeneration = ReadInt ();  			if (startGC != 0)  				newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  			if (newGcEvent) {  				if (startGC != 0) {  					if (induced != 0) {  						for (int gen = 0; gen <= condemnedGeneration; gen++)  							inducedGcCount [gen]++;  					}  				}  				else {  					int condemnedLimit = condemnedGeneration;  					if (condemnedLimit == 2)  						condemnedLimit = 3;  					for (int gen = 0; gen <= condemnedLimit; gen++) {  						cumulativeGenerationSize [gen] += generationSize [gen];  						gcCount [gen]++;  					}  				}  			}  			for (int gen = 0; gen <= 3; gen++)  				generationSize [gen] = 0;  			while (c >= ' ') {  				ulong rangeStart = ReadULong ();  				ulong rangeLength = ReadULong ();  				ulong rangeLengthReserved = ReadULong ();  				int rangeGeneration = ReadInt ();  				if (c == -1 || rangeGeneration < 0)  					break;  				if (readLogResult.liveObjectTable != null) {  					if (startGC != 0) {  						if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  							readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  					}  					else {  						readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  					}  				}  				generationSize [rangeGeneration] += rangeLength;  			}  			if (startGC == 0 && readLogResult.liveObjectTable != null) {  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  			}  			break;  		case 'L':  		case 'l': {  			c = ReadChar ();  			int isCritical = ReadInt ();  			ulong objectId = ReadULong ();  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  				// try to find the allocation stack trace and allocation time  				// from the live object table  				LiveObjectTable.LiveObject liveObject;  				readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  				if (liveObject.id == objectId) {  					if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  						readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  					if (readLogResult.finalizerHistogram != null)  						readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  				}  			}  			break;  		}  		case 'I':  		case 'i':  			c = ReadChar ();  			int tickCount = ReadInt ();  			if (c != -1) {  				lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  				if (maxTickIndex < lastTickIndex)  					maxTickIndex = lastTickIndex;  			}  			break;  		case 'G':  		case 'g':  			c = ReadChar ();  			int gcGen0Count = ReadInt ();  			int gcGen1Count = ReadInt ();  			int gcGen2Count = ReadInt ();  			// if the newer 'b' lines occur' disregard the 'g' lines.  			if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  				if (c == -1 || gcGen0Count < 0)  					readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  				else  					readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  			}  			break;  		case 'N':  		case 'n': {  			c = ReadChar ();  			int funcIndex;  			int stackTraceIndex = ReadInt ();  			stackPtr = 0;  			int flag = ReadInt ();  			int matched = flag / 4;  			int hadTypeId = (flag & 2);  			bool hasTypeId = (flag & 1) == 1;  			if (hasTypeId) {  				intStack [stackPtr++] = ReadInt ();  				intStack [stackPtr++] = ReadInt ();  			}  			if (matched > 0 && c != -1) {  				/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  				otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  				int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  				if (matched > stacktrace.Length - hadTypeId)  					matched = stacktrace.Length - hadTypeId;  				for (int i = 0; i < matched; i++) {  					int funcId = stacktrace [i + hadTypeId];  					//Debug.Assert(funcId < funcName.Length);  					if (funcName [funcId] == null)  						funcName [funcId] = String.Empty;  					intStack [stackPtr++] = funcId;  					if (stackPtr >= intStack.Length) {  						intStack = GrowIntVector (intStack);  					}  				}  			}  			while ((funcIndex = ReadInt ()) >= 0) {  				intStack [stackPtr] = funcIndex;  				stackPtr++;  				if (stackPtr >= intStack.Length)  					intStack = GrowIntVector (intStack);  			}  			if (c != -1) {  				stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  			}  			break;  		}  		case 'y':  		case 'Y': {  			c = ReadChar ();  			int threadid = ReadInt ();  			if (!assembliesJustLoaded.ContainsKey (threadid)) {  				assembliesJustLoaded [threadid] = new List<string> ();  			}  			/* int assemblyId = */ReadInt ();  			while (c == ' ' || c == '\t') {  				c = ReadChar ();  			}  			sb.Length = 0;  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			string assemblyName = sb.ToString ();  			assembliesJustLoaded [threadid].Add (assemblyName);  			break;  		}  		case 'S':  		case 's': {  			c = ReadChar ();  			int stackTraceIndex = ReadInt ();  			int funcIndex;  			stackPtr = 0;  			while ((funcIndex = ReadInt ()) >= 0) {  				intStack [stackPtr] = funcIndex;  				stackPtr++;  				if (stackPtr >= intStack.Length)  					intStack = GrowIntVector (intStack);  			}  			if (c != -1) {  				stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  			}  			break;  		}  		case 'Z':  		case 'z': {  			sb.Length = 0;  			c = ReadChar ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			if (c != -1) {  				lastTickIndex = AddTimePos (lastLineStartPos);  				if (maxTickIndex < lastTickIndex)  					maxTickIndex = lastTickIndex;  				commentEventList.AddEvent (lastTickIndex' sb.ToString ());  			}  			break;  		}  		case 'H':  		case 'h': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong handleId = ReadULong ();  			ulong initialObjectId = ReadULong ();  			int stacktraceId = ReadInt ();  			if (c != -1) {  				if (readLogResult.handleHash != null)  					readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  				if (readLogResult.createdHandlesHistogram != null)  					readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  			}  			break;  		}  		case 'J':  		case 'j': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong handleId = ReadULong ();  			int stacktraceId = ReadInt ();  			if (c != -1) {  				if (readLogResult.handleHash != null) {  					if (readLogResult.handleHash.ContainsKey (handleId))  						readLogResult.handleHash.Remove (handleId);  					else {  						//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  						//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  						//for (int i = stacktrace.Length; --i >= 0; )  						//{  						//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  						//}  					}  				}  				if (readLogResult.destroyedHandlesHistogram != null)  					readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  			}  			break;  		}  		default: {  			// just ignore the unknown  			while (c != '\n' && c != '\r') {  				c = ReadChar ();  			}  			break;  		}  		}  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		if (c == '\r')  			c = ReadChar ();  		if (c == '\n') {  			c = ReadChar ();  			line++;  		}  	}  	//                readLogResult.functionList.ReportCallCountSizes(readLogResult.callstackHistogram);  }  //            catch (Exception)  //            {  //                throw new Exception(string.Format("Bad format in log file {0} line {1}"' fileName' line));  //                throw;  //            }  finally {  	if (r != null)  		r.Close ();  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: try {  	System.IO.Stream s = new System.IO.FileStream (fileName' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.ReadWrite);  	r = new System.IO.StreamReader (s);  	for (timePosIndex = timePosCount; timePosIndex > 0; timePosIndex--)  		if (timePos [timePosIndex - 1].pos <= startFileOffset)  			break;  	// start at the beginning if no later start point available or asked for info that can only  	// be constructed by reading the whole file.  	if (timePosIndex <= 1 || readLogResult.relocatedHistogram != null || readLogResult.finalizerHistogram != null || readLogResult.criticalFinalizerHistogram != null || readLogResult.liveObjectTable != null) {  		pos = 0;  		timePosIndex = 1;  	}  	else {  		timePosIndex--;  		pos = timePos [timePosIndex].pos;  	}  	if (timePosCount == 0) {  		timePos [0] = new TimePos (0.0' 0);  		timePosCount = timePosIndex = 1;  	}  	s.Position = pos;  	buffer = new byte[4096];  	bufPos = 0;  	bufLevel = 0;  	int maxProgress = (int)(r.BaseStream.Length / 1024);  	line = 1;  	StringBuilder sb = new StringBuilder ();  	ulong[] ulongStack = new ulong[1000];  	int[] intStack = new int[1000];  	int stackPtr = 0;  	c = ReadChar ();  	bool thisIsR = false' previousWasR;  	bool extendedRootInfoSeen = false;  	int lastTickIndex = 0;  	bool newGcEvent = false;  	while (c != -1) {  		if (pos > endFileOffset)  			break;  		if ((line % 1024) == 0) {  			int currentProgress = (int)(pos / 1024);  			if (currentProgress <= maxProgress) {  			}  		}  		lastLineStartPos = pos - 1;  		previousWasR = thisIsR;  		thisIsR = false;  		switch (c) {  		case -1:  			break;  		case 'F':  		case 'f': {  			c = ReadChar ();  			int funcIndex = ReadInt ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string name = ReadString (sb' ' '' false' 255);  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string signature = ReadString (sb' '\r'' true' 1023);  			ulong addr = ReadULong ();  			uint size = ReadUInt ();  			int modIndex = ReadInt ();  			int stackIndex = ReadInt ();  			if (c != -1) {  				EnsureStringCapacity (funcIndex' ref funcName);  				funcName [funcIndex] = name;  				EnsureStringCapacity (funcIndex' ref funcSignature);  				funcSignature [funcIndex] = signature;  				EnsureIntCapacity (funcIndex' ref funcModule);  				funcModule [funcIndex] = modIndex;  				string nameAndSignature = name;  				if (signature != null)  					nameAndSignature = name + ' ' + signature;  				if (stackIndex >= 0 && readLogResult.functionList != null) {  					funcSignatureIdHash [nameAndSignature] = funcIndex;  					readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  				}  			}  			break;  		}  		case 'T':  		case 't': {  			c = ReadChar ();  			int typeIndex = ReadInt ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			if (c != -1 && Char.IsDigit ((char)c)) {  				if (ReadInt () != 0) {  					finalizableTypes [typeIndex] = true;  				}  			}  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string typeName = ReadString (sb' '\r'' false' 1023);  			if (c != -1) {  				AddTypeName (typeIndex' typeName);  			}  			break;  		}  		// 'A' with thread identifier  		case '!': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong id = ReadULong ();  			int typeSizeStackTraceIndex = ReadInt ();  			typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  			if (c != -1) {  				if (readLogResult.liveObjectTable != null)  					readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  				if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  					// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  					readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  				}  				List<string> prev;  				if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  					foreach (string assemblyName in prev) {  						assemblies [assemblyName] = -typeSizeStackTraceIndex;  					}  					prev.Clear ();  				}  			}  			readLogResult.hadAllocInfo = true;  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'A':  		case 'a': {  			c = ReadChar ();  			ulong id = ReadULong ();  			int typeSizeStackTraceIndex = ReadInt ();  			typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  			if (c != -1) {  				if (readLogResult.liveObjectTable != null)  					readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  				if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  					// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  					readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  				}  			}  			readLogResult.hadAllocInfo = true;  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'C':  		case 'c': {  			c = ReadChar ();  			if (pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			int threadIndex = ReadInt ();  			int stackTraceIndex = ReadInt ();  			stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  			if (c != -1) {  				if (readLogResult.callstackHistogram != null) {  					readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  				}  				List<string> prev;  				if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  					foreach (string assemblyName in prev) {  						assemblies [assemblyName] = stackTraceIndex;  					}  					prev.Clear ();  				}  			}  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'E':  		case 'e': {  			c = ReadChar ();  			extendedRootInfoSeen = true;  			thisIsR = true;  			if (pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			if (!previousWasR) {  				heapDumpEventList.AddEvent (lastTickIndex' null);  				if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  					readLogResult.objectGraph.BuildTypeGraph ();  					readLogResult.objectGraph.Neuter ();  				}  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  					readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  					for (int i = 0; i < h.Length; i++)  						readLogResult.heapDumpHistograms [i] = h [i];  					readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  				}  				readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  			}  			ulong objectID = ReadULong ();  			GcRootKind rootKind = (GcRootKind)ReadInt ();  			GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  			ulong rootID = ReadULong ();  			ObjectGraph objectGraph = readLogResult.objectGraph;  			if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  				string rootName;  				switch (rootKind) {  				case GcRootKind.Stack:  					rootName = "Stack";  					break;  				case GcRootKind.Finalizer:  					rootName = "Finalizer";  					break;  				case GcRootKind.Handle:  					rootName = "Handle";  					break;  				default:  					rootName = "Other";  					break;  				}  				if ((rootFlags & GcRootFlags.Pinning) != 0)  					rootName += "' Pinning";  				if ((rootFlags & GcRootFlags.WeakRef) != 0)  					rootName += "' WeakRef";  				if ((rootFlags & GcRootFlags.Interior) != 0)  					rootName += "' Interior";  				if ((rootFlags & GcRootFlags.Refcounted) != 0)  					rootName += "' RefCounted";  				int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  				ulongStack [0] = objectID;  				ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  				objectGraph.AddRootObject (rootObject' rootID);  			}  			break;  		}  		case 'R':  		case 'r': {  			c = ReadChar ();  			thisIsR = true;  			if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				}  				break;  			}  			if (!previousWasR) {  				heapDumpEventList.AddEvent (lastTickIndex' null);  				if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  					readLogResult.objectGraph.BuildTypeGraph ();  					readLogResult.objectGraph.Neuter ();  				}  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  					readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  					for (int i = 0; i < h.Length; i++)  						readLogResult.heapDumpHistograms [i] = h [i];  					readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  				}  				readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  			}  			stackPtr = 0;  			ulong objectID;  			while ((objectID = ReadULong ()) != ulong.MaxValue) {  				if (objectID > 0) {  					ulongStack [stackPtr] = objectID;  					stackPtr++;  					if (stackPtr >= ulongStack.Length)  						ulongStack = GrowULongVector (ulongStack);  				}  			}  			if (c != -1) {  				if (readLogResult.objectGraph != null)  					readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  			}  			break;  		}  		case 'O':  		case 'o': {  			c = ReadChar ();  			if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			ulong objectId = ReadULong ();  			int typeIndex = ReadInt ();  			uint size = ReadUInt ();  			stackPtr = 0;  			ulong objectID;  			while ((objectID = ReadULong ()) != ulong.MaxValue) {  				if (objectID > 0) {  					ulongStack [stackPtr] = objectID;  					stackPtr++;  					if (stackPtr >= ulongStack.Length)  						ulongStack = GrowULongVector (ulongStack);  				}  			}  			if (c != -1) {  				ObjectGraph objectGraph = readLogResult.objectGraph;  				objectGraph.GetOrCreateGcType (typeIndex);  				int typeSizeStackTraceId = -1;  				int allocTickIndex = 0;  				// try to find the allocation stack trace and allocation time  				// from the live object table  				if (readLogResult.liveObjectTable != null) {  					LiveObjectTable.LiveObject liveObject;  					readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  					if (liveObject.id == objectId) {  						int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  						int typeIndexFromLiveObject = stackTrace [0];  						if (typeIndexFromLiveObject == typeIndex) {  							typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  							allocTickIndex = liveObject.allocTickIndex;  							Histogram[] h = readLogResult.heapDumpHistograms;  							if (h != null)  								h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  						}  					}  				}  				if (typeSizeStackTraceId == -1)  					typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  				ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  				gcObject.AllocTickIndex = allocTickIndex;  			}  			break;  		}  		case 'M':  		case 'm': {  			c = ReadChar ();  			int modIndex = ReadInt ();  			sb.Length = 0;  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			if (c != -1) {  				string lineString = sb.ToString ();  				int addrPos = lineString.LastIndexOf (" 0x");  				if (addrPos <= 0)  					addrPos = lineString.Length;  				int backSlashPos = lineString.LastIndexOf (@"\");  				if (backSlashPos <= 0)  					backSlashPos = -1;  				string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  				string fullName = lineString.Substring (0' addrPos);  				EnsureStringCapacity (modIndex' ref modBasicName);  				modBasicName [modIndex] = basicName;  				EnsureStringCapacity (modIndex' ref modFullName);  				modFullName [modIndex] = fullName;  			}  			break;  		}  		case 'U':  		case 'u': {  			c = ReadChar ();  			ulong oldId = ReadULong ();  			ulong newId = ReadULong ();  			uint length = ReadUInt ();  			Histogram reloHist = null;  			if (pos >= startFileOffset && pos < endFileOffset)  				reloHist = readLogResult.relocatedHistogram;  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  			break;  		}  		case 'V':  		case 'v': {  			c = ReadChar ();  			ulong startId = ReadULong ();  			uint length = ReadUInt ();  			Histogram reloHist = null;  			if (pos >= startFileOffset && pos < endFileOffset)  				reloHist = readLogResult.relocatedHistogram;  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  			break;  		}  		case 'B':  		case 'b':  			c = ReadChar ();  			int startGC = ReadInt ();  			int induced = ReadInt ();  			int condemnedGeneration = ReadInt ();  			if (startGC != 0)  				newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  			if (newGcEvent) {  				if (startGC != 0) {  					if (induced != 0) {  						for (int gen = 0; gen <= condemnedGeneration; gen++)  							inducedGcCount [gen]++;  					}  				}  				else {  					int condemnedLimit = condemnedGeneration;  					if (condemnedLimit == 2)  						condemnedLimit = 3;  					for (int gen = 0; gen <= condemnedLimit; gen++) {  						cumulativeGenerationSize [gen] += generationSize [gen];  						gcCount [gen]++;  					}  				}  			}  			for (int gen = 0; gen <= 3; gen++)  				generationSize [gen] = 0;  			while (c >= ' ') {  				ulong rangeStart = ReadULong ();  				ulong rangeLength = ReadULong ();  				ulong rangeLengthReserved = ReadULong ();  				int rangeGeneration = ReadInt ();  				if (c == -1 || rangeGeneration < 0)  					break;  				if (readLogResult.liveObjectTable != null) {  					if (startGC != 0) {  						if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  							readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  					}  					else {  						readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  					}  				}  				generationSize [rangeGeneration] += rangeLength;  			}  			if (startGC == 0 && readLogResult.liveObjectTable != null) {  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  			}  			break;  		case 'L':  		case 'l': {  			c = ReadChar ();  			int isCritical = ReadInt ();  			ulong objectId = ReadULong ();  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  				// try to find the allocation stack trace and allocation time  				// from the live object table  				LiveObjectTable.LiveObject liveObject;  				readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  				if (liveObject.id == objectId) {  					if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  						readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  					if (readLogResult.finalizerHistogram != null)  						readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  				}  			}  			break;  		}  		case 'I':  		case 'i':  			c = ReadChar ();  			int tickCount = ReadInt ();  			if (c != -1) {  				lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  				if (maxTickIndex < lastTickIndex)  					maxTickIndex = lastTickIndex;  			}  			break;  		case 'G':  		case 'g':  			c = ReadChar ();  			int gcGen0Count = ReadInt ();  			int gcGen1Count = ReadInt ();  			int gcGen2Count = ReadInt ();  			// if the newer 'b' lines occur' disregard the 'g' lines.  			if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  				if (c == -1 || gcGen0Count < 0)  					readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  				else  					readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  			}  			break;  		case 'N':  		case 'n': {  			c = ReadChar ();  			int funcIndex;  			int stackTraceIndex = ReadInt ();  			stackPtr = 0;  			int flag = ReadInt ();  			int matched = flag / 4;  			int hadTypeId = (flag & 2);  			bool hasTypeId = (flag & 1) == 1;  			if (hasTypeId) {  				intStack [stackPtr++] = ReadInt ();  				intStack [stackPtr++] = ReadInt ();  			}  			if (matched > 0 && c != -1) {  				/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  				otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  				int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  				if (matched > stacktrace.Length - hadTypeId)  					matched = stacktrace.Length - hadTypeId;  				for (int i = 0; i < matched; i++) {  					int funcId = stacktrace [i + hadTypeId];  					//Debug.Assert(funcId < funcName.Length);  					if (funcName [funcId] == null)  						funcName [funcId] = String.Empty;  					intStack [stackPtr++] = funcId;  					if (stackPtr >= intStack.Length) {  						intStack = GrowIntVector (intStack);  					}  				}  			}  			while ((funcIndex = ReadInt ()) >= 0) {  				intStack [stackPtr] = funcIndex;  				stackPtr++;  				if (stackPtr >= intStack.Length)  					intStack = GrowIntVector (intStack);  			}  			if (c != -1) {  				stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  			}  			break;  		}  		case 'y':  		case 'Y': {  			c = ReadChar ();  			int threadid = ReadInt ();  			if (!assembliesJustLoaded.ContainsKey (threadid)) {  				assembliesJustLoaded [threadid] = new List<string> ();  			}  			/* int assemblyId = */ReadInt ();  			while (c == ' ' || c == '\t') {  				c = ReadChar ();  			}  			sb.Length = 0;  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			string assemblyName = sb.ToString ();  			assembliesJustLoaded [threadid].Add (assemblyName);  			break;  		}  		case 'S':  		case 's': {  			c = ReadChar ();  			int stackTraceIndex = ReadInt ();  			int funcIndex;  			stackPtr = 0;  			while ((funcIndex = ReadInt ()) >= 0) {  				intStack [stackPtr] = funcIndex;  				stackPtr++;  				if (stackPtr >= intStack.Length)  					intStack = GrowIntVector (intStack);  			}  			if (c != -1) {  				stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  			}  			break;  		}  		case 'Z':  		case 'z': {  			sb.Length = 0;  			c = ReadChar ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			if (c != -1) {  				lastTickIndex = AddTimePos (lastLineStartPos);  				if (maxTickIndex < lastTickIndex)  					maxTickIndex = lastTickIndex;  				commentEventList.AddEvent (lastTickIndex' sb.ToString ());  			}  			break;  		}  		case 'H':  		case 'h': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong handleId = ReadULong ();  			ulong initialObjectId = ReadULong ();  			int stacktraceId = ReadInt ();  			if (c != -1) {  				if (readLogResult.handleHash != null)  					readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  				if (readLogResult.createdHandlesHistogram != null)  					readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  			}  			break;  		}  		case 'J':  		case 'j': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong handleId = ReadULong ();  			int stacktraceId = ReadInt ();  			if (c != -1) {  				if (readLogResult.handleHash != null) {  					if (readLogResult.handleHash.ContainsKey (handleId))  						readLogResult.handleHash.Remove (handleId);  					else {  						//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  						//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  						//for (int i = stacktrace.Length; --i >= 0; )  						//{  						//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  						//}  					}  				}  				if (readLogResult.destroyedHandlesHistogram != null)  					readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  			}  			break;  		}  		default: {  			// just ignore the unknown  			while (c != '\n' && c != '\r') {  				c = ReadChar ();  			}  			break;  		}  		}  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		if (c == '\r')  			c = ReadChar ();  		if (c == '\n') {  			c = ReadChar ();  			line++;  		}  	}  	//                readLogResult.functionList.ReportCallCountSizes(readLogResult.callstackHistogram);  }  //            catch (Exception)  //            {  //                throw new Exception(string.Format("Bad format in log file {0} line {1}"' fileName' line));  //                throw;  //            }  finally {  	if (r != null)  		r.Close ();  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: try {  	System.IO.Stream s = new System.IO.FileStream (fileName' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.ReadWrite);  	r = new System.IO.StreamReader (s);  	for (timePosIndex = timePosCount; timePosIndex > 0; timePosIndex--)  		if (timePos [timePosIndex - 1].pos <= startFileOffset)  			break;  	// start at the beginning if no later start point available or asked for info that can only  	// be constructed by reading the whole file.  	if (timePosIndex <= 1 || readLogResult.relocatedHistogram != null || readLogResult.finalizerHistogram != null || readLogResult.criticalFinalizerHistogram != null || readLogResult.liveObjectTable != null) {  		pos = 0;  		timePosIndex = 1;  	}  	else {  		timePosIndex--;  		pos = timePos [timePosIndex].pos;  	}  	if (timePosCount == 0) {  		timePos [0] = new TimePos (0.0' 0);  		timePosCount = timePosIndex = 1;  	}  	s.Position = pos;  	buffer = new byte[4096];  	bufPos = 0;  	bufLevel = 0;  	int maxProgress = (int)(r.BaseStream.Length / 1024);  	line = 1;  	StringBuilder sb = new StringBuilder ();  	ulong[] ulongStack = new ulong[1000];  	int[] intStack = new int[1000];  	int stackPtr = 0;  	c = ReadChar ();  	bool thisIsR = false' previousWasR;  	bool extendedRootInfoSeen = false;  	int lastTickIndex = 0;  	bool newGcEvent = false;  	while (c != -1) {  		if (pos > endFileOffset)  			break;  		if ((line % 1024) == 0) {  			int currentProgress = (int)(pos / 1024);  			if (currentProgress <= maxProgress) {  			}  		}  		lastLineStartPos = pos - 1;  		previousWasR = thisIsR;  		thisIsR = false;  		switch (c) {  		case -1:  			break;  		case 'F':  		case 'f': {  			c = ReadChar ();  			int funcIndex = ReadInt ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string name = ReadString (sb' ' '' false' 255);  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string signature = ReadString (sb' '\r'' true' 1023);  			ulong addr = ReadULong ();  			uint size = ReadUInt ();  			int modIndex = ReadInt ();  			int stackIndex = ReadInt ();  			if (c != -1) {  				EnsureStringCapacity (funcIndex' ref funcName);  				funcName [funcIndex] = name;  				EnsureStringCapacity (funcIndex' ref funcSignature);  				funcSignature [funcIndex] = signature;  				EnsureIntCapacity (funcIndex' ref funcModule);  				funcModule [funcIndex] = modIndex;  				string nameAndSignature = name;  				if (signature != null)  					nameAndSignature = name + ' ' + signature;  				if (stackIndex >= 0 && readLogResult.functionList != null) {  					funcSignatureIdHash [nameAndSignature] = funcIndex;  					readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  				}  			}  			break;  		}  		case 'T':  		case 't': {  			c = ReadChar ();  			int typeIndex = ReadInt ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			if (c != -1 && Char.IsDigit ((char)c)) {  				if (ReadInt () != 0) {  					finalizableTypes [typeIndex] = true;  				}  			}  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string typeName = ReadString (sb' '\r'' false' 1023);  			if (c != -1) {  				AddTypeName (typeIndex' typeName);  			}  			break;  		}  		// 'A' with thread identifier  		case '!': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong id = ReadULong ();  			int typeSizeStackTraceIndex = ReadInt ();  			typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  			if (c != -1) {  				if (readLogResult.liveObjectTable != null)  					readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  				if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  					// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  					readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  				}  				List<string> prev;  				if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  					foreach (string assemblyName in prev) {  						assemblies [assemblyName] = -typeSizeStackTraceIndex;  					}  					prev.Clear ();  				}  			}  			readLogResult.hadAllocInfo = true;  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'A':  		case 'a': {  			c = ReadChar ();  			ulong id = ReadULong ();  			int typeSizeStackTraceIndex = ReadInt ();  			typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  			if (c != -1) {  				if (readLogResult.liveObjectTable != null)  					readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  				if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  					// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  					readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  				}  			}  			readLogResult.hadAllocInfo = true;  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'C':  		case 'c': {  			c = ReadChar ();  			if (pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			int threadIndex = ReadInt ();  			int stackTraceIndex = ReadInt ();  			stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  			if (c != -1) {  				if (readLogResult.callstackHistogram != null) {  					readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  				}  				List<string> prev;  				if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  					foreach (string assemblyName in prev) {  						assemblies [assemblyName] = stackTraceIndex;  					}  					prev.Clear ();  				}  			}  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'E':  		case 'e': {  			c = ReadChar ();  			extendedRootInfoSeen = true;  			thisIsR = true;  			if (pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			if (!previousWasR) {  				heapDumpEventList.AddEvent (lastTickIndex' null);  				if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  					readLogResult.objectGraph.BuildTypeGraph ();  					readLogResult.objectGraph.Neuter ();  				}  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  					readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  					for (int i = 0; i < h.Length; i++)  						readLogResult.heapDumpHistograms [i] = h [i];  					readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  				}  				readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  			}  			ulong objectID = ReadULong ();  			GcRootKind rootKind = (GcRootKind)ReadInt ();  			GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  			ulong rootID = ReadULong ();  			ObjectGraph objectGraph = readLogResult.objectGraph;  			if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  				string rootName;  				switch (rootKind) {  				case GcRootKind.Stack:  					rootName = "Stack";  					break;  				case GcRootKind.Finalizer:  					rootName = "Finalizer";  					break;  				case GcRootKind.Handle:  					rootName = "Handle";  					break;  				default:  					rootName = "Other";  					break;  				}  				if ((rootFlags & GcRootFlags.Pinning) != 0)  					rootName += "' Pinning";  				if ((rootFlags & GcRootFlags.WeakRef) != 0)  					rootName += "' WeakRef";  				if ((rootFlags & GcRootFlags.Interior) != 0)  					rootName += "' Interior";  				if ((rootFlags & GcRootFlags.Refcounted) != 0)  					rootName += "' RefCounted";  				int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  				ulongStack [0] = objectID;  				ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  				objectGraph.AddRootObject (rootObject' rootID);  			}  			break;  		}  		case 'R':  		case 'r': {  			c = ReadChar ();  			thisIsR = true;  			if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				}  				break;  			}  			if (!previousWasR) {  				heapDumpEventList.AddEvent (lastTickIndex' null);  				if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  					readLogResult.objectGraph.BuildTypeGraph ();  					readLogResult.objectGraph.Neuter ();  				}  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  					readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  					for (int i = 0; i < h.Length; i++)  						readLogResult.heapDumpHistograms [i] = h [i];  					readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  				}  				readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  			}  			stackPtr = 0;  			ulong objectID;  			while ((objectID = ReadULong ()) != ulong.MaxValue) {  				if (objectID > 0) {  					ulongStack [stackPtr] = objectID;  					stackPtr++;  					if (stackPtr >= ulongStack.Length)  						ulongStack = GrowULongVector (ulongStack);  				}  			}  			if (c != -1) {  				if (readLogResult.objectGraph != null)  					readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  			}  			break;  		}  		case 'O':  		case 'o': {  			c = ReadChar ();  			if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			ulong objectId = ReadULong ();  			int typeIndex = ReadInt ();  			uint size = ReadUInt ();  			stackPtr = 0;  			ulong objectID;  			while ((objectID = ReadULong ()) != ulong.MaxValue) {  				if (objectID > 0) {  					ulongStack [stackPtr] = objectID;  					stackPtr++;  					if (stackPtr >= ulongStack.Length)  						ulongStack = GrowULongVector (ulongStack);  				}  			}  			if (c != -1) {  				ObjectGraph objectGraph = readLogResult.objectGraph;  				objectGraph.GetOrCreateGcType (typeIndex);  				int typeSizeStackTraceId = -1;  				int allocTickIndex = 0;  				// try to find the allocation stack trace and allocation time  				// from the live object table  				if (readLogResult.liveObjectTable != null) {  					LiveObjectTable.LiveObject liveObject;  					readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  					if (liveObject.id == objectId) {  						int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  						int typeIndexFromLiveObject = stackTrace [0];  						if (typeIndexFromLiveObject == typeIndex) {  							typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  							allocTickIndex = liveObject.allocTickIndex;  							Histogram[] h = readLogResult.heapDumpHistograms;  							if (h != null)  								h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  						}  					}  				}  				if (typeSizeStackTraceId == -1)  					typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  				ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  				gcObject.AllocTickIndex = allocTickIndex;  			}  			break;  		}  		case 'M':  		case 'm': {  			c = ReadChar ();  			int modIndex = ReadInt ();  			sb.Length = 0;  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			if (c != -1) {  				string lineString = sb.ToString ();  				int addrPos = lineString.LastIndexOf (" 0x");  				if (addrPos <= 0)  					addrPos = lineString.Length;  				int backSlashPos = lineString.LastIndexOf (@"\");  				if (backSlashPos <= 0)  					backSlashPos = -1;  				string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  				string fullName = lineString.Substring (0' addrPos);  				EnsureStringCapacity (modIndex' ref modBasicName);  				modBasicName [modIndex] = basicName;  				EnsureStringCapacity (modIndex' ref modFullName);  				modFullName [modIndex] = fullName;  			}  			break;  		}  		case 'U':  		case 'u': {  			c = ReadChar ();  			ulong oldId = ReadULong ();  			ulong newId = ReadULong ();  			uint length = ReadUInt ();  			Histogram reloHist = null;  			if (pos >= startFileOffset && pos < endFileOffset)  				reloHist = readLogResult.relocatedHistogram;  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  			break;  		}  		case 'V':  		case 'v': {  			c = ReadChar ();  			ulong startId = ReadULong ();  			uint length = ReadUInt ();  			Histogram reloHist = null;  			if (pos >= startFileOffset && pos < endFileOffset)  				reloHist = readLogResult.relocatedHistogram;  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  			break;  		}  		case 'B':  		case 'b':  			c = ReadChar ();  			int startGC = ReadInt ();  			int induced = ReadInt ();  			int condemnedGeneration = ReadInt ();  			if (startGC != 0)  				newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  			if (newGcEvent) {  				if (startGC != 0) {  					if (induced != 0) {  						for (int gen = 0; gen <= condemnedGeneration; gen++)  							inducedGcCount [gen]++;  					}  				}  				else {  					int condemnedLimit = condemnedGeneration;  					if (condemnedLimit == 2)  						condemnedLimit = 3;  					for (int gen = 0; gen <= condemnedLimit; gen++) {  						cumulativeGenerationSize [gen] += generationSize [gen];  						gcCount [gen]++;  					}  				}  			}  			for (int gen = 0; gen <= 3; gen++)  				generationSize [gen] = 0;  			while (c >= ' ') {  				ulong rangeStart = ReadULong ();  				ulong rangeLength = ReadULong ();  				ulong rangeLengthReserved = ReadULong ();  				int rangeGeneration = ReadInt ();  				if (c == -1 || rangeGeneration < 0)  					break;  				if (readLogResult.liveObjectTable != null) {  					if (startGC != 0) {  						if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  							readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  					}  					else {  						readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  					}  				}  				generationSize [rangeGeneration] += rangeLength;  			}  			if (startGC == 0 && readLogResult.liveObjectTable != null) {  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  			}  			break;  		case 'L':  		case 'l': {  			c = ReadChar ();  			int isCritical = ReadInt ();  			ulong objectId = ReadULong ();  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  				// try to find the allocation stack trace and allocation time  				// from the live object table  				LiveObjectTable.LiveObject liveObject;  				readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  				if (liveObject.id == objectId) {  					if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  						readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  					if (readLogResult.finalizerHistogram != null)  						readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  				}  			}  			break;  		}  		case 'I':  		case 'i':  			c = ReadChar ();  			int tickCount = ReadInt ();  			if (c != -1) {  				lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  				if (maxTickIndex < lastTickIndex)  					maxTickIndex = lastTickIndex;  			}  			break;  		case 'G':  		case 'g':  			c = ReadChar ();  			int gcGen0Count = ReadInt ();  			int gcGen1Count = ReadInt ();  			int gcGen2Count = ReadInt ();  			// if the newer 'b' lines occur' disregard the 'g' lines.  			if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  				if (c == -1 || gcGen0Count < 0)  					readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  				else  					readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  			}  			break;  		case 'N':  		case 'n': {  			c = ReadChar ();  			int funcIndex;  			int stackTraceIndex = ReadInt ();  			stackPtr = 0;  			int flag = ReadInt ();  			int matched = flag / 4;  			int hadTypeId = (flag & 2);  			bool hasTypeId = (flag & 1) == 1;  			if (hasTypeId) {  				intStack [stackPtr++] = ReadInt ();  				intStack [stackPtr++] = ReadInt ();  			}  			if (matched > 0 && c != -1) {  				/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  				otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  				int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  				if (matched > stacktrace.Length - hadTypeId)  					matched = stacktrace.Length - hadTypeId;  				for (int i = 0; i < matched; i++) {  					int funcId = stacktrace [i + hadTypeId];  					//Debug.Assert(funcId < funcName.Length);  					if (funcName [funcId] == null)  						funcName [funcId] = String.Empty;  					intStack [stackPtr++] = funcId;  					if (stackPtr >= intStack.Length) {  						intStack = GrowIntVector (intStack);  					}  				}  			}  			while ((funcIndex = ReadInt ()) >= 0) {  				intStack [stackPtr] = funcIndex;  				stackPtr++;  				if (stackPtr >= intStack.Length)  					intStack = GrowIntVector (intStack);  			}  			if (c != -1) {  				stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  			}  			break;  		}  		case 'y':  		case 'Y': {  			c = ReadChar ();  			int threadid = ReadInt ();  			if (!assembliesJustLoaded.ContainsKey (threadid)) {  				assembliesJustLoaded [threadid] = new List<string> ();  			}  			/* int assemblyId = */ReadInt ();  			while (c == ' ' || c == '\t') {  				c = ReadChar ();  			}  			sb.Length = 0;  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			string assemblyName = sb.ToString ();  			assembliesJustLoaded [threadid].Add (assemblyName);  			break;  		}  		case 'S':  		case 's': {  			c = ReadChar ();  			int stackTraceIndex = ReadInt ();  			int funcIndex;  			stackPtr = 0;  			while ((funcIndex = ReadInt ()) >= 0) {  				intStack [stackPtr] = funcIndex;  				stackPtr++;  				if (stackPtr >= intStack.Length)  					intStack = GrowIntVector (intStack);  			}  			if (c != -1) {  				stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  			}  			break;  		}  		case 'Z':  		case 'z': {  			sb.Length = 0;  			c = ReadChar ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			if (c != -1) {  				lastTickIndex = AddTimePos (lastLineStartPos);  				if (maxTickIndex < lastTickIndex)  					maxTickIndex = lastTickIndex;  				commentEventList.AddEvent (lastTickIndex' sb.ToString ());  			}  			break;  		}  		case 'H':  		case 'h': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong handleId = ReadULong ();  			ulong initialObjectId = ReadULong ();  			int stacktraceId = ReadInt ();  			if (c != -1) {  				if (readLogResult.handleHash != null)  					readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  				if (readLogResult.createdHandlesHistogram != null)  					readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  			}  			break;  		}  		case 'J':  		case 'j': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong handleId = ReadULong ();  			int stacktraceId = ReadInt ();  			if (c != -1) {  				if (readLogResult.handleHash != null) {  					if (readLogResult.handleHash.ContainsKey (handleId))  						readLogResult.handleHash.Remove (handleId);  					else {  						//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  						//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  						//for (int i = stacktrace.Length; --i >= 0; )  						//{  						//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  						//}  					}  				}  				if (readLogResult.destroyedHandlesHistogram != null)  					readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  			}  			break;  		}  		default: {  			// just ignore the unknown  			while (c != '\n' && c != '\r') {  				c = ReadChar ();  			}  			break;  		}  		}  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		if (c == '\r')  			c = ReadChar ();  		if (c == '\n') {  			c = ReadChar ();  			line++;  		}  	}  	//                readLogResult.functionList.ReportCallCountSizes(readLogResult.callstackHistogram);  }  //            catch (Exception)  //            {  //                throw new Exception(string.Format("Bad format in log file {0} line {1}"' fileName' line));  //                throw;  //            }  finally {  	if (r != null)  		r.Close ();  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: try {  	System.IO.Stream s = new System.IO.FileStream (fileName' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.ReadWrite);  	r = new System.IO.StreamReader (s);  	for (timePosIndex = timePosCount; timePosIndex > 0; timePosIndex--)  		if (timePos [timePosIndex - 1].pos <= startFileOffset)  			break;  	// start at the beginning if no later start point available or asked for info that can only  	// be constructed by reading the whole file.  	if (timePosIndex <= 1 || readLogResult.relocatedHistogram != null || readLogResult.finalizerHistogram != null || readLogResult.criticalFinalizerHistogram != null || readLogResult.liveObjectTable != null) {  		pos = 0;  		timePosIndex = 1;  	}  	else {  		timePosIndex--;  		pos = timePos [timePosIndex].pos;  	}  	if (timePosCount == 0) {  		timePos [0] = new TimePos (0.0' 0);  		timePosCount = timePosIndex = 1;  	}  	s.Position = pos;  	buffer = new byte[4096];  	bufPos = 0;  	bufLevel = 0;  	int maxProgress = (int)(r.BaseStream.Length / 1024);  	line = 1;  	StringBuilder sb = new StringBuilder ();  	ulong[] ulongStack = new ulong[1000];  	int[] intStack = new int[1000];  	int stackPtr = 0;  	c = ReadChar ();  	bool thisIsR = false' previousWasR;  	bool extendedRootInfoSeen = false;  	int lastTickIndex = 0;  	bool newGcEvent = false;  	while (c != -1) {  		if (pos > endFileOffset)  			break;  		if ((line % 1024) == 0) {  			int currentProgress = (int)(pos / 1024);  			if (currentProgress <= maxProgress) {  			}  		}  		lastLineStartPos = pos - 1;  		previousWasR = thisIsR;  		thisIsR = false;  		switch (c) {  		case -1:  			break;  		case 'F':  		case 'f': {  			c = ReadChar ();  			int funcIndex = ReadInt ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string name = ReadString (sb' ' '' false' 255);  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string signature = ReadString (sb' '\r'' true' 1023);  			ulong addr = ReadULong ();  			uint size = ReadUInt ();  			int modIndex = ReadInt ();  			int stackIndex = ReadInt ();  			if (c != -1) {  				EnsureStringCapacity (funcIndex' ref funcName);  				funcName [funcIndex] = name;  				EnsureStringCapacity (funcIndex' ref funcSignature);  				funcSignature [funcIndex] = signature;  				EnsureIntCapacity (funcIndex' ref funcModule);  				funcModule [funcIndex] = modIndex;  				string nameAndSignature = name;  				if (signature != null)  					nameAndSignature = name + ' ' + signature;  				if (stackIndex >= 0 && readLogResult.functionList != null) {  					funcSignatureIdHash [nameAndSignature] = funcIndex;  					readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  				}  			}  			break;  		}  		case 'T':  		case 't': {  			c = ReadChar ();  			int typeIndex = ReadInt ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			if (c != -1 && Char.IsDigit ((char)c)) {  				if (ReadInt () != 0) {  					finalizableTypes [typeIndex] = true;  				}  			}  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			string typeName = ReadString (sb' '\r'' false' 1023);  			if (c != -1) {  				AddTypeName (typeIndex' typeName);  			}  			break;  		}  		// 'A' with thread identifier  		case '!': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong id = ReadULong ();  			int typeSizeStackTraceIndex = ReadInt ();  			typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  			if (c != -1) {  				if (readLogResult.liveObjectTable != null)  					readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  				if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  					// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  					readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  				}  				List<string> prev;  				if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  					foreach (string assemblyName in prev) {  						assemblies [assemblyName] = -typeSizeStackTraceIndex;  					}  					prev.Clear ();  				}  			}  			readLogResult.hadAllocInfo = true;  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'A':  		case 'a': {  			c = ReadChar ();  			ulong id = ReadULong ();  			int typeSizeStackTraceIndex = ReadInt ();  			typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  			if (c != -1) {  				if (readLogResult.liveObjectTable != null)  					readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  				if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  					// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  					readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  				}  			}  			readLogResult.hadAllocInfo = true;  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'C':  		case 'c': {  			c = ReadChar ();  			if (pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			int threadIndex = ReadInt ();  			int stackTraceIndex = ReadInt ();  			stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  			if (c != -1) {  				if (readLogResult.callstackHistogram != null) {  					readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  				}  				List<string> prev;  				if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  					foreach (string assemblyName in prev) {  						assemblies [assemblyName] = stackTraceIndex;  					}  					prev.Clear ();  				}  			}  			readLogResult.hadCallInfo = true;  			break;  		}  		case 'E':  		case 'e': {  			c = ReadChar ();  			extendedRootInfoSeen = true;  			thisIsR = true;  			if (pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			if (!previousWasR) {  				heapDumpEventList.AddEvent (lastTickIndex' null);  				if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  					readLogResult.objectGraph.BuildTypeGraph ();  					readLogResult.objectGraph.Neuter ();  				}  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  					readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  					for (int i = 0; i < h.Length; i++)  						readLogResult.heapDumpHistograms [i] = h [i];  					readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  				}  				readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  			}  			ulong objectID = ReadULong ();  			GcRootKind rootKind = (GcRootKind)ReadInt ();  			GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  			ulong rootID = ReadULong ();  			ObjectGraph objectGraph = readLogResult.objectGraph;  			if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  				string rootName;  				switch (rootKind) {  				case GcRootKind.Stack:  					rootName = "Stack";  					break;  				case GcRootKind.Finalizer:  					rootName = "Finalizer";  					break;  				case GcRootKind.Handle:  					rootName = "Handle";  					break;  				default:  					rootName = "Other";  					break;  				}  				if ((rootFlags & GcRootFlags.Pinning) != 0)  					rootName += "' Pinning";  				if ((rootFlags & GcRootFlags.WeakRef) != 0)  					rootName += "' WeakRef";  				if ((rootFlags & GcRootFlags.Interior) != 0)  					rootName += "' Interior";  				if ((rootFlags & GcRootFlags.Refcounted) != 0)  					rootName += "' RefCounted";  				int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  				ulongStack [0] = objectID;  				ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  				objectGraph.AddRootObject (rootObject' rootID);  			}  			break;  		}  		case 'R':  		case 'r': {  			c = ReadChar ();  			thisIsR = true;  			if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  				while (c >= ' ')  					c = ReadChar ();  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				}  				break;  			}  			if (!previousWasR) {  				heapDumpEventList.AddEvent (lastTickIndex' null);  				if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  					readLogResult.objectGraph.BuildTypeGraph ();  					readLogResult.objectGraph.Neuter ();  				}  				Histogram[] h = readLogResult.heapDumpHistograms;  				if (h != null) {  					if (h.Length == requestedIndex)  						readLogResult.requestedObjectGraph = readLogResult.objectGraph;  					readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  					for (int i = 0; i < h.Length; i++)  						readLogResult.heapDumpHistograms [i] = h [i];  					readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  				}  				readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  			}  			stackPtr = 0;  			ulong objectID;  			while ((objectID = ReadULong ()) != ulong.MaxValue) {  				if (objectID > 0) {  					ulongStack [stackPtr] = objectID;  					stackPtr++;  					if (stackPtr >= ulongStack.Length)  						ulongStack = GrowULongVector (ulongStack);  				}  			}  			if (c != -1) {  				if (readLogResult.objectGraph != null)  					readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  			}  			break;  		}  		case 'O':  		case 'o': {  			c = ReadChar ();  			if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  				while (c >= ' ')  					c = ReadChar ();  				break;  			}  			ulong objectId = ReadULong ();  			int typeIndex = ReadInt ();  			uint size = ReadUInt ();  			stackPtr = 0;  			ulong objectID;  			while ((objectID = ReadULong ()) != ulong.MaxValue) {  				if (objectID > 0) {  					ulongStack [stackPtr] = objectID;  					stackPtr++;  					if (stackPtr >= ulongStack.Length)  						ulongStack = GrowULongVector (ulongStack);  				}  			}  			if (c != -1) {  				ObjectGraph objectGraph = readLogResult.objectGraph;  				objectGraph.GetOrCreateGcType (typeIndex);  				int typeSizeStackTraceId = -1;  				int allocTickIndex = 0;  				// try to find the allocation stack trace and allocation time  				// from the live object table  				if (readLogResult.liveObjectTable != null) {  					LiveObjectTable.LiveObject liveObject;  					readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  					if (liveObject.id == objectId) {  						int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  						int typeIndexFromLiveObject = stackTrace [0];  						if (typeIndexFromLiveObject == typeIndex) {  							typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  							allocTickIndex = liveObject.allocTickIndex;  							Histogram[] h = readLogResult.heapDumpHistograms;  							if (h != null)  								h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  						}  					}  				}  				if (typeSizeStackTraceId == -1)  					typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  				ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  				gcObject.AllocTickIndex = allocTickIndex;  			}  			break;  		}  		case 'M':  		case 'm': {  			c = ReadChar ();  			int modIndex = ReadInt ();  			sb.Length = 0;  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			if (c != -1) {  				string lineString = sb.ToString ();  				int addrPos = lineString.LastIndexOf (" 0x");  				if (addrPos <= 0)  					addrPos = lineString.Length;  				int backSlashPos = lineString.LastIndexOf (@"\");  				if (backSlashPos <= 0)  					backSlashPos = -1;  				string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  				string fullName = lineString.Substring (0' addrPos);  				EnsureStringCapacity (modIndex' ref modBasicName);  				modBasicName [modIndex] = basicName;  				EnsureStringCapacity (modIndex' ref modFullName);  				modFullName [modIndex] = fullName;  			}  			break;  		}  		case 'U':  		case 'u': {  			c = ReadChar ();  			ulong oldId = ReadULong ();  			ulong newId = ReadULong ();  			uint length = ReadUInt ();  			Histogram reloHist = null;  			if (pos >= startFileOffset && pos < endFileOffset)  				reloHist = readLogResult.relocatedHistogram;  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  			break;  		}  		case 'V':  		case 'v': {  			c = ReadChar ();  			ulong startId = ReadULong ();  			uint length = ReadUInt ();  			Histogram reloHist = null;  			if (pos >= startFileOffset && pos < endFileOffset)  				reloHist = readLogResult.relocatedHistogram;  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  			break;  		}  		case 'B':  		case 'b':  			c = ReadChar ();  			int startGC = ReadInt ();  			int induced = ReadInt ();  			int condemnedGeneration = ReadInt ();  			if (startGC != 0)  				newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  			if (newGcEvent) {  				if (startGC != 0) {  					if (induced != 0) {  						for (int gen = 0; gen <= condemnedGeneration; gen++)  							inducedGcCount [gen]++;  					}  				}  				else {  					int condemnedLimit = condemnedGeneration;  					if (condemnedLimit == 2)  						condemnedLimit = 3;  					for (int gen = 0; gen <= condemnedLimit; gen++) {  						cumulativeGenerationSize [gen] += generationSize [gen];  						gcCount [gen]++;  					}  				}  			}  			for (int gen = 0; gen <= 3; gen++)  				generationSize [gen] = 0;  			while (c >= ' ') {  				ulong rangeStart = ReadULong ();  				ulong rangeLength = ReadULong ();  				ulong rangeLengthReserved = ReadULong ();  				int rangeGeneration = ReadInt ();  				if (c == -1 || rangeGeneration < 0)  					break;  				if (readLogResult.liveObjectTable != null) {  					if (startGC != 0) {  						if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  							readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  					}  					else {  						readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  					}  				}  				generationSize [rangeGeneration] += rangeLength;  			}  			if (startGC == 0 && readLogResult.liveObjectTable != null) {  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  			}  			break;  		case 'L':  		case 'l': {  			c = ReadChar ();  			int isCritical = ReadInt ();  			ulong objectId = ReadULong ();  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  				// try to find the allocation stack trace and allocation time  				// from the live object table  				LiveObjectTable.LiveObject liveObject;  				readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  				if (liveObject.id == objectId) {  					if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  						readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  					if (readLogResult.finalizerHistogram != null)  						readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  				}  			}  			break;  		}  		case 'I':  		case 'i':  			c = ReadChar ();  			int tickCount = ReadInt ();  			if (c != -1) {  				lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  				if (maxTickIndex < lastTickIndex)  					maxTickIndex = lastTickIndex;  			}  			break;  		case 'G':  		case 'g':  			c = ReadChar ();  			int gcGen0Count = ReadInt ();  			int gcGen1Count = ReadInt ();  			int gcGen2Count = ReadInt ();  			// if the newer 'b' lines occur' disregard the 'g' lines.  			if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  				if (c == -1 || gcGen0Count < 0)  					readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  				else  					readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  			}  			break;  		case 'N':  		case 'n': {  			c = ReadChar ();  			int funcIndex;  			int stackTraceIndex = ReadInt ();  			stackPtr = 0;  			int flag = ReadInt ();  			int matched = flag / 4;  			int hadTypeId = (flag & 2);  			bool hasTypeId = (flag & 1) == 1;  			if (hasTypeId) {  				intStack [stackPtr++] = ReadInt ();  				intStack [stackPtr++] = ReadInt ();  			}  			if (matched > 0 && c != -1) {  				/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  				otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  				int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  				if (matched > stacktrace.Length - hadTypeId)  					matched = stacktrace.Length - hadTypeId;  				for (int i = 0; i < matched; i++) {  					int funcId = stacktrace [i + hadTypeId];  					//Debug.Assert(funcId < funcName.Length);  					if (funcName [funcId] == null)  						funcName [funcId] = String.Empty;  					intStack [stackPtr++] = funcId;  					if (stackPtr >= intStack.Length) {  						intStack = GrowIntVector (intStack);  					}  				}  			}  			while ((funcIndex = ReadInt ()) >= 0) {  				intStack [stackPtr] = funcIndex;  				stackPtr++;  				if (stackPtr >= intStack.Length)  					intStack = GrowIntVector (intStack);  			}  			if (c != -1) {  				stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  			}  			break;  		}  		case 'y':  		case 'Y': {  			c = ReadChar ();  			int threadid = ReadInt ();  			if (!assembliesJustLoaded.ContainsKey (threadid)) {  				assembliesJustLoaded [threadid] = new List<string> ();  			}  			/* int assemblyId = */ReadInt ();  			while (c == ' ' || c == '\t') {  				c = ReadChar ();  			}  			sb.Length = 0;  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			string assemblyName = sb.ToString ();  			assembliesJustLoaded [threadid].Add (assemblyName);  			break;  		}  		case 'S':  		case 's': {  			c = ReadChar ();  			int stackTraceIndex = ReadInt ();  			int funcIndex;  			stackPtr = 0;  			while ((funcIndex = ReadInt ()) >= 0) {  				intStack [stackPtr] = funcIndex;  				stackPtr++;  				if (stackPtr >= intStack.Length)  					intStack = GrowIntVector (intStack);  			}  			if (c != -1) {  				stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  			}  			break;  		}  		case 'Z':  		case 'z': {  			sb.Length = 0;  			c = ReadChar ();  			while (c == ' ' || c == '\t')  				c = ReadChar ();  			while (c > '\r') {  				sb.Append ((char)c);  				c = ReadChar ();  			}  			if (c != -1) {  				lastTickIndex = AddTimePos (lastLineStartPos);  				if (maxTickIndex < lastTickIndex)  					maxTickIndex = lastTickIndex;  				commentEventList.AddEvent (lastTickIndex' sb.ToString ());  			}  			break;  		}  		case 'H':  		case 'h': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong handleId = ReadULong ();  			ulong initialObjectId = ReadULong ();  			int stacktraceId = ReadInt ();  			if (c != -1) {  				if (readLogResult.handleHash != null)  					readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  				if (readLogResult.createdHandlesHistogram != null)  					readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  			}  			break;  		}  		case 'J':  		case 'j': {  			c = ReadChar ();  			int threadId = ReadInt ();  			ulong handleId = ReadULong ();  			int stacktraceId = ReadInt ();  			if (c != -1) {  				if (readLogResult.handleHash != null) {  					if (readLogResult.handleHash.ContainsKey (handleId))  						readLogResult.handleHash.Remove (handleId);  					else {  						//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  						//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  						//for (int i = stacktrace.Length; --i >= 0; )  						//{  						//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  						//}  					}  				}  				if (readLogResult.destroyedHandlesHistogram != null)  					readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  			}  			break;  		}  		default: {  			// just ignore the unknown  			while (c != '\n' && c != '\r') {  				c = ReadChar ();  			}  			break;  		}  		}  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		if (c == '\r')  			c = ReadChar ();  		if (c == '\n') {  			c = ReadChar ();  			line++;  		}  	}  	//                readLogResult.functionList.ReportCallCountSizes(readLogResult.callstackHistogram);  }  //            catch (Exception)  //            {  //                throw new Exception(string.Format("Bad format in log file {0} line {1}"' fileName' line));  //                throw;  //            }  finally {  	if (r != null)  		r.Close ();  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: buffer = new byte[4096];  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: while (c != -1) {  	if (pos > endFileOffset)  		break;  	if ((line % 1024) == 0) {  		int currentProgress = (int)(pos / 1024);  		if (currentProgress <= maxProgress) {  		}  	}  	lastLineStartPos = pos - 1;  	previousWasR = thisIsR;  	thisIsR = false;  	switch (c) {  	case -1:  		break;  	case 'F':  	case 'f': {  		c = ReadChar ();  		int funcIndex = ReadInt ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string name = ReadString (sb' ' '' false' 255);  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string signature = ReadString (sb' '\r'' true' 1023);  		ulong addr = ReadULong ();  		uint size = ReadUInt ();  		int modIndex = ReadInt ();  		int stackIndex = ReadInt ();  		if (c != -1) {  			EnsureStringCapacity (funcIndex' ref funcName);  			funcName [funcIndex] = name;  			EnsureStringCapacity (funcIndex' ref funcSignature);  			funcSignature [funcIndex] = signature;  			EnsureIntCapacity (funcIndex' ref funcModule);  			funcModule [funcIndex] = modIndex;  			string nameAndSignature = name;  			if (signature != null)  				nameAndSignature = name + ' ' + signature;  			if (stackIndex >= 0 && readLogResult.functionList != null) {  				funcSignatureIdHash [nameAndSignature] = funcIndex;  				readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  			}  		}  		break;  	}  	case 'T':  	case 't': {  		c = ReadChar ();  		int typeIndex = ReadInt ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		if (c != -1 && Char.IsDigit ((char)c)) {  			if (ReadInt () != 0) {  				finalizableTypes [typeIndex] = true;  			}  		}  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string typeName = ReadString (sb' '\r'' false' 1023);  		if (c != -1) {  			AddTypeName (typeIndex' typeName);  		}  		break;  	}  	// 'A' with thread identifier  	case '!': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong id = ReadULong ();  		int typeSizeStackTraceIndex = ReadInt ();  		typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  		if (c != -1) {  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  				// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  				readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  			}  			List<string> prev;  			if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  				foreach (string assemblyName in prev) {  					assemblies [assemblyName] = -typeSizeStackTraceIndex;  				}  				prev.Clear ();  			}  		}  		readLogResult.hadAllocInfo = true;  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'A':  	case 'a': {  		c = ReadChar ();  		ulong id = ReadULong ();  		int typeSizeStackTraceIndex = ReadInt ();  		typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  		if (c != -1) {  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  				// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  				readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  			}  		}  		readLogResult.hadAllocInfo = true;  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'C':  	case 'c': {  		c = ReadChar ();  		if (pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		int threadIndex = ReadInt ();  		int stackTraceIndex = ReadInt ();  		stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  		if (c != -1) {  			if (readLogResult.callstackHistogram != null) {  				readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  			}  			List<string> prev;  			if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  				foreach (string assemblyName in prev) {  					assemblies [assemblyName] = stackTraceIndex;  				}  				prev.Clear ();  			}  		}  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'E':  	case 'e': {  		c = ReadChar ();  		extendedRootInfoSeen = true;  		thisIsR = true;  		if (pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		if (!previousWasR) {  			heapDumpEventList.AddEvent (lastTickIndex' null);  			if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  				readLogResult.objectGraph.BuildTypeGraph ();  				readLogResult.objectGraph.Neuter ();  			}  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  				for (int i = 0; i < h.Length; i++)  					readLogResult.heapDumpHistograms [i] = h [i];  				readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  			}  			readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  		}  		ulong objectID = ReadULong ();  		GcRootKind rootKind = (GcRootKind)ReadInt ();  		GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  		ulong rootID = ReadULong ();  		ObjectGraph objectGraph = readLogResult.objectGraph;  		if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  			string rootName;  			switch (rootKind) {  			case GcRootKind.Stack:  				rootName = "Stack";  				break;  			case GcRootKind.Finalizer:  				rootName = "Finalizer";  				break;  			case GcRootKind.Handle:  				rootName = "Handle";  				break;  			default:  				rootName = "Other";  				break;  			}  			if ((rootFlags & GcRootFlags.Pinning) != 0)  				rootName += "' Pinning";  			if ((rootFlags & GcRootFlags.WeakRef) != 0)  				rootName += "' WeakRef";  			if ((rootFlags & GcRootFlags.Interior) != 0)  				rootName += "' Interior";  			if ((rootFlags & GcRootFlags.Refcounted) != 0)  				rootName += "' RefCounted";  			int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  			ulongStack [0] = objectID;  			ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  			objectGraph.AddRootObject (rootObject' rootID);  		}  		break;  	}  	case 'R':  	case 'r': {  		c = ReadChar ();  		thisIsR = true;  		if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  			}  			break;  		}  		if (!previousWasR) {  			heapDumpEventList.AddEvent (lastTickIndex' null);  			if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  				readLogResult.objectGraph.BuildTypeGraph ();  				readLogResult.objectGraph.Neuter ();  			}  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  				for (int i = 0; i < h.Length; i++)  					readLogResult.heapDumpHistograms [i] = h [i];  				readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  			}  			readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  		}  		stackPtr = 0;  		ulong objectID;  		while ((objectID = ReadULong ()) != ulong.MaxValue) {  			if (objectID > 0) {  				ulongStack [stackPtr] = objectID;  				stackPtr++;  				if (stackPtr >= ulongStack.Length)  					ulongStack = GrowULongVector (ulongStack);  			}  		}  		if (c != -1) {  			if (readLogResult.objectGraph != null)  				readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  		}  		break;  	}  	case 'O':  	case 'o': {  		c = ReadChar ();  		if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		ulong objectId = ReadULong ();  		int typeIndex = ReadInt ();  		uint size = ReadUInt ();  		stackPtr = 0;  		ulong objectID;  		while ((objectID = ReadULong ()) != ulong.MaxValue) {  			if (objectID > 0) {  				ulongStack [stackPtr] = objectID;  				stackPtr++;  				if (stackPtr >= ulongStack.Length)  					ulongStack = GrowULongVector (ulongStack);  			}  		}  		if (c != -1) {  			ObjectGraph objectGraph = readLogResult.objectGraph;  			objectGraph.GetOrCreateGcType (typeIndex);  			int typeSizeStackTraceId = -1;  			int allocTickIndex = 0;  			// try to find the allocation stack trace and allocation time  			// from the live object table  			if (readLogResult.liveObjectTable != null) {  				LiveObjectTable.LiveObject liveObject;  				readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  				if (liveObject.id == objectId) {  					int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  					int typeIndexFromLiveObject = stackTrace [0];  					if (typeIndexFromLiveObject == typeIndex) {  						typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  						allocTickIndex = liveObject.allocTickIndex;  						Histogram[] h = readLogResult.heapDumpHistograms;  						if (h != null)  							h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  					}  				}  			}  			if (typeSizeStackTraceId == -1)  				typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  			ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  			gcObject.AllocTickIndex = allocTickIndex;  		}  		break;  	}  	case 'M':  	case 'm': {  		c = ReadChar ();  		int modIndex = ReadInt ();  		sb.Length = 0;  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		if (c != -1) {  			string lineString = sb.ToString ();  			int addrPos = lineString.LastIndexOf (" 0x");  			if (addrPos <= 0)  				addrPos = lineString.Length;  			int backSlashPos = lineString.LastIndexOf (@"\");  			if (backSlashPos <= 0)  				backSlashPos = -1;  			string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  			string fullName = lineString.Substring (0' addrPos);  			EnsureStringCapacity (modIndex' ref modBasicName);  			modBasicName [modIndex] = basicName;  			EnsureStringCapacity (modIndex' ref modFullName);  			modFullName [modIndex] = fullName;  		}  		break;  	}  	case 'U':  	case 'u': {  		c = ReadChar ();  		ulong oldId = ReadULong ();  		ulong newId = ReadULong ();  		uint length = ReadUInt ();  		Histogram reloHist = null;  		if (pos >= startFileOffset && pos < endFileOffset)  			reloHist = readLogResult.relocatedHistogram;  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  		break;  	}  	case 'V':  	case 'v': {  		c = ReadChar ();  		ulong startId = ReadULong ();  		uint length = ReadUInt ();  		Histogram reloHist = null;  		if (pos >= startFileOffset && pos < endFileOffset)  			reloHist = readLogResult.relocatedHistogram;  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  		break;  	}  	case 'B':  	case 'b':  		c = ReadChar ();  		int startGC = ReadInt ();  		int induced = ReadInt ();  		int condemnedGeneration = ReadInt ();  		if (startGC != 0)  			newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  		if (newGcEvent) {  			if (startGC != 0) {  				if (induced != 0) {  					for (int gen = 0; gen <= condemnedGeneration; gen++)  						inducedGcCount [gen]++;  				}  			}  			else {  				int condemnedLimit = condemnedGeneration;  				if (condemnedLimit == 2)  					condemnedLimit = 3;  				for (int gen = 0; gen <= condemnedLimit; gen++) {  					cumulativeGenerationSize [gen] += generationSize [gen];  					gcCount [gen]++;  				}  			}  		}  		for (int gen = 0; gen <= 3; gen++)  			generationSize [gen] = 0;  		while (c >= ' ') {  			ulong rangeStart = ReadULong ();  			ulong rangeLength = ReadULong ();  			ulong rangeLengthReserved = ReadULong ();  			int rangeGeneration = ReadInt ();  			if (c == -1 || rangeGeneration < 0)  				break;  			if (readLogResult.liveObjectTable != null) {  				if (startGC != 0) {  					if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  						readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  				}  				else {  					readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  				}  			}  			generationSize [rangeGeneration] += rangeLength;  		}  		if (startGC == 0 && readLogResult.liveObjectTable != null) {  			readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  		}  		break;  	case 'L':  	case 'l': {  		c = ReadChar ();  		int isCritical = ReadInt ();  		ulong objectId = ReadULong ();  		if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  			// try to find the allocation stack trace and allocation time  			// from the live object table  			LiveObjectTable.LiveObject liveObject;  			readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  			if (liveObject.id == objectId) {  				if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  					readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  				if (readLogResult.finalizerHistogram != null)  					readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  			}  		}  		break;  	}  	case 'I':  	case 'i':  		c = ReadChar ();  		int tickCount = ReadInt ();  		if (c != -1) {  			lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  			if (maxTickIndex < lastTickIndex)  				maxTickIndex = lastTickIndex;  		}  		break;  	case 'G':  	case 'g':  		c = ReadChar ();  		int gcGen0Count = ReadInt ();  		int gcGen1Count = ReadInt ();  		int gcGen2Count = ReadInt ();  		// if the newer 'b' lines occur' disregard the 'g' lines.  		if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  			if (c == -1 || gcGen0Count < 0)  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  			else  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  		}  		break;  	case 'N':  	case 'n': {  		c = ReadChar ();  		int funcIndex;  		int stackTraceIndex = ReadInt ();  		stackPtr = 0;  		int flag = ReadInt ();  		int matched = flag / 4;  		int hadTypeId = (flag & 2);  		bool hasTypeId = (flag & 1) == 1;  		if (hasTypeId) {  			intStack [stackPtr++] = ReadInt ();  			intStack [stackPtr++] = ReadInt ();  		}  		if (matched > 0 && c != -1) {  			/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  			otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  			int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  			if (matched > stacktrace.Length - hadTypeId)  				matched = stacktrace.Length - hadTypeId;  			for (int i = 0; i < matched; i++) {  				int funcId = stacktrace [i + hadTypeId];  				//Debug.Assert(funcId < funcName.Length);  				if (funcName [funcId] == null)  					funcName [funcId] = String.Empty;  				intStack [stackPtr++] = funcId;  				if (stackPtr >= intStack.Length) {  					intStack = GrowIntVector (intStack);  				}  			}  		}  		while ((funcIndex = ReadInt ()) >= 0) {  			intStack [stackPtr] = funcIndex;  			stackPtr++;  			if (stackPtr >= intStack.Length)  				intStack = GrowIntVector (intStack);  		}  		if (c != -1) {  			stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  		}  		break;  	}  	case 'y':  	case 'Y': {  		c = ReadChar ();  		int threadid = ReadInt ();  		if (!assembliesJustLoaded.ContainsKey (threadid)) {  			assembliesJustLoaded [threadid] = new List<string> ();  		}  		/* int assemblyId = */ReadInt ();  		while (c == ' ' || c == '\t') {  			c = ReadChar ();  		}  		sb.Length = 0;  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		string assemblyName = sb.ToString ();  		assembliesJustLoaded [threadid].Add (assemblyName);  		break;  	}  	case 'S':  	case 's': {  		c = ReadChar ();  		int stackTraceIndex = ReadInt ();  		int funcIndex;  		stackPtr = 0;  		while ((funcIndex = ReadInt ()) >= 0) {  			intStack [stackPtr] = funcIndex;  			stackPtr++;  			if (stackPtr >= intStack.Length)  				intStack = GrowIntVector (intStack);  		}  		if (c != -1) {  			stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  		}  		break;  	}  	case 'Z':  	case 'z': {  		sb.Length = 0;  		c = ReadChar ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		if (c != -1) {  			lastTickIndex = AddTimePos (lastLineStartPos);  			if (maxTickIndex < lastTickIndex)  				maxTickIndex = lastTickIndex;  			commentEventList.AddEvent (lastTickIndex' sb.ToString ());  		}  		break;  	}  	case 'H':  	case 'h': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong handleId = ReadULong ();  		ulong initialObjectId = ReadULong ();  		int stacktraceId = ReadInt ();  		if (c != -1) {  			if (readLogResult.handleHash != null)  				readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  			if (readLogResult.createdHandlesHistogram != null)  				readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  		}  		break;  	}  	case 'J':  	case 'j': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong handleId = ReadULong ();  		int stacktraceId = ReadInt ();  		if (c != -1) {  			if (readLogResult.handleHash != null) {  				if (readLogResult.handleHash.ContainsKey (handleId))  					readLogResult.handleHash.Remove (handleId);  				else {  					//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  					//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  					//for (int i = stacktrace.Length; --i >= 0; )  					//{  					//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  					//}  				}  			}  			if (readLogResult.destroyedHandlesHistogram != null)  				readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  		}  		break;  	}  	default: {  		// just ignore the unknown  		while (c != '\n' && c != '\r') {  			c = ReadChar ();  		}  		break;  	}  	}  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	if (c == '\r')  		c = ReadChar ();  	if (c == '\n') {  		c = ReadChar ();  		line++;  	}  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: while (c != -1) {  	if (pos > endFileOffset)  		break;  	if ((line % 1024) == 0) {  		int currentProgress = (int)(pos / 1024);  		if (currentProgress <= maxProgress) {  		}  	}  	lastLineStartPos = pos - 1;  	previousWasR = thisIsR;  	thisIsR = false;  	switch (c) {  	case -1:  		break;  	case 'F':  	case 'f': {  		c = ReadChar ();  		int funcIndex = ReadInt ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string name = ReadString (sb' ' '' false' 255);  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string signature = ReadString (sb' '\r'' true' 1023);  		ulong addr = ReadULong ();  		uint size = ReadUInt ();  		int modIndex = ReadInt ();  		int stackIndex = ReadInt ();  		if (c != -1) {  			EnsureStringCapacity (funcIndex' ref funcName);  			funcName [funcIndex] = name;  			EnsureStringCapacity (funcIndex' ref funcSignature);  			funcSignature [funcIndex] = signature;  			EnsureIntCapacity (funcIndex' ref funcModule);  			funcModule [funcIndex] = modIndex;  			string nameAndSignature = name;  			if (signature != null)  				nameAndSignature = name + ' ' + signature;  			if (stackIndex >= 0 && readLogResult.functionList != null) {  				funcSignatureIdHash [nameAndSignature] = funcIndex;  				readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  			}  		}  		break;  	}  	case 'T':  	case 't': {  		c = ReadChar ();  		int typeIndex = ReadInt ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		if (c != -1 && Char.IsDigit ((char)c)) {  			if (ReadInt () != 0) {  				finalizableTypes [typeIndex] = true;  			}  		}  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string typeName = ReadString (sb' '\r'' false' 1023);  		if (c != -1) {  			AddTypeName (typeIndex' typeName);  		}  		break;  	}  	// 'A' with thread identifier  	case '!': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong id = ReadULong ();  		int typeSizeStackTraceIndex = ReadInt ();  		typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  		if (c != -1) {  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  				// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  				readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  			}  			List<string> prev;  			if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  				foreach (string assemblyName in prev) {  					assemblies [assemblyName] = -typeSizeStackTraceIndex;  				}  				prev.Clear ();  			}  		}  		readLogResult.hadAllocInfo = true;  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'A':  	case 'a': {  		c = ReadChar ();  		ulong id = ReadULong ();  		int typeSizeStackTraceIndex = ReadInt ();  		typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  		if (c != -1) {  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  				// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  				readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  			}  		}  		readLogResult.hadAllocInfo = true;  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'C':  	case 'c': {  		c = ReadChar ();  		if (pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		int threadIndex = ReadInt ();  		int stackTraceIndex = ReadInt ();  		stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  		if (c != -1) {  			if (readLogResult.callstackHistogram != null) {  				readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  			}  			List<string> prev;  			if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  				foreach (string assemblyName in prev) {  					assemblies [assemblyName] = stackTraceIndex;  				}  				prev.Clear ();  			}  		}  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'E':  	case 'e': {  		c = ReadChar ();  		extendedRootInfoSeen = true;  		thisIsR = true;  		if (pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		if (!previousWasR) {  			heapDumpEventList.AddEvent (lastTickIndex' null);  			if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  				readLogResult.objectGraph.BuildTypeGraph ();  				readLogResult.objectGraph.Neuter ();  			}  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  				for (int i = 0; i < h.Length; i++)  					readLogResult.heapDumpHistograms [i] = h [i];  				readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  			}  			readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  		}  		ulong objectID = ReadULong ();  		GcRootKind rootKind = (GcRootKind)ReadInt ();  		GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  		ulong rootID = ReadULong ();  		ObjectGraph objectGraph = readLogResult.objectGraph;  		if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  			string rootName;  			switch (rootKind) {  			case GcRootKind.Stack:  				rootName = "Stack";  				break;  			case GcRootKind.Finalizer:  				rootName = "Finalizer";  				break;  			case GcRootKind.Handle:  				rootName = "Handle";  				break;  			default:  				rootName = "Other";  				break;  			}  			if ((rootFlags & GcRootFlags.Pinning) != 0)  				rootName += "' Pinning";  			if ((rootFlags & GcRootFlags.WeakRef) != 0)  				rootName += "' WeakRef";  			if ((rootFlags & GcRootFlags.Interior) != 0)  				rootName += "' Interior";  			if ((rootFlags & GcRootFlags.Refcounted) != 0)  				rootName += "' RefCounted";  			int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  			ulongStack [0] = objectID;  			ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  			objectGraph.AddRootObject (rootObject' rootID);  		}  		break;  	}  	case 'R':  	case 'r': {  		c = ReadChar ();  		thisIsR = true;  		if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  			}  			break;  		}  		if (!previousWasR) {  			heapDumpEventList.AddEvent (lastTickIndex' null);  			if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  				readLogResult.objectGraph.BuildTypeGraph ();  				readLogResult.objectGraph.Neuter ();  			}  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  				for (int i = 0; i < h.Length; i++)  					readLogResult.heapDumpHistograms [i] = h [i];  				readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  			}  			readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  		}  		stackPtr = 0;  		ulong objectID;  		while ((objectID = ReadULong ()) != ulong.MaxValue) {  			if (objectID > 0) {  				ulongStack [stackPtr] = objectID;  				stackPtr++;  				if (stackPtr >= ulongStack.Length)  					ulongStack = GrowULongVector (ulongStack);  			}  		}  		if (c != -1) {  			if (readLogResult.objectGraph != null)  				readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  		}  		break;  	}  	case 'O':  	case 'o': {  		c = ReadChar ();  		if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		ulong objectId = ReadULong ();  		int typeIndex = ReadInt ();  		uint size = ReadUInt ();  		stackPtr = 0;  		ulong objectID;  		while ((objectID = ReadULong ()) != ulong.MaxValue) {  			if (objectID > 0) {  				ulongStack [stackPtr] = objectID;  				stackPtr++;  				if (stackPtr >= ulongStack.Length)  					ulongStack = GrowULongVector (ulongStack);  			}  		}  		if (c != -1) {  			ObjectGraph objectGraph = readLogResult.objectGraph;  			objectGraph.GetOrCreateGcType (typeIndex);  			int typeSizeStackTraceId = -1;  			int allocTickIndex = 0;  			// try to find the allocation stack trace and allocation time  			// from the live object table  			if (readLogResult.liveObjectTable != null) {  				LiveObjectTable.LiveObject liveObject;  				readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  				if (liveObject.id == objectId) {  					int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  					int typeIndexFromLiveObject = stackTrace [0];  					if (typeIndexFromLiveObject == typeIndex) {  						typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  						allocTickIndex = liveObject.allocTickIndex;  						Histogram[] h = readLogResult.heapDumpHistograms;  						if (h != null)  							h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  					}  				}  			}  			if (typeSizeStackTraceId == -1)  				typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  			ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  			gcObject.AllocTickIndex = allocTickIndex;  		}  		break;  	}  	case 'M':  	case 'm': {  		c = ReadChar ();  		int modIndex = ReadInt ();  		sb.Length = 0;  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		if (c != -1) {  			string lineString = sb.ToString ();  			int addrPos = lineString.LastIndexOf (" 0x");  			if (addrPos <= 0)  				addrPos = lineString.Length;  			int backSlashPos = lineString.LastIndexOf (@"\");  			if (backSlashPos <= 0)  				backSlashPos = -1;  			string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  			string fullName = lineString.Substring (0' addrPos);  			EnsureStringCapacity (modIndex' ref modBasicName);  			modBasicName [modIndex] = basicName;  			EnsureStringCapacity (modIndex' ref modFullName);  			modFullName [modIndex] = fullName;  		}  		break;  	}  	case 'U':  	case 'u': {  		c = ReadChar ();  		ulong oldId = ReadULong ();  		ulong newId = ReadULong ();  		uint length = ReadUInt ();  		Histogram reloHist = null;  		if (pos >= startFileOffset && pos < endFileOffset)  			reloHist = readLogResult.relocatedHistogram;  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  		break;  	}  	case 'V':  	case 'v': {  		c = ReadChar ();  		ulong startId = ReadULong ();  		uint length = ReadUInt ();  		Histogram reloHist = null;  		if (pos >= startFileOffset && pos < endFileOffset)  			reloHist = readLogResult.relocatedHistogram;  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  		break;  	}  	case 'B':  	case 'b':  		c = ReadChar ();  		int startGC = ReadInt ();  		int induced = ReadInt ();  		int condemnedGeneration = ReadInt ();  		if (startGC != 0)  			newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  		if (newGcEvent) {  			if (startGC != 0) {  				if (induced != 0) {  					for (int gen = 0; gen <= condemnedGeneration; gen++)  						inducedGcCount [gen]++;  				}  			}  			else {  				int condemnedLimit = condemnedGeneration;  				if (condemnedLimit == 2)  					condemnedLimit = 3;  				for (int gen = 0; gen <= condemnedLimit; gen++) {  					cumulativeGenerationSize [gen] += generationSize [gen];  					gcCount [gen]++;  				}  			}  		}  		for (int gen = 0; gen <= 3; gen++)  			generationSize [gen] = 0;  		while (c >= ' ') {  			ulong rangeStart = ReadULong ();  			ulong rangeLength = ReadULong ();  			ulong rangeLengthReserved = ReadULong ();  			int rangeGeneration = ReadInt ();  			if (c == -1 || rangeGeneration < 0)  				break;  			if (readLogResult.liveObjectTable != null) {  				if (startGC != 0) {  					if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  						readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  				}  				else {  					readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  				}  			}  			generationSize [rangeGeneration] += rangeLength;  		}  		if (startGC == 0 && readLogResult.liveObjectTable != null) {  			readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  		}  		break;  	case 'L':  	case 'l': {  		c = ReadChar ();  		int isCritical = ReadInt ();  		ulong objectId = ReadULong ();  		if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  			// try to find the allocation stack trace and allocation time  			// from the live object table  			LiveObjectTable.LiveObject liveObject;  			readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  			if (liveObject.id == objectId) {  				if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  					readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  				if (readLogResult.finalizerHistogram != null)  					readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  			}  		}  		break;  	}  	case 'I':  	case 'i':  		c = ReadChar ();  		int tickCount = ReadInt ();  		if (c != -1) {  			lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  			if (maxTickIndex < lastTickIndex)  				maxTickIndex = lastTickIndex;  		}  		break;  	case 'G':  	case 'g':  		c = ReadChar ();  		int gcGen0Count = ReadInt ();  		int gcGen1Count = ReadInt ();  		int gcGen2Count = ReadInt ();  		// if the newer 'b' lines occur' disregard the 'g' lines.  		if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  			if (c == -1 || gcGen0Count < 0)  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  			else  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  		}  		break;  	case 'N':  	case 'n': {  		c = ReadChar ();  		int funcIndex;  		int stackTraceIndex = ReadInt ();  		stackPtr = 0;  		int flag = ReadInt ();  		int matched = flag / 4;  		int hadTypeId = (flag & 2);  		bool hasTypeId = (flag & 1) == 1;  		if (hasTypeId) {  			intStack [stackPtr++] = ReadInt ();  			intStack [stackPtr++] = ReadInt ();  		}  		if (matched > 0 && c != -1) {  			/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  			otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  			int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  			if (matched > stacktrace.Length - hadTypeId)  				matched = stacktrace.Length - hadTypeId;  			for (int i = 0; i < matched; i++) {  				int funcId = stacktrace [i + hadTypeId];  				//Debug.Assert(funcId < funcName.Length);  				if (funcName [funcId] == null)  					funcName [funcId] = String.Empty;  				intStack [stackPtr++] = funcId;  				if (stackPtr >= intStack.Length) {  					intStack = GrowIntVector (intStack);  				}  			}  		}  		while ((funcIndex = ReadInt ()) >= 0) {  			intStack [stackPtr] = funcIndex;  			stackPtr++;  			if (stackPtr >= intStack.Length)  				intStack = GrowIntVector (intStack);  		}  		if (c != -1) {  			stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  		}  		break;  	}  	case 'y':  	case 'Y': {  		c = ReadChar ();  		int threadid = ReadInt ();  		if (!assembliesJustLoaded.ContainsKey (threadid)) {  			assembliesJustLoaded [threadid] = new List<string> ();  		}  		/* int assemblyId = */ReadInt ();  		while (c == ' ' || c == '\t') {  			c = ReadChar ();  		}  		sb.Length = 0;  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		string assemblyName = sb.ToString ();  		assembliesJustLoaded [threadid].Add (assemblyName);  		break;  	}  	case 'S':  	case 's': {  		c = ReadChar ();  		int stackTraceIndex = ReadInt ();  		int funcIndex;  		stackPtr = 0;  		while ((funcIndex = ReadInt ()) >= 0) {  			intStack [stackPtr] = funcIndex;  			stackPtr++;  			if (stackPtr >= intStack.Length)  				intStack = GrowIntVector (intStack);  		}  		if (c != -1) {  			stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  		}  		break;  	}  	case 'Z':  	case 'z': {  		sb.Length = 0;  		c = ReadChar ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		if (c != -1) {  			lastTickIndex = AddTimePos (lastLineStartPos);  			if (maxTickIndex < lastTickIndex)  				maxTickIndex = lastTickIndex;  			commentEventList.AddEvent (lastTickIndex' sb.ToString ());  		}  		break;  	}  	case 'H':  	case 'h': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong handleId = ReadULong ();  		ulong initialObjectId = ReadULong ();  		int stacktraceId = ReadInt ();  		if (c != -1) {  			if (readLogResult.handleHash != null)  				readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  			if (readLogResult.createdHandlesHistogram != null)  				readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  		}  		break;  	}  	case 'J':  	case 'j': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong handleId = ReadULong ();  		int stacktraceId = ReadInt ();  		if (c != -1) {  			if (readLogResult.handleHash != null) {  				if (readLogResult.handleHash.ContainsKey (handleId))  					readLogResult.handleHash.Remove (handleId);  				else {  					//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  					//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  					//for (int i = stacktrace.Length; --i >= 0; )  					//{  					//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  					//}  				}  			}  			if (readLogResult.destroyedHandlesHistogram != null)  				readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  		}  		break;  	}  	default: {  		// just ignore the unknown  		while (c != '\n' && c != '\r') {  			c = ReadChar ();  		}  		break;  	}  	}  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	if (c == '\r')  		c = ReadChar ();  	if (c == '\n') {  		c = ReadChar ();  		line++;  	}  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: while (c != -1) {  	if (pos > endFileOffset)  		break;  	if ((line % 1024) == 0) {  		int currentProgress = (int)(pos / 1024);  		if (currentProgress <= maxProgress) {  		}  	}  	lastLineStartPos = pos - 1;  	previousWasR = thisIsR;  	thisIsR = false;  	switch (c) {  	case -1:  		break;  	case 'F':  	case 'f': {  		c = ReadChar ();  		int funcIndex = ReadInt ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string name = ReadString (sb' ' '' false' 255);  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string signature = ReadString (sb' '\r'' true' 1023);  		ulong addr = ReadULong ();  		uint size = ReadUInt ();  		int modIndex = ReadInt ();  		int stackIndex = ReadInt ();  		if (c != -1) {  			EnsureStringCapacity (funcIndex' ref funcName);  			funcName [funcIndex] = name;  			EnsureStringCapacity (funcIndex' ref funcSignature);  			funcSignature [funcIndex] = signature;  			EnsureIntCapacity (funcIndex' ref funcModule);  			funcModule [funcIndex] = modIndex;  			string nameAndSignature = name;  			if (signature != null)  				nameAndSignature = name + ' ' + signature;  			if (stackIndex >= 0 && readLogResult.functionList != null) {  				funcSignatureIdHash [nameAndSignature] = funcIndex;  				readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  			}  		}  		break;  	}  	case 'T':  	case 't': {  		c = ReadChar ();  		int typeIndex = ReadInt ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		if (c != -1 && Char.IsDigit ((char)c)) {  			if (ReadInt () != 0) {  				finalizableTypes [typeIndex] = true;  			}  		}  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string typeName = ReadString (sb' '\r'' false' 1023);  		if (c != -1) {  			AddTypeName (typeIndex' typeName);  		}  		break;  	}  	// 'A' with thread identifier  	case '!': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong id = ReadULong ();  		int typeSizeStackTraceIndex = ReadInt ();  		typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  		if (c != -1) {  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  				// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  				readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  			}  			List<string> prev;  			if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  				foreach (string assemblyName in prev) {  					assemblies [assemblyName] = -typeSizeStackTraceIndex;  				}  				prev.Clear ();  			}  		}  		readLogResult.hadAllocInfo = true;  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'A':  	case 'a': {  		c = ReadChar ();  		ulong id = ReadULong ();  		int typeSizeStackTraceIndex = ReadInt ();  		typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  		if (c != -1) {  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  				// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  				readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  			}  		}  		readLogResult.hadAllocInfo = true;  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'C':  	case 'c': {  		c = ReadChar ();  		if (pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		int threadIndex = ReadInt ();  		int stackTraceIndex = ReadInt ();  		stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  		if (c != -1) {  			if (readLogResult.callstackHistogram != null) {  				readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  			}  			List<string> prev;  			if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  				foreach (string assemblyName in prev) {  					assemblies [assemblyName] = stackTraceIndex;  				}  				prev.Clear ();  			}  		}  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'E':  	case 'e': {  		c = ReadChar ();  		extendedRootInfoSeen = true;  		thisIsR = true;  		if (pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		if (!previousWasR) {  			heapDumpEventList.AddEvent (lastTickIndex' null);  			if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  				readLogResult.objectGraph.BuildTypeGraph ();  				readLogResult.objectGraph.Neuter ();  			}  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  				for (int i = 0; i < h.Length; i++)  					readLogResult.heapDumpHistograms [i] = h [i];  				readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  			}  			readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  		}  		ulong objectID = ReadULong ();  		GcRootKind rootKind = (GcRootKind)ReadInt ();  		GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  		ulong rootID = ReadULong ();  		ObjectGraph objectGraph = readLogResult.objectGraph;  		if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  			string rootName;  			switch (rootKind) {  			case GcRootKind.Stack:  				rootName = "Stack";  				break;  			case GcRootKind.Finalizer:  				rootName = "Finalizer";  				break;  			case GcRootKind.Handle:  				rootName = "Handle";  				break;  			default:  				rootName = "Other";  				break;  			}  			if ((rootFlags & GcRootFlags.Pinning) != 0)  				rootName += "' Pinning";  			if ((rootFlags & GcRootFlags.WeakRef) != 0)  				rootName += "' WeakRef";  			if ((rootFlags & GcRootFlags.Interior) != 0)  				rootName += "' Interior";  			if ((rootFlags & GcRootFlags.Refcounted) != 0)  				rootName += "' RefCounted";  			int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  			ulongStack [0] = objectID;  			ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  			objectGraph.AddRootObject (rootObject' rootID);  		}  		break;  	}  	case 'R':  	case 'r': {  		c = ReadChar ();  		thisIsR = true;  		if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  			}  			break;  		}  		if (!previousWasR) {  			heapDumpEventList.AddEvent (lastTickIndex' null);  			if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  				readLogResult.objectGraph.BuildTypeGraph ();  				readLogResult.objectGraph.Neuter ();  			}  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  				for (int i = 0; i < h.Length; i++)  					readLogResult.heapDumpHistograms [i] = h [i];  				readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  			}  			readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  		}  		stackPtr = 0;  		ulong objectID;  		while ((objectID = ReadULong ()) != ulong.MaxValue) {  			if (objectID > 0) {  				ulongStack [stackPtr] = objectID;  				stackPtr++;  				if (stackPtr >= ulongStack.Length)  					ulongStack = GrowULongVector (ulongStack);  			}  		}  		if (c != -1) {  			if (readLogResult.objectGraph != null)  				readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  		}  		break;  	}  	case 'O':  	case 'o': {  		c = ReadChar ();  		if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		ulong objectId = ReadULong ();  		int typeIndex = ReadInt ();  		uint size = ReadUInt ();  		stackPtr = 0;  		ulong objectID;  		while ((objectID = ReadULong ()) != ulong.MaxValue) {  			if (objectID > 0) {  				ulongStack [stackPtr] = objectID;  				stackPtr++;  				if (stackPtr >= ulongStack.Length)  					ulongStack = GrowULongVector (ulongStack);  			}  		}  		if (c != -1) {  			ObjectGraph objectGraph = readLogResult.objectGraph;  			objectGraph.GetOrCreateGcType (typeIndex);  			int typeSizeStackTraceId = -1;  			int allocTickIndex = 0;  			// try to find the allocation stack trace and allocation time  			// from the live object table  			if (readLogResult.liveObjectTable != null) {  				LiveObjectTable.LiveObject liveObject;  				readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  				if (liveObject.id == objectId) {  					int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  					int typeIndexFromLiveObject = stackTrace [0];  					if (typeIndexFromLiveObject == typeIndex) {  						typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  						allocTickIndex = liveObject.allocTickIndex;  						Histogram[] h = readLogResult.heapDumpHistograms;  						if (h != null)  							h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  					}  				}  			}  			if (typeSizeStackTraceId == -1)  				typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  			ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  			gcObject.AllocTickIndex = allocTickIndex;  		}  		break;  	}  	case 'M':  	case 'm': {  		c = ReadChar ();  		int modIndex = ReadInt ();  		sb.Length = 0;  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		if (c != -1) {  			string lineString = sb.ToString ();  			int addrPos = lineString.LastIndexOf (" 0x");  			if (addrPos <= 0)  				addrPos = lineString.Length;  			int backSlashPos = lineString.LastIndexOf (@"\");  			if (backSlashPos <= 0)  				backSlashPos = -1;  			string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  			string fullName = lineString.Substring (0' addrPos);  			EnsureStringCapacity (modIndex' ref modBasicName);  			modBasicName [modIndex] = basicName;  			EnsureStringCapacity (modIndex' ref modFullName);  			modFullName [modIndex] = fullName;  		}  		break;  	}  	case 'U':  	case 'u': {  		c = ReadChar ();  		ulong oldId = ReadULong ();  		ulong newId = ReadULong ();  		uint length = ReadUInt ();  		Histogram reloHist = null;  		if (pos >= startFileOffset && pos < endFileOffset)  			reloHist = readLogResult.relocatedHistogram;  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  		break;  	}  	case 'V':  	case 'v': {  		c = ReadChar ();  		ulong startId = ReadULong ();  		uint length = ReadUInt ();  		Histogram reloHist = null;  		if (pos >= startFileOffset && pos < endFileOffset)  			reloHist = readLogResult.relocatedHistogram;  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  		break;  	}  	case 'B':  	case 'b':  		c = ReadChar ();  		int startGC = ReadInt ();  		int induced = ReadInt ();  		int condemnedGeneration = ReadInt ();  		if (startGC != 0)  			newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  		if (newGcEvent) {  			if (startGC != 0) {  				if (induced != 0) {  					for (int gen = 0; gen <= condemnedGeneration; gen++)  						inducedGcCount [gen]++;  				}  			}  			else {  				int condemnedLimit = condemnedGeneration;  				if (condemnedLimit == 2)  					condemnedLimit = 3;  				for (int gen = 0; gen <= condemnedLimit; gen++) {  					cumulativeGenerationSize [gen] += generationSize [gen];  					gcCount [gen]++;  				}  			}  		}  		for (int gen = 0; gen <= 3; gen++)  			generationSize [gen] = 0;  		while (c >= ' ') {  			ulong rangeStart = ReadULong ();  			ulong rangeLength = ReadULong ();  			ulong rangeLengthReserved = ReadULong ();  			int rangeGeneration = ReadInt ();  			if (c == -1 || rangeGeneration < 0)  				break;  			if (readLogResult.liveObjectTable != null) {  				if (startGC != 0) {  					if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  						readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  				}  				else {  					readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  				}  			}  			generationSize [rangeGeneration] += rangeLength;  		}  		if (startGC == 0 && readLogResult.liveObjectTable != null) {  			readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  		}  		break;  	case 'L':  	case 'l': {  		c = ReadChar ();  		int isCritical = ReadInt ();  		ulong objectId = ReadULong ();  		if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  			// try to find the allocation stack trace and allocation time  			// from the live object table  			LiveObjectTable.LiveObject liveObject;  			readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  			if (liveObject.id == objectId) {  				if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  					readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  				if (readLogResult.finalizerHistogram != null)  					readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  			}  		}  		break;  	}  	case 'I':  	case 'i':  		c = ReadChar ();  		int tickCount = ReadInt ();  		if (c != -1) {  			lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  			if (maxTickIndex < lastTickIndex)  				maxTickIndex = lastTickIndex;  		}  		break;  	case 'G':  	case 'g':  		c = ReadChar ();  		int gcGen0Count = ReadInt ();  		int gcGen1Count = ReadInt ();  		int gcGen2Count = ReadInt ();  		// if the newer 'b' lines occur' disregard the 'g' lines.  		if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  			if (c == -1 || gcGen0Count < 0)  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  			else  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  		}  		break;  	case 'N':  	case 'n': {  		c = ReadChar ();  		int funcIndex;  		int stackTraceIndex = ReadInt ();  		stackPtr = 0;  		int flag = ReadInt ();  		int matched = flag / 4;  		int hadTypeId = (flag & 2);  		bool hasTypeId = (flag & 1) == 1;  		if (hasTypeId) {  			intStack [stackPtr++] = ReadInt ();  			intStack [stackPtr++] = ReadInt ();  		}  		if (matched > 0 && c != -1) {  			/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  			otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  			int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  			if (matched > stacktrace.Length - hadTypeId)  				matched = stacktrace.Length - hadTypeId;  			for (int i = 0; i < matched; i++) {  				int funcId = stacktrace [i + hadTypeId];  				//Debug.Assert(funcId < funcName.Length);  				if (funcName [funcId] == null)  					funcName [funcId] = String.Empty;  				intStack [stackPtr++] = funcId;  				if (stackPtr >= intStack.Length) {  					intStack = GrowIntVector (intStack);  				}  			}  		}  		while ((funcIndex = ReadInt ()) >= 0) {  			intStack [stackPtr] = funcIndex;  			stackPtr++;  			if (stackPtr >= intStack.Length)  				intStack = GrowIntVector (intStack);  		}  		if (c != -1) {  			stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  		}  		break;  	}  	case 'y':  	case 'Y': {  		c = ReadChar ();  		int threadid = ReadInt ();  		if (!assembliesJustLoaded.ContainsKey (threadid)) {  			assembliesJustLoaded [threadid] = new List<string> ();  		}  		/* int assemblyId = */ReadInt ();  		while (c == ' ' || c == '\t') {  			c = ReadChar ();  		}  		sb.Length = 0;  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		string assemblyName = sb.ToString ();  		assembliesJustLoaded [threadid].Add (assemblyName);  		break;  	}  	case 'S':  	case 's': {  		c = ReadChar ();  		int stackTraceIndex = ReadInt ();  		int funcIndex;  		stackPtr = 0;  		while ((funcIndex = ReadInt ()) >= 0) {  			intStack [stackPtr] = funcIndex;  			stackPtr++;  			if (stackPtr >= intStack.Length)  				intStack = GrowIntVector (intStack);  		}  		if (c != -1) {  			stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  		}  		break;  	}  	case 'Z':  	case 'z': {  		sb.Length = 0;  		c = ReadChar ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		if (c != -1) {  			lastTickIndex = AddTimePos (lastLineStartPos);  			if (maxTickIndex < lastTickIndex)  				maxTickIndex = lastTickIndex;  			commentEventList.AddEvent (lastTickIndex' sb.ToString ());  		}  		break;  	}  	case 'H':  	case 'h': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong handleId = ReadULong ();  		ulong initialObjectId = ReadULong ();  		int stacktraceId = ReadInt ();  		if (c != -1) {  			if (readLogResult.handleHash != null)  				readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  			if (readLogResult.createdHandlesHistogram != null)  				readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  		}  		break;  	}  	case 'J':  	case 'j': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong handleId = ReadULong ();  		int stacktraceId = ReadInt ();  		if (c != -1) {  			if (readLogResult.handleHash != null) {  				if (readLogResult.handleHash.ContainsKey (handleId))  					readLogResult.handleHash.Remove (handleId);  				else {  					//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  					//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  					//for (int i = stacktrace.Length; --i >= 0; )  					//{  					//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  					//}  				}  			}  			if (readLogResult.destroyedHandlesHistogram != null)  				readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  		}  		break;  	}  	default: {  		// just ignore the unknown  		while (c != '\n' && c != '\r') {  			c = ReadChar ();  		}  		break;  	}  	}  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	if (c == '\r')  		c = ReadChar ();  	if (c == '\n') {  		c = ReadChar ();  		line++;  	}  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: while (c != -1) {  	if (pos > endFileOffset)  		break;  	if ((line % 1024) == 0) {  		int currentProgress = (int)(pos / 1024);  		if (currentProgress <= maxProgress) {  		}  	}  	lastLineStartPos = pos - 1;  	previousWasR = thisIsR;  	thisIsR = false;  	switch (c) {  	case -1:  		break;  	case 'F':  	case 'f': {  		c = ReadChar ();  		int funcIndex = ReadInt ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string name = ReadString (sb' ' '' false' 255);  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string signature = ReadString (sb' '\r'' true' 1023);  		ulong addr = ReadULong ();  		uint size = ReadUInt ();  		int modIndex = ReadInt ();  		int stackIndex = ReadInt ();  		if (c != -1) {  			EnsureStringCapacity (funcIndex' ref funcName);  			funcName [funcIndex] = name;  			EnsureStringCapacity (funcIndex' ref funcSignature);  			funcSignature [funcIndex] = signature;  			EnsureIntCapacity (funcIndex' ref funcModule);  			funcModule [funcIndex] = modIndex;  			string nameAndSignature = name;  			if (signature != null)  				nameAndSignature = name + ' ' + signature;  			if (stackIndex >= 0 && readLogResult.functionList != null) {  				funcSignatureIdHash [nameAndSignature] = funcIndex;  				readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  			}  		}  		break;  	}  	case 'T':  	case 't': {  		c = ReadChar ();  		int typeIndex = ReadInt ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		if (c != -1 && Char.IsDigit ((char)c)) {  			if (ReadInt () != 0) {  				finalizableTypes [typeIndex] = true;  			}  		}  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string typeName = ReadString (sb' '\r'' false' 1023);  		if (c != -1) {  			AddTypeName (typeIndex' typeName);  		}  		break;  	}  	// 'A' with thread identifier  	case '!': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong id = ReadULong ();  		int typeSizeStackTraceIndex = ReadInt ();  		typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  		if (c != -1) {  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  				// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  				readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  			}  			List<string> prev;  			if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  				foreach (string assemblyName in prev) {  					assemblies [assemblyName] = -typeSizeStackTraceIndex;  				}  				prev.Clear ();  			}  		}  		readLogResult.hadAllocInfo = true;  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'A':  	case 'a': {  		c = ReadChar ();  		ulong id = ReadULong ();  		int typeSizeStackTraceIndex = ReadInt ();  		typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  		if (c != -1) {  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  				// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  				readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  			}  		}  		readLogResult.hadAllocInfo = true;  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'C':  	case 'c': {  		c = ReadChar ();  		if (pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		int threadIndex = ReadInt ();  		int stackTraceIndex = ReadInt ();  		stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  		if (c != -1) {  			if (readLogResult.callstackHistogram != null) {  				readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  			}  			List<string> prev;  			if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  				foreach (string assemblyName in prev) {  					assemblies [assemblyName] = stackTraceIndex;  				}  				prev.Clear ();  			}  		}  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'E':  	case 'e': {  		c = ReadChar ();  		extendedRootInfoSeen = true;  		thisIsR = true;  		if (pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		if (!previousWasR) {  			heapDumpEventList.AddEvent (lastTickIndex' null);  			if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  				readLogResult.objectGraph.BuildTypeGraph ();  				readLogResult.objectGraph.Neuter ();  			}  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  				for (int i = 0; i < h.Length; i++)  					readLogResult.heapDumpHistograms [i] = h [i];  				readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  			}  			readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  		}  		ulong objectID = ReadULong ();  		GcRootKind rootKind = (GcRootKind)ReadInt ();  		GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  		ulong rootID = ReadULong ();  		ObjectGraph objectGraph = readLogResult.objectGraph;  		if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  			string rootName;  			switch (rootKind) {  			case GcRootKind.Stack:  				rootName = "Stack";  				break;  			case GcRootKind.Finalizer:  				rootName = "Finalizer";  				break;  			case GcRootKind.Handle:  				rootName = "Handle";  				break;  			default:  				rootName = "Other";  				break;  			}  			if ((rootFlags & GcRootFlags.Pinning) != 0)  				rootName += "' Pinning";  			if ((rootFlags & GcRootFlags.WeakRef) != 0)  				rootName += "' WeakRef";  			if ((rootFlags & GcRootFlags.Interior) != 0)  				rootName += "' Interior";  			if ((rootFlags & GcRootFlags.Refcounted) != 0)  				rootName += "' RefCounted";  			int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  			ulongStack [0] = objectID;  			ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  			objectGraph.AddRootObject (rootObject' rootID);  		}  		break;  	}  	case 'R':  	case 'r': {  		c = ReadChar ();  		thisIsR = true;  		if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  			}  			break;  		}  		if (!previousWasR) {  			heapDumpEventList.AddEvent (lastTickIndex' null);  			if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  				readLogResult.objectGraph.BuildTypeGraph ();  				readLogResult.objectGraph.Neuter ();  			}  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  				for (int i = 0; i < h.Length; i++)  					readLogResult.heapDumpHistograms [i] = h [i];  				readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  			}  			readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  		}  		stackPtr = 0;  		ulong objectID;  		while ((objectID = ReadULong ()) != ulong.MaxValue) {  			if (objectID > 0) {  				ulongStack [stackPtr] = objectID;  				stackPtr++;  				if (stackPtr >= ulongStack.Length)  					ulongStack = GrowULongVector (ulongStack);  			}  		}  		if (c != -1) {  			if (readLogResult.objectGraph != null)  				readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  		}  		break;  	}  	case 'O':  	case 'o': {  		c = ReadChar ();  		if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		ulong objectId = ReadULong ();  		int typeIndex = ReadInt ();  		uint size = ReadUInt ();  		stackPtr = 0;  		ulong objectID;  		while ((objectID = ReadULong ()) != ulong.MaxValue) {  			if (objectID > 0) {  				ulongStack [stackPtr] = objectID;  				stackPtr++;  				if (stackPtr >= ulongStack.Length)  					ulongStack = GrowULongVector (ulongStack);  			}  		}  		if (c != -1) {  			ObjectGraph objectGraph = readLogResult.objectGraph;  			objectGraph.GetOrCreateGcType (typeIndex);  			int typeSizeStackTraceId = -1;  			int allocTickIndex = 0;  			// try to find the allocation stack trace and allocation time  			// from the live object table  			if (readLogResult.liveObjectTable != null) {  				LiveObjectTable.LiveObject liveObject;  				readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  				if (liveObject.id == objectId) {  					int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  					int typeIndexFromLiveObject = stackTrace [0];  					if (typeIndexFromLiveObject == typeIndex) {  						typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  						allocTickIndex = liveObject.allocTickIndex;  						Histogram[] h = readLogResult.heapDumpHistograms;  						if (h != null)  							h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  					}  				}  			}  			if (typeSizeStackTraceId == -1)  				typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  			ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  			gcObject.AllocTickIndex = allocTickIndex;  		}  		break;  	}  	case 'M':  	case 'm': {  		c = ReadChar ();  		int modIndex = ReadInt ();  		sb.Length = 0;  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		if (c != -1) {  			string lineString = sb.ToString ();  			int addrPos = lineString.LastIndexOf (" 0x");  			if (addrPos <= 0)  				addrPos = lineString.Length;  			int backSlashPos = lineString.LastIndexOf (@"\");  			if (backSlashPos <= 0)  				backSlashPos = -1;  			string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  			string fullName = lineString.Substring (0' addrPos);  			EnsureStringCapacity (modIndex' ref modBasicName);  			modBasicName [modIndex] = basicName;  			EnsureStringCapacity (modIndex' ref modFullName);  			modFullName [modIndex] = fullName;  		}  		break;  	}  	case 'U':  	case 'u': {  		c = ReadChar ();  		ulong oldId = ReadULong ();  		ulong newId = ReadULong ();  		uint length = ReadUInt ();  		Histogram reloHist = null;  		if (pos >= startFileOffset && pos < endFileOffset)  			reloHist = readLogResult.relocatedHistogram;  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  		break;  	}  	case 'V':  	case 'v': {  		c = ReadChar ();  		ulong startId = ReadULong ();  		uint length = ReadUInt ();  		Histogram reloHist = null;  		if (pos >= startFileOffset && pos < endFileOffset)  			reloHist = readLogResult.relocatedHistogram;  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  		break;  	}  	case 'B':  	case 'b':  		c = ReadChar ();  		int startGC = ReadInt ();  		int induced = ReadInt ();  		int condemnedGeneration = ReadInt ();  		if (startGC != 0)  			newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  		if (newGcEvent) {  			if (startGC != 0) {  				if (induced != 0) {  					for (int gen = 0; gen <= condemnedGeneration; gen++)  						inducedGcCount [gen]++;  				}  			}  			else {  				int condemnedLimit = condemnedGeneration;  				if (condemnedLimit == 2)  					condemnedLimit = 3;  				for (int gen = 0; gen <= condemnedLimit; gen++) {  					cumulativeGenerationSize [gen] += generationSize [gen];  					gcCount [gen]++;  				}  			}  		}  		for (int gen = 0; gen <= 3; gen++)  			generationSize [gen] = 0;  		while (c >= ' ') {  			ulong rangeStart = ReadULong ();  			ulong rangeLength = ReadULong ();  			ulong rangeLengthReserved = ReadULong ();  			int rangeGeneration = ReadInt ();  			if (c == -1 || rangeGeneration < 0)  				break;  			if (readLogResult.liveObjectTable != null) {  				if (startGC != 0) {  					if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  						readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  				}  				else {  					readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  				}  			}  			generationSize [rangeGeneration] += rangeLength;  		}  		if (startGC == 0 && readLogResult.liveObjectTable != null) {  			readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  		}  		break;  	case 'L':  	case 'l': {  		c = ReadChar ();  		int isCritical = ReadInt ();  		ulong objectId = ReadULong ();  		if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  			// try to find the allocation stack trace and allocation time  			// from the live object table  			LiveObjectTable.LiveObject liveObject;  			readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  			if (liveObject.id == objectId) {  				if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  					readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  				if (readLogResult.finalizerHistogram != null)  					readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  			}  		}  		break;  	}  	case 'I':  	case 'i':  		c = ReadChar ();  		int tickCount = ReadInt ();  		if (c != -1) {  			lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  			if (maxTickIndex < lastTickIndex)  				maxTickIndex = lastTickIndex;  		}  		break;  	case 'G':  	case 'g':  		c = ReadChar ();  		int gcGen0Count = ReadInt ();  		int gcGen1Count = ReadInt ();  		int gcGen2Count = ReadInt ();  		// if the newer 'b' lines occur' disregard the 'g' lines.  		if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  			if (c == -1 || gcGen0Count < 0)  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  			else  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  		}  		break;  	case 'N':  	case 'n': {  		c = ReadChar ();  		int funcIndex;  		int stackTraceIndex = ReadInt ();  		stackPtr = 0;  		int flag = ReadInt ();  		int matched = flag / 4;  		int hadTypeId = (flag & 2);  		bool hasTypeId = (flag & 1) == 1;  		if (hasTypeId) {  			intStack [stackPtr++] = ReadInt ();  			intStack [stackPtr++] = ReadInt ();  		}  		if (matched > 0 && c != -1) {  			/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  			otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  			int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  			if (matched > stacktrace.Length - hadTypeId)  				matched = stacktrace.Length - hadTypeId;  			for (int i = 0; i < matched; i++) {  				int funcId = stacktrace [i + hadTypeId];  				//Debug.Assert(funcId < funcName.Length);  				if (funcName [funcId] == null)  					funcName [funcId] = String.Empty;  				intStack [stackPtr++] = funcId;  				if (stackPtr >= intStack.Length) {  					intStack = GrowIntVector (intStack);  				}  			}  		}  		while ((funcIndex = ReadInt ()) >= 0) {  			intStack [stackPtr] = funcIndex;  			stackPtr++;  			if (stackPtr >= intStack.Length)  				intStack = GrowIntVector (intStack);  		}  		if (c != -1) {  			stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  		}  		break;  	}  	case 'y':  	case 'Y': {  		c = ReadChar ();  		int threadid = ReadInt ();  		if (!assembliesJustLoaded.ContainsKey (threadid)) {  			assembliesJustLoaded [threadid] = new List<string> ();  		}  		/* int assemblyId = */ReadInt ();  		while (c == ' ' || c == '\t') {  			c = ReadChar ();  		}  		sb.Length = 0;  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		string assemblyName = sb.ToString ();  		assembliesJustLoaded [threadid].Add (assemblyName);  		break;  	}  	case 'S':  	case 's': {  		c = ReadChar ();  		int stackTraceIndex = ReadInt ();  		int funcIndex;  		stackPtr = 0;  		while ((funcIndex = ReadInt ()) >= 0) {  			intStack [stackPtr] = funcIndex;  			stackPtr++;  			if (stackPtr >= intStack.Length)  				intStack = GrowIntVector (intStack);  		}  		if (c != -1) {  			stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  		}  		break;  	}  	case 'Z':  	case 'z': {  		sb.Length = 0;  		c = ReadChar ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		if (c != -1) {  			lastTickIndex = AddTimePos (lastLineStartPos);  			if (maxTickIndex < lastTickIndex)  				maxTickIndex = lastTickIndex;  			commentEventList.AddEvent (lastTickIndex' sb.ToString ());  		}  		break;  	}  	case 'H':  	case 'h': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong handleId = ReadULong ();  		ulong initialObjectId = ReadULong ();  		int stacktraceId = ReadInt ();  		if (c != -1) {  			if (readLogResult.handleHash != null)  				readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  			if (readLogResult.createdHandlesHistogram != null)  				readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  		}  		break;  	}  	case 'J':  	case 'j': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong handleId = ReadULong ();  		int stacktraceId = ReadInt ();  		if (c != -1) {  			if (readLogResult.handleHash != null) {  				if (readLogResult.handleHash.ContainsKey (handleId))  					readLogResult.handleHash.Remove (handleId);  				else {  					//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  					//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  					//for (int i = stacktrace.Length; --i >= 0; )  					//{  					//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  					//}  				}  			}  			if (readLogResult.destroyedHandlesHistogram != null)  				readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  		}  		break;  	}  	default: {  		// just ignore the unknown  		while (c != '\n' && c != '\r') {  			c = ReadChar ();  		}  		break;  	}  	}  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	if (c == '\r')  		c = ReadChar ();  	if (c == '\n') {  		c = ReadChar ();  		line++;  	}  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: while (c != -1) {  	if (pos > endFileOffset)  		break;  	if ((line % 1024) == 0) {  		int currentProgress = (int)(pos / 1024);  		if (currentProgress <= maxProgress) {  		}  	}  	lastLineStartPos = pos - 1;  	previousWasR = thisIsR;  	thisIsR = false;  	switch (c) {  	case -1:  		break;  	case 'F':  	case 'f': {  		c = ReadChar ();  		int funcIndex = ReadInt ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string name = ReadString (sb' ' '' false' 255);  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string signature = ReadString (sb' '\r'' true' 1023);  		ulong addr = ReadULong ();  		uint size = ReadUInt ();  		int modIndex = ReadInt ();  		int stackIndex = ReadInt ();  		if (c != -1) {  			EnsureStringCapacity (funcIndex' ref funcName);  			funcName [funcIndex] = name;  			EnsureStringCapacity (funcIndex' ref funcSignature);  			funcSignature [funcIndex] = signature;  			EnsureIntCapacity (funcIndex' ref funcModule);  			funcModule [funcIndex] = modIndex;  			string nameAndSignature = name;  			if (signature != null)  				nameAndSignature = name + ' ' + signature;  			if (stackIndex >= 0 && readLogResult.functionList != null) {  				funcSignatureIdHash [nameAndSignature] = funcIndex;  				readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  			}  		}  		break;  	}  	case 'T':  	case 't': {  		c = ReadChar ();  		int typeIndex = ReadInt ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		if (c != -1 && Char.IsDigit ((char)c)) {  			if (ReadInt () != 0) {  				finalizableTypes [typeIndex] = true;  			}  		}  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string typeName = ReadString (sb' '\r'' false' 1023);  		if (c != -1) {  			AddTypeName (typeIndex' typeName);  		}  		break;  	}  	// 'A' with thread identifier  	case '!': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong id = ReadULong ();  		int typeSizeStackTraceIndex = ReadInt ();  		typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  		if (c != -1) {  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  				// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  				readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  			}  			List<string> prev;  			if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  				foreach (string assemblyName in prev) {  					assemblies [assemblyName] = -typeSizeStackTraceIndex;  				}  				prev.Clear ();  			}  		}  		readLogResult.hadAllocInfo = true;  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'A':  	case 'a': {  		c = ReadChar ();  		ulong id = ReadULong ();  		int typeSizeStackTraceIndex = ReadInt ();  		typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  		if (c != -1) {  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  				// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  				readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  			}  		}  		readLogResult.hadAllocInfo = true;  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'C':  	case 'c': {  		c = ReadChar ();  		if (pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		int threadIndex = ReadInt ();  		int stackTraceIndex = ReadInt ();  		stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  		if (c != -1) {  			if (readLogResult.callstackHistogram != null) {  				readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  			}  			List<string> prev;  			if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  				foreach (string assemblyName in prev) {  					assemblies [assemblyName] = stackTraceIndex;  				}  				prev.Clear ();  			}  		}  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'E':  	case 'e': {  		c = ReadChar ();  		extendedRootInfoSeen = true;  		thisIsR = true;  		if (pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		if (!previousWasR) {  			heapDumpEventList.AddEvent (lastTickIndex' null);  			if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  				readLogResult.objectGraph.BuildTypeGraph ();  				readLogResult.objectGraph.Neuter ();  			}  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  				for (int i = 0; i < h.Length; i++)  					readLogResult.heapDumpHistograms [i] = h [i];  				readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  			}  			readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  		}  		ulong objectID = ReadULong ();  		GcRootKind rootKind = (GcRootKind)ReadInt ();  		GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  		ulong rootID = ReadULong ();  		ObjectGraph objectGraph = readLogResult.objectGraph;  		if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  			string rootName;  			switch (rootKind) {  			case GcRootKind.Stack:  				rootName = "Stack";  				break;  			case GcRootKind.Finalizer:  				rootName = "Finalizer";  				break;  			case GcRootKind.Handle:  				rootName = "Handle";  				break;  			default:  				rootName = "Other";  				break;  			}  			if ((rootFlags & GcRootFlags.Pinning) != 0)  				rootName += "' Pinning";  			if ((rootFlags & GcRootFlags.WeakRef) != 0)  				rootName += "' WeakRef";  			if ((rootFlags & GcRootFlags.Interior) != 0)  				rootName += "' Interior";  			if ((rootFlags & GcRootFlags.Refcounted) != 0)  				rootName += "' RefCounted";  			int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  			ulongStack [0] = objectID;  			ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  			objectGraph.AddRootObject (rootObject' rootID);  		}  		break;  	}  	case 'R':  	case 'r': {  		c = ReadChar ();  		thisIsR = true;  		if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  			}  			break;  		}  		if (!previousWasR) {  			heapDumpEventList.AddEvent (lastTickIndex' null);  			if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  				readLogResult.objectGraph.BuildTypeGraph ();  				readLogResult.objectGraph.Neuter ();  			}  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  				for (int i = 0; i < h.Length; i++)  					readLogResult.heapDumpHistograms [i] = h [i];  				readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  			}  			readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  		}  		stackPtr = 0;  		ulong objectID;  		while ((objectID = ReadULong ()) != ulong.MaxValue) {  			if (objectID > 0) {  				ulongStack [stackPtr] = objectID;  				stackPtr++;  				if (stackPtr >= ulongStack.Length)  					ulongStack = GrowULongVector (ulongStack);  			}  		}  		if (c != -1) {  			if (readLogResult.objectGraph != null)  				readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  		}  		break;  	}  	case 'O':  	case 'o': {  		c = ReadChar ();  		if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		ulong objectId = ReadULong ();  		int typeIndex = ReadInt ();  		uint size = ReadUInt ();  		stackPtr = 0;  		ulong objectID;  		while ((objectID = ReadULong ()) != ulong.MaxValue) {  			if (objectID > 0) {  				ulongStack [stackPtr] = objectID;  				stackPtr++;  				if (stackPtr >= ulongStack.Length)  					ulongStack = GrowULongVector (ulongStack);  			}  		}  		if (c != -1) {  			ObjectGraph objectGraph = readLogResult.objectGraph;  			objectGraph.GetOrCreateGcType (typeIndex);  			int typeSizeStackTraceId = -1;  			int allocTickIndex = 0;  			// try to find the allocation stack trace and allocation time  			// from the live object table  			if (readLogResult.liveObjectTable != null) {  				LiveObjectTable.LiveObject liveObject;  				readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  				if (liveObject.id == objectId) {  					int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  					int typeIndexFromLiveObject = stackTrace [0];  					if (typeIndexFromLiveObject == typeIndex) {  						typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  						allocTickIndex = liveObject.allocTickIndex;  						Histogram[] h = readLogResult.heapDumpHistograms;  						if (h != null)  							h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  					}  				}  			}  			if (typeSizeStackTraceId == -1)  				typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  			ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  			gcObject.AllocTickIndex = allocTickIndex;  		}  		break;  	}  	case 'M':  	case 'm': {  		c = ReadChar ();  		int modIndex = ReadInt ();  		sb.Length = 0;  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		if (c != -1) {  			string lineString = sb.ToString ();  			int addrPos = lineString.LastIndexOf (" 0x");  			if (addrPos <= 0)  				addrPos = lineString.Length;  			int backSlashPos = lineString.LastIndexOf (@"\");  			if (backSlashPos <= 0)  				backSlashPos = -1;  			string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  			string fullName = lineString.Substring (0' addrPos);  			EnsureStringCapacity (modIndex' ref modBasicName);  			modBasicName [modIndex] = basicName;  			EnsureStringCapacity (modIndex' ref modFullName);  			modFullName [modIndex] = fullName;  		}  		break;  	}  	case 'U':  	case 'u': {  		c = ReadChar ();  		ulong oldId = ReadULong ();  		ulong newId = ReadULong ();  		uint length = ReadUInt ();  		Histogram reloHist = null;  		if (pos >= startFileOffset && pos < endFileOffset)  			reloHist = readLogResult.relocatedHistogram;  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  		break;  	}  	case 'V':  	case 'v': {  		c = ReadChar ();  		ulong startId = ReadULong ();  		uint length = ReadUInt ();  		Histogram reloHist = null;  		if (pos >= startFileOffset && pos < endFileOffset)  			reloHist = readLogResult.relocatedHistogram;  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  		break;  	}  	case 'B':  	case 'b':  		c = ReadChar ();  		int startGC = ReadInt ();  		int induced = ReadInt ();  		int condemnedGeneration = ReadInt ();  		if (startGC != 0)  			newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  		if (newGcEvent) {  			if (startGC != 0) {  				if (induced != 0) {  					for (int gen = 0; gen <= condemnedGeneration; gen++)  						inducedGcCount [gen]++;  				}  			}  			else {  				int condemnedLimit = condemnedGeneration;  				if (condemnedLimit == 2)  					condemnedLimit = 3;  				for (int gen = 0; gen <= condemnedLimit; gen++) {  					cumulativeGenerationSize [gen] += generationSize [gen];  					gcCount [gen]++;  				}  			}  		}  		for (int gen = 0; gen <= 3; gen++)  			generationSize [gen] = 0;  		while (c >= ' ') {  			ulong rangeStart = ReadULong ();  			ulong rangeLength = ReadULong ();  			ulong rangeLengthReserved = ReadULong ();  			int rangeGeneration = ReadInt ();  			if (c == -1 || rangeGeneration < 0)  				break;  			if (readLogResult.liveObjectTable != null) {  				if (startGC != 0) {  					if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  						readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  				}  				else {  					readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  				}  			}  			generationSize [rangeGeneration] += rangeLength;  		}  		if (startGC == 0 && readLogResult.liveObjectTable != null) {  			readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  		}  		break;  	case 'L':  	case 'l': {  		c = ReadChar ();  		int isCritical = ReadInt ();  		ulong objectId = ReadULong ();  		if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  			// try to find the allocation stack trace and allocation time  			// from the live object table  			LiveObjectTable.LiveObject liveObject;  			readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  			if (liveObject.id == objectId) {  				if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  					readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  				if (readLogResult.finalizerHistogram != null)  					readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  			}  		}  		break;  	}  	case 'I':  	case 'i':  		c = ReadChar ();  		int tickCount = ReadInt ();  		if (c != -1) {  			lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  			if (maxTickIndex < lastTickIndex)  				maxTickIndex = lastTickIndex;  		}  		break;  	case 'G':  	case 'g':  		c = ReadChar ();  		int gcGen0Count = ReadInt ();  		int gcGen1Count = ReadInt ();  		int gcGen2Count = ReadInt ();  		// if the newer 'b' lines occur' disregard the 'g' lines.  		if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  			if (c == -1 || gcGen0Count < 0)  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  			else  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  		}  		break;  	case 'N':  	case 'n': {  		c = ReadChar ();  		int funcIndex;  		int stackTraceIndex = ReadInt ();  		stackPtr = 0;  		int flag = ReadInt ();  		int matched = flag / 4;  		int hadTypeId = (flag & 2);  		bool hasTypeId = (flag & 1) == 1;  		if (hasTypeId) {  			intStack [stackPtr++] = ReadInt ();  			intStack [stackPtr++] = ReadInt ();  		}  		if (matched > 0 && c != -1) {  			/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  			otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  			int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  			if (matched > stacktrace.Length - hadTypeId)  				matched = stacktrace.Length - hadTypeId;  			for (int i = 0; i < matched; i++) {  				int funcId = stacktrace [i + hadTypeId];  				//Debug.Assert(funcId < funcName.Length);  				if (funcName [funcId] == null)  					funcName [funcId] = String.Empty;  				intStack [stackPtr++] = funcId;  				if (stackPtr >= intStack.Length) {  					intStack = GrowIntVector (intStack);  				}  			}  		}  		while ((funcIndex = ReadInt ()) >= 0) {  			intStack [stackPtr] = funcIndex;  			stackPtr++;  			if (stackPtr >= intStack.Length)  				intStack = GrowIntVector (intStack);  		}  		if (c != -1) {  			stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  		}  		break;  	}  	case 'y':  	case 'Y': {  		c = ReadChar ();  		int threadid = ReadInt ();  		if (!assembliesJustLoaded.ContainsKey (threadid)) {  			assembliesJustLoaded [threadid] = new List<string> ();  		}  		/* int assemblyId = */ReadInt ();  		while (c == ' ' || c == '\t') {  			c = ReadChar ();  		}  		sb.Length = 0;  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		string assemblyName = sb.ToString ();  		assembliesJustLoaded [threadid].Add (assemblyName);  		break;  	}  	case 'S':  	case 's': {  		c = ReadChar ();  		int stackTraceIndex = ReadInt ();  		int funcIndex;  		stackPtr = 0;  		while ((funcIndex = ReadInt ()) >= 0) {  			intStack [stackPtr] = funcIndex;  			stackPtr++;  			if (stackPtr >= intStack.Length)  				intStack = GrowIntVector (intStack);  		}  		if (c != -1) {  			stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  		}  		break;  	}  	case 'Z':  	case 'z': {  		sb.Length = 0;  		c = ReadChar ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		if (c != -1) {  			lastTickIndex = AddTimePos (lastLineStartPos);  			if (maxTickIndex < lastTickIndex)  				maxTickIndex = lastTickIndex;  			commentEventList.AddEvent (lastTickIndex' sb.ToString ());  		}  		break;  	}  	case 'H':  	case 'h': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong handleId = ReadULong ();  		ulong initialObjectId = ReadULong ();  		int stacktraceId = ReadInt ();  		if (c != -1) {  			if (readLogResult.handleHash != null)  				readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  			if (readLogResult.createdHandlesHistogram != null)  				readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  		}  		break;  	}  	case 'J':  	case 'j': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong handleId = ReadULong ();  		int stacktraceId = ReadInt ();  		if (c != -1) {  			if (readLogResult.handleHash != null) {  				if (readLogResult.handleHash.ContainsKey (handleId))  					readLogResult.handleHash.Remove (handleId);  				else {  					//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  					//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  					//for (int i = stacktrace.Length; --i >= 0; )  					//{  					//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  					//}  				}  			}  			if (readLogResult.destroyedHandlesHistogram != null)  				readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  		}  		break;  	}  	default: {  		// just ignore the unknown  		while (c != '\n' && c != '\r') {  			c = ReadChar ();  		}  		break;  	}  	}  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	if (c == '\r')  		c = ReadChar ();  	if (c == '\n') {  		c = ReadChar ();  		line++;  	}  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: while (c != -1) {  	if (pos > endFileOffset)  		break;  	if ((line % 1024) == 0) {  		int currentProgress = (int)(pos / 1024);  		if (currentProgress <= maxProgress) {  		}  	}  	lastLineStartPos = pos - 1;  	previousWasR = thisIsR;  	thisIsR = false;  	switch (c) {  	case -1:  		break;  	case 'F':  	case 'f': {  		c = ReadChar ();  		int funcIndex = ReadInt ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string name = ReadString (sb' ' '' false' 255);  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string signature = ReadString (sb' '\r'' true' 1023);  		ulong addr = ReadULong ();  		uint size = ReadUInt ();  		int modIndex = ReadInt ();  		int stackIndex = ReadInt ();  		if (c != -1) {  			EnsureStringCapacity (funcIndex' ref funcName);  			funcName [funcIndex] = name;  			EnsureStringCapacity (funcIndex' ref funcSignature);  			funcSignature [funcIndex] = signature;  			EnsureIntCapacity (funcIndex' ref funcModule);  			funcModule [funcIndex] = modIndex;  			string nameAndSignature = name;  			if (signature != null)  				nameAndSignature = name + ' ' + signature;  			if (stackIndex >= 0 && readLogResult.functionList != null) {  				funcSignatureIdHash [nameAndSignature] = funcIndex;  				readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  			}  		}  		break;  	}  	case 'T':  	case 't': {  		c = ReadChar ();  		int typeIndex = ReadInt ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		if (c != -1 && Char.IsDigit ((char)c)) {  			if (ReadInt () != 0) {  				finalizableTypes [typeIndex] = true;  			}  		}  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string typeName = ReadString (sb' '\r'' false' 1023);  		if (c != -1) {  			AddTypeName (typeIndex' typeName);  		}  		break;  	}  	// 'A' with thread identifier  	case '!': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong id = ReadULong ();  		int typeSizeStackTraceIndex = ReadInt ();  		typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  		if (c != -1) {  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  				// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  				readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  			}  			List<string> prev;  			if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  				foreach (string assemblyName in prev) {  					assemblies [assemblyName] = -typeSizeStackTraceIndex;  				}  				prev.Clear ();  			}  		}  		readLogResult.hadAllocInfo = true;  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'A':  	case 'a': {  		c = ReadChar ();  		ulong id = ReadULong ();  		int typeSizeStackTraceIndex = ReadInt ();  		typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  		if (c != -1) {  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  				// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  				readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  			}  		}  		readLogResult.hadAllocInfo = true;  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'C':  	case 'c': {  		c = ReadChar ();  		if (pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		int threadIndex = ReadInt ();  		int stackTraceIndex = ReadInt ();  		stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  		if (c != -1) {  			if (readLogResult.callstackHistogram != null) {  				readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  			}  			List<string> prev;  			if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  				foreach (string assemblyName in prev) {  					assemblies [assemblyName] = stackTraceIndex;  				}  				prev.Clear ();  			}  		}  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'E':  	case 'e': {  		c = ReadChar ();  		extendedRootInfoSeen = true;  		thisIsR = true;  		if (pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		if (!previousWasR) {  			heapDumpEventList.AddEvent (lastTickIndex' null);  			if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  				readLogResult.objectGraph.BuildTypeGraph ();  				readLogResult.objectGraph.Neuter ();  			}  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  				for (int i = 0; i < h.Length; i++)  					readLogResult.heapDumpHistograms [i] = h [i];  				readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  			}  			readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  		}  		ulong objectID = ReadULong ();  		GcRootKind rootKind = (GcRootKind)ReadInt ();  		GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  		ulong rootID = ReadULong ();  		ObjectGraph objectGraph = readLogResult.objectGraph;  		if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  			string rootName;  			switch (rootKind) {  			case GcRootKind.Stack:  				rootName = "Stack";  				break;  			case GcRootKind.Finalizer:  				rootName = "Finalizer";  				break;  			case GcRootKind.Handle:  				rootName = "Handle";  				break;  			default:  				rootName = "Other";  				break;  			}  			if ((rootFlags & GcRootFlags.Pinning) != 0)  				rootName += "' Pinning";  			if ((rootFlags & GcRootFlags.WeakRef) != 0)  				rootName += "' WeakRef";  			if ((rootFlags & GcRootFlags.Interior) != 0)  				rootName += "' Interior";  			if ((rootFlags & GcRootFlags.Refcounted) != 0)  				rootName += "' RefCounted";  			int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  			ulongStack [0] = objectID;  			ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  			objectGraph.AddRootObject (rootObject' rootID);  		}  		break;  	}  	case 'R':  	case 'r': {  		c = ReadChar ();  		thisIsR = true;  		if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  			}  			break;  		}  		if (!previousWasR) {  			heapDumpEventList.AddEvent (lastTickIndex' null);  			if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  				readLogResult.objectGraph.BuildTypeGraph ();  				readLogResult.objectGraph.Neuter ();  			}  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  				for (int i = 0; i < h.Length; i++)  					readLogResult.heapDumpHistograms [i] = h [i];  				readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  			}  			readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  		}  		stackPtr = 0;  		ulong objectID;  		while ((objectID = ReadULong ()) != ulong.MaxValue) {  			if (objectID > 0) {  				ulongStack [stackPtr] = objectID;  				stackPtr++;  				if (stackPtr >= ulongStack.Length)  					ulongStack = GrowULongVector (ulongStack);  			}  		}  		if (c != -1) {  			if (readLogResult.objectGraph != null)  				readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  		}  		break;  	}  	case 'O':  	case 'o': {  		c = ReadChar ();  		if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		ulong objectId = ReadULong ();  		int typeIndex = ReadInt ();  		uint size = ReadUInt ();  		stackPtr = 0;  		ulong objectID;  		while ((objectID = ReadULong ()) != ulong.MaxValue) {  			if (objectID > 0) {  				ulongStack [stackPtr] = objectID;  				stackPtr++;  				if (stackPtr >= ulongStack.Length)  					ulongStack = GrowULongVector (ulongStack);  			}  		}  		if (c != -1) {  			ObjectGraph objectGraph = readLogResult.objectGraph;  			objectGraph.GetOrCreateGcType (typeIndex);  			int typeSizeStackTraceId = -1;  			int allocTickIndex = 0;  			// try to find the allocation stack trace and allocation time  			// from the live object table  			if (readLogResult.liveObjectTable != null) {  				LiveObjectTable.LiveObject liveObject;  				readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  				if (liveObject.id == objectId) {  					int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  					int typeIndexFromLiveObject = stackTrace [0];  					if (typeIndexFromLiveObject == typeIndex) {  						typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  						allocTickIndex = liveObject.allocTickIndex;  						Histogram[] h = readLogResult.heapDumpHistograms;  						if (h != null)  							h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  					}  				}  			}  			if (typeSizeStackTraceId == -1)  				typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  			ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  			gcObject.AllocTickIndex = allocTickIndex;  		}  		break;  	}  	case 'M':  	case 'm': {  		c = ReadChar ();  		int modIndex = ReadInt ();  		sb.Length = 0;  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		if (c != -1) {  			string lineString = sb.ToString ();  			int addrPos = lineString.LastIndexOf (" 0x");  			if (addrPos <= 0)  				addrPos = lineString.Length;  			int backSlashPos = lineString.LastIndexOf (@"\");  			if (backSlashPos <= 0)  				backSlashPos = -1;  			string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  			string fullName = lineString.Substring (0' addrPos);  			EnsureStringCapacity (modIndex' ref modBasicName);  			modBasicName [modIndex] = basicName;  			EnsureStringCapacity (modIndex' ref modFullName);  			modFullName [modIndex] = fullName;  		}  		break;  	}  	case 'U':  	case 'u': {  		c = ReadChar ();  		ulong oldId = ReadULong ();  		ulong newId = ReadULong ();  		uint length = ReadUInt ();  		Histogram reloHist = null;  		if (pos >= startFileOffset && pos < endFileOffset)  			reloHist = readLogResult.relocatedHistogram;  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  		break;  	}  	case 'V':  	case 'v': {  		c = ReadChar ();  		ulong startId = ReadULong ();  		uint length = ReadUInt ();  		Histogram reloHist = null;  		if (pos >= startFileOffset && pos < endFileOffset)  			reloHist = readLogResult.relocatedHistogram;  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  		break;  	}  	case 'B':  	case 'b':  		c = ReadChar ();  		int startGC = ReadInt ();  		int induced = ReadInt ();  		int condemnedGeneration = ReadInt ();  		if (startGC != 0)  			newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  		if (newGcEvent) {  			if (startGC != 0) {  				if (induced != 0) {  					for (int gen = 0; gen <= condemnedGeneration; gen++)  						inducedGcCount [gen]++;  				}  			}  			else {  				int condemnedLimit = condemnedGeneration;  				if (condemnedLimit == 2)  					condemnedLimit = 3;  				for (int gen = 0; gen <= condemnedLimit; gen++) {  					cumulativeGenerationSize [gen] += generationSize [gen];  					gcCount [gen]++;  				}  			}  		}  		for (int gen = 0; gen <= 3; gen++)  			generationSize [gen] = 0;  		while (c >= ' ') {  			ulong rangeStart = ReadULong ();  			ulong rangeLength = ReadULong ();  			ulong rangeLengthReserved = ReadULong ();  			int rangeGeneration = ReadInt ();  			if (c == -1 || rangeGeneration < 0)  				break;  			if (readLogResult.liveObjectTable != null) {  				if (startGC != 0) {  					if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  						readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  				}  				else {  					readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  				}  			}  			generationSize [rangeGeneration] += rangeLength;  		}  		if (startGC == 0 && readLogResult.liveObjectTable != null) {  			readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  		}  		break;  	case 'L':  	case 'l': {  		c = ReadChar ();  		int isCritical = ReadInt ();  		ulong objectId = ReadULong ();  		if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  			// try to find the allocation stack trace and allocation time  			// from the live object table  			LiveObjectTable.LiveObject liveObject;  			readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  			if (liveObject.id == objectId) {  				if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  					readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  				if (readLogResult.finalizerHistogram != null)  					readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  			}  		}  		break;  	}  	case 'I':  	case 'i':  		c = ReadChar ();  		int tickCount = ReadInt ();  		if (c != -1) {  			lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  			if (maxTickIndex < lastTickIndex)  				maxTickIndex = lastTickIndex;  		}  		break;  	case 'G':  	case 'g':  		c = ReadChar ();  		int gcGen0Count = ReadInt ();  		int gcGen1Count = ReadInt ();  		int gcGen2Count = ReadInt ();  		// if the newer 'b' lines occur' disregard the 'g' lines.  		if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  			if (c == -1 || gcGen0Count < 0)  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  			else  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  		}  		break;  	case 'N':  	case 'n': {  		c = ReadChar ();  		int funcIndex;  		int stackTraceIndex = ReadInt ();  		stackPtr = 0;  		int flag = ReadInt ();  		int matched = flag / 4;  		int hadTypeId = (flag & 2);  		bool hasTypeId = (flag & 1) == 1;  		if (hasTypeId) {  			intStack [stackPtr++] = ReadInt ();  			intStack [stackPtr++] = ReadInt ();  		}  		if (matched > 0 && c != -1) {  			/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  			otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  			int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  			if (matched > stacktrace.Length - hadTypeId)  				matched = stacktrace.Length - hadTypeId;  			for (int i = 0; i < matched; i++) {  				int funcId = stacktrace [i + hadTypeId];  				//Debug.Assert(funcId < funcName.Length);  				if (funcName [funcId] == null)  					funcName [funcId] = String.Empty;  				intStack [stackPtr++] = funcId;  				if (stackPtr >= intStack.Length) {  					intStack = GrowIntVector (intStack);  				}  			}  		}  		while ((funcIndex = ReadInt ()) >= 0) {  			intStack [stackPtr] = funcIndex;  			stackPtr++;  			if (stackPtr >= intStack.Length)  				intStack = GrowIntVector (intStack);  		}  		if (c != -1) {  			stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  		}  		break;  	}  	case 'y':  	case 'Y': {  		c = ReadChar ();  		int threadid = ReadInt ();  		if (!assembliesJustLoaded.ContainsKey (threadid)) {  			assembliesJustLoaded [threadid] = new List<string> ();  		}  		/* int assemblyId = */ReadInt ();  		while (c == ' ' || c == '\t') {  			c = ReadChar ();  		}  		sb.Length = 0;  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		string assemblyName = sb.ToString ();  		assembliesJustLoaded [threadid].Add (assemblyName);  		break;  	}  	case 'S':  	case 's': {  		c = ReadChar ();  		int stackTraceIndex = ReadInt ();  		int funcIndex;  		stackPtr = 0;  		while ((funcIndex = ReadInt ()) >= 0) {  			intStack [stackPtr] = funcIndex;  			stackPtr++;  			if (stackPtr >= intStack.Length)  				intStack = GrowIntVector (intStack);  		}  		if (c != -1) {  			stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  		}  		break;  	}  	case 'Z':  	case 'z': {  		sb.Length = 0;  		c = ReadChar ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		if (c != -1) {  			lastTickIndex = AddTimePos (lastLineStartPos);  			if (maxTickIndex < lastTickIndex)  				maxTickIndex = lastTickIndex;  			commentEventList.AddEvent (lastTickIndex' sb.ToString ());  		}  		break;  	}  	case 'H':  	case 'h': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong handleId = ReadULong ();  		ulong initialObjectId = ReadULong ();  		int stacktraceId = ReadInt ();  		if (c != -1) {  			if (readLogResult.handleHash != null)  				readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  			if (readLogResult.createdHandlesHistogram != null)  				readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  		}  		break;  	}  	case 'J':  	case 'j': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong handleId = ReadULong ();  		int stacktraceId = ReadInt ();  		if (c != -1) {  			if (readLogResult.handleHash != null) {  				if (readLogResult.handleHash.ContainsKey (handleId))  					readLogResult.handleHash.Remove (handleId);  				else {  					//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  					//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  					//for (int i = stacktrace.Length; --i >= 0; )  					//{  					//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  					//}  				}  			}  			if (readLogResult.destroyedHandlesHistogram != null)  				readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  		}  		break;  	}  	default: {  		// just ignore the unknown  		while (c != '\n' && c != '\r') {  			c = ReadChar ();  		}  		break;  	}  	}  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	if (c == '\r')  		c = ReadChar ();  	if (c == '\n') {  		c = ReadChar ();  		line++;  	}  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: while (c != -1) {  	if (pos > endFileOffset)  		break;  	if ((line % 1024) == 0) {  		int currentProgress = (int)(pos / 1024);  		if (currentProgress <= maxProgress) {  		}  	}  	lastLineStartPos = pos - 1;  	previousWasR = thisIsR;  	thisIsR = false;  	switch (c) {  	case -1:  		break;  	case 'F':  	case 'f': {  		c = ReadChar ();  		int funcIndex = ReadInt ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string name = ReadString (sb' ' '' false' 255);  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string signature = ReadString (sb' '\r'' true' 1023);  		ulong addr = ReadULong ();  		uint size = ReadUInt ();  		int modIndex = ReadInt ();  		int stackIndex = ReadInt ();  		if (c != -1) {  			EnsureStringCapacity (funcIndex' ref funcName);  			funcName [funcIndex] = name;  			EnsureStringCapacity (funcIndex' ref funcSignature);  			funcSignature [funcIndex] = signature;  			EnsureIntCapacity (funcIndex' ref funcModule);  			funcModule [funcIndex] = modIndex;  			string nameAndSignature = name;  			if (signature != null)  				nameAndSignature = name + ' ' + signature;  			if (stackIndex >= 0 && readLogResult.functionList != null) {  				funcSignatureIdHash [nameAndSignature] = funcIndex;  				readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  			}  		}  		break;  	}  	case 'T':  	case 't': {  		c = ReadChar ();  		int typeIndex = ReadInt ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		if (c != -1 && Char.IsDigit ((char)c)) {  			if (ReadInt () != 0) {  				finalizableTypes [typeIndex] = true;  			}  		}  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string typeName = ReadString (sb' '\r'' false' 1023);  		if (c != -1) {  			AddTypeName (typeIndex' typeName);  		}  		break;  	}  	// 'A' with thread identifier  	case '!': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong id = ReadULong ();  		int typeSizeStackTraceIndex = ReadInt ();  		typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  		if (c != -1) {  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  				// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  				readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  			}  			List<string> prev;  			if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  				foreach (string assemblyName in prev) {  					assemblies [assemblyName] = -typeSizeStackTraceIndex;  				}  				prev.Clear ();  			}  		}  		readLogResult.hadAllocInfo = true;  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'A':  	case 'a': {  		c = ReadChar ();  		ulong id = ReadULong ();  		int typeSizeStackTraceIndex = ReadInt ();  		typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  		if (c != -1) {  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  				// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  				readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  			}  		}  		readLogResult.hadAllocInfo = true;  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'C':  	case 'c': {  		c = ReadChar ();  		if (pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		int threadIndex = ReadInt ();  		int stackTraceIndex = ReadInt ();  		stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  		if (c != -1) {  			if (readLogResult.callstackHistogram != null) {  				readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  			}  			List<string> prev;  			if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  				foreach (string assemblyName in prev) {  					assemblies [assemblyName] = stackTraceIndex;  				}  				prev.Clear ();  			}  		}  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'E':  	case 'e': {  		c = ReadChar ();  		extendedRootInfoSeen = true;  		thisIsR = true;  		if (pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		if (!previousWasR) {  			heapDumpEventList.AddEvent (lastTickIndex' null);  			if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  				readLogResult.objectGraph.BuildTypeGraph ();  				readLogResult.objectGraph.Neuter ();  			}  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  				for (int i = 0; i < h.Length; i++)  					readLogResult.heapDumpHistograms [i] = h [i];  				readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  			}  			readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  		}  		ulong objectID = ReadULong ();  		GcRootKind rootKind = (GcRootKind)ReadInt ();  		GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  		ulong rootID = ReadULong ();  		ObjectGraph objectGraph = readLogResult.objectGraph;  		if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  			string rootName;  			switch (rootKind) {  			case GcRootKind.Stack:  				rootName = "Stack";  				break;  			case GcRootKind.Finalizer:  				rootName = "Finalizer";  				break;  			case GcRootKind.Handle:  				rootName = "Handle";  				break;  			default:  				rootName = "Other";  				break;  			}  			if ((rootFlags & GcRootFlags.Pinning) != 0)  				rootName += "' Pinning";  			if ((rootFlags & GcRootFlags.WeakRef) != 0)  				rootName += "' WeakRef";  			if ((rootFlags & GcRootFlags.Interior) != 0)  				rootName += "' Interior";  			if ((rootFlags & GcRootFlags.Refcounted) != 0)  				rootName += "' RefCounted";  			int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  			ulongStack [0] = objectID;  			ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  			objectGraph.AddRootObject (rootObject' rootID);  		}  		break;  	}  	case 'R':  	case 'r': {  		c = ReadChar ();  		thisIsR = true;  		if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  			}  			break;  		}  		if (!previousWasR) {  			heapDumpEventList.AddEvent (lastTickIndex' null);  			if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  				readLogResult.objectGraph.BuildTypeGraph ();  				readLogResult.objectGraph.Neuter ();  			}  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  				for (int i = 0; i < h.Length; i++)  					readLogResult.heapDumpHistograms [i] = h [i];  				readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  			}  			readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  		}  		stackPtr = 0;  		ulong objectID;  		while ((objectID = ReadULong ()) != ulong.MaxValue) {  			if (objectID > 0) {  				ulongStack [stackPtr] = objectID;  				stackPtr++;  				if (stackPtr >= ulongStack.Length)  					ulongStack = GrowULongVector (ulongStack);  			}  		}  		if (c != -1) {  			if (readLogResult.objectGraph != null)  				readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  		}  		break;  	}  	case 'O':  	case 'o': {  		c = ReadChar ();  		if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		ulong objectId = ReadULong ();  		int typeIndex = ReadInt ();  		uint size = ReadUInt ();  		stackPtr = 0;  		ulong objectID;  		while ((objectID = ReadULong ()) != ulong.MaxValue) {  			if (objectID > 0) {  				ulongStack [stackPtr] = objectID;  				stackPtr++;  				if (stackPtr >= ulongStack.Length)  					ulongStack = GrowULongVector (ulongStack);  			}  		}  		if (c != -1) {  			ObjectGraph objectGraph = readLogResult.objectGraph;  			objectGraph.GetOrCreateGcType (typeIndex);  			int typeSizeStackTraceId = -1;  			int allocTickIndex = 0;  			// try to find the allocation stack trace and allocation time  			// from the live object table  			if (readLogResult.liveObjectTable != null) {  				LiveObjectTable.LiveObject liveObject;  				readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  				if (liveObject.id == objectId) {  					int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  					int typeIndexFromLiveObject = stackTrace [0];  					if (typeIndexFromLiveObject == typeIndex) {  						typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  						allocTickIndex = liveObject.allocTickIndex;  						Histogram[] h = readLogResult.heapDumpHistograms;  						if (h != null)  							h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  					}  				}  			}  			if (typeSizeStackTraceId == -1)  				typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  			ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  			gcObject.AllocTickIndex = allocTickIndex;  		}  		break;  	}  	case 'M':  	case 'm': {  		c = ReadChar ();  		int modIndex = ReadInt ();  		sb.Length = 0;  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		if (c != -1) {  			string lineString = sb.ToString ();  			int addrPos = lineString.LastIndexOf (" 0x");  			if (addrPos <= 0)  				addrPos = lineString.Length;  			int backSlashPos = lineString.LastIndexOf (@"\");  			if (backSlashPos <= 0)  				backSlashPos = -1;  			string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  			string fullName = lineString.Substring (0' addrPos);  			EnsureStringCapacity (modIndex' ref modBasicName);  			modBasicName [modIndex] = basicName;  			EnsureStringCapacity (modIndex' ref modFullName);  			modFullName [modIndex] = fullName;  		}  		break;  	}  	case 'U':  	case 'u': {  		c = ReadChar ();  		ulong oldId = ReadULong ();  		ulong newId = ReadULong ();  		uint length = ReadUInt ();  		Histogram reloHist = null;  		if (pos >= startFileOffset && pos < endFileOffset)  			reloHist = readLogResult.relocatedHistogram;  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  		break;  	}  	case 'V':  	case 'v': {  		c = ReadChar ();  		ulong startId = ReadULong ();  		uint length = ReadUInt ();  		Histogram reloHist = null;  		if (pos >= startFileOffset && pos < endFileOffset)  			reloHist = readLogResult.relocatedHistogram;  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  		break;  	}  	case 'B':  	case 'b':  		c = ReadChar ();  		int startGC = ReadInt ();  		int induced = ReadInt ();  		int condemnedGeneration = ReadInt ();  		if (startGC != 0)  			newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  		if (newGcEvent) {  			if (startGC != 0) {  				if (induced != 0) {  					for (int gen = 0; gen <= condemnedGeneration; gen++)  						inducedGcCount [gen]++;  				}  			}  			else {  				int condemnedLimit = condemnedGeneration;  				if (condemnedLimit == 2)  					condemnedLimit = 3;  				for (int gen = 0; gen <= condemnedLimit; gen++) {  					cumulativeGenerationSize [gen] += generationSize [gen];  					gcCount [gen]++;  				}  			}  		}  		for (int gen = 0; gen <= 3; gen++)  			generationSize [gen] = 0;  		while (c >= ' ') {  			ulong rangeStart = ReadULong ();  			ulong rangeLength = ReadULong ();  			ulong rangeLengthReserved = ReadULong ();  			int rangeGeneration = ReadInt ();  			if (c == -1 || rangeGeneration < 0)  				break;  			if (readLogResult.liveObjectTable != null) {  				if (startGC != 0) {  					if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  						readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  				}  				else {  					readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  				}  			}  			generationSize [rangeGeneration] += rangeLength;  		}  		if (startGC == 0 && readLogResult.liveObjectTable != null) {  			readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  		}  		break;  	case 'L':  	case 'l': {  		c = ReadChar ();  		int isCritical = ReadInt ();  		ulong objectId = ReadULong ();  		if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  			// try to find the allocation stack trace and allocation time  			// from the live object table  			LiveObjectTable.LiveObject liveObject;  			readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  			if (liveObject.id == objectId) {  				if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  					readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  				if (readLogResult.finalizerHistogram != null)  					readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  			}  		}  		break;  	}  	case 'I':  	case 'i':  		c = ReadChar ();  		int tickCount = ReadInt ();  		if (c != -1) {  			lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  			if (maxTickIndex < lastTickIndex)  				maxTickIndex = lastTickIndex;  		}  		break;  	case 'G':  	case 'g':  		c = ReadChar ();  		int gcGen0Count = ReadInt ();  		int gcGen1Count = ReadInt ();  		int gcGen2Count = ReadInt ();  		// if the newer 'b' lines occur' disregard the 'g' lines.  		if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  			if (c == -1 || gcGen0Count < 0)  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  			else  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  		}  		break;  	case 'N':  	case 'n': {  		c = ReadChar ();  		int funcIndex;  		int stackTraceIndex = ReadInt ();  		stackPtr = 0;  		int flag = ReadInt ();  		int matched = flag / 4;  		int hadTypeId = (flag & 2);  		bool hasTypeId = (flag & 1) == 1;  		if (hasTypeId) {  			intStack [stackPtr++] = ReadInt ();  			intStack [stackPtr++] = ReadInt ();  		}  		if (matched > 0 && c != -1) {  			/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  			otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  			int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  			if (matched > stacktrace.Length - hadTypeId)  				matched = stacktrace.Length - hadTypeId;  			for (int i = 0; i < matched; i++) {  				int funcId = stacktrace [i + hadTypeId];  				//Debug.Assert(funcId < funcName.Length);  				if (funcName [funcId] == null)  					funcName [funcId] = String.Empty;  				intStack [stackPtr++] = funcId;  				if (stackPtr >= intStack.Length) {  					intStack = GrowIntVector (intStack);  				}  			}  		}  		while ((funcIndex = ReadInt ()) >= 0) {  			intStack [stackPtr] = funcIndex;  			stackPtr++;  			if (stackPtr >= intStack.Length)  				intStack = GrowIntVector (intStack);  		}  		if (c != -1) {  			stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  		}  		break;  	}  	case 'y':  	case 'Y': {  		c = ReadChar ();  		int threadid = ReadInt ();  		if (!assembliesJustLoaded.ContainsKey (threadid)) {  			assembliesJustLoaded [threadid] = new List<string> ();  		}  		/* int assemblyId = */ReadInt ();  		while (c == ' ' || c == '\t') {  			c = ReadChar ();  		}  		sb.Length = 0;  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		string assemblyName = sb.ToString ();  		assembliesJustLoaded [threadid].Add (assemblyName);  		break;  	}  	case 'S':  	case 's': {  		c = ReadChar ();  		int stackTraceIndex = ReadInt ();  		int funcIndex;  		stackPtr = 0;  		while ((funcIndex = ReadInt ()) >= 0) {  			intStack [stackPtr] = funcIndex;  			stackPtr++;  			if (stackPtr >= intStack.Length)  				intStack = GrowIntVector (intStack);  		}  		if (c != -1) {  			stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  		}  		break;  	}  	case 'Z':  	case 'z': {  		sb.Length = 0;  		c = ReadChar ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		if (c != -1) {  			lastTickIndex = AddTimePos (lastLineStartPos);  			if (maxTickIndex < lastTickIndex)  				maxTickIndex = lastTickIndex;  			commentEventList.AddEvent (lastTickIndex' sb.ToString ());  		}  		break;  	}  	case 'H':  	case 'h': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong handleId = ReadULong ();  		ulong initialObjectId = ReadULong ();  		int stacktraceId = ReadInt ();  		if (c != -1) {  			if (readLogResult.handleHash != null)  				readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  			if (readLogResult.createdHandlesHistogram != null)  				readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  		}  		break;  	}  	case 'J':  	case 'j': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong handleId = ReadULong ();  		int stacktraceId = ReadInt ();  		if (c != -1) {  			if (readLogResult.handleHash != null) {  				if (readLogResult.handleHash.ContainsKey (handleId))  					readLogResult.handleHash.Remove (handleId);  				else {  					//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  					//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  					//for (int i = stacktrace.Length; --i >= 0; )  					//{  					//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  					//}  				}  			}  			if (readLogResult.destroyedHandlesHistogram != null)  				readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  		}  		break;  	}  	default: {  		// just ignore the unknown  		while (c != '\n' && c != '\r') {  			c = ReadChar ();  		}  		break;  	}  	}  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	if (c == '\r')  		c = ReadChar ();  	if (c == '\n') {  		c = ReadChar ();  		line++;  	}  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: while (c != -1) {  	if (pos > endFileOffset)  		break;  	if ((line % 1024) == 0) {  		int currentProgress = (int)(pos / 1024);  		if (currentProgress <= maxProgress) {  		}  	}  	lastLineStartPos = pos - 1;  	previousWasR = thisIsR;  	thisIsR = false;  	switch (c) {  	case -1:  		break;  	case 'F':  	case 'f': {  		c = ReadChar ();  		int funcIndex = ReadInt ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string name = ReadString (sb' ' '' false' 255);  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string signature = ReadString (sb' '\r'' true' 1023);  		ulong addr = ReadULong ();  		uint size = ReadUInt ();  		int modIndex = ReadInt ();  		int stackIndex = ReadInt ();  		if (c != -1) {  			EnsureStringCapacity (funcIndex' ref funcName);  			funcName [funcIndex] = name;  			EnsureStringCapacity (funcIndex' ref funcSignature);  			funcSignature [funcIndex] = signature;  			EnsureIntCapacity (funcIndex' ref funcModule);  			funcModule [funcIndex] = modIndex;  			string nameAndSignature = name;  			if (signature != null)  				nameAndSignature = name + ' ' + signature;  			if (stackIndex >= 0 && readLogResult.functionList != null) {  				funcSignatureIdHash [nameAndSignature] = funcIndex;  				readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  			}  		}  		break;  	}  	case 'T':  	case 't': {  		c = ReadChar ();  		int typeIndex = ReadInt ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		if (c != -1 && Char.IsDigit ((char)c)) {  			if (ReadInt () != 0) {  				finalizableTypes [typeIndex] = true;  			}  		}  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string typeName = ReadString (sb' '\r'' false' 1023);  		if (c != -1) {  			AddTypeName (typeIndex' typeName);  		}  		break;  	}  	// 'A' with thread identifier  	case '!': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong id = ReadULong ();  		int typeSizeStackTraceIndex = ReadInt ();  		typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  		if (c != -1) {  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  				// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  				readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  			}  			List<string> prev;  			if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  				foreach (string assemblyName in prev) {  					assemblies [assemblyName] = -typeSizeStackTraceIndex;  				}  				prev.Clear ();  			}  		}  		readLogResult.hadAllocInfo = true;  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'A':  	case 'a': {  		c = ReadChar ();  		ulong id = ReadULong ();  		int typeSizeStackTraceIndex = ReadInt ();  		typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  		if (c != -1) {  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  				// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  				readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  			}  		}  		readLogResult.hadAllocInfo = true;  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'C':  	case 'c': {  		c = ReadChar ();  		if (pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		int threadIndex = ReadInt ();  		int stackTraceIndex = ReadInt ();  		stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  		if (c != -1) {  			if (readLogResult.callstackHistogram != null) {  				readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  			}  			List<string> prev;  			if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  				foreach (string assemblyName in prev) {  					assemblies [assemblyName] = stackTraceIndex;  				}  				prev.Clear ();  			}  		}  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'E':  	case 'e': {  		c = ReadChar ();  		extendedRootInfoSeen = true;  		thisIsR = true;  		if (pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		if (!previousWasR) {  			heapDumpEventList.AddEvent (lastTickIndex' null);  			if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  				readLogResult.objectGraph.BuildTypeGraph ();  				readLogResult.objectGraph.Neuter ();  			}  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  				for (int i = 0; i < h.Length; i++)  					readLogResult.heapDumpHistograms [i] = h [i];  				readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  			}  			readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  		}  		ulong objectID = ReadULong ();  		GcRootKind rootKind = (GcRootKind)ReadInt ();  		GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  		ulong rootID = ReadULong ();  		ObjectGraph objectGraph = readLogResult.objectGraph;  		if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  			string rootName;  			switch (rootKind) {  			case GcRootKind.Stack:  				rootName = "Stack";  				break;  			case GcRootKind.Finalizer:  				rootName = "Finalizer";  				break;  			case GcRootKind.Handle:  				rootName = "Handle";  				break;  			default:  				rootName = "Other";  				break;  			}  			if ((rootFlags & GcRootFlags.Pinning) != 0)  				rootName += "' Pinning";  			if ((rootFlags & GcRootFlags.WeakRef) != 0)  				rootName += "' WeakRef";  			if ((rootFlags & GcRootFlags.Interior) != 0)  				rootName += "' Interior";  			if ((rootFlags & GcRootFlags.Refcounted) != 0)  				rootName += "' RefCounted";  			int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  			ulongStack [0] = objectID;  			ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  			objectGraph.AddRootObject (rootObject' rootID);  		}  		break;  	}  	case 'R':  	case 'r': {  		c = ReadChar ();  		thisIsR = true;  		if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  			}  			break;  		}  		if (!previousWasR) {  			heapDumpEventList.AddEvent (lastTickIndex' null);  			if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  				readLogResult.objectGraph.BuildTypeGraph ();  				readLogResult.objectGraph.Neuter ();  			}  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  				for (int i = 0; i < h.Length; i++)  					readLogResult.heapDumpHistograms [i] = h [i];  				readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  			}  			readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  		}  		stackPtr = 0;  		ulong objectID;  		while ((objectID = ReadULong ()) != ulong.MaxValue) {  			if (objectID > 0) {  				ulongStack [stackPtr] = objectID;  				stackPtr++;  				if (stackPtr >= ulongStack.Length)  					ulongStack = GrowULongVector (ulongStack);  			}  		}  		if (c != -1) {  			if (readLogResult.objectGraph != null)  				readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  		}  		break;  	}  	case 'O':  	case 'o': {  		c = ReadChar ();  		if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		ulong objectId = ReadULong ();  		int typeIndex = ReadInt ();  		uint size = ReadUInt ();  		stackPtr = 0;  		ulong objectID;  		while ((objectID = ReadULong ()) != ulong.MaxValue) {  			if (objectID > 0) {  				ulongStack [stackPtr] = objectID;  				stackPtr++;  				if (stackPtr >= ulongStack.Length)  					ulongStack = GrowULongVector (ulongStack);  			}  		}  		if (c != -1) {  			ObjectGraph objectGraph = readLogResult.objectGraph;  			objectGraph.GetOrCreateGcType (typeIndex);  			int typeSizeStackTraceId = -1;  			int allocTickIndex = 0;  			// try to find the allocation stack trace and allocation time  			// from the live object table  			if (readLogResult.liveObjectTable != null) {  				LiveObjectTable.LiveObject liveObject;  				readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  				if (liveObject.id == objectId) {  					int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  					int typeIndexFromLiveObject = stackTrace [0];  					if (typeIndexFromLiveObject == typeIndex) {  						typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  						allocTickIndex = liveObject.allocTickIndex;  						Histogram[] h = readLogResult.heapDumpHistograms;  						if (h != null)  							h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  					}  				}  			}  			if (typeSizeStackTraceId == -1)  				typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  			ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  			gcObject.AllocTickIndex = allocTickIndex;  		}  		break;  	}  	case 'M':  	case 'm': {  		c = ReadChar ();  		int modIndex = ReadInt ();  		sb.Length = 0;  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		if (c != -1) {  			string lineString = sb.ToString ();  			int addrPos = lineString.LastIndexOf (" 0x");  			if (addrPos <= 0)  				addrPos = lineString.Length;  			int backSlashPos = lineString.LastIndexOf (@"\");  			if (backSlashPos <= 0)  				backSlashPos = -1;  			string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  			string fullName = lineString.Substring (0' addrPos);  			EnsureStringCapacity (modIndex' ref modBasicName);  			modBasicName [modIndex] = basicName;  			EnsureStringCapacity (modIndex' ref modFullName);  			modFullName [modIndex] = fullName;  		}  		break;  	}  	case 'U':  	case 'u': {  		c = ReadChar ();  		ulong oldId = ReadULong ();  		ulong newId = ReadULong ();  		uint length = ReadUInt ();  		Histogram reloHist = null;  		if (pos >= startFileOffset && pos < endFileOffset)  			reloHist = readLogResult.relocatedHistogram;  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  		break;  	}  	case 'V':  	case 'v': {  		c = ReadChar ();  		ulong startId = ReadULong ();  		uint length = ReadUInt ();  		Histogram reloHist = null;  		if (pos >= startFileOffset && pos < endFileOffset)  			reloHist = readLogResult.relocatedHistogram;  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  		break;  	}  	case 'B':  	case 'b':  		c = ReadChar ();  		int startGC = ReadInt ();  		int induced = ReadInt ();  		int condemnedGeneration = ReadInt ();  		if (startGC != 0)  			newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  		if (newGcEvent) {  			if (startGC != 0) {  				if (induced != 0) {  					for (int gen = 0; gen <= condemnedGeneration; gen++)  						inducedGcCount [gen]++;  				}  			}  			else {  				int condemnedLimit = condemnedGeneration;  				if (condemnedLimit == 2)  					condemnedLimit = 3;  				for (int gen = 0; gen <= condemnedLimit; gen++) {  					cumulativeGenerationSize [gen] += generationSize [gen];  					gcCount [gen]++;  				}  			}  		}  		for (int gen = 0; gen <= 3; gen++)  			generationSize [gen] = 0;  		while (c >= ' ') {  			ulong rangeStart = ReadULong ();  			ulong rangeLength = ReadULong ();  			ulong rangeLengthReserved = ReadULong ();  			int rangeGeneration = ReadInt ();  			if (c == -1 || rangeGeneration < 0)  				break;  			if (readLogResult.liveObjectTable != null) {  				if (startGC != 0) {  					if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  						readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  				}  				else {  					readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  				}  			}  			generationSize [rangeGeneration] += rangeLength;  		}  		if (startGC == 0 && readLogResult.liveObjectTable != null) {  			readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  		}  		break;  	case 'L':  	case 'l': {  		c = ReadChar ();  		int isCritical = ReadInt ();  		ulong objectId = ReadULong ();  		if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  			// try to find the allocation stack trace and allocation time  			// from the live object table  			LiveObjectTable.LiveObject liveObject;  			readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  			if (liveObject.id == objectId) {  				if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  					readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  				if (readLogResult.finalizerHistogram != null)  					readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  			}  		}  		break;  	}  	case 'I':  	case 'i':  		c = ReadChar ();  		int tickCount = ReadInt ();  		if (c != -1) {  			lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  			if (maxTickIndex < lastTickIndex)  				maxTickIndex = lastTickIndex;  		}  		break;  	case 'G':  	case 'g':  		c = ReadChar ();  		int gcGen0Count = ReadInt ();  		int gcGen1Count = ReadInt ();  		int gcGen2Count = ReadInt ();  		// if the newer 'b' lines occur' disregard the 'g' lines.  		if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  			if (c == -1 || gcGen0Count < 0)  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  			else  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  		}  		break;  	case 'N':  	case 'n': {  		c = ReadChar ();  		int funcIndex;  		int stackTraceIndex = ReadInt ();  		stackPtr = 0;  		int flag = ReadInt ();  		int matched = flag / 4;  		int hadTypeId = (flag & 2);  		bool hasTypeId = (flag & 1) == 1;  		if (hasTypeId) {  			intStack [stackPtr++] = ReadInt ();  			intStack [stackPtr++] = ReadInt ();  		}  		if (matched > 0 && c != -1) {  			/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  			otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  			int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  			if (matched > stacktrace.Length - hadTypeId)  				matched = stacktrace.Length - hadTypeId;  			for (int i = 0; i < matched; i++) {  				int funcId = stacktrace [i + hadTypeId];  				//Debug.Assert(funcId < funcName.Length);  				if (funcName [funcId] == null)  					funcName [funcId] = String.Empty;  				intStack [stackPtr++] = funcId;  				if (stackPtr >= intStack.Length) {  					intStack = GrowIntVector (intStack);  				}  			}  		}  		while ((funcIndex = ReadInt ()) >= 0) {  			intStack [stackPtr] = funcIndex;  			stackPtr++;  			if (stackPtr >= intStack.Length)  				intStack = GrowIntVector (intStack);  		}  		if (c != -1) {  			stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  		}  		break;  	}  	case 'y':  	case 'Y': {  		c = ReadChar ();  		int threadid = ReadInt ();  		if (!assembliesJustLoaded.ContainsKey (threadid)) {  			assembliesJustLoaded [threadid] = new List<string> ();  		}  		/* int assemblyId = */ReadInt ();  		while (c == ' ' || c == '\t') {  			c = ReadChar ();  		}  		sb.Length = 0;  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		string assemblyName = sb.ToString ();  		assembliesJustLoaded [threadid].Add (assemblyName);  		break;  	}  	case 'S':  	case 's': {  		c = ReadChar ();  		int stackTraceIndex = ReadInt ();  		int funcIndex;  		stackPtr = 0;  		while ((funcIndex = ReadInt ()) >= 0) {  			intStack [stackPtr] = funcIndex;  			stackPtr++;  			if (stackPtr >= intStack.Length)  				intStack = GrowIntVector (intStack);  		}  		if (c != -1) {  			stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  		}  		break;  	}  	case 'Z':  	case 'z': {  		sb.Length = 0;  		c = ReadChar ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		if (c != -1) {  			lastTickIndex = AddTimePos (lastLineStartPos);  			if (maxTickIndex < lastTickIndex)  				maxTickIndex = lastTickIndex;  			commentEventList.AddEvent (lastTickIndex' sb.ToString ());  		}  		break;  	}  	case 'H':  	case 'h': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong handleId = ReadULong ();  		ulong initialObjectId = ReadULong ();  		int stacktraceId = ReadInt ();  		if (c != -1) {  			if (readLogResult.handleHash != null)  				readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  			if (readLogResult.createdHandlesHistogram != null)  				readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  		}  		break;  	}  	case 'J':  	case 'j': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong handleId = ReadULong ();  		int stacktraceId = ReadInt ();  		if (c != -1) {  			if (readLogResult.handleHash != null) {  				if (readLogResult.handleHash.ContainsKey (handleId))  					readLogResult.handleHash.Remove (handleId);  				else {  					//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  					//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  					//for (int i = stacktrace.Length; --i >= 0; )  					//{  					//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  					//}  				}  			}  			if (readLogResult.destroyedHandlesHistogram != null)  				readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  		}  		break;  	}  	default: {  		// just ignore the unknown  		while (c != '\n' && c != '\r') {  			c = ReadChar ();  		}  		break;  	}  	}  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	if (c == '\r')  		c = ReadChar ();  	if (c == '\n') {  		c = ReadChar ();  		line++;  	}  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: while (c != -1) {  	if (pos > endFileOffset)  		break;  	if ((line % 1024) == 0) {  		int currentProgress = (int)(pos / 1024);  		if (currentProgress <= maxProgress) {  		}  	}  	lastLineStartPos = pos - 1;  	previousWasR = thisIsR;  	thisIsR = false;  	switch (c) {  	case -1:  		break;  	case 'F':  	case 'f': {  		c = ReadChar ();  		int funcIndex = ReadInt ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string name = ReadString (sb' ' '' false' 255);  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string signature = ReadString (sb' '\r'' true' 1023);  		ulong addr = ReadULong ();  		uint size = ReadUInt ();  		int modIndex = ReadInt ();  		int stackIndex = ReadInt ();  		if (c != -1) {  			EnsureStringCapacity (funcIndex' ref funcName);  			funcName [funcIndex] = name;  			EnsureStringCapacity (funcIndex' ref funcSignature);  			funcSignature [funcIndex] = signature;  			EnsureIntCapacity (funcIndex' ref funcModule);  			funcModule [funcIndex] = modIndex;  			string nameAndSignature = name;  			if (signature != null)  				nameAndSignature = name + ' ' + signature;  			if (stackIndex >= 0 && readLogResult.functionList != null) {  				funcSignatureIdHash [nameAndSignature] = funcIndex;  				readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  			}  		}  		break;  	}  	case 'T':  	case 't': {  		c = ReadChar ();  		int typeIndex = ReadInt ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		if (c != -1 && Char.IsDigit ((char)c)) {  			if (ReadInt () != 0) {  				finalizableTypes [typeIndex] = true;  			}  		}  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string typeName = ReadString (sb' '\r'' false' 1023);  		if (c != -1) {  			AddTypeName (typeIndex' typeName);  		}  		break;  	}  	// 'A' with thread identifier  	case '!': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong id = ReadULong ();  		int typeSizeStackTraceIndex = ReadInt ();  		typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  		if (c != -1) {  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  				// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  				readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  			}  			List<string> prev;  			if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  				foreach (string assemblyName in prev) {  					assemblies [assemblyName] = -typeSizeStackTraceIndex;  				}  				prev.Clear ();  			}  		}  		readLogResult.hadAllocInfo = true;  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'A':  	case 'a': {  		c = ReadChar ();  		ulong id = ReadULong ();  		int typeSizeStackTraceIndex = ReadInt ();  		typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  		if (c != -1) {  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  				// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  				readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  			}  		}  		readLogResult.hadAllocInfo = true;  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'C':  	case 'c': {  		c = ReadChar ();  		if (pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		int threadIndex = ReadInt ();  		int stackTraceIndex = ReadInt ();  		stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  		if (c != -1) {  			if (readLogResult.callstackHistogram != null) {  				readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  			}  			List<string> prev;  			if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  				foreach (string assemblyName in prev) {  					assemblies [assemblyName] = stackTraceIndex;  				}  				prev.Clear ();  			}  		}  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'E':  	case 'e': {  		c = ReadChar ();  		extendedRootInfoSeen = true;  		thisIsR = true;  		if (pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		if (!previousWasR) {  			heapDumpEventList.AddEvent (lastTickIndex' null);  			if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  				readLogResult.objectGraph.BuildTypeGraph ();  				readLogResult.objectGraph.Neuter ();  			}  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  				for (int i = 0; i < h.Length; i++)  					readLogResult.heapDumpHistograms [i] = h [i];  				readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  			}  			readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  		}  		ulong objectID = ReadULong ();  		GcRootKind rootKind = (GcRootKind)ReadInt ();  		GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  		ulong rootID = ReadULong ();  		ObjectGraph objectGraph = readLogResult.objectGraph;  		if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  			string rootName;  			switch (rootKind) {  			case GcRootKind.Stack:  				rootName = "Stack";  				break;  			case GcRootKind.Finalizer:  				rootName = "Finalizer";  				break;  			case GcRootKind.Handle:  				rootName = "Handle";  				break;  			default:  				rootName = "Other";  				break;  			}  			if ((rootFlags & GcRootFlags.Pinning) != 0)  				rootName += "' Pinning";  			if ((rootFlags & GcRootFlags.WeakRef) != 0)  				rootName += "' WeakRef";  			if ((rootFlags & GcRootFlags.Interior) != 0)  				rootName += "' Interior";  			if ((rootFlags & GcRootFlags.Refcounted) != 0)  				rootName += "' RefCounted";  			int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  			ulongStack [0] = objectID;  			ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  			objectGraph.AddRootObject (rootObject' rootID);  		}  		break;  	}  	case 'R':  	case 'r': {  		c = ReadChar ();  		thisIsR = true;  		if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  			}  			break;  		}  		if (!previousWasR) {  			heapDumpEventList.AddEvent (lastTickIndex' null);  			if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  				readLogResult.objectGraph.BuildTypeGraph ();  				readLogResult.objectGraph.Neuter ();  			}  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  				for (int i = 0; i < h.Length; i++)  					readLogResult.heapDumpHistograms [i] = h [i];  				readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  			}  			readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  		}  		stackPtr = 0;  		ulong objectID;  		while ((objectID = ReadULong ()) != ulong.MaxValue) {  			if (objectID > 0) {  				ulongStack [stackPtr] = objectID;  				stackPtr++;  				if (stackPtr >= ulongStack.Length)  					ulongStack = GrowULongVector (ulongStack);  			}  		}  		if (c != -1) {  			if (readLogResult.objectGraph != null)  				readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  		}  		break;  	}  	case 'O':  	case 'o': {  		c = ReadChar ();  		if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		ulong objectId = ReadULong ();  		int typeIndex = ReadInt ();  		uint size = ReadUInt ();  		stackPtr = 0;  		ulong objectID;  		while ((objectID = ReadULong ()) != ulong.MaxValue) {  			if (objectID > 0) {  				ulongStack [stackPtr] = objectID;  				stackPtr++;  				if (stackPtr >= ulongStack.Length)  					ulongStack = GrowULongVector (ulongStack);  			}  		}  		if (c != -1) {  			ObjectGraph objectGraph = readLogResult.objectGraph;  			objectGraph.GetOrCreateGcType (typeIndex);  			int typeSizeStackTraceId = -1;  			int allocTickIndex = 0;  			// try to find the allocation stack trace and allocation time  			// from the live object table  			if (readLogResult.liveObjectTable != null) {  				LiveObjectTable.LiveObject liveObject;  				readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  				if (liveObject.id == objectId) {  					int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  					int typeIndexFromLiveObject = stackTrace [0];  					if (typeIndexFromLiveObject == typeIndex) {  						typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  						allocTickIndex = liveObject.allocTickIndex;  						Histogram[] h = readLogResult.heapDumpHistograms;  						if (h != null)  							h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  					}  				}  			}  			if (typeSizeStackTraceId == -1)  				typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  			ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  			gcObject.AllocTickIndex = allocTickIndex;  		}  		break;  	}  	case 'M':  	case 'm': {  		c = ReadChar ();  		int modIndex = ReadInt ();  		sb.Length = 0;  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		if (c != -1) {  			string lineString = sb.ToString ();  			int addrPos = lineString.LastIndexOf (" 0x");  			if (addrPos <= 0)  				addrPos = lineString.Length;  			int backSlashPos = lineString.LastIndexOf (@"\");  			if (backSlashPos <= 0)  				backSlashPos = -1;  			string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  			string fullName = lineString.Substring (0' addrPos);  			EnsureStringCapacity (modIndex' ref modBasicName);  			modBasicName [modIndex] = basicName;  			EnsureStringCapacity (modIndex' ref modFullName);  			modFullName [modIndex] = fullName;  		}  		break;  	}  	case 'U':  	case 'u': {  		c = ReadChar ();  		ulong oldId = ReadULong ();  		ulong newId = ReadULong ();  		uint length = ReadUInt ();  		Histogram reloHist = null;  		if (pos >= startFileOffset && pos < endFileOffset)  			reloHist = readLogResult.relocatedHistogram;  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  		break;  	}  	case 'V':  	case 'v': {  		c = ReadChar ();  		ulong startId = ReadULong ();  		uint length = ReadUInt ();  		Histogram reloHist = null;  		if (pos >= startFileOffset && pos < endFileOffset)  			reloHist = readLogResult.relocatedHistogram;  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  		break;  	}  	case 'B':  	case 'b':  		c = ReadChar ();  		int startGC = ReadInt ();  		int induced = ReadInt ();  		int condemnedGeneration = ReadInt ();  		if (startGC != 0)  			newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  		if (newGcEvent) {  			if (startGC != 0) {  				if (induced != 0) {  					for (int gen = 0; gen <= condemnedGeneration; gen++)  						inducedGcCount [gen]++;  				}  			}  			else {  				int condemnedLimit = condemnedGeneration;  				if (condemnedLimit == 2)  					condemnedLimit = 3;  				for (int gen = 0; gen <= condemnedLimit; gen++) {  					cumulativeGenerationSize [gen] += generationSize [gen];  					gcCount [gen]++;  				}  			}  		}  		for (int gen = 0; gen <= 3; gen++)  			generationSize [gen] = 0;  		while (c >= ' ') {  			ulong rangeStart = ReadULong ();  			ulong rangeLength = ReadULong ();  			ulong rangeLengthReserved = ReadULong ();  			int rangeGeneration = ReadInt ();  			if (c == -1 || rangeGeneration < 0)  				break;  			if (readLogResult.liveObjectTable != null) {  				if (startGC != 0) {  					if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  						readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  				}  				else {  					readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  				}  			}  			generationSize [rangeGeneration] += rangeLength;  		}  		if (startGC == 0 && readLogResult.liveObjectTable != null) {  			readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  		}  		break;  	case 'L':  	case 'l': {  		c = ReadChar ();  		int isCritical = ReadInt ();  		ulong objectId = ReadULong ();  		if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  			// try to find the allocation stack trace and allocation time  			// from the live object table  			LiveObjectTable.LiveObject liveObject;  			readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  			if (liveObject.id == objectId) {  				if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  					readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  				if (readLogResult.finalizerHistogram != null)  					readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  			}  		}  		break;  	}  	case 'I':  	case 'i':  		c = ReadChar ();  		int tickCount = ReadInt ();  		if (c != -1) {  			lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  			if (maxTickIndex < lastTickIndex)  				maxTickIndex = lastTickIndex;  		}  		break;  	case 'G':  	case 'g':  		c = ReadChar ();  		int gcGen0Count = ReadInt ();  		int gcGen1Count = ReadInt ();  		int gcGen2Count = ReadInt ();  		// if the newer 'b' lines occur' disregard the 'g' lines.  		if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  			if (c == -1 || gcGen0Count < 0)  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  			else  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  		}  		break;  	case 'N':  	case 'n': {  		c = ReadChar ();  		int funcIndex;  		int stackTraceIndex = ReadInt ();  		stackPtr = 0;  		int flag = ReadInt ();  		int matched = flag / 4;  		int hadTypeId = (flag & 2);  		bool hasTypeId = (flag & 1) == 1;  		if (hasTypeId) {  			intStack [stackPtr++] = ReadInt ();  			intStack [stackPtr++] = ReadInt ();  		}  		if (matched > 0 && c != -1) {  			/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  			otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  			int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  			if (matched > stacktrace.Length - hadTypeId)  				matched = stacktrace.Length - hadTypeId;  			for (int i = 0; i < matched; i++) {  				int funcId = stacktrace [i + hadTypeId];  				//Debug.Assert(funcId < funcName.Length);  				if (funcName [funcId] == null)  					funcName [funcId] = String.Empty;  				intStack [stackPtr++] = funcId;  				if (stackPtr >= intStack.Length) {  					intStack = GrowIntVector (intStack);  				}  			}  		}  		while ((funcIndex = ReadInt ()) >= 0) {  			intStack [stackPtr] = funcIndex;  			stackPtr++;  			if (stackPtr >= intStack.Length)  				intStack = GrowIntVector (intStack);  		}  		if (c != -1) {  			stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  		}  		break;  	}  	case 'y':  	case 'Y': {  		c = ReadChar ();  		int threadid = ReadInt ();  		if (!assembliesJustLoaded.ContainsKey (threadid)) {  			assembliesJustLoaded [threadid] = new List<string> ();  		}  		/* int assemblyId = */ReadInt ();  		while (c == ' ' || c == '\t') {  			c = ReadChar ();  		}  		sb.Length = 0;  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		string assemblyName = sb.ToString ();  		assembliesJustLoaded [threadid].Add (assemblyName);  		break;  	}  	case 'S':  	case 's': {  		c = ReadChar ();  		int stackTraceIndex = ReadInt ();  		int funcIndex;  		stackPtr = 0;  		while ((funcIndex = ReadInt ()) >= 0) {  			intStack [stackPtr] = funcIndex;  			stackPtr++;  			if (stackPtr >= intStack.Length)  				intStack = GrowIntVector (intStack);  		}  		if (c != -1) {  			stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  		}  		break;  	}  	case 'Z':  	case 'z': {  		sb.Length = 0;  		c = ReadChar ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		if (c != -1) {  			lastTickIndex = AddTimePos (lastLineStartPos);  			if (maxTickIndex < lastTickIndex)  				maxTickIndex = lastTickIndex;  			commentEventList.AddEvent (lastTickIndex' sb.ToString ());  		}  		break;  	}  	case 'H':  	case 'h': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong handleId = ReadULong ();  		ulong initialObjectId = ReadULong ();  		int stacktraceId = ReadInt ();  		if (c != -1) {  			if (readLogResult.handleHash != null)  				readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  			if (readLogResult.createdHandlesHistogram != null)  				readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  		}  		break;  	}  	case 'J':  	case 'j': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong handleId = ReadULong ();  		int stacktraceId = ReadInt ();  		if (c != -1) {  			if (readLogResult.handleHash != null) {  				if (readLogResult.handleHash.ContainsKey (handleId))  					readLogResult.handleHash.Remove (handleId);  				else {  					//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  					//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  					//for (int i = stacktrace.Length; --i >= 0; )  					//{  					//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  					//}  				}  			}  			if (readLogResult.destroyedHandlesHistogram != null)  				readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  		}  		break;  	}  	default: {  		// just ignore the unknown  		while (c != '\n' && c != '\r') {  			c = ReadChar ();  		}  		break;  	}  	}  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	if (c == '\r')  		c = ReadChar ();  	if (c == '\n') {  		c = ReadChar ();  		line++;  	}  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: while (c != -1) {  	if (pos > endFileOffset)  		break;  	if ((line % 1024) == 0) {  		int currentProgress = (int)(pos / 1024);  		if (currentProgress <= maxProgress) {  		}  	}  	lastLineStartPos = pos - 1;  	previousWasR = thisIsR;  	thisIsR = false;  	switch (c) {  	case -1:  		break;  	case 'F':  	case 'f': {  		c = ReadChar ();  		int funcIndex = ReadInt ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string name = ReadString (sb' ' '' false' 255);  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string signature = ReadString (sb' '\r'' true' 1023);  		ulong addr = ReadULong ();  		uint size = ReadUInt ();  		int modIndex = ReadInt ();  		int stackIndex = ReadInt ();  		if (c != -1) {  			EnsureStringCapacity (funcIndex' ref funcName);  			funcName [funcIndex] = name;  			EnsureStringCapacity (funcIndex' ref funcSignature);  			funcSignature [funcIndex] = signature;  			EnsureIntCapacity (funcIndex' ref funcModule);  			funcModule [funcIndex] = modIndex;  			string nameAndSignature = name;  			if (signature != null)  				nameAndSignature = name + ' ' + signature;  			if (stackIndex >= 0 && readLogResult.functionList != null) {  				funcSignatureIdHash [nameAndSignature] = funcIndex;  				readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  			}  		}  		break;  	}  	case 'T':  	case 't': {  		c = ReadChar ();  		int typeIndex = ReadInt ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		if (c != -1 && Char.IsDigit ((char)c)) {  			if (ReadInt () != 0) {  				finalizableTypes [typeIndex] = true;  			}  		}  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string typeName = ReadString (sb' '\r'' false' 1023);  		if (c != -1) {  			AddTypeName (typeIndex' typeName);  		}  		break;  	}  	// 'A' with thread identifier  	case '!': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong id = ReadULong ();  		int typeSizeStackTraceIndex = ReadInt ();  		typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  		if (c != -1) {  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  				// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  				readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  			}  			List<string> prev;  			if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  				foreach (string assemblyName in prev) {  					assemblies [assemblyName] = -typeSizeStackTraceIndex;  				}  				prev.Clear ();  			}  		}  		readLogResult.hadAllocInfo = true;  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'A':  	case 'a': {  		c = ReadChar ();  		ulong id = ReadULong ();  		int typeSizeStackTraceIndex = ReadInt ();  		typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  		if (c != -1) {  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  				// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  				readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  			}  		}  		readLogResult.hadAllocInfo = true;  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'C':  	case 'c': {  		c = ReadChar ();  		if (pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		int threadIndex = ReadInt ();  		int stackTraceIndex = ReadInt ();  		stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  		if (c != -1) {  			if (readLogResult.callstackHistogram != null) {  				readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  			}  			List<string> prev;  			if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  				foreach (string assemblyName in prev) {  					assemblies [assemblyName] = stackTraceIndex;  				}  				prev.Clear ();  			}  		}  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'E':  	case 'e': {  		c = ReadChar ();  		extendedRootInfoSeen = true;  		thisIsR = true;  		if (pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		if (!previousWasR) {  			heapDumpEventList.AddEvent (lastTickIndex' null);  			if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  				readLogResult.objectGraph.BuildTypeGraph ();  				readLogResult.objectGraph.Neuter ();  			}  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  				for (int i = 0; i < h.Length; i++)  					readLogResult.heapDumpHistograms [i] = h [i];  				readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  			}  			readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  		}  		ulong objectID = ReadULong ();  		GcRootKind rootKind = (GcRootKind)ReadInt ();  		GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  		ulong rootID = ReadULong ();  		ObjectGraph objectGraph = readLogResult.objectGraph;  		if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  			string rootName;  			switch (rootKind) {  			case GcRootKind.Stack:  				rootName = "Stack";  				break;  			case GcRootKind.Finalizer:  				rootName = "Finalizer";  				break;  			case GcRootKind.Handle:  				rootName = "Handle";  				break;  			default:  				rootName = "Other";  				break;  			}  			if ((rootFlags & GcRootFlags.Pinning) != 0)  				rootName += "' Pinning";  			if ((rootFlags & GcRootFlags.WeakRef) != 0)  				rootName += "' WeakRef";  			if ((rootFlags & GcRootFlags.Interior) != 0)  				rootName += "' Interior";  			if ((rootFlags & GcRootFlags.Refcounted) != 0)  				rootName += "' RefCounted";  			int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  			ulongStack [0] = objectID;  			ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  			objectGraph.AddRootObject (rootObject' rootID);  		}  		break;  	}  	case 'R':  	case 'r': {  		c = ReadChar ();  		thisIsR = true;  		if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  			}  			break;  		}  		if (!previousWasR) {  			heapDumpEventList.AddEvent (lastTickIndex' null);  			if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  				readLogResult.objectGraph.BuildTypeGraph ();  				readLogResult.objectGraph.Neuter ();  			}  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  				for (int i = 0; i < h.Length; i++)  					readLogResult.heapDumpHistograms [i] = h [i];  				readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  			}  			readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  		}  		stackPtr = 0;  		ulong objectID;  		while ((objectID = ReadULong ()) != ulong.MaxValue) {  			if (objectID > 0) {  				ulongStack [stackPtr] = objectID;  				stackPtr++;  				if (stackPtr >= ulongStack.Length)  					ulongStack = GrowULongVector (ulongStack);  			}  		}  		if (c != -1) {  			if (readLogResult.objectGraph != null)  				readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  		}  		break;  	}  	case 'O':  	case 'o': {  		c = ReadChar ();  		if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		ulong objectId = ReadULong ();  		int typeIndex = ReadInt ();  		uint size = ReadUInt ();  		stackPtr = 0;  		ulong objectID;  		while ((objectID = ReadULong ()) != ulong.MaxValue) {  			if (objectID > 0) {  				ulongStack [stackPtr] = objectID;  				stackPtr++;  				if (stackPtr >= ulongStack.Length)  					ulongStack = GrowULongVector (ulongStack);  			}  		}  		if (c != -1) {  			ObjectGraph objectGraph = readLogResult.objectGraph;  			objectGraph.GetOrCreateGcType (typeIndex);  			int typeSizeStackTraceId = -1;  			int allocTickIndex = 0;  			// try to find the allocation stack trace and allocation time  			// from the live object table  			if (readLogResult.liveObjectTable != null) {  				LiveObjectTable.LiveObject liveObject;  				readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  				if (liveObject.id == objectId) {  					int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  					int typeIndexFromLiveObject = stackTrace [0];  					if (typeIndexFromLiveObject == typeIndex) {  						typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  						allocTickIndex = liveObject.allocTickIndex;  						Histogram[] h = readLogResult.heapDumpHistograms;  						if (h != null)  							h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  					}  				}  			}  			if (typeSizeStackTraceId == -1)  				typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  			ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  			gcObject.AllocTickIndex = allocTickIndex;  		}  		break;  	}  	case 'M':  	case 'm': {  		c = ReadChar ();  		int modIndex = ReadInt ();  		sb.Length = 0;  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		if (c != -1) {  			string lineString = sb.ToString ();  			int addrPos = lineString.LastIndexOf (" 0x");  			if (addrPos <= 0)  				addrPos = lineString.Length;  			int backSlashPos = lineString.LastIndexOf (@"\");  			if (backSlashPos <= 0)  				backSlashPos = -1;  			string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  			string fullName = lineString.Substring (0' addrPos);  			EnsureStringCapacity (modIndex' ref modBasicName);  			modBasicName [modIndex] = basicName;  			EnsureStringCapacity (modIndex' ref modFullName);  			modFullName [modIndex] = fullName;  		}  		break;  	}  	case 'U':  	case 'u': {  		c = ReadChar ();  		ulong oldId = ReadULong ();  		ulong newId = ReadULong ();  		uint length = ReadUInt ();  		Histogram reloHist = null;  		if (pos >= startFileOffset && pos < endFileOffset)  			reloHist = readLogResult.relocatedHistogram;  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  		break;  	}  	case 'V':  	case 'v': {  		c = ReadChar ();  		ulong startId = ReadULong ();  		uint length = ReadUInt ();  		Histogram reloHist = null;  		if (pos >= startFileOffset && pos < endFileOffset)  			reloHist = readLogResult.relocatedHistogram;  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  		break;  	}  	case 'B':  	case 'b':  		c = ReadChar ();  		int startGC = ReadInt ();  		int induced = ReadInt ();  		int condemnedGeneration = ReadInt ();  		if (startGC != 0)  			newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  		if (newGcEvent) {  			if (startGC != 0) {  				if (induced != 0) {  					for (int gen = 0; gen <= condemnedGeneration; gen++)  						inducedGcCount [gen]++;  				}  			}  			else {  				int condemnedLimit = condemnedGeneration;  				if (condemnedLimit == 2)  					condemnedLimit = 3;  				for (int gen = 0; gen <= condemnedLimit; gen++) {  					cumulativeGenerationSize [gen] += generationSize [gen];  					gcCount [gen]++;  				}  			}  		}  		for (int gen = 0; gen <= 3; gen++)  			generationSize [gen] = 0;  		while (c >= ' ') {  			ulong rangeStart = ReadULong ();  			ulong rangeLength = ReadULong ();  			ulong rangeLengthReserved = ReadULong ();  			int rangeGeneration = ReadInt ();  			if (c == -1 || rangeGeneration < 0)  				break;  			if (readLogResult.liveObjectTable != null) {  				if (startGC != 0) {  					if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  						readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  				}  				else {  					readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  				}  			}  			generationSize [rangeGeneration] += rangeLength;  		}  		if (startGC == 0 && readLogResult.liveObjectTable != null) {  			readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  		}  		break;  	case 'L':  	case 'l': {  		c = ReadChar ();  		int isCritical = ReadInt ();  		ulong objectId = ReadULong ();  		if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  			// try to find the allocation stack trace and allocation time  			// from the live object table  			LiveObjectTable.LiveObject liveObject;  			readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  			if (liveObject.id == objectId) {  				if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  					readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  				if (readLogResult.finalizerHistogram != null)  					readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  			}  		}  		break;  	}  	case 'I':  	case 'i':  		c = ReadChar ();  		int tickCount = ReadInt ();  		if (c != -1) {  			lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  			if (maxTickIndex < lastTickIndex)  				maxTickIndex = lastTickIndex;  		}  		break;  	case 'G':  	case 'g':  		c = ReadChar ();  		int gcGen0Count = ReadInt ();  		int gcGen1Count = ReadInt ();  		int gcGen2Count = ReadInt ();  		// if the newer 'b' lines occur' disregard the 'g' lines.  		if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  			if (c == -1 || gcGen0Count < 0)  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  			else  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  		}  		break;  	case 'N':  	case 'n': {  		c = ReadChar ();  		int funcIndex;  		int stackTraceIndex = ReadInt ();  		stackPtr = 0;  		int flag = ReadInt ();  		int matched = flag / 4;  		int hadTypeId = (flag & 2);  		bool hasTypeId = (flag & 1) == 1;  		if (hasTypeId) {  			intStack [stackPtr++] = ReadInt ();  			intStack [stackPtr++] = ReadInt ();  		}  		if (matched > 0 && c != -1) {  			/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  			otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  			int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  			if (matched > stacktrace.Length - hadTypeId)  				matched = stacktrace.Length - hadTypeId;  			for (int i = 0; i < matched; i++) {  				int funcId = stacktrace [i + hadTypeId];  				//Debug.Assert(funcId < funcName.Length);  				if (funcName [funcId] == null)  					funcName [funcId] = String.Empty;  				intStack [stackPtr++] = funcId;  				if (stackPtr >= intStack.Length) {  					intStack = GrowIntVector (intStack);  				}  			}  		}  		while ((funcIndex = ReadInt ()) >= 0) {  			intStack [stackPtr] = funcIndex;  			stackPtr++;  			if (stackPtr >= intStack.Length)  				intStack = GrowIntVector (intStack);  		}  		if (c != -1) {  			stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  		}  		break;  	}  	case 'y':  	case 'Y': {  		c = ReadChar ();  		int threadid = ReadInt ();  		if (!assembliesJustLoaded.ContainsKey (threadid)) {  			assembliesJustLoaded [threadid] = new List<string> ();  		}  		/* int assemblyId = */ReadInt ();  		while (c == ' ' || c == '\t') {  			c = ReadChar ();  		}  		sb.Length = 0;  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		string assemblyName = sb.ToString ();  		assembliesJustLoaded [threadid].Add (assemblyName);  		break;  	}  	case 'S':  	case 's': {  		c = ReadChar ();  		int stackTraceIndex = ReadInt ();  		int funcIndex;  		stackPtr = 0;  		while ((funcIndex = ReadInt ()) >= 0) {  			intStack [stackPtr] = funcIndex;  			stackPtr++;  			if (stackPtr >= intStack.Length)  				intStack = GrowIntVector (intStack);  		}  		if (c != -1) {  			stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  		}  		break;  	}  	case 'Z':  	case 'z': {  		sb.Length = 0;  		c = ReadChar ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		if (c != -1) {  			lastTickIndex = AddTimePos (lastLineStartPos);  			if (maxTickIndex < lastTickIndex)  				maxTickIndex = lastTickIndex;  			commentEventList.AddEvent (lastTickIndex' sb.ToString ());  		}  		break;  	}  	case 'H':  	case 'h': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong handleId = ReadULong ();  		ulong initialObjectId = ReadULong ();  		int stacktraceId = ReadInt ();  		if (c != -1) {  			if (readLogResult.handleHash != null)  				readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  			if (readLogResult.createdHandlesHistogram != null)  				readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  		}  		break;  	}  	case 'J':  	case 'j': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong handleId = ReadULong ();  		int stacktraceId = ReadInt ();  		if (c != -1) {  			if (readLogResult.handleHash != null) {  				if (readLogResult.handleHash.ContainsKey (handleId))  					readLogResult.handleHash.Remove (handleId);  				else {  					//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  					//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  					//for (int i = stacktrace.Length; --i >= 0; )  					//{  					//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  					//}  				}  			}  			if (readLogResult.destroyedHandlesHistogram != null)  				readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  		}  		break;  	}  	default: {  		// just ignore the unknown  		while (c != '\n' && c != '\r') {  			c = ReadChar ();  		}  		break;  	}  	}  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	if (c == '\r')  		c = ReadChar ();  	if (c == '\n') {  		c = ReadChar ();  		line++;  	}  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: while (c != -1) {  	if (pos > endFileOffset)  		break;  	if ((line % 1024) == 0) {  		int currentProgress = (int)(pos / 1024);  		if (currentProgress <= maxProgress) {  		}  	}  	lastLineStartPos = pos - 1;  	previousWasR = thisIsR;  	thisIsR = false;  	switch (c) {  	case -1:  		break;  	case 'F':  	case 'f': {  		c = ReadChar ();  		int funcIndex = ReadInt ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string name = ReadString (sb' ' '' false' 255);  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string signature = ReadString (sb' '\r'' true' 1023);  		ulong addr = ReadULong ();  		uint size = ReadUInt ();  		int modIndex = ReadInt ();  		int stackIndex = ReadInt ();  		if (c != -1) {  			EnsureStringCapacity (funcIndex' ref funcName);  			funcName [funcIndex] = name;  			EnsureStringCapacity (funcIndex' ref funcSignature);  			funcSignature [funcIndex] = signature;  			EnsureIntCapacity (funcIndex' ref funcModule);  			funcModule [funcIndex] = modIndex;  			string nameAndSignature = name;  			if (signature != null)  				nameAndSignature = name + ' ' + signature;  			if (stackIndex >= 0 && readLogResult.functionList != null) {  				funcSignatureIdHash [nameAndSignature] = funcIndex;  				readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  			}  		}  		break;  	}  	case 'T':  	case 't': {  		c = ReadChar ();  		int typeIndex = ReadInt ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		if (c != -1 && Char.IsDigit ((char)c)) {  			if (ReadInt () != 0) {  				finalizableTypes [typeIndex] = true;  			}  		}  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		string typeName = ReadString (sb' '\r'' false' 1023);  		if (c != -1) {  			AddTypeName (typeIndex' typeName);  		}  		break;  	}  	// 'A' with thread identifier  	case '!': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong id = ReadULong ();  		int typeSizeStackTraceIndex = ReadInt ();  		typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  		if (c != -1) {  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  				// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  				readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  			}  			List<string> prev;  			if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  				foreach (string assemblyName in prev) {  					assemblies [assemblyName] = -typeSizeStackTraceIndex;  				}  				prev.Clear ();  			}  		}  		readLogResult.hadAllocInfo = true;  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'A':  	case 'a': {  		c = ReadChar ();  		ulong id = ReadULong ();  		int typeSizeStackTraceIndex = ReadInt ();  		typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  		if (c != -1) {  			if (readLogResult.liveObjectTable != null)  				readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  			if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  				// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  				readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  			}  		}  		readLogResult.hadAllocInfo = true;  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'C':  	case 'c': {  		c = ReadChar ();  		if (pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		int threadIndex = ReadInt ();  		int stackTraceIndex = ReadInt ();  		stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  		if (c != -1) {  			if (readLogResult.callstackHistogram != null) {  				readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  			}  			List<string> prev;  			if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  				foreach (string assemblyName in prev) {  					assemblies [assemblyName] = stackTraceIndex;  				}  				prev.Clear ();  			}  		}  		readLogResult.hadCallInfo = true;  		break;  	}  	case 'E':  	case 'e': {  		c = ReadChar ();  		extendedRootInfoSeen = true;  		thisIsR = true;  		if (pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		if (!previousWasR) {  			heapDumpEventList.AddEvent (lastTickIndex' null);  			if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  				readLogResult.objectGraph.BuildTypeGraph ();  				readLogResult.objectGraph.Neuter ();  			}  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  				for (int i = 0; i < h.Length; i++)  					readLogResult.heapDumpHistograms [i] = h [i];  				readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  			}  			readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  		}  		ulong objectID = ReadULong ();  		GcRootKind rootKind = (GcRootKind)ReadInt ();  		GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  		ulong rootID = ReadULong ();  		ObjectGraph objectGraph = readLogResult.objectGraph;  		if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  			string rootName;  			switch (rootKind) {  			case GcRootKind.Stack:  				rootName = "Stack";  				break;  			case GcRootKind.Finalizer:  				rootName = "Finalizer";  				break;  			case GcRootKind.Handle:  				rootName = "Handle";  				break;  			default:  				rootName = "Other";  				break;  			}  			if ((rootFlags & GcRootFlags.Pinning) != 0)  				rootName += "' Pinning";  			if ((rootFlags & GcRootFlags.WeakRef) != 0)  				rootName += "' WeakRef";  			if ((rootFlags & GcRootFlags.Interior) != 0)  				rootName += "' Interior";  			if ((rootFlags & GcRootFlags.Refcounted) != 0)  				rootName += "' RefCounted";  			int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  			ulongStack [0] = objectID;  			ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  			objectGraph.AddRootObject (rootObject' rootID);  		}  		break;  	}  	case 'R':  	case 'r': {  		c = ReadChar ();  		thisIsR = true;  		if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  			while (c >= ' ')  				c = ReadChar ();  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  			}  			break;  		}  		if (!previousWasR) {  			heapDumpEventList.AddEvent (lastTickIndex' null);  			if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  				readLogResult.objectGraph.BuildTypeGraph ();  				readLogResult.objectGraph.Neuter ();  			}  			Histogram[] h = readLogResult.heapDumpHistograms;  			if (h != null) {  				if (h.Length == requestedIndex)  					readLogResult.requestedObjectGraph = readLogResult.objectGraph;  				readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  				for (int i = 0; i < h.Length; i++)  					readLogResult.heapDumpHistograms [i] = h [i];  				readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  			}  			readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  		}  		stackPtr = 0;  		ulong objectID;  		while ((objectID = ReadULong ()) != ulong.MaxValue) {  			if (objectID > 0) {  				ulongStack [stackPtr] = objectID;  				stackPtr++;  				if (stackPtr >= ulongStack.Length)  					ulongStack = GrowULongVector (ulongStack);  			}  		}  		if (c != -1) {  			if (readLogResult.objectGraph != null)  				readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  		}  		break;  	}  	case 'O':  	case 'o': {  		c = ReadChar ();  		if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  			while (c >= ' ')  				c = ReadChar ();  			break;  		}  		ulong objectId = ReadULong ();  		int typeIndex = ReadInt ();  		uint size = ReadUInt ();  		stackPtr = 0;  		ulong objectID;  		while ((objectID = ReadULong ()) != ulong.MaxValue) {  			if (objectID > 0) {  				ulongStack [stackPtr] = objectID;  				stackPtr++;  				if (stackPtr >= ulongStack.Length)  					ulongStack = GrowULongVector (ulongStack);  			}  		}  		if (c != -1) {  			ObjectGraph objectGraph = readLogResult.objectGraph;  			objectGraph.GetOrCreateGcType (typeIndex);  			int typeSizeStackTraceId = -1;  			int allocTickIndex = 0;  			// try to find the allocation stack trace and allocation time  			// from the live object table  			if (readLogResult.liveObjectTable != null) {  				LiveObjectTable.LiveObject liveObject;  				readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  				if (liveObject.id == objectId) {  					int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  					int typeIndexFromLiveObject = stackTrace [0];  					if (typeIndexFromLiveObject == typeIndex) {  						typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  						allocTickIndex = liveObject.allocTickIndex;  						Histogram[] h = readLogResult.heapDumpHistograms;  						if (h != null)  							h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  					}  				}  			}  			if (typeSizeStackTraceId == -1)  				typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  			ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  			gcObject.AllocTickIndex = allocTickIndex;  		}  		break;  	}  	case 'M':  	case 'm': {  		c = ReadChar ();  		int modIndex = ReadInt ();  		sb.Length = 0;  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		if (c != -1) {  			string lineString = sb.ToString ();  			int addrPos = lineString.LastIndexOf (" 0x");  			if (addrPos <= 0)  				addrPos = lineString.Length;  			int backSlashPos = lineString.LastIndexOf (@"\");  			if (backSlashPos <= 0)  				backSlashPos = -1;  			string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  			string fullName = lineString.Substring (0' addrPos);  			EnsureStringCapacity (modIndex' ref modBasicName);  			modBasicName [modIndex] = basicName;  			EnsureStringCapacity (modIndex' ref modFullName);  			modFullName [modIndex] = fullName;  		}  		break;  	}  	case 'U':  	case 'u': {  		c = ReadChar ();  		ulong oldId = ReadULong ();  		ulong newId = ReadULong ();  		uint length = ReadUInt ();  		Histogram reloHist = null;  		if (pos >= startFileOffset && pos < endFileOffset)  			reloHist = readLogResult.relocatedHistogram;  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  		break;  	}  	case 'V':  	case 'v': {  		c = ReadChar ();  		ulong startId = ReadULong ();  		uint length = ReadUInt ();  		Histogram reloHist = null;  		if (pos >= startFileOffset && pos < endFileOffset)  			reloHist = readLogResult.relocatedHistogram;  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  		break;  	}  	case 'B':  	case 'b':  		c = ReadChar ();  		int startGC = ReadInt ();  		int induced = ReadInt ();  		int condemnedGeneration = ReadInt ();  		if (startGC != 0)  			newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  		if (newGcEvent) {  			if (startGC != 0) {  				if (induced != 0) {  					for (int gen = 0; gen <= condemnedGeneration; gen++)  						inducedGcCount [gen]++;  				}  			}  			else {  				int condemnedLimit = condemnedGeneration;  				if (condemnedLimit == 2)  					condemnedLimit = 3;  				for (int gen = 0; gen <= condemnedLimit; gen++) {  					cumulativeGenerationSize [gen] += generationSize [gen];  					gcCount [gen]++;  				}  			}  		}  		for (int gen = 0; gen <= 3; gen++)  			generationSize [gen] = 0;  		while (c >= ' ') {  			ulong rangeStart = ReadULong ();  			ulong rangeLength = ReadULong ();  			ulong rangeLengthReserved = ReadULong ();  			int rangeGeneration = ReadInt ();  			if (c == -1 || rangeGeneration < 0)  				break;  			if (readLogResult.liveObjectTable != null) {  				if (startGC != 0) {  					if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  						readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  				}  				else {  					readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  				}  			}  			generationSize [rangeGeneration] += rangeLength;  		}  		if (startGC == 0 && readLogResult.liveObjectTable != null) {  			readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  		}  		break;  	case 'L':  	case 'l': {  		c = ReadChar ();  		int isCritical = ReadInt ();  		ulong objectId = ReadULong ();  		if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  			// try to find the allocation stack trace and allocation time  			// from the live object table  			LiveObjectTable.LiveObject liveObject;  			readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  			if (liveObject.id == objectId) {  				if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  					readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  				if (readLogResult.finalizerHistogram != null)  					readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  			}  		}  		break;  	}  	case 'I':  	case 'i':  		c = ReadChar ();  		int tickCount = ReadInt ();  		if (c != -1) {  			lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  			if (maxTickIndex < lastTickIndex)  				maxTickIndex = lastTickIndex;  		}  		break;  	case 'G':  	case 'g':  		c = ReadChar ();  		int gcGen0Count = ReadInt ();  		int gcGen1Count = ReadInt ();  		int gcGen2Count = ReadInt ();  		// if the newer 'b' lines occur' disregard the 'g' lines.  		if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  			if (c == -1 || gcGen0Count < 0)  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  			else  				readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  		}  		break;  	case 'N':  	case 'n': {  		c = ReadChar ();  		int funcIndex;  		int stackTraceIndex = ReadInt ();  		stackPtr = 0;  		int flag = ReadInt ();  		int matched = flag / 4;  		int hadTypeId = (flag & 2);  		bool hasTypeId = (flag & 1) == 1;  		if (hasTypeId) {  			intStack [stackPtr++] = ReadInt ();  			intStack [stackPtr++] = ReadInt ();  		}  		if (matched > 0 && c != -1) {  			/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  			otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  			int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  			if (matched > stacktrace.Length - hadTypeId)  				matched = stacktrace.Length - hadTypeId;  			for (int i = 0; i < matched; i++) {  				int funcId = stacktrace [i + hadTypeId];  				//Debug.Assert(funcId < funcName.Length);  				if (funcName [funcId] == null)  					funcName [funcId] = String.Empty;  				intStack [stackPtr++] = funcId;  				if (stackPtr >= intStack.Length) {  					intStack = GrowIntVector (intStack);  				}  			}  		}  		while ((funcIndex = ReadInt ()) >= 0) {  			intStack [stackPtr] = funcIndex;  			stackPtr++;  			if (stackPtr >= intStack.Length)  				intStack = GrowIntVector (intStack);  		}  		if (c != -1) {  			stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  		}  		break;  	}  	case 'y':  	case 'Y': {  		c = ReadChar ();  		int threadid = ReadInt ();  		if (!assembliesJustLoaded.ContainsKey (threadid)) {  			assembliesJustLoaded [threadid] = new List<string> ();  		}  		/* int assemblyId = */ReadInt ();  		while (c == ' ' || c == '\t') {  			c = ReadChar ();  		}  		sb.Length = 0;  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		string assemblyName = sb.ToString ();  		assembliesJustLoaded [threadid].Add (assemblyName);  		break;  	}  	case 'S':  	case 's': {  		c = ReadChar ();  		int stackTraceIndex = ReadInt ();  		int funcIndex;  		stackPtr = 0;  		while ((funcIndex = ReadInt ()) >= 0) {  			intStack [stackPtr] = funcIndex;  			stackPtr++;  			if (stackPtr >= intStack.Length)  				intStack = GrowIntVector (intStack);  		}  		if (c != -1) {  			stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  		}  		break;  	}  	case 'Z':  	case 'z': {  		sb.Length = 0;  		c = ReadChar ();  		while (c == ' ' || c == '\t')  			c = ReadChar ();  		while (c > '\r') {  			sb.Append ((char)c);  			c = ReadChar ();  		}  		if (c != -1) {  			lastTickIndex = AddTimePos (lastLineStartPos);  			if (maxTickIndex < lastTickIndex)  				maxTickIndex = lastTickIndex;  			commentEventList.AddEvent (lastTickIndex' sb.ToString ());  		}  		break;  	}  	case 'H':  	case 'h': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong handleId = ReadULong ();  		ulong initialObjectId = ReadULong ();  		int stacktraceId = ReadInt ();  		if (c != -1) {  			if (readLogResult.handleHash != null)  				readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  			if (readLogResult.createdHandlesHistogram != null)  				readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  		}  		break;  	}  	case 'J':  	case 'j': {  		c = ReadChar ();  		int threadId = ReadInt ();  		ulong handleId = ReadULong ();  		int stacktraceId = ReadInt ();  		if (c != -1) {  			if (readLogResult.handleHash != null) {  				if (readLogResult.handleHash.ContainsKey (handleId))  					readLogResult.handleHash.Remove (handleId);  				else {  					//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  					//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  					//for (int i = stacktrace.Length; --i >= 0; )  					//{  					//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  					//}  				}  			}  			if (readLogResult.destroyedHandlesHistogram != null)  				readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  		}  		break;  	}  	default: {  		// just ignore the unknown  		while (c != '\n' && c != '\r') {  			c = ReadChar ();  		}  		break;  	}  	}  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	if (c == '\r')  		c = ReadChar ();  	if (c == '\n') {  		c = ReadChar ();  		line++;  	}  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: if ((line % 1024) == 0) {  	int currentProgress = (int)(pos / 1024);  	if (currentProgress <= maxProgress) {  	}  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: if ((line % 1024) == 0) {  	int currentProgress = (int)(pos / 1024);  	if (currentProgress <= maxProgress) {  	}  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: switch (c) {  case -1:  	break;  case 'F':  case 'f': {  	c = ReadChar ();  	int funcIndex = ReadInt ();  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	string name = ReadString (sb' ' '' false' 255);  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	string signature = ReadString (sb' '\r'' true' 1023);  	ulong addr = ReadULong ();  	uint size = ReadUInt ();  	int modIndex = ReadInt ();  	int stackIndex = ReadInt ();  	if (c != -1) {  		EnsureStringCapacity (funcIndex' ref funcName);  		funcName [funcIndex] = name;  		EnsureStringCapacity (funcIndex' ref funcSignature);  		funcSignature [funcIndex] = signature;  		EnsureIntCapacity (funcIndex' ref funcModule);  		funcModule [funcIndex] = modIndex;  		string nameAndSignature = name;  		if (signature != null)  			nameAndSignature = name + ' ' + signature;  		if (stackIndex >= 0 && readLogResult.functionList != null) {  			funcSignatureIdHash [nameAndSignature] = funcIndex;  			readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  		}  	}  	break;  }  case 'T':  case 't': {  	c = ReadChar ();  	int typeIndex = ReadInt ();  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	if (c != -1 && Char.IsDigit ((char)c)) {  		if (ReadInt () != 0) {  			finalizableTypes [typeIndex] = true;  		}  	}  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	string typeName = ReadString (sb' '\r'' false' 1023);  	if (c != -1) {  		AddTypeName (typeIndex' typeName);  	}  	break;  }  // 'A' with thread identifier  case '!': {  	c = ReadChar ();  	int threadId = ReadInt ();  	ulong id = ReadULong ();  	int typeSizeStackTraceIndex = ReadInt ();  	typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  	if (c != -1) {  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  		if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  			// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  			readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  		}  		List<string> prev;  		if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  			foreach (string assemblyName in prev) {  				assemblies [assemblyName] = -typeSizeStackTraceIndex;  			}  			prev.Clear ();  		}  	}  	readLogResult.hadAllocInfo = true;  	readLogResult.hadCallInfo = true;  	break;  }  case 'A':  case 'a': {  	c = ReadChar ();  	ulong id = ReadULong ();  	int typeSizeStackTraceIndex = ReadInt ();  	typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  	if (c != -1) {  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  		if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  			// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  			readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  		}  	}  	readLogResult.hadAllocInfo = true;  	readLogResult.hadCallInfo = true;  	break;  }  case 'C':  case 'c': {  	c = ReadChar ();  	if (pos < startFileOffset || pos >= endFileOffset) {  		while (c >= ' ')  			c = ReadChar ();  		break;  	}  	int threadIndex = ReadInt ();  	int stackTraceIndex = ReadInt ();  	stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  	if (c != -1) {  		if (readLogResult.callstackHistogram != null) {  			readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  		}  		List<string> prev;  		if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  			foreach (string assemblyName in prev) {  				assemblies [assemblyName] = stackTraceIndex;  			}  			prev.Clear ();  		}  	}  	readLogResult.hadCallInfo = true;  	break;  }  case 'E':  case 'e': {  	c = ReadChar ();  	extendedRootInfoSeen = true;  	thisIsR = true;  	if (pos < startFileOffset || pos >= endFileOffset) {  		while (c >= ' ')  			c = ReadChar ();  		break;  	}  	if (!previousWasR) {  		heapDumpEventList.AddEvent (lastTickIndex' null);  		if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  			readLogResult.objectGraph.BuildTypeGraph ();  			readLogResult.objectGraph.Neuter ();  		}  		Histogram[] h = readLogResult.heapDumpHistograms;  		if (h != null) {  			if (h.Length == requestedIndex)  				readLogResult.requestedObjectGraph = readLogResult.objectGraph;  			readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  			for (int i = 0; i < h.Length; i++)  				readLogResult.heapDumpHistograms [i] = h [i];  			readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  		}  		readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  	}  	ulong objectID = ReadULong ();  	GcRootKind rootKind = (GcRootKind)ReadInt ();  	GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  	ulong rootID = ReadULong ();  	ObjectGraph objectGraph = readLogResult.objectGraph;  	if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  		string rootName;  		switch (rootKind) {  		case GcRootKind.Stack:  			rootName = "Stack";  			break;  		case GcRootKind.Finalizer:  			rootName = "Finalizer";  			break;  		case GcRootKind.Handle:  			rootName = "Handle";  			break;  		default:  			rootName = "Other";  			break;  		}  		if ((rootFlags & GcRootFlags.Pinning) != 0)  			rootName += "' Pinning";  		if ((rootFlags & GcRootFlags.WeakRef) != 0)  			rootName += "' WeakRef";  		if ((rootFlags & GcRootFlags.Interior) != 0)  			rootName += "' Interior";  		if ((rootFlags & GcRootFlags.Refcounted) != 0)  			rootName += "' RefCounted";  		int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  		ulongStack [0] = objectID;  		ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  		objectGraph.AddRootObject (rootObject' rootID);  	}  	break;  }  case 'R':  case 'r': {  	c = ReadChar ();  	thisIsR = true;  	if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  		while (c >= ' ')  			c = ReadChar ();  		Histogram[] h = readLogResult.heapDumpHistograms;  		if (h != null) {  			if (h.Length == requestedIndex)  				readLogResult.requestedObjectGraph = readLogResult.objectGraph;  		}  		break;  	}  	if (!previousWasR) {  		heapDumpEventList.AddEvent (lastTickIndex' null);  		if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  			readLogResult.objectGraph.BuildTypeGraph ();  			readLogResult.objectGraph.Neuter ();  		}  		Histogram[] h = readLogResult.heapDumpHistograms;  		if (h != null) {  			if (h.Length == requestedIndex)  				readLogResult.requestedObjectGraph = readLogResult.objectGraph;  			readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  			for (int i = 0; i < h.Length; i++)  				readLogResult.heapDumpHistograms [i] = h [i];  			readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  		}  		readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  	}  	stackPtr = 0;  	ulong objectID;  	while ((objectID = ReadULong ()) != ulong.MaxValue) {  		if (objectID > 0) {  			ulongStack [stackPtr] = objectID;  			stackPtr++;  			if (stackPtr >= ulongStack.Length)  				ulongStack = GrowULongVector (ulongStack);  		}  	}  	if (c != -1) {  		if (readLogResult.objectGraph != null)  			readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  	}  	break;  }  case 'O':  case 'o': {  	c = ReadChar ();  	if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  		while (c >= ' ')  			c = ReadChar ();  		break;  	}  	ulong objectId = ReadULong ();  	int typeIndex = ReadInt ();  	uint size = ReadUInt ();  	stackPtr = 0;  	ulong objectID;  	while ((objectID = ReadULong ()) != ulong.MaxValue) {  		if (objectID > 0) {  			ulongStack [stackPtr] = objectID;  			stackPtr++;  			if (stackPtr >= ulongStack.Length)  				ulongStack = GrowULongVector (ulongStack);  		}  	}  	if (c != -1) {  		ObjectGraph objectGraph = readLogResult.objectGraph;  		objectGraph.GetOrCreateGcType (typeIndex);  		int typeSizeStackTraceId = -1;  		int allocTickIndex = 0;  		// try to find the allocation stack trace and allocation time  		// from the live object table  		if (readLogResult.liveObjectTable != null) {  			LiveObjectTable.LiveObject liveObject;  			readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  			if (liveObject.id == objectId) {  				int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  				int typeIndexFromLiveObject = stackTrace [0];  				if (typeIndexFromLiveObject == typeIndex) {  					typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  					allocTickIndex = liveObject.allocTickIndex;  					Histogram[] h = readLogResult.heapDumpHistograms;  					if (h != null)  						h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  				}  			}  		}  		if (typeSizeStackTraceId == -1)  			typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  		ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  		gcObject.AllocTickIndex = allocTickIndex;  	}  	break;  }  case 'M':  case 'm': {  	c = ReadChar ();  	int modIndex = ReadInt ();  	sb.Length = 0;  	while (c > '\r') {  		sb.Append ((char)c);  		c = ReadChar ();  	}  	if (c != -1) {  		string lineString = sb.ToString ();  		int addrPos = lineString.LastIndexOf (" 0x");  		if (addrPos <= 0)  			addrPos = lineString.Length;  		int backSlashPos = lineString.LastIndexOf (@"\");  		if (backSlashPos <= 0)  			backSlashPos = -1;  		string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  		string fullName = lineString.Substring (0' addrPos);  		EnsureStringCapacity (modIndex' ref modBasicName);  		modBasicName [modIndex] = basicName;  		EnsureStringCapacity (modIndex' ref modFullName);  		modFullName [modIndex] = fullName;  	}  	break;  }  case 'U':  case 'u': {  	c = ReadChar ();  	ulong oldId = ReadULong ();  	ulong newId = ReadULong ();  	uint length = ReadUInt ();  	Histogram reloHist = null;  	if (pos >= startFileOffset && pos < endFileOffset)  		reloHist = readLogResult.relocatedHistogram;  	if (readLogResult.liveObjectTable != null)  		readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  	break;  }  case 'V':  case 'v': {  	c = ReadChar ();  	ulong startId = ReadULong ();  	uint length = ReadUInt ();  	Histogram reloHist = null;  	if (pos >= startFileOffset && pos < endFileOffset)  		reloHist = readLogResult.relocatedHistogram;  	if (readLogResult.liveObjectTable != null)  		readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  	break;  }  case 'B':  case 'b':  	c = ReadChar ();  	int startGC = ReadInt ();  	int induced = ReadInt ();  	int condemnedGeneration = ReadInt ();  	if (startGC != 0)  		newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  	if (newGcEvent) {  		if (startGC != 0) {  			if (induced != 0) {  				for (int gen = 0; gen <= condemnedGeneration; gen++)  					inducedGcCount [gen]++;  			}  		}  		else {  			int condemnedLimit = condemnedGeneration;  			if (condemnedLimit == 2)  				condemnedLimit = 3;  			for (int gen = 0; gen <= condemnedLimit; gen++) {  				cumulativeGenerationSize [gen] += generationSize [gen];  				gcCount [gen]++;  			}  		}  	}  	for (int gen = 0; gen <= 3; gen++)  		generationSize [gen] = 0;  	while (c >= ' ') {  		ulong rangeStart = ReadULong ();  		ulong rangeLength = ReadULong ();  		ulong rangeLengthReserved = ReadULong ();  		int rangeGeneration = ReadInt ();  		if (c == -1 || rangeGeneration < 0)  			break;  		if (readLogResult.liveObjectTable != null) {  			if (startGC != 0) {  				if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  					readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  			}  			else {  				readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  			}  		}  		generationSize [rangeGeneration] += rangeLength;  	}  	if (startGC == 0 && readLogResult.liveObjectTable != null) {  		readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  	}  	break;  case 'L':  case 'l': {  	c = ReadChar ();  	int isCritical = ReadInt ();  	ulong objectId = ReadULong ();  	if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  		// try to find the allocation stack trace and allocation time  		// from the live object table  		LiveObjectTable.LiveObject liveObject;  		readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  		if (liveObject.id == objectId) {  			if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  				readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  			if (readLogResult.finalizerHistogram != null)  				readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  		}  	}  	break;  }  case 'I':  case 'i':  	c = ReadChar ();  	int tickCount = ReadInt ();  	if (c != -1) {  		lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  		if (maxTickIndex < lastTickIndex)  			maxTickIndex = lastTickIndex;  	}  	break;  case 'G':  case 'g':  	c = ReadChar ();  	int gcGen0Count = ReadInt ();  	int gcGen1Count = ReadInt ();  	int gcGen2Count = ReadInt ();  	// if the newer 'b' lines occur' disregard the 'g' lines.  	if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  		if (c == -1 || gcGen0Count < 0)  			readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  		else  			readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  	}  	break;  case 'N':  case 'n': {  	c = ReadChar ();  	int funcIndex;  	int stackTraceIndex = ReadInt ();  	stackPtr = 0;  	int flag = ReadInt ();  	int matched = flag / 4;  	int hadTypeId = (flag & 2);  	bool hasTypeId = (flag & 1) == 1;  	if (hasTypeId) {  		intStack [stackPtr++] = ReadInt ();  		intStack [stackPtr++] = ReadInt ();  	}  	if (matched > 0 && c != -1) {  		/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  		otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  		int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  		if (matched > stacktrace.Length - hadTypeId)  			matched = stacktrace.Length - hadTypeId;  		for (int i = 0; i < matched; i++) {  			int funcId = stacktrace [i + hadTypeId];  			//Debug.Assert(funcId < funcName.Length);  			if (funcName [funcId] == null)  				funcName [funcId] = String.Empty;  			intStack [stackPtr++] = funcId;  			if (stackPtr >= intStack.Length) {  				intStack = GrowIntVector (intStack);  			}  		}  	}  	while ((funcIndex = ReadInt ()) >= 0) {  		intStack [stackPtr] = funcIndex;  		stackPtr++;  		if (stackPtr >= intStack.Length)  			intStack = GrowIntVector (intStack);  	}  	if (c != -1) {  		stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  	}  	break;  }  case 'y':  case 'Y': {  	c = ReadChar ();  	int threadid = ReadInt ();  	if (!assembliesJustLoaded.ContainsKey (threadid)) {  		assembliesJustLoaded [threadid] = new List<string> ();  	}  	/* int assemblyId = */ReadInt ();  	while (c == ' ' || c == '\t') {  		c = ReadChar ();  	}  	sb.Length = 0;  	while (c > '\r') {  		sb.Append ((char)c);  		c = ReadChar ();  	}  	string assemblyName = sb.ToString ();  	assembliesJustLoaded [threadid].Add (assemblyName);  	break;  }  case 'S':  case 's': {  	c = ReadChar ();  	int stackTraceIndex = ReadInt ();  	int funcIndex;  	stackPtr = 0;  	while ((funcIndex = ReadInt ()) >= 0) {  		intStack [stackPtr] = funcIndex;  		stackPtr++;  		if (stackPtr >= intStack.Length)  			intStack = GrowIntVector (intStack);  	}  	if (c != -1) {  		stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  	}  	break;  }  case 'Z':  case 'z': {  	sb.Length = 0;  	c = ReadChar ();  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	while (c > '\r') {  		sb.Append ((char)c);  		c = ReadChar ();  	}  	if (c != -1) {  		lastTickIndex = AddTimePos (lastLineStartPos);  		if (maxTickIndex < lastTickIndex)  			maxTickIndex = lastTickIndex;  		commentEventList.AddEvent (lastTickIndex' sb.ToString ());  	}  	break;  }  case 'H':  case 'h': {  	c = ReadChar ();  	int threadId = ReadInt ();  	ulong handleId = ReadULong ();  	ulong initialObjectId = ReadULong ();  	int stacktraceId = ReadInt ();  	if (c != -1) {  		if (readLogResult.handleHash != null)  			readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  		if (readLogResult.createdHandlesHistogram != null)  			readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  	}  	break;  }  case 'J':  case 'j': {  	c = ReadChar ();  	int threadId = ReadInt ();  	ulong handleId = ReadULong ();  	int stacktraceId = ReadInt ();  	if (c != -1) {  		if (readLogResult.handleHash != null) {  			if (readLogResult.handleHash.ContainsKey (handleId))  				readLogResult.handleHash.Remove (handleId);  			else {  				//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  				//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  				//for (int i = stacktrace.Length; --i >= 0; )  				//{  				//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  				//}  			}  		}  		if (readLogResult.destroyedHandlesHistogram != null)  			readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  	}  	break;  }  default: {  	// just ignore the unknown  	while (c != '\n' && c != '\r') {  		c = ReadChar ();  	}  	break;  }  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: switch (c) {  case -1:  	break;  case 'F':  case 'f': {  	c = ReadChar ();  	int funcIndex = ReadInt ();  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	string name = ReadString (sb' ' '' false' 255);  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	string signature = ReadString (sb' '\r'' true' 1023);  	ulong addr = ReadULong ();  	uint size = ReadUInt ();  	int modIndex = ReadInt ();  	int stackIndex = ReadInt ();  	if (c != -1) {  		EnsureStringCapacity (funcIndex' ref funcName);  		funcName [funcIndex] = name;  		EnsureStringCapacity (funcIndex' ref funcSignature);  		funcSignature [funcIndex] = signature;  		EnsureIntCapacity (funcIndex' ref funcModule);  		funcModule [funcIndex] = modIndex;  		string nameAndSignature = name;  		if (signature != null)  			nameAndSignature = name + ' ' + signature;  		if (stackIndex >= 0 && readLogResult.functionList != null) {  			funcSignatureIdHash [nameAndSignature] = funcIndex;  			readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  		}  	}  	break;  }  case 'T':  case 't': {  	c = ReadChar ();  	int typeIndex = ReadInt ();  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	if (c != -1 && Char.IsDigit ((char)c)) {  		if (ReadInt () != 0) {  			finalizableTypes [typeIndex] = true;  		}  	}  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	string typeName = ReadString (sb' '\r'' false' 1023);  	if (c != -1) {  		AddTypeName (typeIndex' typeName);  	}  	break;  }  // 'A' with thread identifier  case '!': {  	c = ReadChar ();  	int threadId = ReadInt ();  	ulong id = ReadULong ();  	int typeSizeStackTraceIndex = ReadInt ();  	typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  	if (c != -1) {  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  		if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  			// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  			readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  		}  		List<string> prev;  		if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  			foreach (string assemblyName in prev) {  				assemblies [assemblyName] = -typeSizeStackTraceIndex;  			}  			prev.Clear ();  		}  	}  	readLogResult.hadAllocInfo = true;  	readLogResult.hadCallInfo = true;  	break;  }  case 'A':  case 'a': {  	c = ReadChar ();  	ulong id = ReadULong ();  	int typeSizeStackTraceIndex = ReadInt ();  	typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  	if (c != -1) {  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  		if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  			// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  			readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  		}  	}  	readLogResult.hadAllocInfo = true;  	readLogResult.hadCallInfo = true;  	break;  }  case 'C':  case 'c': {  	c = ReadChar ();  	if (pos < startFileOffset || pos >= endFileOffset) {  		while (c >= ' ')  			c = ReadChar ();  		break;  	}  	int threadIndex = ReadInt ();  	int stackTraceIndex = ReadInt ();  	stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  	if (c != -1) {  		if (readLogResult.callstackHistogram != null) {  			readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  		}  		List<string> prev;  		if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  			foreach (string assemblyName in prev) {  				assemblies [assemblyName] = stackTraceIndex;  			}  			prev.Clear ();  		}  	}  	readLogResult.hadCallInfo = true;  	break;  }  case 'E':  case 'e': {  	c = ReadChar ();  	extendedRootInfoSeen = true;  	thisIsR = true;  	if (pos < startFileOffset || pos >= endFileOffset) {  		while (c >= ' ')  			c = ReadChar ();  		break;  	}  	if (!previousWasR) {  		heapDumpEventList.AddEvent (lastTickIndex' null);  		if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  			readLogResult.objectGraph.BuildTypeGraph ();  			readLogResult.objectGraph.Neuter ();  		}  		Histogram[] h = readLogResult.heapDumpHistograms;  		if (h != null) {  			if (h.Length == requestedIndex)  				readLogResult.requestedObjectGraph = readLogResult.objectGraph;  			readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  			for (int i = 0; i < h.Length; i++)  				readLogResult.heapDumpHistograms [i] = h [i];  			readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  		}  		readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  	}  	ulong objectID = ReadULong ();  	GcRootKind rootKind = (GcRootKind)ReadInt ();  	GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  	ulong rootID = ReadULong ();  	ObjectGraph objectGraph = readLogResult.objectGraph;  	if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  		string rootName;  		switch (rootKind) {  		case GcRootKind.Stack:  			rootName = "Stack";  			break;  		case GcRootKind.Finalizer:  			rootName = "Finalizer";  			break;  		case GcRootKind.Handle:  			rootName = "Handle";  			break;  		default:  			rootName = "Other";  			break;  		}  		if ((rootFlags & GcRootFlags.Pinning) != 0)  			rootName += "' Pinning";  		if ((rootFlags & GcRootFlags.WeakRef) != 0)  			rootName += "' WeakRef";  		if ((rootFlags & GcRootFlags.Interior) != 0)  			rootName += "' Interior";  		if ((rootFlags & GcRootFlags.Refcounted) != 0)  			rootName += "' RefCounted";  		int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  		ulongStack [0] = objectID;  		ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  		objectGraph.AddRootObject (rootObject' rootID);  	}  	break;  }  case 'R':  case 'r': {  	c = ReadChar ();  	thisIsR = true;  	if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  		while (c >= ' ')  			c = ReadChar ();  		Histogram[] h = readLogResult.heapDumpHistograms;  		if (h != null) {  			if (h.Length == requestedIndex)  				readLogResult.requestedObjectGraph = readLogResult.objectGraph;  		}  		break;  	}  	if (!previousWasR) {  		heapDumpEventList.AddEvent (lastTickIndex' null);  		if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  			readLogResult.objectGraph.BuildTypeGraph ();  			readLogResult.objectGraph.Neuter ();  		}  		Histogram[] h = readLogResult.heapDumpHistograms;  		if (h != null) {  			if (h.Length == requestedIndex)  				readLogResult.requestedObjectGraph = readLogResult.objectGraph;  			readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  			for (int i = 0; i < h.Length; i++)  				readLogResult.heapDumpHistograms [i] = h [i];  			readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  		}  		readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  	}  	stackPtr = 0;  	ulong objectID;  	while ((objectID = ReadULong ()) != ulong.MaxValue) {  		if (objectID > 0) {  			ulongStack [stackPtr] = objectID;  			stackPtr++;  			if (stackPtr >= ulongStack.Length)  				ulongStack = GrowULongVector (ulongStack);  		}  	}  	if (c != -1) {  		if (readLogResult.objectGraph != null)  			readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  	}  	break;  }  case 'O':  case 'o': {  	c = ReadChar ();  	if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  		while (c >= ' ')  			c = ReadChar ();  		break;  	}  	ulong objectId = ReadULong ();  	int typeIndex = ReadInt ();  	uint size = ReadUInt ();  	stackPtr = 0;  	ulong objectID;  	while ((objectID = ReadULong ()) != ulong.MaxValue) {  		if (objectID > 0) {  			ulongStack [stackPtr] = objectID;  			stackPtr++;  			if (stackPtr >= ulongStack.Length)  				ulongStack = GrowULongVector (ulongStack);  		}  	}  	if (c != -1) {  		ObjectGraph objectGraph = readLogResult.objectGraph;  		objectGraph.GetOrCreateGcType (typeIndex);  		int typeSizeStackTraceId = -1;  		int allocTickIndex = 0;  		// try to find the allocation stack trace and allocation time  		// from the live object table  		if (readLogResult.liveObjectTable != null) {  			LiveObjectTable.LiveObject liveObject;  			readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  			if (liveObject.id == objectId) {  				int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  				int typeIndexFromLiveObject = stackTrace [0];  				if (typeIndexFromLiveObject == typeIndex) {  					typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  					allocTickIndex = liveObject.allocTickIndex;  					Histogram[] h = readLogResult.heapDumpHistograms;  					if (h != null)  						h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  				}  			}  		}  		if (typeSizeStackTraceId == -1)  			typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  		ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  		gcObject.AllocTickIndex = allocTickIndex;  	}  	break;  }  case 'M':  case 'm': {  	c = ReadChar ();  	int modIndex = ReadInt ();  	sb.Length = 0;  	while (c > '\r') {  		sb.Append ((char)c);  		c = ReadChar ();  	}  	if (c != -1) {  		string lineString = sb.ToString ();  		int addrPos = lineString.LastIndexOf (" 0x");  		if (addrPos <= 0)  			addrPos = lineString.Length;  		int backSlashPos = lineString.LastIndexOf (@"\");  		if (backSlashPos <= 0)  			backSlashPos = -1;  		string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  		string fullName = lineString.Substring (0' addrPos);  		EnsureStringCapacity (modIndex' ref modBasicName);  		modBasicName [modIndex] = basicName;  		EnsureStringCapacity (modIndex' ref modFullName);  		modFullName [modIndex] = fullName;  	}  	break;  }  case 'U':  case 'u': {  	c = ReadChar ();  	ulong oldId = ReadULong ();  	ulong newId = ReadULong ();  	uint length = ReadUInt ();  	Histogram reloHist = null;  	if (pos >= startFileOffset && pos < endFileOffset)  		reloHist = readLogResult.relocatedHistogram;  	if (readLogResult.liveObjectTable != null)  		readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  	break;  }  case 'V':  case 'v': {  	c = ReadChar ();  	ulong startId = ReadULong ();  	uint length = ReadUInt ();  	Histogram reloHist = null;  	if (pos >= startFileOffset && pos < endFileOffset)  		reloHist = readLogResult.relocatedHistogram;  	if (readLogResult.liveObjectTable != null)  		readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  	break;  }  case 'B':  case 'b':  	c = ReadChar ();  	int startGC = ReadInt ();  	int induced = ReadInt ();  	int condemnedGeneration = ReadInt ();  	if (startGC != 0)  		newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  	if (newGcEvent) {  		if (startGC != 0) {  			if (induced != 0) {  				for (int gen = 0; gen <= condemnedGeneration; gen++)  					inducedGcCount [gen]++;  			}  		}  		else {  			int condemnedLimit = condemnedGeneration;  			if (condemnedLimit == 2)  				condemnedLimit = 3;  			for (int gen = 0; gen <= condemnedLimit; gen++) {  				cumulativeGenerationSize [gen] += generationSize [gen];  				gcCount [gen]++;  			}  		}  	}  	for (int gen = 0; gen <= 3; gen++)  		generationSize [gen] = 0;  	while (c >= ' ') {  		ulong rangeStart = ReadULong ();  		ulong rangeLength = ReadULong ();  		ulong rangeLengthReserved = ReadULong ();  		int rangeGeneration = ReadInt ();  		if (c == -1 || rangeGeneration < 0)  			break;  		if (readLogResult.liveObjectTable != null) {  			if (startGC != 0) {  				if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  					readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  			}  			else {  				readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  			}  		}  		generationSize [rangeGeneration] += rangeLength;  	}  	if (startGC == 0 && readLogResult.liveObjectTable != null) {  		readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  	}  	break;  case 'L':  case 'l': {  	c = ReadChar ();  	int isCritical = ReadInt ();  	ulong objectId = ReadULong ();  	if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  		// try to find the allocation stack trace and allocation time  		// from the live object table  		LiveObjectTable.LiveObject liveObject;  		readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  		if (liveObject.id == objectId) {  			if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  				readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  			if (readLogResult.finalizerHistogram != null)  				readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  		}  	}  	break;  }  case 'I':  case 'i':  	c = ReadChar ();  	int tickCount = ReadInt ();  	if (c != -1) {  		lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  		if (maxTickIndex < lastTickIndex)  			maxTickIndex = lastTickIndex;  	}  	break;  case 'G':  case 'g':  	c = ReadChar ();  	int gcGen0Count = ReadInt ();  	int gcGen1Count = ReadInt ();  	int gcGen2Count = ReadInt ();  	// if the newer 'b' lines occur' disregard the 'g' lines.  	if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  		if (c == -1 || gcGen0Count < 0)  			readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  		else  			readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  	}  	break;  case 'N':  case 'n': {  	c = ReadChar ();  	int funcIndex;  	int stackTraceIndex = ReadInt ();  	stackPtr = 0;  	int flag = ReadInt ();  	int matched = flag / 4;  	int hadTypeId = (flag & 2);  	bool hasTypeId = (flag & 1) == 1;  	if (hasTypeId) {  		intStack [stackPtr++] = ReadInt ();  		intStack [stackPtr++] = ReadInt ();  	}  	if (matched > 0 && c != -1) {  		/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  		otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  		int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  		if (matched > stacktrace.Length - hadTypeId)  			matched = stacktrace.Length - hadTypeId;  		for (int i = 0; i < matched; i++) {  			int funcId = stacktrace [i + hadTypeId];  			//Debug.Assert(funcId < funcName.Length);  			if (funcName [funcId] == null)  				funcName [funcId] = String.Empty;  			intStack [stackPtr++] = funcId;  			if (stackPtr >= intStack.Length) {  				intStack = GrowIntVector (intStack);  			}  		}  	}  	while ((funcIndex = ReadInt ()) >= 0) {  		intStack [stackPtr] = funcIndex;  		stackPtr++;  		if (stackPtr >= intStack.Length)  			intStack = GrowIntVector (intStack);  	}  	if (c != -1) {  		stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  	}  	break;  }  case 'y':  case 'Y': {  	c = ReadChar ();  	int threadid = ReadInt ();  	if (!assembliesJustLoaded.ContainsKey (threadid)) {  		assembliesJustLoaded [threadid] = new List<string> ();  	}  	/* int assemblyId = */ReadInt ();  	while (c == ' ' || c == '\t') {  		c = ReadChar ();  	}  	sb.Length = 0;  	while (c > '\r') {  		sb.Append ((char)c);  		c = ReadChar ();  	}  	string assemblyName = sb.ToString ();  	assembliesJustLoaded [threadid].Add (assemblyName);  	break;  }  case 'S':  case 's': {  	c = ReadChar ();  	int stackTraceIndex = ReadInt ();  	int funcIndex;  	stackPtr = 0;  	while ((funcIndex = ReadInt ()) >= 0) {  		intStack [stackPtr] = funcIndex;  		stackPtr++;  		if (stackPtr >= intStack.Length)  			intStack = GrowIntVector (intStack);  	}  	if (c != -1) {  		stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  	}  	break;  }  case 'Z':  case 'z': {  	sb.Length = 0;  	c = ReadChar ();  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	while (c > '\r') {  		sb.Append ((char)c);  		c = ReadChar ();  	}  	if (c != -1) {  		lastTickIndex = AddTimePos (lastLineStartPos);  		if (maxTickIndex < lastTickIndex)  			maxTickIndex = lastTickIndex;  		commentEventList.AddEvent (lastTickIndex' sb.ToString ());  	}  	break;  }  case 'H':  case 'h': {  	c = ReadChar ();  	int threadId = ReadInt ();  	ulong handleId = ReadULong ();  	ulong initialObjectId = ReadULong ();  	int stacktraceId = ReadInt ();  	if (c != -1) {  		if (readLogResult.handleHash != null)  			readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  		if (readLogResult.createdHandlesHistogram != null)  			readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  	}  	break;  }  case 'J':  case 'j': {  	c = ReadChar ();  	int threadId = ReadInt ();  	ulong handleId = ReadULong ();  	int stacktraceId = ReadInt ();  	if (c != -1) {  		if (readLogResult.handleHash != null) {  			if (readLogResult.handleHash.ContainsKey (handleId))  				readLogResult.handleHash.Remove (handleId);  			else {  				//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  				//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  				//for (int i = stacktrace.Length; --i >= 0; )  				//{  				//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  				//}  			}  		}  		if (readLogResult.destroyedHandlesHistogram != null)  			readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  	}  	break;  }  default: {  	// just ignore the unknown  	while (c != '\n' && c != '\r') {  		c = ReadChar ();  	}  	break;  }  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: switch (c) {  case -1:  	break;  case 'F':  case 'f': {  	c = ReadChar ();  	int funcIndex = ReadInt ();  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	string name = ReadString (sb' ' '' false' 255);  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	string signature = ReadString (sb' '\r'' true' 1023);  	ulong addr = ReadULong ();  	uint size = ReadUInt ();  	int modIndex = ReadInt ();  	int stackIndex = ReadInt ();  	if (c != -1) {  		EnsureStringCapacity (funcIndex' ref funcName);  		funcName [funcIndex] = name;  		EnsureStringCapacity (funcIndex' ref funcSignature);  		funcSignature [funcIndex] = signature;  		EnsureIntCapacity (funcIndex' ref funcModule);  		funcModule [funcIndex] = modIndex;  		string nameAndSignature = name;  		if (signature != null)  			nameAndSignature = name + ' ' + signature;  		if (stackIndex >= 0 && readLogResult.functionList != null) {  			funcSignatureIdHash [nameAndSignature] = funcIndex;  			readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  		}  	}  	break;  }  case 'T':  case 't': {  	c = ReadChar ();  	int typeIndex = ReadInt ();  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	if (c != -1 && Char.IsDigit ((char)c)) {  		if (ReadInt () != 0) {  			finalizableTypes [typeIndex] = true;  		}  	}  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	string typeName = ReadString (sb' '\r'' false' 1023);  	if (c != -1) {  		AddTypeName (typeIndex' typeName);  	}  	break;  }  // 'A' with thread identifier  case '!': {  	c = ReadChar ();  	int threadId = ReadInt ();  	ulong id = ReadULong ();  	int typeSizeStackTraceIndex = ReadInt ();  	typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  	if (c != -1) {  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  		if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  			// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  			readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  		}  		List<string> prev;  		if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  			foreach (string assemblyName in prev) {  				assemblies [assemblyName] = -typeSizeStackTraceIndex;  			}  			prev.Clear ();  		}  	}  	readLogResult.hadAllocInfo = true;  	readLogResult.hadCallInfo = true;  	break;  }  case 'A':  case 'a': {  	c = ReadChar ();  	ulong id = ReadULong ();  	int typeSizeStackTraceIndex = ReadInt ();  	typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  	if (c != -1) {  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  		if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  			// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  			readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  		}  	}  	readLogResult.hadAllocInfo = true;  	readLogResult.hadCallInfo = true;  	break;  }  case 'C':  case 'c': {  	c = ReadChar ();  	if (pos < startFileOffset || pos >= endFileOffset) {  		while (c >= ' ')  			c = ReadChar ();  		break;  	}  	int threadIndex = ReadInt ();  	int stackTraceIndex = ReadInt ();  	stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  	if (c != -1) {  		if (readLogResult.callstackHistogram != null) {  			readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  		}  		List<string> prev;  		if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  			foreach (string assemblyName in prev) {  				assemblies [assemblyName] = stackTraceIndex;  			}  			prev.Clear ();  		}  	}  	readLogResult.hadCallInfo = true;  	break;  }  case 'E':  case 'e': {  	c = ReadChar ();  	extendedRootInfoSeen = true;  	thisIsR = true;  	if (pos < startFileOffset || pos >= endFileOffset) {  		while (c >= ' ')  			c = ReadChar ();  		break;  	}  	if (!previousWasR) {  		heapDumpEventList.AddEvent (lastTickIndex' null);  		if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  			readLogResult.objectGraph.BuildTypeGraph ();  			readLogResult.objectGraph.Neuter ();  		}  		Histogram[] h = readLogResult.heapDumpHistograms;  		if (h != null) {  			if (h.Length == requestedIndex)  				readLogResult.requestedObjectGraph = readLogResult.objectGraph;  			readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  			for (int i = 0; i < h.Length; i++)  				readLogResult.heapDumpHistograms [i] = h [i];  			readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  		}  		readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  	}  	ulong objectID = ReadULong ();  	GcRootKind rootKind = (GcRootKind)ReadInt ();  	GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  	ulong rootID = ReadULong ();  	ObjectGraph objectGraph = readLogResult.objectGraph;  	if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  		string rootName;  		switch (rootKind) {  		case GcRootKind.Stack:  			rootName = "Stack";  			break;  		case GcRootKind.Finalizer:  			rootName = "Finalizer";  			break;  		case GcRootKind.Handle:  			rootName = "Handle";  			break;  		default:  			rootName = "Other";  			break;  		}  		if ((rootFlags & GcRootFlags.Pinning) != 0)  			rootName += "' Pinning";  		if ((rootFlags & GcRootFlags.WeakRef) != 0)  			rootName += "' WeakRef";  		if ((rootFlags & GcRootFlags.Interior) != 0)  			rootName += "' Interior";  		if ((rootFlags & GcRootFlags.Refcounted) != 0)  			rootName += "' RefCounted";  		int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  		ulongStack [0] = objectID;  		ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  		objectGraph.AddRootObject (rootObject' rootID);  	}  	break;  }  case 'R':  case 'r': {  	c = ReadChar ();  	thisIsR = true;  	if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  		while (c >= ' ')  			c = ReadChar ();  		Histogram[] h = readLogResult.heapDumpHistograms;  		if (h != null) {  			if (h.Length == requestedIndex)  				readLogResult.requestedObjectGraph = readLogResult.objectGraph;  		}  		break;  	}  	if (!previousWasR) {  		heapDumpEventList.AddEvent (lastTickIndex' null);  		if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  			readLogResult.objectGraph.BuildTypeGraph ();  			readLogResult.objectGraph.Neuter ();  		}  		Histogram[] h = readLogResult.heapDumpHistograms;  		if (h != null) {  			if (h.Length == requestedIndex)  				readLogResult.requestedObjectGraph = readLogResult.objectGraph;  			readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  			for (int i = 0; i < h.Length; i++)  				readLogResult.heapDumpHistograms [i] = h [i];  			readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  		}  		readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  	}  	stackPtr = 0;  	ulong objectID;  	while ((objectID = ReadULong ()) != ulong.MaxValue) {  		if (objectID > 0) {  			ulongStack [stackPtr] = objectID;  			stackPtr++;  			if (stackPtr >= ulongStack.Length)  				ulongStack = GrowULongVector (ulongStack);  		}  	}  	if (c != -1) {  		if (readLogResult.objectGraph != null)  			readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  	}  	break;  }  case 'O':  case 'o': {  	c = ReadChar ();  	if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  		while (c >= ' ')  			c = ReadChar ();  		break;  	}  	ulong objectId = ReadULong ();  	int typeIndex = ReadInt ();  	uint size = ReadUInt ();  	stackPtr = 0;  	ulong objectID;  	while ((objectID = ReadULong ()) != ulong.MaxValue) {  		if (objectID > 0) {  			ulongStack [stackPtr] = objectID;  			stackPtr++;  			if (stackPtr >= ulongStack.Length)  				ulongStack = GrowULongVector (ulongStack);  		}  	}  	if (c != -1) {  		ObjectGraph objectGraph = readLogResult.objectGraph;  		objectGraph.GetOrCreateGcType (typeIndex);  		int typeSizeStackTraceId = -1;  		int allocTickIndex = 0;  		// try to find the allocation stack trace and allocation time  		// from the live object table  		if (readLogResult.liveObjectTable != null) {  			LiveObjectTable.LiveObject liveObject;  			readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  			if (liveObject.id == objectId) {  				int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  				int typeIndexFromLiveObject = stackTrace [0];  				if (typeIndexFromLiveObject == typeIndex) {  					typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  					allocTickIndex = liveObject.allocTickIndex;  					Histogram[] h = readLogResult.heapDumpHistograms;  					if (h != null)  						h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  				}  			}  		}  		if (typeSizeStackTraceId == -1)  			typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  		ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  		gcObject.AllocTickIndex = allocTickIndex;  	}  	break;  }  case 'M':  case 'm': {  	c = ReadChar ();  	int modIndex = ReadInt ();  	sb.Length = 0;  	while (c > '\r') {  		sb.Append ((char)c);  		c = ReadChar ();  	}  	if (c != -1) {  		string lineString = sb.ToString ();  		int addrPos = lineString.LastIndexOf (" 0x");  		if (addrPos <= 0)  			addrPos = lineString.Length;  		int backSlashPos = lineString.LastIndexOf (@"\");  		if (backSlashPos <= 0)  			backSlashPos = -1;  		string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  		string fullName = lineString.Substring (0' addrPos);  		EnsureStringCapacity (modIndex' ref modBasicName);  		modBasicName [modIndex] = basicName;  		EnsureStringCapacity (modIndex' ref modFullName);  		modFullName [modIndex] = fullName;  	}  	break;  }  case 'U':  case 'u': {  	c = ReadChar ();  	ulong oldId = ReadULong ();  	ulong newId = ReadULong ();  	uint length = ReadUInt ();  	Histogram reloHist = null;  	if (pos >= startFileOffset && pos < endFileOffset)  		reloHist = readLogResult.relocatedHistogram;  	if (readLogResult.liveObjectTable != null)  		readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  	break;  }  case 'V':  case 'v': {  	c = ReadChar ();  	ulong startId = ReadULong ();  	uint length = ReadUInt ();  	Histogram reloHist = null;  	if (pos >= startFileOffset && pos < endFileOffset)  		reloHist = readLogResult.relocatedHistogram;  	if (readLogResult.liveObjectTable != null)  		readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  	break;  }  case 'B':  case 'b':  	c = ReadChar ();  	int startGC = ReadInt ();  	int induced = ReadInt ();  	int condemnedGeneration = ReadInt ();  	if (startGC != 0)  		newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  	if (newGcEvent) {  		if (startGC != 0) {  			if (induced != 0) {  				for (int gen = 0; gen <= condemnedGeneration; gen++)  					inducedGcCount [gen]++;  			}  		}  		else {  			int condemnedLimit = condemnedGeneration;  			if (condemnedLimit == 2)  				condemnedLimit = 3;  			for (int gen = 0; gen <= condemnedLimit; gen++) {  				cumulativeGenerationSize [gen] += generationSize [gen];  				gcCount [gen]++;  			}  		}  	}  	for (int gen = 0; gen <= 3; gen++)  		generationSize [gen] = 0;  	while (c >= ' ') {  		ulong rangeStart = ReadULong ();  		ulong rangeLength = ReadULong ();  		ulong rangeLengthReserved = ReadULong ();  		int rangeGeneration = ReadInt ();  		if (c == -1 || rangeGeneration < 0)  			break;  		if (readLogResult.liveObjectTable != null) {  			if (startGC != 0) {  				if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  					readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  			}  			else {  				readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  			}  		}  		generationSize [rangeGeneration] += rangeLength;  	}  	if (startGC == 0 && readLogResult.liveObjectTable != null) {  		readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  	}  	break;  case 'L':  case 'l': {  	c = ReadChar ();  	int isCritical = ReadInt ();  	ulong objectId = ReadULong ();  	if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  		// try to find the allocation stack trace and allocation time  		// from the live object table  		LiveObjectTable.LiveObject liveObject;  		readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  		if (liveObject.id == objectId) {  			if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  				readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  			if (readLogResult.finalizerHistogram != null)  				readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  		}  	}  	break;  }  case 'I':  case 'i':  	c = ReadChar ();  	int tickCount = ReadInt ();  	if (c != -1) {  		lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  		if (maxTickIndex < lastTickIndex)  			maxTickIndex = lastTickIndex;  	}  	break;  case 'G':  case 'g':  	c = ReadChar ();  	int gcGen0Count = ReadInt ();  	int gcGen1Count = ReadInt ();  	int gcGen2Count = ReadInt ();  	// if the newer 'b' lines occur' disregard the 'g' lines.  	if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  		if (c == -1 || gcGen0Count < 0)  			readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  		else  			readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  	}  	break;  case 'N':  case 'n': {  	c = ReadChar ();  	int funcIndex;  	int stackTraceIndex = ReadInt ();  	stackPtr = 0;  	int flag = ReadInt ();  	int matched = flag / 4;  	int hadTypeId = (flag & 2);  	bool hasTypeId = (flag & 1) == 1;  	if (hasTypeId) {  		intStack [stackPtr++] = ReadInt ();  		intStack [stackPtr++] = ReadInt ();  	}  	if (matched > 0 && c != -1) {  		/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  		otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  		int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  		if (matched > stacktrace.Length - hadTypeId)  			matched = stacktrace.Length - hadTypeId;  		for (int i = 0; i < matched; i++) {  			int funcId = stacktrace [i + hadTypeId];  			//Debug.Assert(funcId < funcName.Length);  			if (funcName [funcId] == null)  				funcName [funcId] = String.Empty;  			intStack [stackPtr++] = funcId;  			if (stackPtr >= intStack.Length) {  				intStack = GrowIntVector (intStack);  			}  		}  	}  	while ((funcIndex = ReadInt ()) >= 0) {  		intStack [stackPtr] = funcIndex;  		stackPtr++;  		if (stackPtr >= intStack.Length)  			intStack = GrowIntVector (intStack);  	}  	if (c != -1) {  		stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  	}  	break;  }  case 'y':  case 'Y': {  	c = ReadChar ();  	int threadid = ReadInt ();  	if (!assembliesJustLoaded.ContainsKey (threadid)) {  		assembliesJustLoaded [threadid] = new List<string> ();  	}  	/* int assemblyId = */ReadInt ();  	while (c == ' ' || c == '\t') {  		c = ReadChar ();  	}  	sb.Length = 0;  	while (c > '\r') {  		sb.Append ((char)c);  		c = ReadChar ();  	}  	string assemblyName = sb.ToString ();  	assembliesJustLoaded [threadid].Add (assemblyName);  	break;  }  case 'S':  case 's': {  	c = ReadChar ();  	int stackTraceIndex = ReadInt ();  	int funcIndex;  	stackPtr = 0;  	while ((funcIndex = ReadInt ()) >= 0) {  		intStack [stackPtr] = funcIndex;  		stackPtr++;  		if (stackPtr >= intStack.Length)  			intStack = GrowIntVector (intStack);  	}  	if (c != -1) {  		stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  	}  	break;  }  case 'Z':  case 'z': {  	sb.Length = 0;  	c = ReadChar ();  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	while (c > '\r') {  		sb.Append ((char)c);  		c = ReadChar ();  	}  	if (c != -1) {  		lastTickIndex = AddTimePos (lastLineStartPos);  		if (maxTickIndex < lastTickIndex)  			maxTickIndex = lastTickIndex;  		commentEventList.AddEvent (lastTickIndex' sb.ToString ());  	}  	break;  }  case 'H':  case 'h': {  	c = ReadChar ();  	int threadId = ReadInt ();  	ulong handleId = ReadULong ();  	ulong initialObjectId = ReadULong ();  	int stacktraceId = ReadInt ();  	if (c != -1) {  		if (readLogResult.handleHash != null)  			readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  		if (readLogResult.createdHandlesHistogram != null)  			readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  	}  	break;  }  case 'J':  case 'j': {  	c = ReadChar ();  	int threadId = ReadInt ();  	ulong handleId = ReadULong ();  	int stacktraceId = ReadInt ();  	if (c != -1) {  		if (readLogResult.handleHash != null) {  			if (readLogResult.handleHash.ContainsKey (handleId))  				readLogResult.handleHash.Remove (handleId);  			else {  				//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  				//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  				//for (int i = stacktrace.Length; --i >= 0; )  				//{  				//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  				//}  			}  		}  		if (readLogResult.destroyedHandlesHistogram != null)  			readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  	}  	break;  }  default: {  	// just ignore the unknown  	while (c != '\n' && c != '\r') {  		c = ReadChar ();  	}  	break;  }  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: switch (c) {  case -1:  	break;  case 'F':  case 'f': {  	c = ReadChar ();  	int funcIndex = ReadInt ();  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	string name = ReadString (sb' ' '' false' 255);  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	string signature = ReadString (sb' '\r'' true' 1023);  	ulong addr = ReadULong ();  	uint size = ReadUInt ();  	int modIndex = ReadInt ();  	int stackIndex = ReadInt ();  	if (c != -1) {  		EnsureStringCapacity (funcIndex' ref funcName);  		funcName [funcIndex] = name;  		EnsureStringCapacity (funcIndex' ref funcSignature);  		funcSignature [funcIndex] = signature;  		EnsureIntCapacity (funcIndex' ref funcModule);  		funcModule [funcIndex] = modIndex;  		string nameAndSignature = name;  		if (signature != null)  			nameAndSignature = name + ' ' + signature;  		if (stackIndex >= 0 && readLogResult.functionList != null) {  			funcSignatureIdHash [nameAndSignature] = funcIndex;  			readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  		}  	}  	break;  }  case 'T':  case 't': {  	c = ReadChar ();  	int typeIndex = ReadInt ();  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	if (c != -1 && Char.IsDigit ((char)c)) {  		if (ReadInt () != 0) {  			finalizableTypes [typeIndex] = true;  		}  	}  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	string typeName = ReadString (sb' '\r'' false' 1023);  	if (c != -1) {  		AddTypeName (typeIndex' typeName);  	}  	break;  }  // 'A' with thread identifier  case '!': {  	c = ReadChar ();  	int threadId = ReadInt ();  	ulong id = ReadULong ();  	int typeSizeStackTraceIndex = ReadInt ();  	typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  	if (c != -1) {  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  		if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  			// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  			readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  		}  		List<string> prev;  		if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  			foreach (string assemblyName in prev) {  				assemblies [assemblyName] = -typeSizeStackTraceIndex;  			}  			prev.Clear ();  		}  	}  	readLogResult.hadAllocInfo = true;  	readLogResult.hadCallInfo = true;  	break;  }  case 'A':  case 'a': {  	c = ReadChar ();  	ulong id = ReadULong ();  	int typeSizeStackTraceIndex = ReadInt ();  	typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  	if (c != -1) {  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  		if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  			// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  			readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  		}  	}  	readLogResult.hadAllocInfo = true;  	readLogResult.hadCallInfo = true;  	break;  }  case 'C':  case 'c': {  	c = ReadChar ();  	if (pos < startFileOffset || pos >= endFileOffset) {  		while (c >= ' ')  			c = ReadChar ();  		break;  	}  	int threadIndex = ReadInt ();  	int stackTraceIndex = ReadInt ();  	stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  	if (c != -1) {  		if (readLogResult.callstackHistogram != null) {  			readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  		}  		List<string> prev;  		if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  			foreach (string assemblyName in prev) {  				assemblies [assemblyName] = stackTraceIndex;  			}  			prev.Clear ();  		}  	}  	readLogResult.hadCallInfo = true;  	break;  }  case 'E':  case 'e': {  	c = ReadChar ();  	extendedRootInfoSeen = true;  	thisIsR = true;  	if (pos < startFileOffset || pos >= endFileOffset) {  		while (c >= ' ')  			c = ReadChar ();  		break;  	}  	if (!previousWasR) {  		heapDumpEventList.AddEvent (lastTickIndex' null);  		if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  			readLogResult.objectGraph.BuildTypeGraph ();  			readLogResult.objectGraph.Neuter ();  		}  		Histogram[] h = readLogResult.heapDumpHistograms;  		if (h != null) {  			if (h.Length == requestedIndex)  				readLogResult.requestedObjectGraph = readLogResult.objectGraph;  			readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  			for (int i = 0; i < h.Length; i++)  				readLogResult.heapDumpHistograms [i] = h [i];  			readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  		}  		readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  	}  	ulong objectID = ReadULong ();  	GcRootKind rootKind = (GcRootKind)ReadInt ();  	GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  	ulong rootID = ReadULong ();  	ObjectGraph objectGraph = readLogResult.objectGraph;  	if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  		string rootName;  		switch (rootKind) {  		case GcRootKind.Stack:  			rootName = "Stack";  			break;  		case GcRootKind.Finalizer:  			rootName = "Finalizer";  			break;  		case GcRootKind.Handle:  			rootName = "Handle";  			break;  		default:  			rootName = "Other";  			break;  		}  		if ((rootFlags & GcRootFlags.Pinning) != 0)  			rootName += "' Pinning";  		if ((rootFlags & GcRootFlags.WeakRef) != 0)  			rootName += "' WeakRef";  		if ((rootFlags & GcRootFlags.Interior) != 0)  			rootName += "' Interior";  		if ((rootFlags & GcRootFlags.Refcounted) != 0)  			rootName += "' RefCounted";  		int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  		ulongStack [0] = objectID;  		ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  		objectGraph.AddRootObject (rootObject' rootID);  	}  	break;  }  case 'R':  case 'r': {  	c = ReadChar ();  	thisIsR = true;  	if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  		while (c >= ' ')  			c = ReadChar ();  		Histogram[] h = readLogResult.heapDumpHistograms;  		if (h != null) {  			if (h.Length == requestedIndex)  				readLogResult.requestedObjectGraph = readLogResult.objectGraph;  		}  		break;  	}  	if (!previousWasR) {  		heapDumpEventList.AddEvent (lastTickIndex' null);  		if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  			readLogResult.objectGraph.BuildTypeGraph ();  			readLogResult.objectGraph.Neuter ();  		}  		Histogram[] h = readLogResult.heapDumpHistograms;  		if (h != null) {  			if (h.Length == requestedIndex)  				readLogResult.requestedObjectGraph = readLogResult.objectGraph;  			readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  			for (int i = 0; i < h.Length; i++)  				readLogResult.heapDumpHistograms [i] = h [i];  			readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  		}  		readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  	}  	stackPtr = 0;  	ulong objectID;  	while ((objectID = ReadULong ()) != ulong.MaxValue) {  		if (objectID > 0) {  			ulongStack [stackPtr] = objectID;  			stackPtr++;  			if (stackPtr >= ulongStack.Length)  				ulongStack = GrowULongVector (ulongStack);  		}  	}  	if (c != -1) {  		if (readLogResult.objectGraph != null)  			readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  	}  	break;  }  case 'O':  case 'o': {  	c = ReadChar ();  	if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  		while (c >= ' ')  			c = ReadChar ();  		break;  	}  	ulong objectId = ReadULong ();  	int typeIndex = ReadInt ();  	uint size = ReadUInt ();  	stackPtr = 0;  	ulong objectID;  	while ((objectID = ReadULong ()) != ulong.MaxValue) {  		if (objectID > 0) {  			ulongStack [stackPtr] = objectID;  			stackPtr++;  			if (stackPtr >= ulongStack.Length)  				ulongStack = GrowULongVector (ulongStack);  		}  	}  	if (c != -1) {  		ObjectGraph objectGraph = readLogResult.objectGraph;  		objectGraph.GetOrCreateGcType (typeIndex);  		int typeSizeStackTraceId = -1;  		int allocTickIndex = 0;  		// try to find the allocation stack trace and allocation time  		// from the live object table  		if (readLogResult.liveObjectTable != null) {  			LiveObjectTable.LiveObject liveObject;  			readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  			if (liveObject.id == objectId) {  				int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  				int typeIndexFromLiveObject = stackTrace [0];  				if (typeIndexFromLiveObject == typeIndex) {  					typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  					allocTickIndex = liveObject.allocTickIndex;  					Histogram[] h = readLogResult.heapDumpHistograms;  					if (h != null)  						h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  				}  			}  		}  		if (typeSizeStackTraceId == -1)  			typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  		ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  		gcObject.AllocTickIndex = allocTickIndex;  	}  	break;  }  case 'M':  case 'm': {  	c = ReadChar ();  	int modIndex = ReadInt ();  	sb.Length = 0;  	while (c > '\r') {  		sb.Append ((char)c);  		c = ReadChar ();  	}  	if (c != -1) {  		string lineString = sb.ToString ();  		int addrPos = lineString.LastIndexOf (" 0x");  		if (addrPos <= 0)  			addrPos = lineString.Length;  		int backSlashPos = lineString.LastIndexOf (@"\");  		if (backSlashPos <= 0)  			backSlashPos = -1;  		string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  		string fullName = lineString.Substring (0' addrPos);  		EnsureStringCapacity (modIndex' ref modBasicName);  		modBasicName [modIndex] = basicName;  		EnsureStringCapacity (modIndex' ref modFullName);  		modFullName [modIndex] = fullName;  	}  	break;  }  case 'U':  case 'u': {  	c = ReadChar ();  	ulong oldId = ReadULong ();  	ulong newId = ReadULong ();  	uint length = ReadUInt ();  	Histogram reloHist = null;  	if (pos >= startFileOffset && pos < endFileOffset)  		reloHist = readLogResult.relocatedHistogram;  	if (readLogResult.liveObjectTable != null)  		readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  	break;  }  case 'V':  case 'v': {  	c = ReadChar ();  	ulong startId = ReadULong ();  	uint length = ReadUInt ();  	Histogram reloHist = null;  	if (pos >= startFileOffset && pos < endFileOffset)  		reloHist = readLogResult.relocatedHistogram;  	if (readLogResult.liveObjectTable != null)  		readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  	break;  }  case 'B':  case 'b':  	c = ReadChar ();  	int startGC = ReadInt ();  	int induced = ReadInt ();  	int condemnedGeneration = ReadInt ();  	if (startGC != 0)  		newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  	if (newGcEvent) {  		if (startGC != 0) {  			if (induced != 0) {  				for (int gen = 0; gen <= condemnedGeneration; gen++)  					inducedGcCount [gen]++;  			}  		}  		else {  			int condemnedLimit = condemnedGeneration;  			if (condemnedLimit == 2)  				condemnedLimit = 3;  			for (int gen = 0; gen <= condemnedLimit; gen++) {  				cumulativeGenerationSize [gen] += generationSize [gen];  				gcCount [gen]++;  			}  		}  	}  	for (int gen = 0; gen <= 3; gen++)  		generationSize [gen] = 0;  	while (c >= ' ') {  		ulong rangeStart = ReadULong ();  		ulong rangeLength = ReadULong ();  		ulong rangeLengthReserved = ReadULong ();  		int rangeGeneration = ReadInt ();  		if (c == -1 || rangeGeneration < 0)  			break;  		if (readLogResult.liveObjectTable != null) {  			if (startGC != 0) {  				if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  					readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  			}  			else {  				readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  			}  		}  		generationSize [rangeGeneration] += rangeLength;  	}  	if (startGC == 0 && readLogResult.liveObjectTable != null) {  		readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  	}  	break;  case 'L':  case 'l': {  	c = ReadChar ();  	int isCritical = ReadInt ();  	ulong objectId = ReadULong ();  	if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  		// try to find the allocation stack trace and allocation time  		// from the live object table  		LiveObjectTable.LiveObject liveObject;  		readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  		if (liveObject.id == objectId) {  			if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  				readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  			if (readLogResult.finalizerHistogram != null)  				readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  		}  	}  	break;  }  case 'I':  case 'i':  	c = ReadChar ();  	int tickCount = ReadInt ();  	if (c != -1) {  		lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  		if (maxTickIndex < lastTickIndex)  			maxTickIndex = lastTickIndex;  	}  	break;  case 'G':  case 'g':  	c = ReadChar ();  	int gcGen0Count = ReadInt ();  	int gcGen1Count = ReadInt ();  	int gcGen2Count = ReadInt ();  	// if the newer 'b' lines occur' disregard the 'g' lines.  	if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  		if (c == -1 || gcGen0Count < 0)  			readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  		else  			readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  	}  	break;  case 'N':  case 'n': {  	c = ReadChar ();  	int funcIndex;  	int stackTraceIndex = ReadInt ();  	stackPtr = 0;  	int flag = ReadInt ();  	int matched = flag / 4;  	int hadTypeId = (flag & 2);  	bool hasTypeId = (flag & 1) == 1;  	if (hasTypeId) {  		intStack [stackPtr++] = ReadInt ();  		intStack [stackPtr++] = ReadInt ();  	}  	if (matched > 0 && c != -1) {  		/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  		otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  		int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  		if (matched > stacktrace.Length - hadTypeId)  			matched = stacktrace.Length - hadTypeId;  		for (int i = 0; i < matched; i++) {  			int funcId = stacktrace [i + hadTypeId];  			//Debug.Assert(funcId < funcName.Length);  			if (funcName [funcId] == null)  				funcName [funcId] = String.Empty;  			intStack [stackPtr++] = funcId;  			if (stackPtr >= intStack.Length) {  				intStack = GrowIntVector (intStack);  			}  		}  	}  	while ((funcIndex = ReadInt ()) >= 0) {  		intStack [stackPtr] = funcIndex;  		stackPtr++;  		if (stackPtr >= intStack.Length)  			intStack = GrowIntVector (intStack);  	}  	if (c != -1) {  		stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  	}  	break;  }  case 'y':  case 'Y': {  	c = ReadChar ();  	int threadid = ReadInt ();  	if (!assembliesJustLoaded.ContainsKey (threadid)) {  		assembliesJustLoaded [threadid] = new List<string> ();  	}  	/* int assemblyId = */ReadInt ();  	while (c == ' ' || c == '\t') {  		c = ReadChar ();  	}  	sb.Length = 0;  	while (c > '\r') {  		sb.Append ((char)c);  		c = ReadChar ();  	}  	string assemblyName = sb.ToString ();  	assembliesJustLoaded [threadid].Add (assemblyName);  	break;  }  case 'S':  case 's': {  	c = ReadChar ();  	int stackTraceIndex = ReadInt ();  	int funcIndex;  	stackPtr = 0;  	while ((funcIndex = ReadInt ()) >= 0) {  		intStack [stackPtr] = funcIndex;  		stackPtr++;  		if (stackPtr >= intStack.Length)  			intStack = GrowIntVector (intStack);  	}  	if (c != -1) {  		stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  	}  	break;  }  case 'Z':  case 'z': {  	sb.Length = 0;  	c = ReadChar ();  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	while (c > '\r') {  		sb.Append ((char)c);  		c = ReadChar ();  	}  	if (c != -1) {  		lastTickIndex = AddTimePos (lastLineStartPos);  		if (maxTickIndex < lastTickIndex)  			maxTickIndex = lastTickIndex;  		commentEventList.AddEvent (lastTickIndex' sb.ToString ());  	}  	break;  }  case 'H':  case 'h': {  	c = ReadChar ();  	int threadId = ReadInt ();  	ulong handleId = ReadULong ();  	ulong initialObjectId = ReadULong ();  	int stacktraceId = ReadInt ();  	if (c != -1) {  		if (readLogResult.handleHash != null)  			readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  		if (readLogResult.createdHandlesHistogram != null)  			readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  	}  	break;  }  case 'J':  case 'j': {  	c = ReadChar ();  	int threadId = ReadInt ();  	ulong handleId = ReadULong ();  	int stacktraceId = ReadInt ();  	if (c != -1) {  		if (readLogResult.handleHash != null) {  			if (readLogResult.handleHash.ContainsKey (handleId))  				readLogResult.handleHash.Remove (handleId);  			else {  				//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  				//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  				//for (int i = stacktrace.Length; --i >= 0; )  				//{  				//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  				//}  			}  		}  		if (readLogResult.destroyedHandlesHistogram != null)  			readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  	}  	break;  }  default: {  	// just ignore the unknown  	while (c != '\n' && c != '\r') {  		c = ReadChar ();  	}  	break;  }  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: switch (c) {  case -1:  	break;  case 'F':  case 'f': {  	c = ReadChar ();  	int funcIndex = ReadInt ();  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	string name = ReadString (sb' ' '' false' 255);  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	string signature = ReadString (sb' '\r'' true' 1023);  	ulong addr = ReadULong ();  	uint size = ReadUInt ();  	int modIndex = ReadInt ();  	int stackIndex = ReadInt ();  	if (c != -1) {  		EnsureStringCapacity (funcIndex' ref funcName);  		funcName [funcIndex] = name;  		EnsureStringCapacity (funcIndex' ref funcSignature);  		funcSignature [funcIndex] = signature;  		EnsureIntCapacity (funcIndex' ref funcModule);  		funcModule [funcIndex] = modIndex;  		string nameAndSignature = name;  		if (signature != null)  			nameAndSignature = name + ' ' + signature;  		if (stackIndex >= 0 && readLogResult.functionList != null) {  			funcSignatureIdHash [nameAndSignature] = funcIndex;  			readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  		}  	}  	break;  }  case 'T':  case 't': {  	c = ReadChar ();  	int typeIndex = ReadInt ();  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	if (c != -1 && Char.IsDigit ((char)c)) {  		if (ReadInt () != 0) {  			finalizableTypes [typeIndex] = true;  		}  	}  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	string typeName = ReadString (sb' '\r'' false' 1023);  	if (c != -1) {  		AddTypeName (typeIndex' typeName);  	}  	break;  }  // 'A' with thread identifier  case '!': {  	c = ReadChar ();  	int threadId = ReadInt ();  	ulong id = ReadULong ();  	int typeSizeStackTraceIndex = ReadInt ();  	typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  	if (c != -1) {  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  		if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  			// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  			readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  		}  		List<string> prev;  		if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  			foreach (string assemblyName in prev) {  				assemblies [assemblyName] = -typeSizeStackTraceIndex;  			}  			prev.Clear ();  		}  	}  	readLogResult.hadAllocInfo = true;  	readLogResult.hadCallInfo = true;  	break;  }  case 'A':  case 'a': {  	c = ReadChar ();  	ulong id = ReadULong ();  	int typeSizeStackTraceIndex = ReadInt ();  	typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  	if (c != -1) {  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  		if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  			// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  			readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  		}  	}  	readLogResult.hadAllocInfo = true;  	readLogResult.hadCallInfo = true;  	break;  }  case 'C':  case 'c': {  	c = ReadChar ();  	if (pos < startFileOffset || pos >= endFileOffset) {  		while (c >= ' ')  			c = ReadChar ();  		break;  	}  	int threadIndex = ReadInt ();  	int stackTraceIndex = ReadInt ();  	stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  	if (c != -1) {  		if (readLogResult.callstackHistogram != null) {  			readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  		}  		List<string> prev;  		if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  			foreach (string assemblyName in prev) {  				assemblies [assemblyName] = stackTraceIndex;  			}  			prev.Clear ();  		}  	}  	readLogResult.hadCallInfo = true;  	break;  }  case 'E':  case 'e': {  	c = ReadChar ();  	extendedRootInfoSeen = true;  	thisIsR = true;  	if (pos < startFileOffset || pos >= endFileOffset) {  		while (c >= ' ')  			c = ReadChar ();  		break;  	}  	if (!previousWasR) {  		heapDumpEventList.AddEvent (lastTickIndex' null);  		if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  			readLogResult.objectGraph.BuildTypeGraph ();  			readLogResult.objectGraph.Neuter ();  		}  		Histogram[] h = readLogResult.heapDumpHistograms;  		if (h != null) {  			if (h.Length == requestedIndex)  				readLogResult.requestedObjectGraph = readLogResult.objectGraph;  			readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  			for (int i = 0; i < h.Length; i++)  				readLogResult.heapDumpHistograms [i] = h [i];  			readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  		}  		readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  	}  	ulong objectID = ReadULong ();  	GcRootKind rootKind = (GcRootKind)ReadInt ();  	GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  	ulong rootID = ReadULong ();  	ObjectGraph objectGraph = readLogResult.objectGraph;  	if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  		string rootName;  		switch (rootKind) {  		case GcRootKind.Stack:  			rootName = "Stack";  			break;  		case GcRootKind.Finalizer:  			rootName = "Finalizer";  			break;  		case GcRootKind.Handle:  			rootName = "Handle";  			break;  		default:  			rootName = "Other";  			break;  		}  		if ((rootFlags & GcRootFlags.Pinning) != 0)  			rootName += "' Pinning";  		if ((rootFlags & GcRootFlags.WeakRef) != 0)  			rootName += "' WeakRef";  		if ((rootFlags & GcRootFlags.Interior) != 0)  			rootName += "' Interior";  		if ((rootFlags & GcRootFlags.Refcounted) != 0)  			rootName += "' RefCounted";  		int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  		ulongStack [0] = objectID;  		ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  		objectGraph.AddRootObject (rootObject' rootID);  	}  	break;  }  case 'R':  case 'r': {  	c = ReadChar ();  	thisIsR = true;  	if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  		while (c >= ' ')  			c = ReadChar ();  		Histogram[] h = readLogResult.heapDumpHistograms;  		if (h != null) {  			if (h.Length == requestedIndex)  				readLogResult.requestedObjectGraph = readLogResult.objectGraph;  		}  		break;  	}  	if (!previousWasR) {  		heapDumpEventList.AddEvent (lastTickIndex' null);  		if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  			readLogResult.objectGraph.BuildTypeGraph ();  			readLogResult.objectGraph.Neuter ();  		}  		Histogram[] h = readLogResult.heapDumpHistograms;  		if (h != null) {  			if (h.Length == requestedIndex)  				readLogResult.requestedObjectGraph = readLogResult.objectGraph;  			readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  			for (int i = 0; i < h.Length; i++)  				readLogResult.heapDumpHistograms [i] = h [i];  			readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  		}  		readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  	}  	stackPtr = 0;  	ulong objectID;  	while ((objectID = ReadULong ()) != ulong.MaxValue) {  		if (objectID > 0) {  			ulongStack [stackPtr] = objectID;  			stackPtr++;  			if (stackPtr >= ulongStack.Length)  				ulongStack = GrowULongVector (ulongStack);  		}  	}  	if (c != -1) {  		if (readLogResult.objectGraph != null)  			readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  	}  	break;  }  case 'O':  case 'o': {  	c = ReadChar ();  	if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  		while (c >= ' ')  			c = ReadChar ();  		break;  	}  	ulong objectId = ReadULong ();  	int typeIndex = ReadInt ();  	uint size = ReadUInt ();  	stackPtr = 0;  	ulong objectID;  	while ((objectID = ReadULong ()) != ulong.MaxValue) {  		if (objectID > 0) {  			ulongStack [stackPtr] = objectID;  			stackPtr++;  			if (stackPtr >= ulongStack.Length)  				ulongStack = GrowULongVector (ulongStack);  		}  	}  	if (c != -1) {  		ObjectGraph objectGraph = readLogResult.objectGraph;  		objectGraph.GetOrCreateGcType (typeIndex);  		int typeSizeStackTraceId = -1;  		int allocTickIndex = 0;  		// try to find the allocation stack trace and allocation time  		// from the live object table  		if (readLogResult.liveObjectTable != null) {  			LiveObjectTable.LiveObject liveObject;  			readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  			if (liveObject.id == objectId) {  				int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  				int typeIndexFromLiveObject = stackTrace [0];  				if (typeIndexFromLiveObject == typeIndex) {  					typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  					allocTickIndex = liveObject.allocTickIndex;  					Histogram[] h = readLogResult.heapDumpHistograms;  					if (h != null)  						h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  				}  			}  		}  		if (typeSizeStackTraceId == -1)  			typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  		ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  		gcObject.AllocTickIndex = allocTickIndex;  	}  	break;  }  case 'M':  case 'm': {  	c = ReadChar ();  	int modIndex = ReadInt ();  	sb.Length = 0;  	while (c > '\r') {  		sb.Append ((char)c);  		c = ReadChar ();  	}  	if (c != -1) {  		string lineString = sb.ToString ();  		int addrPos = lineString.LastIndexOf (" 0x");  		if (addrPos <= 0)  			addrPos = lineString.Length;  		int backSlashPos = lineString.LastIndexOf (@"\");  		if (backSlashPos <= 0)  			backSlashPos = -1;  		string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  		string fullName = lineString.Substring (0' addrPos);  		EnsureStringCapacity (modIndex' ref modBasicName);  		modBasicName [modIndex] = basicName;  		EnsureStringCapacity (modIndex' ref modFullName);  		modFullName [modIndex] = fullName;  	}  	break;  }  case 'U':  case 'u': {  	c = ReadChar ();  	ulong oldId = ReadULong ();  	ulong newId = ReadULong ();  	uint length = ReadUInt ();  	Histogram reloHist = null;  	if (pos >= startFileOffset && pos < endFileOffset)  		reloHist = readLogResult.relocatedHistogram;  	if (readLogResult.liveObjectTable != null)  		readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  	break;  }  case 'V':  case 'v': {  	c = ReadChar ();  	ulong startId = ReadULong ();  	uint length = ReadUInt ();  	Histogram reloHist = null;  	if (pos >= startFileOffset && pos < endFileOffset)  		reloHist = readLogResult.relocatedHistogram;  	if (readLogResult.liveObjectTable != null)  		readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  	break;  }  case 'B':  case 'b':  	c = ReadChar ();  	int startGC = ReadInt ();  	int induced = ReadInt ();  	int condemnedGeneration = ReadInt ();  	if (startGC != 0)  		newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  	if (newGcEvent) {  		if (startGC != 0) {  			if (induced != 0) {  				for (int gen = 0; gen <= condemnedGeneration; gen++)  					inducedGcCount [gen]++;  			}  		}  		else {  			int condemnedLimit = condemnedGeneration;  			if (condemnedLimit == 2)  				condemnedLimit = 3;  			for (int gen = 0; gen <= condemnedLimit; gen++) {  				cumulativeGenerationSize [gen] += generationSize [gen];  				gcCount [gen]++;  			}  		}  	}  	for (int gen = 0; gen <= 3; gen++)  		generationSize [gen] = 0;  	while (c >= ' ') {  		ulong rangeStart = ReadULong ();  		ulong rangeLength = ReadULong ();  		ulong rangeLengthReserved = ReadULong ();  		int rangeGeneration = ReadInt ();  		if (c == -1 || rangeGeneration < 0)  			break;  		if (readLogResult.liveObjectTable != null) {  			if (startGC != 0) {  				if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  					readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  			}  			else {  				readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  			}  		}  		generationSize [rangeGeneration] += rangeLength;  	}  	if (startGC == 0 && readLogResult.liveObjectTable != null) {  		readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  	}  	break;  case 'L':  case 'l': {  	c = ReadChar ();  	int isCritical = ReadInt ();  	ulong objectId = ReadULong ();  	if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  		// try to find the allocation stack trace and allocation time  		// from the live object table  		LiveObjectTable.LiveObject liveObject;  		readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  		if (liveObject.id == objectId) {  			if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  				readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  			if (readLogResult.finalizerHistogram != null)  				readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  		}  	}  	break;  }  case 'I':  case 'i':  	c = ReadChar ();  	int tickCount = ReadInt ();  	if (c != -1) {  		lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  		if (maxTickIndex < lastTickIndex)  			maxTickIndex = lastTickIndex;  	}  	break;  case 'G':  case 'g':  	c = ReadChar ();  	int gcGen0Count = ReadInt ();  	int gcGen1Count = ReadInt ();  	int gcGen2Count = ReadInt ();  	// if the newer 'b' lines occur' disregard the 'g' lines.  	if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  		if (c == -1 || gcGen0Count < 0)  			readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  		else  			readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  	}  	break;  case 'N':  case 'n': {  	c = ReadChar ();  	int funcIndex;  	int stackTraceIndex = ReadInt ();  	stackPtr = 0;  	int flag = ReadInt ();  	int matched = flag / 4;  	int hadTypeId = (flag & 2);  	bool hasTypeId = (flag & 1) == 1;  	if (hasTypeId) {  		intStack [stackPtr++] = ReadInt ();  		intStack [stackPtr++] = ReadInt ();  	}  	if (matched > 0 && c != -1) {  		/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  		otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  		int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  		if (matched > stacktrace.Length - hadTypeId)  			matched = stacktrace.Length - hadTypeId;  		for (int i = 0; i < matched; i++) {  			int funcId = stacktrace [i + hadTypeId];  			//Debug.Assert(funcId < funcName.Length);  			if (funcName [funcId] == null)  				funcName [funcId] = String.Empty;  			intStack [stackPtr++] = funcId;  			if (stackPtr >= intStack.Length) {  				intStack = GrowIntVector (intStack);  			}  		}  	}  	while ((funcIndex = ReadInt ()) >= 0) {  		intStack [stackPtr] = funcIndex;  		stackPtr++;  		if (stackPtr >= intStack.Length)  			intStack = GrowIntVector (intStack);  	}  	if (c != -1) {  		stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  	}  	break;  }  case 'y':  case 'Y': {  	c = ReadChar ();  	int threadid = ReadInt ();  	if (!assembliesJustLoaded.ContainsKey (threadid)) {  		assembliesJustLoaded [threadid] = new List<string> ();  	}  	/* int assemblyId = */ReadInt ();  	while (c == ' ' || c == '\t') {  		c = ReadChar ();  	}  	sb.Length = 0;  	while (c > '\r') {  		sb.Append ((char)c);  		c = ReadChar ();  	}  	string assemblyName = sb.ToString ();  	assembliesJustLoaded [threadid].Add (assemblyName);  	break;  }  case 'S':  case 's': {  	c = ReadChar ();  	int stackTraceIndex = ReadInt ();  	int funcIndex;  	stackPtr = 0;  	while ((funcIndex = ReadInt ()) >= 0) {  		intStack [stackPtr] = funcIndex;  		stackPtr++;  		if (stackPtr >= intStack.Length)  			intStack = GrowIntVector (intStack);  	}  	if (c != -1) {  		stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  	}  	break;  }  case 'Z':  case 'z': {  	sb.Length = 0;  	c = ReadChar ();  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	while (c > '\r') {  		sb.Append ((char)c);  		c = ReadChar ();  	}  	if (c != -1) {  		lastTickIndex = AddTimePos (lastLineStartPos);  		if (maxTickIndex < lastTickIndex)  			maxTickIndex = lastTickIndex;  		commentEventList.AddEvent (lastTickIndex' sb.ToString ());  	}  	break;  }  case 'H':  case 'h': {  	c = ReadChar ();  	int threadId = ReadInt ();  	ulong handleId = ReadULong ();  	ulong initialObjectId = ReadULong ();  	int stacktraceId = ReadInt ();  	if (c != -1) {  		if (readLogResult.handleHash != null)  			readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  		if (readLogResult.createdHandlesHistogram != null)  			readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  	}  	break;  }  case 'J':  case 'j': {  	c = ReadChar ();  	int threadId = ReadInt ();  	ulong handleId = ReadULong ();  	int stacktraceId = ReadInt ();  	if (c != -1) {  		if (readLogResult.handleHash != null) {  			if (readLogResult.handleHash.ContainsKey (handleId))  				readLogResult.handleHash.Remove (handleId);  			else {  				//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  				//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  				//for (int i = stacktrace.Length; --i >= 0; )  				//{  				//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  				//}  			}  		}  		if (readLogResult.destroyedHandlesHistogram != null)  			readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  	}  	break;  }  default: {  	// just ignore the unknown  	while (c != '\n' && c != '\r') {  		c = ReadChar ();  	}  	break;  }  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: switch (c) {  case -1:  	break;  case 'F':  case 'f': {  	c = ReadChar ();  	int funcIndex = ReadInt ();  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	string name = ReadString (sb' ' '' false' 255);  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	string signature = ReadString (sb' '\r'' true' 1023);  	ulong addr = ReadULong ();  	uint size = ReadUInt ();  	int modIndex = ReadInt ();  	int stackIndex = ReadInt ();  	if (c != -1) {  		EnsureStringCapacity (funcIndex' ref funcName);  		funcName [funcIndex] = name;  		EnsureStringCapacity (funcIndex' ref funcSignature);  		funcSignature [funcIndex] = signature;  		EnsureIntCapacity (funcIndex' ref funcModule);  		funcModule [funcIndex] = modIndex;  		string nameAndSignature = name;  		if (signature != null)  			nameAndSignature = name + ' ' + signature;  		if (stackIndex >= 0 && readLogResult.functionList != null) {  			funcSignatureIdHash [nameAndSignature] = funcIndex;  			readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  		}  	}  	break;  }  case 'T':  case 't': {  	c = ReadChar ();  	int typeIndex = ReadInt ();  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	if (c != -1 && Char.IsDigit ((char)c)) {  		if (ReadInt () != 0) {  			finalizableTypes [typeIndex] = true;  		}  	}  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	string typeName = ReadString (sb' '\r'' false' 1023);  	if (c != -1) {  		AddTypeName (typeIndex' typeName);  	}  	break;  }  // 'A' with thread identifier  case '!': {  	c = ReadChar ();  	int threadId = ReadInt ();  	ulong id = ReadULong ();  	int typeSizeStackTraceIndex = ReadInt ();  	typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  	if (c != -1) {  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  		if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  			// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  			readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  		}  		List<string> prev;  		if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  			foreach (string assemblyName in prev) {  				assemblies [assemblyName] = -typeSizeStackTraceIndex;  			}  			prev.Clear ();  		}  	}  	readLogResult.hadAllocInfo = true;  	readLogResult.hadCallInfo = true;  	break;  }  case 'A':  case 'a': {  	c = ReadChar ();  	ulong id = ReadULong ();  	int typeSizeStackTraceIndex = ReadInt ();  	typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  	if (c != -1) {  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  		if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  			// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  			readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  		}  	}  	readLogResult.hadAllocInfo = true;  	readLogResult.hadCallInfo = true;  	break;  }  case 'C':  case 'c': {  	c = ReadChar ();  	if (pos < startFileOffset || pos >= endFileOffset) {  		while (c >= ' ')  			c = ReadChar ();  		break;  	}  	int threadIndex = ReadInt ();  	int stackTraceIndex = ReadInt ();  	stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  	if (c != -1) {  		if (readLogResult.callstackHistogram != null) {  			readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  		}  		List<string> prev;  		if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  			foreach (string assemblyName in prev) {  				assemblies [assemblyName] = stackTraceIndex;  			}  			prev.Clear ();  		}  	}  	readLogResult.hadCallInfo = true;  	break;  }  case 'E':  case 'e': {  	c = ReadChar ();  	extendedRootInfoSeen = true;  	thisIsR = true;  	if (pos < startFileOffset || pos >= endFileOffset) {  		while (c >= ' ')  			c = ReadChar ();  		break;  	}  	if (!previousWasR) {  		heapDumpEventList.AddEvent (lastTickIndex' null);  		if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  			readLogResult.objectGraph.BuildTypeGraph ();  			readLogResult.objectGraph.Neuter ();  		}  		Histogram[] h = readLogResult.heapDumpHistograms;  		if (h != null) {  			if (h.Length == requestedIndex)  				readLogResult.requestedObjectGraph = readLogResult.objectGraph;  			readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  			for (int i = 0; i < h.Length; i++)  				readLogResult.heapDumpHistograms [i] = h [i];  			readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  		}  		readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  	}  	ulong objectID = ReadULong ();  	GcRootKind rootKind = (GcRootKind)ReadInt ();  	GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  	ulong rootID = ReadULong ();  	ObjectGraph objectGraph = readLogResult.objectGraph;  	if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  		string rootName;  		switch (rootKind) {  		case GcRootKind.Stack:  			rootName = "Stack";  			break;  		case GcRootKind.Finalizer:  			rootName = "Finalizer";  			break;  		case GcRootKind.Handle:  			rootName = "Handle";  			break;  		default:  			rootName = "Other";  			break;  		}  		if ((rootFlags & GcRootFlags.Pinning) != 0)  			rootName += "' Pinning";  		if ((rootFlags & GcRootFlags.WeakRef) != 0)  			rootName += "' WeakRef";  		if ((rootFlags & GcRootFlags.Interior) != 0)  			rootName += "' Interior";  		if ((rootFlags & GcRootFlags.Refcounted) != 0)  			rootName += "' RefCounted";  		int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  		ulongStack [0] = objectID;  		ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  		objectGraph.AddRootObject (rootObject' rootID);  	}  	break;  }  case 'R':  case 'r': {  	c = ReadChar ();  	thisIsR = true;  	if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  		while (c >= ' ')  			c = ReadChar ();  		Histogram[] h = readLogResult.heapDumpHistograms;  		if (h != null) {  			if (h.Length == requestedIndex)  				readLogResult.requestedObjectGraph = readLogResult.objectGraph;  		}  		break;  	}  	if (!previousWasR) {  		heapDumpEventList.AddEvent (lastTickIndex' null);  		if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  			readLogResult.objectGraph.BuildTypeGraph ();  			readLogResult.objectGraph.Neuter ();  		}  		Histogram[] h = readLogResult.heapDumpHistograms;  		if (h != null) {  			if (h.Length == requestedIndex)  				readLogResult.requestedObjectGraph = readLogResult.objectGraph;  			readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  			for (int i = 0; i < h.Length; i++)  				readLogResult.heapDumpHistograms [i] = h [i];  			readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  		}  		readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  	}  	stackPtr = 0;  	ulong objectID;  	while ((objectID = ReadULong ()) != ulong.MaxValue) {  		if (objectID > 0) {  			ulongStack [stackPtr] = objectID;  			stackPtr++;  			if (stackPtr >= ulongStack.Length)  				ulongStack = GrowULongVector (ulongStack);  		}  	}  	if (c != -1) {  		if (readLogResult.objectGraph != null)  			readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  	}  	break;  }  case 'O':  case 'o': {  	c = ReadChar ();  	if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  		while (c >= ' ')  			c = ReadChar ();  		break;  	}  	ulong objectId = ReadULong ();  	int typeIndex = ReadInt ();  	uint size = ReadUInt ();  	stackPtr = 0;  	ulong objectID;  	while ((objectID = ReadULong ()) != ulong.MaxValue) {  		if (objectID > 0) {  			ulongStack [stackPtr] = objectID;  			stackPtr++;  			if (stackPtr >= ulongStack.Length)  				ulongStack = GrowULongVector (ulongStack);  		}  	}  	if (c != -1) {  		ObjectGraph objectGraph = readLogResult.objectGraph;  		objectGraph.GetOrCreateGcType (typeIndex);  		int typeSizeStackTraceId = -1;  		int allocTickIndex = 0;  		// try to find the allocation stack trace and allocation time  		// from the live object table  		if (readLogResult.liveObjectTable != null) {  			LiveObjectTable.LiveObject liveObject;  			readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  			if (liveObject.id == objectId) {  				int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  				int typeIndexFromLiveObject = stackTrace [0];  				if (typeIndexFromLiveObject == typeIndex) {  					typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  					allocTickIndex = liveObject.allocTickIndex;  					Histogram[] h = readLogResult.heapDumpHistograms;  					if (h != null)  						h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  				}  			}  		}  		if (typeSizeStackTraceId == -1)  			typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  		ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  		gcObject.AllocTickIndex = allocTickIndex;  	}  	break;  }  case 'M':  case 'm': {  	c = ReadChar ();  	int modIndex = ReadInt ();  	sb.Length = 0;  	while (c > '\r') {  		sb.Append ((char)c);  		c = ReadChar ();  	}  	if (c != -1) {  		string lineString = sb.ToString ();  		int addrPos = lineString.LastIndexOf (" 0x");  		if (addrPos <= 0)  			addrPos = lineString.Length;  		int backSlashPos = lineString.LastIndexOf (@"\");  		if (backSlashPos <= 0)  			backSlashPos = -1;  		string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  		string fullName = lineString.Substring (0' addrPos);  		EnsureStringCapacity (modIndex' ref modBasicName);  		modBasicName [modIndex] = basicName;  		EnsureStringCapacity (modIndex' ref modFullName);  		modFullName [modIndex] = fullName;  	}  	break;  }  case 'U':  case 'u': {  	c = ReadChar ();  	ulong oldId = ReadULong ();  	ulong newId = ReadULong ();  	uint length = ReadUInt ();  	Histogram reloHist = null;  	if (pos >= startFileOffset && pos < endFileOffset)  		reloHist = readLogResult.relocatedHistogram;  	if (readLogResult.liveObjectTable != null)  		readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  	break;  }  case 'V':  case 'v': {  	c = ReadChar ();  	ulong startId = ReadULong ();  	uint length = ReadUInt ();  	Histogram reloHist = null;  	if (pos >= startFileOffset && pos < endFileOffset)  		reloHist = readLogResult.relocatedHistogram;  	if (readLogResult.liveObjectTable != null)  		readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  	break;  }  case 'B':  case 'b':  	c = ReadChar ();  	int startGC = ReadInt ();  	int induced = ReadInt ();  	int condemnedGeneration = ReadInt ();  	if (startGC != 0)  		newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  	if (newGcEvent) {  		if (startGC != 0) {  			if (induced != 0) {  				for (int gen = 0; gen <= condemnedGeneration; gen++)  					inducedGcCount [gen]++;  			}  		}  		else {  			int condemnedLimit = condemnedGeneration;  			if (condemnedLimit == 2)  				condemnedLimit = 3;  			for (int gen = 0; gen <= condemnedLimit; gen++) {  				cumulativeGenerationSize [gen] += generationSize [gen];  				gcCount [gen]++;  			}  		}  	}  	for (int gen = 0; gen <= 3; gen++)  		generationSize [gen] = 0;  	while (c >= ' ') {  		ulong rangeStart = ReadULong ();  		ulong rangeLength = ReadULong ();  		ulong rangeLengthReserved = ReadULong ();  		int rangeGeneration = ReadInt ();  		if (c == -1 || rangeGeneration < 0)  			break;  		if (readLogResult.liveObjectTable != null) {  			if (startGC != 0) {  				if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  					readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  			}  			else {  				readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  			}  		}  		generationSize [rangeGeneration] += rangeLength;  	}  	if (startGC == 0 && readLogResult.liveObjectTable != null) {  		readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  	}  	break;  case 'L':  case 'l': {  	c = ReadChar ();  	int isCritical = ReadInt ();  	ulong objectId = ReadULong ();  	if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  		// try to find the allocation stack trace and allocation time  		// from the live object table  		LiveObjectTable.LiveObject liveObject;  		readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  		if (liveObject.id == objectId) {  			if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  				readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  			if (readLogResult.finalizerHistogram != null)  				readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  		}  	}  	break;  }  case 'I':  case 'i':  	c = ReadChar ();  	int tickCount = ReadInt ();  	if (c != -1) {  		lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  		if (maxTickIndex < lastTickIndex)  			maxTickIndex = lastTickIndex;  	}  	break;  case 'G':  case 'g':  	c = ReadChar ();  	int gcGen0Count = ReadInt ();  	int gcGen1Count = ReadInt ();  	int gcGen2Count = ReadInt ();  	// if the newer 'b' lines occur' disregard the 'g' lines.  	if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  		if (c == -1 || gcGen0Count < 0)  			readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  		else  			readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  	}  	break;  case 'N':  case 'n': {  	c = ReadChar ();  	int funcIndex;  	int stackTraceIndex = ReadInt ();  	stackPtr = 0;  	int flag = ReadInt ();  	int matched = flag / 4;  	int hadTypeId = (flag & 2);  	bool hasTypeId = (flag & 1) == 1;  	if (hasTypeId) {  		intStack [stackPtr++] = ReadInt ();  		intStack [stackPtr++] = ReadInt ();  	}  	if (matched > 0 && c != -1) {  		/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  		otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  		int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  		if (matched > stacktrace.Length - hadTypeId)  			matched = stacktrace.Length - hadTypeId;  		for (int i = 0; i < matched; i++) {  			int funcId = stacktrace [i + hadTypeId];  			//Debug.Assert(funcId < funcName.Length);  			if (funcName [funcId] == null)  				funcName [funcId] = String.Empty;  			intStack [stackPtr++] = funcId;  			if (stackPtr >= intStack.Length) {  				intStack = GrowIntVector (intStack);  			}  		}  	}  	while ((funcIndex = ReadInt ()) >= 0) {  		intStack [stackPtr] = funcIndex;  		stackPtr++;  		if (stackPtr >= intStack.Length)  			intStack = GrowIntVector (intStack);  	}  	if (c != -1) {  		stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  	}  	break;  }  case 'y':  case 'Y': {  	c = ReadChar ();  	int threadid = ReadInt ();  	if (!assembliesJustLoaded.ContainsKey (threadid)) {  		assembliesJustLoaded [threadid] = new List<string> ();  	}  	/* int assemblyId = */ReadInt ();  	while (c == ' ' || c == '\t') {  		c = ReadChar ();  	}  	sb.Length = 0;  	while (c > '\r') {  		sb.Append ((char)c);  		c = ReadChar ();  	}  	string assemblyName = sb.ToString ();  	assembliesJustLoaded [threadid].Add (assemblyName);  	break;  }  case 'S':  case 's': {  	c = ReadChar ();  	int stackTraceIndex = ReadInt ();  	int funcIndex;  	stackPtr = 0;  	while ((funcIndex = ReadInt ()) >= 0) {  		intStack [stackPtr] = funcIndex;  		stackPtr++;  		if (stackPtr >= intStack.Length)  			intStack = GrowIntVector (intStack);  	}  	if (c != -1) {  		stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  	}  	break;  }  case 'Z':  case 'z': {  	sb.Length = 0;  	c = ReadChar ();  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	while (c > '\r') {  		sb.Append ((char)c);  		c = ReadChar ();  	}  	if (c != -1) {  		lastTickIndex = AddTimePos (lastLineStartPos);  		if (maxTickIndex < lastTickIndex)  			maxTickIndex = lastTickIndex;  		commentEventList.AddEvent (lastTickIndex' sb.ToString ());  	}  	break;  }  case 'H':  case 'h': {  	c = ReadChar ();  	int threadId = ReadInt ();  	ulong handleId = ReadULong ();  	ulong initialObjectId = ReadULong ();  	int stacktraceId = ReadInt ();  	if (c != -1) {  		if (readLogResult.handleHash != null)  			readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  		if (readLogResult.createdHandlesHistogram != null)  			readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  	}  	break;  }  case 'J':  case 'j': {  	c = ReadChar ();  	int threadId = ReadInt ();  	ulong handleId = ReadULong ();  	int stacktraceId = ReadInt ();  	if (c != -1) {  		if (readLogResult.handleHash != null) {  			if (readLogResult.handleHash.ContainsKey (handleId))  				readLogResult.handleHash.Remove (handleId);  			else {  				//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  				//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  				//for (int i = stacktrace.Length; --i >= 0; )  				//{  				//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  				//}  			}  		}  		if (readLogResult.destroyedHandlesHistogram != null)  			readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  	}  	break;  }  default: {  	// just ignore the unknown  	while (c != '\n' && c != '\r') {  		c = ReadChar ();  	}  	break;  }  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: switch (c) {  case -1:  	break;  case 'F':  case 'f': {  	c = ReadChar ();  	int funcIndex = ReadInt ();  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	string name = ReadString (sb' ' '' false' 255);  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	string signature = ReadString (sb' '\r'' true' 1023);  	ulong addr = ReadULong ();  	uint size = ReadUInt ();  	int modIndex = ReadInt ();  	int stackIndex = ReadInt ();  	if (c != -1) {  		EnsureStringCapacity (funcIndex' ref funcName);  		funcName [funcIndex] = name;  		EnsureStringCapacity (funcIndex' ref funcSignature);  		funcSignature [funcIndex] = signature;  		EnsureIntCapacity (funcIndex' ref funcModule);  		funcModule [funcIndex] = modIndex;  		string nameAndSignature = name;  		if (signature != null)  			nameAndSignature = name + ' ' + signature;  		if (stackIndex >= 0 && readLogResult.functionList != null) {  			funcSignatureIdHash [nameAndSignature] = funcIndex;  			readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  		}  	}  	break;  }  case 'T':  case 't': {  	c = ReadChar ();  	int typeIndex = ReadInt ();  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	if (c != -1 && Char.IsDigit ((char)c)) {  		if (ReadInt () != 0) {  			finalizableTypes [typeIndex] = true;  		}  	}  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	string typeName = ReadString (sb' '\r'' false' 1023);  	if (c != -1) {  		AddTypeName (typeIndex' typeName);  	}  	break;  }  // 'A' with thread identifier  case '!': {  	c = ReadChar ();  	int threadId = ReadInt ();  	ulong id = ReadULong ();  	int typeSizeStackTraceIndex = ReadInt ();  	typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  	if (c != -1) {  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  		if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  			// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  			readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  		}  		List<string> prev;  		if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  			foreach (string assemblyName in prev) {  				assemblies [assemblyName] = -typeSizeStackTraceIndex;  			}  			prev.Clear ();  		}  	}  	readLogResult.hadAllocInfo = true;  	readLogResult.hadCallInfo = true;  	break;  }  case 'A':  case 'a': {  	c = ReadChar ();  	ulong id = ReadULong ();  	int typeSizeStackTraceIndex = ReadInt ();  	typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  	if (c != -1) {  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  		if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  			// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  			readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  		}  	}  	readLogResult.hadAllocInfo = true;  	readLogResult.hadCallInfo = true;  	break;  }  case 'C':  case 'c': {  	c = ReadChar ();  	if (pos < startFileOffset || pos >= endFileOffset) {  		while (c >= ' ')  			c = ReadChar ();  		break;  	}  	int threadIndex = ReadInt ();  	int stackTraceIndex = ReadInt ();  	stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  	if (c != -1) {  		if (readLogResult.callstackHistogram != null) {  			readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  		}  		List<string> prev;  		if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  			foreach (string assemblyName in prev) {  				assemblies [assemblyName] = stackTraceIndex;  			}  			prev.Clear ();  		}  	}  	readLogResult.hadCallInfo = true;  	break;  }  case 'E':  case 'e': {  	c = ReadChar ();  	extendedRootInfoSeen = true;  	thisIsR = true;  	if (pos < startFileOffset || pos >= endFileOffset) {  		while (c >= ' ')  			c = ReadChar ();  		break;  	}  	if (!previousWasR) {  		heapDumpEventList.AddEvent (lastTickIndex' null);  		if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  			readLogResult.objectGraph.BuildTypeGraph ();  			readLogResult.objectGraph.Neuter ();  		}  		Histogram[] h = readLogResult.heapDumpHistograms;  		if (h != null) {  			if (h.Length == requestedIndex)  				readLogResult.requestedObjectGraph = readLogResult.objectGraph;  			readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  			for (int i = 0; i < h.Length; i++)  				readLogResult.heapDumpHistograms [i] = h [i];  			readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  		}  		readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  	}  	ulong objectID = ReadULong ();  	GcRootKind rootKind = (GcRootKind)ReadInt ();  	GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  	ulong rootID = ReadULong ();  	ObjectGraph objectGraph = readLogResult.objectGraph;  	if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  		string rootName;  		switch (rootKind) {  		case GcRootKind.Stack:  			rootName = "Stack";  			break;  		case GcRootKind.Finalizer:  			rootName = "Finalizer";  			break;  		case GcRootKind.Handle:  			rootName = "Handle";  			break;  		default:  			rootName = "Other";  			break;  		}  		if ((rootFlags & GcRootFlags.Pinning) != 0)  			rootName += "' Pinning";  		if ((rootFlags & GcRootFlags.WeakRef) != 0)  			rootName += "' WeakRef";  		if ((rootFlags & GcRootFlags.Interior) != 0)  			rootName += "' Interior";  		if ((rootFlags & GcRootFlags.Refcounted) != 0)  			rootName += "' RefCounted";  		int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  		ulongStack [0] = objectID;  		ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  		objectGraph.AddRootObject (rootObject' rootID);  	}  	break;  }  case 'R':  case 'r': {  	c = ReadChar ();  	thisIsR = true;  	if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  		while (c >= ' ')  			c = ReadChar ();  		Histogram[] h = readLogResult.heapDumpHistograms;  		if (h != null) {  			if (h.Length == requestedIndex)  				readLogResult.requestedObjectGraph = readLogResult.objectGraph;  		}  		break;  	}  	if (!previousWasR) {  		heapDumpEventList.AddEvent (lastTickIndex' null);  		if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  			readLogResult.objectGraph.BuildTypeGraph ();  			readLogResult.objectGraph.Neuter ();  		}  		Histogram[] h = readLogResult.heapDumpHistograms;  		if (h != null) {  			if (h.Length == requestedIndex)  				readLogResult.requestedObjectGraph = readLogResult.objectGraph;  			readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  			for (int i = 0; i < h.Length; i++)  				readLogResult.heapDumpHistograms [i] = h [i];  			readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  		}  		readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  	}  	stackPtr = 0;  	ulong objectID;  	while ((objectID = ReadULong ()) != ulong.MaxValue) {  		if (objectID > 0) {  			ulongStack [stackPtr] = objectID;  			stackPtr++;  			if (stackPtr >= ulongStack.Length)  				ulongStack = GrowULongVector (ulongStack);  		}  	}  	if (c != -1) {  		if (readLogResult.objectGraph != null)  			readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  	}  	break;  }  case 'O':  case 'o': {  	c = ReadChar ();  	if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  		while (c >= ' ')  			c = ReadChar ();  		break;  	}  	ulong objectId = ReadULong ();  	int typeIndex = ReadInt ();  	uint size = ReadUInt ();  	stackPtr = 0;  	ulong objectID;  	while ((objectID = ReadULong ()) != ulong.MaxValue) {  		if (objectID > 0) {  			ulongStack [stackPtr] = objectID;  			stackPtr++;  			if (stackPtr >= ulongStack.Length)  				ulongStack = GrowULongVector (ulongStack);  		}  	}  	if (c != -1) {  		ObjectGraph objectGraph = readLogResult.objectGraph;  		objectGraph.GetOrCreateGcType (typeIndex);  		int typeSizeStackTraceId = -1;  		int allocTickIndex = 0;  		// try to find the allocation stack trace and allocation time  		// from the live object table  		if (readLogResult.liveObjectTable != null) {  			LiveObjectTable.LiveObject liveObject;  			readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  			if (liveObject.id == objectId) {  				int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  				int typeIndexFromLiveObject = stackTrace [0];  				if (typeIndexFromLiveObject == typeIndex) {  					typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  					allocTickIndex = liveObject.allocTickIndex;  					Histogram[] h = readLogResult.heapDumpHistograms;  					if (h != null)  						h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  				}  			}  		}  		if (typeSizeStackTraceId == -1)  			typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  		ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  		gcObject.AllocTickIndex = allocTickIndex;  	}  	break;  }  case 'M':  case 'm': {  	c = ReadChar ();  	int modIndex = ReadInt ();  	sb.Length = 0;  	while (c > '\r') {  		sb.Append ((char)c);  		c = ReadChar ();  	}  	if (c != -1) {  		string lineString = sb.ToString ();  		int addrPos = lineString.LastIndexOf (" 0x");  		if (addrPos <= 0)  			addrPos = lineString.Length;  		int backSlashPos = lineString.LastIndexOf (@"\");  		if (backSlashPos <= 0)  			backSlashPos = -1;  		string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  		string fullName = lineString.Substring (0' addrPos);  		EnsureStringCapacity (modIndex' ref modBasicName);  		modBasicName [modIndex] = basicName;  		EnsureStringCapacity (modIndex' ref modFullName);  		modFullName [modIndex] = fullName;  	}  	break;  }  case 'U':  case 'u': {  	c = ReadChar ();  	ulong oldId = ReadULong ();  	ulong newId = ReadULong ();  	uint length = ReadUInt ();  	Histogram reloHist = null;  	if (pos >= startFileOffset && pos < endFileOffset)  		reloHist = readLogResult.relocatedHistogram;  	if (readLogResult.liveObjectTable != null)  		readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  	break;  }  case 'V':  case 'v': {  	c = ReadChar ();  	ulong startId = ReadULong ();  	uint length = ReadUInt ();  	Histogram reloHist = null;  	if (pos >= startFileOffset && pos < endFileOffset)  		reloHist = readLogResult.relocatedHistogram;  	if (readLogResult.liveObjectTable != null)  		readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  	break;  }  case 'B':  case 'b':  	c = ReadChar ();  	int startGC = ReadInt ();  	int induced = ReadInt ();  	int condemnedGeneration = ReadInt ();  	if (startGC != 0)  		newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  	if (newGcEvent) {  		if (startGC != 0) {  			if (induced != 0) {  				for (int gen = 0; gen <= condemnedGeneration; gen++)  					inducedGcCount [gen]++;  			}  		}  		else {  			int condemnedLimit = condemnedGeneration;  			if (condemnedLimit == 2)  				condemnedLimit = 3;  			for (int gen = 0; gen <= condemnedLimit; gen++) {  				cumulativeGenerationSize [gen] += generationSize [gen];  				gcCount [gen]++;  			}  		}  	}  	for (int gen = 0; gen <= 3; gen++)  		generationSize [gen] = 0;  	while (c >= ' ') {  		ulong rangeStart = ReadULong ();  		ulong rangeLength = ReadULong ();  		ulong rangeLengthReserved = ReadULong ();  		int rangeGeneration = ReadInt ();  		if (c == -1 || rangeGeneration < 0)  			break;  		if (readLogResult.liveObjectTable != null) {  			if (startGC != 0) {  				if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  					readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  			}  			else {  				readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  			}  		}  		generationSize [rangeGeneration] += rangeLength;  	}  	if (startGC == 0 && readLogResult.liveObjectTable != null) {  		readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  	}  	break;  case 'L':  case 'l': {  	c = ReadChar ();  	int isCritical = ReadInt ();  	ulong objectId = ReadULong ();  	if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  		// try to find the allocation stack trace and allocation time  		// from the live object table  		LiveObjectTable.LiveObject liveObject;  		readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  		if (liveObject.id == objectId) {  			if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  				readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  			if (readLogResult.finalizerHistogram != null)  				readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  		}  	}  	break;  }  case 'I':  case 'i':  	c = ReadChar ();  	int tickCount = ReadInt ();  	if (c != -1) {  		lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  		if (maxTickIndex < lastTickIndex)  			maxTickIndex = lastTickIndex;  	}  	break;  case 'G':  case 'g':  	c = ReadChar ();  	int gcGen0Count = ReadInt ();  	int gcGen1Count = ReadInt ();  	int gcGen2Count = ReadInt ();  	// if the newer 'b' lines occur' disregard the 'g' lines.  	if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  		if (c == -1 || gcGen0Count < 0)  			readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  		else  			readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  	}  	break;  case 'N':  case 'n': {  	c = ReadChar ();  	int funcIndex;  	int stackTraceIndex = ReadInt ();  	stackPtr = 0;  	int flag = ReadInt ();  	int matched = flag / 4;  	int hadTypeId = (flag & 2);  	bool hasTypeId = (flag & 1) == 1;  	if (hasTypeId) {  		intStack [stackPtr++] = ReadInt ();  		intStack [stackPtr++] = ReadInt ();  	}  	if (matched > 0 && c != -1) {  		/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  		otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  		int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  		if (matched > stacktrace.Length - hadTypeId)  			matched = stacktrace.Length - hadTypeId;  		for (int i = 0; i < matched; i++) {  			int funcId = stacktrace [i + hadTypeId];  			//Debug.Assert(funcId < funcName.Length);  			if (funcName [funcId] == null)  				funcName [funcId] = String.Empty;  			intStack [stackPtr++] = funcId;  			if (stackPtr >= intStack.Length) {  				intStack = GrowIntVector (intStack);  			}  		}  	}  	while ((funcIndex = ReadInt ()) >= 0) {  		intStack [stackPtr] = funcIndex;  		stackPtr++;  		if (stackPtr >= intStack.Length)  			intStack = GrowIntVector (intStack);  	}  	if (c != -1) {  		stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  	}  	break;  }  case 'y':  case 'Y': {  	c = ReadChar ();  	int threadid = ReadInt ();  	if (!assembliesJustLoaded.ContainsKey (threadid)) {  		assembliesJustLoaded [threadid] = new List<string> ();  	}  	/* int assemblyId = */ReadInt ();  	while (c == ' ' || c == '\t') {  		c = ReadChar ();  	}  	sb.Length = 0;  	while (c > '\r') {  		sb.Append ((char)c);  		c = ReadChar ();  	}  	string assemblyName = sb.ToString ();  	assembliesJustLoaded [threadid].Add (assemblyName);  	break;  }  case 'S':  case 's': {  	c = ReadChar ();  	int stackTraceIndex = ReadInt ();  	int funcIndex;  	stackPtr = 0;  	while ((funcIndex = ReadInt ()) >= 0) {  		intStack [stackPtr] = funcIndex;  		stackPtr++;  		if (stackPtr >= intStack.Length)  			intStack = GrowIntVector (intStack);  	}  	if (c != -1) {  		stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  	}  	break;  }  case 'Z':  case 'z': {  	sb.Length = 0;  	c = ReadChar ();  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	while (c > '\r') {  		sb.Append ((char)c);  		c = ReadChar ();  	}  	if (c != -1) {  		lastTickIndex = AddTimePos (lastLineStartPos);  		if (maxTickIndex < lastTickIndex)  			maxTickIndex = lastTickIndex;  		commentEventList.AddEvent (lastTickIndex' sb.ToString ());  	}  	break;  }  case 'H':  case 'h': {  	c = ReadChar ();  	int threadId = ReadInt ();  	ulong handleId = ReadULong ();  	ulong initialObjectId = ReadULong ();  	int stacktraceId = ReadInt ();  	if (c != -1) {  		if (readLogResult.handleHash != null)  			readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  		if (readLogResult.createdHandlesHistogram != null)  			readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  	}  	break;  }  case 'J':  case 'j': {  	c = ReadChar ();  	int threadId = ReadInt ();  	ulong handleId = ReadULong ();  	int stacktraceId = ReadInt ();  	if (c != -1) {  		if (readLogResult.handleHash != null) {  			if (readLogResult.handleHash.ContainsKey (handleId))  				readLogResult.handleHash.Remove (handleId);  			else {  				//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  				//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  				//for (int i = stacktrace.Length; --i >= 0; )  				//{  				//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  				//}  			}  		}  		if (readLogResult.destroyedHandlesHistogram != null)  			readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  	}  	break;  }  default: {  	// just ignore the unknown  	while (c != '\n' && c != '\r') {  		c = ReadChar ();  	}  	break;  }  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: switch (c) {  case -1:  	break;  case 'F':  case 'f': {  	c = ReadChar ();  	int funcIndex = ReadInt ();  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	string name = ReadString (sb' ' '' false' 255);  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	string signature = ReadString (sb' '\r'' true' 1023);  	ulong addr = ReadULong ();  	uint size = ReadUInt ();  	int modIndex = ReadInt ();  	int stackIndex = ReadInt ();  	if (c != -1) {  		EnsureStringCapacity (funcIndex' ref funcName);  		funcName [funcIndex] = name;  		EnsureStringCapacity (funcIndex' ref funcSignature);  		funcSignature [funcIndex] = signature;  		EnsureIntCapacity (funcIndex' ref funcModule);  		funcModule [funcIndex] = modIndex;  		string nameAndSignature = name;  		if (signature != null)  			nameAndSignature = name + ' ' + signature;  		if (stackIndex >= 0 && readLogResult.functionList != null) {  			funcSignatureIdHash [nameAndSignature] = funcIndex;  			readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  		}  	}  	break;  }  case 'T':  case 't': {  	c = ReadChar ();  	int typeIndex = ReadInt ();  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	if (c != -1 && Char.IsDigit ((char)c)) {  		if (ReadInt () != 0) {  			finalizableTypes [typeIndex] = true;  		}  	}  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	string typeName = ReadString (sb' '\r'' false' 1023);  	if (c != -1) {  		AddTypeName (typeIndex' typeName);  	}  	break;  }  // 'A' with thread identifier  case '!': {  	c = ReadChar ();  	int threadId = ReadInt ();  	ulong id = ReadULong ();  	int typeSizeStackTraceIndex = ReadInt ();  	typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  	if (c != -1) {  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  		if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  			// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  			readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  		}  		List<string> prev;  		if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  			foreach (string assemblyName in prev) {  				assemblies [assemblyName] = -typeSizeStackTraceIndex;  			}  			prev.Clear ();  		}  	}  	readLogResult.hadAllocInfo = true;  	readLogResult.hadCallInfo = true;  	break;  }  case 'A':  case 'a': {  	c = ReadChar ();  	ulong id = ReadULong ();  	int typeSizeStackTraceIndex = ReadInt ();  	typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  	if (c != -1) {  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  		if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  			// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  			readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  		}  	}  	readLogResult.hadAllocInfo = true;  	readLogResult.hadCallInfo = true;  	break;  }  case 'C':  case 'c': {  	c = ReadChar ();  	if (pos < startFileOffset || pos >= endFileOffset) {  		while (c >= ' ')  			c = ReadChar ();  		break;  	}  	int threadIndex = ReadInt ();  	int stackTraceIndex = ReadInt ();  	stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  	if (c != -1) {  		if (readLogResult.callstackHistogram != null) {  			readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  		}  		List<string> prev;  		if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  			foreach (string assemblyName in prev) {  				assemblies [assemblyName] = stackTraceIndex;  			}  			prev.Clear ();  		}  	}  	readLogResult.hadCallInfo = true;  	break;  }  case 'E':  case 'e': {  	c = ReadChar ();  	extendedRootInfoSeen = true;  	thisIsR = true;  	if (pos < startFileOffset || pos >= endFileOffset) {  		while (c >= ' ')  			c = ReadChar ();  		break;  	}  	if (!previousWasR) {  		heapDumpEventList.AddEvent (lastTickIndex' null);  		if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  			readLogResult.objectGraph.BuildTypeGraph ();  			readLogResult.objectGraph.Neuter ();  		}  		Histogram[] h = readLogResult.heapDumpHistograms;  		if (h != null) {  			if (h.Length == requestedIndex)  				readLogResult.requestedObjectGraph = readLogResult.objectGraph;  			readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  			for (int i = 0; i < h.Length; i++)  				readLogResult.heapDumpHistograms [i] = h [i];  			readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  		}  		readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  	}  	ulong objectID = ReadULong ();  	GcRootKind rootKind = (GcRootKind)ReadInt ();  	GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  	ulong rootID = ReadULong ();  	ObjectGraph objectGraph = readLogResult.objectGraph;  	if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  		string rootName;  		switch (rootKind) {  		case GcRootKind.Stack:  			rootName = "Stack";  			break;  		case GcRootKind.Finalizer:  			rootName = "Finalizer";  			break;  		case GcRootKind.Handle:  			rootName = "Handle";  			break;  		default:  			rootName = "Other";  			break;  		}  		if ((rootFlags & GcRootFlags.Pinning) != 0)  			rootName += "' Pinning";  		if ((rootFlags & GcRootFlags.WeakRef) != 0)  			rootName += "' WeakRef";  		if ((rootFlags & GcRootFlags.Interior) != 0)  			rootName += "' Interior";  		if ((rootFlags & GcRootFlags.Refcounted) != 0)  			rootName += "' RefCounted";  		int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  		ulongStack [0] = objectID;  		ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  		objectGraph.AddRootObject (rootObject' rootID);  	}  	break;  }  case 'R':  case 'r': {  	c = ReadChar ();  	thisIsR = true;  	if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  		while (c >= ' ')  			c = ReadChar ();  		Histogram[] h = readLogResult.heapDumpHistograms;  		if (h != null) {  			if (h.Length == requestedIndex)  				readLogResult.requestedObjectGraph = readLogResult.objectGraph;  		}  		break;  	}  	if (!previousWasR) {  		heapDumpEventList.AddEvent (lastTickIndex' null);  		if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  			readLogResult.objectGraph.BuildTypeGraph ();  			readLogResult.objectGraph.Neuter ();  		}  		Histogram[] h = readLogResult.heapDumpHistograms;  		if (h != null) {  			if (h.Length == requestedIndex)  				readLogResult.requestedObjectGraph = readLogResult.objectGraph;  			readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  			for (int i = 0; i < h.Length; i++)  				readLogResult.heapDumpHistograms [i] = h [i];  			readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  		}  		readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  	}  	stackPtr = 0;  	ulong objectID;  	while ((objectID = ReadULong ()) != ulong.MaxValue) {  		if (objectID > 0) {  			ulongStack [stackPtr] = objectID;  			stackPtr++;  			if (stackPtr >= ulongStack.Length)  				ulongStack = GrowULongVector (ulongStack);  		}  	}  	if (c != -1) {  		if (readLogResult.objectGraph != null)  			readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  	}  	break;  }  case 'O':  case 'o': {  	c = ReadChar ();  	if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  		while (c >= ' ')  			c = ReadChar ();  		break;  	}  	ulong objectId = ReadULong ();  	int typeIndex = ReadInt ();  	uint size = ReadUInt ();  	stackPtr = 0;  	ulong objectID;  	while ((objectID = ReadULong ()) != ulong.MaxValue) {  		if (objectID > 0) {  			ulongStack [stackPtr] = objectID;  			stackPtr++;  			if (stackPtr >= ulongStack.Length)  				ulongStack = GrowULongVector (ulongStack);  		}  	}  	if (c != -1) {  		ObjectGraph objectGraph = readLogResult.objectGraph;  		objectGraph.GetOrCreateGcType (typeIndex);  		int typeSizeStackTraceId = -1;  		int allocTickIndex = 0;  		// try to find the allocation stack trace and allocation time  		// from the live object table  		if (readLogResult.liveObjectTable != null) {  			LiveObjectTable.LiveObject liveObject;  			readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  			if (liveObject.id == objectId) {  				int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  				int typeIndexFromLiveObject = stackTrace [0];  				if (typeIndexFromLiveObject == typeIndex) {  					typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  					allocTickIndex = liveObject.allocTickIndex;  					Histogram[] h = readLogResult.heapDumpHistograms;  					if (h != null)  						h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  				}  			}  		}  		if (typeSizeStackTraceId == -1)  			typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  		ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  		gcObject.AllocTickIndex = allocTickIndex;  	}  	break;  }  case 'M':  case 'm': {  	c = ReadChar ();  	int modIndex = ReadInt ();  	sb.Length = 0;  	while (c > '\r') {  		sb.Append ((char)c);  		c = ReadChar ();  	}  	if (c != -1) {  		string lineString = sb.ToString ();  		int addrPos = lineString.LastIndexOf (" 0x");  		if (addrPos <= 0)  			addrPos = lineString.Length;  		int backSlashPos = lineString.LastIndexOf (@"\");  		if (backSlashPos <= 0)  			backSlashPos = -1;  		string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  		string fullName = lineString.Substring (0' addrPos);  		EnsureStringCapacity (modIndex' ref modBasicName);  		modBasicName [modIndex] = basicName;  		EnsureStringCapacity (modIndex' ref modFullName);  		modFullName [modIndex] = fullName;  	}  	break;  }  case 'U':  case 'u': {  	c = ReadChar ();  	ulong oldId = ReadULong ();  	ulong newId = ReadULong ();  	uint length = ReadUInt ();  	Histogram reloHist = null;  	if (pos >= startFileOffset && pos < endFileOffset)  		reloHist = readLogResult.relocatedHistogram;  	if (readLogResult.liveObjectTable != null)  		readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  	break;  }  case 'V':  case 'v': {  	c = ReadChar ();  	ulong startId = ReadULong ();  	uint length = ReadUInt ();  	Histogram reloHist = null;  	if (pos >= startFileOffset && pos < endFileOffset)  		reloHist = readLogResult.relocatedHistogram;  	if (readLogResult.liveObjectTable != null)  		readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  	break;  }  case 'B':  case 'b':  	c = ReadChar ();  	int startGC = ReadInt ();  	int induced = ReadInt ();  	int condemnedGeneration = ReadInt ();  	if (startGC != 0)  		newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  	if (newGcEvent) {  		if (startGC != 0) {  			if (induced != 0) {  				for (int gen = 0; gen <= condemnedGeneration; gen++)  					inducedGcCount [gen]++;  			}  		}  		else {  			int condemnedLimit = condemnedGeneration;  			if (condemnedLimit == 2)  				condemnedLimit = 3;  			for (int gen = 0; gen <= condemnedLimit; gen++) {  				cumulativeGenerationSize [gen] += generationSize [gen];  				gcCount [gen]++;  			}  		}  	}  	for (int gen = 0; gen <= 3; gen++)  		generationSize [gen] = 0;  	while (c >= ' ') {  		ulong rangeStart = ReadULong ();  		ulong rangeLength = ReadULong ();  		ulong rangeLengthReserved = ReadULong ();  		int rangeGeneration = ReadInt ();  		if (c == -1 || rangeGeneration < 0)  			break;  		if (readLogResult.liveObjectTable != null) {  			if (startGC != 0) {  				if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  					readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  			}  			else {  				readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  			}  		}  		generationSize [rangeGeneration] += rangeLength;  	}  	if (startGC == 0 && readLogResult.liveObjectTable != null) {  		readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  	}  	break;  case 'L':  case 'l': {  	c = ReadChar ();  	int isCritical = ReadInt ();  	ulong objectId = ReadULong ();  	if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  		// try to find the allocation stack trace and allocation time  		// from the live object table  		LiveObjectTable.LiveObject liveObject;  		readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  		if (liveObject.id == objectId) {  			if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  				readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  			if (readLogResult.finalizerHistogram != null)  				readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  		}  	}  	break;  }  case 'I':  case 'i':  	c = ReadChar ();  	int tickCount = ReadInt ();  	if (c != -1) {  		lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  		if (maxTickIndex < lastTickIndex)  			maxTickIndex = lastTickIndex;  	}  	break;  case 'G':  case 'g':  	c = ReadChar ();  	int gcGen0Count = ReadInt ();  	int gcGen1Count = ReadInt ();  	int gcGen2Count = ReadInt ();  	// if the newer 'b' lines occur' disregard the 'g' lines.  	if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  		if (c == -1 || gcGen0Count < 0)  			readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  		else  			readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  	}  	break;  case 'N':  case 'n': {  	c = ReadChar ();  	int funcIndex;  	int stackTraceIndex = ReadInt ();  	stackPtr = 0;  	int flag = ReadInt ();  	int matched = flag / 4;  	int hadTypeId = (flag & 2);  	bool hasTypeId = (flag & 1) == 1;  	if (hasTypeId) {  		intStack [stackPtr++] = ReadInt ();  		intStack [stackPtr++] = ReadInt ();  	}  	if (matched > 0 && c != -1) {  		/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  		otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  		int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  		if (matched > stacktrace.Length - hadTypeId)  			matched = stacktrace.Length - hadTypeId;  		for (int i = 0; i < matched; i++) {  			int funcId = stacktrace [i + hadTypeId];  			//Debug.Assert(funcId < funcName.Length);  			if (funcName [funcId] == null)  				funcName [funcId] = String.Empty;  			intStack [stackPtr++] = funcId;  			if (stackPtr >= intStack.Length) {  				intStack = GrowIntVector (intStack);  			}  		}  	}  	while ((funcIndex = ReadInt ()) >= 0) {  		intStack [stackPtr] = funcIndex;  		stackPtr++;  		if (stackPtr >= intStack.Length)  			intStack = GrowIntVector (intStack);  	}  	if (c != -1) {  		stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  	}  	break;  }  case 'y':  case 'Y': {  	c = ReadChar ();  	int threadid = ReadInt ();  	if (!assembliesJustLoaded.ContainsKey (threadid)) {  		assembliesJustLoaded [threadid] = new List<string> ();  	}  	/* int assemblyId = */ReadInt ();  	while (c == ' ' || c == '\t') {  		c = ReadChar ();  	}  	sb.Length = 0;  	while (c > '\r') {  		sb.Append ((char)c);  		c = ReadChar ();  	}  	string assemblyName = sb.ToString ();  	assembliesJustLoaded [threadid].Add (assemblyName);  	break;  }  case 'S':  case 's': {  	c = ReadChar ();  	int stackTraceIndex = ReadInt ();  	int funcIndex;  	stackPtr = 0;  	while ((funcIndex = ReadInt ()) >= 0) {  		intStack [stackPtr] = funcIndex;  		stackPtr++;  		if (stackPtr >= intStack.Length)  			intStack = GrowIntVector (intStack);  	}  	if (c != -1) {  		stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  	}  	break;  }  case 'Z':  case 'z': {  	sb.Length = 0;  	c = ReadChar ();  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	while (c > '\r') {  		sb.Append ((char)c);  		c = ReadChar ();  	}  	if (c != -1) {  		lastTickIndex = AddTimePos (lastLineStartPos);  		if (maxTickIndex < lastTickIndex)  			maxTickIndex = lastTickIndex;  		commentEventList.AddEvent (lastTickIndex' sb.ToString ());  	}  	break;  }  case 'H':  case 'h': {  	c = ReadChar ();  	int threadId = ReadInt ();  	ulong handleId = ReadULong ();  	ulong initialObjectId = ReadULong ();  	int stacktraceId = ReadInt ();  	if (c != -1) {  		if (readLogResult.handleHash != null)  			readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  		if (readLogResult.createdHandlesHistogram != null)  			readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  	}  	break;  }  case 'J':  case 'j': {  	c = ReadChar ();  	int threadId = ReadInt ();  	ulong handleId = ReadULong ();  	int stacktraceId = ReadInt ();  	if (c != -1) {  		if (readLogResult.handleHash != null) {  			if (readLogResult.handleHash.ContainsKey (handleId))  				readLogResult.handleHash.Remove (handleId);  			else {  				//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  				//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  				//for (int i = stacktrace.Length; --i >= 0; )  				//{  				//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  				//}  			}  		}  		if (readLogResult.destroyedHandlesHistogram != null)  			readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  	}  	break;  }  default: {  	// just ignore the unknown  	while (c != '\n' && c != '\r') {  		c = ReadChar ();  	}  	break;  }  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: switch (c) {  case -1:  	break;  case 'F':  case 'f': {  	c = ReadChar ();  	int funcIndex = ReadInt ();  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	string name = ReadString (sb' ' '' false' 255);  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	string signature = ReadString (sb' '\r'' true' 1023);  	ulong addr = ReadULong ();  	uint size = ReadUInt ();  	int modIndex = ReadInt ();  	int stackIndex = ReadInt ();  	if (c != -1) {  		EnsureStringCapacity (funcIndex' ref funcName);  		funcName [funcIndex] = name;  		EnsureStringCapacity (funcIndex' ref funcSignature);  		funcSignature [funcIndex] = signature;  		EnsureIntCapacity (funcIndex' ref funcModule);  		funcModule [funcIndex] = modIndex;  		string nameAndSignature = name;  		if (signature != null)  			nameAndSignature = name + ' ' + signature;  		if (stackIndex >= 0 && readLogResult.functionList != null) {  			funcSignatureIdHash [nameAndSignature] = funcIndex;  			readLogResult.functionList.Add (funcIndex' stackIndex' size' modIndex);  		}  	}  	break;  }  case 'T':  case 't': {  	c = ReadChar ();  	int typeIndex = ReadInt ();  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	if (c != -1 && Char.IsDigit ((char)c)) {  		if (ReadInt () != 0) {  			finalizableTypes [typeIndex] = true;  		}  	}  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	string typeName = ReadString (sb' '\r'' false' 1023);  	if (c != -1) {  		AddTypeName (typeIndex' typeName);  	}  	break;  }  // 'A' with thread identifier  case '!': {  	c = ReadChar ();  	int threadId = ReadInt ();  	ulong id = ReadULong ();  	int typeSizeStackTraceIndex = ReadInt ();  	typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  	if (c != -1) {  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  		if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  			// readLogResult.calls.Add(new CallOrAlloc(false' threadId' typeSizeStackTraceIndex));  			readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  		}  		List<string> prev;  		if (assembliesJustLoaded.TryGetValue (threadId' out prev) && prev.Count != 0) {  			foreach (string assemblyName in prev) {  				assemblies [assemblyName] = -typeSizeStackTraceIndex;  			}  			prev.Clear ();  		}  	}  	readLogResult.hadAllocInfo = true;  	readLogResult.hadCallInfo = true;  	break;  }  case 'A':  case 'a': {  	c = ReadChar ();  	ulong id = ReadULong ();  	int typeSizeStackTraceIndex = ReadInt ();  	typeSizeStackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (typeSizeStackTraceIndex);  	if (c != -1) {  		if (readLogResult.liveObjectTable != null)  			readLogResult.liveObjectTable.InsertObject (id' typeSizeStackTraceIndex' lastTickIndex' lastTickIndex' true' readLogResult.sampleObjectTable);  		if (pos >= startFileOffset && pos < endFileOffset && readLogResult.allocatedHistogram != null) {  			// readLogResult.calls.Add(new CallOrAlloc(false' typeSizeStackTraceIndex));  			readLogResult.allocatedHistogram.AddObject (typeSizeStackTraceIndex' 1);  		}  	}  	readLogResult.hadAllocInfo = true;  	readLogResult.hadCallInfo = true;  	break;  }  case 'C':  case 'c': {  	c = ReadChar ();  	if (pos < startFileOffset || pos >= endFileOffset) {  		while (c >= ' ')  			c = ReadChar ();  		break;  	}  	int threadIndex = ReadInt ();  	int stackTraceIndex = ReadInt ();  	stackTraceIndex = stacktraceTable.MapTypeSizeStacktraceId (stackTraceIndex);  	if (c != -1) {  		if (readLogResult.callstackHistogram != null) {  			readLogResult.callstackHistogram.AddObject (stackTraceIndex' 1);  		}  		List<string> prev;  		if (assembliesJustLoaded.TryGetValue (threadIndex' out prev) && prev.Count != 0) {  			foreach (string assemblyName in prev) {  				assemblies [assemblyName] = stackTraceIndex;  			}  			prev.Clear ();  		}  	}  	readLogResult.hadCallInfo = true;  	break;  }  case 'E':  case 'e': {  	c = ReadChar ();  	extendedRootInfoSeen = true;  	thisIsR = true;  	if (pos < startFileOffset || pos >= endFileOffset) {  		while (c >= ' ')  			c = ReadChar ();  		break;  	}  	if (!previousWasR) {  		heapDumpEventList.AddEvent (lastTickIndex' null);  		if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  			readLogResult.objectGraph.BuildTypeGraph ();  			readLogResult.objectGraph.Neuter ();  		}  		Histogram[] h = readLogResult.heapDumpHistograms;  		if (h != null) {  			if (h.Length == requestedIndex)  				readLogResult.requestedObjectGraph = readLogResult.objectGraph;  			readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  			for (int i = 0; i < h.Length; i++)  				readLogResult.heapDumpHistograms [i] = h [i];  			readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  		}  		readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  	}  	ulong objectID = ReadULong ();  	GcRootKind rootKind = (GcRootKind)ReadInt ();  	GcRootFlags rootFlags = (GcRootFlags)ReadInt ();  	ulong rootID = ReadULong ();  	ObjectGraph objectGraph = readLogResult.objectGraph;  	if (c != -1 && objectID > 0 && objectGraph != null && (rootFlags & GcRootFlags.WeakRef) == 0) {  		string rootName;  		switch (rootKind) {  		case GcRootKind.Stack:  			rootName = "Stack";  			break;  		case GcRootKind.Finalizer:  			rootName = "Finalizer";  			break;  		case GcRootKind.Handle:  			rootName = "Handle";  			break;  		default:  			rootName = "Other";  			break;  		}  		if ((rootFlags & GcRootFlags.Pinning) != 0)  			rootName += "' Pinning";  		if ((rootFlags & GcRootFlags.WeakRef) != 0)  			rootName += "' WeakRef";  		if ((rootFlags & GcRootFlags.Interior) != 0)  			rootName += "' Interior";  		if ((rootFlags & GcRootFlags.Refcounted) != 0)  			rootName += "' RefCounted";  		int rootTypeId = objectGraph.GetOrCreateGcType (rootName);  		ulongStack [0] = objectID;  		ObjectGraph.GcObject rootObject = objectGraph.CreateObject (rootTypeId' 1' ulongStack);  		objectGraph.AddRootObject (rootObject' rootID);  	}  	break;  }  case 'R':  case 'r': {  	c = ReadChar ();  	thisIsR = true;  	if (extendedRootInfoSeen || pos < startFileOffset || pos >= endFileOffset) {  		while (c >= ' ')  			c = ReadChar ();  		Histogram[] h = readLogResult.heapDumpHistograms;  		if (h != null) {  			if (h.Length == requestedIndex)  				readLogResult.requestedObjectGraph = readLogResult.objectGraph;  		}  		break;  	}  	if (!previousWasR) {  		heapDumpEventList.AddEvent (lastTickIndex' null);  		if (readLogResult.objectGraph != null && !readLogResult.objectGraph.empty) {  			readLogResult.objectGraph.BuildTypeGraph ();  			readLogResult.objectGraph.Neuter ();  		}  		Histogram[] h = readLogResult.heapDumpHistograms;  		if (h != null) {  			if (h.Length == requestedIndex)  				readLogResult.requestedObjectGraph = readLogResult.objectGraph;  			readLogResult.heapDumpHistograms = new Histogram[h.Length + 1];  			for (int i = 0; i < h.Length; i++)  				readLogResult.heapDumpHistograms [i] = h [i];  			readLogResult.heapDumpHistograms [h.Length] = new Histogram (this' lastTickIndex);  		}  		readLogResult.objectGraph = new ObjectGraph (this' lastTickIndex);  	}  	stackPtr = 0;  	ulong objectID;  	while ((objectID = ReadULong ()) != ulong.MaxValue) {  		if (objectID > 0) {  			ulongStack [stackPtr] = objectID;  			stackPtr++;  			if (stackPtr >= ulongStack.Length)  				ulongStack = GrowULongVector (ulongStack);  		}  	}  	if (c != -1) {  		if (readLogResult.objectGraph != null)  			readLogResult.objectGraph.AddRoots (stackPtr' ulongStack);  	}  	break;  }  case 'O':  case 'o': {  	c = ReadChar ();  	if (pos < startFileOffset || pos >= endFileOffset || readLogResult.objectGraph == null) {  		while (c >= ' ')  			c = ReadChar ();  		break;  	}  	ulong objectId = ReadULong ();  	int typeIndex = ReadInt ();  	uint size = ReadUInt ();  	stackPtr = 0;  	ulong objectID;  	while ((objectID = ReadULong ()) != ulong.MaxValue) {  		if (objectID > 0) {  			ulongStack [stackPtr] = objectID;  			stackPtr++;  			if (stackPtr >= ulongStack.Length)  				ulongStack = GrowULongVector (ulongStack);  		}  	}  	if (c != -1) {  		ObjectGraph objectGraph = readLogResult.objectGraph;  		objectGraph.GetOrCreateGcType (typeIndex);  		int typeSizeStackTraceId = -1;  		int allocTickIndex = 0;  		// try to find the allocation stack trace and allocation time  		// from the live object table  		if (readLogResult.liveObjectTable != null) {  			LiveObjectTable.LiveObject liveObject;  			readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  			if (liveObject.id == objectId) {  				int[] stackTrace = stacktraceTable.IndexToStacktrace (liveObject.typeSizeStacktraceIndex);  				int typeIndexFromLiveObject = stackTrace [0];  				if (typeIndexFromLiveObject == typeIndex) {  					typeSizeStackTraceId = liveObject.typeSizeStacktraceIndex;  					allocTickIndex = liveObject.allocTickIndex;  					Histogram[] h = readLogResult.heapDumpHistograms;  					if (h != null)  						h [h.Length - 1].AddObject (liveObject.typeSizeStacktraceIndex' 1);  				}  			}  		}  		if (typeSizeStackTraceId == -1)  			typeSizeStackTraceId = stacktraceTable.GetOrCreateTypeSizeId (typeIndex' (int)size);  		ObjectGraph.GcObject gcObject = objectGraph.CreateAndEnterObject (objectId' typeSizeStackTraceId' stackPtr' ulongStack);  		gcObject.AllocTickIndex = allocTickIndex;  	}  	break;  }  case 'M':  case 'm': {  	c = ReadChar ();  	int modIndex = ReadInt ();  	sb.Length = 0;  	while (c > '\r') {  		sb.Append ((char)c);  		c = ReadChar ();  	}  	if (c != -1) {  		string lineString = sb.ToString ();  		int addrPos = lineString.LastIndexOf (" 0x");  		if (addrPos <= 0)  			addrPos = lineString.Length;  		int backSlashPos = lineString.LastIndexOf (@"\");  		if (backSlashPos <= 0)  			backSlashPos = -1;  		string basicName = lineString.Substring (backSlashPos + 1' addrPos - backSlashPos - 1);  		string fullName = lineString.Substring (0' addrPos);  		EnsureStringCapacity (modIndex' ref modBasicName);  		modBasicName [modIndex] = basicName;  		EnsureStringCapacity (modIndex' ref modFullName);  		modFullName [modIndex] = fullName;  	}  	break;  }  case 'U':  case 'u': {  	c = ReadChar ();  	ulong oldId = ReadULong ();  	ulong newId = ReadULong ();  	uint length = ReadUInt ();  	Histogram reloHist = null;  	if (pos >= startFileOffset && pos < endFileOffset)  		reloHist = readLogResult.relocatedHistogram;  	if (readLogResult.liveObjectTable != null)  		readLogResult.liveObjectTable.UpdateObjects (reloHist' oldId' newId' length' lastTickIndex' readLogResult.sampleObjectTable);  	break;  }  case 'V':  case 'v': {  	c = ReadChar ();  	ulong startId = ReadULong ();  	uint length = ReadUInt ();  	Histogram reloHist = null;  	if (pos >= startFileOffset && pos < endFileOffset)  		reloHist = readLogResult.relocatedHistogram;  	if (readLogResult.liveObjectTable != null)  		readLogResult.liveObjectTable.UpdateObjects (reloHist' startId' startId' length' lastTickIndex' readLogResult.sampleObjectTable);  	break;  }  case 'B':  case 'b':  	c = ReadChar ();  	int startGC = ReadInt ();  	int induced = ReadInt ();  	int condemnedGeneration = ReadInt ();  	if (startGC != 0)  		newGcEvent = gcEventList.AddEvent (lastTickIndex' null);  	if (newGcEvent) {  		if (startGC != 0) {  			if (induced != 0) {  				for (int gen = 0; gen <= condemnedGeneration; gen++)  					inducedGcCount [gen]++;  			}  		}  		else {  			int condemnedLimit = condemnedGeneration;  			if (condemnedLimit == 2)  				condemnedLimit = 3;  			for (int gen = 0; gen <= condemnedLimit; gen++) {  				cumulativeGenerationSize [gen] += generationSize [gen];  				gcCount [gen]++;  			}  		}  	}  	for (int gen = 0; gen <= 3; gen++)  		generationSize [gen] = 0;  	while (c >= ' ') {  		ulong rangeStart = ReadULong ();  		ulong rangeLength = ReadULong ();  		ulong rangeLengthReserved = ReadULong ();  		int rangeGeneration = ReadInt ();  		if (c == -1 || rangeGeneration < 0)  			break;  		if (readLogResult.liveObjectTable != null) {  			if (startGC != 0) {  				if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  					readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  			}  			else {  				readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  			}  		}  		generationSize [rangeGeneration] += rangeLength;  	}  	if (startGC == 0 && readLogResult.liveObjectTable != null) {  		readLogResult.liveObjectTable.RecordGc (lastTickIndex' condemnedGeneration' readLogResult.sampleObjectTable' false);  	}  	break;  case 'L':  case 'l': {  	c = ReadChar ();  	int isCritical = ReadInt ();  	ulong objectId = ReadULong ();  	if (pos >= startFileOffset && pos < endFileOffset && readLogResult.liveObjectTable != null) {  		// try to find the allocation stack trace and allocation time  		// from the live object table  		LiveObjectTable.LiveObject liveObject;  		readLogResult.liveObjectTable.GetNextObject (objectId' objectId' out liveObject);  		if (liveObject.id == objectId) {  			if (isCritical != 0 && readLogResult.criticalFinalizerHistogram != null)  				readLogResult.criticalFinalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  			if (readLogResult.finalizerHistogram != null)  				readLogResult.finalizerHistogram.AddObject (liveObject.typeSizeStacktraceIndex' 1);  		}  	}  	break;  }  case 'I':  case 'i':  	c = ReadChar ();  	int tickCount = ReadInt ();  	if (c != -1) {  		lastTickIndex = AddTimePos (tickCount' lastLineStartPos);  		if (maxTickIndex < lastTickIndex)  			maxTickIndex = lastTickIndex;  	}  	break;  case 'G':  case 'g':  	c = ReadChar ();  	int gcGen0Count = ReadInt ();  	int gcGen1Count = ReadInt ();  	int gcGen2Count = ReadInt ();  	// if the newer 'b' lines occur' disregard the 'g' lines.  	if (gcCount [0] == 0 && readLogResult.liveObjectTable != null) {  		if (c == -1 || gcGen0Count < 0)  			readLogResult.liveObjectTable.RecordGc (lastTickIndex' 0' readLogResult.sampleObjectTable' gcGen0Count < 0);  		else  			readLogResult.liveObjectTable.RecordGc (lastTickIndex' gcGen0Count' gcGen1Count' gcGen2Count' readLogResult.sampleObjectTable);  	}  	break;  case 'N':  case 'n': {  	c = ReadChar ();  	int funcIndex;  	int stackTraceIndex = ReadInt ();  	stackPtr = 0;  	int flag = ReadInt ();  	int matched = flag / 4;  	int hadTypeId = (flag & 2);  	bool hasTypeId = (flag & 1) == 1;  	if (hasTypeId) {  		intStack [stackPtr++] = ReadInt ();  		intStack [stackPtr++] = ReadInt ();  	}  	if (matched > 0 && c != -1) {  		/* use some other stack trace as a reference */int otherStackTraceId = ReadInt ();  		otherStackTraceId = stacktraceTable.MapTypeSizeStacktraceId (otherStackTraceId);  		int[] stacktrace = stacktraceTable.IndexToStacktrace (otherStackTraceId);  		if (matched > stacktrace.Length - hadTypeId)  			matched = stacktrace.Length - hadTypeId;  		for (int i = 0; i < matched; i++) {  			int funcId = stacktrace [i + hadTypeId];  			//Debug.Assert(funcId < funcName.Length);  			if (funcName [funcId] == null)  				funcName [funcId] = String.Empty;  			intStack [stackPtr++] = funcId;  			if (stackPtr >= intStack.Length) {  				intStack = GrowIntVector (intStack);  			}  		}  	}  	while ((funcIndex = ReadInt ()) >= 0) {  		intStack [stackPtr] = funcIndex;  		stackPtr++;  		if (stackPtr >= intStack.Length)  			intStack = GrowIntVector (intStack);  	}  	if (c != -1) {  		stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' hasTypeId);  	}  	break;  }  case 'y':  case 'Y': {  	c = ReadChar ();  	int threadid = ReadInt ();  	if (!assembliesJustLoaded.ContainsKey (threadid)) {  		assembliesJustLoaded [threadid] = new List<string> ();  	}  	/* int assemblyId = */ReadInt ();  	while (c == ' ' || c == '\t') {  		c = ReadChar ();  	}  	sb.Length = 0;  	while (c > '\r') {  		sb.Append ((char)c);  		c = ReadChar ();  	}  	string assemblyName = sb.ToString ();  	assembliesJustLoaded [threadid].Add (assemblyName);  	break;  }  case 'S':  case 's': {  	c = ReadChar ();  	int stackTraceIndex = ReadInt ();  	int funcIndex;  	stackPtr = 0;  	while ((funcIndex = ReadInt ()) >= 0) {  		intStack [stackPtr] = funcIndex;  		stackPtr++;  		if (stackPtr >= intStack.Length)  			intStack = GrowIntVector (intStack);  	}  	if (c != -1) {  		stacktraceTable.Add (stackTraceIndex' intStack' stackPtr' false);  	}  	break;  }  case 'Z':  case 'z': {  	sb.Length = 0;  	c = ReadChar ();  	while (c == ' ' || c == '\t')  		c = ReadChar ();  	while (c > '\r') {  		sb.Append ((char)c);  		c = ReadChar ();  	}  	if (c != -1) {  		lastTickIndex = AddTimePos (lastLineStartPos);  		if (maxTickIndex < lastTickIndex)  			maxTickIndex = lastTickIndex;  		commentEventList.AddEvent (lastTickIndex' sb.ToString ());  	}  	break;  }  case 'H':  case 'h': {  	c = ReadChar ();  	int threadId = ReadInt ();  	ulong handleId = ReadULong ();  	ulong initialObjectId = ReadULong ();  	int stacktraceId = ReadInt ();  	if (c != -1) {  		if (readLogResult.handleHash != null)  			readLogResult.handleHash [handleId] = new HandleInfo (threadId' handleId' initialObjectId' lastTickIndex' stacktraceId);  		if (readLogResult.createdHandlesHistogram != null)  			readLogResult.createdHandlesHistogram.AddObject (stacktraceId' 1);  	}  	break;  }  case 'J':  case 'j': {  	c = ReadChar ();  	int threadId = ReadInt ();  	ulong handleId = ReadULong ();  	int stacktraceId = ReadInt ();  	if (c != -1) {  		if (readLogResult.handleHash != null) {  			if (readLogResult.handleHash.ContainsKey (handleId))  				readLogResult.handleHash.Remove (handleId);  			else {  				//Console.WriteLine("Non-existent handle {0:x} destroyed in line {1}"' handleId' line);  				//int[] stacktrace = stacktraceTable.IndexToStacktrace(stacktraceId);  				//for (int i = stacktrace.Length; --i >= 0; )  				//{  				//    Console.WriteLine("  {0}"' funcName[stacktrace[i]]);  				//}  			}  		}  		if (readLogResult.destroyedHandlesHistogram != null)  			readLogResult.destroyedHandlesHistogram.AddObject (stacktraceId' 1);  	}  	break;  }  default: {  	// just ignore the unknown  	while (c != '\n' && c != '\r') {  		c = ReadChar ();  	}  	break;  }  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: if (newGcEvent) {  	if (startGC != 0) {  		if (induced != 0) {  			for (int gen = 0; gen <= condemnedGeneration; gen++)  				inducedGcCount [gen]++;  		}  	}  	else {  		int condemnedLimit = condemnedGeneration;  		if (condemnedLimit == 2)  			condemnedLimit = 3;  		for (int gen = 0; gen <= condemnedLimit; gen++) {  			cumulativeGenerationSize [gen] += generationSize [gen];  			gcCount [gen]++;  		}  	}  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: if (newGcEvent) {  	if (startGC != 0) {  		if (induced != 0) {  			for (int gen = 0; gen <= condemnedGeneration; gen++)  				inducedGcCount [gen]++;  		}  	}  	else {  		int condemnedLimit = condemnedGeneration;  		if (condemnedLimit == 2)  			condemnedLimit = 3;  		for (int gen = 0; gen <= condemnedLimit; gen++) {  			cumulativeGenerationSize [gen] += generationSize [gen];  			gcCount [gen]++;  		}  	}  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: if (startGC != 0) {  	if (induced != 0) {  		for (int gen = 0; gen <= condemnedGeneration; gen++)  			inducedGcCount [gen]++;  	}  }  else {  	int condemnedLimit = condemnedGeneration;  	if (condemnedLimit == 2)  		condemnedLimit = 3;  	for (int gen = 0; gen <= condemnedLimit; gen++) {  		cumulativeGenerationSize [gen] += generationSize [gen];  		gcCount [gen]++;  	}  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: if (startGC != 0) {  	if (induced != 0) {  		for (int gen = 0; gen <= condemnedGeneration; gen++)  			inducedGcCount [gen]++;  	}  }  else {  	int condemnedLimit = condemnedGeneration;  	if (condemnedLimit == 2)  		condemnedLimit = 3;  	for (int gen = 0; gen <= condemnedLimit; gen++) {  		cumulativeGenerationSize [gen] += generationSize [gen];  		gcCount [gen]++;  	}  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: if (condemnedLimit == 2)  	condemnedLimit = 3;  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: if (condemnedLimit == 2)  	condemnedLimit = 3;  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: condemnedLimit = 3;  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: for (int gen = 0; gen <= 3; gen++)  	generationSize [gen] = 0;  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: while (c >= ' ') {  	ulong rangeStart = ReadULong ();  	ulong rangeLength = ReadULong ();  	ulong rangeLengthReserved = ReadULong ();  	int rangeGeneration = ReadInt ();  	if (c == -1 || rangeGeneration < 0)  		break;  	if (readLogResult.liveObjectTable != null) {  		if (startGC != 0) {  			if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  				readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  		}  		else {  			readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  		}  	}  	generationSize [rangeGeneration] += rangeLength;  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: if (readLogResult.liveObjectTable != null) {  	if (startGC != 0) {  		if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  			readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  	}  	else {  		readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  	}  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: if (startGC != 0) {  	if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  		readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  }  else {  	readLogResult.liveObjectTable.GenerationInterval (rangeStart' rangeLength' rangeGeneration' lastTickIndex);  }  
Magic Number,breinstormin.profiler,ReadNewLog,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Readers.cs,ReadFile,The following statement contains a magic number: if (rangeGeneration > condemnedGeneration && condemnedGeneration != 2)  	readLogResult.liveObjectTable.Preserve (rangeStart' rangeLength' lastTickIndex);  
Magic Number,breinstormin.profiler,Vertex,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Vertex.cs,nameSpaceOf,The following statement contains a magic number: while (true) {  	int nextSeparatorPos = name.IndexOf ('.'' thisSeparatorPos + 1' endPos - (thisSeparatorPos + 1));  	if (nextSeparatorPos < 0 && thisSeparatorPos < name.Length - 2)  		nextSeparatorPos = name.IndexOf ("::"' thisSeparatorPos + 1' endPos - (thisSeparatorPos + 1));  	if (nextSeparatorPos < 0 || nextSeparatorPos >= name.Length - 1)  		break;  	prevSeparatorPos = thisSeparatorPos;  	thisSeparatorPos = nextSeparatorPos;  }  
Magic Number,breinstormin.profiler,Vertex,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\Vertex.cs,nameSpaceOf,The following statement contains a magic number: if (nextSeparatorPos < 0 && thisSeparatorPos < name.Length - 2)  	nextSeparatorPos = name.IndexOf ("::"' thisSeparatorPos + 1' endPos - (thisSeparatorPos + 1));  
Missing Default,breinstormin.profiler,CLRProfiler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.profiler\CLRProfiler.cs,ProfileProcess,The following switch statement is missing a default case: switch (processtype) {  case ProfilingProcessType.ASPNET:  	serviceName = null;  	break;  case ProfilingProcessType.Executable:  	serviceName = null;  	break;  case ProfilingProcessType.Service:  	break;  }  
