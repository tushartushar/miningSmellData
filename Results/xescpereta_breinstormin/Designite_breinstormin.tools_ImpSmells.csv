Implementation smell,Namespace,Class,File,Method,Description
Long Method,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The method has 134 lines of code.
Long Method,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The method has 199 lines of code.
Long Method,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The method has 199 lines of code.
Long Method,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The method has 273 lines of code.
Complex Method,breinstormin.tools.config,ListViewEx,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\ListViewEx.cs,WndProc,Cyclomatic complexity of the method is 10
Complex Method,breinstormin.tools.config.UI,appSettings_Visual_Comparer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\appSettings_Visual_Comparer.cs,_load,Cyclomatic complexity of the method is 10
Complex Method,breinstormin.tools.config.UI,appSettings_Visual_Comparer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\appSettings_Visual_Comparer.cs,lnkSave_LinkClicked,Cyclomatic complexity of the method is 10
Complex Method,breinstormin.tools.googleMaps,JsonEnumTypeConverterExtensions,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\googleMaps\JsonEnumTypeConverter.cs,AsResponseStatus,Cyclomatic complexity of the method is 15
Complex Method,breinstormin.tools.googleMaps,JsonEnumTypeConverterExtensions,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\googleMaps\JsonEnumTypeConverter.cs,AsAddressType,Cyclomatic complexity of the method is 69
Complex Method,breinstormin.tools.googleMaps,JsonEnumTypeConverterExtensions,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\googleMaps\JsonEnumTypeConverter.cs,AsLocationType,Cyclomatic complexity of the method is 12
Complex Method,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,Cyclomatic complexity of the method is 9
Complex Method,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyBrightness,Cyclomatic complexity of the method is 9
Complex Method,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,Cyclomatic complexity of the method is 9
Complex Method,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,Cyclomatic complexity of the method is 11
Complex Method,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,Cyclomatic complexity of the method is 9
Complex Method,breinstormin.tools.testing,tooltesting,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\testing\tooltesting.cs,testgeo,Cyclomatic complexity of the method is 8
Complex Method,breinstormin.tools.visualstudio,VSProject,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\visualstudio\VSProject.cs,Load,Cyclomatic complexity of the method is 18
Complex Method,breinstormin.tools.visualstudio,VSProject,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\visualstudio\VSProject.cs,ReadProject,Cyclomatic complexity of the method is 18
Complex Method,breinstormin.tools.visualstudio,VSProject,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\visualstudio\VSProject.cs,ReadBuildConfigSettings,Cyclomatic complexity of the method is 11
Complex Method,breinstormin.tools.visualstudio,VSProject,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\visualstudio\VSProject.cs,ReadItemGroup,Cyclomatic complexity of the method is 28
Complex Method,breinstormin.tools.visualstudio,VSSolution,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\visualstudio\VSSolution.cs,Load,Cyclomatic complexity of the method is 15
Complex Method,breinstormin.tools.web.css,HSV,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\HSV.cs,ToRGB,Cyclomatic complexity of the method is 31
Complex Method,breinstormin.tools.web.css,HTMLRenderer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\HTMLRenderer.cs,Render,Cyclomatic complexity of the method is 14
Complex Method,breinstormin.tools.web.css,HTMLRenderer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\HTMLRenderer.cs,Render,Cyclomatic complexity of the method is 17
Complex Method,breinstormin.tools.web.css,HTMLRenderer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\HTMLRenderer.cs,Render,Cyclomatic complexity of the method is 9
Complex Method,breinstormin.tools.web.css,HTMLRenderer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\HTMLRenderer.cs,Render,Cyclomatic complexity of the method is 19
Complex Method,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,CSS3,Cyclomatic complexity of the method is 9
Complex Method,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,ruleset,Cyclomatic complexity of the method is 15
Complex Method,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,Cyclomatic complexity of the method is 48
Complex Method,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,URI,Cyclomatic complexity of the method is 10
Complex Method,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,medium,Cyclomatic complexity of the method is 23
Complex Method,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,identity,Cyclomatic complexity of the method is 29
Complex Method,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,expr,Cyclomatic complexity of the method is 8
Complex Method,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,declaration,Cyclomatic complexity of the method is 8
Complex Method,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,selector,Cyclomatic complexity of the method is 9
Complex Method,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,Cyclomatic complexity of the method is 18
Complex Method,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,Cyclomatic complexity of the method is 20
Complex Method,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,Cyclomatic complexity of the method is 45
Complex Method,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,Cyclomatic complexity of the method is 190
Complex Method,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,Cyclomatic complexity of the method is 23
Complex Method,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,CheckLiteral,Cyclomatic complexity of the method is 41
Complex Method,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,Cyclomatic complexity of the method is 106
Complex Method,breinstormin.tools.web.css.Model,Attribute,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Attribute.cs,ToString,Cyclomatic complexity of the method is 19
Complex Method,breinstormin.tools.web.css.Model,Directive,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Directive.cs,ToString,Cyclomatic complexity of the method is 14
Complex Method,breinstormin.tools.web.css.Model,Function,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Function.cs,ToString,Cyclomatic complexity of the method is 8
Complex Method,breinstormin.tools.web.css.Model,PropertyValue,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\PropertyValue.cs,DeHex,Cyclomatic complexity of the method is 23
Complex Method,breinstormin.tools.web.css.Model,SimpleSelector,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\SimpleSelector.cs,ToString,Cyclomatic complexity of the method is 18
Complex Method,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToString,Cyclomatic complexity of the method is 8
Complex Method,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,Cyclomatic complexity of the method is 30
Complex Method,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,DeHex,Cyclomatic complexity of the method is 23
Complex Method,DotNet.Tools.WIN32,Win32_MapNetworkDrive,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32_MapNetworkDrive.cs,zMapDrive,Cyclomatic complexity of the method is 9
Long Parameter List,breinstormin.tools.config,InputBox,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\InputBox.cs,Show,The method has 5 parameters.
Long Parameter List,breinstormin.tools.cryptograpthy,RijndaelSimple,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\cryptography\RijndaelSimple.cs,Encrypt,The method has 7 parameters.
Long Parameter List,breinstormin.tools.cryptograpthy,RijndaelSimple,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\cryptography\RijndaelSimple.cs,Decrypt,The method has 7 parameters.
Long Parameter List,breinstormin.tools.image,ImageMgr,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageMgr.cs,CropPng,The method has 6 parameters.
Long Parameter List,breinstormin.tools.image,ImageMgr,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageMgr.cs,CropJpg,The method has 6 parameters.
Long Parameter List,breinstormin.tools.image,breinImage,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\breinImage.cs,DrawScaledImage,The method has 6 parameters.
Long Parameter List,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The method has 6 parameters.
Long Parameter List,breinstormin.tools.syndicate,RSSEvents,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\syndicate\RSSEvents.cs,RSSEvents,The method has 5 parameters.
Long Parameter List,DotNet.Tools.TerminalServer,ITerminalServicesSession,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\ITerminalServicesSession.cs,MessageBox,The method has 8 parameters.
Long Parameter List,DotNet.Tools.TerminalServer,TerminalServicesSession,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\TerminalServicesSession.cs,MessageBox,The method has 8 parameters.
Long Parameter List,breinstormin.tools.visualstudio,VSProjectWithFileInfo,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\visualstudio\VSProjectWithFileInfo.cs,VSProjectWithFileInfo,The method has 5 parameters.
Long Parameter List,DotNet.Tools.WIN32,IWmiAccess,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\IWmiAccess.cs,InvokeInstanceMethod,The method has 5 parameters.
Long Parameter List,DotNet.Tools.WIN32,Win32API,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,NtQueryObject,The method has 5 parameters.
Long Parameter List,DotNet.Tools.WIN32,Win32API,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,DuplicateHandle,The method has 7 parameters.
Long Parameter List,DotNet.Tools.WIN32,Win32API,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,LogonUser,The method has 6 parameters.
Long Parameter List,DotNet.Tools.WIN32,Win32API,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,WTSQuerySessionInformation,The method has 5 parameters.
Long Parameter List,DotNet.Tools.WIN32,Win32API,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,WTSEnumerateSessions,The method has 5 parameters.
Long Parameter List,DotNet.Tools.WIN32,Win32API,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,WinStationQueryInformation,The method has 6 parameters.
Long Parameter List,DotNet.Tools.WIN32,Win32API,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,WinStationQueryInformationRemoteAddress,The method has 6 parameters.
Long Parameter List,DotNet.Tools.WIN32,Win32API,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,WTSSendMessage,The method has 10 parameters.
Long Parameter List,DotNet.Tools.WIN32,Win32API,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,WTSEnumerateServers,The method has 5 parameters.
Long Parameter List,DotNet.Tools.WIN32,Win32API,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,WTSEnumerateProcesses,The method has 5 parameters.
Long Parameter List,DotNet.Tools.WIN32,Win32API,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,WinStationShadow,The method has 5 parameters.
Long Parameter List,DotNet.Tools.WIN32,Win32API,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,WinStationConnectW,The method has 5 parameters.
Long Parameter List,DotNet.Tools.WIN32,NativeMethodsHelper,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,QuerySessionInformationForString,The method has 5 parameters.
Long Parameter List,DotNet.Tools.WIN32,NativeMethodsHelper,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,QuerySessionInformationForStruct,The method has 5 parameters.
Long Parameter List,DotNet.Tools.WIN32,NativeMethodsHelper,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,SendMessage,The method has 7 parameters.
Long Parameter List,DotNet.Tools.WIN32,NativeMethodsHelper,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,QuerySessionInformationForInt,The method has 5 parameters.
Long Parameter List,DotNet.Tools.WIN32,NativeMethodsHelper,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,QuerySessionInformationForShort,The method has 5 parameters.
Long Parameter List,DotNet.Tools.WIN32,NativeMethodsHelper,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,LegacyConnect,The method has 5 parameters.
Long Parameter List,DotNet.Tools.WIN32,Win32_DiskDrive,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32_DiskDrive.cs,Chkdsk,The method has 6 parameters.
Long Parameter List,DotNet.Tools.WIN32,Win32_Service,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32_Service.cs,Change,The method has 11 parameters.
Long Parameter List,DotNet.Tools.WIN32,Win32_Service,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32_Service.cs,Install,The method has 7 parameters.
Long Parameter List,DotNet.Tools.WIN32,Win32_Service,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32_Service.cs,Install,The method has 8 parameters.
Long Parameter List,DotNet.Tools.WIN32,Win32_Service,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32_Service.cs,Install,The method has 9 parameters.
Long Parameter List,DotNet.Tools.WIN32,WmiAccess,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\WmiAccess.cs,InvokeInstanceMethod,The method has 5 parameters.
Long Statement,breinstormin.tools.config,InputBox,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\InputBox.cs,InitializeComponent,The length of the statement  "	lblPrompt.Anchor = ((AnchorStyles)((((AnchorStyles.Top | AnchorStyles.Bottom) | AnchorStyles.Left) | AnchorStyles.Right))); " is 123.
Long Statement,breinstormin.tools.config.UI,appSettings_Visual_Editor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\appSettings_Visual_Editor.cs,_re_load,The length of the statement  "			lstAppSettingsKEYS.Columns [0].Text = "AppSettings.KEYS (" + _file_app_config.AppSettings.Keys.Length.ToString () + ")"; " is 120.
Long Statement,breinstormin.tools.cryptograpthy,RijndaelSimpleTest,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\cryptography\RijndaelSimple.cs,Test1,The length of the statement  "	string cipherText = RijndaelSimple.Encrypt (plainText' passPhrase' saltValue' hashAlgorithm' passwordIterations' initVector' keySize); " is 134.
Long Statement,breinstormin.tools.cryptograpthy,RijndaelSimpleTest,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\cryptography\RijndaelSimple.cs,Test1,The length of the statement  "	plainText = RijndaelSimple.Decrypt (cipherText' passPhrase' saltValue' hashAlgorithm' passwordIterations' initVector' keySize); " is 127.
Long Statement,breinstormin.tools.googleMaps.Elevation,ElevationRequest,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\googleMaps\Elevation\ElevationRequest.cs,ToUri,The length of the statement  "	var url = "json?".Append ("locations="' Locations).Append ("path="' Path).Append ("samples="' Samples).Append ("sensor="' Sensor).TrimEnd ('&'); " is 144.
Long Statement,breinstormin.tools.googleMaps,JsonEnumTypeConverter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\googleMaps\JsonEnumTypeConverter.cs,CanConvert,The length of the statement  "	return objectType == typeof(ServiceResponseStatus) || objectType == typeof(AddressType) || objectType == typeof(LocationType); " is 126.
Long Statement,breinstormin.tools.googleMaps.Geocoding,GeocodingRequest,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\googleMaps\Geocoding\GeocodingRequest.cs,ToUri,The length of the statement  "	var url = "json?".Append ("address="' Address).Append ("latlng="' LatitudeLongitude).Append ("bounds="' Bounds).Append ("region="' Region).Append ("language="' Language).Append ("sensor="' Sensor).TrimEnd ('&'); " is 211.
Long Statement,breinstormin.tools.googleMaps.StaticMaps,StaticMap,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\googleMaps\StaticMaps\StaticMap.cs,ToUri,The length of the statement  "	var url = "staticmap?".Append ("center="' Center).Append ("zoom="' Zoom).Append ("size="' Size).Append ("format="' Format).Append ("maptype="' MapType).Append ("mobile="' Mobile).Append ("language="' Language).Append ("markers="' Markers).Append ("path="' Path).Append ("visible="' Visible).Append ("sensor="' Sensor).TrimEnd ('&'); " is 332.
Long Statement,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The length of the statement  "			R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset); " is 413.
Long Statement,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The length of the statement  "			G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset); " is 413.
Long Statement,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The length of the statement  "			B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset); " is 413.
Long Statement,breinstormin.tools.image,breinImage,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\breinImage.cs,DrawScaledImage,The length of the statement  "			g.DrawImage (sourceImage' new Rectangle (x' y' width' height)' 0' 0' sourceImage.Width' sourceImage.Height' GraphicsUnit.Pixel' wrapMode); " is 138.
Long Statement,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,CreateKernel,The length of the statement  "		kernel [gaussianWidth - 1 - pos] = kernel [pos] = Math.Sqrt (Math.Sin ((((pos + 1) * (Math.PI / 2)) - mean) / range)) * sd; " is 123.
Long Statement,breinstormin.tools.log,_Log,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\log\_Log.cs,Flush,The length of the statement  "							Console.WriteLine ("Error en Flush en el close " + this._LogName + ". La exc es: " + ex.Message + "\r\n" + ex.StackTrace); " is 122.
Long Statement,breinstormin.tools.log,_LogCollection,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\log\_LogCollection.cs,GetLogContent,The length of the statement  "		System.IO.FileStream fs = new System.IO.FileStream (filename' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.ReadWrite); " is 145.
Long Statement,breinstormin.tools.random,RandomEngine,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\random\RandomEngine.cs,GetRandomNumber,The length of the statement  "	System.Security.Cryptography.RNGCryptoServiceProvider rng = new System.Security.Cryptography.RNGCryptoServiceProvider (); " is 121.
Long Statement,DotNet.Tools.TerminalServer,TerminalServicesSession,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\TerminalServicesSession.cs,MessageBox,The length of the statement  "	MessageBox (text' caption' default(WIN32.Win32API.RemoteMessageBoxButtons)' icon' default(WIN32.Win32API.RemoteMessageBoxDefaultButton)' default(WIN32.Win32API.RemoteMessageBoxOptions)' TimeSpan.Zero' false); " is 208.
Long Statement,DotNet.Tools.TerminalServer,TerminalServicesSession,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\TerminalServicesSession.cs,MessageBox,The length of the statement  "	var result = WIN32.NativeMethodsHelper.SendMessage (_server.Handle' _sessionId' caption' text' style' timeoutSeconds' synchronous); " is 131.
Long Statement,DotNet.Tools.TerminalServer,TerminalServicesSession,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\TerminalServicesSession.cs,LoadWtsInfoProperties,The length of the statement  "	var info = WIN32.NativeMethodsHelper.QuerySessionInformationForStruct<WIN32.Win32API.WTSINFO> (_server.Handle' _sessionId' WIN32.Win32API.WTS_INFO_CLASS.WTSSessionInfo); " is 169.
Long Statement,DotNet.Tools.TerminalServer,TerminalServicesSession,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\TerminalServicesSession.cs,LoadWtsInfoProperties,The length of the statement  "	_incomingStatistics.Value = new ProtocolStatistics (info.IncomingBytes' info.IncomingFrames' info.IncomingCompressedBytes); " is 123.
Long Statement,DotNet.Tools.TerminalServer,TerminalServicesSession,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\TerminalServicesSession.cs,LoadWtsInfoProperties,The length of the statement  "	_outgoingStatistics.Value = new ProtocolStatistics (info.OutgoingBytes' info.OutgoingFrames' info.OutgoingCompressedBytes); " is 123.
Long Statement,DotNet.Tools.TerminalServer,TerminalServicesSession,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\TerminalServicesSession.cs,GetClientName,The length of the statement  "	return WIN32.NativeMethodsHelper.QuerySessionInformationForString (_server.Handle' _sessionId' WIN32.Win32API.WTS_INFO_CLASS.WTSClientName); " is 140.
Long Statement,DotNet.Tools.TerminalServer,TerminalServicesSession,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\TerminalServicesSession.cs,GetApplicationName,The length of the statement  "	return WIN32.NativeMethodsHelper.QuerySessionInformationForString (_server.Handle' _sessionId' WIN32.Win32API.WTS_INFO_CLASS.WTSApplicationName); " is 145.
Long Statement,DotNet.Tools.TerminalServer,TerminalServicesSession,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\TerminalServicesSession.cs,GetInitialProgram,The length of the statement  "	return WIN32.NativeMethodsHelper.QuerySessionInformationForString (_server.Handle' _sessionId' WIN32.Win32API.WTS_INFO_CLASS.WTSInitialProgram); " is 144.
Long Statement,DotNet.Tools.TerminalServer,TerminalServicesSession,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\TerminalServicesSession.cs,GetWorkingDirectory,The length of the statement  "	return WIN32.NativeMethodsHelper.QuerySessionInformationForString (_server.Handle' _sessionId' WIN32.Win32API.WTS_INFO_CLASS.WTSWorkingDirectory); " is 146.
Long Statement,DotNet.Tools.TerminalServer,TerminalServicesSession,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\TerminalServicesSession.cs,GetClientProtocolType,The length of the statement  "	return (ClientProtocolType)WIN32.NativeMethodsHelper.QuerySessionInformationForShort (_server.Handle' _sessionId' WIN32.Win32API.WTS_INFO_CLASS.WTSClientProtocolType); " is 167.
Long Statement,DotNet.Tools.TerminalServer,TerminalServicesSession,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\TerminalServicesSession.cs,GetClientProductId,The length of the statement  "	return WIN32.NativeMethodsHelper.QuerySessionInformationForShort (_server.Handle' _sessionId' WIN32.Win32API.WTS_INFO_CLASS.WTSClientProductId); " is 144.
Long Statement,DotNet.Tools.TerminalServer,TerminalServicesSession,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\TerminalServicesSession.cs,GetClientHardwareId,The length of the statement  "	return WIN32.NativeMethodsHelper.QuerySessionInformationForInt (_server.Handle' _sessionId' WIN32.Win32API.WTS_INFO_CLASS.WTSClientHardwareId); " is 143.
Long Statement,DotNet.Tools.TerminalServer,TerminalServicesSession,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\TerminalServicesSession.cs,GetClientDirectory,The length of the statement  "	return WIN32.NativeMethodsHelper.QuerySessionInformationForString (_server.Handle' _sessionId' WIN32.Win32API.WTS_INFO_CLASS.WTSClientDirectory); " is 145.
Long Statement,DotNet.Tools.TerminalServer,TerminalServicesSession,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\TerminalServicesSession.cs,GetClientDisplay,The length of the statement  "	var clientDisplay = WIN32.NativeMethodsHelper.QuerySessionInformationForStruct<WIN32.Win32API.WTS_CLIENT_DISPLAY> (_server.Handle' _sessionId' WIN32.Win32API.WTS_INFO_CLASS.WTSClientDisplay); " is 191.
Long Statement,DotNet.Tools.TerminalServer,TerminalServicesSession,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\TerminalServicesSession.cs,GetClientIPAddress,The length of the statement  "	var clientAddress = WIN32.NativeMethodsHelper.QuerySessionInformationForStruct<WIN32.Win32API.WTS_CLIENT_ADDRESS> (_server.Handle' _sessionId' WIN32.Win32API.WTS_INFO_CLASS.WTSClientAddress); " is 191.
Long Statement,DotNet.Tools.TerminalServer,TerminalServicesSession,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\TerminalServicesSession.cs,GetClientBuildNumber,The length of the statement  "	return WIN32.NativeMethodsHelper.QuerySessionInformationForInt (_server.Handle' _sessionId' WIN32.Win32API.WTS_INFO_CLASS.WTSClientBuildNumber); " is 144.
Long Statement,breinstormin.tools.testing,LoadAssembly,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\testing\tooltesting.cs,TestAzure,The length of the statement  "	azure.AzureBlobStorageEngine eng = new azure.AzureBlobStorageEngine ("hostaldog"' "XpcnoVzn2RyZkfI+8uhILK3mv0aDclGmlwAT+tolsg/r7TeOr5e/i+rDjpXBme0BVfWv1sUfyLvaBceaDvvnMw=="' "http"); " is 182.
Long Statement,breinstormin.tools.testing,LoadAssembly,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\testing\tooltesting.cs,TestAzure,The length of the statement  "		//    Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob blblob = (Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob)blob; " is 123.
Long Statement,breinstormin.tools.testing,LoadAssembly,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\testing\tooltesting.cs,TestAzure,The length of the statement  "		//<add key="AzureAccountKey" value="XpcnoVzn2RyZkfI+8uhILK3mv0aDclGmlwAT+tolsg/r7TeOr5e/i+rDjpXBme0BVfWv1sUfyLvaBceaDvvnMw=="/> " is 127.
Long Statement,breinstormin.tools.testing,LoadAssembly,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\testing\tooltesting.cs,TestAzure,The length of the statement  "	eng.UploadData (new System.IO.FileStream (@"c:\temp\ab3f4428-856b-4660-8979-5542fa16547e.jpg"' System.IO.FileMode.Open)' "images"' guid + ".jpg"' "image/jpeg"); " is 160.
Long Statement,breinstormin.tools.visualstudio.Tests,Testing,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\visualstudio\Tests\Testing.cs,test1,The length of the statement  "	string sol_file = @"\\svigi-11\e$\Webs\DotNetDes\ECI.Config\ECI.Applications\MergeSystem.Indexus.Service\Logs\NAnt\NAntBuild00002\MergeSystem.Indexus.Service.sln"; " is 163.
Long Statement,breinstormin.tools.visualstudio,VSProject,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\visualstudio\VSProject.cs,ReadPropertyGroup,The length of the statement  "				throw new ArgumentException (string.Format (CultureInfo.InvariantCulture' "Property '{0}' Ya se ha a�adido al grupo. VS project '{1}'"' xmlReader.Name' ProjectFileName)); " is 170.
Long Statement,breinstormin.tools.visualstudio,VSProject,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\visualstudio\VSProject.cs,ReadPropertyGroup,The length of the statement  "				throw new ArgumentException (string.Format (CultureInfo.InvariantCulture' "Property '{0}' Ya se ha a�adido al grupo. VS project '{1}'"' xmlReader.Name' ProjectFileName)); " is 170.
Long Statement,breinstormin.tools.visualstudio,VSProjectWithFileInfo,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\visualstudio\VSProjectWithFileInfo.cs,OpenProjectFileAsXmlDocument,The length of the statement  "	using (Stream stream = File.Open (Path.Combine (OwnerSolution.SolutionDirectoryPath' ProjectFileName)' FileMode.Open' FileAccess.Read)) { " is 137.
Long Statement,breinstormin.tools.visualstudio,VSSolution,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\visualstudio\VSSolution.cs,Load,The length of the statement  "						parser.ThrowParserException (String.Format (CultureInfo.InvariantCulture' "Could not parse solution file (line {0})."' parser.LineCount)); " is 138.
Long Statement,breinstormin.tools.visualstudio,VSSolution,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\visualstudio\VSSolution.cs,LoadProjects,The length of the statement  "			((VSProjectWithFileInfo)projectInfo).Project = VSProject.Load (((VSProjectWithFileInfo)projectInfo).ProjectFileNameFull); " is 121.
Long Statement,breinstormin.tools.web.css,HTMLRenderer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\HTMLRenderer.cs,RenderCharSet,The length of the statement  "	return string.Format ("{2}<span class=\"directive_name\">{0}</span> <span class=\"expression\">{1}</span>"' dir.Name' Render (dir.Expression)' start); " is 150.
Long Statement,breinstormin.tools.web.css,HTMLRenderer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\HTMLRenderer.cs,Render,The length of the statement  "	txt.AppendFormat ("{0}: <span class=\"expression\">{1}</span>{2}"' dec.Name' Render (dec.Expression)' dec.Important ? " !important" : ""); " is 138.
Long Statement,breinstormin.tools.web.css,HTMLRenderer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\HTMLRenderer.cs,Render,The length of the statement  "		txt.AppendFormat ("{1}<span class=\"simpleSelector\">{0}</span>"' Render (ss.Child)' ss.Child.ElementName != null ? " " : ""); " is 126.
Long Statement,breinstormin.tools.web.css.Model,SimpleSelector,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\SimpleSelector.cs,ToString,The length of the statement  "simpleselector<out SimpleSelector ss> =		(. ss = new SimpleSelector(); string psd = null; breinstormin.tools.web.css.Attribute atb = null; SimpleSelector parent = ss; .)" is 169.
Long Statement,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The length of the statement  "		if ((function.Name.ToLower ().Equals ("rgb") && function.Expression.Terms.Count == 3) || (function.Name.ToLower ().Equals ("rgba") && function.Expression.Terms.Count == 4)) { " is 174.
Long Statement,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The length of the statement  "		else if ((function.Name.ToLower ().Equals ("hsl") && function.Expression.Terms.Count == 3) || (function.Name.Equals ("hsla") && function.Expression.Terms.Count == 4)) { " is 168.
Long Statement,DotNet.Tools.WIN32,CIM_DataFile,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\CIM_DataFile.cs,GetCIM_DataFilesByName,The length of the statement  "	System.Management.ManagementObjectCollection mog = WmiAccess.GetInstancesByNameForFiles (machineName' "CIM_DataFile"' filename); " is 128.
Long Statement,DotNet.Tools.WIN32,FileApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\FileApi.cs,_loadInfo,The length of the statement  "	IntPtr m_ipProcessHwnd = m_ipProcessHwnd = Win32API.OpenProcess (Win32API.ProcessAccessFlags.DupHandle' false' sYSTEM_HANDLE_INFORMATION.ProcessID); " is 148.
Long Statement,DotNet.Tools.WIN32,FileApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\FileApi.cs,_loadInfo,The length of the statement  "	if (!Win32API.DuplicateHandle (m_ipProcessHwnd' sYSTEM_HANDLE_INFORMATION.Handle' Win32API.GetCurrentProcess ()' out ipHandle' 0' false' Win32API.DUPLICATE_SAME_ACCESS)) " is 169.
Long Statement,DotNet.Tools.WIN32,FileApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\FileApi.cs,_loadInfo,The length of the statement  "	Win32API.NtQueryObject (ipHandle' (int)Win32API.ObjectInformationClass.ObjectBasicInformation' ipBasic' Marshal.SizeOf (objBasic)' ref nLength); " is 144.
Long Statement,DotNet.Tools.WIN32,FileApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\FileApi.cs,_loadInfo,The length of the statement  "	while ((uint)(nReturn = Win32API.NtQueryObject (ipHandle' (int)Win32API.ObjectInformationClass.ObjectTypeInformation' ipObjectType' nLength' ref nLength)) == Win32API.STATUS_INFO_LENGTH_MISMATCH) { " is 197.
Long Statement,DotNet.Tools.WIN32,FileApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\FileApi.cs,_loadInfo,The length of the statement  "	while ((uint)(nReturn = Win32API.NtQueryObject (ipHandle' (int)Win32API.ObjectInformationClass.ObjectNameInformation' ipObjectName' nLength' ref nLength)) == Win32API.STATUS_INFO_LENGTH_MISMATCH) { " is 197.
Long Statement,DotNet.Tools.WIN32,ProcessApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\ProcessApi.cs,GetHandles,The length of the statement  "	while ((nStatus = Win32API.NtQuerySystemInformation (CNST_SYSTEM_HANDLE_INFORMATION' ipHandlePointer' nHandleInfoSize' ref nLength)) == STATUS_INFO_LENGTH_MISMATCH) { " is 166.
Long Statement,DotNet.Tools.WIN32,NativeMethodsHelper,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,GetConnectionState,The length of the statement  "	return QuerySessionInformation (server' sessionId' Win32API.WTS_INFO_CLASS.WTSConnectState' (mem' returned) => (Win32API.ConnectionState)Marshal.ReadInt32 (mem)); " is 162.
Long Statement,DotNet.Tools.WIN32,NativeMethodsHelper,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,QuerySessionInformationForString,The length of the statement  "	return QuerySessionInformation (server' sessionId' infoClass' (mem' returned) => mem == IntPtr.Zero ? null : Marshal.PtrToStringAuto (mem)); " is 140.
Long Statement,DotNet.Tools.WIN32,NativeMethodsHelper,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,QuerySessionInformationForStruct,The length of the statement  "	return QuerySessionInformation (server' sessionId' infoClass' (mem' returned) => (T)Marshal.PtrToStructure (mem' typeof(T))); " is 125.
Long Statement,DotNet.Tools.WIN32,NativeMethodsHelper,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,GetWinStationInformation,The length of the statement  "	if (Win32API.WinStationQueryInformation (server.Handle' sessionId' (int)Win32API.WINSTATIONINFOCLASS.WinStationInformation' ref wsInfo' Marshal.SizeOf (typeof(Win32API.WINSTATIONINFORMATIONW))' ref retLen) != 0) { " is 213.
Long Statement,DotNet.Tools.WIN32,NativeMethodsHelper,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,FileTimeToDateTime,The length of the statement  "	return new DateTime (sysTime.Year' sysTime.Month' sysTime.Day' sysTime.Hour' sysTime.Minute' sysTime.Second' sysTime.Milliseconds' DateTimeKind.Utc).ToLocalTime (); " is 164.
Long Statement,DotNet.Tools.WIN32,NativeMethodsHelper,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,SendMessage,The length of the statement  "	if (Win32API.WTSSendMessage (server.Handle' sessionId' title' title.Length * Marshal.SystemDefaultCharSize' message' message.Length * Marshal.SystemDefaultCharSize' style' timeout' out result' wait) == 0) { " is 206.
Long Statement,DotNet.Tools.WIN32,NativeMethodsHelper,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,QuerySessionInformationForEndPoint,The length of the statement  "	if (Win32API.WinStationQueryInformationRemoteAddress (server.Handle' sessionId' Win32API.WINSTATIONINFOCLASS.WinStationRemoteAddress' ref remoteAddress' Marshal.SizeOf (typeof(Win32API.WINSTATIONREMOTEADDRESS))' out retLen) != 0) { " is 231.
Long Statement,DotNet.Tools.WIN32,Win32_ImpersonateLoginToken,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32_ImpersonateLoginToken.cs,_get_access,The length of the statement  "	if (Win32API.LogonUser (_user_name' _domain_name' _password' Win32API.LogonTypes.NewCredentials' Win32API.LogonProviders.Default' out _token)) { " is 144.
Long Statement,DotNet.Tools.WIN32,Win32_LogicalDisk,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32_LogicalDisk.cs,GetWin32_LogicalDisks,The length of the statement  "	System.Management.ManagementObjectCollection mg = WIN32.WmiAccess.GetInstancesOfClass (machineName' "Win32_LogicalDisk"); " is 121.
Long Statement,DotNet.Tools.WIN32,Win32_Process,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32_Process.cs,GetProcessesWithOpenedFile,The length of the statement  "	System.Management.ManagementObjectCollection mog = WmiAccess.GetInstancesByNameForFiles (machineName' "CIM_DataFile"' filename); " is 128.
Long Statement,DotNet.Tools.WIN32,Win32_Service,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32_Service.cs,Install,The length of the statement  "	return Install (Environment.MachineName' name' displayName' physicalLocation' startMode' userName' password' dependencies' false); " is 130.
Long Statement,DotNet.Tools.WIN32,Win32_WTSSessions,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32_WTSSessions.cs,GetSessions,The length of the statement  "				Win32API.WTS_SESSION_INFO si = (Win32API.WTS_SESSION_INFO)System.Runtime.InteropServices.Marshal.PtrToStructure ((System.IntPtr)current' typeof(Win32API.WTS_SESSION_INFO)); " is 172.
Long Statement,DotNet.Tools.WIN32,WmiAccess,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\WmiAccess.cs,GetAssociatorsByClassName,The length of the statement  "	ObjectQuery query = new ObjectQuery ("ASSOCIATORS OF {" + className + "} WHERE AssocClass = '" + associatedClass + "'"); " is 120.
Complex Conditional,breinstormin.tools.config,InputBox,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\InputBox.cs,LoadForm,The conditional expression  "(_xPos >= 0 && _xPos < workingRectangle.Width - 100) && (_yPos >= 0 && _yPos < workingRectangle.Height - 100)"  is complex.
Complex Conditional,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The conditional expression  "ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z'"  is complex.
Complex Conditional,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The conditional expression  "ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z'"  is complex.
Complex Conditional,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The conditional expression  "(function.Name.ToLower ().Equals ("rgb") && function.Expression.Terms.Count == 3) || (function.Name.ToLower ().Equals ("rgba") && function.Expression.Terms.Count == 4)"  is complex.
Complex Conditional,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The conditional expression  "(function.Name.ToLower ().Equals ("hsl") && function.Expression.Terms.Count == 3) || (function.Name.Equals ("hsla") && function.Expression.Terms.Count == 4)"  is complex.
Empty Catch Block,breinstormin.tools.amazon,S3Engine,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\amazon\S3Engine.cs,GetFile,The method has an empty catch block.
Empty Catch Block,breinstormin.tools.visualstudio,VSProject,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\visualstudio\VSProject.cs,ReadBuildConfigSettings,The method has an empty catch block.
Empty Catch Block,breinstormin.tools.visualstudio,VSProject,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\visualstudio\VSProject.cs,ReadVS2003Items,The method has an empty catch block.
Empty Catch Block,breinstormin.tools.visualstudio,VSSolution,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\visualstudio\VSSolution.cs,Load,The method has an empty catch block.
Empty Catch Block,breinstormin.tools.visualstudio,VSSolution,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\visualstudio\VSSolution.cs,Load,The method has an empty catch block.
Empty Catch Block,breinstormin.tools.web.css.Model,PropertyValue,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\PropertyValue.cs,ToColor,The method has an empty catch block.
Empty Catch Block,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,GetRGBValue,The method has an empty catch block.
Empty Catch Block,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,GetHueValue,The method has an empty catch block.
Empty Catch Block,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The method has an empty catch block.
Empty Catch Block,DotNet.Tools.WIN32,FileApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\FileApi.cs,_loadInfo,The method has an empty catch block.
Empty Catch Block,DotNet.Tools.WIN32,ProcessApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\ProcessApi.cs,GetHandles,The method has an empty catch block.
Empty Catch Block,DotNet.Tools.WIN32,ProcessApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\ProcessApi.cs,GetFileHandles,The method has an empty catch block.
Empty Catch Block,DotNet.Tools.WIN32,ProcessApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\ProcessApi.cs,GetFiles,The method has an empty catch block.
Empty Catch Block,DotNet.Tools.WIN32,Win32_ImpersonateLoginToken,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32_ImpersonateLoginToken.cs,Undo,The method has an empty catch block.
Empty Catch Block,DotNet.Tools.WIN32,Win32_ImpersonateLoginToken,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32_ImpersonateLoginToken.cs,_get_access,The method has an empty catch block.
Empty Catch Block,DotNet.Tools.WIN32,Win32_MapNetworkDrive,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32_MapNetworkDrive.cs,zMapDrive,The method has an empty catch block.
Empty Catch Block,DotNet.Tools.WIN32,Win32_Process,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32_Process.cs,GetOpenedCIM_DataFiles,The method has an empty catch block.
Empty Catch Block,DotNet.Tools.WIN32,Win32_Process,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32_Process.cs,GetOpenedFiles,The method has an empty catch block.
Magic Number,breinstormin.tools.config,InputBox,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\InputBox.cs,InitializeComponent,The following statement contains a magic number: lblPrompt.Location = new Point (12' 9);  
Magic Number,breinstormin.tools.config,InputBox,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\InputBox.cs,InitializeComponent,The following statement contains a magic number: lblPrompt.Location = new Point (12' 9);  
Magic Number,breinstormin.tools.config,InputBox,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\InputBox.cs,InitializeComponent,The following statement contains a magic number: lblPrompt.Size = new Size (302' 82);  
Magic Number,breinstormin.tools.config,InputBox,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\InputBox.cs,InitializeComponent,The following statement contains a magic number: lblPrompt.Size = new Size (302' 82);  
Magic Number,breinstormin.tools.config,InputBox,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\InputBox.cs,InitializeComponent,The following statement contains a magic number: lblPrompt.TabIndex = 3;  
Magic Number,breinstormin.tools.config,InputBox,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\InputBox.cs,InitializeComponent,The following statement contains a magic number: btnOK.Location = new Point (326' 8);  
Magic Number,breinstormin.tools.config,InputBox,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\InputBox.cs,InitializeComponent,The following statement contains a magic number: btnOK.Location = new Point (326' 8);  
Magic Number,breinstormin.tools.config,InputBox,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\InputBox.cs,InitializeComponent,The following statement contains a magic number: btnOK.Size = new Size (64' 24);  
Magic Number,breinstormin.tools.config,InputBox,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\InputBox.cs,InitializeComponent,The following statement contains a magic number: btnOK.Size = new Size (64' 24);  
Magic Number,breinstormin.tools.config,InputBox,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\InputBox.cs,InitializeComponent,The following statement contains a magic number: btnCancel.Location = new Point (326' 40);  
Magic Number,breinstormin.tools.config,InputBox,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\InputBox.cs,InitializeComponent,The following statement contains a magic number: btnCancel.Location = new Point (326' 40);  
Magic Number,breinstormin.tools.config,InputBox,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\InputBox.cs,InitializeComponent,The following statement contains a magic number: btnCancel.Size = new Size (64' 24);  
Magic Number,breinstormin.tools.config,InputBox,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\InputBox.cs,InitializeComponent,The following statement contains a magic number: btnCancel.Size = new Size (64' 24);  
Magic Number,breinstormin.tools.config,InputBox,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\InputBox.cs,InitializeComponent,The following statement contains a magic number: btnCancel.TabIndex = 2;  
Magic Number,breinstormin.tools.config,InputBox,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\InputBox.cs,InitializeComponent,The following statement contains a magic number: txtInput.Location = new Point (8' 100);  
Magic Number,breinstormin.tools.config,InputBox,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\InputBox.cs,InitializeComponent,The following statement contains a magic number: txtInput.Location = new Point (8' 100);  
Magic Number,breinstormin.tools.config,InputBox,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\InputBox.cs,InitializeComponent,The following statement contains a magic number: txtInput.Size = new Size (379' 20);  
Magic Number,breinstormin.tools.config,InputBox,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\InputBox.cs,InitializeComponent,The following statement contains a magic number: txtInput.Size = new Size (379' 20);  
Magic Number,breinstormin.tools.config,InputBox,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\InputBox.cs,InitializeComponent,The following statement contains a magic number: frmInputDialog.AutoScaleBaseSize = new Size (5' 13);  
Magic Number,breinstormin.tools.config,InputBox,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\InputBox.cs,InitializeComponent,The following statement contains a magic number: frmInputDialog.AutoScaleBaseSize = new Size (5' 13);  
Magic Number,breinstormin.tools.config,InputBox,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\InputBox.cs,InitializeComponent,The following statement contains a magic number: frmInputDialog.ClientSize = new Size (398' 128);  
Magic Number,breinstormin.tools.config,InputBox,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\InputBox.cs,InitializeComponent,The following statement contains a magic number: frmInputDialog.ClientSize = new Size (398' 128);  
Magic Number,breinstormin.tools.config,InputBox,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\InputBox.cs,LoadForm,The following statement contains a magic number: if ((_xPos >= 0 && _xPos < workingRectangle.Width - 100) && (_yPos >= 0 && _yPos < workingRectangle.Height - 100)) {  	frmInputDialog.StartPosition = FormStartPosition.Manual;  	frmInputDialog.Location = new System.Drawing.Point (_xPos' _yPos);  }  else  	frmInputDialog.StartPosition = FormStartPosition.CenterScreen;  
Magic Number,breinstormin.tools.config,InputBox,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\InputBox.cs,LoadForm,The following statement contains a magic number: if ((_xPos >= 0 && _xPos < workingRectangle.Width - 100) && (_yPos >= 0 && _yPos < workingRectangle.Height - 100)) {  	frmInputDialog.StartPosition = FormStartPosition.Manual;  	frmInputDialog.Location = new System.Drawing.Point (_xPos' _yPos);  }  else  	frmInputDialog.StartPosition = FormStartPosition.CenterScreen;  
Magic Number,breinstormin.tools.config,InputBox,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\InputBox.cs,LoadForm,The following statement contains a magic number: Txt.Y = Txt.Y + (n * 4);  
Magic Number,breinstormin.tools.config,InputBox,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\InputBox.cs,LoadForm,The following statement contains a magic number: form.Height = form.Height + (n * 4);  
Magic Number,breinstormin.tools.config.UI,appSettings_Visual_Comparer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\appSettings_Visual_Comparer.cs,_load_columns,The following statement contains a magic number: if (_config_files != null) {  	for (int i = 1; i < lstAppSettingsKEYS.Columns.Count; i++) {  		lstAppSettingsKEYS.Columns.RemoveAt (i);  	}  	for (int i = 1; i < lstDiff_Appsettings.Columns.Count; i++) {  		lstDiff_Appsettings.Columns.RemoveAt (i);  	}  	foreach (string _cf_file in _config_files) {  		lstDiff_Appsettings.Columns.Add (_cf_file).Width = 120;  		lstAppSettingsKEYS.Columns.Add (_cf_file).Width = 120;  	}  }  
Magic Number,breinstormin.tools.config.UI,appSettings_Visual_Comparer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\appSettings_Visual_Comparer.cs,_load_columns,The following statement contains a magic number: if (_config_files != null) {  	for (int i = 1; i < lstAppSettingsKEYS.Columns.Count; i++) {  		lstAppSettingsKEYS.Columns.RemoveAt (i);  	}  	for (int i = 1; i < lstDiff_Appsettings.Columns.Count; i++) {  		lstDiff_Appsettings.Columns.RemoveAt (i);  	}  	foreach (string _cf_file in _config_files) {  		lstDiff_Appsettings.Columns.Add (_cf_file).Width = 120;  		lstAppSettingsKEYS.Columns.Add (_cf_file).Width = 120;  	}  }  
Magic Number,breinstormin.tools.config.UI,appSettings_Visual_Comparer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\appSettings_Visual_Comparer.cs,_load_columns,The following statement contains a magic number: foreach (string _cf_file in _config_files) {  	lstDiff_Appsettings.Columns.Add (_cf_file).Width = 120;  	lstAppSettingsKEYS.Columns.Add (_cf_file).Width = 120;  }  
Magic Number,breinstormin.tools.config.UI,appSettings_Visual_Comparer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\appSettings_Visual_Comparer.cs,_load_columns,The following statement contains a magic number: foreach (string _cf_file in _config_files) {  	lstDiff_Appsettings.Columns.Add (_cf_file).Width = 120;  	lstAppSettingsKEYS.Columns.Add (_cf_file).Width = 120;  }  
Magic Number,breinstormin.tools.config.UI,appSettings_Visual_Comparer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\appSettings_Visual_Comparer.cs,_load_columns,The following statement contains a magic number: lstDiff_Appsettings.Columns.Add (_cf_file).Width = 120;  
Magic Number,breinstormin.tools.config.UI,appSettings_Visual_Comparer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\appSettings_Visual_Comparer.cs,_load_columns,The following statement contains a magic number: lstAppSettingsKEYS.Columns.Add (_cf_file).Width = 120;  
Magic Number,breinstormin.tools.image,ColorHandler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ColorHandler.cs,StringToColor,The following statement contains a magic number: if (colorString.Length == 3) {  	// Convert from RGB-form  	color = Color.FromArgb (255' (c & 0xf00) >> 8' (c & 0x0f0) >> 4' (c & 0x00f));  }  else {  	// Convert from RRGGBB-form  	color = Color.FromArgb (255' (c & 0xff0000) >> 16' (c & 0x00ff00) >> 8' (c & 0x0000ff));  }  
Magic Number,breinstormin.tools.image,ColorHandler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ColorHandler.cs,StringToColor,The following statement contains a magic number: if (colorString.Length == 3) {  	// Convert from RGB-form  	color = Color.FromArgb (255' (c & 0xf00) >> 8' (c & 0x0f0) >> 4' (c & 0x00f));  }  else {  	// Convert from RRGGBB-form  	color = Color.FromArgb (255' (c & 0xff0000) >> 16' (c & 0x00ff00) >> 8' (c & 0x0000ff));  }  
Magic Number,breinstormin.tools.image,ColorHandler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ColorHandler.cs,StringToColor,The following statement contains a magic number: if (colorString.Length == 3) {  	// Convert from RGB-form  	color = Color.FromArgb (255' (c & 0xf00) >> 8' (c & 0x0f0) >> 4' (c & 0x00f));  }  else {  	// Convert from RRGGBB-form  	color = Color.FromArgb (255' (c & 0xff0000) >> 16' (c & 0x00ff00) >> 8' (c & 0x0000ff));  }  
Magic Number,breinstormin.tools.image,ColorHandler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ColorHandler.cs,StringToColor,The following statement contains a magic number: if (colorString.Length == 3) {  	// Convert from RGB-form  	color = Color.FromArgb (255' (c & 0xf00) >> 8' (c & 0x0f0) >> 4' (c & 0x00f));  }  else {  	// Convert from RRGGBB-form  	color = Color.FromArgb (255' (c & 0xff0000) >> 16' (c & 0x00ff00) >> 8' (c & 0x0000ff));  }  
Magic Number,breinstormin.tools.image,ColorHandler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ColorHandler.cs,StringToColor,The following statement contains a magic number: if (colorString.Length == 3) {  	// Convert from RGB-form  	color = Color.FromArgb (255' (c & 0xf00) >> 8' (c & 0x0f0) >> 4' (c & 0x00f));  }  else {  	// Convert from RRGGBB-form  	color = Color.FromArgb (255' (c & 0xff0000) >> 16' (c & 0x00ff00) >> 8' (c & 0x0000ff));  }  
Magic Number,breinstormin.tools.image,ColorHandler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ColorHandler.cs,StringToColor,The following statement contains a magic number: if (colorString.Length == 3) {  	// Convert from RGB-form  	color = Color.FromArgb (255' (c & 0xf00) >> 8' (c & 0x0f0) >> 4' (c & 0x00f));  }  else {  	// Convert from RRGGBB-form  	color = Color.FromArgb (255' (c & 0xff0000) >> 16' (c & 0x00ff00) >> 8' (c & 0x0000ff));  }  
Magic Number,breinstormin.tools.image,ColorHandler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ColorHandler.cs,StringToColor,The following statement contains a magic number: if (colorString.Length == 3) {  	// Convert from RGB-form  	color = Color.FromArgb (255' (c & 0xf00) >> 8' (c & 0x0f0) >> 4' (c & 0x00f));  }  else {  	// Convert from RRGGBB-form  	color = Color.FromArgb (255' (c & 0xff0000) >> 16' (c & 0x00ff00) >> 8' (c & 0x0000ff));  }  
Magic Number,breinstormin.tools.image,ColorHandler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ColorHandler.cs,StringToColor,The following statement contains a magic number: color = Color.FromArgb (255' (c & 0xf00) >> 8' (c & 0x0f0) >> 4' (c & 0x00f));  
Magic Number,breinstormin.tools.image,ColorHandler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ColorHandler.cs,StringToColor,The following statement contains a magic number: color = Color.FromArgb (255' (c & 0xf00) >> 8' (c & 0x0f0) >> 4' (c & 0x00f));  
Magic Number,breinstormin.tools.image,ColorHandler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ColorHandler.cs,StringToColor,The following statement contains a magic number: color = Color.FromArgb (255' (c & 0xf00) >> 8' (c & 0x0f0) >> 4' (c & 0x00f));  
Magic Number,breinstormin.tools.image,ColorHandler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ColorHandler.cs,StringToColor,The following statement contains a magic number: color = Color.FromArgb (255' (c & 0xff0000) >> 16' (c & 0x00ff00) >> 8' (c & 0x0000ff));  
Magic Number,breinstormin.tools.image,ColorHandler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ColorHandler.cs,StringToColor,The following statement contains a magic number: color = Color.FromArgb (255' (c & 0xff0000) >> 16' (c & 0x00ff00) >> 8' (c & 0x0000ff));  
Magic Number,breinstormin.tools.image,ColorHandler,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ColorHandler.cs,StringToColor,The following statement contains a magic number: color = Color.FromArgb (255' (c & 0xff0000) >> 16' (c & 0x00ff00) >> 8' (c & 0x0000ff));  
Magic Number,breinstormin.tools.image,ConvolutionMatrix,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ConvolutionMatrix,The following statement contains a magic number: MatrixSize = 3;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyInvert,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = (byte)(255 - pixelColor.R);  		G = (byte)(255 - pixelColor.G);  		B = (byte)(255 - pixelColor.B);  		bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyInvert,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = (byte)(255 - pixelColor.R);  		G = (byte)(255 - pixelColor.G);  		B = (byte)(255 - pixelColor.B);  		bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyInvert,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = (byte)(255 - pixelColor.R);  		G = (byte)(255 - pixelColor.G);  		B = (byte)(255 - pixelColor.B);  		bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyInvert,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = (byte)(255 - pixelColor.R);  	G = (byte)(255 - pixelColor.G);  	B = (byte)(255 - pixelColor.B);  	bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyInvert,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = (byte)(255 - pixelColor.R);  	G = (byte)(255 - pixelColor.G);  	B = (byte)(255 - pixelColor.B);  	bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyInvert,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = (byte)(255 - pixelColor.R);  	G = (byte)(255 - pixelColor.G);  	B = (byte)(255 - pixelColor.B);  	bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyInvert,The following statement contains a magic number: R = (byte)(255 - pixelColor.R);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyInvert,The following statement contains a magic number: G = (byte)(255 - pixelColor.G);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyInvert,The following statement contains a magic number: B = (byte)(255 - pixelColor.B);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGreyscale,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = (byte)((0.299 * pixelColor.R) + (0.587 * pixelColor.G) + (0.114 * pixelColor.B));  		G = B = R;  		bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGreyscale,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = (byte)((0.299 * pixelColor.R) + (0.587 * pixelColor.G) + (0.114 * pixelColor.B));  		G = B = R;  		bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGreyscale,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = (byte)((0.299 * pixelColor.R) + (0.587 * pixelColor.G) + (0.114 * pixelColor.B));  		G = B = R;  		bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGreyscale,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = (byte)((0.299 * pixelColor.R) + (0.587 * pixelColor.G) + (0.114 * pixelColor.B));  	G = B = R;  	bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGreyscale,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = (byte)((0.299 * pixelColor.R) + (0.587 * pixelColor.G) + (0.114 * pixelColor.B));  	G = B = R;  	bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGreyscale,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = (byte)((0.299 * pixelColor.R) + (0.587 * pixelColor.G) + (0.114 * pixelColor.B));  	G = B = R;  	bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGreyscale,The following statement contains a magic number: R = (byte)((0.299 * pixelColor.R) + (0.587 * pixelColor.G) + (0.114 * pixelColor.B));  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGreyscale,The following statement contains a magic number: R = (byte)((0.299 * pixelColor.R) + (0.587 * pixelColor.G) + (0.114 * pixelColor.B));  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGreyscale,The following statement contains a magic number: R = (byte)((0.299 * pixelColor.R) + (0.587 * pixelColor.G) + (0.114 * pixelColor.B));  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGamma,The following statement contains a magic number: for (int i = 0; i < 256; ++i) {  	redGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / r)) + 0.5));  	greenGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / g)) + 0.5));  	blueGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / b)) + 0.5));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGamma,The following statement contains a magic number: for (int i = 0; i < 256; ++i) {  	redGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / r)) + 0.5));  	greenGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / g)) + 0.5));  	blueGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / b)) + 0.5));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGamma,The following statement contains a magic number: for (int i = 0; i < 256; ++i) {  	redGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / r)) + 0.5));  	greenGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / g)) + 0.5));  	blueGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / b)) + 0.5));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGamma,The following statement contains a magic number: for (int i = 0; i < 256; ++i) {  	redGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / r)) + 0.5));  	greenGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / g)) + 0.5));  	blueGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / b)) + 0.5));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGamma,The following statement contains a magic number: for (int i = 0; i < 256; ++i) {  	redGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / r)) + 0.5));  	greenGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / g)) + 0.5));  	blueGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / b)) + 0.5));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGamma,The following statement contains a magic number: for (int i = 0; i < 256; ++i) {  	redGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / r)) + 0.5));  	greenGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / g)) + 0.5));  	blueGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / b)) + 0.5));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGamma,The following statement contains a magic number: for (int i = 0; i < 256; ++i) {  	redGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / r)) + 0.5));  	greenGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / g)) + 0.5));  	blueGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / b)) + 0.5));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGamma,The following statement contains a magic number: for (int i = 0; i < 256; ++i) {  	redGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / r)) + 0.5));  	greenGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / g)) + 0.5));  	blueGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / b)) + 0.5));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGamma,The following statement contains a magic number: for (int i = 0; i < 256; ++i) {  	redGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / r)) + 0.5));  	greenGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / g)) + 0.5));  	blueGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / b)) + 0.5));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGamma,The following statement contains a magic number: for (int i = 0; i < 256; ++i) {  	redGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / r)) + 0.5));  	greenGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / g)) + 0.5));  	blueGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / b)) + 0.5));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGamma,The following statement contains a magic number: for (int i = 0; i < 256; ++i) {  	redGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / r)) + 0.5));  	greenGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / g)) + 0.5));  	blueGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / b)) + 0.5));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGamma,The following statement contains a magic number: for (int i = 0; i < 256; ++i) {  	redGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / r)) + 0.5));  	greenGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / g)) + 0.5));  	blueGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / b)) + 0.5));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGamma,The following statement contains a magic number: for (int i = 0; i < 256; ++i) {  	redGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / r)) + 0.5));  	greenGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / g)) + 0.5));  	blueGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / b)) + 0.5));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGamma,The following statement contains a magic number: redGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / r)) + 0.5));  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGamma,The following statement contains a magic number: redGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / r)) + 0.5));  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGamma,The following statement contains a magic number: redGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / r)) + 0.5));  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGamma,The following statement contains a magic number: redGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / r)) + 0.5));  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGamma,The following statement contains a magic number: greenGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / g)) + 0.5));  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGamma,The following statement contains a magic number: greenGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / g)) + 0.5));  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGamma,The following statement contains a magic number: greenGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / g)) + 0.5));  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGamma,The following statement contains a magic number: greenGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / g)) + 0.5));  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGamma,The following statement contains a magic number: blueGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / b)) + 0.5));  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGamma,The following statement contains a magic number: blueGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / b)) + 0.5));  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGamma,The following statement contains a magic number: blueGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / b)) + 0.5));  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGamma,The following statement contains a magic number: blueGamma [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / b)) + 0.5));  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySepia,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = (int)((0.299 * pixelColor.R) + (0.587 * pixelColor.G) + (0.114 * pixelColor.B));  		G = B = R;  		R += (depth * 2);  		if (R > 255) {  			R = 255;  		}  		G += depth;  		if (G > 255) {  			G = 255;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySepia,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = (int)((0.299 * pixelColor.R) + (0.587 * pixelColor.G) + (0.114 * pixelColor.B));  		G = B = R;  		R += (depth * 2);  		if (R > 255) {  			R = 255;  		}  		G += depth;  		if (G > 255) {  			G = 255;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySepia,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = (int)((0.299 * pixelColor.R) + (0.587 * pixelColor.G) + (0.114 * pixelColor.B));  		G = B = R;  		R += (depth * 2);  		if (R > 255) {  			R = 255;  		}  		G += depth;  		if (G > 255) {  			G = 255;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySepia,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = (int)((0.299 * pixelColor.R) + (0.587 * pixelColor.G) + (0.114 * pixelColor.B));  		G = B = R;  		R += (depth * 2);  		if (R > 255) {  			R = 255;  		}  		G += depth;  		if (G > 255) {  			G = 255;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySepia,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = (int)((0.299 * pixelColor.R) + (0.587 * pixelColor.G) + (0.114 * pixelColor.B));  		G = B = R;  		R += (depth * 2);  		if (R > 255) {  			R = 255;  		}  		G += depth;  		if (G > 255) {  			G = 255;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySepia,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = (int)((0.299 * pixelColor.R) + (0.587 * pixelColor.G) + (0.114 * pixelColor.B));  		G = B = R;  		R += (depth * 2);  		if (R > 255) {  			R = 255;  		}  		G += depth;  		if (G > 255) {  			G = 255;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySepia,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = (int)((0.299 * pixelColor.R) + (0.587 * pixelColor.G) + (0.114 * pixelColor.B));  		G = B = R;  		R += (depth * 2);  		if (R > 255) {  			R = 255;  		}  		G += depth;  		if (G > 255) {  			G = 255;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySepia,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = (int)((0.299 * pixelColor.R) + (0.587 * pixelColor.G) + (0.114 * pixelColor.B));  		G = B = R;  		R += (depth * 2);  		if (R > 255) {  			R = 255;  		}  		G += depth;  		if (G > 255) {  			G = 255;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySepia,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = (int)((0.299 * pixelColor.R) + (0.587 * pixelColor.G) + (0.114 * pixelColor.B));  	G = B = R;  	R += (depth * 2);  	if (R > 255) {  		R = 255;  	}  	G += depth;  	if (G > 255) {  		G = 255;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySepia,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = (int)((0.299 * pixelColor.R) + (0.587 * pixelColor.G) + (0.114 * pixelColor.B));  	G = B = R;  	R += (depth * 2);  	if (R > 255) {  		R = 255;  	}  	G += depth;  	if (G > 255) {  		G = 255;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySepia,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = (int)((0.299 * pixelColor.R) + (0.587 * pixelColor.G) + (0.114 * pixelColor.B));  	G = B = R;  	R += (depth * 2);  	if (R > 255) {  		R = 255;  	}  	G += depth;  	if (G > 255) {  		G = 255;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySepia,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = (int)((0.299 * pixelColor.R) + (0.587 * pixelColor.G) + (0.114 * pixelColor.B));  	G = B = R;  	R += (depth * 2);  	if (R > 255) {  		R = 255;  	}  	G += depth;  	if (G > 255) {  		G = 255;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySepia,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = (int)((0.299 * pixelColor.R) + (0.587 * pixelColor.G) + (0.114 * pixelColor.B));  	G = B = R;  	R += (depth * 2);  	if (R > 255) {  		R = 255;  	}  	G += depth;  	if (G > 255) {  		G = 255;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySepia,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = (int)((0.299 * pixelColor.R) + (0.587 * pixelColor.G) + (0.114 * pixelColor.B));  	G = B = R;  	R += (depth * 2);  	if (R > 255) {  		R = 255;  	}  	G += depth;  	if (G > 255) {  		G = 255;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySepia,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = (int)((0.299 * pixelColor.R) + (0.587 * pixelColor.G) + (0.114 * pixelColor.B));  	G = B = R;  	R += (depth * 2);  	if (R > 255) {  		R = 255;  	}  	G += depth;  	if (G > 255) {  		G = 255;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySepia,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = (int)((0.299 * pixelColor.R) + (0.587 * pixelColor.G) + (0.114 * pixelColor.B));  	G = B = R;  	R += (depth * 2);  	if (R > 255) {  		R = 255;  	}  	G += depth;  	if (G > 255) {  		G = 255;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySepia,The following statement contains a magic number: R = (int)((0.299 * pixelColor.R) + (0.587 * pixelColor.G) + (0.114 * pixelColor.B));  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySepia,The following statement contains a magic number: R = (int)((0.299 * pixelColor.R) + (0.587 * pixelColor.G) + (0.114 * pixelColor.B));  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySepia,The following statement contains a magic number: R = (int)((0.299 * pixelColor.R) + (0.587 * pixelColor.G) + (0.114 * pixelColor.B));  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySepia,The following statement contains a magic number: R += (depth * 2);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySepia,The following statement contains a magic number: if (R > 255) {  	R = 255;  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySepia,The following statement contains a magic number: if (R > 255) {  	R = 255;  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySepia,The following statement contains a magic number: R = 255;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySepia,The following statement contains a magic number: if (G > 255) {  	G = 255;  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySepia,The following statement contains a magic number: if (G > 255) {  	G = 255;  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySepia,The following statement contains a magic number: G = 255;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyDecreaseColourDepth,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = ((pixelColor.R + (offset / 2)) - ((pixelColor.R + (offset / 2)) % offset) - 1);  		if (R < 0) {  			R = 0;  		}  		G = ((pixelColor.G + (offset / 2)) - ((pixelColor.G + (offset / 2)) % offset) - 1);  		if (G < 0) {  			G = 0;  		}  		B = ((pixelColor.B + (offset / 2)) - ((pixelColor.B + (offset / 2)) % offset) - 1);  		if (B < 0) {  			B = 0;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyDecreaseColourDepth,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = ((pixelColor.R + (offset / 2)) - ((pixelColor.R + (offset / 2)) % offset) - 1);  		if (R < 0) {  			R = 0;  		}  		G = ((pixelColor.G + (offset / 2)) - ((pixelColor.G + (offset / 2)) % offset) - 1);  		if (G < 0) {  			G = 0;  		}  		B = ((pixelColor.B + (offset / 2)) - ((pixelColor.B + (offset / 2)) % offset) - 1);  		if (B < 0) {  			B = 0;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyDecreaseColourDepth,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = ((pixelColor.R + (offset / 2)) - ((pixelColor.R + (offset / 2)) % offset) - 1);  		if (R < 0) {  			R = 0;  		}  		G = ((pixelColor.G + (offset / 2)) - ((pixelColor.G + (offset / 2)) % offset) - 1);  		if (G < 0) {  			G = 0;  		}  		B = ((pixelColor.B + (offset / 2)) - ((pixelColor.B + (offset / 2)) % offset) - 1);  		if (B < 0) {  			B = 0;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyDecreaseColourDepth,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = ((pixelColor.R + (offset / 2)) - ((pixelColor.R + (offset / 2)) % offset) - 1);  		if (R < 0) {  			R = 0;  		}  		G = ((pixelColor.G + (offset / 2)) - ((pixelColor.G + (offset / 2)) % offset) - 1);  		if (G < 0) {  			G = 0;  		}  		B = ((pixelColor.B + (offset / 2)) - ((pixelColor.B + (offset / 2)) % offset) - 1);  		if (B < 0) {  			B = 0;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyDecreaseColourDepth,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = ((pixelColor.R + (offset / 2)) - ((pixelColor.R + (offset / 2)) % offset) - 1);  		if (R < 0) {  			R = 0;  		}  		G = ((pixelColor.G + (offset / 2)) - ((pixelColor.G + (offset / 2)) % offset) - 1);  		if (G < 0) {  			G = 0;  		}  		B = ((pixelColor.B + (offset / 2)) - ((pixelColor.B + (offset / 2)) % offset) - 1);  		if (B < 0) {  			B = 0;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyDecreaseColourDepth,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = ((pixelColor.R + (offset / 2)) - ((pixelColor.R + (offset / 2)) % offset) - 1);  		if (R < 0) {  			R = 0;  		}  		G = ((pixelColor.G + (offset / 2)) - ((pixelColor.G + (offset / 2)) % offset) - 1);  		if (G < 0) {  			G = 0;  		}  		B = ((pixelColor.B + (offset / 2)) - ((pixelColor.B + (offset / 2)) % offset) - 1);  		if (B < 0) {  			B = 0;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyDecreaseColourDepth,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = ((pixelColor.R + (offset / 2)) - ((pixelColor.R + (offset / 2)) % offset) - 1);  	if (R < 0) {  		R = 0;  	}  	G = ((pixelColor.G + (offset / 2)) - ((pixelColor.G + (offset / 2)) % offset) - 1);  	if (G < 0) {  		G = 0;  	}  	B = ((pixelColor.B + (offset / 2)) - ((pixelColor.B + (offset / 2)) % offset) - 1);  	if (B < 0) {  		B = 0;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyDecreaseColourDepth,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = ((pixelColor.R + (offset / 2)) - ((pixelColor.R + (offset / 2)) % offset) - 1);  	if (R < 0) {  		R = 0;  	}  	G = ((pixelColor.G + (offset / 2)) - ((pixelColor.G + (offset / 2)) % offset) - 1);  	if (G < 0) {  		G = 0;  	}  	B = ((pixelColor.B + (offset / 2)) - ((pixelColor.B + (offset / 2)) % offset) - 1);  	if (B < 0) {  		B = 0;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyDecreaseColourDepth,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = ((pixelColor.R + (offset / 2)) - ((pixelColor.R + (offset / 2)) % offset) - 1);  	if (R < 0) {  		R = 0;  	}  	G = ((pixelColor.G + (offset / 2)) - ((pixelColor.G + (offset / 2)) % offset) - 1);  	if (G < 0) {  		G = 0;  	}  	B = ((pixelColor.B + (offset / 2)) - ((pixelColor.B + (offset / 2)) % offset) - 1);  	if (B < 0) {  		B = 0;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyDecreaseColourDepth,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = ((pixelColor.R + (offset / 2)) - ((pixelColor.R + (offset / 2)) % offset) - 1);  	if (R < 0) {  		R = 0;  	}  	G = ((pixelColor.G + (offset / 2)) - ((pixelColor.G + (offset / 2)) % offset) - 1);  	if (G < 0) {  		G = 0;  	}  	B = ((pixelColor.B + (offset / 2)) - ((pixelColor.B + (offset / 2)) % offset) - 1);  	if (B < 0) {  		B = 0;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyDecreaseColourDepth,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = ((pixelColor.R + (offset / 2)) - ((pixelColor.R + (offset / 2)) % offset) - 1);  	if (R < 0) {  		R = 0;  	}  	G = ((pixelColor.G + (offset / 2)) - ((pixelColor.G + (offset / 2)) % offset) - 1);  	if (G < 0) {  		G = 0;  	}  	B = ((pixelColor.B + (offset / 2)) - ((pixelColor.B + (offset / 2)) % offset) - 1);  	if (B < 0) {  		B = 0;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyDecreaseColourDepth,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = ((pixelColor.R + (offset / 2)) - ((pixelColor.R + (offset / 2)) % offset) - 1);  	if (R < 0) {  		R = 0;  	}  	G = ((pixelColor.G + (offset / 2)) - ((pixelColor.G + (offset / 2)) % offset) - 1);  	if (G < 0) {  		G = 0;  	}  	B = ((pixelColor.B + (offset / 2)) - ((pixelColor.B + (offset / 2)) % offset) - 1);  	if (B < 0) {  		B = 0;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyDecreaseColourDepth,The following statement contains a magic number: R = ((pixelColor.R + (offset / 2)) - ((pixelColor.R + (offset / 2)) % offset) - 1);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyDecreaseColourDepth,The following statement contains a magic number: R = ((pixelColor.R + (offset / 2)) - ((pixelColor.R + (offset / 2)) % offset) - 1);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyDecreaseColourDepth,The following statement contains a magic number: G = ((pixelColor.G + (offset / 2)) - ((pixelColor.G + (offset / 2)) % offset) - 1);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyDecreaseColourDepth,The following statement contains a magic number: G = ((pixelColor.G + (offset / 2)) - ((pixelColor.G + (offset / 2)) % offset) - 1);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyDecreaseColourDepth,The following statement contains a magic number: B = ((pixelColor.B + (offset / 2)) - ((pixelColor.B + (offset / 2)) % offset) - 1);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyDecreaseColourDepth,The following statement contains a magic number: B = ((pixelColor.B + (offset / 2)) - ((pixelColor.B + (offset / 2)) % offset) - 1);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: contrast = (100.0 + contrast) / 100.0;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: contrast = (100.0 + contrast) / 100.0;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = pixelColor.R / 255.0;  		R -= 0.5;  		R *= contrast;  		R += 0.5;  		R *= 255;  		if (R > 255) {  			R = 255;  		}  		else if (R < 0) {  			R = 0;  		}  		G = pixelColor.G / 255.0;  		G -= 0.5;  		G *= contrast;  		G += 0.5;  		G *= 255;  		if (G > 255) {  			G = 255;  		}  		else if (G < 0) {  			G = 0;  		}  		B = pixelColor.B / 255.0;  		B -= 0.5;  		B *= contrast;  		B += 0.5;  		B *= 255;  		if (B > 255) {  			B = 255;  		}  		else if (B < 0) {  			B = 0;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = pixelColor.R / 255.0;  		R -= 0.5;  		R *= contrast;  		R += 0.5;  		R *= 255;  		if (R > 255) {  			R = 255;  		}  		else if (R < 0) {  			R = 0;  		}  		G = pixelColor.G / 255.0;  		G -= 0.5;  		G *= contrast;  		G += 0.5;  		G *= 255;  		if (G > 255) {  			G = 255;  		}  		else if (G < 0) {  			G = 0;  		}  		B = pixelColor.B / 255.0;  		B -= 0.5;  		B *= contrast;  		B += 0.5;  		B *= 255;  		if (B > 255) {  			B = 255;  		}  		else if (B < 0) {  			B = 0;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = pixelColor.R / 255.0;  		R -= 0.5;  		R *= contrast;  		R += 0.5;  		R *= 255;  		if (R > 255) {  			R = 255;  		}  		else if (R < 0) {  			R = 0;  		}  		G = pixelColor.G / 255.0;  		G -= 0.5;  		G *= contrast;  		G += 0.5;  		G *= 255;  		if (G > 255) {  			G = 255;  		}  		else if (G < 0) {  			G = 0;  		}  		B = pixelColor.B / 255.0;  		B -= 0.5;  		B *= contrast;  		B += 0.5;  		B *= 255;  		if (B > 255) {  			B = 255;  		}  		else if (B < 0) {  			B = 0;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = pixelColor.R / 255.0;  		R -= 0.5;  		R *= contrast;  		R += 0.5;  		R *= 255;  		if (R > 255) {  			R = 255;  		}  		else if (R < 0) {  			R = 0;  		}  		G = pixelColor.G / 255.0;  		G -= 0.5;  		G *= contrast;  		G += 0.5;  		G *= 255;  		if (G > 255) {  			G = 255;  		}  		else if (G < 0) {  			G = 0;  		}  		B = pixelColor.B / 255.0;  		B -= 0.5;  		B *= contrast;  		B += 0.5;  		B *= 255;  		if (B > 255) {  			B = 255;  		}  		else if (B < 0) {  			B = 0;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = pixelColor.R / 255.0;  		R -= 0.5;  		R *= contrast;  		R += 0.5;  		R *= 255;  		if (R > 255) {  			R = 255;  		}  		else if (R < 0) {  			R = 0;  		}  		G = pixelColor.G / 255.0;  		G -= 0.5;  		G *= contrast;  		G += 0.5;  		G *= 255;  		if (G > 255) {  			G = 255;  		}  		else if (G < 0) {  			G = 0;  		}  		B = pixelColor.B / 255.0;  		B -= 0.5;  		B *= contrast;  		B += 0.5;  		B *= 255;  		if (B > 255) {  			B = 255;  		}  		else if (B < 0) {  			B = 0;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = pixelColor.R / 255.0;  		R -= 0.5;  		R *= contrast;  		R += 0.5;  		R *= 255;  		if (R > 255) {  			R = 255;  		}  		else if (R < 0) {  			R = 0;  		}  		G = pixelColor.G / 255.0;  		G -= 0.5;  		G *= contrast;  		G += 0.5;  		G *= 255;  		if (G > 255) {  			G = 255;  		}  		else if (G < 0) {  			G = 0;  		}  		B = pixelColor.B / 255.0;  		B -= 0.5;  		B *= contrast;  		B += 0.5;  		B *= 255;  		if (B > 255) {  			B = 255;  		}  		else if (B < 0) {  			B = 0;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = pixelColor.R / 255.0;  		R -= 0.5;  		R *= contrast;  		R += 0.5;  		R *= 255;  		if (R > 255) {  			R = 255;  		}  		else if (R < 0) {  			R = 0;  		}  		G = pixelColor.G / 255.0;  		G -= 0.5;  		G *= contrast;  		G += 0.5;  		G *= 255;  		if (G > 255) {  			G = 255;  		}  		else if (G < 0) {  			G = 0;  		}  		B = pixelColor.B / 255.0;  		B -= 0.5;  		B *= contrast;  		B += 0.5;  		B *= 255;  		if (B > 255) {  			B = 255;  		}  		else if (B < 0) {  			B = 0;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = pixelColor.R / 255.0;  		R -= 0.5;  		R *= contrast;  		R += 0.5;  		R *= 255;  		if (R > 255) {  			R = 255;  		}  		else if (R < 0) {  			R = 0;  		}  		G = pixelColor.G / 255.0;  		G -= 0.5;  		G *= contrast;  		G += 0.5;  		G *= 255;  		if (G > 255) {  			G = 255;  		}  		else if (G < 0) {  			G = 0;  		}  		B = pixelColor.B / 255.0;  		B -= 0.5;  		B *= contrast;  		B += 0.5;  		B *= 255;  		if (B > 255) {  			B = 255;  		}  		else if (B < 0) {  			B = 0;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = pixelColor.R / 255.0;  		R -= 0.5;  		R *= contrast;  		R += 0.5;  		R *= 255;  		if (R > 255) {  			R = 255;  		}  		else if (R < 0) {  			R = 0;  		}  		G = pixelColor.G / 255.0;  		G -= 0.5;  		G *= contrast;  		G += 0.5;  		G *= 255;  		if (G > 255) {  			G = 255;  		}  		else if (G < 0) {  			G = 0;  		}  		B = pixelColor.B / 255.0;  		B -= 0.5;  		B *= contrast;  		B += 0.5;  		B *= 255;  		if (B > 255) {  			B = 255;  		}  		else if (B < 0) {  			B = 0;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = pixelColor.R / 255.0;  		R -= 0.5;  		R *= contrast;  		R += 0.5;  		R *= 255;  		if (R > 255) {  			R = 255;  		}  		else if (R < 0) {  			R = 0;  		}  		G = pixelColor.G / 255.0;  		G -= 0.5;  		G *= contrast;  		G += 0.5;  		G *= 255;  		if (G > 255) {  			G = 255;  		}  		else if (G < 0) {  			G = 0;  		}  		B = pixelColor.B / 255.0;  		B -= 0.5;  		B *= contrast;  		B += 0.5;  		B *= 255;  		if (B > 255) {  			B = 255;  		}  		else if (B < 0) {  			B = 0;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = pixelColor.R / 255.0;  		R -= 0.5;  		R *= contrast;  		R += 0.5;  		R *= 255;  		if (R > 255) {  			R = 255;  		}  		else if (R < 0) {  			R = 0;  		}  		G = pixelColor.G / 255.0;  		G -= 0.5;  		G *= contrast;  		G += 0.5;  		G *= 255;  		if (G > 255) {  			G = 255;  		}  		else if (G < 0) {  			G = 0;  		}  		B = pixelColor.B / 255.0;  		B -= 0.5;  		B *= contrast;  		B += 0.5;  		B *= 255;  		if (B > 255) {  			B = 255;  		}  		else if (B < 0) {  			B = 0;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = pixelColor.R / 255.0;  		R -= 0.5;  		R *= contrast;  		R += 0.5;  		R *= 255;  		if (R > 255) {  			R = 255;  		}  		else if (R < 0) {  			R = 0;  		}  		G = pixelColor.G / 255.0;  		G -= 0.5;  		G *= contrast;  		G += 0.5;  		G *= 255;  		if (G > 255) {  			G = 255;  		}  		else if (G < 0) {  			G = 0;  		}  		B = pixelColor.B / 255.0;  		B -= 0.5;  		B *= contrast;  		B += 0.5;  		B *= 255;  		if (B > 255) {  			B = 255;  		}  		else if (B < 0) {  			B = 0;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = pixelColor.R / 255.0;  		R -= 0.5;  		R *= contrast;  		R += 0.5;  		R *= 255;  		if (R > 255) {  			R = 255;  		}  		else if (R < 0) {  			R = 0;  		}  		G = pixelColor.G / 255.0;  		G -= 0.5;  		G *= contrast;  		G += 0.5;  		G *= 255;  		if (G > 255) {  			G = 255;  		}  		else if (G < 0) {  			G = 0;  		}  		B = pixelColor.B / 255.0;  		B -= 0.5;  		B *= contrast;  		B += 0.5;  		B *= 255;  		if (B > 255) {  			B = 255;  		}  		else if (B < 0) {  			B = 0;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = pixelColor.R / 255.0;  		R -= 0.5;  		R *= contrast;  		R += 0.5;  		R *= 255;  		if (R > 255) {  			R = 255;  		}  		else if (R < 0) {  			R = 0;  		}  		G = pixelColor.G / 255.0;  		G -= 0.5;  		G *= contrast;  		G += 0.5;  		G *= 255;  		if (G > 255) {  			G = 255;  		}  		else if (G < 0) {  			G = 0;  		}  		B = pixelColor.B / 255.0;  		B -= 0.5;  		B *= contrast;  		B += 0.5;  		B *= 255;  		if (B > 255) {  			B = 255;  		}  		else if (B < 0) {  			B = 0;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = pixelColor.R / 255.0;  		R -= 0.5;  		R *= contrast;  		R += 0.5;  		R *= 255;  		if (R > 255) {  			R = 255;  		}  		else if (R < 0) {  			R = 0;  		}  		G = pixelColor.G / 255.0;  		G -= 0.5;  		G *= contrast;  		G += 0.5;  		G *= 255;  		if (G > 255) {  			G = 255;  		}  		else if (G < 0) {  			G = 0;  		}  		B = pixelColor.B / 255.0;  		B -= 0.5;  		B *= contrast;  		B += 0.5;  		B *= 255;  		if (B > 255) {  			B = 255;  		}  		else if (B < 0) {  			B = 0;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = pixelColor.R / 255.0;  		R -= 0.5;  		R *= contrast;  		R += 0.5;  		R *= 255;  		if (R > 255) {  			R = 255;  		}  		else if (R < 0) {  			R = 0;  		}  		G = pixelColor.G / 255.0;  		G -= 0.5;  		G *= contrast;  		G += 0.5;  		G *= 255;  		if (G > 255) {  			G = 255;  		}  		else if (G < 0) {  			G = 0;  		}  		B = pixelColor.B / 255.0;  		B -= 0.5;  		B *= contrast;  		B += 0.5;  		B *= 255;  		if (B > 255) {  			B = 255;  		}  		else if (B < 0) {  			B = 0;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = pixelColor.R / 255.0;  		R -= 0.5;  		R *= contrast;  		R += 0.5;  		R *= 255;  		if (R > 255) {  			R = 255;  		}  		else if (R < 0) {  			R = 0;  		}  		G = pixelColor.G / 255.0;  		G -= 0.5;  		G *= contrast;  		G += 0.5;  		G *= 255;  		if (G > 255) {  			G = 255;  		}  		else if (G < 0) {  			G = 0;  		}  		B = pixelColor.B / 255.0;  		B -= 0.5;  		B *= contrast;  		B += 0.5;  		B *= 255;  		if (B > 255) {  			B = 255;  		}  		else if (B < 0) {  			B = 0;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = pixelColor.R / 255.0;  		R -= 0.5;  		R *= contrast;  		R += 0.5;  		R *= 255;  		if (R > 255) {  			R = 255;  		}  		else if (R < 0) {  			R = 0;  		}  		G = pixelColor.G / 255.0;  		G -= 0.5;  		G *= contrast;  		G += 0.5;  		G *= 255;  		if (G > 255) {  			G = 255;  		}  		else if (G < 0) {  			G = 0;  		}  		B = pixelColor.B / 255.0;  		B -= 0.5;  		B *= contrast;  		B += 0.5;  		B *= 255;  		if (B > 255) {  			B = 255;  		}  		else if (B < 0) {  			B = 0;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = pixelColor.R / 255.0;  	R -= 0.5;  	R *= contrast;  	R += 0.5;  	R *= 255;  	if (R > 255) {  		R = 255;  	}  	else if (R < 0) {  		R = 0;  	}  	G = pixelColor.G / 255.0;  	G -= 0.5;  	G *= contrast;  	G += 0.5;  	G *= 255;  	if (G > 255) {  		G = 255;  	}  	else if (G < 0) {  		G = 0;  	}  	B = pixelColor.B / 255.0;  	B -= 0.5;  	B *= contrast;  	B += 0.5;  	B *= 255;  	if (B > 255) {  		B = 255;  	}  	else if (B < 0) {  		B = 0;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = pixelColor.R / 255.0;  	R -= 0.5;  	R *= contrast;  	R += 0.5;  	R *= 255;  	if (R > 255) {  		R = 255;  	}  	else if (R < 0) {  		R = 0;  	}  	G = pixelColor.G / 255.0;  	G -= 0.5;  	G *= contrast;  	G += 0.5;  	G *= 255;  	if (G > 255) {  		G = 255;  	}  	else if (G < 0) {  		G = 0;  	}  	B = pixelColor.B / 255.0;  	B -= 0.5;  	B *= contrast;  	B += 0.5;  	B *= 255;  	if (B > 255) {  		B = 255;  	}  	else if (B < 0) {  		B = 0;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = pixelColor.R / 255.0;  	R -= 0.5;  	R *= contrast;  	R += 0.5;  	R *= 255;  	if (R > 255) {  		R = 255;  	}  	else if (R < 0) {  		R = 0;  	}  	G = pixelColor.G / 255.0;  	G -= 0.5;  	G *= contrast;  	G += 0.5;  	G *= 255;  	if (G > 255) {  		G = 255;  	}  	else if (G < 0) {  		G = 0;  	}  	B = pixelColor.B / 255.0;  	B -= 0.5;  	B *= contrast;  	B += 0.5;  	B *= 255;  	if (B > 255) {  		B = 255;  	}  	else if (B < 0) {  		B = 0;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = pixelColor.R / 255.0;  	R -= 0.5;  	R *= contrast;  	R += 0.5;  	R *= 255;  	if (R > 255) {  		R = 255;  	}  	else if (R < 0) {  		R = 0;  	}  	G = pixelColor.G / 255.0;  	G -= 0.5;  	G *= contrast;  	G += 0.5;  	G *= 255;  	if (G > 255) {  		G = 255;  	}  	else if (G < 0) {  		G = 0;  	}  	B = pixelColor.B / 255.0;  	B -= 0.5;  	B *= contrast;  	B += 0.5;  	B *= 255;  	if (B > 255) {  		B = 255;  	}  	else if (B < 0) {  		B = 0;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = pixelColor.R / 255.0;  	R -= 0.5;  	R *= contrast;  	R += 0.5;  	R *= 255;  	if (R > 255) {  		R = 255;  	}  	else if (R < 0) {  		R = 0;  	}  	G = pixelColor.G / 255.0;  	G -= 0.5;  	G *= contrast;  	G += 0.5;  	G *= 255;  	if (G > 255) {  		G = 255;  	}  	else if (G < 0) {  		G = 0;  	}  	B = pixelColor.B / 255.0;  	B -= 0.5;  	B *= contrast;  	B += 0.5;  	B *= 255;  	if (B > 255) {  		B = 255;  	}  	else if (B < 0) {  		B = 0;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = pixelColor.R / 255.0;  	R -= 0.5;  	R *= contrast;  	R += 0.5;  	R *= 255;  	if (R > 255) {  		R = 255;  	}  	else if (R < 0) {  		R = 0;  	}  	G = pixelColor.G / 255.0;  	G -= 0.5;  	G *= contrast;  	G += 0.5;  	G *= 255;  	if (G > 255) {  		G = 255;  	}  	else if (G < 0) {  		G = 0;  	}  	B = pixelColor.B / 255.0;  	B -= 0.5;  	B *= contrast;  	B += 0.5;  	B *= 255;  	if (B > 255) {  		B = 255;  	}  	else if (B < 0) {  		B = 0;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = pixelColor.R / 255.0;  	R -= 0.5;  	R *= contrast;  	R += 0.5;  	R *= 255;  	if (R > 255) {  		R = 255;  	}  	else if (R < 0) {  		R = 0;  	}  	G = pixelColor.G / 255.0;  	G -= 0.5;  	G *= contrast;  	G += 0.5;  	G *= 255;  	if (G > 255) {  		G = 255;  	}  	else if (G < 0) {  		G = 0;  	}  	B = pixelColor.B / 255.0;  	B -= 0.5;  	B *= contrast;  	B += 0.5;  	B *= 255;  	if (B > 255) {  		B = 255;  	}  	else if (B < 0) {  		B = 0;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = pixelColor.R / 255.0;  	R -= 0.5;  	R *= contrast;  	R += 0.5;  	R *= 255;  	if (R > 255) {  		R = 255;  	}  	else if (R < 0) {  		R = 0;  	}  	G = pixelColor.G / 255.0;  	G -= 0.5;  	G *= contrast;  	G += 0.5;  	G *= 255;  	if (G > 255) {  		G = 255;  	}  	else if (G < 0) {  		G = 0;  	}  	B = pixelColor.B / 255.0;  	B -= 0.5;  	B *= contrast;  	B += 0.5;  	B *= 255;  	if (B > 255) {  		B = 255;  	}  	else if (B < 0) {  		B = 0;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = pixelColor.R / 255.0;  	R -= 0.5;  	R *= contrast;  	R += 0.5;  	R *= 255;  	if (R > 255) {  		R = 255;  	}  	else if (R < 0) {  		R = 0;  	}  	G = pixelColor.G / 255.0;  	G -= 0.5;  	G *= contrast;  	G += 0.5;  	G *= 255;  	if (G > 255) {  		G = 255;  	}  	else if (G < 0) {  		G = 0;  	}  	B = pixelColor.B / 255.0;  	B -= 0.5;  	B *= contrast;  	B += 0.5;  	B *= 255;  	if (B > 255) {  		B = 255;  	}  	else if (B < 0) {  		B = 0;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = pixelColor.R / 255.0;  	R -= 0.5;  	R *= contrast;  	R += 0.5;  	R *= 255;  	if (R > 255) {  		R = 255;  	}  	else if (R < 0) {  		R = 0;  	}  	G = pixelColor.G / 255.0;  	G -= 0.5;  	G *= contrast;  	G += 0.5;  	G *= 255;  	if (G > 255) {  		G = 255;  	}  	else if (G < 0) {  		G = 0;  	}  	B = pixelColor.B / 255.0;  	B -= 0.5;  	B *= contrast;  	B += 0.5;  	B *= 255;  	if (B > 255) {  		B = 255;  	}  	else if (B < 0) {  		B = 0;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = pixelColor.R / 255.0;  	R -= 0.5;  	R *= contrast;  	R += 0.5;  	R *= 255;  	if (R > 255) {  		R = 255;  	}  	else if (R < 0) {  		R = 0;  	}  	G = pixelColor.G / 255.0;  	G -= 0.5;  	G *= contrast;  	G += 0.5;  	G *= 255;  	if (G > 255) {  		G = 255;  	}  	else if (G < 0) {  		G = 0;  	}  	B = pixelColor.B / 255.0;  	B -= 0.5;  	B *= contrast;  	B += 0.5;  	B *= 255;  	if (B > 255) {  		B = 255;  	}  	else if (B < 0) {  		B = 0;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = pixelColor.R / 255.0;  	R -= 0.5;  	R *= contrast;  	R += 0.5;  	R *= 255;  	if (R > 255) {  		R = 255;  	}  	else if (R < 0) {  		R = 0;  	}  	G = pixelColor.G / 255.0;  	G -= 0.5;  	G *= contrast;  	G += 0.5;  	G *= 255;  	if (G > 255) {  		G = 255;  	}  	else if (G < 0) {  		G = 0;  	}  	B = pixelColor.B / 255.0;  	B -= 0.5;  	B *= contrast;  	B += 0.5;  	B *= 255;  	if (B > 255) {  		B = 255;  	}  	else if (B < 0) {  		B = 0;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = pixelColor.R / 255.0;  	R -= 0.5;  	R *= contrast;  	R += 0.5;  	R *= 255;  	if (R > 255) {  		R = 255;  	}  	else if (R < 0) {  		R = 0;  	}  	G = pixelColor.G / 255.0;  	G -= 0.5;  	G *= contrast;  	G += 0.5;  	G *= 255;  	if (G > 255) {  		G = 255;  	}  	else if (G < 0) {  		G = 0;  	}  	B = pixelColor.B / 255.0;  	B -= 0.5;  	B *= contrast;  	B += 0.5;  	B *= 255;  	if (B > 255) {  		B = 255;  	}  	else if (B < 0) {  		B = 0;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = pixelColor.R / 255.0;  	R -= 0.5;  	R *= contrast;  	R += 0.5;  	R *= 255;  	if (R > 255) {  		R = 255;  	}  	else if (R < 0) {  		R = 0;  	}  	G = pixelColor.G / 255.0;  	G -= 0.5;  	G *= contrast;  	G += 0.5;  	G *= 255;  	if (G > 255) {  		G = 255;  	}  	else if (G < 0) {  		G = 0;  	}  	B = pixelColor.B / 255.0;  	B -= 0.5;  	B *= contrast;  	B += 0.5;  	B *= 255;  	if (B > 255) {  		B = 255;  	}  	else if (B < 0) {  		B = 0;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = pixelColor.R / 255.0;  	R -= 0.5;  	R *= contrast;  	R += 0.5;  	R *= 255;  	if (R > 255) {  		R = 255;  	}  	else if (R < 0) {  		R = 0;  	}  	G = pixelColor.G / 255.0;  	G -= 0.5;  	G *= contrast;  	G += 0.5;  	G *= 255;  	if (G > 255) {  		G = 255;  	}  	else if (G < 0) {  		G = 0;  	}  	B = pixelColor.B / 255.0;  	B -= 0.5;  	B *= contrast;  	B += 0.5;  	B *= 255;  	if (B > 255) {  		B = 255;  	}  	else if (B < 0) {  		B = 0;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = pixelColor.R / 255.0;  	R -= 0.5;  	R *= contrast;  	R += 0.5;  	R *= 255;  	if (R > 255) {  		R = 255;  	}  	else if (R < 0) {  		R = 0;  	}  	G = pixelColor.G / 255.0;  	G -= 0.5;  	G *= contrast;  	G += 0.5;  	G *= 255;  	if (G > 255) {  		G = 255;  	}  	else if (G < 0) {  		G = 0;  	}  	B = pixelColor.B / 255.0;  	B -= 0.5;  	B *= contrast;  	B += 0.5;  	B *= 255;  	if (B > 255) {  		B = 255;  	}  	else if (B < 0) {  		B = 0;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = pixelColor.R / 255.0;  	R -= 0.5;  	R *= contrast;  	R += 0.5;  	R *= 255;  	if (R > 255) {  		R = 255;  	}  	else if (R < 0) {  		R = 0;  	}  	G = pixelColor.G / 255.0;  	G -= 0.5;  	G *= contrast;  	G += 0.5;  	G *= 255;  	if (G > 255) {  		G = 255;  	}  	else if (G < 0) {  		G = 0;  	}  	B = pixelColor.B / 255.0;  	B -= 0.5;  	B *= contrast;  	B += 0.5;  	B *= 255;  	if (B > 255) {  		B = 255;  	}  	else if (B < 0) {  		B = 0;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = pixelColor.R / 255.0;  	R -= 0.5;  	R *= contrast;  	R += 0.5;  	R *= 255;  	if (R > 255) {  		R = 255;  	}  	else if (R < 0) {  		R = 0;  	}  	G = pixelColor.G / 255.0;  	G -= 0.5;  	G *= contrast;  	G += 0.5;  	G *= 255;  	if (G > 255) {  		G = 255;  	}  	else if (G < 0) {  		G = 0;  	}  	B = pixelColor.B / 255.0;  	B -= 0.5;  	B *= contrast;  	B += 0.5;  	B *= 255;  	if (B > 255) {  		B = 255;  	}  	else if (B < 0) {  		B = 0;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb ((int)A' (int)R' (int)G' (int)B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: R = pixelColor.R / 255.0;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: R -= 0.5;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: R += 0.5;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: R *= 255;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: if (R > 255) {  	R = 255;  }  else if (R < 0) {  	R = 0;  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: if (R > 255) {  	R = 255;  }  else if (R < 0) {  	R = 0;  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: R = 255;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: G = pixelColor.G / 255.0;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: G -= 0.5;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: G += 0.5;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: G *= 255;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: if (G > 255) {  	G = 255;  }  else if (G < 0) {  	G = 0;  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: if (G > 255) {  	G = 255;  }  else if (G < 0) {  	G = 0;  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: G = 255;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: B = pixelColor.B / 255.0;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: B -= 0.5;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: B += 0.5;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: B *= 255;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: if (B > 255) {  	B = 255;  }  else if (B < 0) {  	B = 0;  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: if (B > 255) {  	B = 255;  }  else if (B < 0) {  	B = 0;  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyContrast,The following statement contains a magic number: B = 255;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyBrightness,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = pixelColor.R + brightness;  		if (R > 255) {  			R = 255;  		}  		else if (R < 0) {  			R = 0;  		}  		G = pixelColor.G + brightness;  		if (G > 255) {  			G = 255;  		}  		else if (G < 0) {  			G = 0;  		}  		B = pixelColor.B + brightness;  		if (B > 255) {  			B = 255;  		}  		else if (B < 0) {  			B = 0;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyBrightness,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = pixelColor.R + brightness;  		if (R > 255) {  			R = 255;  		}  		else if (R < 0) {  			R = 0;  		}  		G = pixelColor.G + brightness;  		if (G > 255) {  			G = 255;  		}  		else if (G < 0) {  			G = 0;  		}  		B = pixelColor.B + brightness;  		if (B > 255) {  			B = 255;  		}  		else if (B < 0) {  			B = 0;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyBrightness,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = pixelColor.R + brightness;  		if (R > 255) {  			R = 255;  		}  		else if (R < 0) {  			R = 0;  		}  		G = pixelColor.G + brightness;  		if (G > 255) {  			G = 255;  		}  		else if (G < 0) {  			G = 0;  		}  		B = pixelColor.B + brightness;  		if (B > 255) {  			B = 255;  		}  		else if (B < 0) {  			B = 0;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyBrightness,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = pixelColor.R + brightness;  		if (R > 255) {  			R = 255;  		}  		else if (R < 0) {  			R = 0;  		}  		G = pixelColor.G + brightness;  		if (G > 255) {  			G = 255;  		}  		else if (G < 0) {  			G = 0;  		}  		B = pixelColor.B + brightness;  		if (B > 255) {  			B = 255;  		}  		else if (B < 0) {  			B = 0;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyBrightness,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = pixelColor.R + brightness;  		if (R > 255) {  			R = 255;  		}  		else if (R < 0) {  			R = 0;  		}  		G = pixelColor.G + brightness;  		if (G > 255) {  			G = 255;  		}  		else if (G < 0) {  			G = 0;  		}  		B = pixelColor.B + brightness;  		if (B > 255) {  			B = 255;  		}  		else if (B < 0) {  			B = 0;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyBrightness,The following statement contains a magic number: for (int y = 0; y < bitmapImage.Height; y++) {  	for (int x = 0; x < bitmapImage.Width; x++) {  		pixelColor = bitmapImage.GetPixel (x' y);  		A = pixelColor.A;  		R = pixelColor.R + brightness;  		if (R > 255) {  			R = 255;  		}  		else if (R < 0) {  			R = 0;  		}  		G = pixelColor.G + brightness;  		if (G > 255) {  			G = 255;  		}  		else if (G < 0) {  			G = 0;  		}  		B = pixelColor.B + brightness;  		if (B > 255) {  			B = 255;  		}  		else if (B < 0) {  			B = 0;  		}  		bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyBrightness,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = pixelColor.R + brightness;  	if (R > 255) {  		R = 255;  	}  	else if (R < 0) {  		R = 0;  	}  	G = pixelColor.G + brightness;  	if (G > 255) {  		G = 255;  	}  	else if (G < 0) {  		G = 0;  	}  	B = pixelColor.B + brightness;  	if (B > 255) {  		B = 255;  	}  	else if (B < 0) {  		B = 0;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyBrightness,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = pixelColor.R + brightness;  	if (R > 255) {  		R = 255;  	}  	else if (R < 0) {  		R = 0;  	}  	G = pixelColor.G + brightness;  	if (G > 255) {  		G = 255;  	}  	else if (G < 0) {  		G = 0;  	}  	B = pixelColor.B + brightness;  	if (B > 255) {  		B = 255;  	}  	else if (B < 0) {  		B = 0;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyBrightness,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = pixelColor.R + brightness;  	if (R > 255) {  		R = 255;  	}  	else if (R < 0) {  		R = 0;  	}  	G = pixelColor.G + brightness;  	if (G > 255) {  		G = 255;  	}  	else if (G < 0) {  		G = 0;  	}  	B = pixelColor.B + brightness;  	if (B > 255) {  		B = 255;  	}  	else if (B < 0) {  		B = 0;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyBrightness,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = pixelColor.R + brightness;  	if (R > 255) {  		R = 255;  	}  	else if (R < 0) {  		R = 0;  	}  	G = pixelColor.G + brightness;  	if (G > 255) {  		G = 255;  	}  	else if (G < 0) {  		G = 0;  	}  	B = pixelColor.B + brightness;  	if (B > 255) {  		B = 255;  	}  	else if (B < 0) {  		B = 0;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyBrightness,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = pixelColor.R + brightness;  	if (R > 255) {  		R = 255;  	}  	else if (R < 0) {  		R = 0;  	}  	G = pixelColor.G + brightness;  	if (G > 255) {  		G = 255;  	}  	else if (G < 0) {  		G = 0;  	}  	B = pixelColor.B + brightness;  	if (B > 255) {  		B = 255;  	}  	else if (B < 0) {  		B = 0;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyBrightness,The following statement contains a magic number: for (int x = 0; x < bitmapImage.Width; x++) {  	pixelColor = bitmapImage.GetPixel (x' y);  	A = pixelColor.A;  	R = pixelColor.R + brightness;  	if (R > 255) {  		R = 255;  	}  	else if (R < 0) {  		R = 0;  	}  	G = pixelColor.G + brightness;  	if (G > 255) {  		G = 255;  	}  	else if (G < 0) {  		G = 0;  	}  	B = pixelColor.B + brightness;  	if (B > 255) {  		B = 255;  	}  	else if (B < 0) {  		B = 0;  	}  	bitmapImage.SetPixel (x' y' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyBrightness,The following statement contains a magic number: if (R > 255) {  	R = 255;  }  else if (R < 0) {  	R = 0;  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyBrightness,The following statement contains a magic number: if (R > 255) {  	R = 255;  }  else if (R < 0) {  	R = 0;  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyBrightness,The following statement contains a magic number: R = 255;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyBrightness,The following statement contains a magic number: if (G > 255) {  	G = 255;  }  else if (G < 0) {  	G = 0;  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyBrightness,The following statement contains a magic number: if (G > 255) {  	G = 255;  }  else if (G < 0) {  	G = 0;  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyBrightness,The following statement contains a magic number: G = 255;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyBrightness,The following statement contains a magic number: if (B > 255) {  	B = 255;  }  else if (B < 0) {  	B = 0;  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyBrightness,The following statement contains a magic number: if (B > 255) {  	B = 255;  }  else if (B < 0) {  	B = 0;  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyBrightness,The following statement contains a magic number: B = 255;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySmooth,The following statement contains a magic number: matrix.Factor = weight + 8;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGaussianBlur,The following statement contains a magic number: matrix.Matrix [0' 0] = peakValue / 4;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGaussianBlur,The following statement contains a magic number: matrix.Matrix [1' 0] = peakValue / 2;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGaussianBlur,The following statement contains a magic number: matrix.Matrix [2' 0] = peakValue / 4;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGaussianBlur,The following statement contains a magic number: matrix.Matrix [2' 0] = peakValue / 4;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGaussianBlur,The following statement contains a magic number: matrix.Matrix [0' 1] = peakValue / 2;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGaussianBlur,The following statement contains a magic number: matrix.Matrix [2' 1] = peakValue / 2;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGaussianBlur,The following statement contains a magic number: matrix.Matrix [2' 1] = peakValue / 2;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGaussianBlur,The following statement contains a magic number: matrix.Matrix [0' 2] = peakValue / 4;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGaussianBlur,The following statement contains a magic number: matrix.Matrix [0' 2] = peakValue / 4;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGaussianBlur,The following statement contains a magic number: matrix.Matrix [1' 2] = peakValue / 2;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGaussianBlur,The following statement contains a magic number: matrix.Matrix [1' 2] = peakValue / 2;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGaussianBlur,The following statement contains a magic number: matrix.Matrix [2' 2] = peakValue / 4;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGaussianBlur,The following statement contains a magic number: matrix.Matrix [2' 2] = peakValue / 4;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGaussianBlur,The following statement contains a magic number: matrix.Matrix [2' 2] = peakValue / 4;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyGaussianBlur,The following statement contains a magic number: matrix.Factor = peakValue * 4;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySharpen,The following statement contains a magic number: matrix.Matrix [1' 0] = -2;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySharpen,The following statement contains a magic number: matrix.Matrix [2' 0] = 0;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySharpen,The following statement contains a magic number: matrix.Matrix [0' 1] = -2;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySharpen,The following statement contains a magic number: matrix.Matrix [2' 1] = -2;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySharpen,The following statement contains a magic number: matrix.Matrix [2' 1] = -2;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySharpen,The following statement contains a magic number: matrix.Matrix [0' 2] = 0;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySharpen,The following statement contains a magic number: matrix.Matrix [1' 2] = -2;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySharpen,The following statement contains a magic number: matrix.Matrix [1' 2] = -2;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySharpen,The following statement contains a magic number: matrix.Matrix [2' 2] = 0;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySharpen,The following statement contains a magic number: matrix.Matrix [2' 2] = 0;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplySharpen,The following statement contains a magic number: matrix.Factor = weight - 8;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyMeanRemoval,The following statement contains a magic number: matrix.Matrix [2' 0] = -1;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyMeanRemoval,The following statement contains a magic number: matrix.Matrix [2' 1] = -1;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyMeanRemoval,The following statement contains a magic number: matrix.Matrix [0' 2] = -1;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyMeanRemoval,The following statement contains a magic number: matrix.Matrix [1' 2] = -1;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyMeanRemoval,The following statement contains a magic number: matrix.Matrix [2' 2] = -1;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyMeanRemoval,The following statement contains a magic number: matrix.Matrix [2' 2] = -1;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyMeanRemoval,The following statement contains a magic number: matrix.Factor = weight - 8;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyEmboss,The following statement contains a magic number: matrix.Matrix [2' 0] = -1;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyEmboss,The following statement contains a magic number: matrix.Matrix [2' 1] = 0;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyEmboss,The following statement contains a magic number: matrix.Matrix [0' 2] = -1;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyEmboss,The following statement contains a magic number: matrix.Matrix [1' 2] = 0;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyEmboss,The following statement contains a magic number: matrix.Matrix [2' 2] = -1;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyEmboss,The following statement contains a magic number: matrix.Matrix [2' 2] = -1;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyEmboss,The following statement contains a magic number: matrix.Factor = 4;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,ApplyEmboss,The following statement contains a magic number: matrix.Offset = 127;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int y = 0; y < b.Height - 2; y++) {  	for (int x = 0; x < b.Width - 2; x++) {  		pixelColor [0' 0] = b.GetPixel (x' y);  		pixelColor [0' 1] = b.GetPixel (x' y + 1);  		pixelColor [0' 2] = b.GetPixel (x' y + 2);  		pixelColor [1' 0] = b.GetPixel (x + 1' y);  		pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  		pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  		pixelColor [2' 0] = b.GetPixel (x + 2' y);  		pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  		pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  		A = pixelColor [1' 1].A;  		R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (R < 0) {  			R = 0;  		}  		else if (R > 255) {  			R = 255;  		}  		G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (G < 0) {  			G = 0;  		}  		else if (G > 255) {  			G = 255;  		}  		B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  		if (B < 0) {  			B = 0;  		}  		else if (B > 255) {  			B = 255;  		}  		newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  	}  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: for (int x = 0; x < b.Width - 2; x++) {  	pixelColor [0' 0] = b.GetPixel (x' y);  	pixelColor [0' 1] = b.GetPixel (x' y + 1);  	pixelColor [0' 2] = b.GetPixel (x' y + 2);  	pixelColor [1' 0] = b.GetPixel (x + 1' y);  	pixelColor [1' 1] = b.GetPixel (x + 1' y + 1);  	pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  	pixelColor [2' 0] = b.GetPixel (x + 2' y);  	pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  	pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  	A = pixelColor [1' 1].A;  	R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (R < 0) {  		R = 0;  	}  	else if (R > 255) {  		R = 255;  	}  	G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (G < 0) {  		G = 0;  	}  	else if (G > 255) {  		G = 255;  	}  	B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  	if (B < 0) {  		B = 0;  	}  	else if (B > 255) {  		B = 255;  	}  	newImg.SetPixel (x + 1' y + 1' Color.FromArgb (A' R' G' B));  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: pixelColor [0' 2] = b.GetPixel (x' y + 2);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: pixelColor [0' 2] = b.GetPixel (x' y + 2);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: pixelColor [1' 2] = b.GetPixel (x + 1' y + 2);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: pixelColor [2' 0] = b.GetPixel (x + 2' y);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: pixelColor [2' 0] = b.GetPixel (x + 2' y);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: pixelColor [2' 1] = b.GetPixel (x + 2' y + 1);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: pixelColor [2' 2] = b.GetPixel (x + 2' y + 2);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: R = (int)((((pixelColor [0' 0].R * m.Matrix [0' 0]) + (pixelColor [1' 0].R * m.Matrix [1' 0]) + (pixelColor [2' 0].R * m.Matrix [2' 0]) + (pixelColor [0' 1].R * m.Matrix [0' 1]) + (pixelColor [1' 1].R * m.Matrix [1' 1]) + (pixelColor [2' 1].R * m.Matrix [2' 1]) + (pixelColor [0' 2].R * m.Matrix [0' 2]) + (pixelColor [1' 2].R * m.Matrix [1' 2]) + (pixelColor [2' 2].R * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: if (R < 0) {  	R = 0;  }  else if (R > 255) {  	R = 255;  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: if (R < 0) {  	R = 0;  }  else if (R > 255) {  	R = 255;  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: if (R > 255) {  	R = 255;  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: if (R > 255) {  	R = 255;  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: R = 255;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: G = (int)((((pixelColor [0' 0].G * m.Matrix [0' 0]) + (pixelColor [1' 0].G * m.Matrix [1' 0]) + (pixelColor [2' 0].G * m.Matrix [2' 0]) + (pixelColor [0' 1].G * m.Matrix [0' 1]) + (pixelColor [1' 1].G * m.Matrix [1' 1]) + (pixelColor [2' 1].G * m.Matrix [2' 1]) + (pixelColor [0' 2].G * m.Matrix [0' 2]) + (pixelColor [1' 2].G * m.Matrix [1' 2]) + (pixelColor [2' 2].G * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: if (G < 0) {  	G = 0;  }  else if (G > 255) {  	G = 255;  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: if (G < 0) {  	G = 0;  }  else if (G > 255) {  	G = 255;  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: if (G > 255) {  	G = 255;  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: if (G > 255) {  	G = 255;  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: G = 255;  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: B = (int)((((pixelColor [0' 0].B * m.Matrix [0' 0]) + (pixelColor [1' 0].B * m.Matrix [1' 0]) + (pixelColor [2' 0].B * m.Matrix [2' 0]) + (pixelColor [0' 1].B * m.Matrix [0' 1]) + (pixelColor [1' 1].B * m.Matrix [1' 1]) + (pixelColor [2' 1].B * m.Matrix [2' 1]) + (pixelColor [0' 2].B * m.Matrix [0' 2]) + (pixelColor [1' 2].B * m.Matrix [1' 2]) + (pixelColor [2' 2].B * m.Matrix [2' 2])) / m.Factor) + m.Offset);  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: if (B < 0) {  	B = 0;  }  else if (B > 255) {  	B = 255;  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: if (B < 0) {  	B = 0;  }  else if (B > 255) {  	B = 255;  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: if (B > 255) {  	B = 255;  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: if (B > 255) {  	B = 255;  }  
Magic Number,breinstormin.tools.image,ImageProcessor,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\ImageProcessor.cs,Convolution3x3,The following statement contains a magic number: B = 255;  
Magic Number,breinstormin.tools.image,breinImage,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\breinImage.cs,GetThumbnailImage,The following statement contains a magic number: if (method == ThumbnailMethod.Crop) {  	int imgWidth = width;  	int imgHeight = height;  	if (imageRatio < thumbRatio) {  		imgHeight = (_image.Height * width) / _image.Width;  	}  	else {  		imgWidth = (_image.Width * height) / _image.Height;  	}  	image = new breinImage (width' height);  	DrawScaledImage (image._image' _image' (width - imgWidth) / 2' (height - imgHeight) / 2' imgWidth' imgHeight);  }  else if (method == ThumbnailMethod.Pad) {  	// Rewritten to fix issue #1. Thanks to Cosmin!  	float hRatio = _image.Height / (float)height;  	float wRatio = _image.Width / (float)width;  	float newRatio = hRatio > wRatio ? hRatio : wRatio;  	int imgHeight = (int)(_image.Height / newRatio);  	int imgWidth = (int)(_image.Width / newRatio);  	image = new breinImage (width' height' _backgroundColor);  	DrawScaledImage (image._image' _image' (width - imgWidth) / 2' (height - imgHeight) / 2' imgWidth' imgHeight);  }  else {  	// ThumbnailMethod.Fit  	if (imageRatio < thumbRatio) {  		width = (_image.Width * height) / _image.Height;  	}  	else {  		height = (_image.Height * width) / _image.Width;  	}  	image = new breinImage (width' height);  	DrawScaledImage (image._image' _image' 0' 0' width' height);  }  
Magic Number,breinstormin.tools.image,breinImage,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\breinImage.cs,GetThumbnailImage,The following statement contains a magic number: if (method == ThumbnailMethod.Crop) {  	int imgWidth = width;  	int imgHeight = height;  	if (imageRatio < thumbRatio) {  		imgHeight = (_image.Height * width) / _image.Width;  	}  	else {  		imgWidth = (_image.Width * height) / _image.Height;  	}  	image = new breinImage (width' height);  	DrawScaledImage (image._image' _image' (width - imgWidth) / 2' (height - imgHeight) / 2' imgWidth' imgHeight);  }  else if (method == ThumbnailMethod.Pad) {  	// Rewritten to fix issue #1. Thanks to Cosmin!  	float hRatio = _image.Height / (float)height;  	float wRatio = _image.Width / (float)width;  	float newRatio = hRatio > wRatio ? hRatio : wRatio;  	int imgHeight = (int)(_image.Height / newRatio);  	int imgWidth = (int)(_image.Width / newRatio);  	image = new breinImage (width' height' _backgroundColor);  	DrawScaledImage (image._image' _image' (width - imgWidth) / 2' (height - imgHeight) / 2' imgWidth' imgHeight);  }  else {  	// ThumbnailMethod.Fit  	if (imageRatio < thumbRatio) {  		width = (_image.Width * height) / _image.Height;  	}  	else {  		height = (_image.Height * width) / _image.Width;  	}  	image = new breinImage (width' height);  	DrawScaledImage (image._image' _image' 0' 0' width' height);  }  
Magic Number,breinstormin.tools.image,breinImage,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\breinImage.cs,GetThumbnailImage,The following statement contains a magic number: if (method == ThumbnailMethod.Crop) {  	int imgWidth = width;  	int imgHeight = height;  	if (imageRatio < thumbRatio) {  		imgHeight = (_image.Height * width) / _image.Width;  	}  	else {  		imgWidth = (_image.Width * height) / _image.Height;  	}  	image = new breinImage (width' height);  	DrawScaledImage (image._image' _image' (width - imgWidth) / 2' (height - imgHeight) / 2' imgWidth' imgHeight);  }  else if (method == ThumbnailMethod.Pad) {  	// Rewritten to fix issue #1. Thanks to Cosmin!  	float hRatio = _image.Height / (float)height;  	float wRatio = _image.Width / (float)width;  	float newRatio = hRatio > wRatio ? hRatio : wRatio;  	int imgHeight = (int)(_image.Height / newRatio);  	int imgWidth = (int)(_image.Width / newRatio);  	image = new breinImage (width' height' _backgroundColor);  	DrawScaledImage (image._image' _image' (width - imgWidth) / 2' (height - imgHeight) / 2' imgWidth' imgHeight);  }  else {  	// ThumbnailMethod.Fit  	if (imageRatio < thumbRatio) {  		width = (_image.Width * height) / _image.Height;  	}  	else {  		height = (_image.Height * width) / _image.Width;  	}  	image = new breinImage (width' height);  	DrawScaledImage (image._image' _image' 0' 0' width' height);  }  
Magic Number,breinstormin.tools.image,breinImage,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\breinImage.cs,GetThumbnailImage,The following statement contains a magic number: if (method == ThumbnailMethod.Crop) {  	int imgWidth = width;  	int imgHeight = height;  	if (imageRatio < thumbRatio) {  		imgHeight = (_image.Height * width) / _image.Width;  	}  	else {  		imgWidth = (_image.Width * height) / _image.Height;  	}  	image = new breinImage (width' height);  	DrawScaledImage (image._image' _image' (width - imgWidth) / 2' (height - imgHeight) / 2' imgWidth' imgHeight);  }  else if (method == ThumbnailMethod.Pad) {  	// Rewritten to fix issue #1. Thanks to Cosmin!  	float hRatio = _image.Height / (float)height;  	float wRatio = _image.Width / (float)width;  	float newRatio = hRatio > wRatio ? hRatio : wRatio;  	int imgHeight = (int)(_image.Height / newRatio);  	int imgWidth = (int)(_image.Width / newRatio);  	image = new breinImage (width' height' _backgroundColor);  	DrawScaledImage (image._image' _image' (width - imgWidth) / 2' (height - imgHeight) / 2' imgWidth' imgHeight);  }  else {  	// ThumbnailMethod.Fit  	if (imageRatio < thumbRatio) {  		width = (_image.Width * height) / _image.Height;  	}  	else {  		height = (_image.Height * width) / _image.Width;  	}  	image = new breinImage (width' height);  	DrawScaledImage (image._image' _image' 0' 0' width' height);  }  
Magic Number,breinstormin.tools.image,breinImage,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\breinImage.cs,GetThumbnailImage,The following statement contains a magic number: DrawScaledImage (image._image' _image' (width - imgWidth) / 2' (height - imgHeight) / 2' imgWidth' imgHeight);  
Magic Number,breinstormin.tools.image,breinImage,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\breinImage.cs,GetThumbnailImage,The following statement contains a magic number: DrawScaledImage (image._image' _image' (width - imgWidth) / 2' (height - imgHeight) / 2' imgWidth' imgHeight);  
Magic Number,breinstormin.tools.image,breinImage,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\breinImage.cs,GetThumbnailImage,The following statement contains a magic number: if (method == ThumbnailMethod.Pad) {  	// Rewritten to fix issue #1. Thanks to Cosmin!  	float hRatio = _image.Height / (float)height;  	float wRatio = _image.Width / (float)width;  	float newRatio = hRatio > wRatio ? hRatio : wRatio;  	int imgHeight = (int)(_image.Height / newRatio);  	int imgWidth = (int)(_image.Width / newRatio);  	image = new breinImage (width' height' _backgroundColor);  	DrawScaledImage (image._image' _image' (width - imgWidth) / 2' (height - imgHeight) / 2' imgWidth' imgHeight);  }  else {  	// ThumbnailMethod.Fit  	if (imageRatio < thumbRatio) {  		width = (_image.Width * height) / _image.Height;  	}  	else {  		height = (_image.Height * width) / _image.Width;  	}  	image = new breinImage (width' height);  	DrawScaledImage (image._image' _image' 0' 0' width' height);  }  
Magic Number,breinstormin.tools.image,breinImage,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\breinImage.cs,GetThumbnailImage,The following statement contains a magic number: if (method == ThumbnailMethod.Pad) {  	// Rewritten to fix issue #1. Thanks to Cosmin!  	float hRatio = _image.Height / (float)height;  	float wRatio = _image.Width / (float)width;  	float newRatio = hRatio > wRatio ? hRatio : wRatio;  	int imgHeight = (int)(_image.Height / newRatio);  	int imgWidth = (int)(_image.Width / newRatio);  	image = new breinImage (width' height' _backgroundColor);  	DrawScaledImage (image._image' _image' (width - imgWidth) / 2' (height - imgHeight) / 2' imgWidth' imgHeight);  }  else {  	// ThumbnailMethod.Fit  	if (imageRatio < thumbRatio) {  		width = (_image.Width * height) / _image.Height;  	}  	else {  		height = (_image.Height * width) / _image.Width;  	}  	image = new breinImage (width' height);  	DrawScaledImage (image._image' _image' 0' 0' width' height);  }  
Magic Number,breinstormin.tools.image,breinImage,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\breinImage.cs,GetThumbnailImage,The following statement contains a magic number: DrawScaledImage (image._image' _image' (width - imgWidth) / 2' (height - imgHeight) / 2' imgWidth' imgHeight);  
Magic Number,breinstormin.tools.image,breinImage,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\breinImage.cs,GetThumbnailImage,The following statement contains a magic number: DrawScaledImage (image._image' _image' (width - imgWidth) / 2' (height - imgHeight) / 2' imgWidth' imgHeight);  
Magic Number,breinstormin.tools.image.Filters,BrightnessFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\BrightnessFilter.cs,BrightnessFilter,The following statement contains a magic number: _brightness = 1 + ((double)changeInBrightness / 100);  
Magic Number,breinstormin.tools.image.Filters,BrightnessFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\BrightnessFilter.cs,PrecalculateTable,The following statement contains a magic number: _precalcTable = new byte[256];  
Magic Number,breinstormin.tools.image.Filters,BrightnessFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\BrightnessFilter.cs,PrecalculateTable,The following statement contains a magic number: for (int i = 0; i < 256; i++) {  	int val = (int)Math.Round (i * _brightness);  	if (val < 0) {  		val = 0;  	}  	else if (val > 255) {  		val = 255;  	}  	_precalcTable [i] = (byte)val;  }  
Magic Number,breinstormin.tools.image.Filters,BrightnessFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\BrightnessFilter.cs,PrecalculateTable,The following statement contains a magic number: for (int i = 0; i < 256; i++) {  	int val = (int)Math.Round (i * _brightness);  	if (val < 0) {  		val = 0;  	}  	else if (val > 255) {  		val = 255;  	}  	_precalcTable [i] = (byte)val;  }  
Magic Number,breinstormin.tools.image.Filters,BrightnessFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\BrightnessFilter.cs,PrecalculateTable,The following statement contains a magic number: for (int i = 0; i < 256; i++) {  	int val = (int)Math.Round (i * _brightness);  	if (val < 0) {  		val = 0;  	}  	else if (val > 255) {  		val = 255;  	}  	_precalcTable [i] = (byte)val;  }  
Magic Number,breinstormin.tools.image.Filters,BrightnessFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\BrightnessFilter.cs,PrecalculateTable,The following statement contains a magic number: if (val < 0) {  	val = 0;  }  else if (val > 255) {  	val = 255;  }  
Magic Number,breinstormin.tools.image.Filters,BrightnessFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\BrightnessFilter.cs,PrecalculateTable,The following statement contains a magic number: if (val < 0) {  	val = 0;  }  else if (val > 255) {  	val = 255;  }  
Magic Number,breinstormin.tools.image.Filters,BrightnessFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\BrightnessFilter.cs,PrecalculateTable,The following statement contains a magic number: if (val > 255) {  	val = 255;  }  
Magic Number,breinstormin.tools.image.Filters,BrightnessFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\BrightnessFilter.cs,PrecalculateTable,The following statement contains a magic number: if (val > 255) {  	val = 255;  }  
Magic Number,breinstormin.tools.image.Filters,BrightnessFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\BrightnessFilter.cs,PrecalculateTable,The following statement contains a magic number: val = 255;  
Magic Number,breinstormin.tools.image.Filters,BrightnessFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\BrightnessFilter.cs,ChangeBrightness,The following statement contains a magic number: for (int i = 0' l = b.Length; i < l; i += 4) {  	b [i] = _precalcTable [b [i]];  	// b  	b [i + 1] = _precalcTable [b [i + 1]];  	// g  	b [i + 2] = _precalcTable [b [i + 2]];  	// r  }  
Magic Number,breinstormin.tools.image.Filters,BrightnessFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\BrightnessFilter.cs,ChangeBrightness,The following statement contains a magic number: for (int i = 0' l = b.Length; i < l; i += 4) {  	b [i] = _precalcTable [b [i]];  	// b  	b [i + 1] = _precalcTable [b [i + 1]];  	// g  	b [i + 2] = _precalcTable [b [i + 2]];  	// r  }  
Magic Number,breinstormin.tools.image.Filters,BrightnessFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\BrightnessFilter.cs,ChangeBrightness,The following statement contains a magic number: for (int i = 0' l = b.Length; i < l; i += 4) {  	b [i] = _precalcTable [b [i]];  	// b  	b [i + 1] = _precalcTable [b [i + 1]];  	// g  	b [i + 2] = _precalcTable [b [i + 2]];  	// r  }  
Magic Number,breinstormin.tools.image.Filters,BrightnessFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\BrightnessFilter.cs,ChangeBrightness,The following statement contains a magic number: i += 4
Magic Number,breinstormin.tools.image.Filters,BrightnessFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\BrightnessFilter.cs,ChangeBrightness,The following statement contains a magic number: b [i + 2] = _precalcTable [b [i + 2]];  
Magic Number,breinstormin.tools.image.Filters,BrightnessFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\BrightnessFilter.cs,ChangeBrightness,The following statement contains a magic number: b [i + 2] = _precalcTable [b [i + 2]];  
Magic Number,breinstormin.tools.image.Filters,ContrastFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\ContrastFilter.cs,ContrastFilter,The following statement contains a magic number: _contrast = 1 + ((double)changeInContrast / 100);  
Magic Number,breinstormin.tools.image.Filters,ContrastFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\ContrastFilter.cs,ChangeContrast,The following statement contains a magic number: for (int i = 0; i < 256; i++) {  	double val = i / 255.0;  	val -= 0.5;  	val *= _contrast;  	val += 0.5;  	val = (int)Math.Round (val * 255);  	if (val < 0) {  		val = 0;  	}  	else if (val > 255) {  		val = 255;  	}  	precalc [i] = (byte)val;  }  
Magic Number,breinstormin.tools.image.Filters,ContrastFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\ContrastFilter.cs,ChangeContrast,The following statement contains a magic number: for (int i = 0; i < 256; i++) {  	double val = i / 255.0;  	val -= 0.5;  	val *= _contrast;  	val += 0.5;  	val = (int)Math.Round (val * 255);  	if (val < 0) {  		val = 0;  	}  	else if (val > 255) {  		val = 255;  	}  	precalc [i] = (byte)val;  }  
Magic Number,breinstormin.tools.image.Filters,ContrastFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\ContrastFilter.cs,ChangeContrast,The following statement contains a magic number: for (int i = 0; i < 256; i++) {  	double val = i / 255.0;  	val -= 0.5;  	val *= _contrast;  	val += 0.5;  	val = (int)Math.Round (val * 255);  	if (val < 0) {  		val = 0;  	}  	else if (val > 255) {  		val = 255;  	}  	precalc [i] = (byte)val;  }  
Magic Number,breinstormin.tools.image.Filters,ContrastFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\ContrastFilter.cs,ChangeContrast,The following statement contains a magic number: for (int i = 0; i < 256; i++) {  	double val = i / 255.0;  	val -= 0.5;  	val *= _contrast;  	val += 0.5;  	val = (int)Math.Round (val * 255);  	if (val < 0) {  		val = 0;  	}  	else if (val > 255) {  		val = 255;  	}  	precalc [i] = (byte)val;  }  
Magic Number,breinstormin.tools.image.Filters,ContrastFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\ContrastFilter.cs,ChangeContrast,The following statement contains a magic number: for (int i = 0; i < 256; i++) {  	double val = i / 255.0;  	val -= 0.5;  	val *= _contrast;  	val += 0.5;  	val = (int)Math.Round (val * 255);  	if (val < 0) {  		val = 0;  	}  	else if (val > 255) {  		val = 255;  	}  	precalc [i] = (byte)val;  }  
Magic Number,breinstormin.tools.image.Filters,ContrastFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\ContrastFilter.cs,ChangeContrast,The following statement contains a magic number: for (int i = 0; i < 256; i++) {  	double val = i / 255.0;  	val -= 0.5;  	val *= _contrast;  	val += 0.5;  	val = (int)Math.Round (val * 255);  	if (val < 0) {  		val = 0;  	}  	else if (val > 255) {  		val = 255;  	}  	precalc [i] = (byte)val;  }  
Magic Number,breinstormin.tools.image.Filters,ContrastFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\ContrastFilter.cs,ChangeContrast,The following statement contains a magic number: for (int i = 0; i < 256; i++) {  	double val = i / 255.0;  	val -= 0.5;  	val *= _contrast;  	val += 0.5;  	val = (int)Math.Round (val * 255);  	if (val < 0) {  		val = 0;  	}  	else if (val > 255) {  		val = 255;  	}  	precalc [i] = (byte)val;  }  
Magic Number,breinstormin.tools.image.Filters,ContrastFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\ContrastFilter.cs,ChangeContrast,The following statement contains a magic number: val -= 0.5;  
Magic Number,breinstormin.tools.image.Filters,ContrastFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\ContrastFilter.cs,ChangeContrast,The following statement contains a magic number: val += 0.5;  
Magic Number,breinstormin.tools.image.Filters,ContrastFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\ContrastFilter.cs,ChangeContrast,The following statement contains a magic number: val = (int)Math.Round (val * 255);  
Magic Number,breinstormin.tools.image.Filters,ContrastFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\ContrastFilter.cs,ChangeContrast,The following statement contains a magic number: if (val < 0) {  	val = 0;  }  else if (val > 255) {  	val = 255;  }  
Magic Number,breinstormin.tools.image.Filters,ContrastFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\ContrastFilter.cs,ChangeContrast,The following statement contains a magic number: if (val < 0) {  	val = 0;  }  else if (val > 255) {  	val = 255;  }  
Magic Number,breinstormin.tools.image.Filters,ContrastFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\ContrastFilter.cs,ChangeContrast,The following statement contains a magic number: if (val > 255) {  	val = 255;  }  
Magic Number,breinstormin.tools.image.Filters,ContrastFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\ContrastFilter.cs,ChangeContrast,The following statement contains a magic number: if (val > 255) {  	val = 255;  }  
Magic Number,breinstormin.tools.image.Filters,ContrastFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\ContrastFilter.cs,ChangeContrast,The following statement contains a magic number: val = 255;  
Magic Number,breinstormin.tools.image.Filters,ContrastFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\ContrastFilter.cs,ChangeContrast,The following statement contains a magic number: for (int i = 0' l = b.Length; i < l; i += 4) {  	b [i] = precalc [b [i]];  	// b  	b [i + 1] = precalc [b [i + 1]];  	// g  	b [i + 2] = precalc [b [i + 2]];  	// r  }  
Magic Number,breinstormin.tools.image.Filters,ContrastFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\ContrastFilter.cs,ChangeContrast,The following statement contains a magic number: for (int i = 0' l = b.Length; i < l; i += 4) {  	b [i] = precalc [b [i]];  	// b  	b [i + 1] = precalc [b [i + 1]];  	// g  	b [i + 2] = precalc [b [i + 2]];  	// r  }  
Magic Number,breinstormin.tools.image.Filters,ContrastFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\ContrastFilter.cs,ChangeContrast,The following statement contains a magic number: for (int i = 0' l = b.Length; i < l; i += 4) {  	b [i] = precalc [b [i]];  	// b  	b [i + 1] = precalc [b [i + 1]];  	// g  	b [i + 2] = precalc [b [i + 2]];  	// r  }  
Magic Number,breinstormin.tools.image.Filters,ContrastFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\ContrastFilter.cs,ChangeContrast,The following statement contains a magic number: i += 4
Magic Number,breinstormin.tools.image.Filters,ContrastFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\ContrastFilter.cs,ChangeContrast,The following statement contains a magic number: b [i + 2] = precalc [b [i + 2]];  
Magic Number,breinstormin.tools.image.Filters,ContrastFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\ContrastFilter.cs,ChangeContrast,The following statement contains a magic number: b [i + 2] = precalc [b [i + 2]];  
Magic Number,breinstormin.tools.image.Filters,DesaturationFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\DesaturationFilter.cs,DesaturateImage,The following statement contains a magic number: for (int i = 0' l = b.Length; i < l; i += 4) {  	b [i] = b [i + 1] = b [i + 2] = (byte)(.299 * b [i + 2] + .587 * b [i + 1] + .114 * b [i]);  }  
Magic Number,breinstormin.tools.image.Filters,DesaturationFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\DesaturationFilter.cs,DesaturateImage,The following statement contains a magic number: for (int i = 0' l = b.Length; i < l; i += 4) {  	b [i] = b [i + 1] = b [i + 2] = (byte)(.299 * b [i + 2] + .587 * b [i + 1] + .114 * b [i]);  }  
Magic Number,breinstormin.tools.image.Filters,DesaturationFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\DesaturationFilter.cs,DesaturateImage,The following statement contains a magic number: for (int i = 0' l = b.Length; i < l; i += 4) {  	b [i] = b [i + 1] = b [i + 2] = (byte)(.299 * b [i + 2] + .587 * b [i + 1] + .114 * b [i]);  }  
Magic Number,breinstormin.tools.image.Filters,DesaturationFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\DesaturationFilter.cs,DesaturateImage,The following statement contains a magic number: for (int i = 0' l = b.Length; i < l; i += 4) {  	b [i] = b [i + 1] = b [i + 2] = (byte)(.299 * b [i + 2] + .587 * b [i + 1] + .114 * b [i]);  }  
Magic Number,breinstormin.tools.image.Filters,DesaturationFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\DesaturationFilter.cs,DesaturateImage,The following statement contains a magic number: for (int i = 0' l = b.Length; i < l; i += 4) {  	b [i] = b [i + 1] = b [i + 2] = (byte)(.299 * b [i + 2] + .587 * b [i + 1] + .114 * b [i]);  }  
Magic Number,breinstormin.tools.image.Filters,DesaturationFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\DesaturationFilter.cs,DesaturateImage,The following statement contains a magic number: for (int i = 0' l = b.Length; i < l; i += 4) {  	b [i] = b [i + 1] = b [i + 2] = (byte)(.299 * b [i + 2] + .587 * b [i + 1] + .114 * b [i]);  }  
Magic Number,breinstormin.tools.image.Filters,DesaturationFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\DesaturationFilter.cs,DesaturateImage,The following statement contains a magic number: i += 4
Magic Number,breinstormin.tools.image.Filters,DesaturationFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\DesaturationFilter.cs,DesaturateImage,The following statement contains a magic number: b [i] = b [i + 1] = b [i + 2] = (byte)(.299 * b [i + 2] + .587 * b [i + 1] + .114 * b [i]);  
Magic Number,breinstormin.tools.image.Filters,DesaturationFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\DesaturationFilter.cs,DesaturateImage,The following statement contains a magic number: b [i] = b [i + 1] = b [i + 2] = (byte)(.299 * b [i + 2] + .587 * b [i + 1] + .114 * b [i]);  
Magic Number,breinstormin.tools.image.Filters,DesaturationFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\DesaturationFilter.cs,DesaturateImage,The following statement contains a magic number: b [i] = b [i + 1] = b [i + 2] = (byte)(.299 * b [i + 2] + .587 * b [i + 1] + .114 * b [i]);  
Magic Number,breinstormin.tools.image.Filters,DesaturationFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\DesaturationFilter.cs,DesaturateImage,The following statement contains a magic number: b [i] = b [i + 1] = b [i + 2] = (byte)(.299 * b [i + 2] + .587 * b [i + 1] + .114 * b [i]);  
Magic Number,breinstormin.tools.image.Filters,DesaturationFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\DesaturationFilter.cs,DesaturateImage,The following statement contains a magic number: b [i] = b [i + 1] = b [i + 2] = (byte)(.299 * b [i + 2] + .587 * b [i + 1] + .114 * b [i]);  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	for (int x = 0; x < width; x++) {  		dest = y * width + x;  		// Iterate through kernel    		for (int k = 0; k < gaussWidth; k++) {  			// Get pixel-shift (pixel dist between dest and source)    			shift = k - blurDiam;  			// Basic edge clamp    			source = dest + shift;  			if (x + shift <= 0 || x + shift >= width) {  				source = dest;  			}  			// Combine source and destination pixels with Gaussian Weight    			gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  			gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  			gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  		}  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	for (int x = 0; x < width; x++) {  		dest = y * width + x;  		// Iterate through kernel    		for (int k = 0; k < gaussWidth; k++) {  			// Get pixel-shift (pixel dist between dest and source)    			shift = k - blurDiam;  			// Basic edge clamp    			source = dest + shift;  			if (x + shift <= 0 || x + shift >= width) {  				source = dest;  			}  			// Combine source and destination pixels with Gaussian Weight    			gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  			gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  			gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  		}  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	for (int x = 0; x < width; x++) {  		dest = y * width + x;  		// Iterate through kernel    		for (int k = 0; k < gaussWidth; k++) {  			// Get pixel-shift (pixel dist between dest and source)    			shift = k - blurDiam;  			// Basic edge clamp    			source = dest + shift;  			if (x + shift <= 0 || x + shift >= width) {  				source = dest;  			}  			// Combine source and destination pixels with Gaussian Weight    			gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  			gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  			gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  		}  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	for (int x = 0; x < width; x++) {  		dest = y * width + x;  		// Iterate through kernel    		for (int k = 0; k < gaussWidth; k++) {  			// Get pixel-shift (pixel dist between dest and source)    			shift = k - blurDiam;  			// Basic edge clamp    			source = dest + shift;  			if (x + shift <= 0 || x + shift >= width) {  				source = dest;  			}  			// Combine source and destination pixels with Gaussian Weight    			gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  			gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  			gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  		}  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	for (int x = 0; x < width; x++) {  		dest = y * width + x;  		// Iterate through kernel    		for (int k = 0; k < gaussWidth; k++) {  			// Get pixel-shift (pixel dist between dest and source)    			shift = k - blurDiam;  			// Basic edge clamp    			source = dest + shift;  			if (x + shift <= 0 || x + shift >= width) {  				source = dest;  			}  			// Combine source and destination pixels with Gaussian Weight    			gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  			gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  			gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  		}  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	for (int x = 0; x < width; x++) {  		dest = y * width + x;  		// Iterate through kernel    		for (int k = 0; k < gaussWidth; k++) {  			// Get pixel-shift (pixel dist between dest and source)    			shift = k - blurDiam;  			// Basic edge clamp    			source = dest + shift;  			if (x + shift <= 0 || x + shift >= width) {  				source = dest;  			}  			// Combine source and destination pixels with Gaussian Weight    			gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  			gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  			gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  		}  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	for (int x = 0; x < width; x++) {  		dest = y * width + x;  		// Iterate through kernel    		for (int k = 0; k < gaussWidth; k++) {  			// Get pixel-shift (pixel dist between dest and source)    			shift = k - blurDiam;  			// Basic edge clamp    			source = dest + shift;  			if (x + shift <= 0 || x + shift >= width) {  				source = dest;  			}  			// Combine source and destination pixels with Gaussian Weight    			gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  			gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  			gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  		}  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	for (int x = 0; x < width; x++) {  		dest = y * width + x;  		// Iterate through kernel    		for (int k = 0; k < gaussWidth; k++) {  			// Get pixel-shift (pixel dist between dest and source)    			shift = k - blurDiam;  			// Basic edge clamp    			source = dest + shift;  			if (x + shift <= 0 || x + shift >= width) {  				source = dest;  			}  			// Combine source and destination pixels with Gaussian Weight    			gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  			gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  			gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  		}  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	for (int x = 0; x < width; x++) {  		dest = y * width + x;  		// Iterate through kernel    		for (int k = 0; k < gaussWidth; k++) {  			// Get pixel-shift (pixel dist between dest and source)    			shift = k - blurDiam;  			// Basic edge clamp    			source = dest + shift;  			if (x + shift <= 0 || x + shift >= width) {  				source = dest;  			}  			// Combine source and destination pixels with Gaussian Weight    			gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  			gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  			gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  		}  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	for (int x = 0; x < width; x++) {  		dest = y * width + x;  		// Iterate through kernel    		for (int k = 0; k < gaussWidth; k++) {  			// Get pixel-shift (pixel dist between dest and source)    			shift = k - blurDiam;  			// Basic edge clamp    			source = dest + shift;  			if (x + shift <= 0 || x + shift >= width) {  				source = dest;  			}  			// Combine source and destination pixels with Gaussian Weight    			gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  			gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  			gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  		}  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	for (int x = 0; x < width; x++) {  		dest = y * width + x;  		// Iterate through kernel    		for (int k = 0; k < gaussWidth; k++) {  			// Get pixel-shift (pixel dist between dest and source)    			shift = k - blurDiam;  			// Basic edge clamp    			source = dest + shift;  			if (x + shift <= 0 || x + shift >= width) {  				source = dest;  			}  			// Combine source and destination pixels with Gaussian Weight    			gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  			gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  			gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  		}  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	for (int x = 0; x < width; x++) {  		dest = y * width + x;  		// Iterate through kernel    		for (int k = 0; k < gaussWidth; k++) {  			// Get pixel-shift (pixel dist between dest and source)    			shift = k - blurDiam;  			// Basic edge clamp    			source = dest + shift;  			if (x + shift <= 0 || x + shift >= width) {  				source = dest;  			}  			// Combine source and destination pixels with Gaussian Weight    			gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  			gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  			gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  		}  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	dest = y * width + x;  	// Iterate through kernel    	for (int k = 0; k < gaussWidth; k++) {  		// Get pixel-shift (pixel dist between dest and source)    		shift = k - blurDiam;  		// Basic edge clamp    		source = dest + shift;  		if (x + shift <= 0 || x + shift >= width) {  			source = dest;  		}  		// Combine source and destination pixels with Gaussian Weight    		gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  		gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  		gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	dest = y * width + x;  	// Iterate through kernel    	for (int k = 0; k < gaussWidth; k++) {  		// Get pixel-shift (pixel dist between dest and source)    		shift = k - blurDiam;  		// Basic edge clamp    		source = dest + shift;  		if (x + shift <= 0 || x + shift >= width) {  			source = dest;  		}  		// Combine source and destination pixels with Gaussian Weight    		gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  		gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  		gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	dest = y * width + x;  	// Iterate through kernel    	for (int k = 0; k < gaussWidth; k++) {  		// Get pixel-shift (pixel dist between dest and source)    		shift = k - blurDiam;  		// Basic edge clamp    		source = dest + shift;  		if (x + shift <= 0 || x + shift >= width) {  			source = dest;  		}  		// Combine source and destination pixels with Gaussian Weight    		gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  		gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  		gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	dest = y * width + x;  	// Iterate through kernel    	for (int k = 0; k < gaussWidth; k++) {  		// Get pixel-shift (pixel dist between dest and source)    		shift = k - blurDiam;  		// Basic edge clamp    		source = dest + shift;  		if (x + shift <= 0 || x + shift >= width) {  			source = dest;  		}  		// Combine source and destination pixels with Gaussian Weight    		gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  		gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  		gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	dest = y * width + x;  	// Iterate through kernel    	for (int k = 0; k < gaussWidth; k++) {  		// Get pixel-shift (pixel dist between dest and source)    		shift = k - blurDiam;  		// Basic edge clamp    		source = dest + shift;  		if (x + shift <= 0 || x + shift >= width) {  			source = dest;  		}  		// Combine source and destination pixels with Gaussian Weight    		gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  		gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  		gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	dest = y * width + x;  	// Iterate through kernel    	for (int k = 0; k < gaussWidth; k++) {  		// Get pixel-shift (pixel dist between dest and source)    		shift = k - blurDiam;  		// Basic edge clamp    		source = dest + shift;  		if (x + shift <= 0 || x + shift >= width) {  			source = dest;  		}  		// Combine source and destination pixels with Gaussian Weight    		gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  		gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  		gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	dest = y * width + x;  	// Iterate through kernel    	for (int k = 0; k < gaussWidth; k++) {  		// Get pixel-shift (pixel dist between dest and source)    		shift = k - blurDiam;  		// Basic edge clamp    		source = dest + shift;  		if (x + shift <= 0 || x + shift >= width) {  			source = dest;  		}  		// Combine source and destination pixels with Gaussian Weight    		gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  		gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  		gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	dest = y * width + x;  	// Iterate through kernel    	for (int k = 0; k < gaussWidth; k++) {  		// Get pixel-shift (pixel dist between dest and source)    		shift = k - blurDiam;  		// Basic edge clamp    		source = dest + shift;  		if (x + shift <= 0 || x + shift >= width) {  			source = dest;  		}  		// Combine source and destination pixels with Gaussian Weight    		gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  		gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  		gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	dest = y * width + x;  	// Iterate through kernel    	for (int k = 0; k < gaussWidth; k++) {  		// Get pixel-shift (pixel dist between dest and source)    		shift = k - blurDiam;  		// Basic edge clamp    		source = dest + shift;  		if (x + shift <= 0 || x + shift >= width) {  			source = dest;  		}  		// Combine source and destination pixels with Gaussian Weight    		gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  		gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  		gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	dest = y * width + x;  	// Iterate through kernel    	for (int k = 0; k < gaussWidth; k++) {  		// Get pixel-shift (pixel dist between dest and source)    		shift = k - blurDiam;  		// Basic edge clamp    		source = dest + shift;  		if (x + shift <= 0 || x + shift >= width) {  			source = dest;  		}  		// Combine source and destination pixels with Gaussian Weight    		gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  		gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  		gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	dest = y * width + x;  	// Iterate through kernel    	for (int k = 0; k < gaussWidth; k++) {  		// Get pixel-shift (pixel dist between dest and source)    		shift = k - blurDiam;  		// Basic edge clamp    		source = dest + shift;  		if (x + shift <= 0 || x + shift >= width) {  			source = dest;  		}  		// Combine source and destination pixels with Gaussian Weight    		gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  		gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  		gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	dest = y * width + x;  	// Iterate through kernel    	for (int k = 0; k < gaussWidth; k++) {  		// Get pixel-shift (pixel dist between dest and source)    		shift = k - blurDiam;  		// Basic edge clamp    		source = dest + shift;  		if (x + shift <= 0 || x + shift >= width) {  			source = dest;  		}  		// Combine source and destination pixels with Gaussian Weight    		gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  		gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  		gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int k = 0; k < gaussWidth; k++) {  	// Get pixel-shift (pixel dist between dest and source)    	shift = k - blurDiam;  	// Basic edge clamp    	source = dest + shift;  	if (x + shift <= 0 || x + shift >= width) {  		source = dest;  	}  	// Combine source and destination pixels with Gaussian Weight    	gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  	gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  	gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int k = 0; k < gaussWidth; k++) {  	// Get pixel-shift (pixel dist between dest and source)    	shift = k - blurDiam;  	// Basic edge clamp    	source = dest + shift;  	if (x + shift <= 0 || x + shift >= width) {  		source = dest;  	}  	// Combine source and destination pixels with Gaussian Weight    	gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  	gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  	gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int k = 0; k < gaussWidth; k++) {  	// Get pixel-shift (pixel dist between dest and source)    	shift = k - blurDiam;  	// Basic edge clamp    	source = dest + shift;  	if (x + shift <= 0 || x + shift >= width) {  		source = dest;  	}  	// Combine source and destination pixels with Gaussian Weight    	gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  	gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  	gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int k = 0; k < gaussWidth; k++) {  	// Get pixel-shift (pixel dist between dest and source)    	shift = k - blurDiam;  	// Basic edge clamp    	source = dest + shift;  	if (x + shift <= 0 || x + shift >= width) {  		source = dest;  	}  	// Combine source and destination pixels with Gaussian Weight    	gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  	gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  	gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int k = 0; k < gaussWidth; k++) {  	// Get pixel-shift (pixel dist between dest and source)    	shift = k - blurDiam;  	// Basic edge clamp    	source = dest + shift;  	if (x + shift <= 0 || x + shift >= width) {  		source = dest;  	}  	// Combine source and destination pixels with Gaussian Weight    	gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  	gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  	gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int k = 0; k < gaussWidth; k++) {  	// Get pixel-shift (pixel dist between dest and source)    	shift = k - blurDiam;  	// Basic edge clamp    	source = dest + shift;  	if (x + shift <= 0 || x + shift >= width) {  		source = dest;  	}  	// Combine source and destination pixels with Gaussian Weight    	gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  	gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  	gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int k = 0; k < gaussWidth; k++) {  	// Get pixel-shift (pixel dist between dest and source)    	shift = k - blurDiam;  	// Basic edge clamp    	source = dest + shift;  	if (x + shift <= 0 || x + shift >= width) {  		source = dest;  	}  	// Combine source and destination pixels with Gaussian Weight    	gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  	gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  	gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int k = 0; k < gaussWidth; k++) {  	// Get pixel-shift (pixel dist between dest and source)    	shift = k - blurDiam;  	// Basic edge clamp    	source = dest + shift;  	if (x + shift <= 0 || x + shift >= width) {  		source = dest;  	}  	// Combine source and destination pixels with Gaussian Weight    	gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  	gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  	gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int k = 0; k < gaussWidth; k++) {  	// Get pixel-shift (pixel dist between dest and source)    	shift = k - blurDiam;  	// Basic edge clamp    	source = dest + shift;  	if (x + shift <= 0 || x + shift >= width) {  		source = dest;  	}  	// Combine source and destination pixels with Gaussian Weight    	gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  	gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  	gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int k = 0; k < gaussWidth; k++) {  	// Get pixel-shift (pixel dist between dest and source)    	shift = k - blurDiam;  	// Basic edge clamp    	source = dest + shift;  	if (x + shift <= 0 || x + shift >= width) {  		source = dest;  	}  	// Combine source and destination pixels with Gaussian Weight    	gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  	gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  	gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int k = 0; k < gaussWidth; k++) {  	// Get pixel-shift (pixel dist between dest and source)    	shift = k - blurDiam;  	// Basic edge clamp    	source = dest + shift;  	if (x + shift <= 0 || x + shift >= width) {  		source = dest;  	}  	// Combine source and destination pixels with Gaussian Weight    	gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  	gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  	gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int k = 0; k < gaussWidth; k++) {  	// Get pixel-shift (pixel dist between dest and source)    	shift = k - blurDiam;  	// Basic edge clamp    	source = dest + shift;  	if (x + shift <= 0 || x + shift >= width) {  		source = dest;  	}  	// Combine source and destination pixels with Gaussian Weight    	gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  	gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  	gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: gaussPassX [(dest << 2) + 2] = (byte)(gaussPassX [(dest << 2) + 2] + (src [(source << 2) + 2]) * kernel [k]);  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: gaussPassX [(dest << 2) + 1] = (byte)(gaussPassX [(dest << 2) + 1] + (src [(source << 2) + 1]) * kernel [k]);  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: gaussPassX [(dest << 2)] = (byte)(gaussPassX [(dest << 2)] + (src [(source << 2)]) * kernel [k]);  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	for (int y = 0; y < height; y++) {  		dest = y * width + x;  		// Iterate through kernel    		for (int k = 0; k < gaussWidth; k++) {  			// Get pixel-shift (pixel dist between dest and source)     			shift = k - blurDiam;  			// Basic edge clamp    			source = dest + (shift * width);  			if (y + shift <= 0 || y + shift >= height) {  				source = dest;  			}  			// Combine source and destination pixels with Gaussian Weight    			dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  			dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  			dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  		}  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	for (int y = 0; y < height; y++) {  		dest = y * width + x;  		// Iterate through kernel    		for (int k = 0; k < gaussWidth; k++) {  			// Get pixel-shift (pixel dist between dest and source)     			shift = k - blurDiam;  			// Basic edge clamp    			source = dest + (shift * width);  			if (y + shift <= 0 || y + shift >= height) {  				source = dest;  			}  			// Combine source and destination pixels with Gaussian Weight    			dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  			dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  			dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  		}  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	for (int y = 0; y < height; y++) {  		dest = y * width + x;  		// Iterate through kernel    		for (int k = 0; k < gaussWidth; k++) {  			// Get pixel-shift (pixel dist between dest and source)     			shift = k - blurDiam;  			// Basic edge clamp    			source = dest + (shift * width);  			if (y + shift <= 0 || y + shift >= height) {  				source = dest;  			}  			// Combine source and destination pixels with Gaussian Weight    			dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  			dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  			dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  		}  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	for (int y = 0; y < height; y++) {  		dest = y * width + x;  		// Iterate through kernel    		for (int k = 0; k < gaussWidth; k++) {  			// Get pixel-shift (pixel dist between dest and source)     			shift = k - blurDiam;  			// Basic edge clamp    			source = dest + (shift * width);  			if (y + shift <= 0 || y + shift >= height) {  				source = dest;  			}  			// Combine source and destination pixels with Gaussian Weight    			dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  			dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  			dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  		}  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	for (int y = 0; y < height; y++) {  		dest = y * width + x;  		// Iterate through kernel    		for (int k = 0; k < gaussWidth; k++) {  			// Get pixel-shift (pixel dist between dest and source)     			shift = k - blurDiam;  			// Basic edge clamp    			source = dest + (shift * width);  			if (y + shift <= 0 || y + shift >= height) {  				source = dest;  			}  			// Combine source and destination pixels with Gaussian Weight    			dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  			dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  			dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  		}  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	for (int y = 0; y < height; y++) {  		dest = y * width + x;  		// Iterate through kernel    		for (int k = 0; k < gaussWidth; k++) {  			// Get pixel-shift (pixel dist between dest and source)     			shift = k - blurDiam;  			// Basic edge clamp    			source = dest + (shift * width);  			if (y + shift <= 0 || y + shift >= height) {  				source = dest;  			}  			// Combine source and destination pixels with Gaussian Weight    			dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  			dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  			dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  		}  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	for (int y = 0; y < height; y++) {  		dest = y * width + x;  		// Iterate through kernel    		for (int k = 0; k < gaussWidth; k++) {  			// Get pixel-shift (pixel dist between dest and source)     			shift = k - blurDiam;  			// Basic edge clamp    			source = dest + (shift * width);  			if (y + shift <= 0 || y + shift >= height) {  				source = dest;  			}  			// Combine source and destination pixels with Gaussian Weight    			dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  			dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  			dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  		}  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	for (int y = 0; y < height; y++) {  		dest = y * width + x;  		// Iterate through kernel    		for (int k = 0; k < gaussWidth; k++) {  			// Get pixel-shift (pixel dist between dest and source)     			shift = k - blurDiam;  			// Basic edge clamp    			source = dest + (shift * width);  			if (y + shift <= 0 || y + shift >= height) {  				source = dest;  			}  			// Combine source and destination pixels with Gaussian Weight    			dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  			dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  			dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  		}  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	for (int y = 0; y < height; y++) {  		dest = y * width + x;  		// Iterate through kernel    		for (int k = 0; k < gaussWidth; k++) {  			// Get pixel-shift (pixel dist between dest and source)     			shift = k - blurDiam;  			// Basic edge clamp    			source = dest + (shift * width);  			if (y + shift <= 0 || y + shift >= height) {  				source = dest;  			}  			// Combine source and destination pixels with Gaussian Weight    			dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  			dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  			dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  		}  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	for (int y = 0; y < height; y++) {  		dest = y * width + x;  		// Iterate through kernel    		for (int k = 0; k < gaussWidth; k++) {  			// Get pixel-shift (pixel dist between dest and source)     			shift = k - blurDiam;  			// Basic edge clamp    			source = dest + (shift * width);  			if (y + shift <= 0 || y + shift >= height) {  				source = dest;  			}  			// Combine source and destination pixels with Gaussian Weight    			dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  			dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  			dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  		}  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	for (int y = 0; y < height; y++) {  		dest = y * width + x;  		// Iterate through kernel    		for (int k = 0; k < gaussWidth; k++) {  			// Get pixel-shift (pixel dist between dest and source)     			shift = k - blurDiam;  			// Basic edge clamp    			source = dest + (shift * width);  			if (y + shift <= 0 || y + shift >= height) {  				source = dest;  			}  			// Combine source and destination pixels with Gaussian Weight    			dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  			dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  			dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  		}  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	for (int y = 0; y < height; y++) {  		dest = y * width + x;  		// Iterate through kernel    		for (int k = 0; k < gaussWidth; k++) {  			// Get pixel-shift (pixel dist between dest and source)     			shift = k - blurDiam;  			// Basic edge clamp    			source = dest + (shift * width);  			if (y + shift <= 0 || y + shift >= height) {  				source = dest;  			}  			// Combine source and destination pixels with Gaussian Weight    			dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  			dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  			dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  		}  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	dest = y * width + x;  	// Iterate through kernel    	for (int k = 0; k < gaussWidth; k++) {  		// Get pixel-shift (pixel dist between dest and source)     		shift = k - blurDiam;  		// Basic edge clamp    		source = dest + (shift * width);  		if (y + shift <= 0 || y + shift >= height) {  			source = dest;  		}  		// Combine source and destination pixels with Gaussian Weight    		dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  		dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  		dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	dest = y * width + x;  	// Iterate through kernel    	for (int k = 0; k < gaussWidth; k++) {  		// Get pixel-shift (pixel dist between dest and source)     		shift = k - blurDiam;  		// Basic edge clamp    		source = dest + (shift * width);  		if (y + shift <= 0 || y + shift >= height) {  			source = dest;  		}  		// Combine source and destination pixels with Gaussian Weight    		dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  		dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  		dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	dest = y * width + x;  	// Iterate through kernel    	for (int k = 0; k < gaussWidth; k++) {  		// Get pixel-shift (pixel dist between dest and source)     		shift = k - blurDiam;  		// Basic edge clamp    		source = dest + (shift * width);  		if (y + shift <= 0 || y + shift >= height) {  			source = dest;  		}  		// Combine source and destination pixels with Gaussian Weight    		dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  		dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  		dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	dest = y * width + x;  	// Iterate through kernel    	for (int k = 0; k < gaussWidth; k++) {  		// Get pixel-shift (pixel dist between dest and source)     		shift = k - blurDiam;  		// Basic edge clamp    		source = dest + (shift * width);  		if (y + shift <= 0 || y + shift >= height) {  			source = dest;  		}  		// Combine source and destination pixels with Gaussian Weight    		dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  		dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  		dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	dest = y * width + x;  	// Iterate through kernel    	for (int k = 0; k < gaussWidth; k++) {  		// Get pixel-shift (pixel dist between dest and source)     		shift = k - blurDiam;  		// Basic edge clamp    		source = dest + (shift * width);  		if (y + shift <= 0 || y + shift >= height) {  			source = dest;  		}  		// Combine source and destination pixels with Gaussian Weight    		dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  		dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  		dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	dest = y * width + x;  	// Iterate through kernel    	for (int k = 0; k < gaussWidth; k++) {  		// Get pixel-shift (pixel dist between dest and source)     		shift = k - blurDiam;  		// Basic edge clamp    		source = dest + (shift * width);  		if (y + shift <= 0 || y + shift >= height) {  			source = dest;  		}  		// Combine source and destination pixels with Gaussian Weight    		dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  		dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  		dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	dest = y * width + x;  	// Iterate through kernel    	for (int k = 0; k < gaussWidth; k++) {  		// Get pixel-shift (pixel dist between dest and source)     		shift = k - blurDiam;  		// Basic edge clamp    		source = dest + (shift * width);  		if (y + shift <= 0 || y + shift >= height) {  			source = dest;  		}  		// Combine source and destination pixels with Gaussian Weight    		dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  		dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  		dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	dest = y * width + x;  	// Iterate through kernel    	for (int k = 0; k < gaussWidth; k++) {  		// Get pixel-shift (pixel dist between dest and source)     		shift = k - blurDiam;  		// Basic edge clamp    		source = dest + (shift * width);  		if (y + shift <= 0 || y + shift >= height) {  			source = dest;  		}  		// Combine source and destination pixels with Gaussian Weight    		dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  		dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  		dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	dest = y * width + x;  	// Iterate through kernel    	for (int k = 0; k < gaussWidth; k++) {  		// Get pixel-shift (pixel dist between dest and source)     		shift = k - blurDiam;  		// Basic edge clamp    		source = dest + (shift * width);  		if (y + shift <= 0 || y + shift >= height) {  			source = dest;  		}  		// Combine source and destination pixels with Gaussian Weight    		dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  		dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  		dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	dest = y * width + x;  	// Iterate through kernel    	for (int k = 0; k < gaussWidth; k++) {  		// Get pixel-shift (pixel dist between dest and source)     		shift = k - blurDiam;  		// Basic edge clamp    		source = dest + (shift * width);  		if (y + shift <= 0 || y + shift >= height) {  			source = dest;  		}  		// Combine source and destination pixels with Gaussian Weight    		dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  		dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  		dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	dest = y * width + x;  	// Iterate through kernel    	for (int k = 0; k < gaussWidth; k++) {  		// Get pixel-shift (pixel dist between dest and source)     		shift = k - blurDiam;  		// Basic edge clamp    		source = dest + (shift * width);  		if (y + shift <= 0 || y + shift >= height) {  			source = dest;  		}  		// Combine source and destination pixels with Gaussian Weight    		dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  		dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  		dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	dest = y * width + x;  	// Iterate through kernel    	for (int k = 0; k < gaussWidth; k++) {  		// Get pixel-shift (pixel dist between dest and source)     		shift = k - blurDiam;  		// Basic edge clamp    		source = dest + (shift * width);  		if (y + shift <= 0 || y + shift >= height) {  			source = dest;  		}  		// Combine source and destination pixels with Gaussian Weight    		dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  		dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  		dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  	}  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int k = 0; k < gaussWidth; k++) {  	// Get pixel-shift (pixel dist between dest and source)     	shift = k - blurDiam;  	// Basic edge clamp    	source = dest + (shift * width);  	if (y + shift <= 0 || y + shift >= height) {  		source = dest;  	}  	// Combine source and destination pixels with Gaussian Weight    	dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  	dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  	dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int k = 0; k < gaussWidth; k++) {  	// Get pixel-shift (pixel dist between dest and source)     	shift = k - blurDiam;  	// Basic edge clamp    	source = dest + (shift * width);  	if (y + shift <= 0 || y + shift >= height) {  		source = dest;  	}  	// Combine source and destination pixels with Gaussian Weight    	dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  	dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  	dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int k = 0; k < gaussWidth; k++) {  	// Get pixel-shift (pixel dist between dest and source)     	shift = k - blurDiam;  	// Basic edge clamp    	source = dest + (shift * width);  	if (y + shift <= 0 || y + shift >= height) {  		source = dest;  	}  	// Combine source and destination pixels with Gaussian Weight    	dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  	dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  	dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int k = 0; k < gaussWidth; k++) {  	// Get pixel-shift (pixel dist between dest and source)     	shift = k - blurDiam;  	// Basic edge clamp    	source = dest + (shift * width);  	if (y + shift <= 0 || y + shift >= height) {  		source = dest;  	}  	// Combine source and destination pixels with Gaussian Weight    	dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  	dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  	dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int k = 0; k < gaussWidth; k++) {  	// Get pixel-shift (pixel dist between dest and source)     	shift = k - blurDiam;  	// Basic edge clamp    	source = dest + (shift * width);  	if (y + shift <= 0 || y + shift >= height) {  		source = dest;  	}  	// Combine source and destination pixels with Gaussian Weight    	dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  	dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  	dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int k = 0; k < gaussWidth; k++) {  	// Get pixel-shift (pixel dist between dest and source)     	shift = k - blurDiam;  	// Basic edge clamp    	source = dest + (shift * width);  	if (y + shift <= 0 || y + shift >= height) {  		source = dest;  	}  	// Combine source and destination pixels with Gaussian Weight    	dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  	dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  	dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int k = 0; k < gaussWidth; k++) {  	// Get pixel-shift (pixel dist between dest and source)     	shift = k - blurDiam;  	// Basic edge clamp    	source = dest + (shift * width);  	if (y + shift <= 0 || y + shift >= height) {  		source = dest;  	}  	// Combine source and destination pixels with Gaussian Weight    	dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  	dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  	dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int k = 0; k < gaussWidth; k++) {  	// Get pixel-shift (pixel dist between dest and source)     	shift = k - blurDiam;  	// Basic edge clamp    	source = dest + (shift * width);  	if (y + shift <= 0 || y + shift >= height) {  		source = dest;  	}  	// Combine source and destination pixels with Gaussian Weight    	dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  	dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  	dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int k = 0; k < gaussWidth; k++) {  	// Get pixel-shift (pixel dist between dest and source)     	shift = k - blurDiam;  	// Basic edge clamp    	source = dest + (shift * width);  	if (y + shift <= 0 || y + shift >= height) {  		source = dest;  	}  	// Combine source and destination pixels with Gaussian Weight    	dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  	dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  	dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int k = 0; k < gaussWidth; k++) {  	// Get pixel-shift (pixel dist between dest and source)     	shift = k - blurDiam;  	// Basic edge clamp    	source = dest + (shift * width);  	if (y + shift <= 0 || y + shift >= height) {  		source = dest;  	}  	// Combine source and destination pixels with Gaussian Weight    	dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  	dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  	dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int k = 0; k < gaussWidth; k++) {  	// Get pixel-shift (pixel dist between dest and source)     	shift = k - blurDiam;  	// Basic edge clamp    	source = dest + (shift * width);  	if (y + shift <= 0 || y + shift >= height) {  		source = dest;  	}  	// Combine source and destination pixels with Gaussian Weight    	dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  	dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  	dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: for (int k = 0; k < gaussWidth; k++) {  	// Get pixel-shift (pixel dist between dest and source)     	shift = k - blurDiam;  	// Basic edge clamp    	source = dest + (shift * width);  	if (y + shift <= 0 || y + shift >= height) {  		source = dest;  	}  	// Combine source and destination pixels with Gaussian Weight    	dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  	dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  	dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: dst [(dest << 2) + 2] = (byte)(dst [(dest << 2) + 2] + (gaussPassX [(source << 2) + 2]) * kernel [k]);  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: dst [(dest << 2) + 1] = (byte)(dst [(dest << 2) + 1] + (gaussPassX [(source << 2) + 1]) * kernel [k]);  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,GaussianBlur,The following statement contains a magic number: dst [(dest << 2)] = (byte)(dst [(dest << 2)] + (gaussPassX [(source << 2)]) * kernel [k]);  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,CreateKernel,The following statement contains a magic number: for (int pos = 0' len = blurDiam + 1; pos < len; pos++) {  	// Distribute Gaussian curve across kernel[array]     	kernel [gaussianWidth - 1 - pos] = kernel [pos] = Math.Sqrt (Math.Sin ((((pos + 1) * (Math.PI / 2)) - mean) / range)) * sd;  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,CreateKernel,The following statement contains a magic number: kernel [gaussianWidth - 1 - pos] = kernel [pos] = Math.Sqrt (Math.Sin ((((pos + 1) * (Math.PI / 2)) - mean) / range)) * sd;  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,CreateKernel2,The following statement contains a magic number: for (int weight = 1; weight < half + 1; ++weight) {  	double x = 3 * (double)weight / half;  	//   Corresponding symmetric weights  	kernel [half - weight] = kernel [half + weight] = Math.Exp (-x * x / 2);  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,CreateKernel2,The following statement contains a magic number: for (int weight = 1; weight < half + 1; ++weight) {  	double x = 3 * (double)weight / half;  	//   Corresponding symmetric weights  	kernel [half - weight] = kernel [half + weight] = Math.Exp (-x * x / 2);  }  
Magic Number,breinstormin.tools.image.Filters,GaussianBlurFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\GaussianBlurFilter.cs,CreateKernel2,The following statement contains a magic number: kernel [half - weight] = kernel [half + weight] = Math.Exp (-x * x / 2);  
Magic Number,breinstormin.tools.image.Filters,InvertFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\InvertFilter.cs,InvertImage,The following statement contains a magic number: for (int i = 0' l = b.Length; i < l; i += 4) {  	b [i] = (byte)(255 - b [i]);  	// b  	b [i + 1] = (byte)(255 - b [i + 1]);  	// g  	b [i + 2] = (byte)(255 - b [i + 2]);  	// r  }  
Magic Number,breinstormin.tools.image.Filters,InvertFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\InvertFilter.cs,InvertImage,The following statement contains a magic number: for (int i = 0' l = b.Length; i < l; i += 4) {  	b [i] = (byte)(255 - b [i]);  	// b  	b [i + 1] = (byte)(255 - b [i + 1]);  	// g  	b [i + 2] = (byte)(255 - b [i + 2]);  	// r  }  
Magic Number,breinstormin.tools.image.Filters,InvertFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\InvertFilter.cs,InvertImage,The following statement contains a magic number: for (int i = 0' l = b.Length; i < l; i += 4) {  	b [i] = (byte)(255 - b [i]);  	// b  	b [i + 1] = (byte)(255 - b [i + 1]);  	// g  	b [i + 2] = (byte)(255 - b [i + 2]);  	// r  }  
Magic Number,breinstormin.tools.image.Filters,InvertFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\InvertFilter.cs,InvertImage,The following statement contains a magic number: for (int i = 0' l = b.Length; i < l; i += 4) {  	b [i] = (byte)(255 - b [i]);  	// b  	b [i + 1] = (byte)(255 - b [i + 1]);  	// g  	b [i + 2] = (byte)(255 - b [i + 2]);  	// r  }  
Magic Number,breinstormin.tools.image.Filters,InvertFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\InvertFilter.cs,InvertImage,The following statement contains a magic number: for (int i = 0' l = b.Length; i < l; i += 4) {  	b [i] = (byte)(255 - b [i]);  	// b  	b [i + 1] = (byte)(255 - b [i + 1]);  	// g  	b [i + 2] = (byte)(255 - b [i + 2]);  	// r  }  
Magic Number,breinstormin.tools.image.Filters,InvertFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\InvertFilter.cs,InvertImage,The following statement contains a magic number: for (int i = 0' l = b.Length; i < l; i += 4) {  	b [i] = (byte)(255 - b [i]);  	// b  	b [i + 1] = (byte)(255 - b [i + 1]);  	// g  	b [i + 2] = (byte)(255 - b [i + 2]);  	// r  }  
Magic Number,breinstormin.tools.image.Filters,InvertFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\InvertFilter.cs,InvertImage,The following statement contains a magic number: i += 4
Magic Number,breinstormin.tools.image.Filters,InvertFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\InvertFilter.cs,InvertImage,The following statement contains a magic number: b [i] = (byte)(255 - b [i]);  
Magic Number,breinstormin.tools.image.Filters,InvertFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\InvertFilter.cs,InvertImage,The following statement contains a magic number: b [i + 1] = (byte)(255 - b [i + 1]);  
Magic Number,breinstormin.tools.image.Filters,InvertFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\InvertFilter.cs,InvertImage,The following statement contains a magic number: b [i + 2] = (byte)(255 - b [i + 2]);  
Magic Number,breinstormin.tools.image.Filters,InvertFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\InvertFilter.cs,InvertImage,The following statement contains a magic number: b [i + 2] = (byte)(255 - b [i + 2]);  
Magic Number,breinstormin.tools.image.Filters,InvertFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\InvertFilter.cs,InvertImage,The following statement contains a magic number: b [i + 2] = (byte)(255 - b [i + 2]);  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: for (int x = 0' l = image.Width; x < l; x++) {  	for (int y = 0' k = image.Height; y < k; y++) {  		// Apply difference of gaussian blur filter  		b = src [i] + (int)((src [i] - dest [i]) * amount);  		g = src [i + 1] + (int)((src [i + 1] - dest [i + 1]) * amount);  		r = src [i + 2] + (int)((src [i + 2] - dest [i + 2]) * amount);  		// Keep inside range 0 to 255  		if (r < 0)  			r = 0;  		else if (r > 255)  			r = 255;  		if (g < 0)  			g = 0;  		else if (g > 255)  			g = 255;  		if (b < 0)  			b = 0;  		else if (b > 255)  			b = 255;  		// Write back final bytes  		dest [i] = (byte)b;  		dest [i + 1] = (byte)g;  		dest [i + 2] = (byte)r;  		i += 4;  	}  }  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: for (int x = 0' l = image.Width; x < l; x++) {  	for (int y = 0' k = image.Height; y < k; y++) {  		// Apply difference of gaussian blur filter  		b = src [i] + (int)((src [i] - dest [i]) * amount);  		g = src [i + 1] + (int)((src [i + 1] - dest [i + 1]) * amount);  		r = src [i + 2] + (int)((src [i + 2] - dest [i + 2]) * amount);  		// Keep inside range 0 to 255  		if (r < 0)  			r = 0;  		else if (r > 255)  			r = 255;  		if (g < 0)  			g = 0;  		else if (g > 255)  			g = 255;  		if (b < 0)  			b = 0;  		else if (b > 255)  			b = 255;  		// Write back final bytes  		dest [i] = (byte)b;  		dest [i + 1] = (byte)g;  		dest [i + 2] = (byte)r;  		i += 4;  	}  }  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: for (int x = 0' l = image.Width; x < l; x++) {  	for (int y = 0' k = image.Height; y < k; y++) {  		// Apply difference of gaussian blur filter  		b = src [i] + (int)((src [i] - dest [i]) * amount);  		g = src [i + 1] + (int)((src [i + 1] - dest [i + 1]) * amount);  		r = src [i + 2] + (int)((src [i + 2] - dest [i + 2]) * amount);  		// Keep inside range 0 to 255  		if (r < 0)  			r = 0;  		else if (r > 255)  			r = 255;  		if (g < 0)  			g = 0;  		else if (g > 255)  			g = 255;  		if (b < 0)  			b = 0;  		else if (b > 255)  			b = 255;  		// Write back final bytes  		dest [i] = (byte)b;  		dest [i + 1] = (byte)g;  		dest [i + 2] = (byte)r;  		i += 4;  	}  }  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: for (int x = 0' l = image.Width; x < l; x++) {  	for (int y = 0' k = image.Height; y < k; y++) {  		// Apply difference of gaussian blur filter  		b = src [i] + (int)((src [i] - dest [i]) * amount);  		g = src [i + 1] + (int)((src [i + 1] - dest [i + 1]) * amount);  		r = src [i + 2] + (int)((src [i + 2] - dest [i + 2]) * amount);  		// Keep inside range 0 to 255  		if (r < 0)  			r = 0;  		else if (r > 255)  			r = 255;  		if (g < 0)  			g = 0;  		else if (g > 255)  			g = 255;  		if (b < 0)  			b = 0;  		else if (b > 255)  			b = 255;  		// Write back final bytes  		dest [i] = (byte)b;  		dest [i + 1] = (byte)g;  		dest [i + 2] = (byte)r;  		i += 4;  	}  }  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: for (int x = 0' l = image.Width; x < l; x++) {  	for (int y = 0' k = image.Height; y < k; y++) {  		// Apply difference of gaussian blur filter  		b = src [i] + (int)((src [i] - dest [i]) * amount);  		g = src [i + 1] + (int)((src [i + 1] - dest [i + 1]) * amount);  		r = src [i + 2] + (int)((src [i + 2] - dest [i + 2]) * amount);  		// Keep inside range 0 to 255  		if (r < 0)  			r = 0;  		else if (r > 255)  			r = 255;  		if (g < 0)  			g = 0;  		else if (g > 255)  			g = 255;  		if (b < 0)  			b = 0;  		else if (b > 255)  			b = 255;  		// Write back final bytes  		dest [i] = (byte)b;  		dest [i + 1] = (byte)g;  		dest [i + 2] = (byte)r;  		i += 4;  	}  }  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: for (int x = 0' l = image.Width; x < l; x++) {  	for (int y = 0' k = image.Height; y < k; y++) {  		// Apply difference of gaussian blur filter  		b = src [i] + (int)((src [i] - dest [i]) * amount);  		g = src [i + 1] + (int)((src [i + 1] - dest [i + 1]) * amount);  		r = src [i + 2] + (int)((src [i + 2] - dest [i + 2]) * amount);  		// Keep inside range 0 to 255  		if (r < 0)  			r = 0;  		else if (r > 255)  			r = 255;  		if (g < 0)  			g = 0;  		else if (g > 255)  			g = 255;  		if (b < 0)  			b = 0;  		else if (b > 255)  			b = 255;  		// Write back final bytes  		dest [i] = (byte)b;  		dest [i + 1] = (byte)g;  		dest [i + 2] = (byte)r;  		i += 4;  	}  }  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: for (int x = 0' l = image.Width; x < l; x++) {  	for (int y = 0' k = image.Height; y < k; y++) {  		// Apply difference of gaussian blur filter  		b = src [i] + (int)((src [i] - dest [i]) * amount);  		g = src [i + 1] + (int)((src [i + 1] - dest [i + 1]) * amount);  		r = src [i + 2] + (int)((src [i + 2] - dest [i + 2]) * amount);  		// Keep inside range 0 to 255  		if (r < 0)  			r = 0;  		else if (r > 255)  			r = 255;  		if (g < 0)  			g = 0;  		else if (g > 255)  			g = 255;  		if (b < 0)  			b = 0;  		else if (b > 255)  			b = 255;  		// Write back final bytes  		dest [i] = (byte)b;  		dest [i + 1] = (byte)g;  		dest [i + 2] = (byte)r;  		i += 4;  	}  }  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: for (int x = 0' l = image.Width; x < l; x++) {  	for (int y = 0' k = image.Height; y < k; y++) {  		// Apply difference of gaussian blur filter  		b = src [i] + (int)((src [i] - dest [i]) * amount);  		g = src [i + 1] + (int)((src [i + 1] - dest [i + 1]) * amount);  		r = src [i + 2] + (int)((src [i + 2] - dest [i + 2]) * amount);  		// Keep inside range 0 to 255  		if (r < 0)  			r = 0;  		else if (r > 255)  			r = 255;  		if (g < 0)  			g = 0;  		else if (g > 255)  			g = 255;  		if (b < 0)  			b = 0;  		else if (b > 255)  			b = 255;  		// Write back final bytes  		dest [i] = (byte)b;  		dest [i + 1] = (byte)g;  		dest [i + 2] = (byte)r;  		i += 4;  	}  }  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: for (int x = 0' l = image.Width; x < l; x++) {  	for (int y = 0' k = image.Height; y < k; y++) {  		// Apply difference of gaussian blur filter  		b = src [i] + (int)((src [i] - dest [i]) * amount);  		g = src [i + 1] + (int)((src [i + 1] - dest [i + 1]) * amount);  		r = src [i + 2] + (int)((src [i + 2] - dest [i + 2]) * amount);  		// Keep inside range 0 to 255  		if (r < 0)  			r = 0;  		else if (r > 255)  			r = 255;  		if (g < 0)  			g = 0;  		else if (g > 255)  			g = 255;  		if (b < 0)  			b = 0;  		else if (b > 255)  			b = 255;  		// Write back final bytes  		dest [i] = (byte)b;  		dest [i + 1] = (byte)g;  		dest [i + 2] = (byte)r;  		i += 4;  	}  }  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: for (int x = 0' l = image.Width; x < l; x++) {  	for (int y = 0' k = image.Height; y < k; y++) {  		// Apply difference of gaussian blur filter  		b = src [i] + (int)((src [i] - dest [i]) * amount);  		g = src [i + 1] + (int)((src [i + 1] - dest [i + 1]) * amount);  		r = src [i + 2] + (int)((src [i + 2] - dest [i + 2]) * amount);  		// Keep inside range 0 to 255  		if (r < 0)  			r = 0;  		else if (r > 255)  			r = 255;  		if (g < 0)  			g = 0;  		else if (g > 255)  			g = 255;  		if (b < 0)  			b = 0;  		else if (b > 255)  			b = 255;  		// Write back final bytes  		dest [i] = (byte)b;  		dest [i + 1] = (byte)g;  		dest [i + 2] = (byte)r;  		i += 4;  	}  }  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: for (int x = 0' l = image.Width; x < l; x++) {  	for (int y = 0' k = image.Height; y < k; y++) {  		// Apply difference of gaussian blur filter  		b = src [i] + (int)((src [i] - dest [i]) * amount);  		g = src [i + 1] + (int)((src [i + 1] - dest [i + 1]) * amount);  		r = src [i + 2] + (int)((src [i + 2] - dest [i + 2]) * amount);  		// Keep inside range 0 to 255  		if (r < 0)  			r = 0;  		else if (r > 255)  			r = 255;  		if (g < 0)  			g = 0;  		else if (g > 255)  			g = 255;  		if (b < 0)  			b = 0;  		else if (b > 255)  			b = 255;  		// Write back final bytes  		dest [i] = (byte)b;  		dest [i + 1] = (byte)g;  		dest [i + 2] = (byte)r;  		i += 4;  	}  }  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: for (int y = 0' k = image.Height; y < k; y++) {  	// Apply difference of gaussian blur filter  	b = src [i] + (int)((src [i] - dest [i]) * amount);  	g = src [i + 1] + (int)((src [i + 1] - dest [i + 1]) * amount);  	r = src [i + 2] + (int)((src [i + 2] - dest [i + 2]) * amount);  	// Keep inside range 0 to 255  	if (r < 0)  		r = 0;  	else if (r > 255)  		r = 255;  	if (g < 0)  		g = 0;  	else if (g > 255)  		g = 255;  	if (b < 0)  		b = 0;  	else if (b > 255)  		b = 255;  	// Write back final bytes  	dest [i] = (byte)b;  	dest [i + 1] = (byte)g;  	dest [i + 2] = (byte)r;  	i += 4;  }  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: for (int y = 0' k = image.Height; y < k; y++) {  	// Apply difference of gaussian blur filter  	b = src [i] + (int)((src [i] - dest [i]) * amount);  	g = src [i + 1] + (int)((src [i + 1] - dest [i + 1]) * amount);  	r = src [i + 2] + (int)((src [i + 2] - dest [i + 2]) * amount);  	// Keep inside range 0 to 255  	if (r < 0)  		r = 0;  	else if (r > 255)  		r = 255;  	if (g < 0)  		g = 0;  	else if (g > 255)  		g = 255;  	if (b < 0)  		b = 0;  	else if (b > 255)  		b = 255;  	// Write back final bytes  	dest [i] = (byte)b;  	dest [i + 1] = (byte)g;  	dest [i + 2] = (byte)r;  	i += 4;  }  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: for (int y = 0' k = image.Height; y < k; y++) {  	// Apply difference of gaussian blur filter  	b = src [i] + (int)((src [i] - dest [i]) * amount);  	g = src [i + 1] + (int)((src [i + 1] - dest [i + 1]) * amount);  	r = src [i + 2] + (int)((src [i + 2] - dest [i + 2]) * amount);  	// Keep inside range 0 to 255  	if (r < 0)  		r = 0;  	else if (r > 255)  		r = 255;  	if (g < 0)  		g = 0;  	else if (g > 255)  		g = 255;  	if (b < 0)  		b = 0;  	else if (b > 255)  		b = 255;  	// Write back final bytes  	dest [i] = (byte)b;  	dest [i + 1] = (byte)g;  	dest [i + 2] = (byte)r;  	i += 4;  }  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: for (int y = 0' k = image.Height; y < k; y++) {  	// Apply difference of gaussian blur filter  	b = src [i] + (int)((src [i] - dest [i]) * amount);  	g = src [i + 1] + (int)((src [i + 1] - dest [i + 1]) * amount);  	r = src [i + 2] + (int)((src [i + 2] - dest [i + 2]) * amount);  	// Keep inside range 0 to 255  	if (r < 0)  		r = 0;  	else if (r > 255)  		r = 255;  	if (g < 0)  		g = 0;  	else if (g > 255)  		g = 255;  	if (b < 0)  		b = 0;  	else if (b > 255)  		b = 255;  	// Write back final bytes  	dest [i] = (byte)b;  	dest [i + 1] = (byte)g;  	dest [i + 2] = (byte)r;  	i += 4;  }  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: for (int y = 0' k = image.Height; y < k; y++) {  	// Apply difference of gaussian blur filter  	b = src [i] + (int)((src [i] - dest [i]) * amount);  	g = src [i + 1] + (int)((src [i + 1] - dest [i + 1]) * amount);  	r = src [i + 2] + (int)((src [i + 2] - dest [i + 2]) * amount);  	// Keep inside range 0 to 255  	if (r < 0)  		r = 0;  	else if (r > 255)  		r = 255;  	if (g < 0)  		g = 0;  	else if (g > 255)  		g = 255;  	if (b < 0)  		b = 0;  	else if (b > 255)  		b = 255;  	// Write back final bytes  	dest [i] = (byte)b;  	dest [i + 1] = (byte)g;  	dest [i + 2] = (byte)r;  	i += 4;  }  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: for (int y = 0' k = image.Height; y < k; y++) {  	// Apply difference of gaussian blur filter  	b = src [i] + (int)((src [i] - dest [i]) * amount);  	g = src [i + 1] + (int)((src [i + 1] - dest [i + 1]) * amount);  	r = src [i + 2] + (int)((src [i + 2] - dest [i + 2]) * amount);  	// Keep inside range 0 to 255  	if (r < 0)  		r = 0;  	else if (r > 255)  		r = 255;  	if (g < 0)  		g = 0;  	else if (g > 255)  		g = 255;  	if (b < 0)  		b = 0;  	else if (b > 255)  		b = 255;  	// Write back final bytes  	dest [i] = (byte)b;  	dest [i + 1] = (byte)g;  	dest [i + 2] = (byte)r;  	i += 4;  }  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: for (int y = 0' k = image.Height; y < k; y++) {  	// Apply difference of gaussian blur filter  	b = src [i] + (int)((src [i] - dest [i]) * amount);  	g = src [i + 1] + (int)((src [i + 1] - dest [i + 1]) * amount);  	r = src [i + 2] + (int)((src [i + 2] - dest [i + 2]) * amount);  	// Keep inside range 0 to 255  	if (r < 0)  		r = 0;  	else if (r > 255)  		r = 255;  	if (g < 0)  		g = 0;  	else if (g > 255)  		g = 255;  	if (b < 0)  		b = 0;  	else if (b > 255)  		b = 255;  	// Write back final bytes  	dest [i] = (byte)b;  	dest [i + 1] = (byte)g;  	dest [i + 2] = (byte)r;  	i += 4;  }  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: for (int y = 0' k = image.Height; y < k; y++) {  	// Apply difference of gaussian blur filter  	b = src [i] + (int)((src [i] - dest [i]) * amount);  	g = src [i + 1] + (int)((src [i + 1] - dest [i + 1]) * amount);  	r = src [i + 2] + (int)((src [i + 2] - dest [i + 2]) * amount);  	// Keep inside range 0 to 255  	if (r < 0)  		r = 0;  	else if (r > 255)  		r = 255;  	if (g < 0)  		g = 0;  	else if (g > 255)  		g = 255;  	if (b < 0)  		b = 0;  	else if (b > 255)  		b = 255;  	// Write back final bytes  	dest [i] = (byte)b;  	dest [i + 1] = (byte)g;  	dest [i + 2] = (byte)r;  	i += 4;  }  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: for (int y = 0' k = image.Height; y < k; y++) {  	// Apply difference of gaussian blur filter  	b = src [i] + (int)((src [i] - dest [i]) * amount);  	g = src [i + 1] + (int)((src [i + 1] - dest [i + 1]) * amount);  	r = src [i + 2] + (int)((src [i + 2] - dest [i + 2]) * amount);  	// Keep inside range 0 to 255  	if (r < 0)  		r = 0;  	else if (r > 255)  		r = 255;  	if (g < 0)  		g = 0;  	else if (g > 255)  		g = 255;  	if (b < 0)  		b = 0;  	else if (b > 255)  		b = 255;  	// Write back final bytes  	dest [i] = (byte)b;  	dest [i + 1] = (byte)g;  	dest [i + 2] = (byte)r;  	i += 4;  }  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: for (int y = 0' k = image.Height; y < k; y++) {  	// Apply difference of gaussian blur filter  	b = src [i] + (int)((src [i] - dest [i]) * amount);  	g = src [i + 1] + (int)((src [i + 1] - dest [i + 1]) * amount);  	r = src [i + 2] + (int)((src [i + 2] - dest [i + 2]) * amount);  	// Keep inside range 0 to 255  	if (r < 0)  		r = 0;  	else if (r > 255)  		r = 255;  	if (g < 0)  		g = 0;  	else if (g > 255)  		g = 255;  	if (b < 0)  		b = 0;  	else if (b > 255)  		b = 255;  	// Write back final bytes  	dest [i] = (byte)b;  	dest [i + 1] = (byte)g;  	dest [i + 2] = (byte)r;  	i += 4;  }  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: for (int y = 0' k = image.Height; y < k; y++) {  	// Apply difference of gaussian blur filter  	b = src [i] + (int)((src [i] - dest [i]) * amount);  	g = src [i + 1] + (int)((src [i + 1] - dest [i + 1]) * amount);  	r = src [i + 2] + (int)((src [i + 2] - dest [i + 2]) * amount);  	// Keep inside range 0 to 255  	if (r < 0)  		r = 0;  	else if (r > 255)  		r = 255;  	if (g < 0)  		g = 0;  	else if (g > 255)  		g = 255;  	if (b < 0)  		b = 0;  	else if (b > 255)  		b = 255;  	// Write back final bytes  	dest [i] = (byte)b;  	dest [i + 1] = (byte)g;  	dest [i + 2] = (byte)r;  	i += 4;  }  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: r = src [i + 2] + (int)((src [i + 2] - dest [i + 2]) * amount);  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: r = src [i + 2] + (int)((src [i + 2] - dest [i + 2]) * amount);  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: r = src [i + 2] + (int)((src [i + 2] - dest [i + 2]) * amount);  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: if (r < 0)  	r = 0;  else if (r > 255)  	r = 255;  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: if (r < 0)  	r = 0;  else if (r > 255)  	r = 255;  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: if (r > 255)  	r = 255;  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: if (r > 255)  	r = 255;  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: r = 255;  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: if (g < 0)  	g = 0;  else if (g > 255)  	g = 255;  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: if (g < 0)  	g = 0;  else if (g > 255)  	g = 255;  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: if (g > 255)  	g = 255;  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: if (g > 255)  	g = 255;  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: g = 255;  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: if (b < 0)  	b = 0;  else if (b > 255)  	b = 255;  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: if (b < 0)  	b = 0;  else if (b > 255)  	b = 255;  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: if (b > 255)  	b = 255;  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: if (b > 255)  	b = 255;  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: b = 255;  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: dest [i + 2] = (byte)r;  
Magic Number,breinstormin.tools.image.Filters,UnsharpMaskFilter,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\image\Filters\UnsharpMaskFilter.cs,Sharpen,The following statement contains a magic number: i += 4;  
Magic Number,breinstormin.tools.log,_Log,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\log\_Log.cs,DoFlush,The following statement contains a magic number: System.Threading.Thread.Sleep (this._LogWaitSeconds * 1000);  
Magic Number,breinstormin.tools.log,_Log,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\log\_Log.cs,DoFlush,The following statement contains a magic number: do {  	//Console.WriteLine("Empieza flush " & Me._LogName)   	this._MessagesToFlush = false;  	this.Flush ();  	//Console.WriteLine("Acaba flush " & Me._LogName)   	System.Threading.Thread.Sleep (this._LogWaitSeconds * 1000);  	if (!this._MessagesToFlush) {  		this._Flushing = false;  		// Volvemos a comprobar que no han entrado mensajes por escribir antes de salir del flush   		if (!this._MessagesToFlush) {  			break;  		}  		else {  			this._Flushing = true;  		}  	}  }  //Console.WriteLine("Sale del flush " & Me._LogName)   while (true);  
Magic Number,breinstormin.tools.log,_Log,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\log\_Log.cs,DoFlush,The following statement contains a magic number: System.Threading.Thread.Sleep (this._LogWaitSeconds * 1000);  
Magic Number,breinstormin.tools.log,_Log,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\log\_Log.cs,_GetLogWaitSeconds,The following statement contains a magic number: try {  	logConfig = System.Configuration.ConfigurationManager.AppSettings [this._LogName + ".LogWaitSeconds"];  	if (logConfig == null) {  		logConfig = System.Configuration.ConfigurationManager.AppSettings ["LogMgr.LogWaitSeconds"];  	}  	if ((logConfig != null)) {  		return Convert.ToInt16 (logConfig);  	}  	else {  		return 3;  	}  }  catch {  	return 3;  }  
Magic Number,breinstormin.tools.log,_Log,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\log\_Log.cs,_GetLogWaitSeconds,The following statement contains a magic number: try {  	logConfig = System.Configuration.ConfigurationManager.AppSettings [this._LogName + ".LogWaitSeconds"];  	if (logConfig == null) {  		logConfig = System.Configuration.ConfigurationManager.AppSettings ["LogMgr.LogWaitSeconds"];  	}  	if ((logConfig != null)) {  		return Convert.ToInt16 (logConfig);  	}  	else {  		return 3;  	}  }  catch {  	return 3;  }  
Magic Number,breinstormin.tools.log,_Log,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\log\_Log.cs,_GetLogWaitSeconds,The following statement contains a magic number: if ((logConfig != null)) {  	return Convert.ToInt16 (logConfig);  }  else {  	return 3;  }  
Magic Number,breinstormin.tools.log,_Log,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\log\_Log.cs,_GetLogWaitSeconds,The following statement contains a magic number: return 3;  
Magic Number,breinstormin.tools.log,_Log,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\log\_Log.cs,_GetLogWaitSeconds,The following statement contains a magic number: return 3;  
Magic Number,breinstormin.tools.log,_Log,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\log\_Log.cs,_GetMaxQueueLength,The following statement contains a magic number: try {  	logConfig = System.Configuration.ConfigurationManager.AppSettings [this._LogName + ".MaxLogQueueLength"];  	if (logConfig == null) {  		logConfig = System.Configuration.ConfigurationManager.AppSettings ["LogMgr.MaxLogQueueLength"];  	}  	if ((logConfig != null)) {  		return Convert.ToInt16 (logConfig);  	}  	else {  		return 100000;  	}  }  catch {  	return 100000;  }  
Magic Number,breinstormin.tools.log,_Log,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\log\_Log.cs,_GetMaxQueueLength,The following statement contains a magic number: try {  	logConfig = System.Configuration.ConfigurationManager.AppSettings [this._LogName + ".MaxLogQueueLength"];  	if (logConfig == null) {  		logConfig = System.Configuration.ConfigurationManager.AppSettings ["LogMgr.MaxLogQueueLength"];  	}  	if ((logConfig != null)) {  		return Convert.ToInt16 (logConfig);  	}  	else {  		return 100000;  	}  }  catch {  	return 100000;  }  
Magic Number,breinstormin.tools.log,_Log,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\log\_Log.cs,_GetMaxQueueLength,The following statement contains a magic number: if ((logConfig != null)) {  	return Convert.ToInt16 (logConfig);  }  else {  	return 100000;  }  
Magic Number,breinstormin.tools.log,_Log,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\log\_Log.cs,_GetMaxQueueLength,The following statement contains a magic number: return 100000;  
Magic Number,breinstormin.tools.log,_Log,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\log\_Log.cs,_GetMaxQueueLength,The following statement contains a magic number: return 100000;  
Magic Number,breinstormin.tools.syndicate,RSSEvents,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\syndicate\RSSEvents.cs,getHTMLOutput,The following statement contains a magic number: while (st.Count > 0 && posts > 0) {  	Rss.RssItem rit = st.Pop ();  	string rpost = "";  	rpost = post.Replace ("%titulo%"' rit.Title);  	rpost = rpost.Replace ("%usuario%"' rit.Author);  	rpost = rpost.Replace ("%fecha%"' rit.PubDate.AddHours (-2).ToString ("dddd' dd/MM/yyyy HH:mm"));  	rpost = rpost.Replace ("%entry%"' rit.Description);  	html += rpost + "\r\n";  	--posts;  }  
Magic Number,breinstormin.tools.syndicate,RSSEvents,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\syndicate\RSSEvents.cs,getHTMLOutput,The following statement contains a magic number: rpost = rpost.Replace ("%fecha%"' rit.PubDate.AddHours (-2).ToString ("dddd' dd/MM/yyyy HH:mm"));  
Magic Number,breinstormin.tools.syndicate,RSSEvents,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\syndicate\RSSEvents.cs,getHTMLOutputAll,The following statement contains a magic number: while (st.Count > 0) {  	Rss.RssItem rit = st.Pop ();  	string rpost = "";  	rpost = post.Replace ("%titulo%"' rit.Title);  	rpost = rpost.Replace ("%usuario%"' rit.Author);  	rpost = rpost.Replace ("%fecha%"' rit.PubDate.AddHours (-2).ToString ("dddd' dd/MM/yyyy HH:mm"));  	rpost = rpost.Replace ("%entry%"' rit.Description);  	html += rpost + "\r\n";  	//--posts;  }  
Magic Number,breinstormin.tools.syndicate,RSSEvents,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\syndicate\RSSEvents.cs,getHTMLOutputAll,The following statement contains a magic number: rpost = rpost.Replace ("%fecha%"' rit.PubDate.AddHours (-2).ToString ("dddd' dd/MM/yyyy HH:mm"));  
Magic Number,DotNet.Tools.TerminalServer,ClientDisplay,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\ClientDisplay.cs,GetBitsPerPixel,The following statement contains a magic number: switch (colorDepth) {  case 1:  	return 4;  case 2:  	return 8;  case 4:  	return 16;  case 8:  	return 24;  case 16:  	return 15;  }  
Magic Number,DotNet.Tools.TerminalServer,ClientDisplay,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\ClientDisplay.cs,GetBitsPerPixel,The following statement contains a magic number: switch (colorDepth) {  case 1:  	return 4;  case 2:  	return 8;  case 4:  	return 16;  case 8:  	return 24;  case 16:  	return 15;  }  
Magic Number,DotNet.Tools.TerminalServer,ClientDisplay,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\ClientDisplay.cs,GetBitsPerPixel,The following statement contains a magic number: switch (colorDepth) {  case 1:  	return 4;  case 2:  	return 8;  case 4:  	return 16;  case 8:  	return 24;  case 16:  	return 15;  }  
Magic Number,DotNet.Tools.TerminalServer,ClientDisplay,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\ClientDisplay.cs,GetBitsPerPixel,The following statement contains a magic number: switch (colorDepth) {  case 1:  	return 4;  case 2:  	return 8;  case 4:  	return 16;  case 8:  	return 24;  case 16:  	return 15;  }  
Magic Number,DotNet.Tools.TerminalServer,ClientDisplay,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\ClientDisplay.cs,GetBitsPerPixel,The following statement contains a magic number: switch (colorDepth) {  case 1:  	return 4;  case 2:  	return 8;  case 4:  	return 16;  case 8:  	return 24;  case 16:  	return 15;  }  
Magic Number,DotNet.Tools.TerminalServer,ClientDisplay,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\ClientDisplay.cs,GetBitsPerPixel,The following statement contains a magic number: switch (colorDepth) {  case 1:  	return 4;  case 2:  	return 8;  case 4:  	return 16;  case 8:  	return 24;  case 16:  	return 15;  }  
Magic Number,DotNet.Tools.TerminalServer,ClientDisplay,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\ClientDisplay.cs,GetBitsPerPixel,The following statement contains a magic number: switch (colorDepth) {  case 1:  	return 4;  case 2:  	return 8;  case 4:  	return 16;  case 8:  	return 24;  case 16:  	return 15;  }  
Magic Number,DotNet.Tools.TerminalServer,ClientDisplay,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\ClientDisplay.cs,GetBitsPerPixel,The following statement contains a magic number: switch (colorDepth) {  case 1:  	return 4;  case 2:  	return 8;  case 4:  	return 16;  case 8:  	return 24;  case 16:  	return 15;  }  
Magic Number,DotNet.Tools.TerminalServer,ClientDisplay,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\ClientDisplay.cs,GetBitsPerPixel,The following statement contains a magic number: switch (colorDepth) {  case 1:  	return 4;  case 2:  	return 8;  case 4:  	return 16;  case 8:  	return 24;  case 16:  	return 15;  }  
Magic Number,DotNet.Tools.TerminalServer,ClientDisplay,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\ClientDisplay.cs,GetBitsPerPixel,The following statement contains a magic number: return 4;  
Magic Number,DotNet.Tools.TerminalServer,ClientDisplay,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\ClientDisplay.cs,GetBitsPerPixel,The following statement contains a magic number: return 8;  
Magic Number,DotNet.Tools.TerminalServer,ClientDisplay,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\ClientDisplay.cs,GetBitsPerPixel,The following statement contains a magic number: return 16;  
Magic Number,DotNet.Tools.TerminalServer,ClientDisplay,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\ClientDisplay.cs,GetBitsPerPixel,The following statement contains a magic number: return 24;  
Magic Number,DotNet.Tools.TerminalServer,ClientDisplay,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\ClientDisplay.cs,GetBitsPerPixel,The following statement contains a magic number: return 15;  
Magic Number,breinstormin.tools.testing,tooltesting,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\testing\tooltesting.cs,testsblur,The following statement contains a magic number: foreach (string file in sources) {  	string filename = Guid.NewGuid ().ToString () + ".png";  	System.Drawing.Image img = System.Drawing.Image.FromFile (file);  	for (int i = 1; i < 10; i++) {  		try {  			image.breinImage blurred = new image.breinImage (img);  			blurred.ApplyFilter (new image.Filters.GaussianBlurFilter (i' 5));  			image.ImageMgr.SavePngImage (blurred.Image' blur + @"\" + i.ToString () + "_" + filename);  			Console.WriteLine ("Creado " + i.ToString () + "_" + filename);  		}  		catch (Exception ex) {  			Console.WriteLine (ex.ToString ());  		}  	}  }  
Magic Number,breinstormin.tools.testing,tooltesting,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\testing\tooltesting.cs,testsblur,The following statement contains a magic number: foreach (string file in sources) {  	string filename = Guid.NewGuid ().ToString () + ".png";  	System.Drawing.Image img = System.Drawing.Image.FromFile (file);  	for (int i = 1; i < 10; i++) {  		try {  			image.breinImage blurred = new image.breinImage (img);  			blurred.ApplyFilter (new image.Filters.GaussianBlurFilter (i' 5));  			image.ImageMgr.SavePngImage (blurred.Image' blur + @"\" + i.ToString () + "_" + filename);  			Console.WriteLine ("Creado " + i.ToString () + "_" + filename);  		}  		catch (Exception ex) {  			Console.WriteLine (ex.ToString ());  		}  	}  }  
Magic Number,breinstormin.tools.testing,tooltesting,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\testing\tooltesting.cs,testsblur,The following statement contains a magic number: for (int i = 1; i < 10; i++) {  	try {  		image.breinImage blurred = new image.breinImage (img);  		blurred.ApplyFilter (new image.Filters.GaussianBlurFilter (i' 5));  		image.ImageMgr.SavePngImage (blurred.Image' blur + @"\" + i.ToString () + "_" + filename);  		Console.WriteLine ("Creado " + i.ToString () + "_" + filename);  	}  	catch (Exception ex) {  		Console.WriteLine (ex.ToString ());  	}  }  
Magic Number,breinstormin.tools.testing,tooltesting,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\testing\tooltesting.cs,testsblur,The following statement contains a magic number: for (int i = 1; i < 10; i++) {  	try {  		image.breinImage blurred = new image.breinImage (img);  		blurred.ApplyFilter (new image.Filters.GaussianBlurFilter (i' 5));  		image.ImageMgr.SavePngImage (blurred.Image' blur + @"\" + i.ToString () + "_" + filename);  		Console.WriteLine ("Creado " + i.ToString () + "_" + filename);  	}  	catch (Exception ex) {  		Console.WriteLine (ex.ToString ());  	}  }  
Magic Number,breinstormin.tools.testing,tooltesting,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\testing\tooltesting.cs,testsblur,The following statement contains a magic number: try {  	image.breinImage blurred = new image.breinImage (img);  	blurred.ApplyFilter (new image.Filters.GaussianBlurFilter (i' 5));  	image.ImageMgr.SavePngImage (blurred.Image' blur + @"\" + i.ToString () + "_" + filename);  	Console.WriteLine ("Creado " + i.ToString () + "_" + filename);  }  catch (Exception ex) {  	Console.WriteLine (ex.ToString ());  }  
Magic Number,breinstormin.tools.testing,tooltesting,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\testing\tooltesting.cs,testsblur,The following statement contains a magic number: blurred.ApplyFilter (new image.Filters.GaussianBlurFilter (i' 5));  
Magic Number,breinstormin.tools.ui,dialogs,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\ui\dialogs.cs,InputBox,The following statement contains a magic number: label.SetBounds (9' 20' 372' 13);  
Magic Number,breinstormin.tools.ui,dialogs,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\ui\dialogs.cs,InputBox,The following statement contains a magic number: label.SetBounds (9' 20' 372' 13);  
Magic Number,breinstormin.tools.ui,dialogs,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\ui\dialogs.cs,InputBox,The following statement contains a magic number: label.SetBounds (9' 20' 372' 13);  
Magic Number,breinstormin.tools.ui,dialogs,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\ui\dialogs.cs,InputBox,The following statement contains a magic number: label.SetBounds (9' 20' 372' 13);  
Magic Number,breinstormin.tools.ui,dialogs,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\ui\dialogs.cs,InputBox,The following statement contains a magic number: textBox.SetBounds (12' 36' 372' 20);  
Magic Number,breinstormin.tools.ui,dialogs,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\ui\dialogs.cs,InputBox,The following statement contains a magic number: textBox.SetBounds (12' 36' 372' 20);  
Magic Number,breinstormin.tools.ui,dialogs,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\ui\dialogs.cs,InputBox,The following statement contains a magic number: textBox.SetBounds (12' 36' 372' 20);  
Magic Number,breinstormin.tools.ui,dialogs,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\ui\dialogs.cs,InputBox,The following statement contains a magic number: textBox.SetBounds (12' 36' 372' 20);  
Magic Number,breinstormin.tools.ui,dialogs,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\ui\dialogs.cs,InputBox,The following statement contains a magic number: buttonOk.SetBounds (228' 72' 75' 23);  
Magic Number,breinstormin.tools.ui,dialogs,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\ui\dialogs.cs,InputBox,The following statement contains a magic number: buttonOk.SetBounds (228' 72' 75' 23);  
Magic Number,breinstormin.tools.ui,dialogs,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\ui\dialogs.cs,InputBox,The following statement contains a magic number: buttonOk.SetBounds (228' 72' 75' 23);  
Magic Number,breinstormin.tools.ui,dialogs,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\ui\dialogs.cs,InputBox,The following statement contains a magic number: buttonOk.SetBounds (228' 72' 75' 23);  
Magic Number,breinstormin.tools.ui,dialogs,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\ui\dialogs.cs,InputBox,The following statement contains a magic number: buttonCancel.SetBounds (309' 72' 75' 23);  
Magic Number,breinstormin.tools.ui,dialogs,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\ui\dialogs.cs,InputBox,The following statement contains a magic number: buttonCancel.SetBounds (309' 72' 75' 23);  
Magic Number,breinstormin.tools.ui,dialogs,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\ui\dialogs.cs,InputBox,The following statement contains a magic number: buttonCancel.SetBounds (309' 72' 75' 23);  
Magic Number,breinstormin.tools.ui,dialogs,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\ui\dialogs.cs,InputBox,The following statement contains a magic number: buttonCancel.SetBounds (309' 72' 75' 23);  
Magic Number,breinstormin.tools.ui,dialogs,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\ui\dialogs.cs,InputBox,The following statement contains a magic number: form.ClientSize = new Size (396' 107);  
Magic Number,breinstormin.tools.ui,dialogs,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\ui\dialogs.cs,InputBox,The following statement contains a magic number: form.ClientSize = new Size (396' 107);  
Magic Number,breinstormin.tools.ui,dialogs,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\ui\dialogs.cs,InputBox,The following statement contains a magic number: form.ClientSize = new Size (Math.Max (300' label.Right + 10)' form.ClientSize.Height);  
Magic Number,breinstormin.tools.ui,dialogs,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\ui\dialogs.cs,InputBox,The following statement contains a magic number: form.ClientSize = new Size (Math.Max (300' label.Right + 10)' form.ClientSize.Height);  
Magic Number,breinstormin.tools.visualstudio,VSSolutionFilesInfo,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\visualstudio\VSSolutionFilesInfo.cs,Parse,The following statement contains a magic number: while (true) {  	line = parser.NextLine ().Trim ();  	if (line == "EndProjectSection")  		break;  	string[] splits = line.Split ('=');  	if (splits.Length != 2)  		parser.ThrowParserException ("Unexpected token.");  	files.Add (splits [0].Trim ());  }  
Magic Number,breinstormin.tools.visualstudio,VSSolutionFilesInfo,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\visualstudio\VSSolutionFilesInfo.cs,Parse,The following statement contains a magic number: if (splits.Length != 2)  	parser.ThrowParserException ("Unexpected token.");  
Magic Number,breinstormin.tools.web.css,HSV,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\HSV.cs,ToRGB,The following statement contains a magic number: if (s == 0) {  	r = v;  	g = v;  	b = v;  }  else {  	double p;  	double q;  	double t;  	double fractionalSector;  	int sectorNumber;  	double sectorPos;  	sectorPos = h / 60D;  	sectorNumber = (int)(Math.Floor (sectorPos));  	fractionalSector = sectorPos - sectorNumber;  	p = v * (1D - s);  	q = v * (1D - (s * fractionalSector));  	t = v * (1D - (s * (1D - fractionalSector)));  	switch (sectorNumber) {  	case 0:  		r = v;  		g = t;  		b = p;  		break;  	case 1:  		r = q;  		g = v;  		b = p;  		break;  	case 2:  		r = p;  		g = v;  		b = t;  		break;  	case 3:  		r = p;  		g = q;  		b = v;  		break;  	case 4:  		r = t;  		g = p;  		b = v;  		break;  	case 5:  		r = v;  		g = p;  		b = q;  		break;  	}  }  
Magic Number,breinstormin.tools.web.css,HSV,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\HSV.cs,ToRGB,The following statement contains a magic number: if (s == 0) {  	r = v;  	g = v;  	b = v;  }  else {  	double p;  	double q;  	double t;  	double fractionalSector;  	int sectorNumber;  	double sectorPos;  	sectorPos = h / 60D;  	sectorNumber = (int)(Math.Floor (sectorPos));  	fractionalSector = sectorPos - sectorNumber;  	p = v * (1D - s);  	q = v * (1D - (s * fractionalSector));  	t = v * (1D - (s * (1D - fractionalSector)));  	switch (sectorNumber) {  	case 0:  		r = v;  		g = t;  		b = p;  		break;  	case 1:  		r = q;  		g = v;  		b = p;  		break;  	case 2:  		r = p;  		g = v;  		b = t;  		break;  	case 3:  		r = p;  		g = q;  		b = v;  		break;  	case 4:  		r = t;  		g = p;  		b = v;  		break;  	case 5:  		r = v;  		g = p;  		b = q;  		break;  	}  }  
Magic Number,breinstormin.tools.web.css,HSV,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\HSV.cs,ToRGB,The following statement contains a magic number: if (s == 0) {  	r = v;  	g = v;  	b = v;  }  else {  	double p;  	double q;  	double t;  	double fractionalSector;  	int sectorNumber;  	double sectorPos;  	sectorPos = h / 60D;  	sectorNumber = (int)(Math.Floor (sectorPos));  	fractionalSector = sectorPos - sectorNumber;  	p = v * (1D - s);  	q = v * (1D - (s * fractionalSector));  	t = v * (1D - (s * (1D - fractionalSector)));  	switch (sectorNumber) {  	case 0:  		r = v;  		g = t;  		b = p;  		break;  	case 1:  		r = q;  		g = v;  		b = p;  		break;  	case 2:  		r = p;  		g = v;  		b = t;  		break;  	case 3:  		r = p;  		g = q;  		b = v;  		break;  	case 4:  		r = t;  		g = p;  		b = v;  		break;  	case 5:  		r = v;  		g = p;  		b = q;  		break;  	}  }  
Magic Number,breinstormin.tools.web.css,HSV,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\HSV.cs,ToRGB,The following statement contains a magic number: if (s == 0) {  	r = v;  	g = v;  	b = v;  }  else {  	double p;  	double q;  	double t;  	double fractionalSector;  	int sectorNumber;  	double sectorPos;  	sectorPos = h / 60D;  	sectorNumber = (int)(Math.Floor (sectorPos));  	fractionalSector = sectorPos - sectorNumber;  	p = v * (1D - s);  	q = v * (1D - (s * fractionalSector));  	t = v * (1D - (s * (1D - fractionalSector)));  	switch (sectorNumber) {  	case 0:  		r = v;  		g = t;  		b = p;  		break;  	case 1:  		r = q;  		g = v;  		b = p;  		break;  	case 2:  		r = p;  		g = v;  		b = t;  		break;  	case 3:  		r = p;  		g = q;  		b = v;  		break;  	case 4:  		r = t;  		g = p;  		b = v;  		break;  	case 5:  		r = v;  		g = p;  		b = q;  		break;  	}  }  
Magic Number,breinstormin.tools.web.css,HSV,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\HSV.cs,ToRGB,The following statement contains a magic number: switch (sectorNumber) {  case 0:  	r = v;  	g = t;  	b = p;  	break;  case 1:  	r = q;  	g = v;  	b = p;  	break;  case 2:  	r = p;  	g = v;  	b = t;  	break;  case 3:  	r = p;  	g = q;  	b = v;  	break;  case 4:  	r = t;  	g = p;  	b = v;  	break;  case 5:  	r = v;  	g = p;  	b = q;  	break;  }  
Magic Number,breinstormin.tools.web.css,HSV,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\HSV.cs,ToRGB,The following statement contains a magic number: switch (sectorNumber) {  case 0:  	r = v;  	g = t;  	b = p;  	break;  case 1:  	r = q;  	g = v;  	b = p;  	break;  case 2:  	r = p;  	g = v;  	b = t;  	break;  case 3:  	r = p;  	g = q;  	b = v;  	break;  case 4:  	r = t;  	g = p;  	b = v;  	break;  case 5:  	r = v;  	g = p;  	b = q;  	break;  }  
Magic Number,breinstormin.tools.web.css,HSV,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\HSV.cs,ToRGB,The following statement contains a magic number: switch (sectorNumber) {  case 0:  	r = v;  	g = t;  	b = p;  	break;  case 1:  	r = q;  	g = v;  	b = p;  	break;  case 2:  	r = p;  	g = v;  	b = t;  	break;  case 3:  	r = p;  	g = q;  	b = v;  	break;  case 4:  	r = t;  	g = p;  	b = v;  	break;  case 5:  	r = v;  	g = p;  	b = q;  	break;  }  
Magic Number,breinstormin.tools.web.css,HSV,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\HSV.cs,ToRGB,The following statement contains a magic number: switch (sectorNumber) {  case 0:  	r = v;  	g = t;  	b = p;  	break;  case 1:  	r = q;  	g = v;  	b = p;  	break;  case 2:  	r = p;  	g = v;  	b = t;  	break;  case 3:  	r = p;  	g = q;  	b = v;  	break;  case 4:  	r = t;  	g = p;  	b = v;  	break;  case 5:  	r = v;  	g = p;  	b = q;  	break;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,PartOfHex,The following statement contains a magic number: if (value.Length == 7) {  	return false;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,PartOfHex,The following statement contains a magic number: if (value.Length + la.val.Length > 7) {  	return false;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,CSS3,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,CSS3,The following statement contains a magic number: while (la.kind == 5 || la.kind == 6) {  	if (la.kind == 5) {  		Get ();  	}  	else {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,CSS3,The following statement contains a magic number: while (la.kind == 5 || la.kind == 6) {  	if (la.kind == 5) {  		Get ();  	}  	else {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,CSS3,The following statement contains a magic number: while (la.kind == 5 || la.kind == 6) {  	if (la.kind == 5) {  		Get ();  	}  	else {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,CSS3,The following statement contains a magic number: if (la.kind == 5) {  	Get ();  }  else {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,CSS3,The following statement contains a magic number: while (StartOf (1)) {  	if (StartOf (2)) {  		ruleset (out rset);  		CSSDoc.RuleSets.Add (rset);  	}  	else {  		directive (out dir);  		CSSDoc.Directives.Add (dir);  	}  	while (la.kind == 5 || la.kind == 6) {  		if (la.kind == 5) {  			Get ();  		}  		else {  			Get ();  		}  	}  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,CSS3,The following statement contains a magic number: while (StartOf (1)) {  	if (StartOf (2)) {  		ruleset (out rset);  		CSSDoc.RuleSets.Add (rset);  	}  	else {  		directive (out dir);  		CSSDoc.Directives.Add (dir);  	}  	while (la.kind == 5 || la.kind == 6) {  		if (la.kind == 5) {  			Get ();  		}  		else {  			Get ();  		}  	}  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,CSS3,The following statement contains a magic number: while (StartOf (1)) {  	if (StartOf (2)) {  		ruleset (out rset);  		CSSDoc.RuleSets.Add (rset);  	}  	else {  		directive (out dir);  		CSSDoc.Directives.Add (dir);  	}  	while (la.kind == 5 || la.kind == 6) {  		if (la.kind == 5) {  			Get ();  		}  		else {  			Get ();  		}  	}  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,CSS3,The following statement contains a magic number: while (StartOf (1)) {  	if (StartOf (2)) {  		ruleset (out rset);  		CSSDoc.RuleSets.Add (rset);  	}  	else {  		directive (out dir);  		CSSDoc.Directives.Add (dir);  	}  	while (la.kind == 5 || la.kind == 6) {  		if (la.kind == 5) {  			Get ();  		}  		else {  			Get ();  		}  	}  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,CSS3,The following statement contains a magic number: while (StartOf (1)) {  	if (StartOf (2)) {  		ruleset (out rset);  		CSSDoc.RuleSets.Add (rset);  	}  	else {  		directive (out dir);  		CSSDoc.Directives.Add (dir);  	}  	while (la.kind == 5 || la.kind == 6) {  		if (la.kind == 5) {  			Get ();  		}  		else {  			Get ();  		}  	}  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,CSS3,The following statement contains a magic number: if (StartOf (2)) {  	ruleset (out rset);  	CSSDoc.RuleSets.Add (rset);  }  else {  	directive (out dir);  	CSSDoc.Directives.Add (dir);  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,CSS3,The following statement contains a magic number: while (la.kind == 5 || la.kind == 6) {  	if (la.kind == 5) {  		Get ();  	}  	else {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,CSS3,The following statement contains a magic number: while (la.kind == 5 || la.kind == 6) {  	if (la.kind == 5) {  		Get ();  	}  	else {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,CSS3,The following statement contains a magic number: while (la.kind == 5 || la.kind == 6) {  	if (la.kind == 5) {  		Get ();  	}  	else {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,CSS3,The following statement contains a magic number: if (la.kind == 5) {  	Get ();  }  else {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,CSS3,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,ruleset,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,ruleset,The following statement contains a magic number: while (la.kind == 25) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	selector (out sel);  	rset.Selectors.Add (sel);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,ruleset,The following statement contains a magic number: while (la.kind == 25) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	selector (out sel);  	rset.Selectors.Add (sel);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,ruleset,The following statement contains a magic number: while (la.kind == 25) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	selector (out sel);  	rset.Selectors.Add (sel);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,ruleset,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,ruleset,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,ruleset,The following statement contains a magic number: Expect (26);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,ruleset,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,ruleset,The following statement contains a magic number: if (StartOf (3)) {  	declaration (out dec);  	rset.Declarations.Add (dec);  	while (la.kind == 4) {  		Get ();  	}  	while (la.kind == 27) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		if (la.val.Equals ("}")) {  			Get ();  			return;  		}  		declaration (out dec);  		rset.Declarations.Add (dec);  		while (la.kind == 4) {  			Get ();  		}  	}  	if (la.kind == 27) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,ruleset,The following statement contains a magic number: if (StartOf (3)) {  	declaration (out dec);  	rset.Declarations.Add (dec);  	while (la.kind == 4) {  		Get ();  	}  	while (la.kind == 27) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		if (la.val.Equals ("}")) {  			Get ();  			return;  		}  		declaration (out dec);  		rset.Declarations.Add (dec);  		while (la.kind == 4) {  			Get ();  		}  	}  	if (la.kind == 27) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,ruleset,The following statement contains a magic number: if (StartOf (3)) {  	declaration (out dec);  	rset.Declarations.Add (dec);  	while (la.kind == 4) {  		Get ();  	}  	while (la.kind == 27) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		if (la.val.Equals ("}")) {  			Get ();  			return;  		}  		declaration (out dec);  		rset.Declarations.Add (dec);  		while (la.kind == 4) {  			Get ();  		}  	}  	if (la.kind == 27) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,ruleset,The following statement contains a magic number: if (StartOf (3)) {  	declaration (out dec);  	rset.Declarations.Add (dec);  	while (la.kind == 4) {  		Get ();  	}  	while (la.kind == 27) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		if (la.val.Equals ("}")) {  			Get ();  			return;  		}  		declaration (out dec);  		rset.Declarations.Add (dec);  		while (la.kind == 4) {  			Get ();  		}  	}  	if (la.kind == 27) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,ruleset,The following statement contains a magic number: if (StartOf (3)) {  	declaration (out dec);  	rset.Declarations.Add (dec);  	while (la.kind == 4) {  		Get ();  	}  	while (la.kind == 27) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		if (la.val.Equals ("}")) {  			Get ();  			return;  		}  		declaration (out dec);  		rset.Declarations.Add (dec);  		while (la.kind == 4) {  			Get ();  		}  	}  	if (la.kind == 27) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,ruleset,The following statement contains a magic number: if (StartOf (3)) {  	declaration (out dec);  	rset.Declarations.Add (dec);  	while (la.kind == 4) {  		Get ();  	}  	while (la.kind == 27) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		if (la.val.Equals ("}")) {  			Get ();  			return;  		}  		declaration (out dec);  		rset.Declarations.Add (dec);  		while (la.kind == 4) {  			Get ();  		}  	}  	if (la.kind == 27) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,ruleset,The following statement contains a magic number: if (StartOf (3)) {  	declaration (out dec);  	rset.Declarations.Add (dec);  	while (la.kind == 4) {  		Get ();  	}  	while (la.kind == 27) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		if (la.val.Equals ("}")) {  			Get ();  			return;  		}  		declaration (out dec);  		rset.Declarations.Add (dec);  		while (la.kind == 4) {  			Get ();  		}  	}  	if (la.kind == 27) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,ruleset,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,ruleset,The following statement contains a magic number: while (la.kind == 27) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	if (la.val.Equals ("}")) {  		Get ();  		return;  	}  	declaration (out dec);  	rset.Declarations.Add (dec);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,ruleset,The following statement contains a magic number: while (la.kind == 27) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	if (la.val.Equals ("}")) {  		Get ();  		return;  	}  	declaration (out dec);  	rset.Declarations.Add (dec);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,ruleset,The following statement contains a magic number: while (la.kind == 27) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	if (la.val.Equals ("}")) {  		Get ();  		return;  	}  	declaration (out dec);  	rset.Declarations.Add (dec);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,ruleset,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,ruleset,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,ruleset,The following statement contains a magic number: if (la.kind == 27) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,ruleset,The following statement contains a magic number: if (la.kind == 27) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,ruleset,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,ruleset,The following statement contains a magic number: Expect (28);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,ruleset,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: Expect (23);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (la.kind == 24) {  	Get ();  	dir.Name += "-";  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (StartOf (4)) {  	if (StartOf (5)) {  		medium (out m);  		dir.Mediums.Add (m);  		while (la.kind == 4) {  			Get ();  		}  		while (la.kind == 25) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			medium (out m);  			dir.Mediums.Add (m);  			while (la.kind == 4) {  				Get ();  			}  		}  	}  	else {  		expr (out exp);  		dir.Expression = exp;  		while (la.kind == 4) {  			Get ();  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (StartOf (4)) {  	if (StartOf (5)) {  		medium (out m);  		dir.Mediums.Add (m);  		while (la.kind == 4) {  			Get ();  		}  		while (la.kind == 25) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			medium (out m);  			dir.Mediums.Add (m);  			while (la.kind == 4) {  				Get ();  			}  		}  	}  	else {  		expr (out exp);  		dir.Expression = exp;  		while (la.kind == 4) {  			Get ();  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (StartOf (4)) {  	if (StartOf (5)) {  		medium (out m);  		dir.Mediums.Add (m);  		while (la.kind == 4) {  			Get ();  		}  		while (la.kind == 25) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			medium (out m);  			dir.Mediums.Add (m);  			while (la.kind == 4) {  				Get ();  			}  		}  	}  	else {  		expr (out exp);  		dir.Expression = exp;  		while (la.kind == 4) {  			Get ();  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (StartOf (4)) {  	if (StartOf (5)) {  		medium (out m);  		dir.Mediums.Add (m);  		while (la.kind == 4) {  			Get ();  		}  		while (la.kind == 25) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			medium (out m);  			dir.Mediums.Add (m);  			while (la.kind == 4) {  				Get ();  			}  		}  	}  	else {  		expr (out exp);  		dir.Expression = exp;  		while (la.kind == 4) {  			Get ();  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (StartOf (4)) {  	if (StartOf (5)) {  		medium (out m);  		dir.Mediums.Add (m);  		while (la.kind == 4) {  			Get ();  		}  		while (la.kind == 25) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			medium (out m);  			dir.Mediums.Add (m);  			while (la.kind == 4) {  				Get ();  			}  		}  	}  	else {  		expr (out exp);  		dir.Expression = exp;  		while (la.kind == 4) {  			Get ();  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (StartOf (4)) {  	if (StartOf (5)) {  		medium (out m);  		dir.Mediums.Add (m);  		while (la.kind == 4) {  			Get ();  		}  		while (la.kind == 25) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			medium (out m);  			dir.Mediums.Add (m);  			while (la.kind == 4) {  				Get ();  			}  		}  	}  	else {  		expr (out exp);  		dir.Expression = exp;  		while (la.kind == 4) {  			Get ();  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (StartOf (4)) {  	if (StartOf (5)) {  		medium (out m);  		dir.Mediums.Add (m);  		while (la.kind == 4) {  			Get ();  		}  		while (la.kind == 25) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			medium (out m);  			dir.Mediums.Add (m);  			while (la.kind == 4) {  				Get ();  			}  		}  	}  	else {  		expr (out exp);  		dir.Expression = exp;  		while (la.kind == 4) {  			Get ();  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (StartOf (5)) {  	medium (out m);  	dir.Mediums.Add (m);  	while (la.kind == 4) {  		Get ();  	}  	while (la.kind == 25) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		medium (out m);  		dir.Mediums.Add (m);  		while (la.kind == 4) {  			Get ();  		}  	}  }  else {  	expr (out exp);  	dir.Expression = exp;  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (StartOf (5)) {  	medium (out m);  	dir.Mediums.Add (m);  	while (la.kind == 4) {  		Get ();  	}  	while (la.kind == 25) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		medium (out m);  		dir.Mediums.Add (m);  		while (la.kind == 4) {  			Get ();  		}  	}  }  else {  	expr (out exp);  	dir.Expression = exp;  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (StartOf (5)) {  	medium (out m);  	dir.Mediums.Add (m);  	while (la.kind == 4) {  		Get ();  	}  	while (la.kind == 25) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		medium (out m);  		dir.Mediums.Add (m);  		while (la.kind == 4) {  			Get ();  		}  	}  }  else {  	expr (out exp);  	dir.Expression = exp;  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (StartOf (5)) {  	medium (out m);  	dir.Mediums.Add (m);  	while (la.kind == 4) {  		Get ();  	}  	while (la.kind == 25) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		medium (out m);  		dir.Mediums.Add (m);  		while (la.kind == 4) {  			Get ();  		}  	}  }  else {  	expr (out exp);  	dir.Expression = exp;  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (StartOf (5)) {  	medium (out m);  	dir.Mediums.Add (m);  	while (la.kind == 4) {  		Get ();  	}  	while (la.kind == 25) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		medium (out m);  		dir.Mediums.Add (m);  		while (la.kind == 4) {  			Get ();  		}  	}  }  else {  	expr (out exp);  	dir.Expression = exp;  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (StartOf (5)) {  	medium (out m);  	dir.Mediums.Add (m);  	while (la.kind == 4) {  		Get ();  	}  	while (la.kind == 25) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		medium (out m);  		dir.Mediums.Add (m);  		while (la.kind == 4) {  			Get ();  		}  	}  }  else {  	expr (out exp);  	dir.Expression = exp;  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: while (la.kind == 25) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	medium (out m);  	dir.Mediums.Add (m);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: while (la.kind == 25) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	medium (out m);  	dir.Mediums.Add (m);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: while (la.kind == 25) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	medium (out m);  	dir.Mediums.Add (m);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (la.kind == 26) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (6)) {  		while (StartOf (1)) {  			if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  				declaration (out dec);  				dir.Declarations.Add (dec);  				while (la.kind == 4) {  					Get ();  				}  				while (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  					if (la.val.Equals ("}")) {  						Get ();  						return;  					}  					declaration (out dec);  					dir.Declarations.Add (dec);  					while (la.kind == 4) {  						Get ();  					}  				}  				if (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  				}  			}  			else if (StartOf (2)) {  				ruleset (out rset);  				dir.RuleSets.Add (rset);  				while (la.kind == 4) {  					Get ();  				}  			}  			else {  				directive (out dr);  				dir.Directives.Add (dr);  				while (la.kind == 4) {  					Get ();  				}  			}  		}  	}  	Expect (28);  	while (la.kind == 4) {  		Get ();  	}  }  else if (la.kind == 27) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  }  else  	SynErr (50);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (la.kind == 26) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (6)) {  		while (StartOf (1)) {  			if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  				declaration (out dec);  				dir.Declarations.Add (dec);  				while (la.kind == 4) {  					Get ();  				}  				while (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  					if (la.val.Equals ("}")) {  						Get ();  						return;  					}  					declaration (out dec);  					dir.Declarations.Add (dec);  					while (la.kind == 4) {  						Get ();  					}  				}  				if (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  				}  			}  			else if (StartOf (2)) {  				ruleset (out rset);  				dir.RuleSets.Add (rset);  				while (la.kind == 4) {  					Get ();  				}  			}  			else {  				directive (out dr);  				dir.Directives.Add (dr);  				while (la.kind == 4) {  					Get ();  				}  			}  		}  	}  	Expect (28);  	while (la.kind == 4) {  		Get ();  	}  }  else if (la.kind == 27) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  }  else  	SynErr (50);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (la.kind == 26) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (6)) {  		while (StartOf (1)) {  			if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  				declaration (out dec);  				dir.Declarations.Add (dec);  				while (la.kind == 4) {  					Get ();  				}  				while (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  					if (la.val.Equals ("}")) {  						Get ();  						return;  					}  					declaration (out dec);  					dir.Declarations.Add (dec);  					while (la.kind == 4) {  						Get ();  					}  				}  				if (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  				}  			}  			else if (StartOf (2)) {  				ruleset (out rset);  				dir.RuleSets.Add (rset);  				while (la.kind == 4) {  					Get ();  				}  			}  			else {  				directive (out dr);  				dir.Directives.Add (dr);  				while (la.kind == 4) {  					Get ();  				}  			}  		}  	}  	Expect (28);  	while (la.kind == 4) {  		Get ();  	}  }  else if (la.kind == 27) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  }  else  	SynErr (50);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (la.kind == 26) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (6)) {  		while (StartOf (1)) {  			if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  				declaration (out dec);  				dir.Declarations.Add (dec);  				while (la.kind == 4) {  					Get ();  				}  				while (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  					if (la.val.Equals ("}")) {  						Get ();  						return;  					}  					declaration (out dec);  					dir.Declarations.Add (dec);  					while (la.kind == 4) {  						Get ();  					}  				}  				if (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  				}  			}  			else if (StartOf (2)) {  				ruleset (out rset);  				dir.RuleSets.Add (rset);  				while (la.kind == 4) {  					Get ();  				}  			}  			else {  				directive (out dr);  				dir.Directives.Add (dr);  				while (la.kind == 4) {  					Get ();  				}  			}  		}  	}  	Expect (28);  	while (la.kind == 4) {  		Get ();  	}  }  else if (la.kind == 27) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  }  else  	SynErr (50);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (la.kind == 26) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (6)) {  		while (StartOf (1)) {  			if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  				declaration (out dec);  				dir.Declarations.Add (dec);  				while (la.kind == 4) {  					Get ();  				}  				while (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  					if (la.val.Equals ("}")) {  						Get ();  						return;  					}  					declaration (out dec);  					dir.Declarations.Add (dec);  					while (la.kind == 4) {  						Get ();  					}  				}  				if (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  				}  			}  			else if (StartOf (2)) {  				ruleset (out rset);  				dir.RuleSets.Add (rset);  				while (la.kind == 4) {  					Get ();  				}  			}  			else {  				directive (out dr);  				dir.Directives.Add (dr);  				while (la.kind == 4) {  					Get ();  				}  			}  		}  	}  	Expect (28);  	while (la.kind == 4) {  		Get ();  	}  }  else if (la.kind == 27) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  }  else  	SynErr (50);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (la.kind == 26) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (6)) {  		while (StartOf (1)) {  			if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  				declaration (out dec);  				dir.Declarations.Add (dec);  				while (la.kind == 4) {  					Get ();  				}  				while (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  					if (la.val.Equals ("}")) {  						Get ();  						return;  					}  					declaration (out dec);  					dir.Declarations.Add (dec);  					while (la.kind == 4) {  						Get ();  					}  				}  				if (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  				}  			}  			else if (StartOf (2)) {  				ruleset (out rset);  				dir.RuleSets.Add (rset);  				while (la.kind == 4) {  					Get ();  				}  			}  			else {  				directive (out dr);  				dir.Directives.Add (dr);  				while (la.kind == 4) {  					Get ();  				}  			}  		}  	}  	Expect (28);  	while (la.kind == 4) {  		Get ();  	}  }  else if (la.kind == 27) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  }  else  	SynErr (50);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (la.kind == 26) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (6)) {  		while (StartOf (1)) {  			if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  				declaration (out dec);  				dir.Declarations.Add (dec);  				while (la.kind == 4) {  					Get ();  				}  				while (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  					if (la.val.Equals ("}")) {  						Get ();  						return;  					}  					declaration (out dec);  					dir.Declarations.Add (dec);  					while (la.kind == 4) {  						Get ();  					}  				}  				if (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  				}  			}  			else if (StartOf (2)) {  				ruleset (out rset);  				dir.RuleSets.Add (rset);  				while (la.kind == 4) {  					Get ();  				}  			}  			else {  				directive (out dr);  				dir.Directives.Add (dr);  				while (la.kind == 4) {  					Get ();  				}  			}  		}  	}  	Expect (28);  	while (la.kind == 4) {  		Get ();  	}  }  else if (la.kind == 27) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  }  else  	SynErr (50);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (la.kind == 26) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (6)) {  		while (StartOf (1)) {  			if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  				declaration (out dec);  				dir.Declarations.Add (dec);  				while (la.kind == 4) {  					Get ();  				}  				while (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  					if (la.val.Equals ("}")) {  						Get ();  						return;  					}  					declaration (out dec);  					dir.Declarations.Add (dec);  					while (la.kind == 4) {  						Get ();  					}  				}  				if (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  				}  			}  			else if (StartOf (2)) {  				ruleset (out rset);  				dir.RuleSets.Add (rset);  				while (la.kind == 4) {  					Get ();  				}  			}  			else {  				directive (out dr);  				dir.Directives.Add (dr);  				while (la.kind == 4) {  					Get ();  				}  			}  		}  	}  	Expect (28);  	while (la.kind == 4) {  		Get ();  	}  }  else if (la.kind == 27) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  }  else  	SynErr (50);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (la.kind == 26) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (6)) {  		while (StartOf (1)) {  			if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  				declaration (out dec);  				dir.Declarations.Add (dec);  				while (la.kind == 4) {  					Get ();  				}  				while (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  					if (la.val.Equals ("}")) {  						Get ();  						return;  					}  					declaration (out dec);  					dir.Declarations.Add (dec);  					while (la.kind == 4) {  						Get ();  					}  				}  				if (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  				}  			}  			else if (StartOf (2)) {  				ruleset (out rset);  				dir.RuleSets.Add (rset);  				while (la.kind == 4) {  					Get ();  				}  			}  			else {  				directive (out dr);  				dir.Directives.Add (dr);  				while (la.kind == 4) {  					Get ();  				}  			}  		}  	}  	Expect (28);  	while (la.kind == 4) {  		Get ();  	}  }  else if (la.kind == 27) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  }  else  	SynErr (50);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (la.kind == 26) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (6)) {  		while (StartOf (1)) {  			if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  				declaration (out dec);  				dir.Declarations.Add (dec);  				while (la.kind == 4) {  					Get ();  				}  				while (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  					if (la.val.Equals ("}")) {  						Get ();  						return;  					}  					declaration (out dec);  					dir.Declarations.Add (dec);  					while (la.kind == 4) {  						Get ();  					}  				}  				if (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  				}  			}  			else if (StartOf (2)) {  				ruleset (out rset);  				dir.RuleSets.Add (rset);  				while (la.kind == 4) {  					Get ();  				}  			}  			else {  				directive (out dr);  				dir.Directives.Add (dr);  				while (la.kind == 4) {  					Get ();  				}  			}  		}  	}  	Expect (28);  	while (la.kind == 4) {  		Get ();  	}  }  else if (la.kind == 27) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  }  else  	SynErr (50);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (la.kind == 26) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (6)) {  		while (StartOf (1)) {  			if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  				declaration (out dec);  				dir.Declarations.Add (dec);  				while (la.kind == 4) {  					Get ();  				}  				while (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  					if (la.val.Equals ("}")) {  						Get ();  						return;  					}  					declaration (out dec);  					dir.Declarations.Add (dec);  					while (la.kind == 4) {  						Get ();  					}  				}  				if (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  				}  			}  			else if (StartOf (2)) {  				ruleset (out rset);  				dir.RuleSets.Add (rset);  				while (la.kind == 4) {  					Get ();  				}  			}  			else {  				directive (out dr);  				dir.Directives.Add (dr);  				while (la.kind == 4) {  					Get ();  				}  			}  		}  	}  	Expect (28);  	while (la.kind == 4) {  		Get ();  	}  }  else if (la.kind == 27) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  }  else  	SynErr (50);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (la.kind == 26) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (6)) {  		while (StartOf (1)) {  			if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  				declaration (out dec);  				dir.Declarations.Add (dec);  				while (la.kind == 4) {  					Get ();  				}  				while (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  					if (la.val.Equals ("}")) {  						Get ();  						return;  					}  					declaration (out dec);  					dir.Declarations.Add (dec);  					while (la.kind == 4) {  						Get ();  					}  				}  				if (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  				}  			}  			else if (StartOf (2)) {  				ruleset (out rset);  				dir.RuleSets.Add (rset);  				while (la.kind == 4) {  					Get ();  				}  			}  			else {  				directive (out dr);  				dir.Directives.Add (dr);  				while (la.kind == 4) {  					Get ();  				}  			}  		}  	}  	Expect (28);  	while (la.kind == 4) {  		Get ();  	}  }  else if (la.kind == 27) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  }  else  	SynErr (50);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (la.kind == 26) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (6)) {  		while (StartOf (1)) {  			if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  				declaration (out dec);  				dir.Declarations.Add (dec);  				while (la.kind == 4) {  					Get ();  				}  				while (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  					if (la.val.Equals ("}")) {  						Get ();  						return;  					}  					declaration (out dec);  					dir.Declarations.Add (dec);  					while (la.kind == 4) {  						Get ();  					}  				}  				if (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  				}  			}  			else if (StartOf (2)) {  				ruleset (out rset);  				dir.RuleSets.Add (rset);  				while (la.kind == 4) {  					Get ();  				}  			}  			else {  				directive (out dr);  				dir.Directives.Add (dr);  				while (la.kind == 4) {  					Get ();  				}  			}  		}  	}  	Expect (28);  	while (la.kind == 4) {  		Get ();  	}  }  else if (la.kind == 27) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  }  else  	SynErr (50);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (la.kind == 26) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (6)) {  		while (StartOf (1)) {  			if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  				declaration (out dec);  				dir.Declarations.Add (dec);  				while (la.kind == 4) {  					Get ();  				}  				while (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  					if (la.val.Equals ("}")) {  						Get ();  						return;  					}  					declaration (out dec);  					dir.Declarations.Add (dec);  					while (la.kind == 4) {  						Get ();  					}  				}  				if (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  				}  			}  			else if (StartOf (2)) {  				ruleset (out rset);  				dir.RuleSets.Add (rset);  				while (la.kind == 4) {  					Get ();  				}  			}  			else {  				directive (out dr);  				dir.Directives.Add (dr);  				while (la.kind == 4) {  					Get ();  				}  			}  		}  	}  	Expect (28);  	while (la.kind == 4) {  		Get ();  	}  }  else if (la.kind == 27) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  }  else  	SynErr (50);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (la.kind == 26) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (6)) {  		while (StartOf (1)) {  			if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  				declaration (out dec);  				dir.Declarations.Add (dec);  				while (la.kind == 4) {  					Get ();  				}  				while (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  					if (la.val.Equals ("}")) {  						Get ();  						return;  					}  					declaration (out dec);  					dir.Declarations.Add (dec);  					while (la.kind == 4) {  						Get ();  					}  				}  				if (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  				}  			}  			else if (StartOf (2)) {  				ruleset (out rset);  				dir.RuleSets.Add (rset);  				while (la.kind == 4) {  					Get ();  				}  			}  			else {  				directive (out dr);  				dir.Directives.Add (dr);  				while (la.kind == 4) {  					Get ();  				}  			}  		}  	}  	Expect (28);  	while (la.kind == 4) {  		Get ();  	}  }  else if (la.kind == 27) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  }  else  	SynErr (50);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (la.kind == 26) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (6)) {  		while (StartOf (1)) {  			if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  				declaration (out dec);  				dir.Declarations.Add (dec);  				while (la.kind == 4) {  					Get ();  				}  				while (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  					if (la.val.Equals ("}")) {  						Get ();  						return;  					}  					declaration (out dec);  					dir.Declarations.Add (dec);  					while (la.kind == 4) {  						Get ();  					}  				}  				if (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  				}  			}  			else if (StartOf (2)) {  				ruleset (out rset);  				dir.RuleSets.Add (rset);  				while (la.kind == 4) {  					Get ();  				}  			}  			else {  				directive (out dr);  				dir.Directives.Add (dr);  				while (la.kind == 4) {  					Get ();  				}  			}  		}  	}  	Expect (28);  	while (la.kind == 4) {  		Get ();  	}  }  else if (la.kind == 27) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  }  else  	SynErr (50);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (la.kind == 26) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (6)) {  		while (StartOf (1)) {  			if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  				declaration (out dec);  				dir.Declarations.Add (dec);  				while (la.kind == 4) {  					Get ();  				}  				while (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  					if (la.val.Equals ("}")) {  						Get ();  						return;  					}  					declaration (out dec);  					dir.Declarations.Add (dec);  					while (la.kind == 4) {  						Get ();  					}  				}  				if (la.kind == 27) {  					Get ();  					while (la.kind == 4) {  						Get ();  					}  				}  			}  			else if (StartOf (2)) {  				ruleset (out rset);  				dir.RuleSets.Add (rset);  				while (la.kind == 4) {  					Get ();  				}  			}  			else {  				directive (out dr);  				dir.Directives.Add (dr);  				while (la.kind == 4) {  					Get ();  				}  			}  		}  	}  	Expect (28);  	while (la.kind == 4) {  		Get ();  	}  }  else if (la.kind == 27) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  }  else  	SynErr (50);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (StartOf (6)) {  	while (StartOf (1)) {  		if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  			declaration (out dec);  			dir.Declarations.Add (dec);  			while (la.kind == 4) {  				Get ();  			}  			while (la.kind == 27) {  				Get ();  				while (la.kind == 4) {  					Get ();  				}  				if (la.val.Equals ("}")) {  					Get ();  					return;  				}  				declaration (out dec);  				dir.Declarations.Add (dec);  				while (la.kind == 4) {  					Get ();  				}  			}  			if (la.kind == 27) {  				Get ();  				while (la.kind == 4) {  					Get ();  				}  			}  		}  		else if (StartOf (2)) {  			ruleset (out rset);  			dir.RuleSets.Add (rset);  			while (la.kind == 4) {  				Get ();  			}  		}  		else {  			directive (out dr);  			dir.Directives.Add (dr);  			while (la.kind == 4) {  				Get ();  			}  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (StartOf (6)) {  	while (StartOf (1)) {  		if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  			declaration (out dec);  			dir.Declarations.Add (dec);  			while (la.kind == 4) {  				Get ();  			}  			while (la.kind == 27) {  				Get ();  				while (la.kind == 4) {  					Get ();  				}  				if (la.val.Equals ("}")) {  					Get ();  					return;  				}  				declaration (out dec);  				dir.Declarations.Add (dec);  				while (la.kind == 4) {  					Get ();  				}  			}  			if (la.kind == 27) {  				Get ();  				while (la.kind == 4) {  					Get ();  				}  			}  		}  		else if (StartOf (2)) {  			ruleset (out rset);  			dir.RuleSets.Add (rset);  			while (la.kind == 4) {  				Get ();  			}  		}  		else {  			directive (out dr);  			dir.Directives.Add (dr);  			while (la.kind == 4) {  				Get ();  			}  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (StartOf (6)) {  	while (StartOf (1)) {  		if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  			declaration (out dec);  			dir.Declarations.Add (dec);  			while (la.kind == 4) {  				Get ();  			}  			while (la.kind == 27) {  				Get ();  				while (la.kind == 4) {  					Get ();  				}  				if (la.val.Equals ("}")) {  					Get ();  					return;  				}  				declaration (out dec);  				dir.Declarations.Add (dec);  				while (la.kind == 4) {  					Get ();  				}  			}  			if (la.kind == 27) {  				Get ();  				while (la.kind == 4) {  					Get ();  				}  			}  		}  		else if (StartOf (2)) {  			ruleset (out rset);  			dir.RuleSets.Add (rset);  			while (la.kind == 4) {  				Get ();  			}  		}  		else {  			directive (out dr);  			dir.Directives.Add (dr);  			while (la.kind == 4) {  				Get ();  			}  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (StartOf (6)) {  	while (StartOf (1)) {  		if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  			declaration (out dec);  			dir.Declarations.Add (dec);  			while (la.kind == 4) {  				Get ();  			}  			while (la.kind == 27) {  				Get ();  				while (la.kind == 4) {  					Get ();  				}  				if (la.val.Equals ("}")) {  					Get ();  					return;  				}  				declaration (out dec);  				dir.Declarations.Add (dec);  				while (la.kind == 4) {  					Get ();  				}  			}  			if (la.kind == 27) {  				Get ();  				while (la.kind == 4) {  					Get ();  				}  			}  		}  		else if (StartOf (2)) {  			ruleset (out rset);  			dir.RuleSets.Add (rset);  			while (la.kind == 4) {  				Get ();  			}  		}  		else {  			directive (out dr);  			dir.Directives.Add (dr);  			while (la.kind == 4) {  				Get ();  			}  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (StartOf (6)) {  	while (StartOf (1)) {  		if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  			declaration (out dec);  			dir.Declarations.Add (dec);  			while (la.kind == 4) {  				Get ();  			}  			while (la.kind == 27) {  				Get ();  				while (la.kind == 4) {  					Get ();  				}  				if (la.val.Equals ("}")) {  					Get ();  					return;  				}  				declaration (out dec);  				dir.Declarations.Add (dec);  				while (la.kind == 4) {  					Get ();  				}  			}  			if (la.kind == 27) {  				Get ();  				while (la.kind == 4) {  					Get ();  				}  			}  		}  		else if (StartOf (2)) {  			ruleset (out rset);  			dir.RuleSets.Add (rset);  			while (la.kind == 4) {  				Get ();  			}  		}  		else {  			directive (out dr);  			dir.Directives.Add (dr);  			while (la.kind == 4) {  				Get ();  			}  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (StartOf (6)) {  	while (StartOf (1)) {  		if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  			declaration (out dec);  			dir.Declarations.Add (dec);  			while (la.kind == 4) {  				Get ();  			}  			while (la.kind == 27) {  				Get ();  				while (la.kind == 4) {  					Get ();  				}  				if (la.val.Equals ("}")) {  					Get ();  					return;  				}  				declaration (out dec);  				dir.Declarations.Add (dec);  				while (la.kind == 4) {  					Get ();  				}  			}  			if (la.kind == 27) {  				Get ();  				while (la.kind == 4) {  					Get ();  				}  			}  		}  		else if (StartOf (2)) {  			ruleset (out rset);  			dir.RuleSets.Add (rset);  			while (la.kind == 4) {  				Get ();  			}  		}  		else {  			directive (out dr);  			dir.Directives.Add (dr);  			while (la.kind == 4) {  				Get ();  			}  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (StartOf (6)) {  	while (StartOf (1)) {  		if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  			declaration (out dec);  			dir.Declarations.Add (dec);  			while (la.kind == 4) {  				Get ();  			}  			while (la.kind == 27) {  				Get ();  				while (la.kind == 4) {  					Get ();  				}  				if (la.val.Equals ("}")) {  					Get ();  					return;  				}  				declaration (out dec);  				dir.Declarations.Add (dec);  				while (la.kind == 4) {  					Get ();  				}  			}  			if (la.kind == 27) {  				Get ();  				while (la.kind == 4) {  					Get ();  				}  			}  		}  		else if (StartOf (2)) {  			ruleset (out rset);  			dir.RuleSets.Add (rset);  			while (la.kind == 4) {  				Get ();  			}  		}  		else {  			directive (out dr);  			dir.Directives.Add (dr);  			while (la.kind == 4) {  				Get ();  			}  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (StartOf (6)) {  	while (StartOf (1)) {  		if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  			declaration (out dec);  			dir.Declarations.Add (dec);  			while (la.kind == 4) {  				Get ();  			}  			while (la.kind == 27) {  				Get ();  				while (la.kind == 4) {  					Get ();  				}  				if (la.val.Equals ("}")) {  					Get ();  					return;  				}  				declaration (out dec);  				dir.Declarations.Add (dec);  				while (la.kind == 4) {  					Get ();  				}  			}  			if (la.kind == 27) {  				Get ();  				while (la.kind == 4) {  					Get ();  				}  			}  		}  		else if (StartOf (2)) {  			ruleset (out rset);  			dir.RuleSets.Add (rset);  			while (la.kind == 4) {  				Get ();  			}  		}  		else {  			directive (out dr);  			dir.Directives.Add (dr);  			while (la.kind == 4) {  				Get ();  			}  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (StartOf (6)) {  	while (StartOf (1)) {  		if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  			declaration (out dec);  			dir.Declarations.Add (dec);  			while (la.kind == 4) {  				Get ();  			}  			while (la.kind == 27) {  				Get ();  				while (la.kind == 4) {  					Get ();  				}  				if (la.val.Equals ("}")) {  					Get ();  					return;  				}  				declaration (out dec);  				dir.Declarations.Add (dec);  				while (la.kind == 4) {  					Get ();  				}  			}  			if (la.kind == 27) {  				Get ();  				while (la.kind == 4) {  					Get ();  				}  			}  		}  		else if (StartOf (2)) {  			ruleset (out rset);  			dir.RuleSets.Add (rset);  			while (la.kind == 4) {  				Get ();  			}  		}  		else {  			directive (out dr);  			dir.Directives.Add (dr);  			while (la.kind == 4) {  				Get ();  			}  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (StartOf (6)) {  	while (StartOf (1)) {  		if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  			declaration (out dec);  			dir.Declarations.Add (dec);  			while (la.kind == 4) {  				Get ();  			}  			while (la.kind == 27) {  				Get ();  				while (la.kind == 4) {  					Get ();  				}  				if (la.val.Equals ("}")) {  					Get ();  					return;  				}  				declaration (out dec);  				dir.Declarations.Add (dec);  				while (la.kind == 4) {  					Get ();  				}  			}  			if (la.kind == 27) {  				Get ();  				while (la.kind == 4) {  					Get ();  				}  			}  		}  		else if (StartOf (2)) {  			ruleset (out rset);  			dir.RuleSets.Add (rset);  			while (la.kind == 4) {  				Get ();  			}  		}  		else {  			directive (out dr);  			dir.Directives.Add (dr);  			while (la.kind == 4) {  				Get ();  			}  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: while (StartOf (1)) {  	if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  		declaration (out dec);  		dir.Declarations.Add (dec);  		while (la.kind == 4) {  			Get ();  		}  		while (la.kind == 27) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			if (la.val.Equals ("}")) {  				Get ();  				return;  			}  			declaration (out dec);  			dir.Declarations.Add (dec);  			while (la.kind == 4) {  				Get ();  			}  		}  		if (la.kind == 27) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  		}  	}  	else if (StartOf (2)) {  		ruleset (out rset);  		dir.RuleSets.Add (rset);  		while (la.kind == 4) {  			Get ();  		}  	}  	else {  		directive (out dr);  		dir.Directives.Add (dr);  		while (la.kind == 4) {  			Get ();  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: while (StartOf (1)) {  	if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  		declaration (out dec);  		dir.Declarations.Add (dec);  		while (la.kind == 4) {  			Get ();  		}  		while (la.kind == 27) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			if (la.val.Equals ("}")) {  				Get ();  				return;  			}  			declaration (out dec);  			dir.Declarations.Add (dec);  			while (la.kind == 4) {  				Get ();  			}  		}  		if (la.kind == 27) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  		}  	}  	else if (StartOf (2)) {  		ruleset (out rset);  		dir.RuleSets.Add (rset);  		while (la.kind == 4) {  			Get ();  		}  	}  	else {  		directive (out dr);  		dir.Directives.Add (dr);  		while (la.kind == 4) {  			Get ();  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: while (StartOf (1)) {  	if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  		declaration (out dec);  		dir.Declarations.Add (dec);  		while (la.kind == 4) {  			Get ();  		}  		while (la.kind == 27) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			if (la.val.Equals ("}")) {  				Get ();  				return;  			}  			declaration (out dec);  			dir.Declarations.Add (dec);  			while (la.kind == 4) {  				Get ();  			}  		}  		if (la.kind == 27) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  		}  	}  	else if (StartOf (2)) {  		ruleset (out rset);  		dir.RuleSets.Add (rset);  		while (la.kind == 4) {  			Get ();  		}  	}  	else {  		directive (out dr);  		dir.Directives.Add (dr);  		while (la.kind == 4) {  			Get ();  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: while (StartOf (1)) {  	if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  		declaration (out dec);  		dir.Declarations.Add (dec);  		while (la.kind == 4) {  			Get ();  		}  		while (la.kind == 27) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			if (la.val.Equals ("}")) {  				Get ();  				return;  			}  			declaration (out dec);  			dir.Declarations.Add (dec);  			while (la.kind == 4) {  				Get ();  			}  		}  		if (la.kind == 27) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  		}  	}  	else if (StartOf (2)) {  		ruleset (out rset);  		dir.RuleSets.Add (rset);  		while (la.kind == 4) {  			Get ();  		}  	}  	else {  		directive (out dr);  		dir.Directives.Add (dr);  		while (la.kind == 4) {  			Get ();  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: while (StartOf (1)) {  	if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  		declaration (out dec);  		dir.Declarations.Add (dec);  		while (la.kind == 4) {  			Get ();  		}  		while (la.kind == 27) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			if (la.val.Equals ("}")) {  				Get ();  				return;  			}  			declaration (out dec);  			dir.Declarations.Add (dec);  			while (la.kind == 4) {  				Get ();  			}  		}  		if (la.kind == 27) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  		}  	}  	else if (StartOf (2)) {  		ruleset (out rset);  		dir.RuleSets.Add (rset);  		while (la.kind == 4) {  			Get ();  		}  	}  	else {  		directive (out dr);  		dir.Directives.Add (dr);  		while (la.kind == 4) {  			Get ();  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: while (StartOf (1)) {  	if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  		declaration (out dec);  		dir.Declarations.Add (dec);  		while (la.kind == 4) {  			Get ();  		}  		while (la.kind == 27) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			if (la.val.Equals ("}")) {  				Get ();  				return;  			}  			declaration (out dec);  			dir.Declarations.Add (dec);  			while (la.kind == 4) {  				Get ();  			}  		}  		if (la.kind == 27) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  		}  	}  	else if (StartOf (2)) {  		ruleset (out rset);  		dir.RuleSets.Add (rset);  		while (la.kind == 4) {  			Get ();  		}  	}  	else {  		directive (out dr);  		dir.Directives.Add (dr);  		while (la.kind == 4) {  			Get ();  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: while (StartOf (1)) {  	if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  		declaration (out dec);  		dir.Declarations.Add (dec);  		while (la.kind == 4) {  			Get ();  		}  		while (la.kind == 27) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			if (la.val.Equals ("}")) {  				Get ();  				return;  			}  			declaration (out dec);  			dir.Declarations.Add (dec);  			while (la.kind == 4) {  				Get ();  			}  		}  		if (la.kind == 27) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  		}  	}  	else if (StartOf (2)) {  		ruleset (out rset);  		dir.RuleSets.Add (rset);  		while (la.kind == 4) {  			Get ();  		}  	}  	else {  		directive (out dr);  		dir.Directives.Add (dr);  		while (la.kind == 4) {  			Get ();  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: while (StartOf (1)) {  	if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  		declaration (out dec);  		dir.Declarations.Add (dec);  		while (la.kind == 4) {  			Get ();  		}  		while (la.kind == 27) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			if (la.val.Equals ("}")) {  				Get ();  				return;  			}  			declaration (out dec);  			dir.Declarations.Add (dec);  			while (la.kind == 4) {  				Get ();  			}  		}  		if (la.kind == 27) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  		}  	}  	else if (StartOf (2)) {  		ruleset (out rset);  		dir.RuleSets.Add (rset);  		while (la.kind == 4) {  			Get ();  		}  	}  	else {  		directive (out dr);  		dir.Directives.Add (dr);  		while (la.kind == 4) {  			Get ();  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: while (StartOf (1)) {  	if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  		declaration (out dec);  		dir.Declarations.Add (dec);  		while (la.kind == 4) {  			Get ();  		}  		while (la.kind == 27) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			if (la.val.Equals ("}")) {  				Get ();  				return;  			}  			declaration (out dec);  			dir.Declarations.Add (dec);  			while (la.kind == 4) {  				Get ();  			}  		}  		if (la.kind == 27) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  		}  	}  	else if (StartOf (2)) {  		ruleset (out rset);  		dir.RuleSets.Add (rset);  		while (la.kind == 4) {  			Get ();  		}  	}  	else {  		directive (out dr);  		dir.Directives.Add (dr);  		while (la.kind == 4) {  			Get ();  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  	declaration (out dec);  	dir.Declarations.Add (dec);  	while (la.kind == 4) {  		Get ();  	}  	while (la.kind == 27) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		if (la.val.Equals ("}")) {  			Get ();  			return;  		}  		declaration (out dec);  		dir.Declarations.Add (dec);  		while (la.kind == 4) {  			Get ();  		}  	}  	if (la.kind == 27) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  	}  }  else if (StartOf (2)) {  	ruleset (out rset);  	dir.RuleSets.Add (rset);  	while (la.kind == 4) {  		Get ();  	}  }  else {  	directive (out dr);  	dir.Directives.Add (dr);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  	declaration (out dec);  	dir.Declarations.Add (dec);  	while (la.kind == 4) {  		Get ();  	}  	while (la.kind == 27) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		if (la.val.Equals ("}")) {  			Get ();  			return;  		}  		declaration (out dec);  		dir.Declarations.Add (dec);  		while (la.kind == 4) {  			Get ();  		}  	}  	if (la.kind == 27) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  	}  }  else if (StartOf (2)) {  	ruleset (out rset);  	dir.RuleSets.Add (rset);  	while (la.kind == 4) {  		Get ();  	}  }  else {  	directive (out dr);  	dir.Directives.Add (dr);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  	declaration (out dec);  	dir.Declarations.Add (dec);  	while (la.kind == 4) {  		Get ();  	}  	while (la.kind == 27) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		if (la.val.Equals ("}")) {  			Get ();  			return;  		}  		declaration (out dec);  		dir.Declarations.Add (dec);  		while (la.kind == 4) {  			Get ();  		}  	}  	if (la.kind == 27) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  	}  }  else if (StartOf (2)) {  	ruleset (out rset);  	dir.RuleSets.Add (rset);  	while (la.kind == 4) {  		Get ();  	}  }  else {  	directive (out dr);  	dir.Directives.Add (dr);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  	declaration (out dec);  	dir.Declarations.Add (dec);  	while (la.kind == 4) {  		Get ();  	}  	while (la.kind == 27) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		if (la.val.Equals ("}")) {  			Get ();  			return;  		}  		declaration (out dec);  		dir.Declarations.Add (dec);  		while (la.kind == 4) {  			Get ();  		}  	}  	if (la.kind == 27) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  	}  }  else if (StartOf (2)) {  	ruleset (out rset);  	dir.RuleSets.Add (rset);  	while (la.kind == 4) {  		Get ();  	}  }  else {  	directive (out dr);  	dir.Directives.Add (dr);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  	declaration (out dec);  	dir.Declarations.Add (dec);  	while (la.kind == 4) {  		Get ();  	}  	while (la.kind == 27) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		if (la.val.Equals ("}")) {  			Get ();  			return;  		}  		declaration (out dec);  		dir.Declarations.Add (dec);  		while (la.kind == 4) {  			Get ();  		}  	}  	if (la.kind == 27) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  	}  }  else if (StartOf (2)) {  	ruleset (out rset);  	dir.RuleSets.Add (rset);  	while (la.kind == 4) {  		Get ();  	}  }  else {  	directive (out dr);  	dir.Directives.Add (dr);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  	declaration (out dec);  	dir.Declarations.Add (dec);  	while (la.kind == 4) {  		Get ();  	}  	while (la.kind == 27) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		if (la.val.Equals ("}")) {  			Get ();  			return;  		}  		declaration (out dec);  		dir.Declarations.Add (dec);  		while (la.kind == 4) {  			Get ();  		}  	}  	if (la.kind == 27) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  	}  }  else if (StartOf (2)) {  	ruleset (out rset);  	dir.RuleSets.Add (rset);  	while (la.kind == 4) {  		Get ();  	}  }  else {  	directive (out dr);  	dir.Directives.Add (dr);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  	declaration (out dec);  	dir.Declarations.Add (dec);  	while (la.kind == 4) {  		Get ();  	}  	while (la.kind == 27) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		if (la.val.Equals ("}")) {  			Get ();  			return;  		}  		declaration (out dec);  		dir.Declarations.Add (dec);  		while (la.kind == 4) {  			Get ();  		}  	}  	if (la.kind == 27) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  	}  }  else if (StartOf (2)) {  	ruleset (out rset);  	dir.RuleSets.Add (rset);  	while (la.kind == 4) {  		Get ();  	}  }  else {  	directive (out dr);  	dir.Directives.Add (dr);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  	declaration (out dec);  	dir.Declarations.Add (dec);  	while (la.kind == 4) {  		Get ();  	}  	while (la.kind == 27) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		if (la.val.Equals ("}")) {  			Get ();  			return;  		}  		declaration (out dec);  		dir.Declarations.Add (dec);  		while (la.kind == 4) {  			Get ();  		}  	}  	if (la.kind == 27) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  	}  }  else if (StartOf (2)) {  	ruleset (out rset);  	dir.RuleSets.Add (rset);  	while (la.kind == 4) {  		Get ();  	}  }  else {  	directive (out dr);  	dir.Directives.Add (dr);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (dir.Type == Model.DirectiveType.Page || dir.Type == Model.DirectiveType.FontFace) {  	declaration (out dec);  	dir.Declarations.Add (dec);  	while (la.kind == 4) {  		Get ();  	}  	while (la.kind == 27) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		if (la.val.Equals ("}")) {  			Get ();  			return;  		}  		declaration (out dec);  		dir.Declarations.Add (dec);  		while (la.kind == 4) {  			Get ();  		}  	}  	if (la.kind == 27) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  	}  }  else if (StartOf (2)) {  	ruleset (out rset);  	dir.RuleSets.Add (rset);  	while (la.kind == 4) {  		Get ();  	}  }  else {  	directive (out dr);  	dir.Directives.Add (dr);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: while (la.kind == 27) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	if (la.val.Equals ("}")) {  		Get ();  		return;  	}  	declaration (out dec);  	dir.Declarations.Add (dec);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: while (la.kind == 27) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	if (la.val.Equals ("}")) {  		Get ();  		return;  	}  	declaration (out dec);  	dir.Declarations.Add (dec);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: while (la.kind == 27) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	if (la.val.Equals ("}")) {  		Get ();  		return;  	}  	declaration (out dec);  	dir.Declarations.Add (dec);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (la.kind == 27) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (la.kind == 27) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (StartOf (2)) {  	ruleset (out rset);  	dir.RuleSets.Add (rset);  	while (la.kind == 4) {  		Get ();  	}  }  else {  	directive (out dr);  	dir.Directives.Add (dr);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (StartOf (2)) {  	ruleset (out rset);  	dir.RuleSets.Add (rset);  	while (la.kind == 4) {  		Get ();  	}  }  else {  	directive (out dr);  	dir.Directives.Add (dr);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (StartOf (2)) {  	ruleset (out rset);  	dir.RuleSets.Add (rset);  	while (la.kind == 4) {  		Get ();  	}  }  else {  	directive (out dr);  	dir.Directives.Add (dr);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: Expect (28);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (la.kind == 27) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  }  else  	SynErr (50);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (la.kind == 27) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  }  else  	SynErr (50);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: if (la.kind == 27) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  }  else  	SynErr (50);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,directive,The following statement contains a magic number: SynErr (50);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,QuotedString,The following statement contains a magic number: if (la.kind == 7) {  	Get ();  	quote = '\'';  	while (StartOf (7)) {  		Get ();  		qs += t.val;  		if (la.val.Equals ("'") && !t.val.Equals ("\\")) {  			break;  		}  	}  	Expect (7);  }  else if (la.kind == 8) {  	Get ();  	quote = '"';  	while (StartOf (8)) {  		Get ();  		qs += t.val;  		if (la.val.Equals ("\"") && !t.val.Equals ("\\")) {  			break;  		}  	}  	Expect (8);  }  else  	SynErr (51);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,QuotedString,The following statement contains a magic number: if (la.kind == 7) {  	Get ();  	quote = '\'';  	while (StartOf (7)) {  		Get ();  		qs += t.val;  		if (la.val.Equals ("'") && !t.val.Equals ("\\")) {  			break;  		}  	}  	Expect (7);  }  else if (la.kind == 8) {  	Get ();  	quote = '"';  	while (StartOf (8)) {  		Get ();  		qs += t.val;  		if (la.val.Equals ("\"") && !t.val.Equals ("\\")) {  			break;  		}  	}  	Expect (8);  }  else  	SynErr (51);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,QuotedString,The following statement contains a magic number: if (la.kind == 7) {  	Get ();  	quote = '\'';  	while (StartOf (7)) {  		Get ();  		qs += t.val;  		if (la.val.Equals ("'") && !t.val.Equals ("\\")) {  			break;  		}  	}  	Expect (7);  }  else if (la.kind == 8) {  	Get ();  	quote = '"';  	while (StartOf (8)) {  		Get ();  		qs += t.val;  		if (la.val.Equals ("\"") && !t.val.Equals ("\\")) {  			break;  		}  	}  	Expect (8);  }  else  	SynErr (51);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,QuotedString,The following statement contains a magic number: if (la.kind == 7) {  	Get ();  	quote = '\'';  	while (StartOf (7)) {  		Get ();  		qs += t.val;  		if (la.val.Equals ("'") && !t.val.Equals ("\\")) {  			break;  		}  	}  	Expect (7);  }  else if (la.kind == 8) {  	Get ();  	quote = '"';  	while (StartOf (8)) {  		Get ();  		qs += t.val;  		if (la.val.Equals ("\"") && !t.val.Equals ("\\")) {  			break;  		}  	}  	Expect (8);  }  else  	SynErr (51);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,QuotedString,The following statement contains a magic number: if (la.kind == 7) {  	Get ();  	quote = '\'';  	while (StartOf (7)) {  		Get ();  		qs += t.val;  		if (la.val.Equals ("'") && !t.val.Equals ("\\")) {  			break;  		}  	}  	Expect (7);  }  else if (la.kind == 8) {  	Get ();  	quote = '"';  	while (StartOf (8)) {  		Get ();  		qs += t.val;  		if (la.val.Equals ("\"") && !t.val.Equals ("\\")) {  			break;  		}  	}  	Expect (8);  }  else  	SynErr (51);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,QuotedString,The following statement contains a magic number: if (la.kind == 7) {  	Get ();  	quote = '\'';  	while (StartOf (7)) {  		Get ();  		qs += t.val;  		if (la.val.Equals ("'") && !t.val.Equals ("\\")) {  			break;  		}  	}  	Expect (7);  }  else if (la.kind == 8) {  	Get ();  	quote = '"';  	while (StartOf (8)) {  		Get ();  		qs += t.val;  		if (la.val.Equals ("\"") && !t.val.Equals ("\\")) {  			break;  		}  	}  	Expect (8);  }  else  	SynErr (51);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,QuotedString,The following statement contains a magic number: if (la.kind == 7) {  	Get ();  	quote = '\'';  	while (StartOf (7)) {  		Get ();  		qs += t.val;  		if (la.val.Equals ("'") && !t.val.Equals ("\\")) {  			break;  		}  	}  	Expect (7);  }  else if (la.kind == 8) {  	Get ();  	quote = '"';  	while (StartOf (8)) {  		Get ();  		qs += t.val;  		if (la.val.Equals ("\"") && !t.val.Equals ("\\")) {  			break;  		}  	}  	Expect (8);  }  else  	SynErr (51);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,QuotedString,The following statement contains a magic number: while (StartOf (7)) {  	Get ();  	qs += t.val;  	if (la.val.Equals ("'") && !t.val.Equals ("\\")) {  		break;  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,QuotedString,The following statement contains a magic number: Expect (7);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,QuotedString,The following statement contains a magic number: if (la.kind == 8) {  	Get ();  	quote = '"';  	while (StartOf (8)) {  		Get ();  		qs += t.val;  		if (la.val.Equals ("\"") && !t.val.Equals ("\\")) {  			break;  		}  	}  	Expect (8);  }  else  	SynErr (51);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,QuotedString,The following statement contains a magic number: if (la.kind == 8) {  	Get ();  	quote = '"';  	while (StartOf (8)) {  		Get ();  		qs += t.val;  		if (la.val.Equals ("\"") && !t.val.Equals ("\\")) {  			break;  		}  	}  	Expect (8);  }  else  	SynErr (51);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,QuotedString,The following statement contains a magic number: if (la.kind == 8) {  	Get ();  	quote = '"';  	while (StartOf (8)) {  		Get ();  		qs += t.val;  		if (la.val.Equals ("\"") && !t.val.Equals ("\\")) {  			break;  		}  	}  	Expect (8);  }  else  	SynErr (51);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,QuotedString,The following statement contains a magic number: if (la.kind == 8) {  	Get ();  	quote = '"';  	while (StartOf (8)) {  		Get ();  		qs += t.val;  		if (la.val.Equals ("\"") && !t.val.Equals ("\\")) {  			break;  		}  	}  	Expect (8);  }  else  	SynErr (51);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,QuotedString,The following statement contains a magic number: while (StartOf (8)) {  	Get ();  	qs += t.val;  	if (la.val.Equals ("\"") && !t.val.Equals ("\\")) {  		break;  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,QuotedString,The following statement contains a magic number: Expect (8);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,QuotedString,The following statement contains a magic number: SynErr (51);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,URI,The following statement contains a magic number: Expect (9);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,URI,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,URI,The following statement contains a magic number: if (la.kind == 10) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,URI,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,URI,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out url);  }  else if (StartOf (9)) {  	while (StartOf (10)) {  		Get ();  		url += t.val;  		if (la.val.Equals (")")) {  			break;  		}  	}  }  else  	SynErr (52);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,URI,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out url);  }  else if (StartOf (9)) {  	while (StartOf (10)) {  		Get ();  		url += t.val;  		if (la.val.Equals (")")) {  			break;  		}  	}  }  else  	SynErr (52);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,URI,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out url);  }  else if (StartOf (9)) {  	while (StartOf (10)) {  		Get ();  		url += t.val;  		if (la.val.Equals (")")) {  			break;  		}  	}  }  else  	SynErr (52);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,URI,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out url);  }  else if (StartOf (9)) {  	while (StartOf (10)) {  		Get ();  		url += t.val;  		if (la.val.Equals (")")) {  			break;  		}  	}  }  else  	SynErr (52);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,URI,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out url);  }  else if (StartOf (9)) {  	while (StartOf (10)) {  		Get ();  		url += t.val;  		if (la.val.Equals (")")) {  			break;  		}  	}  }  else  	SynErr (52);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,URI,The following statement contains a magic number: if (StartOf (9)) {  	while (StartOf (10)) {  		Get ();  		url += t.val;  		if (la.val.Equals (")")) {  			break;  		}  	}  }  else  	SynErr (52);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,URI,The following statement contains a magic number: if (StartOf (9)) {  	while (StartOf (10)) {  		Get ();  		url += t.val;  		if (la.val.Equals (")")) {  			break;  		}  	}  }  else  	SynErr (52);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,URI,The following statement contains a magic number: if (StartOf (9)) {  	while (StartOf (10)) {  		Get ();  		url += t.val;  		if (la.val.Equals (")")) {  			break;  		}  	}  }  else  	SynErr (52);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,URI,The following statement contains a magic number: while (StartOf (10)) {  	Get ();  	url += t.val;  	if (la.val.Equals (")")) {  		break;  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,URI,The following statement contains a magic number: SynErr (52);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,URI,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,URI,The following statement contains a magic number: if (la.kind == 11) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,medium,The following statement contains a magic number: switch (la.kind) {  case 12: {  	Get ();  	m = Model.Medium.all;  	break;  }  case 13: {  	Get ();  	m = Model.Medium.aural;  	break;  }  case 14: {  	Get ();  	m = Model.Medium.braille;  	break;  }  case 15: {  	Get ();  	m = Model.Medium.embossed;  	break;  }  case 16: {  	Get ();  	m = Model.Medium.handheld;  	break;  }  case 17: {  	Get ();  	m = Model.Medium.print;  	break;  }  case 18: {  	Get ();  	m = Model.Medium.projection;  	break;  }  case 19: {  	Get ();  	m = Model.Medium.screen;  	break;  }  case 20: {  	Get ();  	m = Model.Medium.tty;  	break;  }  case 21: {  	Get ();  	m = Model.Medium.tv;  	break;  }  default:  	SynErr (53);  	break;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,medium,The following statement contains a magic number: switch (la.kind) {  case 12: {  	Get ();  	m = Model.Medium.all;  	break;  }  case 13: {  	Get ();  	m = Model.Medium.aural;  	break;  }  case 14: {  	Get ();  	m = Model.Medium.braille;  	break;  }  case 15: {  	Get ();  	m = Model.Medium.embossed;  	break;  }  case 16: {  	Get ();  	m = Model.Medium.handheld;  	break;  }  case 17: {  	Get ();  	m = Model.Medium.print;  	break;  }  case 18: {  	Get ();  	m = Model.Medium.projection;  	break;  }  case 19: {  	Get ();  	m = Model.Medium.screen;  	break;  }  case 20: {  	Get ();  	m = Model.Medium.tty;  	break;  }  case 21: {  	Get ();  	m = Model.Medium.tv;  	break;  }  default:  	SynErr (53);  	break;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,medium,The following statement contains a magic number: switch (la.kind) {  case 12: {  	Get ();  	m = Model.Medium.all;  	break;  }  case 13: {  	Get ();  	m = Model.Medium.aural;  	break;  }  case 14: {  	Get ();  	m = Model.Medium.braille;  	break;  }  case 15: {  	Get ();  	m = Model.Medium.embossed;  	break;  }  case 16: {  	Get ();  	m = Model.Medium.handheld;  	break;  }  case 17: {  	Get ();  	m = Model.Medium.print;  	break;  }  case 18: {  	Get ();  	m = Model.Medium.projection;  	break;  }  case 19: {  	Get ();  	m = Model.Medium.screen;  	break;  }  case 20: {  	Get ();  	m = Model.Medium.tty;  	break;  }  case 21: {  	Get ();  	m = Model.Medium.tv;  	break;  }  default:  	SynErr (53);  	break;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,medium,The following statement contains a magic number: switch (la.kind) {  case 12: {  	Get ();  	m = Model.Medium.all;  	break;  }  case 13: {  	Get ();  	m = Model.Medium.aural;  	break;  }  case 14: {  	Get ();  	m = Model.Medium.braille;  	break;  }  case 15: {  	Get ();  	m = Model.Medium.embossed;  	break;  }  case 16: {  	Get ();  	m = Model.Medium.handheld;  	break;  }  case 17: {  	Get ();  	m = Model.Medium.print;  	break;  }  case 18: {  	Get ();  	m = Model.Medium.projection;  	break;  }  case 19: {  	Get ();  	m = Model.Medium.screen;  	break;  }  case 20: {  	Get ();  	m = Model.Medium.tty;  	break;  }  case 21: {  	Get ();  	m = Model.Medium.tv;  	break;  }  default:  	SynErr (53);  	break;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,medium,The following statement contains a magic number: switch (la.kind) {  case 12: {  	Get ();  	m = Model.Medium.all;  	break;  }  case 13: {  	Get ();  	m = Model.Medium.aural;  	break;  }  case 14: {  	Get ();  	m = Model.Medium.braille;  	break;  }  case 15: {  	Get ();  	m = Model.Medium.embossed;  	break;  }  case 16: {  	Get ();  	m = Model.Medium.handheld;  	break;  }  case 17: {  	Get ();  	m = Model.Medium.print;  	break;  }  case 18: {  	Get ();  	m = Model.Medium.projection;  	break;  }  case 19: {  	Get ();  	m = Model.Medium.screen;  	break;  }  case 20: {  	Get ();  	m = Model.Medium.tty;  	break;  }  case 21: {  	Get ();  	m = Model.Medium.tv;  	break;  }  default:  	SynErr (53);  	break;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,medium,The following statement contains a magic number: switch (la.kind) {  case 12: {  	Get ();  	m = Model.Medium.all;  	break;  }  case 13: {  	Get ();  	m = Model.Medium.aural;  	break;  }  case 14: {  	Get ();  	m = Model.Medium.braille;  	break;  }  case 15: {  	Get ();  	m = Model.Medium.embossed;  	break;  }  case 16: {  	Get ();  	m = Model.Medium.handheld;  	break;  }  case 17: {  	Get ();  	m = Model.Medium.print;  	break;  }  case 18: {  	Get ();  	m = Model.Medium.projection;  	break;  }  case 19: {  	Get ();  	m = Model.Medium.screen;  	break;  }  case 20: {  	Get ();  	m = Model.Medium.tty;  	break;  }  case 21: {  	Get ();  	m = Model.Medium.tv;  	break;  }  default:  	SynErr (53);  	break;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,medium,The following statement contains a magic number: switch (la.kind) {  case 12: {  	Get ();  	m = Model.Medium.all;  	break;  }  case 13: {  	Get ();  	m = Model.Medium.aural;  	break;  }  case 14: {  	Get ();  	m = Model.Medium.braille;  	break;  }  case 15: {  	Get ();  	m = Model.Medium.embossed;  	break;  }  case 16: {  	Get ();  	m = Model.Medium.handheld;  	break;  }  case 17: {  	Get ();  	m = Model.Medium.print;  	break;  }  case 18: {  	Get ();  	m = Model.Medium.projection;  	break;  }  case 19: {  	Get ();  	m = Model.Medium.screen;  	break;  }  case 20: {  	Get ();  	m = Model.Medium.tty;  	break;  }  case 21: {  	Get ();  	m = Model.Medium.tv;  	break;  }  default:  	SynErr (53);  	break;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,medium,The following statement contains a magic number: switch (la.kind) {  case 12: {  	Get ();  	m = Model.Medium.all;  	break;  }  case 13: {  	Get ();  	m = Model.Medium.aural;  	break;  }  case 14: {  	Get ();  	m = Model.Medium.braille;  	break;  }  case 15: {  	Get ();  	m = Model.Medium.embossed;  	break;  }  case 16: {  	Get ();  	m = Model.Medium.handheld;  	break;  }  case 17: {  	Get ();  	m = Model.Medium.print;  	break;  }  case 18: {  	Get ();  	m = Model.Medium.projection;  	break;  }  case 19: {  	Get ();  	m = Model.Medium.screen;  	break;  }  case 20: {  	Get ();  	m = Model.Medium.tty;  	break;  }  case 21: {  	Get ();  	m = Model.Medium.tv;  	break;  }  default:  	SynErr (53);  	break;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,medium,The following statement contains a magic number: switch (la.kind) {  case 12: {  	Get ();  	m = Model.Medium.all;  	break;  }  case 13: {  	Get ();  	m = Model.Medium.aural;  	break;  }  case 14: {  	Get ();  	m = Model.Medium.braille;  	break;  }  case 15: {  	Get ();  	m = Model.Medium.embossed;  	break;  }  case 16: {  	Get ();  	m = Model.Medium.handheld;  	break;  }  case 17: {  	Get ();  	m = Model.Medium.print;  	break;  }  case 18: {  	Get ();  	m = Model.Medium.projection;  	break;  }  case 19: {  	Get ();  	m = Model.Medium.screen;  	break;  }  case 20: {  	Get ();  	m = Model.Medium.tty;  	break;  }  case 21: {  	Get ();  	m = Model.Medium.tv;  	break;  }  default:  	SynErr (53);  	break;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,medium,The following statement contains a magic number: switch (la.kind) {  case 12: {  	Get ();  	m = Model.Medium.all;  	break;  }  case 13: {  	Get ();  	m = Model.Medium.aural;  	break;  }  case 14: {  	Get ();  	m = Model.Medium.braille;  	break;  }  case 15: {  	Get ();  	m = Model.Medium.embossed;  	break;  }  case 16: {  	Get ();  	m = Model.Medium.handheld;  	break;  }  case 17: {  	Get ();  	m = Model.Medium.print;  	break;  }  case 18: {  	Get ();  	m = Model.Medium.projection;  	break;  }  case 19: {  	Get ();  	m = Model.Medium.screen;  	break;  }  case 20: {  	Get ();  	m = Model.Medium.tty;  	break;  }  case 21: {  	Get ();  	m = Model.Medium.tv;  	break;  }  default:  	SynErr (53);  	break;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,medium,The following statement contains a magic number: switch (la.kind) {  case 12: {  	Get ();  	m = Model.Medium.all;  	break;  }  case 13: {  	Get ();  	m = Model.Medium.aural;  	break;  }  case 14: {  	Get ();  	m = Model.Medium.braille;  	break;  }  case 15: {  	Get ();  	m = Model.Medium.embossed;  	break;  }  case 16: {  	Get ();  	m = Model.Medium.handheld;  	break;  }  case 17: {  	Get ();  	m = Model.Medium.print;  	break;  }  case 18: {  	Get ();  	m = Model.Medium.projection;  	break;  }  case 19: {  	Get ();  	m = Model.Medium.screen;  	break;  }  case 20: {  	Get ();  	m = Model.Medium.tty;  	break;  }  case 21: {  	Get ();  	m = Model.Medium.tv;  	break;  }  default:  	SynErr (53);  	break;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,medium,The following statement contains a magic number: SynErr (53);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,identity,The following statement contains a magic number: switch (la.kind) {  case 1: {  	Get ();  	break;  }  case 22: {  	Get ();  	break;  }  case 9: {  	Get ();  	break;  }  case 12: {  	Get ();  	break;  }  case 13: {  	Get ();  	break;  }  case 14: {  	Get ();  	break;  }  case 15: {  	Get ();  	break;  }  case 16: {  	Get ();  	break;  }  case 17: {  	Get ();  	break;  }  case 18: {  	Get ();  	break;  }  case 19: {  	Get ();  	break;  }  case 20: {  	Get ();  	break;  }  case 21: {  	Get ();  	break;  }  default:  	SynErr (54);  	break;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,identity,The following statement contains a magic number: switch (la.kind) {  case 1: {  	Get ();  	break;  }  case 22: {  	Get ();  	break;  }  case 9: {  	Get ();  	break;  }  case 12: {  	Get ();  	break;  }  case 13: {  	Get ();  	break;  }  case 14: {  	Get ();  	break;  }  case 15: {  	Get ();  	break;  }  case 16: {  	Get ();  	break;  }  case 17: {  	Get ();  	break;  }  case 18: {  	Get ();  	break;  }  case 19: {  	Get ();  	break;  }  case 20: {  	Get ();  	break;  }  case 21: {  	Get ();  	break;  }  default:  	SynErr (54);  	break;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,identity,The following statement contains a magic number: switch (la.kind) {  case 1: {  	Get ();  	break;  }  case 22: {  	Get ();  	break;  }  case 9: {  	Get ();  	break;  }  case 12: {  	Get ();  	break;  }  case 13: {  	Get ();  	break;  }  case 14: {  	Get ();  	break;  }  case 15: {  	Get ();  	break;  }  case 16: {  	Get ();  	break;  }  case 17: {  	Get ();  	break;  }  case 18: {  	Get ();  	break;  }  case 19: {  	Get ();  	break;  }  case 20: {  	Get ();  	break;  }  case 21: {  	Get ();  	break;  }  default:  	SynErr (54);  	break;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,identity,The following statement contains a magic number: switch (la.kind) {  case 1: {  	Get ();  	break;  }  case 22: {  	Get ();  	break;  }  case 9: {  	Get ();  	break;  }  case 12: {  	Get ();  	break;  }  case 13: {  	Get ();  	break;  }  case 14: {  	Get ();  	break;  }  case 15: {  	Get ();  	break;  }  case 16: {  	Get ();  	break;  }  case 17: {  	Get ();  	break;  }  case 18: {  	Get ();  	break;  }  case 19: {  	Get ();  	break;  }  case 20: {  	Get ();  	break;  }  case 21: {  	Get ();  	break;  }  default:  	SynErr (54);  	break;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,identity,The following statement contains a magic number: switch (la.kind) {  case 1: {  	Get ();  	break;  }  case 22: {  	Get ();  	break;  }  case 9: {  	Get ();  	break;  }  case 12: {  	Get ();  	break;  }  case 13: {  	Get ();  	break;  }  case 14: {  	Get ();  	break;  }  case 15: {  	Get ();  	break;  }  case 16: {  	Get ();  	break;  }  case 17: {  	Get ();  	break;  }  case 18: {  	Get ();  	break;  }  case 19: {  	Get ();  	break;  }  case 20: {  	Get ();  	break;  }  case 21: {  	Get ();  	break;  }  default:  	SynErr (54);  	break;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,identity,The following statement contains a magic number: switch (la.kind) {  case 1: {  	Get ();  	break;  }  case 22: {  	Get ();  	break;  }  case 9: {  	Get ();  	break;  }  case 12: {  	Get ();  	break;  }  case 13: {  	Get ();  	break;  }  case 14: {  	Get ();  	break;  }  case 15: {  	Get ();  	break;  }  case 16: {  	Get ();  	break;  }  case 17: {  	Get ();  	break;  }  case 18: {  	Get ();  	break;  }  case 19: {  	Get ();  	break;  }  case 20: {  	Get ();  	break;  }  case 21: {  	Get ();  	break;  }  default:  	SynErr (54);  	break;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,identity,The following statement contains a magic number: switch (la.kind) {  case 1: {  	Get ();  	break;  }  case 22: {  	Get ();  	break;  }  case 9: {  	Get ();  	break;  }  case 12: {  	Get ();  	break;  }  case 13: {  	Get ();  	break;  }  case 14: {  	Get ();  	break;  }  case 15: {  	Get ();  	break;  }  case 16: {  	Get ();  	break;  }  case 17: {  	Get ();  	break;  }  case 18: {  	Get ();  	break;  }  case 19: {  	Get ();  	break;  }  case 20: {  	Get ();  	break;  }  case 21: {  	Get ();  	break;  }  default:  	SynErr (54);  	break;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,identity,The following statement contains a magic number: switch (la.kind) {  case 1: {  	Get ();  	break;  }  case 22: {  	Get ();  	break;  }  case 9: {  	Get ();  	break;  }  case 12: {  	Get ();  	break;  }  case 13: {  	Get ();  	break;  }  case 14: {  	Get ();  	break;  }  case 15: {  	Get ();  	break;  }  case 16: {  	Get ();  	break;  }  case 17: {  	Get ();  	break;  }  case 18: {  	Get ();  	break;  }  case 19: {  	Get ();  	break;  }  case 20: {  	Get ();  	break;  }  case 21: {  	Get ();  	break;  }  default:  	SynErr (54);  	break;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,identity,The following statement contains a magic number: switch (la.kind) {  case 1: {  	Get ();  	break;  }  case 22: {  	Get ();  	break;  }  case 9: {  	Get ();  	break;  }  case 12: {  	Get ();  	break;  }  case 13: {  	Get ();  	break;  }  case 14: {  	Get ();  	break;  }  case 15: {  	Get ();  	break;  }  case 16: {  	Get ();  	break;  }  case 17: {  	Get ();  	break;  }  case 18: {  	Get ();  	break;  }  case 19: {  	Get ();  	break;  }  case 20: {  	Get ();  	break;  }  case 21: {  	Get ();  	break;  }  default:  	SynErr (54);  	break;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,identity,The following statement contains a magic number: switch (la.kind) {  case 1: {  	Get ();  	break;  }  case 22: {  	Get ();  	break;  }  case 9: {  	Get ();  	break;  }  case 12: {  	Get ();  	break;  }  case 13: {  	Get ();  	break;  }  case 14: {  	Get ();  	break;  }  case 15: {  	Get ();  	break;  }  case 16: {  	Get ();  	break;  }  case 17: {  	Get ();  	break;  }  case 18: {  	Get ();  	break;  }  case 19: {  	Get ();  	break;  }  case 20: {  	Get ();  	break;  }  case 21: {  	Get ();  	break;  }  default:  	SynErr (54);  	break;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,identity,The following statement contains a magic number: switch (la.kind) {  case 1: {  	Get ();  	break;  }  case 22: {  	Get ();  	break;  }  case 9: {  	Get ();  	break;  }  case 12: {  	Get ();  	break;  }  case 13: {  	Get ();  	break;  }  case 14: {  	Get ();  	break;  }  case 15: {  	Get ();  	break;  }  case 16: {  	Get ();  	break;  }  case 17: {  	Get ();  	break;  }  case 18: {  	Get ();  	break;  }  case 19: {  	Get ();  	break;  }  case 20: {  	Get ();  	break;  }  case 21: {  	Get ();  	break;  }  default:  	SynErr (54);  	break;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,identity,The following statement contains a magic number: switch (la.kind) {  case 1: {  	Get ();  	break;  }  case 22: {  	Get ();  	break;  }  case 9: {  	Get ();  	break;  }  case 12: {  	Get ();  	break;  }  case 13: {  	Get ();  	break;  }  case 14: {  	Get ();  	break;  }  case 15: {  	Get ();  	break;  }  case 16: {  	Get ();  	break;  }  case 17: {  	Get ();  	break;  }  case 18: {  	Get ();  	break;  }  case 19: {  	Get ();  	break;  }  case 20: {  	Get ();  	break;  }  case 21: {  	Get ();  	break;  }  default:  	SynErr (54);  	break;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,identity,The following statement contains a magic number: switch (la.kind) {  case 1: {  	Get ();  	break;  }  case 22: {  	Get ();  	break;  }  case 9: {  	Get ();  	break;  }  case 12: {  	Get ();  	break;  }  case 13: {  	Get ();  	break;  }  case 14: {  	Get ();  	break;  }  case 15: {  	Get ();  	break;  }  case 16: {  	Get ();  	break;  }  case 17: {  	Get ();  	break;  }  case 18: {  	Get ();  	break;  }  case 19: {  	Get ();  	break;  }  case 20: {  	Get ();  	break;  }  case 21: {  	Get ();  	break;  }  default:  	SynErr (54);  	break;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,identity,The following statement contains a magic number: SynErr (54);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,expr,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,expr,The following statement contains a magic number: while (StartOf (11)) {  	if (la.kind == 25 || la.kind == 46) {  		if (la.kind == 46) {  			Get ();  			sep = '/';  		}  		else {  			Get ();  			sep = ''';  		}  		while (la.kind == 4) {  			Get ();  		}  	}  	term (out trm);  	if (sep.HasValue) {  		trm.Seperator = sep.Value;  	}  	exp.Terms.Add (trm);  	sep = null;  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,expr,The following statement contains a magic number: while (StartOf (11)) {  	if (la.kind == 25 || la.kind == 46) {  		if (la.kind == 46) {  			Get ();  			sep = '/';  		}  		else {  			Get ();  			sep = ''';  		}  		while (la.kind == 4) {  			Get ();  		}  	}  	term (out trm);  	if (sep.HasValue) {  		trm.Seperator = sep.Value;  	}  	exp.Terms.Add (trm);  	sep = null;  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,expr,The following statement contains a magic number: while (StartOf (11)) {  	if (la.kind == 25 || la.kind == 46) {  		if (la.kind == 46) {  			Get ();  			sep = '/';  		}  		else {  			Get ();  			sep = ''';  		}  		while (la.kind == 4) {  			Get ();  		}  	}  	term (out trm);  	if (sep.HasValue) {  		trm.Seperator = sep.Value;  	}  	exp.Terms.Add (trm);  	sep = null;  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,expr,The following statement contains a magic number: while (StartOf (11)) {  	if (la.kind == 25 || la.kind == 46) {  		if (la.kind == 46) {  			Get ();  			sep = '/';  		}  		else {  			Get ();  			sep = ''';  		}  		while (la.kind == 4) {  			Get ();  		}  	}  	term (out trm);  	if (sep.HasValue) {  		trm.Seperator = sep.Value;  	}  	exp.Terms.Add (trm);  	sep = null;  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,expr,The following statement contains a magic number: while (StartOf (11)) {  	if (la.kind == 25 || la.kind == 46) {  		if (la.kind == 46) {  			Get ();  			sep = '/';  		}  		else {  			Get ();  			sep = ''';  		}  		while (la.kind == 4) {  			Get ();  		}  	}  	term (out trm);  	if (sep.HasValue) {  		trm.Seperator = sep.Value;  	}  	exp.Terms.Add (trm);  	sep = null;  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,expr,The following statement contains a magic number: while (StartOf (11)) {  	if (la.kind == 25 || la.kind == 46) {  		if (la.kind == 46) {  			Get ();  			sep = '/';  		}  		else {  			Get ();  			sep = ''';  		}  		while (la.kind == 4) {  			Get ();  		}  	}  	term (out trm);  	if (sep.HasValue) {  		trm.Seperator = sep.Value;  	}  	exp.Terms.Add (trm);  	sep = null;  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,expr,The following statement contains a magic number: if (la.kind == 25 || la.kind == 46) {  	if (la.kind == 46) {  		Get ();  		sep = '/';  	}  	else {  		Get ();  		sep = ''';  	}  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,expr,The following statement contains a magic number: if (la.kind == 25 || la.kind == 46) {  	if (la.kind == 46) {  		Get ();  		sep = '/';  	}  	else {  		Get ();  		sep = ''';  	}  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,expr,The following statement contains a magic number: if (la.kind == 25 || la.kind == 46) {  	if (la.kind == 46) {  		Get ();  		sep = '/';  	}  	else {  		Get ();  		sep = ''';  	}  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,expr,The following statement contains a magic number: if (la.kind == 25 || la.kind == 46) {  	if (la.kind == 46) {  		Get ();  		sep = '/';  	}  	else {  		Get ();  		sep = ''';  	}  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,expr,The following statement contains a magic number: if (la.kind == 46) {  	Get ();  	sep = '/';  }  else {  	Get ();  	sep = ''';  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,expr,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,expr,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,declaration,The following statement contains a magic number: if (la.kind == 24) {  	Get ();  	dec.Name += "-";  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,declaration,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,declaration,The following statement contains a magic number: Expect (43);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,declaration,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,declaration,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,declaration,The following statement contains a magic number: if (la.kind == 44) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	Expect (45);  	dec.Important = true;  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,declaration,The following statement contains a magic number: if (la.kind == 44) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	Expect (45);  	dec.Important = true;  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,declaration,The following statement contains a magic number: if (la.kind == 44) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	Expect (45);  	dec.Important = true;  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,declaration,The following statement contains a magic number: if (la.kind == 44) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	Expect (45);  	dec.Important = true;  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,declaration,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,declaration,The following statement contains a magic number: Expect (45);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,declaration,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,selector,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,selector,The following statement contains a magic number: while (StartOf (12)) {  	if (la.kind == 29 || la.kind == 30 || la.kind == 31) {  		if (la.kind == 29) {  			Get ();  			cb = Model.Combinator.PrecededImmediatelyBy;  		}  		else if (la.kind == 30) {  			Get ();  			cb = Model.Combinator.ChildOf;  		}  		else {  			Get ();  			cb = Model.Combinator.PrecededBy;  		}  	}  	while (la.kind == 4) {  		Get ();  	}  	simpleselector (out ss);  	if (cb.HasValue) {  		ss.Combinator = cb.Value;  	}  	sel.SimpleSelectors.Add (ss);  	cb = null;  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,selector,The following statement contains a magic number: while (StartOf (12)) {  	if (la.kind == 29 || la.kind == 30 || la.kind == 31) {  		if (la.kind == 29) {  			Get ();  			cb = Model.Combinator.PrecededImmediatelyBy;  		}  		else if (la.kind == 30) {  			Get ();  			cb = Model.Combinator.ChildOf;  		}  		else {  			Get ();  			cb = Model.Combinator.PrecededBy;  		}  	}  	while (la.kind == 4) {  		Get ();  	}  	simpleselector (out ss);  	if (cb.HasValue) {  		ss.Combinator = cb.Value;  	}  	sel.SimpleSelectors.Add (ss);  	cb = null;  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,selector,The following statement contains a magic number: while (StartOf (12)) {  	if (la.kind == 29 || la.kind == 30 || la.kind == 31) {  		if (la.kind == 29) {  			Get ();  			cb = Model.Combinator.PrecededImmediatelyBy;  		}  		else if (la.kind == 30) {  			Get ();  			cb = Model.Combinator.ChildOf;  		}  		else {  			Get ();  			cb = Model.Combinator.PrecededBy;  		}  	}  	while (la.kind == 4) {  		Get ();  	}  	simpleselector (out ss);  	if (cb.HasValue) {  		ss.Combinator = cb.Value;  	}  	sel.SimpleSelectors.Add (ss);  	cb = null;  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,selector,The following statement contains a magic number: while (StartOf (12)) {  	if (la.kind == 29 || la.kind == 30 || la.kind == 31) {  		if (la.kind == 29) {  			Get ();  			cb = Model.Combinator.PrecededImmediatelyBy;  		}  		else if (la.kind == 30) {  			Get ();  			cb = Model.Combinator.ChildOf;  		}  		else {  			Get ();  			cb = Model.Combinator.PrecededBy;  		}  	}  	while (la.kind == 4) {  		Get ();  	}  	simpleselector (out ss);  	if (cb.HasValue) {  		ss.Combinator = cb.Value;  	}  	sel.SimpleSelectors.Add (ss);  	cb = null;  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,selector,The following statement contains a magic number: while (StartOf (12)) {  	if (la.kind == 29 || la.kind == 30 || la.kind == 31) {  		if (la.kind == 29) {  			Get ();  			cb = Model.Combinator.PrecededImmediatelyBy;  		}  		else if (la.kind == 30) {  			Get ();  			cb = Model.Combinator.ChildOf;  		}  		else {  			Get ();  			cb = Model.Combinator.PrecededBy;  		}  	}  	while (la.kind == 4) {  		Get ();  	}  	simpleselector (out ss);  	if (cb.HasValue) {  		ss.Combinator = cb.Value;  	}  	sel.SimpleSelectors.Add (ss);  	cb = null;  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,selector,The following statement contains a magic number: while (StartOf (12)) {  	if (la.kind == 29 || la.kind == 30 || la.kind == 31) {  		if (la.kind == 29) {  			Get ();  			cb = Model.Combinator.PrecededImmediatelyBy;  		}  		else if (la.kind == 30) {  			Get ();  			cb = Model.Combinator.ChildOf;  		}  		else {  			Get ();  			cb = Model.Combinator.PrecededBy;  		}  	}  	while (la.kind == 4) {  		Get ();  	}  	simpleselector (out ss);  	if (cb.HasValue) {  		ss.Combinator = cb.Value;  	}  	sel.SimpleSelectors.Add (ss);  	cb = null;  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,selector,The following statement contains a magic number: while (StartOf (12)) {  	if (la.kind == 29 || la.kind == 30 || la.kind == 31) {  		if (la.kind == 29) {  			Get ();  			cb = Model.Combinator.PrecededImmediatelyBy;  		}  		else if (la.kind == 30) {  			Get ();  			cb = Model.Combinator.ChildOf;  		}  		else {  			Get ();  			cb = Model.Combinator.PrecededBy;  		}  	}  	while (la.kind == 4) {  		Get ();  	}  	simpleselector (out ss);  	if (cb.HasValue) {  		ss.Combinator = cb.Value;  	}  	sel.SimpleSelectors.Add (ss);  	cb = null;  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,selector,The following statement contains a magic number: while (StartOf (12)) {  	if (la.kind == 29 || la.kind == 30 || la.kind == 31) {  		if (la.kind == 29) {  			Get ();  			cb = Model.Combinator.PrecededImmediatelyBy;  		}  		else if (la.kind == 30) {  			Get ();  			cb = Model.Combinator.ChildOf;  		}  		else {  			Get ();  			cb = Model.Combinator.PrecededBy;  		}  	}  	while (la.kind == 4) {  		Get ();  	}  	simpleselector (out ss);  	if (cb.HasValue) {  		ss.Combinator = cb.Value;  	}  	sel.SimpleSelectors.Add (ss);  	cb = null;  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,selector,The following statement contains a magic number: if (la.kind == 29 || la.kind == 30 || la.kind == 31) {  	if (la.kind == 29) {  		Get ();  		cb = Model.Combinator.PrecededImmediatelyBy;  	}  	else if (la.kind == 30) {  		Get ();  		cb = Model.Combinator.ChildOf;  	}  	else {  		Get ();  		cb = Model.Combinator.PrecededBy;  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,selector,The following statement contains a magic number: if (la.kind == 29 || la.kind == 30 || la.kind == 31) {  	if (la.kind == 29) {  		Get ();  		cb = Model.Combinator.PrecededImmediatelyBy;  	}  	else if (la.kind == 30) {  		Get ();  		cb = Model.Combinator.ChildOf;  	}  	else {  		Get ();  		cb = Model.Combinator.PrecededBy;  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,selector,The following statement contains a magic number: if (la.kind == 29 || la.kind == 30 || la.kind == 31) {  	if (la.kind == 29) {  		Get ();  		cb = Model.Combinator.PrecededImmediatelyBy;  	}  	else if (la.kind == 30) {  		Get ();  		cb = Model.Combinator.ChildOf;  	}  	else {  		Get ();  		cb = Model.Combinator.PrecededBy;  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,selector,The following statement contains a magic number: if (la.kind == 29 || la.kind == 30 || la.kind == 31) {  	if (la.kind == 29) {  		Get ();  		cb = Model.Combinator.PrecededImmediatelyBy;  	}  	else if (la.kind == 30) {  		Get ();  		cb = Model.Combinator.ChildOf;  	}  	else {  		Get ();  		cb = Model.Combinator.PrecededBy;  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,selector,The following statement contains a magic number: if (la.kind == 29 || la.kind == 30 || la.kind == 31) {  	if (la.kind == 29) {  		Get ();  		cb = Model.Combinator.PrecededImmediatelyBy;  	}  	else if (la.kind == 30) {  		Get ();  		cb = Model.Combinator.ChildOf;  	}  	else {  		Get ();  		cb = Model.Combinator.PrecededBy;  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,selector,The following statement contains a magic number: if (la.kind == 29) {  	Get ();  	cb = Model.Combinator.PrecededImmediatelyBy;  }  else if (la.kind == 30) {  	Get ();  	cb = Model.Combinator.ChildOf;  }  else {  	Get ();  	cb = Model.Combinator.PrecededBy;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,selector,The following statement contains a magic number: if (la.kind == 29) {  	Get ();  	cb = Model.Combinator.PrecededImmediatelyBy;  }  else if (la.kind == 30) {  	Get ();  	cb = Model.Combinator.ChildOf;  }  else {  	Get ();  	cb = Model.Combinator.PrecededBy;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,selector,The following statement contains a magic number: if (la.kind == 30) {  	Get ();  	cb = Model.Combinator.ChildOf;  }  else {  	Get ();  	cb = Model.Combinator.PrecededBy;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,selector,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,selector,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (StartOf (3)) {  	if (la.kind == 24) {  		Get ();  		ss.ElementName += "-";  	}  	identity (out ident);  	ss.ElementName += ident;  }  else if (la.kind == 32) {  	Get ();  	ss.ElementName = "*";  }  else if (StartOf (13)) {  	if (la.kind == 33) {  		Get ();  		if (la.kind == 24) {  			Get ();  			ss.ID = "-";  		}  		identity (out ident);  		if (ss.ID == null) {  			ss.ID = ident;  		}  		else {  			ss.ID += ident;  		}  	}  	else if (la.kind == 34) {  		Get ();  		ss.Class = "";  		if (la.kind == 24) {  			Get ();  			ss.Class += "-";  		}  		identity (out ident);  		ss.Class += ident;  	}  	else if (la.kind == 35) {  		attrib (out atb);  		ss.Attribute = atb;  	}  	else {  		pseudo (out psd);  		ss.Pseudo = psd;  	}  }  else  	SynErr (55);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (StartOf (3)) {  	if (la.kind == 24) {  		Get ();  		ss.ElementName += "-";  	}  	identity (out ident);  	ss.ElementName += ident;  }  else if (la.kind == 32) {  	Get ();  	ss.ElementName = "*";  }  else if (StartOf (13)) {  	if (la.kind == 33) {  		Get ();  		if (la.kind == 24) {  			Get ();  			ss.ID = "-";  		}  		identity (out ident);  		if (ss.ID == null) {  			ss.ID = ident;  		}  		else {  			ss.ID += ident;  		}  	}  	else if (la.kind == 34) {  		Get ();  		ss.Class = "";  		if (la.kind == 24) {  			Get ();  			ss.Class += "-";  		}  		identity (out ident);  		ss.Class += ident;  	}  	else if (la.kind == 35) {  		attrib (out atb);  		ss.Attribute = atb;  	}  	else {  		pseudo (out psd);  		ss.Pseudo = psd;  	}  }  else  	SynErr (55);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (StartOf (3)) {  	if (la.kind == 24) {  		Get ();  		ss.ElementName += "-";  	}  	identity (out ident);  	ss.ElementName += ident;  }  else if (la.kind == 32) {  	Get ();  	ss.ElementName = "*";  }  else if (StartOf (13)) {  	if (la.kind == 33) {  		Get ();  		if (la.kind == 24) {  			Get ();  			ss.ID = "-";  		}  		identity (out ident);  		if (ss.ID == null) {  			ss.ID = ident;  		}  		else {  			ss.ID += ident;  		}  	}  	else if (la.kind == 34) {  		Get ();  		ss.Class = "";  		if (la.kind == 24) {  			Get ();  			ss.Class += "-";  		}  		identity (out ident);  		ss.Class += ident;  	}  	else if (la.kind == 35) {  		attrib (out atb);  		ss.Attribute = atb;  	}  	else {  		pseudo (out psd);  		ss.Pseudo = psd;  	}  }  else  	SynErr (55);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (StartOf (3)) {  	if (la.kind == 24) {  		Get ();  		ss.ElementName += "-";  	}  	identity (out ident);  	ss.ElementName += ident;  }  else if (la.kind == 32) {  	Get ();  	ss.ElementName = "*";  }  else if (StartOf (13)) {  	if (la.kind == 33) {  		Get ();  		if (la.kind == 24) {  			Get ();  			ss.ID = "-";  		}  		identity (out ident);  		if (ss.ID == null) {  			ss.ID = ident;  		}  		else {  			ss.ID += ident;  		}  	}  	else if (la.kind == 34) {  		Get ();  		ss.Class = "";  		if (la.kind == 24) {  			Get ();  			ss.Class += "-";  		}  		identity (out ident);  		ss.Class += ident;  	}  	else if (la.kind == 35) {  		attrib (out atb);  		ss.Attribute = atb;  	}  	else {  		pseudo (out psd);  		ss.Pseudo = psd;  	}  }  else  	SynErr (55);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (StartOf (3)) {  	if (la.kind == 24) {  		Get ();  		ss.ElementName += "-";  	}  	identity (out ident);  	ss.ElementName += ident;  }  else if (la.kind == 32) {  	Get ();  	ss.ElementName = "*";  }  else if (StartOf (13)) {  	if (la.kind == 33) {  		Get ();  		if (la.kind == 24) {  			Get ();  			ss.ID = "-";  		}  		identity (out ident);  		if (ss.ID == null) {  			ss.ID = ident;  		}  		else {  			ss.ID += ident;  		}  	}  	else if (la.kind == 34) {  		Get ();  		ss.Class = "";  		if (la.kind == 24) {  			Get ();  			ss.Class += "-";  		}  		identity (out ident);  		ss.Class += ident;  	}  	else if (la.kind == 35) {  		attrib (out atb);  		ss.Attribute = atb;  	}  	else {  		pseudo (out psd);  		ss.Pseudo = psd;  	}  }  else  	SynErr (55);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (StartOf (3)) {  	if (la.kind == 24) {  		Get ();  		ss.ElementName += "-";  	}  	identity (out ident);  	ss.ElementName += ident;  }  else if (la.kind == 32) {  	Get ();  	ss.ElementName = "*";  }  else if (StartOf (13)) {  	if (la.kind == 33) {  		Get ();  		if (la.kind == 24) {  			Get ();  			ss.ID = "-";  		}  		identity (out ident);  		if (ss.ID == null) {  			ss.ID = ident;  		}  		else {  			ss.ID += ident;  		}  	}  	else if (la.kind == 34) {  		Get ();  		ss.Class = "";  		if (la.kind == 24) {  			Get ();  			ss.Class += "-";  		}  		identity (out ident);  		ss.Class += ident;  	}  	else if (la.kind == 35) {  		attrib (out atb);  		ss.Attribute = atb;  	}  	else {  		pseudo (out psd);  		ss.Pseudo = psd;  	}  }  else  	SynErr (55);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (StartOf (3)) {  	if (la.kind == 24) {  		Get ();  		ss.ElementName += "-";  	}  	identity (out ident);  	ss.ElementName += ident;  }  else if (la.kind == 32) {  	Get ();  	ss.ElementName = "*";  }  else if (StartOf (13)) {  	if (la.kind == 33) {  		Get ();  		if (la.kind == 24) {  			Get ();  			ss.ID = "-";  		}  		identity (out ident);  		if (ss.ID == null) {  			ss.ID = ident;  		}  		else {  			ss.ID += ident;  		}  	}  	else if (la.kind == 34) {  		Get ();  		ss.Class = "";  		if (la.kind == 24) {  			Get ();  			ss.Class += "-";  		}  		identity (out ident);  		ss.Class += ident;  	}  	else if (la.kind == 35) {  		attrib (out atb);  		ss.Attribute = atb;  	}  	else {  		pseudo (out psd);  		ss.Pseudo = psd;  	}  }  else  	SynErr (55);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (StartOf (3)) {  	if (la.kind == 24) {  		Get ();  		ss.ElementName += "-";  	}  	identity (out ident);  	ss.ElementName += ident;  }  else if (la.kind == 32) {  	Get ();  	ss.ElementName = "*";  }  else if (StartOf (13)) {  	if (la.kind == 33) {  		Get ();  		if (la.kind == 24) {  			Get ();  			ss.ID = "-";  		}  		identity (out ident);  		if (ss.ID == null) {  			ss.ID = ident;  		}  		else {  			ss.ID += ident;  		}  	}  	else if (la.kind == 34) {  		Get ();  		ss.Class = "";  		if (la.kind == 24) {  			Get ();  			ss.Class += "-";  		}  		identity (out ident);  		ss.Class += ident;  	}  	else if (la.kind == 35) {  		attrib (out atb);  		ss.Attribute = atb;  	}  	else {  		pseudo (out psd);  		ss.Pseudo = psd;  	}  }  else  	SynErr (55);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (StartOf (3)) {  	if (la.kind == 24) {  		Get ();  		ss.ElementName += "-";  	}  	identity (out ident);  	ss.ElementName += ident;  }  else if (la.kind == 32) {  	Get ();  	ss.ElementName = "*";  }  else if (StartOf (13)) {  	if (la.kind == 33) {  		Get ();  		if (la.kind == 24) {  			Get ();  			ss.ID = "-";  		}  		identity (out ident);  		if (ss.ID == null) {  			ss.ID = ident;  		}  		else {  			ss.ID += ident;  		}  	}  	else if (la.kind == 34) {  		Get ();  		ss.Class = "";  		if (la.kind == 24) {  			Get ();  			ss.Class += "-";  		}  		identity (out ident);  		ss.Class += ident;  	}  	else if (la.kind == 35) {  		attrib (out atb);  		ss.Attribute = atb;  	}  	else {  		pseudo (out psd);  		ss.Pseudo = psd;  	}  }  else  	SynErr (55);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (StartOf (3)) {  	if (la.kind == 24) {  		Get ();  		ss.ElementName += "-";  	}  	identity (out ident);  	ss.ElementName += ident;  }  else if (la.kind == 32) {  	Get ();  	ss.ElementName = "*";  }  else if (StartOf (13)) {  	if (la.kind == 33) {  		Get ();  		if (la.kind == 24) {  			Get ();  			ss.ID = "-";  		}  		identity (out ident);  		if (ss.ID == null) {  			ss.ID = ident;  		}  		else {  			ss.ID += ident;  		}  	}  	else if (la.kind == 34) {  		Get ();  		ss.Class = "";  		if (la.kind == 24) {  			Get ();  			ss.Class += "-";  		}  		identity (out ident);  		ss.Class += ident;  	}  	else if (la.kind == 35) {  		attrib (out atb);  		ss.Attribute = atb;  	}  	else {  		pseudo (out psd);  		ss.Pseudo = psd;  	}  }  else  	SynErr (55);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (la.kind == 24) {  	Get ();  	ss.ElementName += "-";  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (la.kind == 32) {  	Get ();  	ss.ElementName = "*";  }  else if (StartOf (13)) {  	if (la.kind == 33) {  		Get ();  		if (la.kind == 24) {  			Get ();  			ss.ID = "-";  		}  		identity (out ident);  		if (ss.ID == null) {  			ss.ID = ident;  		}  		else {  			ss.ID += ident;  		}  	}  	else if (la.kind == 34) {  		Get ();  		ss.Class = "";  		if (la.kind == 24) {  			Get ();  			ss.Class += "-";  		}  		identity (out ident);  		ss.Class += ident;  	}  	else if (la.kind == 35) {  		attrib (out atb);  		ss.Attribute = atb;  	}  	else {  		pseudo (out psd);  		ss.Pseudo = psd;  	}  }  else  	SynErr (55);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (la.kind == 32) {  	Get ();  	ss.ElementName = "*";  }  else if (StartOf (13)) {  	if (la.kind == 33) {  		Get ();  		if (la.kind == 24) {  			Get ();  			ss.ID = "-";  		}  		identity (out ident);  		if (ss.ID == null) {  			ss.ID = ident;  		}  		else {  			ss.ID += ident;  		}  	}  	else if (la.kind == 34) {  		Get ();  		ss.Class = "";  		if (la.kind == 24) {  			Get ();  			ss.Class += "-";  		}  		identity (out ident);  		ss.Class += ident;  	}  	else if (la.kind == 35) {  		attrib (out atb);  		ss.Attribute = atb;  	}  	else {  		pseudo (out psd);  		ss.Pseudo = psd;  	}  }  else  	SynErr (55);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (la.kind == 32) {  	Get ();  	ss.ElementName = "*";  }  else if (StartOf (13)) {  	if (la.kind == 33) {  		Get ();  		if (la.kind == 24) {  			Get ();  			ss.ID = "-";  		}  		identity (out ident);  		if (ss.ID == null) {  			ss.ID = ident;  		}  		else {  			ss.ID += ident;  		}  	}  	else if (la.kind == 34) {  		Get ();  		ss.Class = "";  		if (la.kind == 24) {  			Get ();  			ss.Class += "-";  		}  		identity (out ident);  		ss.Class += ident;  	}  	else if (la.kind == 35) {  		attrib (out atb);  		ss.Attribute = atb;  	}  	else {  		pseudo (out psd);  		ss.Pseudo = psd;  	}  }  else  	SynErr (55);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (la.kind == 32) {  	Get ();  	ss.ElementName = "*";  }  else if (StartOf (13)) {  	if (la.kind == 33) {  		Get ();  		if (la.kind == 24) {  			Get ();  			ss.ID = "-";  		}  		identity (out ident);  		if (ss.ID == null) {  			ss.ID = ident;  		}  		else {  			ss.ID += ident;  		}  	}  	else if (la.kind == 34) {  		Get ();  		ss.Class = "";  		if (la.kind == 24) {  			Get ();  			ss.Class += "-";  		}  		identity (out ident);  		ss.Class += ident;  	}  	else if (la.kind == 35) {  		attrib (out atb);  		ss.Attribute = atb;  	}  	else {  		pseudo (out psd);  		ss.Pseudo = psd;  	}  }  else  	SynErr (55);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (la.kind == 32) {  	Get ();  	ss.ElementName = "*";  }  else if (StartOf (13)) {  	if (la.kind == 33) {  		Get ();  		if (la.kind == 24) {  			Get ();  			ss.ID = "-";  		}  		identity (out ident);  		if (ss.ID == null) {  			ss.ID = ident;  		}  		else {  			ss.ID += ident;  		}  	}  	else if (la.kind == 34) {  		Get ();  		ss.Class = "";  		if (la.kind == 24) {  			Get ();  			ss.Class += "-";  		}  		identity (out ident);  		ss.Class += ident;  	}  	else if (la.kind == 35) {  		attrib (out atb);  		ss.Attribute = atb;  	}  	else {  		pseudo (out psd);  		ss.Pseudo = psd;  	}  }  else  	SynErr (55);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (la.kind == 32) {  	Get ();  	ss.ElementName = "*";  }  else if (StartOf (13)) {  	if (la.kind == 33) {  		Get ();  		if (la.kind == 24) {  			Get ();  			ss.ID = "-";  		}  		identity (out ident);  		if (ss.ID == null) {  			ss.ID = ident;  		}  		else {  			ss.ID += ident;  		}  	}  	else if (la.kind == 34) {  		Get ();  		ss.Class = "";  		if (la.kind == 24) {  			Get ();  			ss.Class += "-";  		}  		identity (out ident);  		ss.Class += ident;  	}  	else if (la.kind == 35) {  		attrib (out atb);  		ss.Attribute = atb;  	}  	else {  		pseudo (out psd);  		ss.Pseudo = psd;  	}  }  else  	SynErr (55);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (la.kind == 32) {  	Get ();  	ss.ElementName = "*";  }  else if (StartOf (13)) {  	if (la.kind == 33) {  		Get ();  		if (la.kind == 24) {  			Get ();  			ss.ID = "-";  		}  		identity (out ident);  		if (ss.ID == null) {  			ss.ID = ident;  		}  		else {  			ss.ID += ident;  		}  	}  	else if (la.kind == 34) {  		Get ();  		ss.Class = "";  		if (la.kind == 24) {  			Get ();  			ss.Class += "-";  		}  		identity (out ident);  		ss.Class += ident;  	}  	else if (la.kind == 35) {  		attrib (out atb);  		ss.Attribute = atb;  	}  	else {  		pseudo (out psd);  		ss.Pseudo = psd;  	}  }  else  	SynErr (55);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (la.kind == 32) {  	Get ();  	ss.ElementName = "*";  }  else if (StartOf (13)) {  	if (la.kind == 33) {  		Get ();  		if (la.kind == 24) {  			Get ();  			ss.ID = "-";  		}  		identity (out ident);  		if (ss.ID == null) {  			ss.ID = ident;  		}  		else {  			ss.ID += ident;  		}  	}  	else if (la.kind == 34) {  		Get ();  		ss.Class = "";  		if (la.kind == 24) {  			Get ();  			ss.Class += "-";  		}  		identity (out ident);  		ss.Class += ident;  	}  	else if (la.kind == 35) {  		attrib (out atb);  		ss.Attribute = atb;  	}  	else {  		pseudo (out psd);  		ss.Pseudo = psd;  	}  }  else  	SynErr (55);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (StartOf (13)) {  	if (la.kind == 33) {  		Get ();  		if (la.kind == 24) {  			Get ();  			ss.ID = "-";  		}  		identity (out ident);  		if (ss.ID == null) {  			ss.ID = ident;  		}  		else {  			ss.ID += ident;  		}  	}  	else if (la.kind == 34) {  		Get ();  		ss.Class = "";  		if (la.kind == 24) {  			Get ();  			ss.Class += "-";  		}  		identity (out ident);  		ss.Class += ident;  	}  	else if (la.kind == 35) {  		attrib (out atb);  		ss.Attribute = atb;  	}  	else {  		pseudo (out psd);  		ss.Pseudo = psd;  	}  }  else  	SynErr (55);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (StartOf (13)) {  	if (la.kind == 33) {  		Get ();  		if (la.kind == 24) {  			Get ();  			ss.ID = "-";  		}  		identity (out ident);  		if (ss.ID == null) {  			ss.ID = ident;  		}  		else {  			ss.ID += ident;  		}  	}  	else if (la.kind == 34) {  		Get ();  		ss.Class = "";  		if (la.kind == 24) {  			Get ();  			ss.Class += "-";  		}  		identity (out ident);  		ss.Class += ident;  	}  	else if (la.kind == 35) {  		attrib (out atb);  		ss.Attribute = atb;  	}  	else {  		pseudo (out psd);  		ss.Pseudo = psd;  	}  }  else  	SynErr (55);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (StartOf (13)) {  	if (la.kind == 33) {  		Get ();  		if (la.kind == 24) {  			Get ();  			ss.ID = "-";  		}  		identity (out ident);  		if (ss.ID == null) {  			ss.ID = ident;  		}  		else {  			ss.ID += ident;  		}  	}  	else if (la.kind == 34) {  		Get ();  		ss.Class = "";  		if (la.kind == 24) {  			Get ();  			ss.Class += "-";  		}  		identity (out ident);  		ss.Class += ident;  	}  	else if (la.kind == 35) {  		attrib (out atb);  		ss.Attribute = atb;  	}  	else {  		pseudo (out psd);  		ss.Pseudo = psd;  	}  }  else  	SynErr (55);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (StartOf (13)) {  	if (la.kind == 33) {  		Get ();  		if (la.kind == 24) {  			Get ();  			ss.ID = "-";  		}  		identity (out ident);  		if (ss.ID == null) {  			ss.ID = ident;  		}  		else {  			ss.ID += ident;  		}  	}  	else if (la.kind == 34) {  		Get ();  		ss.Class = "";  		if (la.kind == 24) {  			Get ();  			ss.Class += "-";  		}  		identity (out ident);  		ss.Class += ident;  	}  	else if (la.kind == 35) {  		attrib (out atb);  		ss.Attribute = atb;  	}  	else {  		pseudo (out psd);  		ss.Pseudo = psd;  	}  }  else  	SynErr (55);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (StartOf (13)) {  	if (la.kind == 33) {  		Get ();  		if (la.kind == 24) {  			Get ();  			ss.ID = "-";  		}  		identity (out ident);  		if (ss.ID == null) {  			ss.ID = ident;  		}  		else {  			ss.ID += ident;  		}  	}  	else if (la.kind == 34) {  		Get ();  		ss.Class = "";  		if (la.kind == 24) {  			Get ();  			ss.Class += "-";  		}  		identity (out ident);  		ss.Class += ident;  	}  	else if (la.kind == 35) {  		attrib (out atb);  		ss.Attribute = atb;  	}  	else {  		pseudo (out psd);  		ss.Pseudo = psd;  	}  }  else  	SynErr (55);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (StartOf (13)) {  	if (la.kind == 33) {  		Get ();  		if (la.kind == 24) {  			Get ();  			ss.ID = "-";  		}  		identity (out ident);  		if (ss.ID == null) {  			ss.ID = ident;  		}  		else {  			ss.ID += ident;  		}  	}  	else if (la.kind == 34) {  		Get ();  		ss.Class = "";  		if (la.kind == 24) {  			Get ();  			ss.Class += "-";  		}  		identity (out ident);  		ss.Class += ident;  	}  	else if (la.kind == 35) {  		attrib (out atb);  		ss.Attribute = atb;  	}  	else {  		pseudo (out psd);  		ss.Pseudo = psd;  	}  }  else  	SynErr (55);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (StartOf (13)) {  	if (la.kind == 33) {  		Get ();  		if (la.kind == 24) {  			Get ();  			ss.ID = "-";  		}  		identity (out ident);  		if (ss.ID == null) {  			ss.ID = ident;  		}  		else {  			ss.ID += ident;  		}  	}  	else if (la.kind == 34) {  		Get ();  		ss.Class = "";  		if (la.kind == 24) {  			Get ();  			ss.Class += "-";  		}  		identity (out ident);  		ss.Class += ident;  	}  	else if (la.kind == 35) {  		attrib (out atb);  		ss.Attribute = atb;  	}  	else {  		pseudo (out psd);  		ss.Pseudo = psd;  	}  }  else  	SynErr (55);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (la.kind == 33) {  	Get ();  	if (la.kind == 24) {  		Get ();  		ss.ID = "-";  	}  	identity (out ident);  	if (ss.ID == null) {  		ss.ID = ident;  	}  	else {  		ss.ID += ident;  	}  }  else if (la.kind == 34) {  	Get ();  	ss.Class = "";  	if (la.kind == 24) {  		Get ();  		ss.Class += "-";  	}  	identity (out ident);  	ss.Class += ident;  }  else if (la.kind == 35) {  	attrib (out atb);  	ss.Attribute = atb;  }  else {  	pseudo (out psd);  	ss.Pseudo = psd;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (la.kind == 33) {  	Get ();  	if (la.kind == 24) {  		Get ();  		ss.ID = "-";  	}  	identity (out ident);  	if (ss.ID == null) {  		ss.ID = ident;  	}  	else {  		ss.ID += ident;  	}  }  else if (la.kind == 34) {  	Get ();  	ss.Class = "";  	if (la.kind == 24) {  		Get ();  		ss.Class += "-";  	}  	identity (out ident);  	ss.Class += ident;  }  else if (la.kind == 35) {  	attrib (out atb);  	ss.Attribute = atb;  }  else {  	pseudo (out psd);  	ss.Pseudo = psd;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (la.kind == 33) {  	Get ();  	if (la.kind == 24) {  		Get ();  		ss.ID = "-";  	}  	identity (out ident);  	if (ss.ID == null) {  		ss.ID = ident;  	}  	else {  		ss.ID += ident;  	}  }  else if (la.kind == 34) {  	Get ();  	ss.Class = "";  	if (la.kind == 24) {  		Get ();  		ss.Class += "-";  	}  	identity (out ident);  	ss.Class += ident;  }  else if (la.kind == 35) {  	attrib (out atb);  	ss.Attribute = atb;  }  else {  	pseudo (out psd);  	ss.Pseudo = psd;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (la.kind == 33) {  	Get ();  	if (la.kind == 24) {  		Get ();  		ss.ID = "-";  	}  	identity (out ident);  	if (ss.ID == null) {  		ss.ID = ident;  	}  	else {  		ss.ID += ident;  	}  }  else if (la.kind == 34) {  	Get ();  	ss.Class = "";  	if (la.kind == 24) {  		Get ();  		ss.Class += "-";  	}  	identity (out ident);  	ss.Class += ident;  }  else if (la.kind == 35) {  	attrib (out atb);  	ss.Attribute = atb;  }  else {  	pseudo (out psd);  	ss.Pseudo = psd;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (la.kind == 33) {  	Get ();  	if (la.kind == 24) {  		Get ();  		ss.ID = "-";  	}  	identity (out ident);  	if (ss.ID == null) {  		ss.ID = ident;  	}  	else {  		ss.ID += ident;  	}  }  else if (la.kind == 34) {  	Get ();  	ss.Class = "";  	if (la.kind == 24) {  		Get ();  		ss.Class += "-";  	}  	identity (out ident);  	ss.Class += ident;  }  else if (la.kind == 35) {  	attrib (out atb);  	ss.Attribute = atb;  }  else {  	pseudo (out psd);  	ss.Pseudo = psd;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (la.kind == 24) {  	Get ();  	ss.ID = "-";  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (la.kind == 34) {  	Get ();  	ss.Class = "";  	if (la.kind == 24) {  		Get ();  		ss.Class += "-";  	}  	identity (out ident);  	ss.Class += ident;  }  else if (la.kind == 35) {  	attrib (out atb);  	ss.Attribute = atb;  }  else {  	pseudo (out psd);  	ss.Pseudo = psd;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (la.kind == 34) {  	Get ();  	ss.Class = "";  	if (la.kind == 24) {  		Get ();  		ss.Class += "-";  	}  	identity (out ident);  	ss.Class += ident;  }  else if (la.kind == 35) {  	attrib (out atb);  	ss.Attribute = atb;  }  else {  	pseudo (out psd);  	ss.Pseudo = psd;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (la.kind == 34) {  	Get ();  	ss.Class = "";  	if (la.kind == 24) {  		Get ();  		ss.Class += "-";  	}  	identity (out ident);  	ss.Class += ident;  }  else if (la.kind == 35) {  	attrib (out atb);  	ss.Attribute = atb;  }  else {  	pseudo (out psd);  	ss.Pseudo = psd;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (la.kind == 24) {  	Get ();  	ss.Class += "-";  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (la.kind == 35) {  	attrib (out atb);  	ss.Attribute = atb;  }  else {  	pseudo (out psd);  	ss.Pseudo = psd;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: SynErr (55);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: while (StartOf (13)) {  	Model.SimpleSelector child = new Model.SimpleSelector ();  	if (la.kind == 33) {  		Get ();  		if (la.kind == 24) {  			Get ();  			child.ID = "-";  		}  		identity (out ident);  		if (child.ID == null) {  			child.ID = ident;  		}  		else {  			child.ID += "-";  		}  	}  	else if (la.kind == 34) {  		Get ();  		child.Class = "";  		if (la.kind == 24) {  			Get ();  			child.Class += "-";  		}  		identity (out ident);  		child.Class += ident;  	}  	else if (la.kind == 35) {  		attrib (out atb);  		child.Attribute = atb;  	}  	else {  		pseudo (out psd);  		child.Pseudo = psd;  	}  	parent.Child = child;  	parent = child;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: while (StartOf (13)) {  	Model.SimpleSelector child = new Model.SimpleSelector ();  	if (la.kind == 33) {  		Get ();  		if (la.kind == 24) {  			Get ();  			child.ID = "-";  		}  		identity (out ident);  		if (child.ID == null) {  			child.ID = ident;  		}  		else {  			child.ID += "-";  		}  	}  	else if (la.kind == 34) {  		Get ();  		child.Class = "";  		if (la.kind == 24) {  			Get ();  			child.Class += "-";  		}  		identity (out ident);  		child.Class += ident;  	}  	else if (la.kind == 35) {  		attrib (out atb);  		child.Attribute = atb;  	}  	else {  		pseudo (out psd);  		child.Pseudo = psd;  	}  	parent.Child = child;  	parent = child;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: while (StartOf (13)) {  	Model.SimpleSelector child = new Model.SimpleSelector ();  	if (la.kind == 33) {  		Get ();  		if (la.kind == 24) {  			Get ();  			child.ID = "-";  		}  		identity (out ident);  		if (child.ID == null) {  			child.ID = ident;  		}  		else {  			child.ID += "-";  		}  	}  	else if (la.kind == 34) {  		Get ();  		child.Class = "";  		if (la.kind == 24) {  			Get ();  			child.Class += "-";  		}  		identity (out ident);  		child.Class += ident;  	}  	else if (la.kind == 35) {  		attrib (out atb);  		child.Attribute = atb;  	}  	else {  		pseudo (out psd);  		child.Pseudo = psd;  	}  	parent.Child = child;  	parent = child;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: while (StartOf (13)) {  	Model.SimpleSelector child = new Model.SimpleSelector ();  	if (la.kind == 33) {  		Get ();  		if (la.kind == 24) {  			Get ();  			child.ID = "-";  		}  		identity (out ident);  		if (child.ID == null) {  			child.ID = ident;  		}  		else {  			child.ID += "-";  		}  	}  	else if (la.kind == 34) {  		Get ();  		child.Class = "";  		if (la.kind == 24) {  			Get ();  			child.Class += "-";  		}  		identity (out ident);  		child.Class += ident;  	}  	else if (la.kind == 35) {  		attrib (out atb);  		child.Attribute = atb;  	}  	else {  		pseudo (out psd);  		child.Pseudo = psd;  	}  	parent.Child = child;  	parent = child;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: while (StartOf (13)) {  	Model.SimpleSelector child = new Model.SimpleSelector ();  	if (la.kind == 33) {  		Get ();  		if (la.kind == 24) {  			Get ();  			child.ID = "-";  		}  		identity (out ident);  		if (child.ID == null) {  			child.ID = ident;  		}  		else {  			child.ID += "-";  		}  	}  	else if (la.kind == 34) {  		Get ();  		child.Class = "";  		if (la.kind == 24) {  			Get ();  			child.Class += "-";  		}  		identity (out ident);  		child.Class += ident;  	}  	else if (la.kind == 35) {  		attrib (out atb);  		child.Attribute = atb;  	}  	else {  		pseudo (out psd);  		child.Pseudo = psd;  	}  	parent.Child = child;  	parent = child;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: while (StartOf (13)) {  	Model.SimpleSelector child = new Model.SimpleSelector ();  	if (la.kind == 33) {  		Get ();  		if (la.kind == 24) {  			Get ();  			child.ID = "-";  		}  		identity (out ident);  		if (child.ID == null) {  			child.ID = ident;  		}  		else {  			child.ID += "-";  		}  	}  	else if (la.kind == 34) {  		Get ();  		child.Class = "";  		if (la.kind == 24) {  			Get ();  			child.Class += "-";  		}  		identity (out ident);  		child.Class += ident;  	}  	else if (la.kind == 35) {  		attrib (out atb);  		child.Attribute = atb;  	}  	else {  		pseudo (out psd);  		child.Pseudo = psd;  	}  	parent.Child = child;  	parent = child;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (la.kind == 33) {  	Get ();  	if (la.kind == 24) {  		Get ();  		child.ID = "-";  	}  	identity (out ident);  	if (child.ID == null) {  		child.ID = ident;  	}  	else {  		child.ID += "-";  	}  }  else if (la.kind == 34) {  	Get ();  	child.Class = "";  	if (la.kind == 24) {  		Get ();  		child.Class += "-";  	}  	identity (out ident);  	child.Class += ident;  }  else if (la.kind == 35) {  	attrib (out atb);  	child.Attribute = atb;  }  else {  	pseudo (out psd);  	child.Pseudo = psd;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (la.kind == 33) {  	Get ();  	if (la.kind == 24) {  		Get ();  		child.ID = "-";  	}  	identity (out ident);  	if (child.ID == null) {  		child.ID = ident;  	}  	else {  		child.ID += "-";  	}  }  else if (la.kind == 34) {  	Get ();  	child.Class = "";  	if (la.kind == 24) {  		Get ();  		child.Class += "-";  	}  	identity (out ident);  	child.Class += ident;  }  else if (la.kind == 35) {  	attrib (out atb);  	child.Attribute = atb;  }  else {  	pseudo (out psd);  	child.Pseudo = psd;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (la.kind == 33) {  	Get ();  	if (la.kind == 24) {  		Get ();  		child.ID = "-";  	}  	identity (out ident);  	if (child.ID == null) {  		child.ID = ident;  	}  	else {  		child.ID += "-";  	}  }  else if (la.kind == 34) {  	Get ();  	child.Class = "";  	if (la.kind == 24) {  		Get ();  		child.Class += "-";  	}  	identity (out ident);  	child.Class += ident;  }  else if (la.kind == 35) {  	attrib (out atb);  	child.Attribute = atb;  }  else {  	pseudo (out psd);  	child.Pseudo = psd;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (la.kind == 33) {  	Get ();  	if (la.kind == 24) {  		Get ();  		child.ID = "-";  	}  	identity (out ident);  	if (child.ID == null) {  		child.ID = ident;  	}  	else {  		child.ID += "-";  	}  }  else if (la.kind == 34) {  	Get ();  	child.Class = "";  	if (la.kind == 24) {  		Get ();  		child.Class += "-";  	}  	identity (out ident);  	child.Class += ident;  }  else if (la.kind == 35) {  	attrib (out atb);  	child.Attribute = atb;  }  else {  	pseudo (out psd);  	child.Pseudo = psd;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (la.kind == 33) {  	Get ();  	if (la.kind == 24) {  		Get ();  		child.ID = "-";  	}  	identity (out ident);  	if (child.ID == null) {  		child.ID = ident;  	}  	else {  		child.ID += "-";  	}  }  else if (la.kind == 34) {  	Get ();  	child.Class = "";  	if (la.kind == 24) {  		Get ();  		child.Class += "-";  	}  	identity (out ident);  	child.Class += ident;  }  else if (la.kind == 35) {  	attrib (out atb);  	child.Attribute = atb;  }  else {  	pseudo (out psd);  	child.Pseudo = psd;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (la.kind == 24) {  	Get ();  	child.ID = "-";  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (la.kind == 34) {  	Get ();  	child.Class = "";  	if (la.kind == 24) {  		Get ();  		child.Class += "-";  	}  	identity (out ident);  	child.Class += ident;  }  else if (la.kind == 35) {  	attrib (out atb);  	child.Attribute = atb;  }  else {  	pseudo (out psd);  	child.Pseudo = psd;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (la.kind == 34) {  	Get ();  	child.Class = "";  	if (la.kind == 24) {  		Get ();  		child.Class += "-";  	}  	identity (out ident);  	child.Class += ident;  }  else if (la.kind == 35) {  	attrib (out atb);  	child.Attribute = atb;  }  else {  	pseudo (out psd);  	child.Pseudo = psd;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (la.kind == 34) {  	Get ();  	child.Class = "";  	if (la.kind == 24) {  		Get ();  		child.Class += "-";  	}  	identity (out ident);  	child.Class += ident;  }  else if (la.kind == 35) {  	attrib (out atb);  	child.Attribute = atb;  }  else {  	pseudo (out psd);  	child.Pseudo = psd;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (la.kind == 24) {  	Get ();  	child.Class += "-";  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,simpleselector,The following statement contains a magic number: if (la.kind == 35) {  	attrib (out atb);  	child.Attribute = atb;  }  else {  	pseudo (out psd);  	child.Pseudo = psd;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: Expect (35);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: if (StartOf (14)) {  	switch (la.kind) {  	case 36: {  		Get ();  		atb.Operator = Model.AttributeOperator.Equals;  		break;  	}  	case 37: {  		Get ();  		atb.Operator = Model.AttributeOperator.InList;  		break;  	}  	case 38: {  		Get ();  		atb.Operator = Model.AttributeOperator.Hyphenated;  		break;  	}  	case 39: {  		Get ();  		atb.Operator = Model.AttributeOperator.EndsWith;  		break;  	}  	case 40: {  		Get ();  		atb.Operator = Model.AttributeOperator.BeginsWith;  		break;  	}  	case 41: {  		Get ();  		atb.Operator = Model.AttributeOperator.Contains;  		break;  	}  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (3)) {  		if (la.kind == 24) {  			Get ();  			atb.Value += "-";  		}  		identity (out ident);  		atb.Value += ident;  	}  	else if (la.kind == 7 || la.kind == 8) {  		QuotedString (out quote);  		atb.Value = quote;  	}  	else  		SynErr (56);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: if (StartOf (14)) {  	switch (la.kind) {  	case 36: {  		Get ();  		atb.Operator = Model.AttributeOperator.Equals;  		break;  	}  	case 37: {  		Get ();  		atb.Operator = Model.AttributeOperator.InList;  		break;  	}  	case 38: {  		Get ();  		atb.Operator = Model.AttributeOperator.Hyphenated;  		break;  	}  	case 39: {  		Get ();  		atb.Operator = Model.AttributeOperator.EndsWith;  		break;  	}  	case 40: {  		Get ();  		atb.Operator = Model.AttributeOperator.BeginsWith;  		break;  	}  	case 41: {  		Get ();  		atb.Operator = Model.AttributeOperator.Contains;  		break;  	}  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (3)) {  		if (la.kind == 24) {  			Get ();  			atb.Value += "-";  		}  		identity (out ident);  		atb.Value += ident;  	}  	else if (la.kind == 7 || la.kind == 8) {  		QuotedString (out quote);  		atb.Value = quote;  	}  	else  		SynErr (56);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: if (StartOf (14)) {  	switch (la.kind) {  	case 36: {  		Get ();  		atb.Operator = Model.AttributeOperator.Equals;  		break;  	}  	case 37: {  		Get ();  		atb.Operator = Model.AttributeOperator.InList;  		break;  	}  	case 38: {  		Get ();  		atb.Operator = Model.AttributeOperator.Hyphenated;  		break;  	}  	case 39: {  		Get ();  		atb.Operator = Model.AttributeOperator.EndsWith;  		break;  	}  	case 40: {  		Get ();  		atb.Operator = Model.AttributeOperator.BeginsWith;  		break;  	}  	case 41: {  		Get ();  		atb.Operator = Model.AttributeOperator.Contains;  		break;  	}  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (3)) {  		if (la.kind == 24) {  			Get ();  			atb.Value += "-";  		}  		identity (out ident);  		atb.Value += ident;  	}  	else if (la.kind == 7 || la.kind == 8) {  		QuotedString (out quote);  		atb.Value = quote;  	}  	else  		SynErr (56);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: if (StartOf (14)) {  	switch (la.kind) {  	case 36: {  		Get ();  		atb.Operator = Model.AttributeOperator.Equals;  		break;  	}  	case 37: {  		Get ();  		atb.Operator = Model.AttributeOperator.InList;  		break;  	}  	case 38: {  		Get ();  		atb.Operator = Model.AttributeOperator.Hyphenated;  		break;  	}  	case 39: {  		Get ();  		atb.Operator = Model.AttributeOperator.EndsWith;  		break;  	}  	case 40: {  		Get ();  		atb.Operator = Model.AttributeOperator.BeginsWith;  		break;  	}  	case 41: {  		Get ();  		atb.Operator = Model.AttributeOperator.Contains;  		break;  	}  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (3)) {  		if (la.kind == 24) {  			Get ();  			atb.Value += "-";  		}  		identity (out ident);  		atb.Value += ident;  	}  	else if (la.kind == 7 || la.kind == 8) {  		QuotedString (out quote);  		atb.Value = quote;  	}  	else  		SynErr (56);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: if (StartOf (14)) {  	switch (la.kind) {  	case 36: {  		Get ();  		atb.Operator = Model.AttributeOperator.Equals;  		break;  	}  	case 37: {  		Get ();  		atb.Operator = Model.AttributeOperator.InList;  		break;  	}  	case 38: {  		Get ();  		atb.Operator = Model.AttributeOperator.Hyphenated;  		break;  	}  	case 39: {  		Get ();  		atb.Operator = Model.AttributeOperator.EndsWith;  		break;  	}  	case 40: {  		Get ();  		atb.Operator = Model.AttributeOperator.BeginsWith;  		break;  	}  	case 41: {  		Get ();  		atb.Operator = Model.AttributeOperator.Contains;  		break;  	}  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (3)) {  		if (la.kind == 24) {  			Get ();  			atb.Value += "-";  		}  		identity (out ident);  		atb.Value += ident;  	}  	else if (la.kind == 7 || la.kind == 8) {  		QuotedString (out quote);  		atb.Value = quote;  	}  	else  		SynErr (56);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: if (StartOf (14)) {  	switch (la.kind) {  	case 36: {  		Get ();  		atb.Operator = Model.AttributeOperator.Equals;  		break;  	}  	case 37: {  		Get ();  		atb.Operator = Model.AttributeOperator.InList;  		break;  	}  	case 38: {  		Get ();  		atb.Operator = Model.AttributeOperator.Hyphenated;  		break;  	}  	case 39: {  		Get ();  		atb.Operator = Model.AttributeOperator.EndsWith;  		break;  	}  	case 40: {  		Get ();  		atb.Operator = Model.AttributeOperator.BeginsWith;  		break;  	}  	case 41: {  		Get ();  		atb.Operator = Model.AttributeOperator.Contains;  		break;  	}  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (3)) {  		if (la.kind == 24) {  			Get ();  			atb.Value += "-";  		}  		identity (out ident);  		atb.Value += ident;  	}  	else if (la.kind == 7 || la.kind == 8) {  		QuotedString (out quote);  		atb.Value = quote;  	}  	else  		SynErr (56);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: if (StartOf (14)) {  	switch (la.kind) {  	case 36: {  		Get ();  		atb.Operator = Model.AttributeOperator.Equals;  		break;  	}  	case 37: {  		Get ();  		atb.Operator = Model.AttributeOperator.InList;  		break;  	}  	case 38: {  		Get ();  		atb.Operator = Model.AttributeOperator.Hyphenated;  		break;  	}  	case 39: {  		Get ();  		atb.Operator = Model.AttributeOperator.EndsWith;  		break;  	}  	case 40: {  		Get ();  		atb.Operator = Model.AttributeOperator.BeginsWith;  		break;  	}  	case 41: {  		Get ();  		atb.Operator = Model.AttributeOperator.Contains;  		break;  	}  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (3)) {  		if (la.kind == 24) {  			Get ();  			atb.Value += "-";  		}  		identity (out ident);  		atb.Value += ident;  	}  	else if (la.kind == 7 || la.kind == 8) {  		QuotedString (out quote);  		atb.Value = quote;  	}  	else  		SynErr (56);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: if (StartOf (14)) {  	switch (la.kind) {  	case 36: {  		Get ();  		atb.Operator = Model.AttributeOperator.Equals;  		break;  	}  	case 37: {  		Get ();  		atb.Operator = Model.AttributeOperator.InList;  		break;  	}  	case 38: {  		Get ();  		atb.Operator = Model.AttributeOperator.Hyphenated;  		break;  	}  	case 39: {  		Get ();  		atb.Operator = Model.AttributeOperator.EndsWith;  		break;  	}  	case 40: {  		Get ();  		atb.Operator = Model.AttributeOperator.BeginsWith;  		break;  	}  	case 41: {  		Get ();  		atb.Operator = Model.AttributeOperator.Contains;  		break;  	}  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (3)) {  		if (la.kind == 24) {  			Get ();  			atb.Value += "-";  		}  		identity (out ident);  		atb.Value += ident;  	}  	else if (la.kind == 7 || la.kind == 8) {  		QuotedString (out quote);  		atb.Value = quote;  	}  	else  		SynErr (56);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: if (StartOf (14)) {  	switch (la.kind) {  	case 36: {  		Get ();  		atb.Operator = Model.AttributeOperator.Equals;  		break;  	}  	case 37: {  		Get ();  		atb.Operator = Model.AttributeOperator.InList;  		break;  	}  	case 38: {  		Get ();  		atb.Operator = Model.AttributeOperator.Hyphenated;  		break;  	}  	case 39: {  		Get ();  		atb.Operator = Model.AttributeOperator.EndsWith;  		break;  	}  	case 40: {  		Get ();  		atb.Operator = Model.AttributeOperator.BeginsWith;  		break;  	}  	case 41: {  		Get ();  		atb.Operator = Model.AttributeOperator.Contains;  		break;  	}  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (3)) {  		if (la.kind == 24) {  			Get ();  			atb.Value += "-";  		}  		identity (out ident);  		atb.Value += ident;  	}  	else if (la.kind == 7 || la.kind == 8) {  		QuotedString (out quote);  		atb.Value = quote;  	}  	else  		SynErr (56);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: if (StartOf (14)) {  	switch (la.kind) {  	case 36: {  		Get ();  		atb.Operator = Model.AttributeOperator.Equals;  		break;  	}  	case 37: {  		Get ();  		atb.Operator = Model.AttributeOperator.InList;  		break;  	}  	case 38: {  		Get ();  		atb.Operator = Model.AttributeOperator.Hyphenated;  		break;  	}  	case 39: {  		Get ();  		atb.Operator = Model.AttributeOperator.EndsWith;  		break;  	}  	case 40: {  		Get ();  		atb.Operator = Model.AttributeOperator.BeginsWith;  		break;  	}  	case 41: {  		Get ();  		atb.Operator = Model.AttributeOperator.Contains;  		break;  	}  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (3)) {  		if (la.kind == 24) {  			Get ();  			atb.Value += "-";  		}  		identity (out ident);  		atb.Value += ident;  	}  	else if (la.kind == 7 || la.kind == 8) {  		QuotedString (out quote);  		atb.Value = quote;  	}  	else  		SynErr (56);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: if (StartOf (14)) {  	switch (la.kind) {  	case 36: {  		Get ();  		atb.Operator = Model.AttributeOperator.Equals;  		break;  	}  	case 37: {  		Get ();  		atb.Operator = Model.AttributeOperator.InList;  		break;  	}  	case 38: {  		Get ();  		atb.Operator = Model.AttributeOperator.Hyphenated;  		break;  	}  	case 39: {  		Get ();  		atb.Operator = Model.AttributeOperator.EndsWith;  		break;  	}  	case 40: {  		Get ();  		atb.Operator = Model.AttributeOperator.BeginsWith;  		break;  	}  	case 41: {  		Get ();  		atb.Operator = Model.AttributeOperator.Contains;  		break;  	}  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (3)) {  		if (la.kind == 24) {  			Get ();  			atb.Value += "-";  		}  		identity (out ident);  		atb.Value += ident;  	}  	else if (la.kind == 7 || la.kind == 8) {  		QuotedString (out quote);  		atb.Value = quote;  	}  	else  		SynErr (56);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: if (StartOf (14)) {  	switch (la.kind) {  	case 36: {  		Get ();  		atb.Operator = Model.AttributeOperator.Equals;  		break;  	}  	case 37: {  		Get ();  		atb.Operator = Model.AttributeOperator.InList;  		break;  	}  	case 38: {  		Get ();  		atb.Operator = Model.AttributeOperator.Hyphenated;  		break;  	}  	case 39: {  		Get ();  		atb.Operator = Model.AttributeOperator.EndsWith;  		break;  	}  	case 40: {  		Get ();  		atb.Operator = Model.AttributeOperator.BeginsWith;  		break;  	}  	case 41: {  		Get ();  		atb.Operator = Model.AttributeOperator.Contains;  		break;  	}  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (3)) {  		if (la.kind == 24) {  			Get ();  			atb.Value += "-";  		}  		identity (out ident);  		atb.Value += ident;  	}  	else if (la.kind == 7 || la.kind == 8) {  		QuotedString (out quote);  		atb.Value = quote;  	}  	else  		SynErr (56);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: if (StartOf (14)) {  	switch (la.kind) {  	case 36: {  		Get ();  		atb.Operator = Model.AttributeOperator.Equals;  		break;  	}  	case 37: {  		Get ();  		atb.Operator = Model.AttributeOperator.InList;  		break;  	}  	case 38: {  		Get ();  		atb.Operator = Model.AttributeOperator.Hyphenated;  		break;  	}  	case 39: {  		Get ();  		atb.Operator = Model.AttributeOperator.EndsWith;  		break;  	}  	case 40: {  		Get ();  		atb.Operator = Model.AttributeOperator.BeginsWith;  		break;  	}  	case 41: {  		Get ();  		atb.Operator = Model.AttributeOperator.Contains;  		break;  	}  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (3)) {  		if (la.kind == 24) {  			Get ();  			atb.Value += "-";  		}  		identity (out ident);  		atb.Value += ident;  	}  	else if (la.kind == 7 || la.kind == 8) {  		QuotedString (out quote);  		atb.Value = quote;  	}  	else  		SynErr (56);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: if (StartOf (14)) {  	switch (la.kind) {  	case 36: {  		Get ();  		atb.Operator = Model.AttributeOperator.Equals;  		break;  	}  	case 37: {  		Get ();  		atb.Operator = Model.AttributeOperator.InList;  		break;  	}  	case 38: {  		Get ();  		atb.Operator = Model.AttributeOperator.Hyphenated;  		break;  	}  	case 39: {  		Get ();  		atb.Operator = Model.AttributeOperator.EndsWith;  		break;  	}  	case 40: {  		Get ();  		atb.Operator = Model.AttributeOperator.BeginsWith;  		break;  	}  	case 41: {  		Get ();  		atb.Operator = Model.AttributeOperator.Contains;  		break;  	}  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (3)) {  		if (la.kind == 24) {  			Get ();  			atb.Value += "-";  		}  		identity (out ident);  		atb.Value += ident;  	}  	else if (la.kind == 7 || la.kind == 8) {  		QuotedString (out quote);  		atb.Value = quote;  	}  	else  		SynErr (56);  	while (la.kind == 4) {  		Get ();  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: switch (la.kind) {  case 36: {  	Get ();  	atb.Operator = Model.AttributeOperator.Equals;  	break;  }  case 37: {  	Get ();  	atb.Operator = Model.AttributeOperator.InList;  	break;  }  case 38: {  	Get ();  	atb.Operator = Model.AttributeOperator.Hyphenated;  	break;  }  case 39: {  	Get ();  	atb.Operator = Model.AttributeOperator.EndsWith;  	break;  }  case 40: {  	Get ();  	atb.Operator = Model.AttributeOperator.BeginsWith;  	break;  }  case 41: {  	Get ();  	atb.Operator = Model.AttributeOperator.Contains;  	break;  }  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: switch (la.kind) {  case 36: {  	Get ();  	atb.Operator = Model.AttributeOperator.Equals;  	break;  }  case 37: {  	Get ();  	atb.Operator = Model.AttributeOperator.InList;  	break;  }  case 38: {  	Get ();  	atb.Operator = Model.AttributeOperator.Hyphenated;  	break;  }  case 39: {  	Get ();  	atb.Operator = Model.AttributeOperator.EndsWith;  	break;  }  case 40: {  	Get ();  	atb.Operator = Model.AttributeOperator.BeginsWith;  	break;  }  case 41: {  	Get ();  	atb.Operator = Model.AttributeOperator.Contains;  	break;  }  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: switch (la.kind) {  case 36: {  	Get ();  	atb.Operator = Model.AttributeOperator.Equals;  	break;  }  case 37: {  	Get ();  	atb.Operator = Model.AttributeOperator.InList;  	break;  }  case 38: {  	Get ();  	atb.Operator = Model.AttributeOperator.Hyphenated;  	break;  }  case 39: {  	Get ();  	atb.Operator = Model.AttributeOperator.EndsWith;  	break;  }  case 40: {  	Get ();  	atb.Operator = Model.AttributeOperator.BeginsWith;  	break;  }  case 41: {  	Get ();  	atb.Operator = Model.AttributeOperator.Contains;  	break;  }  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: switch (la.kind) {  case 36: {  	Get ();  	atb.Operator = Model.AttributeOperator.Equals;  	break;  }  case 37: {  	Get ();  	atb.Operator = Model.AttributeOperator.InList;  	break;  }  case 38: {  	Get ();  	atb.Operator = Model.AttributeOperator.Hyphenated;  	break;  }  case 39: {  	Get ();  	atb.Operator = Model.AttributeOperator.EndsWith;  	break;  }  case 40: {  	Get ();  	atb.Operator = Model.AttributeOperator.BeginsWith;  	break;  }  case 41: {  	Get ();  	atb.Operator = Model.AttributeOperator.Contains;  	break;  }  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: switch (la.kind) {  case 36: {  	Get ();  	atb.Operator = Model.AttributeOperator.Equals;  	break;  }  case 37: {  	Get ();  	atb.Operator = Model.AttributeOperator.InList;  	break;  }  case 38: {  	Get ();  	atb.Operator = Model.AttributeOperator.Hyphenated;  	break;  }  case 39: {  	Get ();  	atb.Operator = Model.AttributeOperator.EndsWith;  	break;  }  case 40: {  	Get ();  	atb.Operator = Model.AttributeOperator.BeginsWith;  	break;  }  case 41: {  	Get ();  	atb.Operator = Model.AttributeOperator.Contains;  	break;  }  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: switch (la.kind) {  case 36: {  	Get ();  	atb.Operator = Model.AttributeOperator.Equals;  	break;  }  case 37: {  	Get ();  	atb.Operator = Model.AttributeOperator.InList;  	break;  }  case 38: {  	Get ();  	atb.Operator = Model.AttributeOperator.Hyphenated;  	break;  }  case 39: {  	Get ();  	atb.Operator = Model.AttributeOperator.EndsWith;  	break;  }  case 40: {  	Get ();  	atb.Operator = Model.AttributeOperator.BeginsWith;  	break;  }  case 41: {  	Get ();  	atb.Operator = Model.AttributeOperator.Contains;  	break;  }  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: if (StartOf (3)) {  	if (la.kind == 24) {  		Get ();  		atb.Value += "-";  	}  	identity (out ident);  	atb.Value += ident;  }  else if (la.kind == 7 || la.kind == 8) {  	QuotedString (out quote);  	atb.Value = quote;  }  else  	SynErr (56);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: if (StartOf (3)) {  	if (la.kind == 24) {  		Get ();  		atb.Value += "-";  	}  	identity (out ident);  	atb.Value += ident;  }  else if (la.kind == 7 || la.kind == 8) {  	QuotedString (out quote);  	atb.Value = quote;  }  else  	SynErr (56);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: if (StartOf (3)) {  	if (la.kind == 24) {  		Get ();  		atb.Value += "-";  	}  	identity (out ident);  	atb.Value += ident;  }  else if (la.kind == 7 || la.kind == 8) {  	QuotedString (out quote);  	atb.Value = quote;  }  else  	SynErr (56);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: if (StartOf (3)) {  	if (la.kind == 24) {  		Get ();  		atb.Value += "-";  	}  	identity (out ident);  	atb.Value += ident;  }  else if (la.kind == 7 || la.kind == 8) {  	QuotedString (out quote);  	atb.Value = quote;  }  else  	SynErr (56);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: if (StartOf (3)) {  	if (la.kind == 24) {  		Get ();  		atb.Value += "-";  	}  	identity (out ident);  	atb.Value += ident;  }  else if (la.kind == 7 || la.kind == 8) {  	QuotedString (out quote);  	atb.Value = quote;  }  else  	SynErr (56);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: if (la.kind == 24) {  	Get ();  	atb.Value += "-";  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out quote);  	atb.Value = quote;  }  else  	SynErr (56);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out quote);  	atb.Value = quote;  }  else  	SynErr (56);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out quote);  	atb.Value = quote;  }  else  	SynErr (56);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: SynErr (56);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following statement contains a magic number: Expect (42);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,pseudo,The following statement contains a magic number: Expect (43);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,pseudo,The following statement contains a magic number: if (la.kind == 43) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,pseudo,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,pseudo,The following statement contains a magic number: if (la.kind == 24) {  	Get ();  	pseudo += "-";  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,pseudo,The following statement contains a magic number: if (la.kind == 10) {  	Get ();  	pseudo += t.val;  	while (la.kind == 4) {  		Get ();  	}  	expr (out exp);  	pseudo += exp.ToString ();  	while (la.kind == 4) {  		Get ();  	}  	Expect (11);  	pseudo += t.val;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,pseudo,The following statement contains a magic number: if (la.kind == 10) {  	Get ();  	pseudo += t.val;  	while (la.kind == 4) {  		Get ();  	}  	expr (out exp);  	pseudo += exp.ToString ();  	while (la.kind == 4) {  		Get ();  	}  	Expect (11);  	pseudo += t.val;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,pseudo,The following statement contains a magic number: if (la.kind == 10) {  	Get ();  	pseudo += t.val;  	while (la.kind == 4) {  		Get ();  	}  	expr (out exp);  	pseudo += exp.ToString ();  	while (la.kind == 4) {  		Get ();  	}  	Expect (11);  	pseudo += t.val;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,pseudo,The following statement contains a magic number: if (la.kind == 10) {  	Get ();  	pseudo += t.val;  	while (la.kind == 4) {  		Get ();  	}  	expr (out exp);  	pseudo += exp.ToString ();  	while (la.kind == 4) {  		Get ();  	}  	Expect (11);  	pseudo += t.val;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,pseudo,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,pseudo,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,pseudo,The following statement contains a magic number: Expect (11);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 7 || la.kind == 8) {  	QuotedString (out val);  	trm.Value = val;  	trm.Type = Model.TermType.String;  }  else if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 9) {  	URI (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Url;  }  else if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 47) {  	Get ();  	identity (out ident);  	trm.Value = "U\\" + ident;  	trm.Type = Model.TermType.Unicode;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value = val;  	trm.Type = Model.TermType.Hex;  }  else if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	bool minus = false;  	if (la.kind == 24) {  		Get ();  		minus = true;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value = ident;  		trm.Type = Model.TermType.String;  		if (minus) {  			trm.Value = "-" + trm.Value;  		}  		while (la.kind == 4) {  			Get ();  		}  		if (StartOf (17)) {  			while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  					if (StartOf (18)) {  						if (la.kind == 43) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 24) {  							Get ();  							trm.Value += t.val;  						}  						identity (out ident);  						trm.Value += ident;  					}  					else if (la.kind == 33) {  						HexValue (out val);  						trm.Value += val;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  						if (la.kind == 34) {  							Get ();  							trm.Value += ".";  							while (la.kind == 3) {  								Get ();  								trm.Value += t.val;  							}  						}  					}  					else  						SynErr (57);  				}  				else if (la.kind == 34) {  					Get ();  					trm.Value += t.val;  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else {  					Get ();  					trm.Value += t.val;  					while (la.kind == 4) {  						Get ();  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					if (StartOf (16)) {  						identity (out ident);  						trm.Value += ident;  					}  					else if (StartOf (19)) {  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  					else  						SynErr (58);  				}  			}  		}  		if (la.kind == 10) {  			Get ();  			while (la.kind == 4) {  				Get ();  			}  			expr (out exp);  			Model.Function func = new Model.Function ();  			func.Name = trm.Value;  			func.Expression = exp;  			trm.Value = null;  			trm.Function = func;  			trm.Type = Model.TermType.Function;  			while (la.kind == 4) {  				Get ();  			}  			Expect (11);  		}  	}  	else if (StartOf (15)) {  		if (la.kind == 29) {  			Get ();  			trm.Sign = '+';  		}  		if (minus) {  			trm.Sign = '-';  		}  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  		if (la.kind == 34) {  			Get ();  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  		if (StartOf (20)) {  			if (la.val.ToLower ().Equals ("n")) {  				Expect (22);  				val += t.val;  				if (la.kind == 24 || la.kind == 29) {  					if (la.kind == 29) {  						Get ();  						val += t.val;  					}  					else {  						Get ();  						val += t.val;  					}  					Expect (3);  					val += t.val;  					while (la.kind == 3) {  						Get ();  						val += t.val;  					}  				}  			}  			else if (la.kind == 48) {  				Get ();  				trm.Unit = Model.Unit.Percent;  			}  			else {  				if (IsUnit ()) {  					identity (out ident);  					try {  						trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  					}  					catch {  						errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  					}  				}  			}  		}  		trm.Value = val;  		trm.Type = Model.TermType.Number;  	}  	else  		SynErr (59);  }  else  	SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 24) {  	Get ();  	minus = true;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value = ident;  	trm.Type = Model.TermType.String;  	if (minus) {  		trm.Value = "-" + trm.Value;  	}  	while (la.kind == 4) {  		Get ();  	}  	if (StartOf (17)) {  		while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  				if (StartOf (18)) {  					if (la.kind == 43) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 24) {  						Get ();  						trm.Value += t.val;  					}  					identity (out ident);  					trm.Value += ident;  				}  				else if (la.kind == 33) {  					HexValue (out val);  					trm.Value += val;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  					if (la.kind == 34) {  						Get ();  						trm.Value += ".";  						while (la.kind == 3) {  							Get ();  							trm.Value += t.val;  						}  					}  				}  				else  					SynErr (57);  			}  			else if (la.kind == 34) {  				Get ();  				trm.Value += t.val;  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else {  				Get ();  				trm.Value += t.val;  				while (la.kind == 4) {  					Get ();  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				if (StartOf (16)) {  					identity (out ident);  					trm.Value += ident;  				}  				else if (StartOf (19)) {  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  				else  					SynErr (58);  			}  		}  	}  	if (la.kind == 10) {  		Get ();  		while (la.kind == 4) {  			Get ();  		}  		expr (out exp);  		Model.Function func = new Model.Function ();  		func.Name = trm.Value;  		func.Expression = exp;  		trm.Value = null;  		trm.Function = func;  		trm.Type = Model.TermType.Function;  		while (la.kind == 4) {  			Get ();  		}  		Expect (11);  	}  }  else if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (17)) {  	while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  			if (StartOf (18)) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else if (la.kind == 33) {  				HexValue (out val);  				trm.Value += val;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 34) {  					Get ();  					trm.Value += ".";  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  			}  			else  				SynErr (57);  		}  		else if (la.kind == 34) {  			Get ();  			trm.Value += t.val;  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else {  			Get ();  			trm.Value += t.val;  			while (la.kind == 4) {  				Get ();  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			if (StartOf (16)) {  				identity (out ident);  				trm.Value += ident;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  			else  				SynErr (58);  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (17)) {  	while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  			if (StartOf (18)) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else if (la.kind == 33) {  				HexValue (out val);  				trm.Value += val;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 34) {  					Get ();  					trm.Value += ".";  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  			}  			else  				SynErr (57);  		}  		else if (la.kind == 34) {  			Get ();  			trm.Value += t.val;  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else {  			Get ();  			trm.Value += t.val;  			while (la.kind == 4) {  				Get ();  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			if (StartOf (16)) {  				identity (out ident);  				trm.Value += ident;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  			else  				SynErr (58);  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (17)) {  	while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  			if (StartOf (18)) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else if (la.kind == 33) {  				HexValue (out val);  				trm.Value += val;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 34) {  					Get ();  					trm.Value += ".";  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  			}  			else  				SynErr (57);  		}  		else if (la.kind == 34) {  			Get ();  			trm.Value += t.val;  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else {  			Get ();  			trm.Value += t.val;  			while (la.kind == 4) {  				Get ();  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			if (StartOf (16)) {  				identity (out ident);  				trm.Value += ident;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  			else  				SynErr (58);  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (17)) {  	while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  			if (StartOf (18)) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else if (la.kind == 33) {  				HexValue (out val);  				trm.Value += val;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 34) {  					Get ();  					trm.Value += ".";  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  			}  			else  				SynErr (57);  		}  		else if (la.kind == 34) {  			Get ();  			trm.Value += t.val;  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else {  			Get ();  			trm.Value += t.val;  			while (la.kind == 4) {  				Get ();  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			if (StartOf (16)) {  				identity (out ident);  				trm.Value += ident;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  			else  				SynErr (58);  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (17)) {  	while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  			if (StartOf (18)) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else if (la.kind == 33) {  				HexValue (out val);  				trm.Value += val;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 34) {  					Get ();  					trm.Value += ".";  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  			}  			else  				SynErr (57);  		}  		else if (la.kind == 34) {  			Get ();  			trm.Value += t.val;  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else {  			Get ();  			trm.Value += t.val;  			while (la.kind == 4) {  				Get ();  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			if (StartOf (16)) {  				identity (out ident);  				trm.Value += ident;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  			else  				SynErr (58);  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (17)) {  	while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  			if (StartOf (18)) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else if (la.kind == 33) {  				HexValue (out val);  				trm.Value += val;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 34) {  					Get ();  					trm.Value += ".";  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  			}  			else  				SynErr (57);  		}  		else if (la.kind == 34) {  			Get ();  			trm.Value += t.val;  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else {  			Get ();  			trm.Value += t.val;  			while (la.kind == 4) {  				Get ();  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			if (StartOf (16)) {  				identity (out ident);  				trm.Value += ident;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  			else  				SynErr (58);  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (17)) {  	while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  			if (StartOf (18)) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else if (la.kind == 33) {  				HexValue (out val);  				trm.Value += val;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 34) {  					Get ();  					trm.Value += ".";  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  			}  			else  				SynErr (57);  		}  		else if (la.kind == 34) {  			Get ();  			trm.Value += t.val;  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else {  			Get ();  			trm.Value += t.val;  			while (la.kind == 4) {  				Get ();  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			if (StartOf (16)) {  				identity (out ident);  				trm.Value += ident;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  			else  				SynErr (58);  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (17)) {  	while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  			if (StartOf (18)) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else if (la.kind == 33) {  				HexValue (out val);  				trm.Value += val;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 34) {  					Get ();  					trm.Value += ".";  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  			}  			else  				SynErr (57);  		}  		else if (la.kind == 34) {  			Get ();  			trm.Value += t.val;  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else {  			Get ();  			trm.Value += t.val;  			while (la.kind == 4) {  				Get ();  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			if (StartOf (16)) {  				identity (out ident);  				trm.Value += ident;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  			else  				SynErr (58);  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (17)) {  	while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  			if (StartOf (18)) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else if (la.kind == 33) {  				HexValue (out val);  				trm.Value += val;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 34) {  					Get ();  					trm.Value += ".";  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  			}  			else  				SynErr (57);  		}  		else if (la.kind == 34) {  			Get ();  			trm.Value += t.val;  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else {  			Get ();  			trm.Value += t.val;  			while (la.kind == 4) {  				Get ();  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			if (StartOf (16)) {  				identity (out ident);  				trm.Value += ident;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  			else  				SynErr (58);  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (17)) {  	while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  			if (StartOf (18)) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else if (la.kind == 33) {  				HexValue (out val);  				trm.Value += val;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 34) {  					Get ();  					trm.Value += ".";  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  			}  			else  				SynErr (57);  		}  		else if (la.kind == 34) {  			Get ();  			trm.Value += t.val;  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else {  			Get ();  			trm.Value += t.val;  			while (la.kind == 4) {  				Get ();  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			if (StartOf (16)) {  				identity (out ident);  				trm.Value += ident;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  			else  				SynErr (58);  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (17)) {  	while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  			if (StartOf (18)) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else if (la.kind == 33) {  				HexValue (out val);  				trm.Value += val;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 34) {  					Get ();  					trm.Value += ".";  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  			}  			else  				SynErr (57);  		}  		else if (la.kind == 34) {  			Get ();  			trm.Value += t.val;  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else {  			Get ();  			trm.Value += t.val;  			while (la.kind == 4) {  				Get ();  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			if (StartOf (16)) {  				identity (out ident);  				trm.Value += ident;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  			else  				SynErr (58);  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (17)) {  	while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  			if (StartOf (18)) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else if (la.kind == 33) {  				HexValue (out val);  				trm.Value += val;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 34) {  					Get ();  					trm.Value += ".";  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  			}  			else  				SynErr (57);  		}  		else if (la.kind == 34) {  			Get ();  			trm.Value += t.val;  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else {  			Get ();  			trm.Value += t.val;  			while (la.kind == 4) {  				Get ();  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			if (StartOf (16)) {  				identity (out ident);  				trm.Value += ident;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  			else  				SynErr (58);  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (17)) {  	while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  			if (StartOf (18)) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else if (la.kind == 33) {  				HexValue (out val);  				trm.Value += val;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 34) {  					Get ();  					trm.Value += ".";  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  			}  			else  				SynErr (57);  		}  		else if (la.kind == 34) {  			Get ();  			trm.Value += t.val;  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else {  			Get ();  			trm.Value += t.val;  			while (la.kind == 4) {  				Get ();  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			if (StartOf (16)) {  				identity (out ident);  				trm.Value += ident;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  			else  				SynErr (58);  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (17)) {  	while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  			if (StartOf (18)) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else if (la.kind == 33) {  				HexValue (out val);  				trm.Value += val;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 34) {  					Get ();  					trm.Value += ".";  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  			}  			else  				SynErr (57);  		}  		else if (la.kind == 34) {  			Get ();  			trm.Value += t.val;  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else {  			Get ();  			trm.Value += t.val;  			while (la.kind == 4) {  				Get ();  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			if (StartOf (16)) {  				identity (out ident);  				trm.Value += ident;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  			else  				SynErr (58);  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (17)) {  	while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  			if (StartOf (18)) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else if (la.kind == 33) {  				HexValue (out val);  				trm.Value += val;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 34) {  					Get ();  					trm.Value += ".";  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  			}  			else  				SynErr (57);  		}  		else if (la.kind == 34) {  			Get ();  			trm.Value += t.val;  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else {  			Get ();  			trm.Value += t.val;  			while (la.kind == 4) {  				Get ();  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			if (StartOf (16)) {  				identity (out ident);  				trm.Value += ident;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  			else  				SynErr (58);  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (17)) {  	while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  			if (StartOf (18)) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else if (la.kind == 33) {  				HexValue (out val);  				trm.Value += val;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 34) {  					Get ();  					trm.Value += ".";  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  			}  			else  				SynErr (57);  		}  		else if (la.kind == 34) {  			Get ();  			trm.Value += t.val;  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else {  			Get ();  			trm.Value += t.val;  			while (la.kind == 4) {  				Get ();  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			if (StartOf (16)) {  				identity (out ident);  				trm.Value += ident;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  			else  				SynErr (58);  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (17)) {  	while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  			if (StartOf (18)) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else if (la.kind == 33) {  				HexValue (out val);  				trm.Value += val;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 34) {  					Get ();  					trm.Value += ".";  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  			}  			else  				SynErr (57);  		}  		else if (la.kind == 34) {  			Get ();  			trm.Value += t.val;  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else {  			Get ();  			trm.Value += t.val;  			while (la.kind == 4) {  				Get ();  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			if (StartOf (16)) {  				identity (out ident);  				trm.Value += ident;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  			else  				SynErr (58);  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (17)) {  	while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  			if (StartOf (18)) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else if (la.kind == 33) {  				HexValue (out val);  				trm.Value += val;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 34) {  					Get ();  					trm.Value += ".";  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  			}  			else  				SynErr (57);  		}  		else if (la.kind == 34) {  			Get ();  			trm.Value += t.val;  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else {  			Get ();  			trm.Value += t.val;  			while (la.kind == 4) {  				Get ();  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			if (StartOf (16)) {  				identity (out ident);  				trm.Value += ident;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  			else  				SynErr (58);  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (17)) {  	while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  			if (StartOf (18)) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else if (la.kind == 33) {  				HexValue (out val);  				trm.Value += val;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 34) {  					Get ();  					trm.Value += ".";  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  			}  			else  				SynErr (57);  		}  		else if (la.kind == 34) {  			Get ();  			trm.Value += t.val;  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else {  			Get ();  			trm.Value += t.val;  			while (la.kind == 4) {  				Get ();  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			if (StartOf (16)) {  				identity (out ident);  				trm.Value += ident;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  			else  				SynErr (58);  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (17)) {  	while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  			if (StartOf (18)) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else if (la.kind == 33) {  				HexValue (out val);  				trm.Value += val;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 34) {  					Get ();  					trm.Value += ".";  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  			}  			else  				SynErr (57);  		}  		else if (la.kind == 34) {  			Get ();  			trm.Value += t.val;  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else {  			Get ();  			trm.Value += t.val;  			while (la.kind == 4) {  				Get ();  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			if (StartOf (16)) {  				identity (out ident);  				trm.Value += ident;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  			else  				SynErr (58);  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (17)) {  	while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  			if (StartOf (18)) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else if (la.kind == 33) {  				HexValue (out val);  				trm.Value += val;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 34) {  					Get ();  					trm.Value += ".";  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  			}  			else  				SynErr (57);  		}  		else if (la.kind == 34) {  			Get ();  			trm.Value += t.val;  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else {  			Get ();  			trm.Value += t.val;  			while (la.kind == 4) {  				Get ();  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			if (StartOf (16)) {  				identity (out ident);  				trm.Value += ident;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  			else  				SynErr (58);  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (17)) {  	while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  			if (StartOf (18)) {  				if (la.kind == 43) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 24) {  					Get ();  					trm.Value += t.val;  				}  				identity (out ident);  				trm.Value += ident;  			}  			else if (la.kind == 33) {  				HexValue (out val);  				trm.Value += val;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  				if (la.kind == 34) {  					Get ();  					trm.Value += ".";  					while (la.kind == 3) {  						Get ();  						trm.Value += t.val;  					}  				}  			}  			else  				SynErr (57);  		}  		else if (la.kind == 34) {  			Get ();  			trm.Value += t.val;  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else {  			Get ();  			trm.Value += t.val;  			while (la.kind == 4) {  				Get ();  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			if (StartOf (16)) {  				identity (out ident);  				trm.Value += ident;  			}  			else if (StartOf (19)) {  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  			else  				SynErr (58);  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  	if (la.kind == 43) {  		Get ();  		trm.Value += t.val;  		if (StartOf (18)) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else if (la.kind == 33) {  			HexValue (out val);  			trm.Value += val;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 34) {  				Get ();  				trm.Value += ".";  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  		}  		else  			SynErr (57);  	}  	else if (la.kind == 34) {  		Get ();  		trm.Value += t.val;  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else {  		Get ();  		trm.Value += t.val;  		while (la.kind == 4) {  			Get ();  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		if (StartOf (16)) {  			identity (out ident);  			trm.Value += ident;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  		else  			SynErr (58);  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  	if (la.kind == 43) {  		Get ();  		trm.Value += t.val;  		if (StartOf (18)) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else if (la.kind == 33) {  			HexValue (out val);  			trm.Value += val;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 34) {  				Get ();  				trm.Value += ".";  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  		}  		else  			SynErr (57);  	}  	else if (la.kind == 34) {  		Get ();  		trm.Value += t.val;  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else {  		Get ();  		trm.Value += t.val;  		while (la.kind == 4) {  			Get ();  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		if (StartOf (16)) {  			identity (out ident);  			trm.Value += ident;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  		else  			SynErr (58);  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  	if (la.kind == 43) {  		Get ();  		trm.Value += t.val;  		if (StartOf (18)) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else if (la.kind == 33) {  			HexValue (out val);  			trm.Value += val;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 34) {  				Get ();  				trm.Value += ".";  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  		}  		else  			SynErr (57);  	}  	else if (la.kind == 34) {  		Get ();  		trm.Value += t.val;  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else {  		Get ();  		trm.Value += t.val;  		while (la.kind == 4) {  			Get ();  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		if (StartOf (16)) {  			identity (out ident);  			trm.Value += ident;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  		else  			SynErr (58);  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  	if (la.kind == 43) {  		Get ();  		trm.Value += t.val;  		if (StartOf (18)) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else if (la.kind == 33) {  			HexValue (out val);  			trm.Value += val;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 34) {  				Get ();  				trm.Value += ".";  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  		}  		else  			SynErr (57);  	}  	else if (la.kind == 34) {  		Get ();  		trm.Value += t.val;  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else {  		Get ();  		trm.Value += t.val;  		while (la.kind == 4) {  			Get ();  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		if (StartOf (16)) {  			identity (out ident);  			trm.Value += ident;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  		else  			SynErr (58);  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  	if (la.kind == 43) {  		Get ();  		trm.Value += t.val;  		if (StartOf (18)) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else if (la.kind == 33) {  			HexValue (out val);  			trm.Value += val;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 34) {  				Get ();  				trm.Value += ".";  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  		}  		else  			SynErr (57);  	}  	else if (la.kind == 34) {  		Get ();  		trm.Value += t.val;  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else {  		Get ();  		trm.Value += t.val;  		while (la.kind == 4) {  			Get ();  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		if (StartOf (16)) {  			identity (out ident);  			trm.Value += ident;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  		else  			SynErr (58);  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  	if (la.kind == 43) {  		Get ();  		trm.Value += t.val;  		if (StartOf (18)) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else if (la.kind == 33) {  			HexValue (out val);  			trm.Value += val;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 34) {  				Get ();  				trm.Value += ".";  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  		}  		else  			SynErr (57);  	}  	else if (la.kind == 34) {  		Get ();  		trm.Value += t.val;  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else {  		Get ();  		trm.Value += t.val;  		while (la.kind == 4) {  			Get ();  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		if (StartOf (16)) {  			identity (out ident);  			trm.Value += ident;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  		else  			SynErr (58);  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  	if (la.kind == 43) {  		Get ();  		trm.Value += t.val;  		if (StartOf (18)) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else if (la.kind == 33) {  			HexValue (out val);  			trm.Value += val;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 34) {  				Get ();  				trm.Value += ".";  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  		}  		else  			SynErr (57);  	}  	else if (la.kind == 34) {  		Get ();  		trm.Value += t.val;  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else {  		Get ();  		trm.Value += t.val;  		while (la.kind == 4) {  			Get ();  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		if (StartOf (16)) {  			identity (out ident);  			trm.Value += ident;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  		else  			SynErr (58);  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  	if (la.kind == 43) {  		Get ();  		trm.Value += t.val;  		if (StartOf (18)) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else if (la.kind == 33) {  			HexValue (out val);  			trm.Value += val;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 34) {  				Get ();  				trm.Value += ".";  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  		}  		else  			SynErr (57);  	}  	else if (la.kind == 34) {  		Get ();  		trm.Value += t.val;  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else {  		Get ();  		trm.Value += t.val;  		while (la.kind == 4) {  			Get ();  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		if (StartOf (16)) {  			identity (out ident);  			trm.Value += ident;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  		else  			SynErr (58);  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  	if (la.kind == 43) {  		Get ();  		trm.Value += t.val;  		if (StartOf (18)) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else if (la.kind == 33) {  			HexValue (out val);  			trm.Value += val;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 34) {  				Get ();  				trm.Value += ".";  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  		}  		else  			SynErr (57);  	}  	else if (la.kind == 34) {  		Get ();  		trm.Value += t.val;  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else {  		Get ();  		trm.Value += t.val;  		while (la.kind == 4) {  			Get ();  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		if (StartOf (16)) {  			identity (out ident);  			trm.Value += ident;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  		else  			SynErr (58);  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  	if (la.kind == 43) {  		Get ();  		trm.Value += t.val;  		if (StartOf (18)) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else if (la.kind == 33) {  			HexValue (out val);  			trm.Value += val;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 34) {  				Get ();  				trm.Value += ".";  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  		}  		else  			SynErr (57);  	}  	else if (la.kind == 34) {  		Get ();  		trm.Value += t.val;  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else {  		Get ();  		trm.Value += t.val;  		while (la.kind == 4) {  			Get ();  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		if (StartOf (16)) {  			identity (out ident);  			trm.Value += ident;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  		else  			SynErr (58);  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  	if (la.kind == 43) {  		Get ();  		trm.Value += t.val;  		if (StartOf (18)) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else if (la.kind == 33) {  			HexValue (out val);  			trm.Value += val;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 34) {  				Get ();  				trm.Value += ".";  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  		}  		else  			SynErr (57);  	}  	else if (la.kind == 34) {  		Get ();  		trm.Value += t.val;  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else {  		Get ();  		trm.Value += t.val;  		while (la.kind == 4) {  			Get ();  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		if (StartOf (16)) {  			identity (out ident);  			trm.Value += ident;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  		else  			SynErr (58);  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  	if (la.kind == 43) {  		Get ();  		trm.Value += t.val;  		if (StartOf (18)) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else if (la.kind == 33) {  			HexValue (out val);  			trm.Value += val;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 34) {  				Get ();  				trm.Value += ".";  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  		}  		else  			SynErr (57);  	}  	else if (la.kind == 34) {  		Get ();  		trm.Value += t.val;  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else {  		Get ();  		trm.Value += t.val;  		while (la.kind == 4) {  			Get ();  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		if (StartOf (16)) {  			identity (out ident);  			trm.Value += ident;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  		else  			SynErr (58);  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  	if (la.kind == 43) {  		Get ();  		trm.Value += t.val;  		if (StartOf (18)) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else if (la.kind == 33) {  			HexValue (out val);  			trm.Value += val;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 34) {  				Get ();  				trm.Value += ".";  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  		}  		else  			SynErr (57);  	}  	else if (la.kind == 34) {  		Get ();  		trm.Value += t.val;  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else {  		Get ();  		trm.Value += t.val;  		while (la.kind == 4) {  			Get ();  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		if (StartOf (16)) {  			identity (out ident);  			trm.Value += ident;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  		else  			SynErr (58);  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  	if (la.kind == 43) {  		Get ();  		trm.Value += t.val;  		if (StartOf (18)) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else if (la.kind == 33) {  			HexValue (out val);  			trm.Value += val;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 34) {  				Get ();  				trm.Value += ".";  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  		}  		else  			SynErr (57);  	}  	else if (la.kind == 34) {  		Get ();  		trm.Value += t.val;  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else {  		Get ();  		trm.Value += t.val;  		while (la.kind == 4) {  			Get ();  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		if (StartOf (16)) {  			identity (out ident);  			trm.Value += ident;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  		else  			SynErr (58);  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  	if (la.kind == 43) {  		Get ();  		trm.Value += t.val;  		if (StartOf (18)) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else if (la.kind == 33) {  			HexValue (out val);  			trm.Value += val;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 34) {  				Get ();  				trm.Value += ".";  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  		}  		else  			SynErr (57);  	}  	else if (la.kind == 34) {  		Get ();  		trm.Value += t.val;  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else {  		Get ();  		trm.Value += t.val;  		while (la.kind == 4) {  			Get ();  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		if (StartOf (16)) {  			identity (out ident);  			trm.Value += ident;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  		else  			SynErr (58);  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  	if (la.kind == 43) {  		Get ();  		trm.Value += t.val;  		if (StartOf (18)) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else if (la.kind == 33) {  			HexValue (out val);  			trm.Value += val;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 34) {  				Get ();  				trm.Value += ".";  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  		}  		else  			SynErr (57);  	}  	else if (la.kind == 34) {  		Get ();  		trm.Value += t.val;  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else {  		Get ();  		trm.Value += t.val;  		while (la.kind == 4) {  			Get ();  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		if (StartOf (16)) {  			identity (out ident);  			trm.Value += ident;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  		else  			SynErr (58);  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  	if (la.kind == 43) {  		Get ();  		trm.Value += t.val;  		if (StartOf (18)) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else if (la.kind == 33) {  			HexValue (out val);  			trm.Value += val;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 34) {  				Get ();  				trm.Value += ".";  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  		}  		else  			SynErr (57);  	}  	else if (la.kind == 34) {  		Get ();  		trm.Value += t.val;  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else {  		Get ();  		trm.Value += t.val;  		while (la.kind == 4) {  			Get ();  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		if (StartOf (16)) {  			identity (out ident);  			trm.Value += ident;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  		else  			SynErr (58);  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  	if (la.kind == 43) {  		Get ();  		trm.Value += t.val;  		if (StartOf (18)) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else if (la.kind == 33) {  			HexValue (out val);  			trm.Value += val;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 34) {  				Get ();  				trm.Value += ".";  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  		}  		else  			SynErr (57);  	}  	else if (la.kind == 34) {  		Get ();  		trm.Value += t.val;  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else {  		Get ();  		trm.Value += t.val;  		while (la.kind == 4) {  			Get ();  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		if (StartOf (16)) {  			identity (out ident);  			trm.Value += ident;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  		else  			SynErr (58);  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  	if (la.kind == 43) {  		Get ();  		trm.Value += t.val;  		if (StartOf (18)) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else if (la.kind == 33) {  			HexValue (out val);  			trm.Value += val;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 34) {  				Get ();  				trm.Value += ".";  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  		}  		else  			SynErr (57);  	}  	else if (la.kind == 34) {  		Get ();  		trm.Value += t.val;  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else {  		Get ();  		trm.Value += t.val;  		while (la.kind == 4) {  			Get ();  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		if (StartOf (16)) {  			identity (out ident);  			trm.Value += ident;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  		else  			SynErr (58);  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  	if (la.kind == 43) {  		Get ();  		trm.Value += t.val;  		if (StartOf (18)) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else if (la.kind == 33) {  			HexValue (out val);  			trm.Value += val;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 34) {  				Get ();  				trm.Value += ".";  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  		}  		else  			SynErr (57);  	}  	else if (la.kind == 34) {  		Get ();  		trm.Value += t.val;  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else {  		Get ();  		trm.Value += t.val;  		while (la.kind == 4) {  			Get ();  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		if (StartOf (16)) {  			identity (out ident);  			trm.Value += ident;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  		else  			SynErr (58);  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: while (la.kind == 34 || la.kind == 36 || la.kind == 43) {  	if (la.kind == 43) {  		Get ();  		trm.Value += t.val;  		if (StartOf (18)) {  			if (la.kind == 43) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 24) {  				Get ();  				trm.Value += t.val;  			}  			identity (out ident);  			trm.Value += ident;  		}  		else if (la.kind == 33) {  			HexValue (out val);  			trm.Value += val;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  			if (la.kind == 34) {  				Get ();  				trm.Value += ".";  				while (la.kind == 3) {  					Get ();  					trm.Value += t.val;  				}  			}  		}  		else  			SynErr (57);  	}  	else if (la.kind == 34) {  		Get ();  		trm.Value += t.val;  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else {  		Get ();  		trm.Value += t.val;  		while (la.kind == 4) {  			Get ();  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		if (StartOf (16)) {  			identity (out ident);  			trm.Value += ident;  		}  		else if (StartOf (19)) {  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  		else  			SynErr (58);  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 43) {  	Get ();  	trm.Value += t.val;  	if (StartOf (18)) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else if (la.kind == 33) {  		HexValue (out val);  		trm.Value += val;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 34) {  			Get ();  			trm.Value += ".";  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  	}  	else  		SynErr (57);  }  else if (la.kind == 34) {  	Get ();  	trm.Value += t.val;  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else {  	Get ();  	trm.Value += t.val;  	while (la.kind == 4) {  		Get ();  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value += ident;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  	else  		SynErr (58);  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 43) {  	Get ();  	trm.Value += t.val;  	if (StartOf (18)) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else if (la.kind == 33) {  		HexValue (out val);  		trm.Value += val;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 34) {  			Get ();  			trm.Value += ".";  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  	}  	else  		SynErr (57);  }  else if (la.kind == 34) {  	Get ();  	trm.Value += t.val;  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else {  	Get ();  	trm.Value += t.val;  	while (la.kind == 4) {  		Get ();  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value += ident;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  	else  		SynErr (58);  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 43) {  	Get ();  	trm.Value += t.val;  	if (StartOf (18)) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else if (la.kind == 33) {  		HexValue (out val);  		trm.Value += val;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 34) {  			Get ();  			trm.Value += ".";  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  	}  	else  		SynErr (57);  }  else if (la.kind == 34) {  	Get ();  	trm.Value += t.val;  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else {  	Get ();  	trm.Value += t.val;  	while (la.kind == 4) {  		Get ();  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value += ident;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  	else  		SynErr (58);  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 43) {  	Get ();  	trm.Value += t.val;  	if (StartOf (18)) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else if (la.kind == 33) {  		HexValue (out val);  		trm.Value += val;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 34) {  			Get ();  			trm.Value += ".";  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  	}  	else  		SynErr (57);  }  else if (la.kind == 34) {  	Get ();  	trm.Value += t.val;  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else {  	Get ();  	trm.Value += t.val;  	while (la.kind == 4) {  		Get ();  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value += ident;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  	else  		SynErr (58);  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 43) {  	Get ();  	trm.Value += t.val;  	if (StartOf (18)) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else if (la.kind == 33) {  		HexValue (out val);  		trm.Value += val;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 34) {  			Get ();  			trm.Value += ".";  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  	}  	else  		SynErr (57);  }  else if (la.kind == 34) {  	Get ();  	trm.Value += t.val;  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else {  	Get ();  	trm.Value += t.val;  	while (la.kind == 4) {  		Get ();  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value += ident;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  	else  		SynErr (58);  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 43) {  	Get ();  	trm.Value += t.val;  	if (StartOf (18)) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else if (la.kind == 33) {  		HexValue (out val);  		trm.Value += val;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 34) {  			Get ();  			trm.Value += ".";  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  	}  	else  		SynErr (57);  }  else if (la.kind == 34) {  	Get ();  	trm.Value += t.val;  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else {  	Get ();  	trm.Value += t.val;  	while (la.kind == 4) {  		Get ();  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value += ident;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  	else  		SynErr (58);  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 43) {  	Get ();  	trm.Value += t.val;  	if (StartOf (18)) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else if (la.kind == 33) {  		HexValue (out val);  		trm.Value += val;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 34) {  			Get ();  			trm.Value += ".";  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  	}  	else  		SynErr (57);  }  else if (la.kind == 34) {  	Get ();  	trm.Value += t.val;  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else {  	Get ();  	trm.Value += t.val;  	while (la.kind == 4) {  		Get ();  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value += ident;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  	else  		SynErr (58);  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 43) {  	Get ();  	trm.Value += t.val;  	if (StartOf (18)) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else if (la.kind == 33) {  		HexValue (out val);  		trm.Value += val;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 34) {  			Get ();  			trm.Value += ".";  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  	}  	else  		SynErr (57);  }  else if (la.kind == 34) {  	Get ();  	trm.Value += t.val;  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else {  	Get ();  	trm.Value += t.val;  	while (la.kind == 4) {  		Get ();  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value += ident;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  	else  		SynErr (58);  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 43) {  	Get ();  	trm.Value += t.val;  	if (StartOf (18)) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else if (la.kind == 33) {  		HexValue (out val);  		trm.Value += val;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 34) {  			Get ();  			trm.Value += ".";  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  	}  	else  		SynErr (57);  }  else if (la.kind == 34) {  	Get ();  	trm.Value += t.val;  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else {  	Get ();  	trm.Value += t.val;  	while (la.kind == 4) {  		Get ();  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value += ident;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  	else  		SynErr (58);  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 43) {  	Get ();  	trm.Value += t.val;  	if (StartOf (18)) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else if (la.kind == 33) {  		HexValue (out val);  		trm.Value += val;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 34) {  			Get ();  			trm.Value += ".";  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  	}  	else  		SynErr (57);  }  else if (la.kind == 34) {  	Get ();  	trm.Value += t.val;  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else {  	Get ();  	trm.Value += t.val;  	while (la.kind == 4) {  		Get ();  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value += ident;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  	else  		SynErr (58);  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 43) {  	Get ();  	trm.Value += t.val;  	if (StartOf (18)) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else if (la.kind == 33) {  		HexValue (out val);  		trm.Value += val;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 34) {  			Get ();  			trm.Value += ".";  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  	}  	else  		SynErr (57);  }  else if (la.kind == 34) {  	Get ();  	trm.Value += t.val;  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else {  	Get ();  	trm.Value += t.val;  	while (la.kind == 4) {  		Get ();  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value += ident;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  	else  		SynErr (58);  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 43) {  	Get ();  	trm.Value += t.val;  	if (StartOf (18)) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else if (la.kind == 33) {  		HexValue (out val);  		trm.Value += val;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 34) {  			Get ();  			trm.Value += ".";  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  	}  	else  		SynErr (57);  }  else if (la.kind == 34) {  	Get ();  	trm.Value += t.val;  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else {  	Get ();  	trm.Value += t.val;  	while (la.kind == 4) {  		Get ();  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value += ident;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  	else  		SynErr (58);  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 43) {  	Get ();  	trm.Value += t.val;  	if (StartOf (18)) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else if (la.kind == 33) {  		HexValue (out val);  		trm.Value += val;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 34) {  			Get ();  			trm.Value += ".";  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  	}  	else  		SynErr (57);  }  else if (la.kind == 34) {  	Get ();  	trm.Value += t.val;  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else {  	Get ();  	trm.Value += t.val;  	while (la.kind == 4) {  		Get ();  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value += ident;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  	else  		SynErr (58);  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 43) {  	Get ();  	trm.Value += t.val;  	if (StartOf (18)) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else if (la.kind == 33) {  		HexValue (out val);  		trm.Value += val;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 34) {  			Get ();  			trm.Value += ".";  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  	}  	else  		SynErr (57);  }  else if (la.kind == 34) {  	Get ();  	trm.Value += t.val;  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else {  	Get ();  	trm.Value += t.val;  	while (la.kind == 4) {  		Get ();  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value += ident;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  	else  		SynErr (58);  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 43) {  	Get ();  	trm.Value += t.val;  	if (StartOf (18)) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else if (la.kind == 33) {  		HexValue (out val);  		trm.Value += val;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 34) {  			Get ();  			trm.Value += ".";  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  	}  	else  		SynErr (57);  }  else if (la.kind == 34) {  	Get ();  	trm.Value += t.val;  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else {  	Get ();  	trm.Value += t.val;  	while (la.kind == 4) {  		Get ();  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value += ident;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  	else  		SynErr (58);  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 43) {  	Get ();  	trm.Value += t.val;  	if (StartOf (18)) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else if (la.kind == 33) {  		HexValue (out val);  		trm.Value += val;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 34) {  			Get ();  			trm.Value += ".";  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  	}  	else  		SynErr (57);  }  else if (la.kind == 34) {  	Get ();  	trm.Value += t.val;  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else {  	Get ();  	trm.Value += t.val;  	while (la.kind == 4) {  		Get ();  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value += ident;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  	else  		SynErr (58);  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 43) {  	Get ();  	trm.Value += t.val;  	if (StartOf (18)) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else if (la.kind == 33) {  		HexValue (out val);  		trm.Value += val;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 34) {  			Get ();  			trm.Value += ".";  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  	}  	else  		SynErr (57);  }  else if (la.kind == 34) {  	Get ();  	trm.Value += t.val;  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else {  	Get ();  	trm.Value += t.val;  	while (la.kind == 4) {  		Get ();  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value += ident;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  	else  		SynErr (58);  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 43) {  	Get ();  	trm.Value += t.val;  	if (StartOf (18)) {  		if (la.kind == 43) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 24) {  			Get ();  			trm.Value += t.val;  		}  		identity (out ident);  		trm.Value += ident;  	}  	else if (la.kind == 33) {  		HexValue (out val);  		trm.Value += val;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  		if (la.kind == 34) {  			Get ();  			trm.Value += ".";  			while (la.kind == 3) {  				Get ();  				trm.Value += t.val;  			}  		}  	}  	else  		SynErr (57);  }  else if (la.kind == 34) {  	Get ();  	trm.Value += t.val;  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else {  	Get ();  	trm.Value += t.val;  	while (la.kind == 4) {  		Get ();  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value += ident;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  	else  		SynErr (58);  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (18)) {  	if (la.kind == 43) {  		Get ();  		trm.Value += t.val;  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value += val;  }  else if (StartOf (19)) {  	while (la.kind == 3) {  		Get ();  		trm.Value += t.val;  	}  	if (la.kind == 34) {  		Get ();  		trm.Value += ".";  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  }  else  	SynErr (57);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (18)) {  	if (la.kind == 43) {  		Get ();  		trm.Value += t.val;  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value += val;  }  else if (StartOf (19)) {  	while (la.kind == 3) {  		Get ();  		trm.Value += t.val;  	}  	if (la.kind == 34) {  		Get ();  		trm.Value += ".";  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  }  else  	SynErr (57);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (18)) {  	if (la.kind == 43) {  		Get ();  		trm.Value += t.val;  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value += val;  }  else if (StartOf (19)) {  	while (la.kind == 3) {  		Get ();  		trm.Value += t.val;  	}  	if (la.kind == 34) {  		Get ();  		trm.Value += ".";  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  }  else  	SynErr (57);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (18)) {  	if (la.kind == 43) {  		Get ();  		trm.Value += t.val;  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value += val;  }  else if (StartOf (19)) {  	while (la.kind == 3) {  		Get ();  		trm.Value += t.val;  	}  	if (la.kind == 34) {  		Get ();  		trm.Value += ".";  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  }  else  	SynErr (57);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (18)) {  	if (la.kind == 43) {  		Get ();  		trm.Value += t.val;  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value += val;  }  else if (StartOf (19)) {  	while (la.kind == 3) {  		Get ();  		trm.Value += t.val;  	}  	if (la.kind == 34) {  		Get ();  		trm.Value += ".";  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  }  else  	SynErr (57);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (18)) {  	if (la.kind == 43) {  		Get ();  		trm.Value += t.val;  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value += val;  }  else if (StartOf (19)) {  	while (la.kind == 3) {  		Get ();  		trm.Value += t.val;  	}  	if (la.kind == 34) {  		Get ();  		trm.Value += ".";  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  }  else  	SynErr (57);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (18)) {  	if (la.kind == 43) {  		Get ();  		trm.Value += t.val;  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value += val;  }  else if (StartOf (19)) {  	while (la.kind == 3) {  		Get ();  		trm.Value += t.val;  	}  	if (la.kind == 34) {  		Get ();  		trm.Value += ".";  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  }  else  	SynErr (57);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (18)) {  	if (la.kind == 43) {  		Get ();  		trm.Value += t.val;  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value += val;  }  else if (StartOf (19)) {  	while (la.kind == 3) {  		Get ();  		trm.Value += t.val;  	}  	if (la.kind == 34) {  		Get ();  		trm.Value += ".";  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  }  else  	SynErr (57);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (18)) {  	if (la.kind == 43) {  		Get ();  		trm.Value += t.val;  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else if (la.kind == 33) {  	HexValue (out val);  	trm.Value += val;  }  else if (StartOf (19)) {  	while (la.kind == 3) {  		Get ();  		trm.Value += t.val;  	}  	if (la.kind == 34) {  		Get ();  		trm.Value += ".";  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  }  else  	SynErr (57);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 43) {  	Get ();  	trm.Value += t.val;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 24) {  	Get ();  	trm.Value += t.val;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value += val;  }  else if (StartOf (19)) {  	while (la.kind == 3) {  		Get ();  		trm.Value += t.val;  	}  	if (la.kind == 34) {  		Get ();  		trm.Value += ".";  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  }  else  	SynErr (57);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value += val;  }  else if (StartOf (19)) {  	while (la.kind == 3) {  		Get ();  		trm.Value += t.val;  	}  	if (la.kind == 34) {  		Get ();  		trm.Value += ".";  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  }  else  	SynErr (57);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value += val;  }  else if (StartOf (19)) {  	while (la.kind == 3) {  		Get ();  		trm.Value += t.val;  	}  	if (la.kind == 34) {  		Get ();  		trm.Value += ".";  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  }  else  	SynErr (57);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value += val;  }  else if (StartOf (19)) {  	while (la.kind == 3) {  		Get ();  		trm.Value += t.val;  	}  	if (la.kind == 34) {  		Get ();  		trm.Value += ".";  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  }  else  	SynErr (57);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value += val;  }  else if (StartOf (19)) {  	while (la.kind == 3) {  		Get ();  		trm.Value += t.val;  	}  	if (la.kind == 34) {  		Get ();  		trm.Value += ".";  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  }  else  	SynErr (57);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 33) {  	HexValue (out val);  	trm.Value += val;  }  else if (StartOf (19)) {  	while (la.kind == 3) {  		Get ();  		trm.Value += t.val;  	}  	if (la.kind == 34) {  		Get ();  		trm.Value += ".";  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  }  else  	SynErr (57);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (19)) {  	while (la.kind == 3) {  		Get ();  		trm.Value += t.val;  	}  	if (la.kind == 34) {  		Get ();  		trm.Value += ".";  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  }  else  	SynErr (57);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (19)) {  	while (la.kind == 3) {  		Get ();  		trm.Value += t.val;  	}  	if (la.kind == 34) {  		Get ();  		trm.Value += ".";  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  }  else  	SynErr (57);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (19)) {  	while (la.kind == 3) {  		Get ();  		trm.Value += t.val;  	}  	if (la.kind == 34) {  		Get ();  		trm.Value += ".";  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  }  else  	SynErr (57);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (19)) {  	while (la.kind == 3) {  		Get ();  		trm.Value += t.val;  	}  	if (la.kind == 34) {  		Get ();  		trm.Value += ".";  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  }  else  	SynErr (57);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (19)) {  	while (la.kind == 3) {  		Get ();  		trm.Value += t.val;  	}  	if (la.kind == 34) {  		Get ();  		trm.Value += ".";  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  }  else  	SynErr (57);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: while (la.kind == 3) {  	Get ();  	trm.Value += t.val;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 34) {  	Get ();  	trm.Value += ".";  	while (la.kind == 3) {  		Get ();  		trm.Value += t.val;  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 34) {  	Get ();  	trm.Value += ".";  	while (la.kind == 3) {  		Get ();  		trm.Value += t.val;  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: while (la.kind == 3) {  	Get ();  	trm.Value += t.val;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: SynErr (57);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 34) {  	Get ();  	trm.Value += t.val;  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else {  	Get ();  	trm.Value += t.val;  	while (la.kind == 4) {  		Get ();  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value += ident;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  	else  		SynErr (58);  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 34) {  	Get ();  	trm.Value += t.val;  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else {  	Get ();  	trm.Value += t.val;  	while (la.kind == 4) {  		Get ();  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value += ident;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  	else  		SynErr (58);  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 34) {  	Get ();  	trm.Value += t.val;  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else {  	Get ();  	trm.Value += t.val;  	while (la.kind == 4) {  		Get ();  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value += ident;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  	else  		SynErr (58);  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 34) {  	Get ();  	trm.Value += t.val;  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else {  	Get ();  	trm.Value += t.val;  	while (la.kind == 4) {  		Get ();  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value += ident;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  	else  		SynErr (58);  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 34) {  	Get ();  	trm.Value += t.val;  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else {  	Get ();  	trm.Value += t.val;  	while (la.kind == 4) {  		Get ();  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value += ident;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  	else  		SynErr (58);  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 34) {  	Get ();  	trm.Value += t.val;  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else {  	Get ();  	trm.Value += t.val;  	while (la.kind == 4) {  		Get ();  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value += ident;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  	else  		SynErr (58);  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 34) {  	Get ();  	trm.Value += t.val;  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else {  	Get ();  	trm.Value += t.val;  	while (la.kind == 4) {  		Get ();  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value += ident;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  	else  		SynErr (58);  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 34) {  	Get ();  	trm.Value += t.val;  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	identity (out ident);  	trm.Value += ident;  }  else {  	Get ();  	trm.Value += t.val;  	while (la.kind == 4) {  		Get ();  	}  	if (la.kind == 24) {  		Get ();  		trm.Value += t.val;  	}  	if (StartOf (16)) {  		identity (out ident);  		trm.Value += ident;  	}  	else if (StartOf (19)) {  		while (la.kind == 3) {  			Get ();  			trm.Value += t.val;  		}  	}  	else  		SynErr (58);  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 24) {  	Get ();  	trm.Value += t.val;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 24) {  	Get ();  	trm.Value += t.val;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value += ident;  }  else if (StartOf (19)) {  	while (la.kind == 3) {  		Get ();  		trm.Value += t.val;  	}  }  else  	SynErr (58);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value += ident;  }  else if (StartOf (19)) {  	while (la.kind == 3) {  		Get ();  		trm.Value += t.val;  	}  }  else  	SynErr (58);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value += ident;  }  else if (StartOf (19)) {  	while (la.kind == 3) {  		Get ();  		trm.Value += t.val;  	}  }  else  	SynErr (58);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (16)) {  	identity (out ident);  	trm.Value += ident;  }  else if (StartOf (19)) {  	while (la.kind == 3) {  		Get ();  		trm.Value += t.val;  	}  }  else  	SynErr (58);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (19)) {  	while (la.kind == 3) {  		Get ();  		trm.Value += t.val;  	}  }  else  	SynErr (58);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (19)) {  	while (la.kind == 3) {  		Get ();  		trm.Value += t.val;  	}  }  else  	SynErr (58);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (19)) {  	while (la.kind == 3) {  		Get ();  		trm.Value += t.val;  	}  }  else  	SynErr (58);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: while (la.kind == 3) {  	Get ();  	trm.Value += t.val;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: SynErr (58);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 10) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	expr (out exp);  	Model.Function func = new Model.Function ();  	func.Name = trm.Value;  	func.Expression = exp;  	trm.Value = null;  	trm.Function = func;  	trm.Type = Model.TermType.Function;  	while (la.kind == 4) {  		Get ();  	}  	Expect (11);  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 10) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	expr (out exp);  	Model.Function func = new Model.Function ();  	func.Name = trm.Value;  	func.Expression = exp;  	trm.Value = null;  	trm.Function = func;  	trm.Type = Model.TermType.Function;  	while (la.kind == 4) {  		Get ();  	}  	Expect (11);  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 10) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	expr (out exp);  	Model.Function func = new Model.Function ();  	func.Name = trm.Value;  	func.Expression = exp;  	trm.Value = null;  	trm.Function = func;  	trm.Type = Model.TermType.Function;  	while (la.kind == 4) {  		Get ();  	}  	Expect (11);  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 10) {  	Get ();  	while (la.kind == 4) {  		Get ();  	}  	expr (out exp);  	Model.Function func = new Model.Function ();  	func.Name = trm.Value;  	func.Expression = exp;  	trm.Value = null;  	trm.Function = func;  	trm.Type = Model.TermType.Function;  	while (la.kind == 4) {  		Get ();  	}  	Expect (11);  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: Expect (11);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (15)) {  	if (la.kind == 29) {  		Get ();  		trm.Sign = '+';  	}  	if (minus) {  		trm.Sign = '-';  	}  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  	if (la.kind == 34) {  		Get ();  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  	if (StartOf (20)) {  		if (la.val.ToLower ().Equals ("n")) {  			Expect (22);  			val += t.val;  			if (la.kind == 24 || la.kind == 29) {  				if (la.kind == 29) {  					Get ();  					val += t.val;  				}  				else {  					Get ();  					val += t.val;  				}  				Expect (3);  				val += t.val;  				while (la.kind == 3) {  					Get ();  					val += t.val;  				}  			}  		}  		else if (la.kind == 48) {  			Get ();  			trm.Unit = Model.Unit.Percent;  		}  		else {  			if (IsUnit ()) {  				identity (out ident);  				try {  					trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  				}  				catch {  					errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  				}  			}  		}  	}  	trm.Value = val;  	trm.Type = Model.TermType.Number;  }  else  	SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 29) {  	Get ();  	trm.Sign = '+';  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: while (la.kind == 3) {  	Get ();  	val += t.val;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 34) {  	Get ();  	val += t.val;  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 34) {  	Get ();  	val += t.val;  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: while (la.kind == 3) {  	Get ();  	val += t.val;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (20)) {  	if (la.val.ToLower ().Equals ("n")) {  		Expect (22);  		val += t.val;  		if (la.kind == 24 || la.kind == 29) {  			if (la.kind == 29) {  				Get ();  				val += t.val;  			}  			else {  				Get ();  				val += t.val;  			}  			Expect (3);  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  	}  	else if (la.kind == 48) {  		Get ();  		trm.Unit = Model.Unit.Percent;  	}  	else {  		if (IsUnit ()) {  			identity (out ident);  			try {  				trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  			}  			catch {  				errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  			}  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (20)) {  	if (la.val.ToLower ().Equals ("n")) {  		Expect (22);  		val += t.val;  		if (la.kind == 24 || la.kind == 29) {  			if (la.kind == 29) {  				Get ();  				val += t.val;  			}  			else {  				Get ();  				val += t.val;  			}  			Expect (3);  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  	}  	else if (la.kind == 48) {  		Get ();  		trm.Unit = Model.Unit.Percent;  	}  	else {  		if (IsUnit ()) {  			identity (out ident);  			try {  				trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  			}  			catch {  				errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  			}  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (20)) {  	if (la.val.ToLower ().Equals ("n")) {  		Expect (22);  		val += t.val;  		if (la.kind == 24 || la.kind == 29) {  			if (la.kind == 29) {  				Get ();  				val += t.val;  			}  			else {  				Get ();  				val += t.val;  			}  			Expect (3);  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  	}  	else if (la.kind == 48) {  		Get ();  		trm.Unit = Model.Unit.Percent;  	}  	else {  		if (IsUnit ()) {  			identity (out ident);  			try {  				trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  			}  			catch {  				errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  			}  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (20)) {  	if (la.val.ToLower ().Equals ("n")) {  		Expect (22);  		val += t.val;  		if (la.kind == 24 || la.kind == 29) {  			if (la.kind == 29) {  				Get ();  				val += t.val;  			}  			else {  				Get ();  				val += t.val;  			}  			Expect (3);  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  	}  	else if (la.kind == 48) {  		Get ();  		trm.Unit = Model.Unit.Percent;  	}  	else {  		if (IsUnit ()) {  			identity (out ident);  			try {  				trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  			}  			catch {  				errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  			}  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (20)) {  	if (la.val.ToLower ().Equals ("n")) {  		Expect (22);  		val += t.val;  		if (la.kind == 24 || la.kind == 29) {  			if (la.kind == 29) {  				Get ();  				val += t.val;  			}  			else {  				Get ();  				val += t.val;  			}  			Expect (3);  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  	}  	else if (la.kind == 48) {  		Get ();  		trm.Unit = Model.Unit.Percent;  	}  	else {  		if (IsUnit ()) {  			identity (out ident);  			try {  				trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  			}  			catch {  				errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  			}  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (20)) {  	if (la.val.ToLower ().Equals ("n")) {  		Expect (22);  		val += t.val;  		if (la.kind == 24 || la.kind == 29) {  			if (la.kind == 29) {  				Get ();  				val += t.val;  			}  			else {  				Get ();  				val += t.val;  			}  			Expect (3);  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  	}  	else if (la.kind == 48) {  		Get ();  		trm.Unit = Model.Unit.Percent;  	}  	else {  		if (IsUnit ()) {  			identity (out ident);  			try {  				trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  			}  			catch {  				errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  			}  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (20)) {  	if (la.val.ToLower ().Equals ("n")) {  		Expect (22);  		val += t.val;  		if (la.kind == 24 || la.kind == 29) {  			if (la.kind == 29) {  				Get ();  				val += t.val;  			}  			else {  				Get ();  				val += t.val;  			}  			Expect (3);  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  	}  	else if (la.kind == 48) {  		Get ();  		trm.Unit = Model.Unit.Percent;  	}  	else {  		if (IsUnit ()) {  			identity (out ident);  			try {  				trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  			}  			catch {  				errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  			}  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (StartOf (20)) {  	if (la.val.ToLower ().Equals ("n")) {  		Expect (22);  		val += t.val;  		if (la.kind == 24 || la.kind == 29) {  			if (la.kind == 29) {  				Get ();  				val += t.val;  			}  			else {  				Get ();  				val += t.val;  			}  			Expect (3);  			val += t.val;  			while (la.kind == 3) {  				Get ();  				val += t.val;  			}  		}  	}  	else if (la.kind == 48) {  		Get ();  		trm.Unit = Model.Unit.Percent;  	}  	else {  		if (IsUnit ()) {  			identity (out ident);  			try {  				trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  			}  			catch {  				errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  			}  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.val.ToLower ().Equals ("n")) {  	Expect (22);  	val += t.val;  	if (la.kind == 24 || la.kind == 29) {  		if (la.kind == 29) {  			Get ();  			val += t.val;  		}  		else {  			Get ();  			val += t.val;  		}  		Expect (3);  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  }  else if (la.kind == 48) {  	Get ();  	trm.Unit = Model.Unit.Percent;  }  else {  	if (IsUnit ()) {  		identity (out ident);  		try {  			trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  		}  		catch {  			errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.val.ToLower ().Equals ("n")) {  	Expect (22);  	val += t.val;  	if (la.kind == 24 || la.kind == 29) {  		if (la.kind == 29) {  			Get ();  			val += t.val;  		}  		else {  			Get ();  			val += t.val;  		}  		Expect (3);  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  }  else if (la.kind == 48) {  	Get ();  	trm.Unit = Model.Unit.Percent;  }  else {  	if (IsUnit ()) {  		identity (out ident);  		try {  			trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  		}  		catch {  			errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.val.ToLower ().Equals ("n")) {  	Expect (22);  	val += t.val;  	if (la.kind == 24 || la.kind == 29) {  		if (la.kind == 29) {  			Get ();  			val += t.val;  		}  		else {  			Get ();  			val += t.val;  		}  		Expect (3);  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  }  else if (la.kind == 48) {  	Get ();  	trm.Unit = Model.Unit.Percent;  }  else {  	if (IsUnit ()) {  		identity (out ident);  		try {  			trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  		}  		catch {  			errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.val.ToLower ().Equals ("n")) {  	Expect (22);  	val += t.val;  	if (la.kind == 24 || la.kind == 29) {  		if (la.kind == 29) {  			Get ();  			val += t.val;  		}  		else {  			Get ();  			val += t.val;  		}  		Expect (3);  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  }  else if (la.kind == 48) {  	Get ();  	trm.Unit = Model.Unit.Percent;  }  else {  	if (IsUnit ()) {  		identity (out ident);  		try {  			trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  		}  		catch {  			errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.val.ToLower ().Equals ("n")) {  	Expect (22);  	val += t.val;  	if (la.kind == 24 || la.kind == 29) {  		if (la.kind == 29) {  			Get ();  			val += t.val;  		}  		else {  			Get ();  			val += t.val;  		}  		Expect (3);  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  }  else if (la.kind == 48) {  	Get ();  	trm.Unit = Model.Unit.Percent;  }  else {  	if (IsUnit ()) {  		identity (out ident);  		try {  			trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  		}  		catch {  			errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.val.ToLower ().Equals ("n")) {  	Expect (22);  	val += t.val;  	if (la.kind == 24 || la.kind == 29) {  		if (la.kind == 29) {  			Get ();  			val += t.val;  		}  		else {  			Get ();  			val += t.val;  		}  		Expect (3);  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  }  else if (la.kind == 48) {  	Get ();  	trm.Unit = Model.Unit.Percent;  }  else {  	if (IsUnit ()) {  		identity (out ident);  		try {  			trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  		}  		catch {  			errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.val.ToLower ().Equals ("n")) {  	Expect (22);  	val += t.val;  	if (la.kind == 24 || la.kind == 29) {  		if (la.kind == 29) {  			Get ();  			val += t.val;  		}  		else {  			Get ();  			val += t.val;  		}  		Expect (3);  		val += t.val;  		while (la.kind == 3) {  			Get ();  			val += t.val;  		}  	}  }  else if (la.kind == 48) {  	Get ();  	trm.Unit = Model.Unit.Percent;  }  else {  	if (IsUnit ()) {  		identity (out ident);  		try {  			trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  		}  		catch {  			errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: Expect (22);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 24 || la.kind == 29) {  	if (la.kind == 29) {  		Get ();  		val += t.val;  	}  	else {  		Get ();  		val += t.val;  	}  	Expect (3);  	val += t.val;  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 24 || la.kind == 29) {  	if (la.kind == 29) {  		Get ();  		val += t.val;  	}  	else {  		Get ();  		val += t.val;  	}  	Expect (3);  	val += t.val;  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 24 || la.kind == 29) {  	if (la.kind == 29) {  		Get ();  		val += t.val;  	}  	else {  		Get ();  		val += t.val;  	}  	Expect (3);  	val += t.val;  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 24 || la.kind == 29) {  	if (la.kind == 29) {  		Get ();  		val += t.val;  	}  	else {  		Get ();  		val += t.val;  	}  	Expect (3);  	val += t.val;  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 24 || la.kind == 29) {  	if (la.kind == 29) {  		Get ();  		val += t.val;  	}  	else {  		Get ();  		val += t.val;  	}  	Expect (3);  	val += t.val;  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 29) {  	Get ();  	val += t.val;  }  else {  	Get ();  	val += t.val;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: Expect (3);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: while (la.kind == 3) {  	Get ();  	val += t.val;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: if (la.kind == 48) {  	Get ();  	trm.Unit = Model.Unit.Percent;  }  else {  	if (IsUnit ()) {  		identity (out ident);  		try {  			trm.Unit = (Model.Unit)Enum.Parse (typeof(Model.Unit)' ident' true);  		}  		catch {  			errors.SemErr (t.line' t.col' string.Format ("Unrecognized unit '{0}'"' ident));  		}  	}  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: SynErr (59);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,term,The following statement contains a magic number: SynErr (60);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,HexValue,The following statement contains a magic number: Expect (33);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,HexValue,The following statement contains a magic number: if (StartOf (19)) {  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  }  else if (PartOfHex (val)) {  	Expect (1);  	val += t.val;  	found = true;  }  else  	SynErr (61);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,HexValue,The following statement contains a magic number: if (StartOf (19)) {  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  }  else if (PartOfHex (val)) {  	Expect (1);  	val += t.val;  	found = true;  }  else  	SynErr (61);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,HexValue,The following statement contains a magic number: if (StartOf (19)) {  	while (la.kind == 3) {  		Get ();  		val += t.val;  	}  }  else if (PartOfHex (val)) {  	Expect (1);  	val += t.val;  	found = true;  }  else  	SynErr (61);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,HexValue,The following statement contains a magic number: while (la.kind == 3) {  	Get ();  	val += t.val;  }  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,HexValue,The following statement contains a magic number: if (PartOfHex (val)) {  	Expect (1);  	val += t.val;  	found = true;  }  else  	SynErr (61);  
Magic Number,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,HexValue,The following statement contains a magic number: SynErr (61);  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,Errors,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "ident expected";  	break;  case 2:  	s = "newline expected";  	break;  case 3:  	s = "digit expected";  	break;  case 4:  	s = "whitespace expected";  	break;  case 5:  	s = "\"<!--\" expected";  	break;  case 6:  	s = "\"-->\" expected";  	break;  case 7:  	s = "\"\'\" expected";  	break;  case 8:  	s = "\"\"\" expected";  	break;  case 9:  	s = "\"url\" expected";  	break;  case 10:  	s = "\"(\" expected";  	break;  case 11:  	s = "\")\" expected";  	break;  case 12:  	s = "\"all\" expected";  	break;  case 13:  	s = "\"aural\" expected";  	break;  case 14:  	s = "\"braille\" expected";  	break;  case 15:  	s = "\"embossed\" expected";  	break;  case 16:  	s = "\"handheld\" expected";  	break;  case 17:  	s = "\"print\" expected";  	break;  case 18:  	s = "\"projection\" expected";  	break;  case 19:  	s = "\"screen\" expected";  	break;  case 20:  	s = "\"tty\" expected";  	break;  case 21:  	s = "\"tv\" expected";  	break;  case 22:  	s = "\"n\" expected";  	break;  case 23:  	s = "\"@\" expected";  	break;  case 24:  	s = "\"-\" expected";  	break;  case 25:  	s = "\"'\" expected";  	break;  case 26:  	s = "\"{\" expected";  	break;  case 27:  	s = "\";\" expected";  	break;  case 28:  	s = "\"}\" expected";  	break;  case 29:  	s = "\"+\" expected";  	break;  case 30:  	s = "\">\" expected";  	break;  case 31:  	s = "\"~\" expected";  	break;  case 32:  	s = "\"*\" expected";  	break;  case 33:  	s = "\"#\" expected";  	break;  case 34:  	s = "\".\" expected";  	break;  case 35:  	s = "\"[\" expected";  	break;  case 36:  	s = "\"=\" expected";  	break;  case 37:  	s = "\"~=\" expected";  	break;  case 38:  	s = "\"|=\" expected";  	break;  case 39:  	s = "\"$=\" expected";  	break;  case 40:  	s = "\"^=\" expected";  	break;  case 41:  	s = "\"*=\" expected";  	break;  case 42:  	s = "\"]\" expected";  	break;  case 43:  	s = "\":\" expected";  	break;  case 44:  	s = "\"!\" expected";  	break;  case 45:  	s = "\"important\" expected";  	break;  case 46:  	s = "\"/\" expected";  	break;  case 47:  	s = "\"U\\\\\" expected";  	break;  case 48:  	s = "\"%\" expected";  	break;  case 49:  	s = "??? expected";  	break;  case 50:  	s = "invalid directive";  	break;  case 51:  	s = "invalid QuotedString";  	break;  case 52:  	s = "invalid URI";  	break;  case 53:  	s = "invalid medium";  	break;  case 54:  	s = "invalid identity";  	break;  case 55:  	s = "invalid simpleselector";  	break;  case 56:  	s = "invalid attrib";  	break;  case 57:  	s = "invalid term";  	break;  case 58:  	s = "invalid term";  	break;  case 59:  	s = "invalid term";  	break;  case 60:  	s = "invalid term";  	break;  case 61:  	s = "invalid HexValue";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,breinstormin.tools.web.css,UTF8Buffer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Read,The following statement contains a magic number: do {  	ch = base.Read ();  	// until we find a uft8 start (0xxxxxxx or 11xxxxxx)  }  while ((ch >= 128) && ((ch & 0xC0) != 0xC0) && (ch != EOF));  
Magic Number,breinstormin.tools.web.css,UTF8Buffer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Read,The following statement contains a magic number: if (ch < 128 || ch == EOF) {  	// nothing to do' first 127 chars are the same in ascii and utf8  	// 0xxxxxxx or end of file character  }  else if ((ch & 0xF0) == 0xF0) {  	// 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x07;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = base.Read ();  	int c4 = ch & 0x3F;  	ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;  }  else if ((ch & 0xE0) == 0xE0) {  	// 1110xxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x0F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = (((c1 << 6) | c2) << 6) | c3;  }  else if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,breinstormin.tools.web.css,UTF8Buffer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Read,The following statement contains a magic number: if (ch < 128 || ch == EOF) {  	// nothing to do' first 127 chars are the same in ascii and utf8  	// 0xxxxxxx or end of file character  }  else if ((ch & 0xF0) == 0xF0) {  	// 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x07;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = base.Read ();  	int c4 = ch & 0x3F;  	ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;  }  else if ((ch & 0xE0) == 0xE0) {  	// 1110xxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x0F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = (((c1 << 6) | c2) << 6) | c3;  }  else if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,breinstormin.tools.web.css,UTF8Buffer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Read,The following statement contains a magic number: if (ch < 128 || ch == EOF) {  	// nothing to do' first 127 chars are the same in ascii and utf8  	// 0xxxxxxx or end of file character  }  else if ((ch & 0xF0) == 0xF0) {  	// 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x07;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = base.Read ();  	int c4 = ch & 0x3F;  	ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;  }  else if ((ch & 0xE0) == 0xE0) {  	// 1110xxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x0F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = (((c1 << 6) | c2) << 6) | c3;  }  else if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,breinstormin.tools.web.css,UTF8Buffer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Read,The following statement contains a magic number: if (ch < 128 || ch == EOF) {  	// nothing to do' first 127 chars are the same in ascii and utf8  	// 0xxxxxxx or end of file character  }  else if ((ch & 0xF0) == 0xF0) {  	// 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x07;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = base.Read ();  	int c4 = ch & 0x3F;  	ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;  }  else if ((ch & 0xE0) == 0xE0) {  	// 1110xxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x0F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = (((c1 << 6) | c2) << 6) | c3;  }  else if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,breinstormin.tools.web.css,UTF8Buffer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Read,The following statement contains a magic number: if (ch < 128 || ch == EOF) {  	// nothing to do' first 127 chars are the same in ascii and utf8  	// 0xxxxxxx or end of file character  }  else if ((ch & 0xF0) == 0xF0) {  	// 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x07;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = base.Read ();  	int c4 = ch & 0x3F;  	ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;  }  else if ((ch & 0xE0) == 0xE0) {  	// 1110xxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x0F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = (((c1 << 6) | c2) << 6) | c3;  }  else if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,breinstormin.tools.web.css,UTF8Buffer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Read,The following statement contains a magic number: if (ch < 128 || ch == EOF) {  	// nothing to do' first 127 chars are the same in ascii and utf8  	// 0xxxxxxx or end of file character  }  else if ((ch & 0xF0) == 0xF0) {  	// 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x07;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = base.Read ();  	int c4 = ch & 0x3F;  	ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;  }  else if ((ch & 0xE0) == 0xE0) {  	// 1110xxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x0F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = (((c1 << 6) | c2) << 6) | c3;  }  else if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,breinstormin.tools.web.css,UTF8Buffer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Read,The following statement contains a magic number: if (ch < 128 || ch == EOF) {  	// nothing to do' first 127 chars are the same in ascii and utf8  	// 0xxxxxxx or end of file character  }  else if ((ch & 0xF0) == 0xF0) {  	// 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x07;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = base.Read ();  	int c4 = ch & 0x3F;  	ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;  }  else if ((ch & 0xE0) == 0xE0) {  	// 1110xxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x0F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = (((c1 << 6) | c2) << 6) | c3;  }  else if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,breinstormin.tools.web.css,UTF8Buffer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Read,The following statement contains a magic number: if ((ch & 0xF0) == 0xF0) {  	// 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x07;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = base.Read ();  	int c4 = ch & 0x3F;  	ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;  }  else if ((ch & 0xE0) == 0xE0) {  	// 1110xxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x0F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = (((c1 << 6) | c2) << 6) | c3;  }  else if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,breinstormin.tools.web.css,UTF8Buffer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Read,The following statement contains a magic number: if ((ch & 0xF0) == 0xF0) {  	// 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x07;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = base.Read ();  	int c4 = ch & 0x3F;  	ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;  }  else if ((ch & 0xE0) == 0xE0) {  	// 1110xxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x0F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = (((c1 << 6) | c2) << 6) | c3;  }  else if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,breinstormin.tools.web.css,UTF8Buffer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Read,The following statement contains a magic number: if ((ch & 0xF0) == 0xF0) {  	// 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x07;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = base.Read ();  	int c4 = ch & 0x3F;  	ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;  }  else if ((ch & 0xE0) == 0xE0) {  	// 1110xxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x0F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = (((c1 << 6) | c2) << 6) | c3;  }  else if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,breinstormin.tools.web.css,UTF8Buffer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Read,The following statement contains a magic number: if ((ch & 0xF0) == 0xF0) {  	// 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x07;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = base.Read ();  	int c4 = ch & 0x3F;  	ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;  }  else if ((ch & 0xE0) == 0xE0) {  	// 1110xxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x0F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = (((c1 << 6) | c2) << 6) | c3;  }  else if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,breinstormin.tools.web.css,UTF8Buffer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Read,The following statement contains a magic number: if ((ch & 0xF0) == 0xF0) {  	// 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x07;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = base.Read ();  	int c4 = ch & 0x3F;  	ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;  }  else if ((ch & 0xE0) == 0xE0) {  	// 1110xxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x0F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = (((c1 << 6) | c2) << 6) | c3;  }  else if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,breinstormin.tools.web.css,UTF8Buffer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Read,The following statement contains a magic number: if ((ch & 0xF0) == 0xF0) {  	// 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x07;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = base.Read ();  	int c4 = ch & 0x3F;  	ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;  }  else if ((ch & 0xE0) == 0xE0) {  	// 1110xxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x0F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = (((c1 << 6) | c2) << 6) | c3;  }  else if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,breinstormin.tools.web.css,UTF8Buffer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Read,The following statement contains a magic number: ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;  
Magic Number,breinstormin.tools.web.css,UTF8Buffer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Read,The following statement contains a magic number: ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;  
Magic Number,breinstormin.tools.web.css,UTF8Buffer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Read,The following statement contains a magic number: ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;  
Magic Number,breinstormin.tools.web.css,UTF8Buffer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Read,The following statement contains a magic number: if ((ch & 0xE0) == 0xE0) {  	// 1110xxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x0F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = (((c1 << 6) | c2) << 6) | c3;  }  else if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,breinstormin.tools.web.css,UTF8Buffer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Read,The following statement contains a magic number: if ((ch & 0xE0) == 0xE0) {  	// 1110xxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x0F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = (((c1 << 6) | c2) << 6) | c3;  }  else if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,breinstormin.tools.web.css,UTF8Buffer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Read,The following statement contains a magic number: if ((ch & 0xE0) == 0xE0) {  	// 1110xxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x0F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = (((c1 << 6) | c2) << 6) | c3;  }  else if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,breinstormin.tools.web.css,UTF8Buffer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Read,The following statement contains a magic number: ch = (((c1 << 6) | c2) << 6) | c3;  
Magic Number,breinstormin.tools.web.css,UTF8Buffer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Read,The following statement contains a magic number: ch = (((c1 << 6) | c2) << 6) | c3;  
Magic Number,breinstormin.tools.web.css,UTF8Buffer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Read,The following statement contains a magic number: if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,breinstormin.tools.web.css,UTF8Buffer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Read,The following statement contains a magic number: ch = (c1 << 6) | c2;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start = new Dictionary<int' int> (128);  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: for (int i = 65; i <= 84; ++i)  	start [i] = 1;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: for (int i = 65; i <= 84; ++i)  	start [i] = 1;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: for (int i = 86; i <= 90; ++i)  	start [i] = 1;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: for (int i = 86; i <= 90; ++i)  	start [i] = 1;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: for (int i = 95; i <= 95; ++i)  	start [i] = 1;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: for (int i = 95; i <= 95; ++i)  	start [i] = 1;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: for (int i = 97; i <= 122; ++i)  	start [i] = 1;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: for (int i = 97; i <= 122; ++i)  	start [i] = 1;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: for (int i = 10; i <= 10; ++i)  	start [i] = 2;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: for (int i = 10; i <= 10; ++i)  	start [i] = 2;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: for (int i = 10; i <= 10; ++i)  	start [i] = 2;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [i] = 2;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: for (int i = 13; i <= 13; ++i)  	start [i] = 2;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: for (int i = 13; i <= 13; ++i)  	start [i] = 2;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: for (int i = 13; i <= 13; ++i)  	start [i] = 2;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [i] = 2;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: for (int i = 48; i <= 57; ++i)  	start [i] = 3;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: for (int i = 48; i <= 57; ++i)  	start [i] = 3;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: for (int i = 48; i <= 57; ++i)  	start [i] = 3;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [i] = 3;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: for (int i = 9; i <= 9; ++i)  	start [i] = 4;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: for (int i = 9; i <= 9; ++i)  	start [i] = 4;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: for (int i = 9; i <= 9; ++i)  	start [i] = 4;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [i] = 4;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: for (int i = 11; i <= 12; ++i)  	start [i] = 4;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: for (int i = 11; i <= 12; ++i)  	start [i] = 4;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: for (int i = 11; i <= 12; ++i)  	start [i] = 4;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [i] = 4;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: for (int i = 32; i <= 32; ++i)  	start [i] = 4;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: for (int i = 32; i <= 32; ++i)  	start [i] = 4;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: for (int i = 32; i <= 32; ++i)  	start [i] = 4;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [i] = 4;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [60] = 5;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [60] = 5;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [45] = 40;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [45] = 40;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [39] = 11;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [39] = 11;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [34] = 12;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [34] = 12;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [40] = 13;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [40] = 13;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [41] = 14;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [41] = 14;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [64] = 15;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [64] = 15;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [44] = 16;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [44] = 16;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [123] = 17;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [123] = 17;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [59] = 18;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [59] = 18;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [125] = 19;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [125] = 19;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [43] = 20;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [43] = 20;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [62] = 21;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [62] = 21;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [126] = 41;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [126] = 41;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [42] = 42;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [42] = 42;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [35] = 22;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [35] = 22;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [46] = 23;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [46] = 23;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [91] = 24;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [91] = 24;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [61] = 25;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [61] = 25;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [124] = 27;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [124] = 27;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [36] = 29;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [36] = 29;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [94] = 31;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [94] = 31;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [93] = 34;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [93] = 34;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [58] = 35;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [58] = 35;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [33] = 36;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [33] = 36;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [47] = 37;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [47] = 37;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [85] = 43;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [85] = 43;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [37] = 39;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,Init,The following statement contains a magic number: start [37] = 39;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,AddCh,The following statement contains a magic number: if (tlen >= tval.Length) {  	char[] newBuf = new char[2 * tval.Length];  	Array.Copy (tval' 0' newBuf' 0' tval.Length);  	tval = newBuf;  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val) {  case "url":  	t.kind = 9;  	break;  case "all":  	t.kind = 12;  	break;  case "aural":  	t.kind = 13;  	break;  case "braille":  	t.kind = 14;  	break;  case "embossed":  	t.kind = 15;  	break;  case "handheld":  	t.kind = 16;  	break;  case "print":  	t.kind = 17;  	break;  case "projection":  	t.kind = 18;  	break;  case "screen":  	t.kind = 19;  	break;  case "tty":  	t.kind = 20;  	break;  case "tv":  	t.kind = 21;  	break;  case "n":  	t.kind = 22;  	break;  case "important":  	t.kind = 45;  	break;  default:  	break;  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val) {  case "url":  	t.kind = 9;  	break;  case "all":  	t.kind = 12;  	break;  case "aural":  	t.kind = 13;  	break;  case "braille":  	t.kind = 14;  	break;  case "embossed":  	t.kind = 15;  	break;  case "handheld":  	t.kind = 16;  	break;  case "print":  	t.kind = 17;  	break;  case "projection":  	t.kind = 18;  	break;  case "screen":  	t.kind = 19;  	break;  case "tty":  	t.kind = 20;  	break;  case "tv":  	t.kind = 21;  	break;  case "n":  	t.kind = 22;  	break;  case "important":  	t.kind = 45;  	break;  default:  	break;  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val) {  case "url":  	t.kind = 9;  	break;  case "all":  	t.kind = 12;  	break;  case "aural":  	t.kind = 13;  	break;  case "braille":  	t.kind = 14;  	break;  case "embossed":  	t.kind = 15;  	break;  case "handheld":  	t.kind = 16;  	break;  case "print":  	t.kind = 17;  	break;  case "projection":  	t.kind = 18;  	break;  case "screen":  	t.kind = 19;  	break;  case "tty":  	t.kind = 20;  	break;  case "tv":  	t.kind = 21;  	break;  case "n":  	t.kind = 22;  	break;  case "important":  	t.kind = 45;  	break;  default:  	break;  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val) {  case "url":  	t.kind = 9;  	break;  case "all":  	t.kind = 12;  	break;  case "aural":  	t.kind = 13;  	break;  case "braille":  	t.kind = 14;  	break;  case "embossed":  	t.kind = 15;  	break;  case "handheld":  	t.kind = 16;  	break;  case "print":  	t.kind = 17;  	break;  case "projection":  	t.kind = 18;  	break;  case "screen":  	t.kind = 19;  	break;  case "tty":  	t.kind = 20;  	break;  case "tv":  	t.kind = 21;  	break;  case "n":  	t.kind = 22;  	break;  case "important":  	t.kind = 45;  	break;  default:  	break;  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val) {  case "url":  	t.kind = 9;  	break;  case "all":  	t.kind = 12;  	break;  case "aural":  	t.kind = 13;  	break;  case "braille":  	t.kind = 14;  	break;  case "embossed":  	t.kind = 15;  	break;  case "handheld":  	t.kind = 16;  	break;  case "print":  	t.kind = 17;  	break;  case "projection":  	t.kind = 18;  	break;  case "screen":  	t.kind = 19;  	break;  case "tty":  	t.kind = 20;  	break;  case "tv":  	t.kind = 21;  	break;  case "n":  	t.kind = 22;  	break;  case "important":  	t.kind = 45;  	break;  default:  	break;  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val) {  case "url":  	t.kind = 9;  	break;  case "all":  	t.kind = 12;  	break;  case "aural":  	t.kind = 13;  	break;  case "braille":  	t.kind = 14;  	break;  case "embossed":  	t.kind = 15;  	break;  case "handheld":  	t.kind = 16;  	break;  case "print":  	t.kind = 17;  	break;  case "projection":  	t.kind = 18;  	break;  case "screen":  	t.kind = 19;  	break;  case "tty":  	t.kind = 20;  	break;  case "tv":  	t.kind = 21;  	break;  case "n":  	t.kind = 22;  	break;  case "important":  	t.kind = 45;  	break;  default:  	break;  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val) {  case "url":  	t.kind = 9;  	break;  case "all":  	t.kind = 12;  	break;  case "aural":  	t.kind = 13;  	break;  case "braille":  	t.kind = 14;  	break;  case "embossed":  	t.kind = 15;  	break;  case "handheld":  	t.kind = 16;  	break;  case "print":  	t.kind = 17;  	break;  case "projection":  	t.kind = 18;  	break;  case "screen":  	t.kind = 19;  	break;  case "tty":  	t.kind = 20;  	break;  case "tv":  	t.kind = 21;  	break;  case "n":  	t.kind = 22;  	break;  case "important":  	t.kind = 45;  	break;  default:  	break;  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val) {  case "url":  	t.kind = 9;  	break;  case "all":  	t.kind = 12;  	break;  case "aural":  	t.kind = 13;  	break;  case "braille":  	t.kind = 14;  	break;  case "embossed":  	t.kind = 15;  	break;  case "handheld":  	t.kind = 16;  	break;  case "print":  	t.kind = 17;  	break;  case "projection":  	t.kind = 18;  	break;  case "screen":  	t.kind = 19;  	break;  case "tty":  	t.kind = 20;  	break;  case "tv":  	t.kind = 21;  	break;  case "n":  	t.kind = 22;  	break;  case "important":  	t.kind = 45;  	break;  default:  	break;  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val) {  case "url":  	t.kind = 9;  	break;  case "all":  	t.kind = 12;  	break;  case "aural":  	t.kind = 13;  	break;  case "braille":  	t.kind = 14;  	break;  case "embossed":  	t.kind = 15;  	break;  case "handheld":  	t.kind = 16;  	break;  case "print":  	t.kind = 17;  	break;  case "projection":  	t.kind = 18;  	break;  case "screen":  	t.kind = 19;  	break;  case "tty":  	t.kind = 20;  	break;  case "tv":  	t.kind = 21;  	break;  case "n":  	t.kind = 22;  	break;  case "important":  	t.kind = 45;  	break;  default:  	break;  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val) {  case "url":  	t.kind = 9;  	break;  case "all":  	t.kind = 12;  	break;  case "aural":  	t.kind = 13;  	break;  case "braille":  	t.kind = 14;  	break;  case "embossed":  	t.kind = 15;  	break;  case "handheld":  	t.kind = 16;  	break;  case "print":  	t.kind = 17;  	break;  case "projection":  	t.kind = 18;  	break;  case "screen":  	t.kind = 19;  	break;  case "tty":  	t.kind = 20;  	break;  case "tv":  	t.kind = 21;  	break;  case "n":  	t.kind = 22;  	break;  case "important":  	t.kind = 45;  	break;  default:  	break;  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val) {  case "url":  	t.kind = 9;  	break;  case "all":  	t.kind = 12;  	break;  case "aural":  	t.kind = 13;  	break;  case "braille":  	t.kind = 14;  	break;  case "embossed":  	t.kind = 15;  	break;  case "handheld":  	t.kind = 16;  	break;  case "print":  	t.kind = 17;  	break;  case "projection":  	t.kind = 18;  	break;  case "screen":  	t.kind = 19;  	break;  case "tty":  	t.kind = 20;  	break;  case "tv":  	t.kind = 21;  	break;  case "n":  	t.kind = 22;  	break;  case "important":  	t.kind = 45;  	break;  default:  	break;  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val) {  case "url":  	t.kind = 9;  	break;  case "all":  	t.kind = 12;  	break;  case "aural":  	t.kind = 13;  	break;  case "braille":  	t.kind = 14;  	break;  case "embossed":  	t.kind = 15;  	break;  case "handheld":  	t.kind = 16;  	break;  case "print":  	t.kind = 17;  	break;  case "projection":  	t.kind = 18;  	break;  case "screen":  	t.kind = 19;  	break;  case "tty":  	t.kind = 20;  	break;  case "tv":  	t.kind = 21;  	break;  case "n":  	t.kind = 22;  	break;  case "important":  	t.kind = 45;  	break;  default:  	break;  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val) {  case "url":  	t.kind = 9;  	break;  case "all":  	t.kind = 12;  	break;  case "aural":  	t.kind = 13;  	break;  case "braille":  	t.kind = 14;  	break;  case "embossed":  	t.kind = 15;  	break;  case "handheld":  	t.kind = 16;  	break;  case "print":  	t.kind = 17;  	break;  case "projection":  	t.kind = 18;  	break;  case "screen":  	t.kind = 19;  	break;  case "tty":  	t.kind = 20;  	break;  case "tv":  	t.kind = 21;  	break;  case "n":  	t.kind = 22;  	break;  case "important":  	t.kind = 45;  	break;  default:  	break;  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 9;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 12;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 13;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 14;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 15;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 16;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 17;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 18;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 19;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 20;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 21;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 22;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 45;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: while (ch == 10 || ch == 13)  	NextCh ();  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: while (ch == 10 || ch == 13)  	NextCh ();  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 2;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 3;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 4;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == '!') {  	AddCh ();  	goto case 6;  }  else {  	t.kind = noSym;  	break;  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: goto case 6;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == '-') {  	AddCh ();  	goto case 7;  }  else {  	t.kind = noSym;  	break;  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: goto case 7;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == '-') {  	AddCh ();  	goto case 8;  }  else {  	t.kind = noSym;  	break;  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: goto case 8;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 5;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == '>') {  	AddCh ();  	goto case 10;  }  else {  	t.kind = noSym;  	break;  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: goto case 10;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 6;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 7;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 8;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 10;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 11;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 23;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 25;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 26;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 27;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 28;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 29;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 30;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 33;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 34;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 35;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 36;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 37;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == '=') {  	AddCh ();  	goto case 28;  }  else {  	t.kind = noSym;  	break;  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: goto case 28;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 38;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == '=') {  	AddCh ();  	goto case 30;  }  else {  	t.kind = noSym;  	break;  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: goto case 30;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 39;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == '=') {  	AddCh ();  	goto case 32;  }  else {  	t.kind = noSym;  	break;  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: goto case 32;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 40;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 41;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 42;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 43;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 44;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 46;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 47;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 48;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == '-') {  	AddCh ();  	goto case 9;  }  else {  	t.kind = 24;  	break;  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == '-') {  	AddCh ();  	goto case 9;  }  else {  	t.kind = 24;  	break;  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: goto case 9;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 24;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == '=') {  	AddCh ();  	goto case 26;  }  else {  	t.kind = 31;  	break;  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == '=') {  	AddCh ();  	goto case 26;  }  else {  	t.kind = 31;  	break;  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: goto case 26;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 31;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == '=') {  	AddCh ();  	goto case 33;  }  else {  	t.kind = 32;  	break;  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == '=') {  	AddCh ();  	goto case 33;  }  else {  	t.kind = 32;  	break;  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: goto case 33;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 32;  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  	AddCh ();  	goto case 1;  }  else if (ch == 92) {  	AddCh ();  	goto case 38;  }  else {  	t.kind = 1;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  	AddCh ();  	goto case 1;  }  else if (ch == 92) {  	AddCh ();  	goto case 38;  }  else {  	t.kind = 1;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == 92) {  	AddCh ();  	goto case 38;  }  else {  	t.kind = 1;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == 92) {  	AddCh ();  	goto case 38;  }  else {  	t.kind = 1;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following statement contains a magic number: goto case 38;  
Magic Number,breinstormin.tools.web.css.Model,PropertyValue,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\PropertyValue.cs,ToColor,The following statement contains a magic number: if (type == ValueType.Hex) {  	if (value.Length == 7 && value.StartsWith ("#")) {  		hex = value.Substring (1);  	}  	else if (value.Length == 6) {  		hex = value;  	}  }  else {  	try {  		KnownColor kc = (KnownColor)Enum.Parse (typeof(KnownColor)' value' true);  		Color c = Color.FromKnownColor (kc);  		return c;  	}  	catch {  	}  }  
Magic Number,breinstormin.tools.web.css.Model,PropertyValue,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\PropertyValue.cs,ToColor,The following statement contains a magic number: if (type == ValueType.Hex) {  	if (value.Length == 7 && value.StartsWith ("#")) {  		hex = value.Substring (1);  	}  	else if (value.Length == 6) {  		hex = value;  	}  }  else {  	try {  		KnownColor kc = (KnownColor)Enum.Parse (typeof(KnownColor)' value' true);  		Color c = Color.FromKnownColor (kc);  		return c;  	}  	catch {  	}  }  
Magic Number,breinstormin.tools.web.css.Model,PropertyValue,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\PropertyValue.cs,ToColor,The following statement contains a magic number: if (value.Length == 7 && value.StartsWith ("#")) {  	hex = value.Substring (1);  }  else if (value.Length == 6) {  	hex = value;  }  
Magic Number,breinstormin.tools.web.css.Model,PropertyValue,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\PropertyValue.cs,ToColor,The following statement contains a magic number: if (value.Length == 7 && value.StartsWith ("#")) {  	hex = value.Substring (1);  }  else if (value.Length == 6) {  	hex = value;  }  
Magic Number,breinstormin.tools.web.css.Model,PropertyValue,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\PropertyValue.cs,ToColor,The following statement contains a magic number: if (value.Length == 6) {  	hex = value;  }  
Magic Number,breinstormin.tools.web.css.Model,PropertyValue,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\PropertyValue.cs,DeHex,The following statement contains a magic number: for (int i = 0; i < input.Length; i++) {  	string chunk = input.Substring (i' 1).ToUpper ();  	switch (chunk) {  	case "A":  		val = 10;  		break;  	case "B":  		val = 11;  		break;  	case "C":  		val = 12;  		break;  	case "D":  		val = 13;  		break;  	case "E":  		val = 14;  		break;  	case "F":  		val = 15;  		break;  	default:  		val = int.Parse (chunk);  		break;  	}  	if (i == 0) {  		result += val * 16;  	}  	else {  		result += val;  	}  }  
Magic Number,breinstormin.tools.web.css.Model,PropertyValue,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\PropertyValue.cs,DeHex,The following statement contains a magic number: for (int i = 0; i < input.Length; i++) {  	string chunk = input.Substring (i' 1).ToUpper ();  	switch (chunk) {  	case "A":  		val = 10;  		break;  	case "B":  		val = 11;  		break;  	case "C":  		val = 12;  		break;  	case "D":  		val = 13;  		break;  	case "E":  		val = 14;  		break;  	case "F":  		val = 15;  		break;  	default:  		val = int.Parse (chunk);  		break;  	}  	if (i == 0) {  		result += val * 16;  	}  	else {  		result += val;  	}  }  
Magic Number,breinstormin.tools.web.css.Model,PropertyValue,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\PropertyValue.cs,DeHex,The following statement contains a magic number: for (int i = 0; i < input.Length; i++) {  	string chunk = input.Substring (i' 1).ToUpper ();  	switch (chunk) {  	case "A":  		val = 10;  		break;  	case "B":  		val = 11;  		break;  	case "C":  		val = 12;  		break;  	case "D":  		val = 13;  		break;  	case "E":  		val = 14;  		break;  	case "F":  		val = 15;  		break;  	default:  		val = int.Parse (chunk);  		break;  	}  	if (i == 0) {  		result += val * 16;  	}  	else {  		result += val;  	}  }  
Magic Number,breinstormin.tools.web.css.Model,PropertyValue,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\PropertyValue.cs,DeHex,The following statement contains a magic number: for (int i = 0; i < input.Length; i++) {  	string chunk = input.Substring (i' 1).ToUpper ();  	switch (chunk) {  	case "A":  		val = 10;  		break;  	case "B":  		val = 11;  		break;  	case "C":  		val = 12;  		break;  	case "D":  		val = 13;  		break;  	case "E":  		val = 14;  		break;  	case "F":  		val = 15;  		break;  	default:  		val = int.Parse (chunk);  		break;  	}  	if (i == 0) {  		result += val * 16;  	}  	else {  		result += val;  	}  }  
Magic Number,breinstormin.tools.web.css.Model,PropertyValue,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\PropertyValue.cs,DeHex,The following statement contains a magic number: for (int i = 0; i < input.Length; i++) {  	string chunk = input.Substring (i' 1).ToUpper ();  	switch (chunk) {  	case "A":  		val = 10;  		break;  	case "B":  		val = 11;  		break;  	case "C":  		val = 12;  		break;  	case "D":  		val = 13;  		break;  	case "E":  		val = 14;  		break;  	case "F":  		val = 15;  		break;  	default:  		val = int.Parse (chunk);  		break;  	}  	if (i == 0) {  		result += val * 16;  	}  	else {  		result += val;  	}  }  
Magic Number,breinstormin.tools.web.css.Model,PropertyValue,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\PropertyValue.cs,DeHex,The following statement contains a magic number: for (int i = 0; i < input.Length; i++) {  	string chunk = input.Substring (i' 1).ToUpper ();  	switch (chunk) {  	case "A":  		val = 10;  		break;  	case "B":  		val = 11;  		break;  	case "C":  		val = 12;  		break;  	case "D":  		val = 13;  		break;  	case "E":  		val = 14;  		break;  	case "F":  		val = 15;  		break;  	default:  		val = int.Parse (chunk);  		break;  	}  	if (i == 0) {  		result += val * 16;  	}  	else {  		result += val;  	}  }  
Magic Number,breinstormin.tools.web.css.Model,PropertyValue,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\PropertyValue.cs,DeHex,The following statement contains a magic number: for (int i = 0; i < input.Length; i++) {  	string chunk = input.Substring (i' 1).ToUpper ();  	switch (chunk) {  	case "A":  		val = 10;  		break;  	case "B":  		val = 11;  		break;  	case "C":  		val = 12;  		break;  	case "D":  		val = 13;  		break;  	case "E":  		val = 14;  		break;  	case "F":  		val = 15;  		break;  	default:  		val = int.Parse (chunk);  		break;  	}  	if (i == 0) {  		result += val * 16;  	}  	else {  		result += val;  	}  }  
Magic Number,breinstormin.tools.web.css.Model,PropertyValue,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\PropertyValue.cs,DeHex,The following statement contains a magic number: switch (chunk) {  case "A":  	val = 10;  	break;  case "B":  	val = 11;  	break;  case "C":  	val = 12;  	break;  case "D":  	val = 13;  	break;  case "E":  	val = 14;  	break;  case "F":  	val = 15;  	break;  default:  	val = int.Parse (chunk);  	break;  }  
Magic Number,breinstormin.tools.web.css.Model,PropertyValue,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\PropertyValue.cs,DeHex,The following statement contains a magic number: switch (chunk) {  case "A":  	val = 10;  	break;  case "B":  	val = 11;  	break;  case "C":  	val = 12;  	break;  case "D":  	val = 13;  	break;  case "E":  	val = 14;  	break;  case "F":  	val = 15;  	break;  default:  	val = int.Parse (chunk);  	break;  }  
Magic Number,breinstormin.tools.web.css.Model,PropertyValue,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\PropertyValue.cs,DeHex,The following statement contains a magic number: switch (chunk) {  case "A":  	val = 10;  	break;  case "B":  	val = 11;  	break;  case "C":  	val = 12;  	break;  case "D":  	val = 13;  	break;  case "E":  	val = 14;  	break;  case "F":  	val = 15;  	break;  default:  	val = int.Parse (chunk);  	break;  }  
Magic Number,breinstormin.tools.web.css.Model,PropertyValue,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\PropertyValue.cs,DeHex,The following statement contains a magic number: switch (chunk) {  case "A":  	val = 10;  	break;  case "B":  	val = 11;  	break;  case "C":  	val = 12;  	break;  case "D":  	val = 13;  	break;  case "E":  	val = 14;  	break;  case "F":  	val = 15;  	break;  default:  	val = int.Parse (chunk);  	break;  }  
Magic Number,breinstormin.tools.web.css.Model,PropertyValue,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\PropertyValue.cs,DeHex,The following statement contains a magic number: switch (chunk) {  case "A":  	val = 10;  	break;  case "B":  	val = 11;  	break;  case "C":  	val = 12;  	break;  case "D":  	val = 13;  	break;  case "E":  	val = 14;  	break;  case "F":  	val = 15;  	break;  default:  	val = int.Parse (chunk);  	break;  }  
Magic Number,breinstormin.tools.web.css.Model,PropertyValue,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\PropertyValue.cs,DeHex,The following statement contains a magic number: switch (chunk) {  case "A":  	val = 10;  	break;  case "B":  	val = 11;  	break;  case "C":  	val = 12;  	break;  case "D":  	val = 13;  	break;  case "E":  	val = 14;  	break;  case "F":  	val = 15;  	break;  default:  	val = int.Parse (chunk);  	break;  }  
Magic Number,breinstormin.tools.web.css.Model,PropertyValue,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\PropertyValue.cs,DeHex,The following statement contains a magic number: val = 10;  
Magic Number,breinstormin.tools.web.css.Model,PropertyValue,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\PropertyValue.cs,DeHex,The following statement contains a magic number: val = 11;  
Magic Number,breinstormin.tools.web.css.Model,PropertyValue,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\PropertyValue.cs,DeHex,The following statement contains a magic number: val = 12;  
Magic Number,breinstormin.tools.web.css.Model,PropertyValue,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\PropertyValue.cs,DeHex,The following statement contains a magic number: val = 13;  
Magic Number,breinstormin.tools.web.css.Model,PropertyValue,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\PropertyValue.cs,DeHex,The following statement contains a magic number: val = 14;  
Magic Number,breinstormin.tools.web.css.Model,PropertyValue,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\PropertyValue.cs,DeHex,The following statement contains a magic number: val = 15;  
Magic Number,breinstormin.tools.web.css.Model,PropertyValue,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\PropertyValue.cs,DeHex,The following statement contains a magic number: if (i == 0) {  	result += val * 16;  }  else {  	result += val;  }  
Magic Number,breinstormin.tools.web.css.Model,PropertyValue,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\PropertyValue.cs,DeHex,The following statement contains a magic number: result += val * 16;  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: if (type == TermType.Hex) {  	if ((val.Length == 7 || val.Length == 4) && val.StartsWith ("#")) {  		hex = val.Substring (1);  	}  	else if (val.Length == 6 || val.Length == 3) {  		hex = val;  	}  }  else if (type == TermType.Function) {  	if ((function.Name.ToLower ().Equals ("rgb") && function.Expression.Terms.Count == 3) || (function.Name.ToLower ().Equals ("rgba") && function.Expression.Terms.Count == 4)) {  		int fr = 0' fg = 0' fb = 0;  		for (int i = 0; i < function.Expression.Terms.Count; i++) {  			if (function.Expression.Terms [i].Type != TermType.Number) {  				return Color.Black;  			}  			switch (i) {  			case 0:  				fr = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 1:  				fg = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 2:  				fb = GetRGBValue (function.Expression.Terms [i]);  				break;  			}  		}  		return Color.FromArgb (fr' fg' fb);  	}  	else if ((function.Name.ToLower ().Equals ("hsl") && function.Expression.Terms.Count == 3) || (function.Name.Equals ("hsla") && function.Expression.Terms.Count == 4)) {  		int h = 0' s = 0' v = 0;  		for (int i = 0; i < function.Expression.Terms.Count; i++) {  			if (function.Expression.Terms [i].Type != TermType.Number) {  				return Color.Black;  			}  			switch (i) {  			case 0:  				h = GetHueValue (function.Expression.Terms [i]);  				break;  			case 1:  				s = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 2:  				v = GetRGBValue (function.Expression.Terms [i]);  				break;  			}  		}  		HSV hsv = new HSV (h' s' v);  		return hsv.Color;  	}  }  else {  	try {  		KnownColor kc = (KnownColor)Enum.Parse (typeof(KnownColor)' val' true);  		Color c = Color.FromKnownColor (kc);  		return c;  	}  	catch {  	}  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: if (type == TermType.Hex) {  	if ((val.Length == 7 || val.Length == 4) && val.StartsWith ("#")) {  		hex = val.Substring (1);  	}  	else if (val.Length == 6 || val.Length == 3) {  		hex = val;  	}  }  else if (type == TermType.Function) {  	if ((function.Name.ToLower ().Equals ("rgb") && function.Expression.Terms.Count == 3) || (function.Name.ToLower ().Equals ("rgba") && function.Expression.Terms.Count == 4)) {  		int fr = 0' fg = 0' fb = 0;  		for (int i = 0; i < function.Expression.Terms.Count; i++) {  			if (function.Expression.Terms [i].Type != TermType.Number) {  				return Color.Black;  			}  			switch (i) {  			case 0:  				fr = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 1:  				fg = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 2:  				fb = GetRGBValue (function.Expression.Terms [i]);  				break;  			}  		}  		return Color.FromArgb (fr' fg' fb);  	}  	else if ((function.Name.ToLower ().Equals ("hsl") && function.Expression.Terms.Count == 3) || (function.Name.Equals ("hsla") && function.Expression.Terms.Count == 4)) {  		int h = 0' s = 0' v = 0;  		for (int i = 0; i < function.Expression.Terms.Count; i++) {  			if (function.Expression.Terms [i].Type != TermType.Number) {  				return Color.Black;  			}  			switch (i) {  			case 0:  				h = GetHueValue (function.Expression.Terms [i]);  				break;  			case 1:  				s = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 2:  				v = GetRGBValue (function.Expression.Terms [i]);  				break;  			}  		}  		HSV hsv = new HSV (h' s' v);  		return hsv.Color;  	}  }  else {  	try {  		KnownColor kc = (KnownColor)Enum.Parse (typeof(KnownColor)' val' true);  		Color c = Color.FromKnownColor (kc);  		return c;  	}  	catch {  	}  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: if (type == TermType.Hex) {  	if ((val.Length == 7 || val.Length == 4) && val.StartsWith ("#")) {  		hex = val.Substring (1);  	}  	else if (val.Length == 6 || val.Length == 3) {  		hex = val;  	}  }  else if (type == TermType.Function) {  	if ((function.Name.ToLower ().Equals ("rgb") && function.Expression.Terms.Count == 3) || (function.Name.ToLower ().Equals ("rgba") && function.Expression.Terms.Count == 4)) {  		int fr = 0' fg = 0' fb = 0;  		for (int i = 0; i < function.Expression.Terms.Count; i++) {  			if (function.Expression.Terms [i].Type != TermType.Number) {  				return Color.Black;  			}  			switch (i) {  			case 0:  				fr = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 1:  				fg = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 2:  				fb = GetRGBValue (function.Expression.Terms [i]);  				break;  			}  		}  		return Color.FromArgb (fr' fg' fb);  	}  	else if ((function.Name.ToLower ().Equals ("hsl") && function.Expression.Terms.Count == 3) || (function.Name.Equals ("hsla") && function.Expression.Terms.Count == 4)) {  		int h = 0' s = 0' v = 0;  		for (int i = 0; i < function.Expression.Terms.Count; i++) {  			if (function.Expression.Terms [i].Type != TermType.Number) {  				return Color.Black;  			}  			switch (i) {  			case 0:  				h = GetHueValue (function.Expression.Terms [i]);  				break;  			case 1:  				s = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 2:  				v = GetRGBValue (function.Expression.Terms [i]);  				break;  			}  		}  		HSV hsv = new HSV (h' s' v);  		return hsv.Color;  	}  }  else {  	try {  		KnownColor kc = (KnownColor)Enum.Parse (typeof(KnownColor)' val' true);  		Color c = Color.FromKnownColor (kc);  		return c;  	}  	catch {  	}  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: if (type == TermType.Hex) {  	if ((val.Length == 7 || val.Length == 4) && val.StartsWith ("#")) {  		hex = val.Substring (1);  	}  	else if (val.Length == 6 || val.Length == 3) {  		hex = val;  	}  }  else if (type == TermType.Function) {  	if ((function.Name.ToLower ().Equals ("rgb") && function.Expression.Terms.Count == 3) || (function.Name.ToLower ().Equals ("rgba") && function.Expression.Terms.Count == 4)) {  		int fr = 0' fg = 0' fb = 0;  		for (int i = 0; i < function.Expression.Terms.Count; i++) {  			if (function.Expression.Terms [i].Type != TermType.Number) {  				return Color.Black;  			}  			switch (i) {  			case 0:  				fr = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 1:  				fg = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 2:  				fb = GetRGBValue (function.Expression.Terms [i]);  				break;  			}  		}  		return Color.FromArgb (fr' fg' fb);  	}  	else if ((function.Name.ToLower ().Equals ("hsl") && function.Expression.Terms.Count == 3) || (function.Name.Equals ("hsla") && function.Expression.Terms.Count == 4)) {  		int h = 0' s = 0' v = 0;  		for (int i = 0; i < function.Expression.Terms.Count; i++) {  			if (function.Expression.Terms [i].Type != TermType.Number) {  				return Color.Black;  			}  			switch (i) {  			case 0:  				h = GetHueValue (function.Expression.Terms [i]);  				break;  			case 1:  				s = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 2:  				v = GetRGBValue (function.Expression.Terms [i]);  				break;  			}  		}  		HSV hsv = new HSV (h' s' v);  		return hsv.Color;  	}  }  else {  	try {  		KnownColor kc = (KnownColor)Enum.Parse (typeof(KnownColor)' val' true);  		Color c = Color.FromKnownColor (kc);  		return c;  	}  	catch {  	}  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: if (type == TermType.Hex) {  	if ((val.Length == 7 || val.Length == 4) && val.StartsWith ("#")) {  		hex = val.Substring (1);  	}  	else if (val.Length == 6 || val.Length == 3) {  		hex = val;  	}  }  else if (type == TermType.Function) {  	if ((function.Name.ToLower ().Equals ("rgb") && function.Expression.Terms.Count == 3) || (function.Name.ToLower ().Equals ("rgba") && function.Expression.Terms.Count == 4)) {  		int fr = 0' fg = 0' fb = 0;  		for (int i = 0; i < function.Expression.Terms.Count; i++) {  			if (function.Expression.Terms [i].Type != TermType.Number) {  				return Color.Black;  			}  			switch (i) {  			case 0:  				fr = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 1:  				fg = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 2:  				fb = GetRGBValue (function.Expression.Terms [i]);  				break;  			}  		}  		return Color.FromArgb (fr' fg' fb);  	}  	else if ((function.Name.ToLower ().Equals ("hsl") && function.Expression.Terms.Count == 3) || (function.Name.Equals ("hsla") && function.Expression.Terms.Count == 4)) {  		int h = 0' s = 0' v = 0;  		for (int i = 0; i < function.Expression.Terms.Count; i++) {  			if (function.Expression.Terms [i].Type != TermType.Number) {  				return Color.Black;  			}  			switch (i) {  			case 0:  				h = GetHueValue (function.Expression.Terms [i]);  				break;  			case 1:  				s = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 2:  				v = GetRGBValue (function.Expression.Terms [i]);  				break;  			}  		}  		HSV hsv = new HSV (h' s' v);  		return hsv.Color;  	}  }  else {  	try {  		KnownColor kc = (KnownColor)Enum.Parse (typeof(KnownColor)' val' true);  		Color c = Color.FromKnownColor (kc);  		return c;  	}  	catch {  	}  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: if (type == TermType.Hex) {  	if ((val.Length == 7 || val.Length == 4) && val.StartsWith ("#")) {  		hex = val.Substring (1);  	}  	else if (val.Length == 6 || val.Length == 3) {  		hex = val;  	}  }  else if (type == TermType.Function) {  	if ((function.Name.ToLower ().Equals ("rgb") && function.Expression.Terms.Count == 3) || (function.Name.ToLower ().Equals ("rgba") && function.Expression.Terms.Count == 4)) {  		int fr = 0' fg = 0' fb = 0;  		for (int i = 0; i < function.Expression.Terms.Count; i++) {  			if (function.Expression.Terms [i].Type != TermType.Number) {  				return Color.Black;  			}  			switch (i) {  			case 0:  				fr = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 1:  				fg = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 2:  				fb = GetRGBValue (function.Expression.Terms [i]);  				break;  			}  		}  		return Color.FromArgb (fr' fg' fb);  	}  	else if ((function.Name.ToLower ().Equals ("hsl") && function.Expression.Terms.Count == 3) || (function.Name.Equals ("hsla") && function.Expression.Terms.Count == 4)) {  		int h = 0' s = 0' v = 0;  		for (int i = 0; i < function.Expression.Terms.Count; i++) {  			if (function.Expression.Terms [i].Type != TermType.Number) {  				return Color.Black;  			}  			switch (i) {  			case 0:  				h = GetHueValue (function.Expression.Terms [i]);  				break;  			case 1:  				s = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 2:  				v = GetRGBValue (function.Expression.Terms [i]);  				break;  			}  		}  		HSV hsv = new HSV (h' s' v);  		return hsv.Color;  	}  }  else {  	try {  		KnownColor kc = (KnownColor)Enum.Parse (typeof(KnownColor)' val' true);  		Color c = Color.FromKnownColor (kc);  		return c;  	}  	catch {  	}  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: if (type == TermType.Hex) {  	if ((val.Length == 7 || val.Length == 4) && val.StartsWith ("#")) {  		hex = val.Substring (1);  	}  	else if (val.Length == 6 || val.Length == 3) {  		hex = val;  	}  }  else if (type == TermType.Function) {  	if ((function.Name.ToLower ().Equals ("rgb") && function.Expression.Terms.Count == 3) || (function.Name.ToLower ().Equals ("rgba") && function.Expression.Terms.Count == 4)) {  		int fr = 0' fg = 0' fb = 0;  		for (int i = 0; i < function.Expression.Terms.Count; i++) {  			if (function.Expression.Terms [i].Type != TermType.Number) {  				return Color.Black;  			}  			switch (i) {  			case 0:  				fr = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 1:  				fg = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 2:  				fb = GetRGBValue (function.Expression.Terms [i]);  				break;  			}  		}  		return Color.FromArgb (fr' fg' fb);  	}  	else if ((function.Name.ToLower ().Equals ("hsl") && function.Expression.Terms.Count == 3) || (function.Name.Equals ("hsla") && function.Expression.Terms.Count == 4)) {  		int h = 0' s = 0' v = 0;  		for (int i = 0; i < function.Expression.Terms.Count; i++) {  			if (function.Expression.Terms [i].Type != TermType.Number) {  				return Color.Black;  			}  			switch (i) {  			case 0:  				h = GetHueValue (function.Expression.Terms [i]);  				break;  			case 1:  				s = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 2:  				v = GetRGBValue (function.Expression.Terms [i]);  				break;  			}  		}  		HSV hsv = new HSV (h' s' v);  		return hsv.Color;  	}  }  else {  	try {  		KnownColor kc = (KnownColor)Enum.Parse (typeof(KnownColor)' val' true);  		Color c = Color.FromKnownColor (kc);  		return c;  	}  	catch {  	}  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: if (type == TermType.Hex) {  	if ((val.Length == 7 || val.Length == 4) && val.StartsWith ("#")) {  		hex = val.Substring (1);  	}  	else if (val.Length == 6 || val.Length == 3) {  		hex = val;  	}  }  else if (type == TermType.Function) {  	if ((function.Name.ToLower ().Equals ("rgb") && function.Expression.Terms.Count == 3) || (function.Name.ToLower ().Equals ("rgba") && function.Expression.Terms.Count == 4)) {  		int fr = 0' fg = 0' fb = 0;  		for (int i = 0; i < function.Expression.Terms.Count; i++) {  			if (function.Expression.Terms [i].Type != TermType.Number) {  				return Color.Black;  			}  			switch (i) {  			case 0:  				fr = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 1:  				fg = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 2:  				fb = GetRGBValue (function.Expression.Terms [i]);  				break;  			}  		}  		return Color.FromArgb (fr' fg' fb);  	}  	else if ((function.Name.ToLower ().Equals ("hsl") && function.Expression.Terms.Count == 3) || (function.Name.Equals ("hsla") && function.Expression.Terms.Count == 4)) {  		int h = 0' s = 0' v = 0;  		for (int i = 0; i < function.Expression.Terms.Count; i++) {  			if (function.Expression.Terms [i].Type != TermType.Number) {  				return Color.Black;  			}  			switch (i) {  			case 0:  				h = GetHueValue (function.Expression.Terms [i]);  				break;  			case 1:  				s = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 2:  				v = GetRGBValue (function.Expression.Terms [i]);  				break;  			}  		}  		HSV hsv = new HSV (h' s' v);  		return hsv.Color;  	}  }  else {  	try {  		KnownColor kc = (KnownColor)Enum.Parse (typeof(KnownColor)' val' true);  		Color c = Color.FromKnownColor (kc);  		return c;  	}  	catch {  	}  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: if (type == TermType.Hex) {  	if ((val.Length == 7 || val.Length == 4) && val.StartsWith ("#")) {  		hex = val.Substring (1);  	}  	else if (val.Length == 6 || val.Length == 3) {  		hex = val;  	}  }  else if (type == TermType.Function) {  	if ((function.Name.ToLower ().Equals ("rgb") && function.Expression.Terms.Count == 3) || (function.Name.ToLower ().Equals ("rgba") && function.Expression.Terms.Count == 4)) {  		int fr = 0' fg = 0' fb = 0;  		for (int i = 0; i < function.Expression.Terms.Count; i++) {  			if (function.Expression.Terms [i].Type != TermType.Number) {  				return Color.Black;  			}  			switch (i) {  			case 0:  				fr = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 1:  				fg = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 2:  				fb = GetRGBValue (function.Expression.Terms [i]);  				break;  			}  		}  		return Color.FromArgb (fr' fg' fb);  	}  	else if ((function.Name.ToLower ().Equals ("hsl") && function.Expression.Terms.Count == 3) || (function.Name.Equals ("hsla") && function.Expression.Terms.Count == 4)) {  		int h = 0' s = 0' v = 0;  		for (int i = 0; i < function.Expression.Terms.Count; i++) {  			if (function.Expression.Terms [i].Type != TermType.Number) {  				return Color.Black;  			}  			switch (i) {  			case 0:  				h = GetHueValue (function.Expression.Terms [i]);  				break;  			case 1:  				s = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 2:  				v = GetRGBValue (function.Expression.Terms [i]);  				break;  			}  		}  		HSV hsv = new HSV (h' s' v);  		return hsv.Color;  	}  }  else {  	try {  		KnownColor kc = (KnownColor)Enum.Parse (typeof(KnownColor)' val' true);  		Color c = Color.FromKnownColor (kc);  		return c;  	}  	catch {  	}  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: if (type == TermType.Hex) {  	if ((val.Length == 7 || val.Length == 4) && val.StartsWith ("#")) {  		hex = val.Substring (1);  	}  	else if (val.Length == 6 || val.Length == 3) {  		hex = val;  	}  }  else if (type == TermType.Function) {  	if ((function.Name.ToLower ().Equals ("rgb") && function.Expression.Terms.Count == 3) || (function.Name.ToLower ().Equals ("rgba") && function.Expression.Terms.Count == 4)) {  		int fr = 0' fg = 0' fb = 0;  		for (int i = 0; i < function.Expression.Terms.Count; i++) {  			if (function.Expression.Terms [i].Type != TermType.Number) {  				return Color.Black;  			}  			switch (i) {  			case 0:  				fr = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 1:  				fg = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 2:  				fb = GetRGBValue (function.Expression.Terms [i]);  				break;  			}  		}  		return Color.FromArgb (fr' fg' fb);  	}  	else if ((function.Name.ToLower ().Equals ("hsl") && function.Expression.Terms.Count == 3) || (function.Name.Equals ("hsla") && function.Expression.Terms.Count == 4)) {  		int h = 0' s = 0' v = 0;  		for (int i = 0; i < function.Expression.Terms.Count; i++) {  			if (function.Expression.Terms [i].Type != TermType.Number) {  				return Color.Black;  			}  			switch (i) {  			case 0:  				h = GetHueValue (function.Expression.Terms [i]);  				break;  			case 1:  				s = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 2:  				v = GetRGBValue (function.Expression.Terms [i]);  				break;  			}  		}  		HSV hsv = new HSV (h' s' v);  		return hsv.Color;  	}  }  else {  	try {  		KnownColor kc = (KnownColor)Enum.Parse (typeof(KnownColor)' val' true);  		Color c = Color.FromKnownColor (kc);  		return c;  	}  	catch {  	}  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: if ((val.Length == 7 || val.Length == 4) && val.StartsWith ("#")) {  	hex = val.Substring (1);  }  else if (val.Length == 6 || val.Length == 3) {  	hex = val;  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: if ((val.Length == 7 || val.Length == 4) && val.StartsWith ("#")) {  	hex = val.Substring (1);  }  else if (val.Length == 6 || val.Length == 3) {  	hex = val;  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: if ((val.Length == 7 || val.Length == 4) && val.StartsWith ("#")) {  	hex = val.Substring (1);  }  else if (val.Length == 6 || val.Length == 3) {  	hex = val;  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: if ((val.Length == 7 || val.Length == 4) && val.StartsWith ("#")) {  	hex = val.Substring (1);  }  else if (val.Length == 6 || val.Length == 3) {  	hex = val;  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: if (val.Length == 6 || val.Length == 3) {  	hex = val;  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: if (val.Length == 6 || val.Length == 3) {  	hex = val;  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: if (type == TermType.Function) {  	if ((function.Name.ToLower ().Equals ("rgb") && function.Expression.Terms.Count == 3) || (function.Name.ToLower ().Equals ("rgba") && function.Expression.Terms.Count == 4)) {  		int fr = 0' fg = 0' fb = 0;  		for (int i = 0; i < function.Expression.Terms.Count; i++) {  			if (function.Expression.Terms [i].Type != TermType.Number) {  				return Color.Black;  			}  			switch (i) {  			case 0:  				fr = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 1:  				fg = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 2:  				fb = GetRGBValue (function.Expression.Terms [i]);  				break;  			}  		}  		return Color.FromArgb (fr' fg' fb);  	}  	else if ((function.Name.ToLower ().Equals ("hsl") && function.Expression.Terms.Count == 3) || (function.Name.Equals ("hsla") && function.Expression.Terms.Count == 4)) {  		int h = 0' s = 0' v = 0;  		for (int i = 0; i < function.Expression.Terms.Count; i++) {  			if (function.Expression.Terms [i].Type != TermType.Number) {  				return Color.Black;  			}  			switch (i) {  			case 0:  				h = GetHueValue (function.Expression.Terms [i]);  				break;  			case 1:  				s = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 2:  				v = GetRGBValue (function.Expression.Terms [i]);  				break;  			}  		}  		HSV hsv = new HSV (h' s' v);  		return hsv.Color;  	}  }  else {  	try {  		KnownColor kc = (KnownColor)Enum.Parse (typeof(KnownColor)' val' true);  		Color c = Color.FromKnownColor (kc);  		return c;  	}  	catch {  	}  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: if (type == TermType.Function) {  	if ((function.Name.ToLower ().Equals ("rgb") && function.Expression.Terms.Count == 3) || (function.Name.ToLower ().Equals ("rgba") && function.Expression.Terms.Count == 4)) {  		int fr = 0' fg = 0' fb = 0;  		for (int i = 0; i < function.Expression.Terms.Count; i++) {  			if (function.Expression.Terms [i].Type != TermType.Number) {  				return Color.Black;  			}  			switch (i) {  			case 0:  				fr = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 1:  				fg = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 2:  				fb = GetRGBValue (function.Expression.Terms [i]);  				break;  			}  		}  		return Color.FromArgb (fr' fg' fb);  	}  	else if ((function.Name.ToLower ().Equals ("hsl") && function.Expression.Terms.Count == 3) || (function.Name.Equals ("hsla") && function.Expression.Terms.Count == 4)) {  		int h = 0' s = 0' v = 0;  		for (int i = 0; i < function.Expression.Terms.Count; i++) {  			if (function.Expression.Terms [i].Type != TermType.Number) {  				return Color.Black;  			}  			switch (i) {  			case 0:  				h = GetHueValue (function.Expression.Terms [i]);  				break;  			case 1:  				s = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 2:  				v = GetRGBValue (function.Expression.Terms [i]);  				break;  			}  		}  		HSV hsv = new HSV (h' s' v);  		return hsv.Color;  	}  }  else {  	try {  		KnownColor kc = (KnownColor)Enum.Parse (typeof(KnownColor)' val' true);  		Color c = Color.FromKnownColor (kc);  		return c;  	}  	catch {  	}  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: if (type == TermType.Function) {  	if ((function.Name.ToLower ().Equals ("rgb") && function.Expression.Terms.Count == 3) || (function.Name.ToLower ().Equals ("rgba") && function.Expression.Terms.Count == 4)) {  		int fr = 0' fg = 0' fb = 0;  		for (int i = 0; i < function.Expression.Terms.Count; i++) {  			if (function.Expression.Terms [i].Type != TermType.Number) {  				return Color.Black;  			}  			switch (i) {  			case 0:  				fr = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 1:  				fg = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 2:  				fb = GetRGBValue (function.Expression.Terms [i]);  				break;  			}  		}  		return Color.FromArgb (fr' fg' fb);  	}  	else if ((function.Name.ToLower ().Equals ("hsl") && function.Expression.Terms.Count == 3) || (function.Name.Equals ("hsla") && function.Expression.Terms.Count == 4)) {  		int h = 0' s = 0' v = 0;  		for (int i = 0; i < function.Expression.Terms.Count; i++) {  			if (function.Expression.Terms [i].Type != TermType.Number) {  				return Color.Black;  			}  			switch (i) {  			case 0:  				h = GetHueValue (function.Expression.Terms [i]);  				break;  			case 1:  				s = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 2:  				v = GetRGBValue (function.Expression.Terms [i]);  				break;  			}  		}  		HSV hsv = new HSV (h' s' v);  		return hsv.Color;  	}  }  else {  	try {  		KnownColor kc = (KnownColor)Enum.Parse (typeof(KnownColor)' val' true);  		Color c = Color.FromKnownColor (kc);  		return c;  	}  	catch {  	}  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: if (type == TermType.Function) {  	if ((function.Name.ToLower ().Equals ("rgb") && function.Expression.Terms.Count == 3) || (function.Name.ToLower ().Equals ("rgba") && function.Expression.Terms.Count == 4)) {  		int fr = 0' fg = 0' fb = 0;  		for (int i = 0; i < function.Expression.Terms.Count; i++) {  			if (function.Expression.Terms [i].Type != TermType.Number) {  				return Color.Black;  			}  			switch (i) {  			case 0:  				fr = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 1:  				fg = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 2:  				fb = GetRGBValue (function.Expression.Terms [i]);  				break;  			}  		}  		return Color.FromArgb (fr' fg' fb);  	}  	else if ((function.Name.ToLower ().Equals ("hsl") && function.Expression.Terms.Count == 3) || (function.Name.Equals ("hsla") && function.Expression.Terms.Count == 4)) {  		int h = 0' s = 0' v = 0;  		for (int i = 0; i < function.Expression.Terms.Count; i++) {  			if (function.Expression.Terms [i].Type != TermType.Number) {  				return Color.Black;  			}  			switch (i) {  			case 0:  				h = GetHueValue (function.Expression.Terms [i]);  				break;  			case 1:  				s = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 2:  				v = GetRGBValue (function.Expression.Terms [i]);  				break;  			}  		}  		HSV hsv = new HSV (h' s' v);  		return hsv.Color;  	}  }  else {  	try {  		KnownColor kc = (KnownColor)Enum.Parse (typeof(KnownColor)' val' true);  		Color c = Color.FromKnownColor (kc);  		return c;  	}  	catch {  	}  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: if (type == TermType.Function) {  	if ((function.Name.ToLower ().Equals ("rgb") && function.Expression.Terms.Count == 3) || (function.Name.ToLower ().Equals ("rgba") && function.Expression.Terms.Count == 4)) {  		int fr = 0' fg = 0' fb = 0;  		for (int i = 0; i < function.Expression.Terms.Count; i++) {  			if (function.Expression.Terms [i].Type != TermType.Number) {  				return Color.Black;  			}  			switch (i) {  			case 0:  				fr = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 1:  				fg = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 2:  				fb = GetRGBValue (function.Expression.Terms [i]);  				break;  			}  		}  		return Color.FromArgb (fr' fg' fb);  	}  	else if ((function.Name.ToLower ().Equals ("hsl") && function.Expression.Terms.Count == 3) || (function.Name.Equals ("hsla") && function.Expression.Terms.Count == 4)) {  		int h = 0' s = 0' v = 0;  		for (int i = 0; i < function.Expression.Terms.Count; i++) {  			if (function.Expression.Terms [i].Type != TermType.Number) {  				return Color.Black;  			}  			switch (i) {  			case 0:  				h = GetHueValue (function.Expression.Terms [i]);  				break;  			case 1:  				s = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 2:  				v = GetRGBValue (function.Expression.Terms [i]);  				break;  			}  		}  		HSV hsv = new HSV (h' s' v);  		return hsv.Color;  	}  }  else {  	try {  		KnownColor kc = (KnownColor)Enum.Parse (typeof(KnownColor)' val' true);  		Color c = Color.FromKnownColor (kc);  		return c;  	}  	catch {  	}  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: if (type == TermType.Function) {  	if ((function.Name.ToLower ().Equals ("rgb") && function.Expression.Terms.Count == 3) || (function.Name.ToLower ().Equals ("rgba") && function.Expression.Terms.Count == 4)) {  		int fr = 0' fg = 0' fb = 0;  		for (int i = 0; i < function.Expression.Terms.Count; i++) {  			if (function.Expression.Terms [i].Type != TermType.Number) {  				return Color.Black;  			}  			switch (i) {  			case 0:  				fr = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 1:  				fg = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 2:  				fb = GetRGBValue (function.Expression.Terms [i]);  				break;  			}  		}  		return Color.FromArgb (fr' fg' fb);  	}  	else if ((function.Name.ToLower ().Equals ("hsl") && function.Expression.Terms.Count == 3) || (function.Name.Equals ("hsla") && function.Expression.Terms.Count == 4)) {  		int h = 0' s = 0' v = 0;  		for (int i = 0; i < function.Expression.Terms.Count; i++) {  			if (function.Expression.Terms [i].Type != TermType.Number) {  				return Color.Black;  			}  			switch (i) {  			case 0:  				h = GetHueValue (function.Expression.Terms [i]);  				break;  			case 1:  				s = GetRGBValue (function.Expression.Terms [i]);  				break;  			case 2:  				v = GetRGBValue (function.Expression.Terms [i]);  				break;  			}  		}  		HSV hsv = new HSV (h' s' v);  		return hsv.Color;  	}  }  else {  	try {  		KnownColor kc = (KnownColor)Enum.Parse (typeof(KnownColor)' val' true);  		Color c = Color.FromKnownColor (kc);  		return c;  	}  	catch {  	}  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: if ((function.Name.ToLower ().Equals ("rgb") && function.Expression.Terms.Count == 3) || (function.Name.ToLower ().Equals ("rgba") && function.Expression.Terms.Count == 4)) {  	int fr = 0' fg = 0' fb = 0;  	for (int i = 0; i < function.Expression.Terms.Count; i++) {  		if (function.Expression.Terms [i].Type != TermType.Number) {  			return Color.Black;  		}  		switch (i) {  		case 0:  			fr = GetRGBValue (function.Expression.Terms [i]);  			break;  		case 1:  			fg = GetRGBValue (function.Expression.Terms [i]);  			break;  		case 2:  			fb = GetRGBValue (function.Expression.Terms [i]);  			break;  		}  	}  	return Color.FromArgb (fr' fg' fb);  }  else if ((function.Name.ToLower ().Equals ("hsl") && function.Expression.Terms.Count == 3) || (function.Name.Equals ("hsla") && function.Expression.Terms.Count == 4)) {  	int h = 0' s = 0' v = 0;  	for (int i = 0; i < function.Expression.Terms.Count; i++) {  		if (function.Expression.Terms [i].Type != TermType.Number) {  			return Color.Black;  		}  		switch (i) {  		case 0:  			h = GetHueValue (function.Expression.Terms [i]);  			break;  		case 1:  			s = GetRGBValue (function.Expression.Terms [i]);  			break;  		case 2:  			v = GetRGBValue (function.Expression.Terms [i]);  			break;  		}  	}  	HSV hsv = new HSV (h' s' v);  	return hsv.Color;  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: if ((function.Name.ToLower ().Equals ("rgb") && function.Expression.Terms.Count == 3) || (function.Name.ToLower ().Equals ("rgba") && function.Expression.Terms.Count == 4)) {  	int fr = 0' fg = 0' fb = 0;  	for (int i = 0; i < function.Expression.Terms.Count; i++) {  		if (function.Expression.Terms [i].Type != TermType.Number) {  			return Color.Black;  		}  		switch (i) {  		case 0:  			fr = GetRGBValue (function.Expression.Terms [i]);  			break;  		case 1:  			fg = GetRGBValue (function.Expression.Terms [i]);  			break;  		case 2:  			fb = GetRGBValue (function.Expression.Terms [i]);  			break;  		}  	}  	return Color.FromArgb (fr' fg' fb);  }  else if ((function.Name.ToLower ().Equals ("hsl") && function.Expression.Terms.Count == 3) || (function.Name.Equals ("hsla") && function.Expression.Terms.Count == 4)) {  	int h = 0' s = 0' v = 0;  	for (int i = 0; i < function.Expression.Terms.Count; i++) {  		if (function.Expression.Terms [i].Type != TermType.Number) {  			return Color.Black;  		}  		switch (i) {  		case 0:  			h = GetHueValue (function.Expression.Terms [i]);  			break;  		case 1:  			s = GetRGBValue (function.Expression.Terms [i]);  			break;  		case 2:  			v = GetRGBValue (function.Expression.Terms [i]);  			break;  		}  	}  	HSV hsv = new HSV (h' s' v);  	return hsv.Color;  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: if ((function.Name.ToLower ().Equals ("rgb") && function.Expression.Terms.Count == 3) || (function.Name.ToLower ().Equals ("rgba") && function.Expression.Terms.Count == 4)) {  	int fr = 0' fg = 0' fb = 0;  	for (int i = 0; i < function.Expression.Terms.Count; i++) {  		if (function.Expression.Terms [i].Type != TermType.Number) {  			return Color.Black;  		}  		switch (i) {  		case 0:  			fr = GetRGBValue (function.Expression.Terms [i]);  			break;  		case 1:  			fg = GetRGBValue (function.Expression.Terms [i]);  			break;  		case 2:  			fb = GetRGBValue (function.Expression.Terms [i]);  			break;  		}  	}  	return Color.FromArgb (fr' fg' fb);  }  else if ((function.Name.ToLower ().Equals ("hsl") && function.Expression.Terms.Count == 3) || (function.Name.Equals ("hsla") && function.Expression.Terms.Count == 4)) {  	int h = 0' s = 0' v = 0;  	for (int i = 0; i < function.Expression.Terms.Count; i++) {  		if (function.Expression.Terms [i].Type != TermType.Number) {  			return Color.Black;  		}  		switch (i) {  		case 0:  			h = GetHueValue (function.Expression.Terms [i]);  			break;  		case 1:  			s = GetRGBValue (function.Expression.Terms [i]);  			break;  		case 2:  			v = GetRGBValue (function.Expression.Terms [i]);  			break;  		}  	}  	HSV hsv = new HSV (h' s' v);  	return hsv.Color;  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: if ((function.Name.ToLower ().Equals ("rgb") && function.Expression.Terms.Count == 3) || (function.Name.ToLower ().Equals ("rgba") && function.Expression.Terms.Count == 4)) {  	int fr = 0' fg = 0' fb = 0;  	for (int i = 0; i < function.Expression.Terms.Count; i++) {  		if (function.Expression.Terms [i].Type != TermType.Number) {  			return Color.Black;  		}  		switch (i) {  		case 0:  			fr = GetRGBValue (function.Expression.Terms [i]);  			break;  		case 1:  			fg = GetRGBValue (function.Expression.Terms [i]);  			break;  		case 2:  			fb = GetRGBValue (function.Expression.Terms [i]);  			break;  		}  	}  	return Color.FromArgb (fr' fg' fb);  }  else if ((function.Name.ToLower ().Equals ("hsl") && function.Expression.Terms.Count == 3) || (function.Name.Equals ("hsla") && function.Expression.Terms.Count == 4)) {  	int h = 0' s = 0' v = 0;  	for (int i = 0; i < function.Expression.Terms.Count; i++) {  		if (function.Expression.Terms [i].Type != TermType.Number) {  			return Color.Black;  		}  		switch (i) {  		case 0:  			h = GetHueValue (function.Expression.Terms [i]);  			break;  		case 1:  			s = GetRGBValue (function.Expression.Terms [i]);  			break;  		case 2:  			v = GetRGBValue (function.Expression.Terms [i]);  			break;  		}  	}  	HSV hsv = new HSV (h' s' v);  	return hsv.Color;  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: if ((function.Name.ToLower ().Equals ("rgb") && function.Expression.Terms.Count == 3) || (function.Name.ToLower ().Equals ("rgba") && function.Expression.Terms.Count == 4)) {  	int fr = 0' fg = 0' fb = 0;  	for (int i = 0; i < function.Expression.Terms.Count; i++) {  		if (function.Expression.Terms [i].Type != TermType.Number) {  			return Color.Black;  		}  		switch (i) {  		case 0:  			fr = GetRGBValue (function.Expression.Terms [i]);  			break;  		case 1:  			fg = GetRGBValue (function.Expression.Terms [i]);  			break;  		case 2:  			fb = GetRGBValue (function.Expression.Terms [i]);  			break;  		}  	}  	return Color.FromArgb (fr' fg' fb);  }  else if ((function.Name.ToLower ().Equals ("hsl") && function.Expression.Terms.Count == 3) || (function.Name.Equals ("hsla") && function.Expression.Terms.Count == 4)) {  	int h = 0' s = 0' v = 0;  	for (int i = 0; i < function.Expression.Terms.Count; i++) {  		if (function.Expression.Terms [i].Type != TermType.Number) {  			return Color.Black;  		}  		switch (i) {  		case 0:  			h = GetHueValue (function.Expression.Terms [i]);  			break;  		case 1:  			s = GetRGBValue (function.Expression.Terms [i]);  			break;  		case 2:  			v = GetRGBValue (function.Expression.Terms [i]);  			break;  		}  	}  	HSV hsv = new HSV (h' s' v);  	return hsv.Color;  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: if ((function.Name.ToLower ().Equals ("rgb") && function.Expression.Terms.Count == 3) || (function.Name.ToLower ().Equals ("rgba") && function.Expression.Terms.Count == 4)) {  	int fr = 0' fg = 0' fb = 0;  	for (int i = 0; i < function.Expression.Terms.Count; i++) {  		if (function.Expression.Terms [i].Type != TermType.Number) {  			return Color.Black;  		}  		switch (i) {  		case 0:  			fr = GetRGBValue (function.Expression.Terms [i]);  			break;  		case 1:  			fg = GetRGBValue (function.Expression.Terms [i]);  			break;  		case 2:  			fb = GetRGBValue (function.Expression.Terms [i]);  			break;  		}  	}  	return Color.FromArgb (fr' fg' fb);  }  else if ((function.Name.ToLower ().Equals ("hsl") && function.Expression.Terms.Count == 3) || (function.Name.Equals ("hsla") && function.Expression.Terms.Count == 4)) {  	int h = 0' s = 0' v = 0;  	for (int i = 0; i < function.Expression.Terms.Count; i++) {  		if (function.Expression.Terms [i].Type != TermType.Number) {  			return Color.Black;  		}  		switch (i) {  		case 0:  			h = GetHueValue (function.Expression.Terms [i]);  			break;  		case 1:  			s = GetRGBValue (function.Expression.Terms [i]);  			break;  		case 2:  			v = GetRGBValue (function.Expression.Terms [i]);  			break;  		}  	}  	HSV hsv = new HSV (h' s' v);  	return hsv.Color;  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: for (int i = 0; i < function.Expression.Terms.Count; i++) {  	if (function.Expression.Terms [i].Type != TermType.Number) {  		return Color.Black;  	}  	switch (i) {  	case 0:  		fr = GetRGBValue (function.Expression.Terms [i]);  		break;  	case 1:  		fg = GetRGBValue (function.Expression.Terms [i]);  		break;  	case 2:  		fb = GetRGBValue (function.Expression.Terms [i]);  		break;  	}  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: switch (i) {  case 0:  	fr = GetRGBValue (function.Expression.Terms [i]);  	break;  case 1:  	fg = GetRGBValue (function.Expression.Terms [i]);  	break;  case 2:  	fb = GetRGBValue (function.Expression.Terms [i]);  	break;  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: if ((function.Name.ToLower ().Equals ("hsl") && function.Expression.Terms.Count == 3) || (function.Name.Equals ("hsla") && function.Expression.Terms.Count == 4)) {  	int h = 0' s = 0' v = 0;  	for (int i = 0; i < function.Expression.Terms.Count; i++) {  		if (function.Expression.Terms [i].Type != TermType.Number) {  			return Color.Black;  		}  		switch (i) {  		case 0:  			h = GetHueValue (function.Expression.Terms [i]);  			break;  		case 1:  			s = GetRGBValue (function.Expression.Terms [i]);  			break;  		case 2:  			v = GetRGBValue (function.Expression.Terms [i]);  			break;  		}  	}  	HSV hsv = new HSV (h' s' v);  	return hsv.Color;  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: if ((function.Name.ToLower ().Equals ("hsl") && function.Expression.Terms.Count == 3) || (function.Name.Equals ("hsla") && function.Expression.Terms.Count == 4)) {  	int h = 0' s = 0' v = 0;  	for (int i = 0; i < function.Expression.Terms.Count; i++) {  		if (function.Expression.Terms [i].Type != TermType.Number) {  			return Color.Black;  		}  		switch (i) {  		case 0:  			h = GetHueValue (function.Expression.Terms [i]);  			break;  		case 1:  			s = GetRGBValue (function.Expression.Terms [i]);  			break;  		case 2:  			v = GetRGBValue (function.Expression.Terms [i]);  			break;  		}  	}  	HSV hsv = new HSV (h' s' v);  	return hsv.Color;  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: if ((function.Name.ToLower ().Equals ("hsl") && function.Expression.Terms.Count == 3) || (function.Name.Equals ("hsla") && function.Expression.Terms.Count == 4)) {  	int h = 0' s = 0' v = 0;  	for (int i = 0; i < function.Expression.Terms.Count; i++) {  		if (function.Expression.Terms [i].Type != TermType.Number) {  			return Color.Black;  		}  		switch (i) {  		case 0:  			h = GetHueValue (function.Expression.Terms [i]);  			break;  		case 1:  			s = GetRGBValue (function.Expression.Terms [i]);  			break;  		case 2:  			v = GetRGBValue (function.Expression.Terms [i]);  			break;  		}  	}  	HSV hsv = new HSV (h' s' v);  	return hsv.Color;  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: for (int i = 0; i < function.Expression.Terms.Count; i++) {  	if (function.Expression.Terms [i].Type != TermType.Number) {  		return Color.Black;  	}  	switch (i) {  	case 0:  		h = GetHueValue (function.Expression.Terms [i]);  		break;  	case 1:  		s = GetRGBValue (function.Expression.Terms [i]);  		break;  	case 2:  		v = GetRGBValue (function.Expression.Terms [i]);  		break;  	}  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: switch (i) {  case 0:  	h = GetHueValue (function.Expression.Terms [i]);  	break;  case 1:  	s = GetRGBValue (function.Expression.Terms [i]);  	break;  case 2:  	v = GetRGBValue (function.Expression.Terms [i]);  	break;  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following statement contains a magic number: if (hex.Length == 3) {  	string temp = "";  	foreach (char c in hex) {  		temp += c.ToString () + c.ToString ();  	}  	hex = temp;  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,DeHex,The following statement contains a magic number: for (int i = 0; i < input.Length; i++) {  	string chunk = input.Substring (i' 1).ToUpper ();  	switch (chunk) {  	case "A":  		val = 10;  		break;  	case "B":  		val = 11;  		break;  	case "C":  		val = 12;  		break;  	case "D":  		val = 13;  		break;  	case "E":  		val = 14;  		break;  	case "F":  		val = 15;  		break;  	default:  		val = int.Parse (chunk);  		break;  	}  	if (i == 0) {  		result += val * 16;  	}  	else {  		result += val;  	}  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,DeHex,The following statement contains a magic number: for (int i = 0; i < input.Length; i++) {  	string chunk = input.Substring (i' 1).ToUpper ();  	switch (chunk) {  	case "A":  		val = 10;  		break;  	case "B":  		val = 11;  		break;  	case "C":  		val = 12;  		break;  	case "D":  		val = 13;  		break;  	case "E":  		val = 14;  		break;  	case "F":  		val = 15;  		break;  	default:  		val = int.Parse (chunk);  		break;  	}  	if (i == 0) {  		result += val * 16;  	}  	else {  		result += val;  	}  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,DeHex,The following statement contains a magic number: for (int i = 0; i < input.Length; i++) {  	string chunk = input.Substring (i' 1).ToUpper ();  	switch (chunk) {  	case "A":  		val = 10;  		break;  	case "B":  		val = 11;  		break;  	case "C":  		val = 12;  		break;  	case "D":  		val = 13;  		break;  	case "E":  		val = 14;  		break;  	case "F":  		val = 15;  		break;  	default:  		val = int.Parse (chunk);  		break;  	}  	if (i == 0) {  		result += val * 16;  	}  	else {  		result += val;  	}  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,DeHex,The following statement contains a magic number: for (int i = 0; i < input.Length; i++) {  	string chunk = input.Substring (i' 1).ToUpper ();  	switch (chunk) {  	case "A":  		val = 10;  		break;  	case "B":  		val = 11;  		break;  	case "C":  		val = 12;  		break;  	case "D":  		val = 13;  		break;  	case "E":  		val = 14;  		break;  	case "F":  		val = 15;  		break;  	default:  		val = int.Parse (chunk);  		break;  	}  	if (i == 0) {  		result += val * 16;  	}  	else {  		result += val;  	}  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,DeHex,The following statement contains a magic number: for (int i = 0; i < input.Length; i++) {  	string chunk = input.Substring (i' 1).ToUpper ();  	switch (chunk) {  	case "A":  		val = 10;  		break;  	case "B":  		val = 11;  		break;  	case "C":  		val = 12;  		break;  	case "D":  		val = 13;  		break;  	case "E":  		val = 14;  		break;  	case "F":  		val = 15;  		break;  	default:  		val = int.Parse (chunk);  		break;  	}  	if (i == 0) {  		result += val * 16;  	}  	else {  		result += val;  	}  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,DeHex,The following statement contains a magic number: for (int i = 0; i < input.Length; i++) {  	string chunk = input.Substring (i' 1).ToUpper ();  	switch (chunk) {  	case "A":  		val = 10;  		break;  	case "B":  		val = 11;  		break;  	case "C":  		val = 12;  		break;  	case "D":  		val = 13;  		break;  	case "E":  		val = 14;  		break;  	case "F":  		val = 15;  		break;  	default:  		val = int.Parse (chunk);  		break;  	}  	if (i == 0) {  		result += val * 16;  	}  	else {  		result += val;  	}  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,DeHex,The following statement contains a magic number: for (int i = 0; i < input.Length; i++) {  	string chunk = input.Substring (i' 1).ToUpper ();  	switch (chunk) {  	case "A":  		val = 10;  		break;  	case "B":  		val = 11;  		break;  	case "C":  		val = 12;  		break;  	case "D":  		val = 13;  		break;  	case "E":  		val = 14;  		break;  	case "F":  		val = 15;  		break;  	default:  		val = int.Parse (chunk);  		break;  	}  	if (i == 0) {  		result += val * 16;  	}  	else {  		result += val;  	}  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,DeHex,The following statement contains a magic number: switch (chunk) {  case "A":  	val = 10;  	break;  case "B":  	val = 11;  	break;  case "C":  	val = 12;  	break;  case "D":  	val = 13;  	break;  case "E":  	val = 14;  	break;  case "F":  	val = 15;  	break;  default:  	val = int.Parse (chunk);  	break;  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,DeHex,The following statement contains a magic number: switch (chunk) {  case "A":  	val = 10;  	break;  case "B":  	val = 11;  	break;  case "C":  	val = 12;  	break;  case "D":  	val = 13;  	break;  case "E":  	val = 14;  	break;  case "F":  	val = 15;  	break;  default:  	val = int.Parse (chunk);  	break;  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,DeHex,The following statement contains a magic number: switch (chunk) {  case "A":  	val = 10;  	break;  case "B":  	val = 11;  	break;  case "C":  	val = 12;  	break;  case "D":  	val = 13;  	break;  case "E":  	val = 14;  	break;  case "F":  	val = 15;  	break;  default:  	val = int.Parse (chunk);  	break;  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,DeHex,The following statement contains a magic number: switch (chunk) {  case "A":  	val = 10;  	break;  case "B":  	val = 11;  	break;  case "C":  	val = 12;  	break;  case "D":  	val = 13;  	break;  case "E":  	val = 14;  	break;  case "F":  	val = 15;  	break;  default:  	val = int.Parse (chunk);  	break;  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,DeHex,The following statement contains a magic number: switch (chunk) {  case "A":  	val = 10;  	break;  case "B":  	val = 11;  	break;  case "C":  	val = 12;  	break;  case "D":  	val = 13;  	break;  case "E":  	val = 14;  	break;  case "F":  	val = 15;  	break;  default:  	val = int.Parse (chunk);  	break;  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,DeHex,The following statement contains a magic number: switch (chunk) {  case "A":  	val = 10;  	break;  case "B":  	val = 11;  	break;  case "C":  	val = 12;  	break;  case "D":  	val = 13;  	break;  case "E":  	val = 14;  	break;  case "F":  	val = 15;  	break;  default:  	val = int.Parse (chunk);  	break;  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,DeHex,The following statement contains a magic number: val = 10;  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,DeHex,The following statement contains a magic number: val = 11;  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,DeHex,The following statement contains a magic number: val = 12;  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,DeHex,The following statement contains a magic number: val = 13;  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,DeHex,The following statement contains a magic number: val = 14;  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,DeHex,The following statement contains a magic number: val = 15;  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,DeHex,The following statement contains a magic number: if (i == 0) {  	result += val * 16;  }  else {  	result += val;  }  
Magic Number,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,DeHex,The following statement contains a magic number: result += val * 16;  
Magic Number,DotNet.Tools.WIN32,FileApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\FileApi.cs,_loadInfo,The following statement contains a magic number: if (Is64Bits ()) {  	ipTemp = new IntPtr (Convert.ToInt64 (objObjectType.Name.Buffer.ToString ()' 10) >> 32);  }  else {  	ipTemp = objObjectType.Name.Buffer;  }  
Magic Number,DotNet.Tools.WIN32,FileApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\FileApi.cs,_loadInfo,The following statement contains a magic number: if (Is64Bits ()) {  	ipTemp = new IntPtr (Convert.ToInt64 (objObjectType.Name.Buffer.ToString ()' 10) >> 32);  }  else {  	ipTemp = objObjectType.Name.Buffer;  }  
Magic Number,DotNet.Tools.WIN32,FileApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\FileApi.cs,_loadInfo,The following statement contains a magic number: ipTemp = new IntPtr (Convert.ToInt64 (objObjectType.Name.Buffer.ToString ()' 10) >> 32);  
Magic Number,DotNet.Tools.WIN32,FileApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\FileApi.cs,_loadInfo,The following statement contains a magic number: ipTemp = new IntPtr (Convert.ToInt64 (objObjectType.Name.Buffer.ToString ()' 10) >> 32);  
Magic Number,DotNet.Tools.WIN32,FileApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\FileApi.cs,_loadInfo,The following statement contains a magic number: if (Is64Bits ()) {  	ipTemp = new IntPtr (Convert.ToInt64 (objObjectName.Name.Buffer.ToString ()' 10) >> 32);  }  else {  	ipTemp = objObjectName.Name.Buffer;  }  
Magic Number,DotNet.Tools.WIN32,FileApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\FileApi.cs,_loadInfo,The following statement contains a magic number: if (Is64Bits ()) {  	ipTemp = new IntPtr (Convert.ToInt64 (objObjectName.Name.Buffer.ToString ()' 10) >> 32);  }  else {  	ipTemp = objObjectName.Name.Buffer;  }  
Magic Number,DotNet.Tools.WIN32,FileApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\FileApi.cs,_loadInfo,The following statement contains a magic number: ipTemp = new IntPtr (Convert.ToInt64 (objObjectName.Name.Buffer.ToString ()' 10) >> 32);  
Magic Number,DotNet.Tools.WIN32,FileApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\FileApi.cs,_loadInfo,The following statement contains a magic number: ipTemp = new IntPtr (Convert.ToInt64 (objObjectName.Name.Buffer.ToString ()' 10) >> 32);  
Magic Number,DotNet.Tools.WIN32,FileApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\FileApi.cs,GetRegularFileNameFromDevice,The following statement contains a magic number: foreach (string strDrivePath in Environment.GetLogicalDrives ()) {  	StringBuilder sbTargetPath = new StringBuilder (Win32API.MAX_PATH);  	if (Win32API.QueryDosDevice (strDrivePath.Substring (0' 2)' sbTargetPath' Win32API.MAX_PATH) == 0) {  		return strRawName;  	}  	string strTargetPath = sbTargetPath.ToString ();  	if (strFileName.StartsWith (strTargetPath)) {  		strFileName = strFileName.Replace (strTargetPath' strDrivePath.Substring (0' 2));  		break;  	}  }  
Magic Number,DotNet.Tools.WIN32,FileApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\FileApi.cs,GetRegularFileNameFromDevice,The following statement contains a magic number: foreach (string strDrivePath in Environment.GetLogicalDrives ()) {  	StringBuilder sbTargetPath = new StringBuilder (Win32API.MAX_PATH);  	if (Win32API.QueryDosDevice (strDrivePath.Substring (0' 2)' sbTargetPath' Win32API.MAX_PATH) == 0) {  		return strRawName;  	}  	string strTargetPath = sbTargetPath.ToString ();  	if (strFileName.StartsWith (strTargetPath)) {  		strFileName = strFileName.Replace (strTargetPath' strDrivePath.Substring (0' 2));  		break;  	}  }  
Magic Number,DotNet.Tools.WIN32,FileApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\FileApi.cs,GetRegularFileNameFromDevice,The following statement contains a magic number: if (Win32API.QueryDosDevice (strDrivePath.Substring (0' 2)' sbTargetPath' Win32API.MAX_PATH) == 0) {  	return strRawName;  }  
Magic Number,DotNet.Tools.WIN32,FileApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\FileApi.cs,GetRegularFileNameFromDevice,The following statement contains a magic number: if (strFileName.StartsWith (strTargetPath)) {  	strFileName = strFileName.Replace (strTargetPath' strDrivePath.Substring (0' 2));  	break;  }  
Magic Number,DotNet.Tools.WIN32,FileApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\FileApi.cs,GetRegularFileNameFromDevice,The following statement contains a magic number: strFileName = strFileName.Replace (strTargetPath' strDrivePath.Substring (0' 2));  
Magic Number,DotNet.Tools.WIN32,FileApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\FileApi.cs,Is64Bits,The following statement contains a magic number: return Marshal.SizeOf (typeof(IntPtr)) == 8 ? true : false;  
Magic Number,DotNet.Tools.WIN32,ProcessApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\ProcessApi.cs,GetHandles,The following statement contains a magic number: if (Is64Bits ()) {  	lHandleCount = Marshal.ReadInt64 (ipHandlePointer);  	ipHandle = new IntPtr (ipHandlePointer.ToInt64 () + 8);  }  else {  	lHandleCount = Marshal.ReadInt32 (ipHandlePointer);  	ipHandle = new IntPtr (ipHandlePointer.ToInt32 () + 4);  }  
Magic Number,DotNet.Tools.WIN32,ProcessApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\ProcessApi.cs,GetHandles,The following statement contains a magic number: if (Is64Bits ()) {  	lHandleCount = Marshal.ReadInt64 (ipHandlePointer);  	ipHandle = new IntPtr (ipHandlePointer.ToInt64 () + 8);  }  else {  	lHandleCount = Marshal.ReadInt32 (ipHandlePointer);  	ipHandle = new IntPtr (ipHandlePointer.ToInt32 () + 4);  }  
Magic Number,DotNet.Tools.WIN32,ProcessApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\ProcessApi.cs,GetHandles,The following statement contains a magic number: ipHandle = new IntPtr (ipHandlePointer.ToInt64 () + 8);  
Magic Number,DotNet.Tools.WIN32,ProcessApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\ProcessApi.cs,GetHandles,The following statement contains a magic number: ipHandle = new IntPtr (ipHandlePointer.ToInt32 () + 4);  
Magic Number,DotNet.Tools.WIN32,ProcessApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\ProcessApi.cs,GetHandles,The following statement contains a magic number: for (long lIndex = 0; lIndex < lHandleCount; lIndex++) {  	shHandle = new Win32API.SYSTEM_HANDLE_INFORMATION ();  	if (Is64Bits ()) {  		shHandle = (Win32API.SYSTEM_HANDLE_INFORMATION)Marshal.PtrToStructure (ipHandle' shHandle.GetType ());  		ipHandle = new IntPtr (ipHandle.ToInt64 () + Marshal.SizeOf (shHandle) + 8);  	}  	else {  		ipHandle = new IntPtr (ipHandle.ToInt64 () + Marshal.SizeOf (shHandle));  		shHandle = (Win32API.SYSTEM_HANDLE_INFORMATION)Marshal.PtrToStructure (ipHandle' shHandle.GetType ());  	}  	if (shHandle.ProcessID != process.Id)  		continue;  	lstHandles.Add (shHandle);  }  
Magic Number,DotNet.Tools.WIN32,ProcessApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\ProcessApi.cs,GetHandles,The following statement contains a magic number: if (Is64Bits ()) {  	shHandle = (Win32API.SYSTEM_HANDLE_INFORMATION)Marshal.PtrToStructure (ipHandle' shHandle.GetType ());  	ipHandle = new IntPtr (ipHandle.ToInt64 () + Marshal.SizeOf (shHandle) + 8);  }  else {  	ipHandle = new IntPtr (ipHandle.ToInt64 () + Marshal.SizeOf (shHandle));  	shHandle = (Win32API.SYSTEM_HANDLE_INFORMATION)Marshal.PtrToStructure (ipHandle' shHandle.GetType ());  }  
Magic Number,DotNet.Tools.WIN32,ProcessApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\ProcessApi.cs,GetHandles,The following statement contains a magic number: ipHandle = new IntPtr (ipHandle.ToInt64 () + Marshal.SizeOf (shHandle) + 8);  
Magic Number,DotNet.Tools.WIN32,ProcessApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\ProcessApi.cs,Is64Bits,The following statement contains a magic number: return Marshal.SizeOf (typeof(IntPtr)) == 8 ? true : false;  
Magic Number,DotNet.Tools.WIN32,ProcessApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\ProcessApi.cs,FindHandles,The following statement contains a magic number: foreach (System.Diagnostics.Process proc in processes) {  	ManualResetEvent event_reset = new ManualResetEvent (false);  	doneEvents.Add (event_reset);  	ProcessFileHandleFinder prc_handler = new ProcessFileHandleFinder (proc' event_reset' filesearchstring);  	processfinders.Add (prc_handler);  	ThreadPool.QueueUserWorkItem (prc_handler.FindFileHandlesThreadPoolCallback' i);  	i++;  	if (i > 61) {  		WaitHandle.WaitAll (doneEvents.ToArray ());  		foreach (ProcessFileHandleFinder prc in processfinders) {  			lstHandles.AddRange (prc.Handles.ToArray ());  		}  		processfinders.Clear ();  		processfinders = new List<ProcessFileHandleFinder> ();  		i = 0;  		doneEvents.Clear ();  		doneEvents = new List<ManualResetEvent> ();  	}  }  
Magic Number,DotNet.Tools.WIN32,ProcessApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\ProcessApi.cs,FindHandles,The following statement contains a magic number: if (i > 61) {  	WaitHandle.WaitAll (doneEvents.ToArray ());  	foreach (ProcessFileHandleFinder prc in processfinders) {  		lstHandles.AddRange (prc.Handles.ToArray ());  	}  	processfinders.Clear ();  	processfinders = new List<ProcessFileHandleFinder> ();  	i = 0;  	doneEvents.Clear ();  	doneEvents = new List<ManualResetEvent> ();  }  
Magic Number,DotNet.Tools.WIN32,ProcessApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\ProcessApi.cs,FindHandles,The following statement contains a magic number: WaitHandle.WaitAll (doneEvents.ToArray ()' 60000);  
Magic Number,DotNet.Tools.WIN32,ProcessApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\ProcessApi.cs,FindFileHandles,The following statement contains a magic number: foreach (System.Diagnostics.Process proc in processes) {  	ManualResetEvent event_reset = new ManualResetEvent (false);  	doneEvents.Add (event_reset);  	ProcessFileHandleFinder prc_handler = new ProcessFileHandleFinder (proc' event_reset' filesearchstring);  	processfinders.Add (prc_handler);  	ThreadPool.QueueUserWorkItem (prc_handler.FindFilesThreadPoolCallback' i);  	i++;  	if (i > 61) {  		WaitHandle.WaitAll (doneEvents.ToArray ());  		foreach (ProcessFileHandleFinder prc in processfinders) {  			lstHandles.AddRange (prc.Files.ToArray ());  		}  		processfinders.Clear ();  		processfinders = new List<ProcessFileHandleFinder> ();  		i = 0;  		doneEvents.Clear ();  		doneEvents = new List<ManualResetEvent> ();  	}  }  
Magic Number,DotNet.Tools.WIN32,ProcessApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\ProcessApi.cs,FindFileHandles,The following statement contains a magic number: if (i > 61) {  	WaitHandle.WaitAll (doneEvents.ToArray ());  	foreach (ProcessFileHandleFinder prc in processfinders) {  		lstHandles.AddRange (prc.Files.ToArray ());  	}  	processfinders.Clear ();  	processfinders = new List<ProcessFileHandleFinder> ();  	i = 0;  	doneEvents.Clear ();  	doneEvents = new List<ManualResetEvent> ();  }  
Magic Number,DotNet.Tools.WIN32,ProcessApi,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\ProcessApi.cs,FindFileHandles,The following statement contains a magic number: WaitHandle.WaitAll (doneEvents.ToArray ()' 60000);  
Magic Number,DotNet.Tools.WIN32,NativeMethodsHelper,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,FileTimeToDateTime,The following statement contains a magic number: if (sysTime.Year < 1900) {  	// Must have gotten a bogus date. This happens sometimes on Windows Server 2003.  	return null;  }  
Magic Number,DotNet.Tools.WIN32,NativeMethodsHelper,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,ExtractIPAddress,The following statement contains a magic number: switch (family) {  case System.Net.Sockets.AddressFamily.InterNetwork:  	var v4Addr = new byte[4];  	// TODO: I'm not sure what type of address structure this is that we need to start at offset 2.  	Array.Copy (rawAddress' 2' v4Addr' 0' 4);  	return new System.Net.IPAddress (v4Addr);  case System.Net.Sockets.AddressFamily.InterNetworkV6:  	var v6Addr = new byte[16];  	Array.Copy (rawAddress' 2' v6Addr' 0' 16);  	return new System.Net.IPAddress (v6Addr);  }  
Magic Number,DotNet.Tools.WIN32,NativeMethodsHelper,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,ExtractIPAddress,The following statement contains a magic number: switch (family) {  case System.Net.Sockets.AddressFamily.InterNetwork:  	var v4Addr = new byte[4];  	// TODO: I'm not sure what type of address structure this is that we need to start at offset 2.  	Array.Copy (rawAddress' 2' v4Addr' 0' 4);  	return new System.Net.IPAddress (v4Addr);  case System.Net.Sockets.AddressFamily.InterNetworkV6:  	var v6Addr = new byte[16];  	Array.Copy (rawAddress' 2' v6Addr' 0' 16);  	return new System.Net.IPAddress (v6Addr);  }  
Magic Number,DotNet.Tools.WIN32,NativeMethodsHelper,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,ExtractIPAddress,The following statement contains a magic number: switch (family) {  case System.Net.Sockets.AddressFamily.InterNetwork:  	var v4Addr = new byte[4];  	// TODO: I'm not sure what type of address structure this is that we need to start at offset 2.  	Array.Copy (rawAddress' 2' v4Addr' 0' 4);  	return new System.Net.IPAddress (v4Addr);  case System.Net.Sockets.AddressFamily.InterNetworkV6:  	var v6Addr = new byte[16];  	Array.Copy (rawAddress' 2' v6Addr' 0' 16);  	return new System.Net.IPAddress (v6Addr);  }  
Magic Number,DotNet.Tools.WIN32,NativeMethodsHelper,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,ExtractIPAddress,The following statement contains a magic number: switch (family) {  case System.Net.Sockets.AddressFamily.InterNetwork:  	var v4Addr = new byte[4];  	// TODO: I'm not sure what type of address structure this is that we need to start at offset 2.  	Array.Copy (rawAddress' 2' v4Addr' 0' 4);  	return new System.Net.IPAddress (v4Addr);  case System.Net.Sockets.AddressFamily.InterNetworkV6:  	var v6Addr = new byte[16];  	Array.Copy (rawAddress' 2' v6Addr' 0' 16);  	return new System.Net.IPAddress (v6Addr);  }  
Magic Number,DotNet.Tools.WIN32,NativeMethodsHelper,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,ExtractIPAddress,The following statement contains a magic number: switch (family) {  case System.Net.Sockets.AddressFamily.InterNetwork:  	var v4Addr = new byte[4];  	// TODO: I'm not sure what type of address structure this is that we need to start at offset 2.  	Array.Copy (rawAddress' 2' v4Addr' 0' 4);  	return new System.Net.IPAddress (v4Addr);  case System.Net.Sockets.AddressFamily.InterNetworkV6:  	var v6Addr = new byte[16];  	Array.Copy (rawAddress' 2' v6Addr' 0' 16);  	return new System.Net.IPAddress (v6Addr);  }  
Magic Number,DotNet.Tools.WIN32,NativeMethodsHelper,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,ExtractIPAddress,The following statement contains a magic number: switch (family) {  case System.Net.Sockets.AddressFamily.InterNetwork:  	var v4Addr = new byte[4];  	// TODO: I'm not sure what type of address structure this is that we need to start at offset 2.  	Array.Copy (rawAddress' 2' v4Addr' 0' 4);  	return new System.Net.IPAddress (v4Addr);  case System.Net.Sockets.AddressFamily.InterNetworkV6:  	var v6Addr = new byte[16];  	Array.Copy (rawAddress' 2' v6Addr' 0' 16);  	return new System.Net.IPAddress (v6Addr);  }  
Magic Number,DotNet.Tools.WIN32,NativeMethodsHelper,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,ExtractIPAddress,The following statement contains a magic number: Array.Copy (rawAddress' 2' v4Addr' 0' 4);  
Magic Number,DotNet.Tools.WIN32,NativeMethodsHelper,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,ExtractIPAddress,The following statement contains a magic number: Array.Copy (rawAddress' 2' v4Addr' 0' 4);  
Magic Number,DotNet.Tools.WIN32,NativeMethodsHelper,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,ExtractIPAddress,The following statement contains a magic number: Array.Copy (rawAddress' 2' v6Addr' 0' 16);  
Magic Number,DotNet.Tools.WIN32,NativeMethodsHelper,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,ExtractIPAddress,The following statement contains a magic number: Array.Copy (rawAddress' 2' v6Addr' 0' 16);  
Magic Number,DotNet.Tools.WIN32,Win32_ImpersonateLoginToken,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32_ImpersonateLoginToken.cs,_get_access,The following statement contains a magic number: if (Win32API.LogonUser (_user_name' _domain_name' _password' Win32API.LogonTypes.NewCredentials' Win32API.LogonProviders.Default' out _token)) {  	_ok = true;  	Win32API.DuplicateToken (_token' 2' ref _main_token);  	_win_identity = new System.Security.Principal.WindowsIdentity (_main_token);  	_win_identity_context = _win_identity.Impersonate ();  }  else {  	_ok = false;  	try {  		_error = System.Runtime.InteropServices.Marshal.GetLastWin32Error ().ToString ();  	}  	catch (Exception ex) {  	}  }  
Magic Number,DotNet.Tools.WIN32,Win32_ImpersonateLoginToken,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32_ImpersonateLoginToken.cs,_get_access,The following statement contains a magic number: Win32API.DuplicateToken (_token' 2' ref _main_token);  
Magic Number,DotNet.Tools.WIN32,Win32_MapNetworkDrive,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32_MapNetworkDrive.cs,zMapDrive,The following statement contains a magic number: stNetRes.iScope = 2;  
Magic Number,DotNet.Tools.WIN32,Win32_MapNetworkDrive,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32_MapNetworkDrive.cs,zMapDrive,The following statement contains a magic number: stNetRes.iDisplayType = 3;  
Magic Number,DotNet.Tools.WIN32,Win32_Process,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32_Process.cs,GetProcessesWithOpenedFile,The following statement contains a magic number: foreach (Win32_Process prc in procs) {  	//CIM_DataFile[] files = prc.GetOpenedCIM_DataFiles();  	//foreach (CIM_DataFile file in files)   	//{  	//    _search_file = file;  	//    CIM_DataFile d_finded = _find_files.Find(find_file);  	//    if (d_finded != null)   	//    {  	//        lstProc.Add(prc);  	//    }  	//}  	_find_file_handler dlg = new _find_file_handler (_find_file);  	System.Threading.ManualResetEvent rs = new System.Threading.ManualResetEvent (false);  	dlg.BeginInvoke (_find_files' rs' prc' ref lstProc' null' null);  	_resets.Add (rs);  	cnt++;  	if (cnt == 60) {  		System.Threading.ManualResetEvent[] m_resets = _resets.ToArray ();  		System.Threading.WaitHandle.WaitAll (m_resets);  		_resets = new List<System.Threading.ManualResetEvent> ();  		cnt = 0;  	}  }  
Magic Number,DotNet.Tools.WIN32,Win32_Process,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32_Process.cs,GetProcessesWithOpenedFile,The following statement contains a magic number: if (cnt == 60) {  	System.Threading.ManualResetEvent[] m_resets = _resets.ToArray ();  	System.Threading.WaitHandle.WaitAll (m_resets);  	_resets = new List<System.Threading.ManualResetEvent> ();  	cnt = 0;  }  
Magic Number,DotNet.Tools.WIN32,Win32_Process,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32_Process.cs,GetProcessesWithOpenedFile,The following statement contains a magic number: System.Threading.WaitHandle.WaitAll (resets' new TimeSpan (0' 5' 0));  
Magic Number,DotNet.Tools.WIN32,Win32_Process,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32_Process.cs,GetProcessesWithOpenedFile,The following statement contains a magic number: System.Threading.Thread.CurrentThread.Join (500);  
Magic Number,DotNet.Tools.WIN32,Win32_Process,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32_Process.cs,CreateProcess,The following statement contains a magic number: ProcessId = UInt32.Parse (parms [3]);  
Missing Default,breinstormin.tools.config,ListViewEx,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\ListViewEx.cs,WndProc,The following switch statement is missing a default case: switch (msg.Msg) {  // Look	for	WM_VSCROLL'WM_HSCROLL or WM_SIZE messages.  case WM_VSCROLL:  case WM_HSCROLL:  case WM_SIZE:  	EndEditing (false);  	break;  case WM_NOTIFY:  	// Look for WM_NOTIFY of events that might also change the  	// editor's position/size: Column reordering or resizing  	NMHDR h = (NMHDR)Marshal.PtrToStructure (msg.LParam' typeof(NMHDR));  	if (h.code == HDN_BEGINDRAG || h.code == HDN_ITEMCHANGINGA || h.code == HDN_ITEMCHANGINGW)  		EndEditing (false);  	break;  }  
Missing Default,breinstormin.tools.config,ListViewEx,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\config\UI\ListViewEx.cs,_editControl_KeyPress,The following switch statement is missing a default case: switch (e.KeyChar) {  case (char)(int)Keys.Escape: {  	EndEditing (false);  	break;  }  case (char)(int)Keys.Enter: {  	EndEditing (true);  	break;  }  }  
Missing Default,breinstormin.tools.googleMaps,JsonEnumTypeConverterExtensions,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\googleMaps\JsonEnumTypeConverter.cs,AsResponseStatus,The following switch statement is missing a default case: switch (s) {  case "OK":  	result = ServiceResponseStatus.Ok;  	break;  case "ZERO_RESULTS":  	result = ServiceResponseStatus.ZeroResults;  	break;  case "OVER_QUERY_LIMIT":  	result = ServiceResponseStatus.OverQueryLimit;  	break;  case "REQUEST_DENIED":  	result = ServiceResponseStatus.RequestDenied;  	break;  case "INVALID_REQUEST":  	result = ServiceResponseStatus.InvalidRequest;  	break;  }  
Missing Default,breinstormin.tools.googleMaps,JsonEnumTypeConverterExtensions,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\googleMaps\JsonEnumTypeConverter.cs,AsAddressType,The following switch statement is missing a default case: switch (s) {  case "street_address":  	result = AddressType.StreetAddress;  	break;  case "route":  	result = AddressType.Route;  	break;  case "intersection":  	result = AddressType.Intersection;  	break;  case "political":  	result = AddressType.Political;  	break;  case "country":  	result = AddressType.Country;  	break;  case "administrative_area_level_1":  	result = AddressType.AdministrativeAreaLevel1;  	break;  case "administrative_area_level_2":  	result = AddressType.AdministrativeAreaLevel2;  	break;  case "administrative_area_level_3":  	result = AddressType.AdministrativeAreaLevel3;  	break;  case "colloquial_area":  	result = AddressType.ColloquialArea;  	break;  case "locality":  	result = AddressType.Locality;  	break;  case "sublocality":  	result = AddressType.Sublocality;  	break;  case "neighborhood":  	result = AddressType.Neighborhood;  	break;  case "premise":  	result = AddressType.Premise;  	break;  case "subpremise":  	result = AddressType.Subpremise;  	break;  case "postal_code":  	result = AddressType.PostalCode;  	break;  case "natural_feature":  	result = AddressType.NaturalFeature;  	break;  case "airport":  	result = AddressType.Airport;  	break;  case "park":  	result = AddressType.Park;  	break;  case "point_of_interest":  	result = AddressType.PointOfInterest;  	break;  case "post_box":  	result = AddressType.PostBox;  	break;  case "street_number":  	result = AddressType.StreetNumber;  	break;  case "floor":  	result = AddressType.Floor;  	break;  case "room":  	result = AddressType.Room;  	break;  }  
Missing Default,breinstormin.tools.googleMaps,JsonEnumTypeConverterExtensions,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\googleMaps\JsonEnumTypeConverter.cs,AsLocationType,The following switch statement is missing a default case: switch (s) {  case "ROOFTOP":  	result = LocationType.Rooftop;  	break;  case "RANGE_INTERPOLATED":  	result = LocationType.RangeInterpolated;  	break;  case "GEOMETRIC_CENTER":  	result = LocationType.GeometricCenter;  	break;  case "APPROXIMATE":  	result = LocationType.Approximate;  	break;  }  
Missing Default,DotNet.Tools.TerminalServer,ClientDisplay,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\terminalServer\ClientDisplay.cs,GetBitsPerPixel,The following switch statement is missing a default case: switch (colorDepth) {  case 1:  	return 4;  case 2:  	return 8;  case 4:  	return 16;  case 8:  	return 24;  case 16:  	return 15;  }  
Missing Default,breinstormin.tools.web.css,HSV,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\HSV.cs,ToRGB,The following switch statement is missing a default case: switch (sectorNumber) {  case 0:  	r = v;  	g = t;  	b = p;  	break;  case 1:  	r = q;  	g = v;  	b = p;  	break;  case 2:  	r = p;  	g = v;  	b = t;  	break;  case 3:  	r = p;  	g = q;  	b = v;  	break;  case 4:  	r = t;  	g = p;  	b = v;  	break;  case 5:  	r = v;  	g = p;  	b = q;  	break;  }  
Missing Default,breinstormin.tools.web.css,HTMLRenderer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\HTMLRenderer.cs,Render,The following switch statement is missing a default case: switch (dir.Type) {  case Model.DirectiveType.Charset:  	return RenderCharSet (dir' start);  case Model.DirectiveType.Page:  	return RenderPage (dir' start);  case Model.DirectiveType.Media:  	return RenderMedia (dir' nesting);  case Model.DirectiveType.Import:  	return RenderImport (dir);  case Model.DirectiveType.FontFace:  	return RenderFontFace (dir' start);  }  
Missing Default,breinstormin.tools.web.css,HTMLRenderer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\HTMLRenderer.cs,Render,The following switch statement is missing a default case: switch (ss.Combinator.Value) {  case breinstormin.tools.web.css.Model.Combinator.PrecededImmediatelyBy:  	txt.Append (" <span class=\"combinator\">+</span> ");  	break;  case breinstormin.tools.web.css.Model.Combinator.ChildOf:  	txt.Append (" <span class=\"combinator\">&gt;</span> ");  	break;  case breinstormin.tools.web.css.Model.Combinator.PrecededBy:  	txt.Append (" <span class=\"combinator\">~</span> ");  	break;  }  
Missing Default,breinstormin.tools.web.css,HTMLRenderer,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\HTMLRenderer.cs,Render,The following switch statement is missing a default case: switch (atr.Operator.Value) {  case Model.AttributeOperator.Equals:  	txt.Append ("<span class=\"operator\">=</span>");  	break;  case Model.AttributeOperator.InList:  	txt.Append ("<span class=\"operator\">~=</span>");  	break;  case Model.AttributeOperator.Hyphenated:  	txt.Append ("<span class=\"operator\">|=</span>");  	break;  case Model.AttributeOperator.BeginsWith:  	txt.Append ("<span class=\"operator\">$=</span>");  	break;  case Model.AttributeOperator.EndsWith:  	txt.Append ("<span class=\"operator\">^=</span>");  	break;  case Model.AttributeOperator.Contains:  	txt.Append ("<span class=\"operator\">*=</span>");  	break;  }  
Missing Default,breinstormin.tools.web.css,Parser,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Parser.cs,attrib,The following switch statement is missing a default case: switch (la.kind) {  case 36: {  	Get ();  	atb.Operator = Model.AttributeOperator.Equals;  	break;  }  case 37: {  	Get ();  	atb.Operator = Model.AttributeOperator.InList;  	break;  }  case 38: {  	Get ();  	atb.Operator = Model.AttributeOperator.Hyphenated;  	break;  }  case 39: {  	Get ();  	atb.Operator = Model.AttributeOperator.EndsWith;  	break;  }  case 40: {  	Get ();  	atb.Operator = Model.AttributeOperator.BeginsWith;  	break;  }  case 41: {  	Get ();  	atb.Operator = Model.AttributeOperator.Contains;  	break;  }  }  
Missing Default,breinstormin.tools.web.css,Scanner,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Scanner.cs,NextToken,The following switch statement is missing a default case: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	t.kind = noSym;  	break;  }  // NextCh already done  case 1:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 2: {  	t.kind = 2;  	break;  }  case 3: {  	t.kind = 3;  	break;  }  case 4: {  	t.kind = 4;  	break;  }  case 5:  	if (ch == '!') {  		AddCh ();  		goto case 6;  	}  	else {  		t.kind = noSym;  		break;  	}  case 6:  	if (ch == '-') {  		AddCh ();  		goto case 7;  	}  	else {  		t.kind = noSym;  		break;  	}  case 7:  	if (ch == '-') {  		AddCh ();  		goto case 8;  	}  	else {  		t.kind = noSym;  		break;  	}  case 8: {  	t.kind = 5;  	break;  }  case 9:  	if (ch == '>') {  		AddCh ();  		goto case 10;  	}  	else {  		t.kind = noSym;  		break;  	}  case 10: {  	t.kind = 6;  	break;  }  case 11: {  	t.kind = 7;  	break;  }  case 12: {  	t.kind = 8;  	break;  }  case 13: {  	t.kind = 10;  	break;  }  case 14: {  	t.kind = 11;  	break;  }  case 15: {  	t.kind = 23;  	break;  }  case 16: {  	t.kind = 25;  	break;  }  case 17: {  	t.kind = 26;  	break;  }  case 18: {  	t.kind = 27;  	break;  }  case 19: {  	t.kind = 28;  	break;  }  case 20: {  	t.kind = 29;  	break;  }  case 21: {  	t.kind = 30;  	break;  }  case 22: {  	t.kind = 33;  	break;  }  case 23: {  	t.kind = 34;  	break;  }  case 24: {  	t.kind = 35;  	break;  }  case 25: {  	t.kind = 36;  	break;  }  case 26: {  	t.kind = 37;  	break;  }  case 27:  	if (ch == '=') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = noSym;  		break;  	}  case 28: {  	t.kind = 38;  	break;  }  case 29:  	if (ch == '=') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = noSym;  		break;  	}  case 30: {  	t.kind = 39;  	break;  }  case 31:  	if (ch == '=') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = noSym;  		break;  	}  case 32: {  	t.kind = 40;  	break;  }  case 33: {  	t.kind = 41;  	break;  }  case 34: {  	t.kind = 42;  	break;  }  case 35: {  	t.kind = 43;  	break;  }  case 36: {  	t.kind = 44;  	break;  }  case 37: {  	t.kind = 46;  	break;  }  case 38: {  	t.kind = 47;  	break;  }  case 39: {  	t.kind = 48;  	break;  }  case 40:  	if (ch == '-') {  		AddCh ();  		goto case 9;  	}  	else {  		t.kind = 24;  		break;  	}  case 41:  	if (ch == '=') {  		AddCh ();  		goto case 26;  	}  	else {  		t.kind = 31;  		break;  	}  case 42:  	if (ch == '=') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 32;  		break;  	}  case 43:  	if (ch == '-' || ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 1;  	}  	else if (ch == 92) {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 1;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  }  
Missing Default,breinstormin.tools.web.css.Model,Attribute,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Attribute.cs,ToString,The following switch statement is missing a default case: switch (op.Value) {  case AttributeOperator.Equals:  	txt.Append ("=");  	break;  case AttributeOperator.InList:  	txt.Append ("~=");  	break;  case AttributeOperator.Hyphenated:  	txt.Append ("|=");  	break;  case AttributeOperator.BeginsWith:  	txt.Append ("$=");  	break;  case AttributeOperator.EndsWith:  	txt.Append ("^=");  	break;  case AttributeOperator.Contains:  	txt.Append ("*=");  	break;  }  
Missing Default,breinstormin.tools.web.css.Model,Directive,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Directive.cs,ToString,The following switch statement is missing a default case: switch (type) {  case DirectiveType.Charset:  	return ToCharSetString (start);  case DirectiveType.Page:  	return ToPageString (start);  case DirectiveType.Media:  	return ToMediaString (nesting);  case DirectiveType.Import:  	return ToImportString ();  case DirectiveType.FontFace:  	return ToFontFaceString (start);  }  
Missing Default,breinstormin.tools.web.css.Model,SimpleSelector,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\SimpleSelector.cs,ToString,The following switch statement is missing a default case: switch (combinator.Value) {  case breinstormin.tools.web.css.Model.Combinator.PrecededImmediatelyBy:  	txt.Append (" + ");  	break;  case breinstormin.tools.web.css.Model.Combinator.ChildOf:  	txt.Append (" > ");  	break;  case breinstormin.tools.web.css.Model.Combinator.PrecededBy:  	txt.Append (" ~ ");  	break;  }  
Missing Default,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following switch statement is missing a default case: switch (i) {  case 0:  	fr = GetRGBValue (function.Expression.Terms [i]);  	break;  case 1:  	fg = GetRGBValue (function.Expression.Terms [i]);  	break;  case 2:  	fb = GetRGBValue (function.Expression.Terms [i]);  	break;  }  
Missing Default,breinstormin.tools.web.css.Model,Term,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\web\css\Model\Term.cs,ToColor,The following switch statement is missing a default case: switch (i) {  case 0:  	h = GetHueValue (function.Expression.Terms [i]);  	break;  case 1:  	s = GetRGBValue (function.Expression.Terms [i]);  	break;  case 2:  	v = GetRGBValue (function.Expression.Terms [i]);  	break;  }  
Missing Default,DotNet.Tools.WIN32,NativeMethodsHelper,C:\repos\xescpereta_breinstormin\breinstormin\breinstormin.tools\WIN32\Win32Api.cs,ExtractIPAddress,The following switch statement is missing a default case: switch (family) {  case System.Net.Sockets.AddressFamily.InterNetwork:  	var v4Addr = new byte[4];  	// TODO: I'm not sure what type of address structure this is that we need to start at offset 2.  	Array.Copy (rawAddress' 2' v4Addr' 0' 4);  	return new System.Net.IPAddress (v4Addr);  case System.Net.Sockets.AddressFamily.InterNetworkV6:  	var v6Addr = new byte[16];  	Array.Copy (rawAddress' 2' v6Addr' 0' 16);  	return new System.Net.IPAddress (v6Addr);  }  
